#include "crc/bissCrc6.hpp"

extern "C"
{
	extern uint8_t crcC;
}
uint8_t BissCrc6::tableCRC6[64] = {
	0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09,
	0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
	0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39,
	0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
	0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
	0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32,
	0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A,
	0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02
};

BissCrc6::BissCrc6()
{
	dataNoCrc.all = 0;
}

uint8_t BissCrc6::calcCrc_raw(uint64_t data)
{
    uint8_t crc;
    uint64_t tmp;
    tmp = ((data >> 30) & 0x3F);

    for (int shift = 24; shift >=0; shift -= 6)
    {
        crc = ((data >> shift) & 0x3F);
        tmp = crc ^ tableCRC6[tmp];
    }

    crc = tableCRC6[tmp];
    crc = crc ^ 0x3F;
    return crc;
}

uint8_t BissCrc6::calcCrc(EncFrame data)
{
	dataNoCrc.bit.pos = data.bit.pos;
	dataNoCrc.bit.warn = data.bit.warn;
	dataNoCrc.bit.err = data.bit.err;

	return calcCrc_raw(dataNoCrc.all);
}

bool BissCrc6::checkCrc(EncFrame data)
{
	uint8_t crc = calcCrc(data);
	crcC = crc;
	return crc == data.bit.crc;
}
