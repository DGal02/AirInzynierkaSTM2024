
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec8  08010340  08010340  00020340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08012208  08012208  00022208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012214  08012214  00022214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  24000000  08012218  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000109c8  240000d8  080122ec  000300d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24010aa0  080122ec  00030aa0  2**0
                  ALLOC
  8 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY
 11 .debug_info   00052e17  00000000  00000000  00030145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b33e  00000000  00000000  00082f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000022b8  00000000  00000000  0008e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000034cd  00000000  00000000  00090558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004848f  00000000  00000000  00093a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000528e4  00000000  00000000  000dbeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018b444  00000000  00000000  0012e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007f54  00000000  00000000  002b9bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001dc60  00000000  00000000  002c1b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008c  00000000  00000000  002df790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d8 	.word	0x240000d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010328 	.word	0x08010328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000dc 	.word	0x240000dc
 80002dc:	08010328 	.word	0x08010328

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <_Z41__static_initialization_and_destruction_0ii>:
}

uint8_t calcCrc(uint64_t data)
{
	return bissCrc.calcCrc_raw(data);
}
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d107      	bne.n	80003a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000396:	4293      	cmp	r3, r2
 8000398:	d102      	bne.n	80003a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
	BissCrc6 bissCrc;
 800039a:	4803      	ldr	r0, [pc, #12]	; (80003a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800039c:	f001 f890 	bl	80014c0 <_ZN8BissCrc6C1Ev>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	240000f8 	.word	0x240000f8

080003ac <_GLOBAL__sub_I_bissCrc>:
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ffe3 	bl	8000380 <_Z41__static_initialization_and_destruction_0ii>
 80003ba:	bd80      	pop	{r7, pc}

080003bc <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
    * Useful for debugging issues.
    */
   __BKPT(0);
 80003bc:	be00      	bkpt	0x0000
}
 80003be:	4770      	bx	lr

080003c0 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	bfb8      	it	lt
 80003ce:	425b      	neglt	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <_Z6cordiciPiS_i>:
0x0001FFFF, 0x0000FFFF, 0x00007FFF, 0x00003FFF, 0x00001FFF, 0x00000FFF, 0x000007FF,
0x000003FF, 0x000001FF, 0x000000FF, 0x0000007F, 0x0000003F, 0x0000001F, 0x0000000F,
0x00000008, 0x00000004, 0x00000002, 0x00000001, 0x00000000, };

inline void cordic(int theta, int *s, int *c, int n)
{
 80003dc:	b480      	push	{r7}
 80003de:	b08d      	sub	sp, #52	; 0x34
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
 80003e8:	603b      	str	r3, [r7, #0]
  int k, d, tx, ty, tz;
  int x=cordic_1K,y=0,z=theta;
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <_Z6cordiciPiS_i+0xa0>)
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80003ee:	2300      	movs	r3, #0
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	623b      	str	r3, [r7, #32]
  n = (n>CORDIC_NTAB) ? CORDIC_NTAB : n;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	2b20      	cmp	r3, #32
 80003fa:	bfa8      	it	ge
 80003fc:	2320      	movge	r3, #32
 80003fe:	603b      	str	r3, [r7, #0]
  for (k=0; k<n; ++k)
 8000400:	2300      	movs	r3, #0
 8000402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000404:	e02a      	b.n	800045c <_Z6cordiciPiS_i+0x80>
  {
    d = z>>31;
 8000406:	6a3b      	ldr	r3, [r7, #32]
 8000408:	17db      	asrs	r3, r3, #31
 800040a:	61fb      	str	r3, [r7, #28]
    //get sign. for other architectures, you might want to use the more portable version
    //d = z>=0 ? 0 : -1;
    tx = x - (((y>>k) ^ d) - d);
 800040c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000410:	411a      	asrs	r2, r3
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	405a      	eors	r2, r3
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	61bb      	str	r3, [r7, #24]
    ty = y + (((x>>k) ^ d) - d);
 8000420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000424:	411a      	asrs	r2, r3
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	405a      	eors	r2, r3
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000430:	4413      	add	r3, r2
 8000432:	617b      	str	r3, [r7, #20]
    tz = z - ((cordic_ctab[k] ^ d) - d);
 8000434:	4a12      	ldr	r2, [pc, #72]	; (8000480 <_Z6cordiciPiS_i+0xa4>)
 8000436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	405a      	eors	r2, r3
 8000440:	69fb      	ldr	r3, [r7, #28]
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	6a3a      	ldr	r2, [r7, #32]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	613b      	str	r3, [r7, #16]
    x = tx; y = ty; z = tz;
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	623b      	str	r3, [r7, #32]
  for (k=0; k<n; ++k)
 8000456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000458:	3301      	adds	r3, #1
 800045a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800045c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	429a      	cmp	r2, r3
 8000462:	dbd0      	blt.n	8000406 <_Z6cordiciPiS_i+0x2a>
  }
 *c = x; *s = y;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800046e:	601a      	str	r2, [r3, #0]
}
 8000470:	bf00      	nop
 8000472:	3734      	adds	r7, #52	; 0x34
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	26dd3b6a 	.word	0x26dd3b6a
 8000480:	08010340 	.word	0x08010340
 8000484:	00000000 	.word	0x00000000

08000488 <_Z13shiftAngle180f>:

inline float shiftAngle180(float phi)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	ed87 0a01 	vstr	s0, [r7, #4]
	while(phi < -M_PI || phi > M_PI)
 8000492:	e02f      	b.n	80004f4 <_Z13shiftAngle180f+0x6c>
	{
		if (phi < -M_PI)
 8000494:	edd7 7a01 	vldr	s15, [r7, #4]
 8000498:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800049c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000538 <_Z13shiftAngle180f+0xb0>
 80004a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80004a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004a8:	d50c      	bpl.n	80004c4 <_Z13shiftAngle180f+0x3c>
			phi += two_pi;
 80004aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80004ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004b2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000540 <_Z13shiftAngle180f+0xb8>
 80004b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80004ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80004be:	edc7 7a01 	vstr	s15, [r7, #4]
 80004c2:	e017      	b.n	80004f4 <_Z13shiftAngle180f+0x6c>
		else if (phi > M_PI)
 80004c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80004c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004cc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000548 <_Z13shiftAngle180f+0xc0>
 80004d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	dc00      	bgt.n	80004dc <_Z13shiftAngle180f+0x54>
 80004da:	e00b      	b.n	80004f4 <_Z13shiftAngle180f+0x6c>
			phi -= two_pi;
 80004dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80004e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004e4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000540 <_Z13shiftAngle180f+0xb8>
 80004e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80004ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80004f0:	edc7 7a01 	vstr	s15, [r7, #4]
	while(phi < -M_PI || phi > M_PI)
 80004f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80004f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80004fc:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000538 <_Z13shiftAngle180f+0xb0>
 8000500:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000508:	d4c4      	bmi.n	8000494 <_Z13shiftAngle180f+0xc>
 800050a:	edd7 7a01 	vldr	s15, [r7, #4]
 800050e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000512:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000548 <_Z13shiftAngle180f+0xc0>
 8000516:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800051e:	dcb9      	bgt.n	8000494 <_Z13shiftAngle180f+0xc>
	}

	return phi;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	ee07 3a90 	vmov	s15, r3
}
 8000526:	eeb0 0a67 	vmov.f32	s0, s15
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	f3af 8000 	nop.w
 8000538:	54442d18 	.word	0x54442d18
 800053c:	c00921fb 	.word	0xc00921fb
 8000540:	54442d18 	.word	0x54442d18
 8000544:	401921fb 	.word	0x401921fb
 8000548:	54442d18 	.word	0x54442d18
 800054c:	400921fb 	.word	0x400921fb

08000550 <_Z12shiftAngle90Pf>:

inline int shiftAngle90(float* phi)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    if (*phi < -half_pi)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000562:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80005e0 <_Z12shiftAngle90Pf+0x90>
 8000566:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800056a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800056e:	d510      	bpl.n	8000592 <_Z12shiftAngle90Pf+0x42>
    {
        *phi = *phi + M_PI;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	edd3 7a00 	vldr	s15, [r3]
 8000576:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800057a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80005e8 <_Z12shiftAngle90Pf+0x98>
 800057e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000582:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	edc3 7a00 	vstr	s15, [r3]
        return -1;
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	e01d      	b.n	80005ce <_Z12shiftAngle90Pf+0x7e>
    }
    else if (*phi > half_pi)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	edd3 7a00 	vldr	s15, [r3]
 8000598:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800059c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80005f0 <_Z12shiftAngle90Pf+0xa0>
 80005a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80005a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a8:	dd10      	ble.n	80005cc <_Z12shiftAngle90Pf+0x7c>
    {
        *phi = *phi - M_PI;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80005b4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80005e8 <_Z12shiftAngle90Pf+0x98>
 80005b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80005bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	edc3 7a00 	vstr	s15, [r3]
        return -1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	e000      	b.n	80005ce <_Z12shiftAngle90Pf+0x7e>
    }
    else
    {
        return 1;
 80005cc:	2301      	movs	r3, #1
    }
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	f3af 8000 	nop.w
 80005e0:	54442d18 	.word	0x54442d18
 80005e4:	bff921fb 	.word	0xbff921fb
 80005e8:	54442d18 	.word	0x54442d18
 80005ec:	400921fb 	.word	0x400921fb
 80005f0:	54442d18 	.word	0x54442d18
 80005f4:	3ff921fb 	.word	0x3ff921fb

080005f8 <_Z9sinCordicfPf>:

inline void sinCordic(float theta, float* sinC)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000602:	6038      	str	r0, [r7, #0]
	int s, c, quadAdj;
	float p;
	p = shiftAngle180(theta);
 8000604:	ed97 0a01 	vldr	s0, [r7, #4]
 8000608:	f7ff ff3e 	bl	8000488 <_Z13shiftAngle180f>
 800060c:	eef0 7a40 	vmov.f32	s15, s0
 8000610:	edc7 7a02 	vstr	s15, [r7, #8]
    quadAdj = shiftAngle90(&p);
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff99 	bl	8000550 <_Z12shiftAngle90Pf>
 800061e:	6178      	str	r0, [r7, #20]
	cordic((p*MUL), &s, &c, 32);
 8000620:	edd7 7a02 	vldr	s15, [r7, #8]
 8000624:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000628:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8000670 <_Z9sinCordicfPf+0x78>
 800062c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000630:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000634:	f107 020c 	add.w	r2, r7, #12
 8000638:	f107 0110 	add.w	r1, r7, #16
 800063c:	2320      	movs	r3, #32
 800063e:	ee17 0a90 	vmov	r0, s15
 8000642:	f7ff fecb 	bl	80003dc <_Z6cordiciPiS_i>
	*sinC = quadAdj*s/MUL;
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000656:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8000670 <_Z9sinCordicfPf+0x78>
 800065a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800065e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	edc3 7a00 	vstr	s15, [r3]
}
 8000668:	bf00      	nop
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	00000000 	.word	0x00000000
 8000674:	41d00000 	.word	0x41d00000

08000678 <_ZN12SinGeneratorC1Ef>:
	uint32_t amp = 0;
	float omega = 0;
	uint32_t pos0 = 0;

public:
	SinGenerator(float Ts): Ts(Ts)
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	ed87 0a00 	vstr	s0, [r7]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
	{

	}
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	0000      	movs	r0, r0
 80006b4:	0000      	movs	r0, r0
	...

080006b8 <_ZN12SinGenerator10initializeEmmf>:

	void initialize(uint32_t pos0, uint32_t amp, float freq)
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	ed87 0a00 	vstr	s0, [r7]
	{
		this->pos0 = pos0;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	611a      	str	r2, [r3, #16]
		this->amp = amp;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	609a      	str	r2, [r3, #8]
		omega = 2 * M_PI * freq;
 80006d4:	edd7 7a00 	vldr	s15, [r7]
 80006d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006dc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000700 <_ZN12SinGenerator10initializeEmmf+0x48>
 80006e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	edc3 7a03 	vstr	s15, [r3, #12]

		counter = 0;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
	}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	54442d18 	.word	0x54442d18
 8000704:	401921fb 	.word	0x401921fb

08000708 <_ZN12SinGenerator4calcEv>:

	uint32_t calc()
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	{
		float sinVal;

		counter++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	605a      	str	r2, [r3, #4]
		float t = Ts * counter;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	ed93 7a00 	vldr	s14, [r3]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	ee07 3a90 	vmov	s15, r3
 8000728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800072c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000730:	edc7 7a05 	vstr	s15, [r7, #20]
		sinCordic(omega * t, &sinVal);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	ed93 7a03 	vldr	s14, [r3, #12]
 800073a:	edd7 7a05 	vldr	s15, [r7, #20]
 800073e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4618      	mov	r0, r3
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	f7ff ff54 	bl	80005f8 <_Z9sinCordicfPf>

		uint32_t pos = pos0 + (int32_t)(amp * sinVal);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	6892      	ldr	r2, [r2, #8]
 8000758:	ee07 2a90 	vmov	s15, r2
 800075c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000760:	edd7 7a03 	vldr	s15, [r7, #12]
 8000764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800076c:	ee17 2a90 	vmov	r2, s15
 8000770:	4413      	add	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
		return pos;
 8000774:	693b      	ldr	r3, [r7, #16]
	}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_ZN19TrajectoryGeneratorC1Ef>:

public:
	TrajMode trajectoryMode = TrajMode::Point;
	uint32_t pos = 0;

	TrajectoryGenerator(float Ts): Ts(Ts)
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	ed87 0a00 	vstr	s0, [r7]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	eeb0 0a67 	vmov.f32	s0, s15
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff6a 	bl	8000678 <_ZN12SinGeneratorC1Ef>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	761a      	strb	r2, [r3, #24]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
	{

	}
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZN19TrajectoryGenerator4calcEv>:

	uint32_t calc()
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	{
		trajectoryMode = (TrajMode)trajMode;
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <_ZN19TrajectoryGenerator4calcEv+0xa4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	61da      	str	r2, [r3, #28]
		isInitialized = isTrajInit;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <_ZN19TrajectoryGenerator4calcEv+0xa8>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	761a      	strb	r2, [r3, #24]

		if (!isInitialized)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7e1b      	ldrb	r3, [r3, #24]
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d018      	beq.n	8000824 <_ZN19TrajectoryGenerator4calcEv+0x64>
		{
			switch(trajectoryMode)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d00d      	beq.n	8000816 <_ZN19TrajectoryGenerator4calcEv+0x56>
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10c      	bne.n	8000818 <_ZN19TrajectoryGenerator4calcEv+0x58>
			{
			case TrajMode::Point:
				break;
			case TrajMode::Sinus:
				sinGen.initialize(desiredPos, 8000, 0.1);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3304      	adds	r3, #4
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <_ZN19TrajectoryGenerator4calcEv+0xac>)
 8000804:	6811      	ldr	r1, [r2, #0]
 8000806:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8000870 <_ZN19TrajectoryGenerator4calcEv+0xb0>
 800080a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff52 	bl	80006b8 <_ZN12SinGenerator10initializeEmmf>
				break;
 8000814:	e000      	b.n	8000818 <_ZN19TrajectoryGenerator4calcEv+0x58>
				break;
 8000816:	bf00      	nop
			}
			isInitialized = true;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2201      	movs	r2, #1
 800081c:	761a      	strb	r2, [r3, #24]
			isTrajInit = 1;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <_ZN19TrajectoryGenerator4calcEv+0xa8>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
		}

		if (isInitialized)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7e1b      	ldrb	r3, [r3, #24]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d014      	beq.n	8000856 <_ZN19TrajectoryGenerator4calcEv+0x96>
		{
			switch(trajectoryMode)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <_ZN19TrajectoryGenerator4calcEv+0x7a>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d005      	beq.n	8000844 <_ZN19TrajectoryGenerator4calcEv+0x84>
 8000838:	e00d      	b.n	8000856 <_ZN19TrajectoryGenerator4calcEv+0x96>
			{
			case TrajMode::Point:
				pos = desiredPos;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <_ZN19TrajectoryGenerator4calcEv+0xac>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	621a      	str	r2, [r3, #32]
				break;
 8000842:	e008      	b.n	8000856 <_ZN19TrajectoryGenerator4calcEv+0x96>
			case TrajMode::Sinus:
				pos = sinGen.calc();
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3304      	adds	r3, #4
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <_ZN12SinGenerator4calcEv>
 800084e:	4602      	mov	r2, r0
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	621a      	str	r2, [r3, #32]
				break;
 8000854:	bf00      	nop
			}
		}
		return pos;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a1b      	ldr	r3, [r3, #32]
	}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	24000324 	.word	0x24000324
 8000868:	24000311 	.word	0x24000311
 800086c:	24000000 	.word	0x24000000
 8000870:	3dcccccd 	.word	0x3dcccccd
 8000874:	00000000 	.word	0x00000000

08000878 <_ZN12MotionParamsC1Ev>:
extern "C"
{
	#include "main.h"
}

struct MotionParams
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	a30f      	add	r3, pc, #60	; (adr r3, 80008c0 <_ZN12MotionParamsC1Ev+0x48>)
 8000884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000888:	e9c1 2300 	strd	r2, r3, [r1]
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	a30e      	add	r3, pc, #56	; (adr r3, 80008c8 <_ZN12MotionParamsC1Ev+0x50>)
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2264      	movs	r2, #100	; 0x64
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2209      	movs	r2, #9
 80008aa:	619a      	str	r2, [r3, #24]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	f3af 8000 	nop.w
 80008c0:	eb851eb8 	.word	0xeb851eb8
 80008c4:	3faeb851 	.word	0x3faeb851
 80008c8:	eb851eb8 	.word	0xeb851eb8
 80008cc:	3fceb851 	.word	0x3fceb851

080008d0 <_ZN17StepperControllerC1Ev>:
	uint32_t prescaler;

public:
	int32_t posError = 0;

	StepperController()
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	{
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffcc 	bl	8000878 <_ZN12MotionParamsC1Ev>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38

	}
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN17StepperController9calcInputEmm>:

	void calcInput(uint32_t desPos, uint32_t pos)
 8000904:	b580      	push	{r7, lr}
 8000906:	ed2d 8b02 	vpush	{d8}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
	{
		double u;
		uint32_t u_floor;

		posError = desPos - pos;
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	639a      	str	r2, [r3, #56]	; 0x38
		posiError = posError;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000924:	4a46      	ldr	r2, [pc, #280]	; (8000a40 <_ZN17StepperController9calcInputEmm+0x13c>)
 8000926:	6013      	str	r3, [r2, #0]

		if ((uint32_t)abs(posError) < motionParams.deadZoneRange)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fd47 	bl	80003c0 <_ZSt3absl>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	429a      	cmp	r2, r3
 800093c:	bf34      	ite	cc
 800093e:	2301      	movcc	r3, #1
 8000940:	2300      	movcs	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <_ZN17StepperController9calcInputEmm+0x54>
		{
			isSignalGenerated = false;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			isClocked = 0; //debug
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <_ZN17StepperController9calcInputEmm+0x140>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e006      	b.n	8000966 <_ZN17StepperController9calcInputEmm+0x62>
		}
		else
		{
			isSignalGenerated = true;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			isClocked = 1; //debug
 8000960:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <_ZN17StepperController9calcInputEmm+0x140>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
		}

		if (posError > 0)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800096a:	2b00      	cmp	r3, #0
 800096c:	dd06      	ble.n	800097c <_ZN17StepperController9calcInputEmm+0x78>
		{
			direction = Direction::Forward;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
			directionToSet = 0; //debug
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <_ZN17StepperController9calcInputEmm+0x144>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
 800097a:	e005      	b.n	8000988 <_ZN17StepperController9calcInputEmm+0x84>
		}
		else
		{
			direction = Direction::Backward;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2201      	movs	r2, #1
 8000980:	621a      	str	r2, [r3, #32]
			directionToSet = 1; //debug
 8000982:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <_ZN17StepperController9calcInputEmm+0x144>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
		}

		if (posError == 0)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098c:	2b00      	cmp	r3, #0
 800098e:	d108      	bne.n	80009a2 <_ZN17StepperController9calcInputEmm+0x9e>
			u = motionParams.maxPrescaler;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	ee07 3a90 	vmov	s15, r3
 8000998:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800099c:	ed87 7b06 	vstr	d7, [r7, #24]
 80009a0:	e012      	b.n	80009c8 <_ZN17StepperController9calcInputEmm+0xc4>
		else
			u = (double)motionParams.controllerGain / abs(posError);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd04 	bl	80003c0 <_ZSt3absl>
 80009b8:	ee07 0a90 	vmov	s15, r0
 80009bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009c0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80009c4:	ed87 7b06 	vstr	d7, [r7, #24]

		u_floor = (uint32_t)floor(u);
 80009c8:	ed97 0b06 	vldr	d0, [r7, #24]
 80009cc:	f00e fbcc 	bl	800f168 <floor>
 80009d0:	eeb0 7b40 	vmov.f64	d7, d0
 80009d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009d8:	ee17 3a90 	vmov	r3, s15
 80009dc:	617b      	str	r3, [r7, #20]
		u_sat = MIN(u_floor, motionParams.maxPrescaler);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d302      	bcc.n	80009ee <_ZN17StepperController9calcInputEmm+0xea>
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	e000      	b.n	80009f0 <_ZN17StepperController9calcInputEmm+0xec>
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	62d3      	str	r3, [r2, #44]	; 0x2c

		if (u_sat < prescaler)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d20c      	bcs.n	8000a1a <_ZN17StepperController9calcInputEmm+0x116>
			counter = MIN(counter, u_sat);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d202      	bcs.n	8000a12 <_ZN17StepperController9calcInputEmm+0x10e>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	e001      	b.n	8000a16 <_ZN17StepperController9calcInputEmm+0x112>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30

		prescaler = u_sat;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
		frequencyPrescaler = u_sat; //debug
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_ZN17StepperController9calcInputEmm+0x148>)
 8000a2a:	701a      	strb	r2, [r3, #0]

		setDirection();
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f000 f83b 	bl	8000aa8 <_ZN17StepperController12setDirectionEv>
	}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	ecbd 8b02 	vpop	{d8}
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000320 	.word	0x24000320
 8000a44:	24000310 	.word	0x24000310
 8000a48:	240001ec 	.word	0x240001ec
 8000a4c:	24000004 	.word	0x24000004

08000a50 <_ZN17StepperController14generateSignalEv>:

	void generateSignal()
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	{
		if (isSignalGenerated)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d019      	beq.n	8000a96 <_ZN17StepperController14generateSignalEv+0x46>
		{
			if (counter == prescaler)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10a      	bne.n	8000a84 <_ZN17StepperController14generateSignalEv+0x34>
			{
				HAL_GPIO_TogglePin(S_CLK_GPIO_Port, S_CLK_Pin);
 8000a6e:	2108      	movs	r1, #8
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <_ZN17StepperController14generateSignalEv+0x50>)
 8000a72:	f002 fbb1 	bl	80031d8 <HAL_GPIO_TogglePin>
				counter = 0;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	631a      	str	r2, [r3, #48]	; 0x30
				cntFreq = 0; //debug
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <_ZN17StepperController14generateSignalEv+0x54>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
			{
				counter++;
				cntFreq = counter; //debug
			}
		}
	}
 8000a82:	e008      	b.n	8000a96 <_ZN17StepperController14generateSignalEv+0x46>
				counter++;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	631a      	str	r2, [r3, #48]	; 0x30
				cntFreq = counter; //debug
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <_ZN17StepperController14generateSignalEv+0x54>)
 8000a94:	6013      	str	r3, [r2, #0]
	}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	58021800 	.word	0x58021800
 8000aa4:	240001d4 	.word	0x240001d4

08000aa8 <_ZN17StepperController12setDirectionEv>:

	void setDirection()
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	{
		if (direction != currentDirection)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a1a      	ldr	r2, [r3, #32]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d007      	beq.n	8000acc <_ZN17StepperController12setDirectionEv+0x24>
		{
			HAL_GPIO_TogglePin(S_DIR_GPIO_Port, S_DIR_Pin);
 8000abc:	2104      	movs	r1, #4
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <_ZN17StepperController12setDirectionEv+0x2c>)
 8000ac0:	f002 fb8a 	bl	80031d8 <HAL_GPIO_TogglePin>
			currentDirection = direction;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58021800 	.word	0x58021800

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
EncoderDriver encDriver(&hspi3);
TrajectoryGenerator trajGen(1e-4);
StepperController stepperController;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d102      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
		TIM4_IRQ_Callback();
 8000ae8:	f000 f81a 	bl	8000b20 <TIM4_IRQ_Callback>
	else if (htim == &htim5) {
		TIM5_IRQ_Callback();
	} else if (htim->Instance == TIM6) {
	    HAL_IncTick();
	}
}
 8000aec:	e00d      	b.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x32>
	else if (htim == &htim5) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d102      	bne.n	8000afc <HAL_TIM_PeriodElapsedCallback+0x24>
		TIM5_IRQ_Callback();
 8000af6:	f000 f81d 	bl	8000b34 <TIM5_IRQ_Callback>
}
 8000afa:	e006      	b.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x32>
	} else if (htim->Instance == TIM6) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x32>
	    HAL_IncTick();
 8000b06:	f001 f8d1 	bl	8001cac <HAL_IncTick>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	24000278 	.word	0x24000278
 8000b18:	240002c4 	.word	0x240002c4
 8000b1c:	40001000 	.word	0x40001000

08000b20 <TIM4_IRQ_Callback>:

/* Set clock signal to control stepper motor */
void TIM4_IRQ_Callback()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	stepperController.generateSignal();
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM4_IRQ_Callback+0x10>)
 8000b26:	f7ff ff93 	bl	8000a50 <_ZN17StepperController14generateSignalEv>
//		else
//		{
//			cntFreq++;
//		}
//	}
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000190 	.word	0x24000190

08000b34 <TIM5_IRQ_Callback>:

/* Read Encoder and set control signal */
void TIM5_IRQ_Callback()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
//	readRequest();
	encDriver.readRequest();
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <TIM5_IRQ_Callback+0x10>)
 8000b3a:	f000 ff2b 	bl	8001994 <_ZN13EncoderDriver11readRequestEv>
//	SPI3_ReceiveCompleteCallback();
//	readEncoder();
//	trajectoryGenerator();
//	controller(desiredPos);
//	engineDirectionControl();
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000100 	.word	0x24000100

08000b48 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_SPI_RxCpltCallback+0x1c>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d101      	bne.n	8000b5c <HAL_SPI_RxCpltCallback+0x14>
	{
		SPI3_ReceiveCompleteCallback();
 8000b58:	f000 f806 	bl	8000b68 <SPI3_ReceiveCompleteCallback>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	240001f0 	.word	0x240001f0

08000b68 <SPI3_ReceiveCompleteCallback>:

void SPI3_ReceiveCompleteCallback()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	uint32_t pos = encDriver.readEncoder();
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <SPI3_ReceiveCompleteCallback+0x28>)
 8000b70:	f000 ff36 	bl	80019e0 <_ZN13EncoderDriver11readEncoderEv>
 8000b74:	6078      	str	r0, [r7, #4]
	uint32_t desPos = trajGen.calc();
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <SPI3_ReceiveCompleteCallback+0x2c>)
 8000b78:	f7ff fe22 	bl	80007c0 <_ZN19TrajectoryGenerator4calcEv>
 8000b7c:	6038      	str	r0, [r7, #0]
	stepperController.calcInput(desPos, pos);
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6839      	ldr	r1, [r7, #0]
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <SPI3_ReceiveCompleteCallback+0x30>)
 8000b84:	f7ff febe 	bl	8000904 <_ZN17StepperController9calcInputEmm>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24000100 	.word	0x24000100
 8000b94:	24000168 	.word	0x24000168
 8000b98:	24000190 	.word	0x24000190

08000b9c <_Z41__static_initialization_and_destruction_0ii>:
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d110      	bne.n	8000bce <_Z41__static_initialization_and_destruction_0ii+0x32>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10b      	bne.n	8000bce <_Z41__static_initialization_and_destruction_0ii+0x32>
EncoderDriver encDriver(&hspi3);
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bba:	f000 fd85 	bl	80016c8 <_ZN13EncoderDriverC1EP19__SPI_HandleTypeDef>
TrajectoryGenerator trajGen(1e-4);
 8000bbe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000be0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000bc4:	f7ff fddb 	bl	800077e <_ZN19TrajectoryGeneratorC1Ef>
StepperController stepperController;
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000bca:	f7ff fe81 	bl	80008d0 <_ZN17StepperControllerC1Ev>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	240001f0 	.word	0x240001f0
 8000bdc:	24000100 	.word	0x24000100
 8000be0:	38d1b717 	.word	0x38d1b717
 8000be4:	24000168 	.word	0x24000168
 8000be8:	24000190 	.word	0x24000190

08000bec <_GLOBAL__sub_I_encDriver>:
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff ffd1 	bl	8000b9c <_Z41__static_initialization_and_destruction_0ii>
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* init code for LWIP */
  MX_LWIP_Init();
 8000bfc:	f004 bdd2 	b.w	80057a4 <MX_LWIP_Init>

08000c00 <SystemClock_Config>:
{
 8000c00:	b530      	push	{r4, r5, lr}
 8000c02:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c04:	224c      	movs	r2, #76	; 0x4c
 8000c06:	2100      	movs	r1, #0
 8000c08:	a809      	add	r0, sp, #36	; 0x24
 8000c0a:	f00e fd3e 	bl	800f68a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0e:	2220      	movs	r2, #32
 8000c10:	2100      	movs	r1, #0
 8000c12:	a801      	add	r0, sp, #4
 8000c14:	f00e fd39 	bl	800f68a <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f002 faf7 	bl	800320c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <SystemClock_Config+0xb4>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <SystemClock_Config+0xb8>)
 8000c24:	9100      	str	r1, [sp, #0]
 8000c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c28:	f021 0101 	bic.w	r1, r1, #1
 8000c2c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	6993      	ldr	r3, [r2, #24]
 8000c38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4c:	6993      	ldr	r3, [r2, #24]
 8000c4e:	049b      	lsls	r3, r3, #18
 8000c50:	d5fc      	bpl.n	8000c4c <SystemClock_Config+0x4c>
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c52:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c56:	2402      	movs	r4, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c5a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5c:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c60:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c62:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c64:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c66:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000c68:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c6a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c6c:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000c6e:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c70:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c72:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c78:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c7a:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c7c:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f002 fb6d 	bl	800335c <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b108      	cbz	r0, 8000c8a <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2203      	movs	r2, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	253f      	movs	r5, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c8e:	4621      	mov	r1, r4
 8000c90:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	e9cd 5201 	strd	r5, r2, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c98:	2208      	movs	r2, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c9a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c9e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ca0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca4:	f002 fe50 	bl	8003948 <HAL_RCC_ClockConfig>
 8000ca8:	b108      	cbz	r0, 8000cae <SystemClock_Config+0xae>
 8000caa:	b672      	cpsid	i
  while (1)
 8000cac:	e7fe      	b.n	8000cac <SystemClock_Config+0xac>
}
 8000cae:	b01d      	add	sp, #116	; 0x74
 8000cb0:	bd30      	pop	{r4, r5, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58000400 	.word	0x58000400
 8000cb8:	58024800 	.word	0x58024800

08000cbc <main>:
{
 8000cbc:	b580      	push	{r7, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cbe:	2400      	movs	r4, #0
{
 8000cc0:	b090      	sub	sp, #64	; 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cc2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cc4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000cc8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
 8000ccc:	f001 f86e 	bl	8001dac <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cd0:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cd4:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cd8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cda:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cde:	930e      	str	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ce0:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce4:	f001 f880 	bl	8001de8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000ce8:	4abc      	ldr	r2, [pc, #752]	; (8000fdc <main+0x320>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000cea:	4bbd      	ldr	r3, [pc, #756]	; (8000fe0 <main+0x324>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cec:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000cee:	920c      	str	r2, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000cf0:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000cf2:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000cf6:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cfa:	f001 f875 	bl	8001de8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000cfe:	4bb9      	ldr	r3, [pc, #740]	; (8000fe4 <main+0x328>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d00:	2202      	movs	r2, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d02:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d04:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000d08:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000d0a:	2308      	movs	r3, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d0c:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000d10:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d14:	f88d 5039 	strb.w	r5, [sp, #57]	; 0x39
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d18:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d1c:	f001 f864 	bl	8001de8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d20:	2004      	movs	r0, #4
 8000d22:	f001 f851 	bl	8001dc8 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000d26:	4ab0      	ldr	r2, [pc, #704]	; (8000fe8 <main+0x32c>)
 8000d28:	6953      	ldr	r3, [r2, #20]
 8000d2a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000d2e:	d111      	bne.n	8000d54 <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d34:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d38:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d40:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d44:	6953      	ldr	r3, [r2, #20]
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d50:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d54:	48a4      	ldr	r0, [pc, #656]	; (8000fe8 <main+0x32c>)
 8000d56:	6943      	ldr	r3, [r0, #20]
 8000d58:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000d5c:	d124      	bne.n	8000da8 <main+0xec>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d62:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d66:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d6a:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d6e:	f3c3 344e 	ubfx	r4, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d72:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
 8000d76:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d78:	ea04 010e 	and.w	r1, r4, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d7c:	4663      	mov	r3, ip
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d7e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d82:	3b01      	subs	r3, #1
 8000d84:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d86:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000d8a:	d1f8      	bne.n	8000d7e <main+0xc2>
    } while(sets-- != 0U);
 8000d8c:	3c20      	subs	r4, #32
 8000d8e:	f114 0f20 	cmn.w	r4, #32
 8000d92:	d1f1      	bne.n	8000d78 <main+0xbc>
 8000d94:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d98:	6943      	ldr	r3, [r0, #20]
 8000d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9e:	6143      	str	r3, [r0, #20]
 8000da0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da4:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	2400      	movs	r4, #0
  HAL_Init();
 8000daa:	f000 ff4f 	bl	8001c4c <HAL_Init>
  SystemClock_Config();
 8000dae:	f7ff ff27 	bl	8000c00 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <main+0x330>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000db6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000dba:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc0:	2707      	movs	r7, #7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000dc6:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000dce:	f040 0004 	orr.w	r0, r0, #4
 8000dd2:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000dd6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000dda:	f000 0004 	and.w	r0, r0, #4
 8000dde:	9001      	str	r0, [sp, #4]
 8000de0:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000de6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000dea:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000dee:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000df2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000df6:	9002      	str	r0, [sp, #8]
 8000df8:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000dfe:	f040 0001 	orr.w	r0, r0, #1
 8000e02:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e06:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e0a:	f000 0001 	and.w	r0, r0, #1
 8000e0e:	9003      	str	r0, [sp, #12]
 8000e10:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e16:	f040 0002 	orr.w	r0, r0, #2
 8000e1a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e1e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e22:	f000 0002 	and.w	r0, r0, #2
 8000e26:	9004      	str	r0, [sp, #16]
 8000e28:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e2e:	f040 0008 	orr.w	r0, r0, #8
 8000e32:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e36:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e3a:	f000 0008 	and.w	r0, r0, #8
 8000e3e:	9005      	str	r0, [sp, #20]
 8000e40:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e46:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000e4a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e4e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e52:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8000e56:	9006      	str	r0, [sp, #24]
 8000e58:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000e5e:	f040 0010 	orr.w	r0, r0, #16
 8000e62:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e6a:	4861      	ldr	r0, [pc, #388]	; (8000ff0 <main+0x334>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	9307      	str	r3, [sp, #28]
 8000e72:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e74:	f002 f9ac 	bl	80031d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|S_EN_Pin, GPIO_PIN_RESET);
 8000e78:	4622      	mov	r2, r4
 8000e7a:	f240 4104 	movw	r1, #1028	; 0x404
 8000e7e:	485d      	ldr	r0, [pc, #372]	; (8000ff4 <main+0x338>)
 8000e80:	f002 f9a6 	bl	80031d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, S_DIR_Pin|S_CLK_Pin, GPIO_PIN_RESET);
 8000e84:	4622      	mov	r2, r4
 8000e86:	210c      	movs	r1, #12
 8000e88:	485b      	ldr	r0, [pc, #364]	; (8000ff8 <main+0x33c>)
 8000e8a:	f002 f9a1 	bl	80031d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e8e:	4622      	mov	r2, r4
 8000e90:	2102      	movs	r1, #2
 8000e92:	485a      	ldr	r0, [pc, #360]	; (8000ffc <main+0x340>)
 8000e94:	f002 f99c 	bl	80031d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e9e:	4858      	ldr	r0, [pc, #352]	; (8001000 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f002 f861 	bl	8002f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000eaa:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	a90b      	add	r1, sp, #44	; 0x2c
 8000eb0:	484f      	ldr	r0, [pc, #316]	; (8000ff0 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f002 f857 	bl	8002f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec2:	a90b      	add	r1, sp, #44	; 0x2c
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <main+0x338>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec6:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f002 f84c 	bl	8002f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|S_EN_Pin;
 8000ed4:	f240 4304 	movw	r3, #1028	; 0x404
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	a90b      	add	r1, sp, #44	; 0x2c
 8000eda:	4846      	ldr	r0, [pc, #280]	; (8000ff4 <main+0x338>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|S_EN_Pin;
 8000edc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee4:	f002 f842 	bl	8002f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S_DIR_Pin|S_CLK_Pin;
 8000ee8:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	a90b      	add	r1, sp, #44	; 0x2c
 8000eec:	4842      	ldr	r0, [pc, #264]	; (8000ff8 <main+0x33c>)
  GPIO_InitStruct.Pin = S_DIR_Pin|S_CLK_Pin;
 8000eee:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef6:	f002 f839 	bl	8002f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000efe:	2180      	movs	r1, #128	; 0x80
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f00:	483d      	ldr	r0, [pc, #244]	; (8000ff8 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f04:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f08:	a90b      	add	r1, sp, #44	; 0x2c
 8000f0a:	f002 f82f 	bl	8002f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f0e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	a90b      	add	r1, sp, #44	; 0x2c
 8000f14:	483b      	ldr	r0, [pc, #236]	; (8001004 <main+0x348>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f16:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f18:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f1c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f002 f823 	bl	8002f6c <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f26:	a90b      	add	r1, sp, #44	; 0x2c
 8000f28:	4834      	ldr	r0, [pc, #208]	; (8000ffc <main+0x340>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f2a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f002 f81b 	bl	8002f6c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f36:	4622      	mov	r2, r4
 8000f38:	2105      	movs	r1, #5
 8000f3a:	2017      	movs	r0, #23
 8000f3c:	f000 feea 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f40:	2017      	movs	r0, #23
 8000f42:	f000 ff25 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  hspi3.Instance = SPI3;
 8000f46:	4830      	ldr	r0, [pc, #192]	; (8001008 <main+0x34c>)
 8000f48:	4a30      	ldr	r2, [pc, #192]	; (800100c <main+0x350>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4e:	60c7      	str	r7, [r0, #12]
  hspi3.Instance = SPI3;
 8000f50:	6002      	str	r2, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f56:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f58:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f5c:	6042      	str	r2, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi3.Init.CRCPolynomial = 0x0;
 8000f62:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f64:	6082      	str	r2, [r0, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f66:	e9c0 3407 	strd	r3, r4, [r0, #28]
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8000f6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f72:	e9c0 3415 	strd	r3, r4, [r0, #84]	; 0x54
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f76:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f7a:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f7e:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f82:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f86:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f8a:	f003 fda9 	bl	8004ae0 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b108      	cbz	r0, 8000f96 <main+0x2da>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f92:	b672      	cpsid	i
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <main+0x2d8>
  htim5.Instance = TIM5;
 8000f96:	4c1e      	ldr	r4, [pc, #120]	; (8001010 <main+0x354>)
  htim5.Init.Prescaler = 120-1;
 8000f98:	2277      	movs	r2, #119	; 0x77
  htim5.Instance = TIM5;
 8000f9a:	491e      	ldr	r1, [pc, #120]	; (8001014 <main+0x358>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	9008      	str	r0, [sp, #32]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	60a3      	str	r3, [r4, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	61a3      	str	r3, [r4, #24]
  htim5.Init.Prescaler = 120-1;
 8000fa2:	e9c4 1200 	strd	r1, r2, [r4]
  htim5.Init.Period = 100-1;
 8000fa6:	2263      	movs	r2, #99	; 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa8:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8000fac:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fb0:	4620      	mov	r0, r4
  htim5.Init.Period = 100-1;
 8000fb2:	e9c4 2303 	strd	r2, r3, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fba:	f004 fb5f 	bl	800567c <HAL_TIM_Base_Init>
 8000fbe:	b108      	cbz	r0, 8000fc4 <main+0x308>
 8000fc0:	b672      	cpsid	i
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <main+0x306>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fc8:	a90b      	add	r1, sp, #44	; 0x2c
 8000fca:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fce:	f004 f93d 	bl	800524c <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b300      	cbz	r0, 8001018 <main+0x35c>
 8000fd6:	b672      	cpsid	i
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <main+0x31c>
 8000fda:	bf00      	nop
 8000fdc:	30020000 	.word	0x30020000
 8000fe0:	03010010 	.word	0x03010010
 8000fe4:	30040000 	.word	0x30040000
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020400 	.word	0x58020400
 8000ff4:	58020c00 	.word	0x58020c00
 8000ff8:	58021800 	.word	0x58021800
 8000ffc:	58021000 	.word	0x58021000
 8001000:	58020800 	.word	0x58020800
 8001004:	58020000 	.word	0x58020000
 8001008:	240001f0 	.word	0x240001f0
 800100c:	40003c00 	.word	0x40003c00
 8001010:	240002c4 	.word	0x240002c4
 8001014:	40000c00 	.word	0x40000c00
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001018:	4620      	mov	r0, r4
 800101a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001020:	f004 fb5e 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	b9b8      	cbnz	r0, 8001056 <main+0x39a>
  htim4.Instance = TIM4;
 8001026:	4c1f      	ldr	r4, [pc, #124]	; (80010a4 <main+0x3e8>)
  htim4.Init.Prescaler = 60-1;
 8001028:	233b      	movs	r3, #59	; 0x3b
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <main+0x3ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	900a      	str	r0, [sp, #40]	; 0x28
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	60a0      	str	r0, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	61a0      	str	r0, [r4, #24]
  htim4.Init.Prescaler = 60-1;
 8001034:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 500-1;
 8001038:	f240 13f3 	movw	r3, #499	; 0x1f3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103c:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8001040:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	e9cd 0008 	strd	r0, r0, [sp, #32]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001048:	4620      	mov	r0, r4
  htim4.Init.Period = 500-1;
 800104a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800104c:	f004 fb16 	bl	800567c <HAL_TIM_Base_Init>
 8001050:	b118      	cbz	r0, 800105a <main+0x39e>
 8001052:	b672      	cpsid	i
  while (1)
 8001054:	e7fe      	b.n	8001054 <main+0x398>
 8001056:	b672      	cpsid	i
 8001058:	e7fe      	b.n	8001058 <main+0x39c>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800105a:	a90b      	add	r1, sp, #44	; 0x2c
 800105c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105e:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001060:	f004 f8f4 	bl	800524c <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	b108      	cbz	r0, 800106c <main+0x3b0>
 8001068:	b672      	cpsid	i
  while (1)
 800106a:	e7fe      	b.n	800106a <main+0x3ae>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800106c:	4620      	mov	r0, r4
 800106e:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001074:	f004 fb34 	bl	80056e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4604      	mov	r4, r0
 800107a:	b108      	cbz	r0, 8001080 <main+0x3c4>
 800107c:	b672      	cpsid	i
  while (1)
 800107e:	e7fe      	b.n	800107e <main+0x3c2>
  osKernelInitialize();
 8001080:	f004 ff90 	bl	8005fa4 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001084:	4621      	mov	r1, r4
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <main+0x3f0>)
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <main+0x3f4>)
 800108a:	f004 ffbf 	bl	800600c <osThreadNew>
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <main+0x3f8>)
 8001090:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001092:	f004 ff99 	bl	8005fc8 <osKernelStart>
  dataEnc.all = 0;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <main+0x3fc>)
 8001098:	2000      	movs	r0, #0
 800109a:	2100      	movs	r1, #0
 800109c:	e9c3 0100 	strd	r0, r1, [r3]
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x3e4>
 80010a2:	bf00      	nop
 80010a4:	24000278 	.word	0x24000278
 80010a8:	40000800 	.word	0x40000800
 80010ac:	080103d8 	.word	0x080103d8
 80010b0:	08000bfd 	.word	0x08000bfd
 80010b4:	240001e8 	.word	0x240001e8
 80010b8:	240001e0 	.word	0x240001e0

080010bc <Error_Handler>:
 80010bc:	b672      	cpsid	i
  while (1)
 80010be:	e7fe      	b.n	80010be <Error_Handler+0x2>

080010c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	210f      	movs	r1, #15
 80010c6:	f06f 0001 	mvn.w	r0, #1
{
 80010ca:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 80010d0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	f044 0402 	orr.w	r4, r4, #2
 80010d6:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80010da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e6:	f000 fe15 	bl	8001d14 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ea:	4906      	ldr	r1, [pc, #24]	; (8001104 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ec:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f4:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 80010f6:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 80010f8:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 80010fa:	b002      	add	sp, #8
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	bf00      	nop
 8001100:	58024400 	.word	0x58024400
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b530      	push	{r4, r5, lr}
 800110e:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	2100      	movs	r1, #0
{
 8001112:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	22bc      	movs	r2, #188	; 0xbc
 8001116:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	9106      	str	r1, [sp, #24]
 800111a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800111e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001122:	f00e fab2 	bl	800f68a <memset>
  if(hspi->Instance==SPI3)
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_SPI_MspInit+0xa0>)
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d001      	beq.n	8001132 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800112e:	b037      	add	sp, #220	; 0xdc
 8001130:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001138:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f002 fe9f 	bl	8003e7c <HAL_RCCEx_PeriphCLKConfig>
 800113e:	bb88      	cbnz	r0, 80011a4 <HAL_SPI_MspInit+0x98>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001142:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2502      	movs	r5, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 800114a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001150:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001154:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
 8001158:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 800115c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8001160:	9000      	str	r0, [sp, #0]
 8001162:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001168:	f040 0004 	orr.w	r0, r0, #4
 800116c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001174:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2203      	movs	r2, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001180:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001182:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001186:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	e9cd 4204 	strd	r4, r2, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f001 feee 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001190:	4622      	mov	r2, r4
 8001192:	2105      	movs	r1, #5
 8001194:	2033      	movs	r0, #51	; 0x33
 8001196:	f000 fdbd 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800119a:	2033      	movs	r0, #51	; 0x33
 800119c:	f000 fdf8 	bl	8001d90 <HAL_NVIC_EnableIRQ>
}
 80011a0:	b037      	add	sp, #220	; 0xdc
 80011a2:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80011a4:	f7ff ff8a 	bl	80010bc <Error_Handler>
 80011a8:	e7ca      	b.n	8001140 <HAL_SPI_MspInit+0x34>
 80011aa:	bf00      	nop
 80011ac:	40003c00 	.word	0x40003c00
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020800 	.word	0x58020800

080011b8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_TIM_Base_MspInit+0x78>)
 80011ba:	6803      	ldr	r3, [r0, #0]
 80011bc:	4293      	cmp	r3, r2
{
 80011be:	b510      	push	{r4, lr}
 80011c0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 80011c2:	d004      	beq.n	80011ce <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_TIM_Base_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_TIM_Base_MspInit+0x46>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011ca:	b002      	add	sp, #8
 80011cc:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80011d0:	201e      	movs	r0, #30
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011d6:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 80011da:	f044 0404 	orr.w	r4, r4, #4
 80011de:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80011e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80011ee:	f000 fd91 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011f2:	201e      	movs	r0, #30
}
 80011f4:	b002      	add	sp, #8
 80011f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011fa:	f000 bdc9 	b.w	8001d90 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001200:	2032      	movs	r0, #50	; 0x32
 8001202:	2200      	movs	r2, #0
 8001204:	2105      	movs	r1, #5
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001206:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 800120a:	f044 0408 	orr.w	r4, r4, #8
 800120e:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8001212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800121e:	f000 fd79 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001222:	2032      	movs	r0, #50	; 0x32
}
 8001224:	b002      	add	sp, #8
 8001226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800122a:	f000 bdb1 	b.w	8001d90 <HAL_NVIC_EnableIRQ>
 800122e:	bf00      	nop
 8001230:	40000800 	.word	0x40000800
 8001234:	40000c00 	.word	0x40000c00
 8001238:	58024400 	.word	0x58024400

0800123c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123c:	280f      	cmp	r0, #15
 800123e:	d901      	bls.n	8001244 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001242:	4770      	bx	lr
{
 8001244:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001246:	4601      	mov	r1, r0
{
 8001248:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800124a:	2200      	movs	r2, #0
 800124c:	4604      	mov	r4, r0
 800124e:	2036      	movs	r0, #54	; 0x36
 8001250:	f000 fd60 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001254:	2036      	movs	r0, #54	; 0x36
 8001256:	f000 fd9b 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800125e:	4669      	mov	r1, sp
 8001260:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001262:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001264:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001268:	f042 0210 	orr.w	r2, r2, #16
 800126c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800127c:	f002 fcde 	bl	8003c3c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001280:	9b07      	ldr	r3, [sp, #28]
 8001282:	b9bb      	cbnz	r3, 80012b4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001284:	f002 fcc8 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 800128a:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 800128c:	4c10      	ldr	r4, [pc, #64]	; (80012d0 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800128e:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 8001292:	4d10      	ldr	r5, [pc, #64]	; (80012d4 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001294:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001298:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800129a:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 800129c:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a0:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012a2:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012a6:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012a8:	f004 f9e8 	bl	800567c <HAL_TIM_Base_Init>
 80012ac:	b130      	cbz	r0, 80012bc <HAL_InitTick+0x80>
    return HAL_ERROR;
 80012ae:	2001      	movs	r0, #1
}
 80012b0:	b00b      	add	sp, #44	; 0x2c
 80012b2:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b4:	f002 fcb0 	bl	8003c18 <HAL_RCC_GetPCLK1Freq>
 80012b8:	0040      	lsls	r0, r0, #1
 80012ba:	e7e5      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 80012bc:	4620      	mov	r0, r4
 80012be:	f003 ff69 	bl	8005194 <HAL_TIM_Base_Start_IT>
 80012c2:	e7f5      	b.n	80012b0 <HAL_InitTick+0x74>
 80012c4:	58024400 	.word	0x58024400
 80012c8:	24000054 	.word	0x24000054
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	24000328 	.word	0x24000328
 80012d4:	40001000 	.word	0x40001000

080012d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler>
 80012da:	bf00      	nop

080012dc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <HardFault_Handler>
 80012de:	bf00      	nop

080012e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <MemManage_Handler>
 80012e2:	bf00      	nop

080012e4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <BusFault_Handler>
 80012e6:	bf00      	nop

080012e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler>
 80012ea:	bf00      	nop

080012ec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 80012f0:	2080      	movs	r0, #128	; 0x80
 80012f2:	f001 bf7d 	b.w	80031f0 <HAL_GPIO_EXTI_IRQHandler>
 80012f6:	bf00      	nop

080012f8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012f8:	4801      	ldr	r0, [pc, #4]	; (8001300 <TIM4_IRQHandler+0x8>)
 80012fa:	f004 b87b 	b.w	80053f4 <HAL_TIM_IRQHandler>
 80012fe:	bf00      	nop
 8001300:	24000278 	.word	0x24000278

08001304 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001304:	4801      	ldr	r0, [pc, #4]	; (800130c <TIM5_IRQHandler+0x8>)
 8001306:	f004 b875 	b.w	80053f4 <HAL_TIM_IRQHandler>
 800130a:	bf00      	nop
 800130c:	240002c4 	.word	0x240002c4

08001310 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001310:	4801      	ldr	r0, [pc, #4]	; (8001318 <SPI3_IRQHandler+0x8>)
 8001312:	f003 be2f 	b.w	8004f74 <HAL_SPI_IRQHandler>
 8001316:	bf00      	nop
 8001318:	240001f0 	.word	0x240001f0

0800131c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800131c:	4801      	ldr	r0, [pc, #4]	; (8001324 <TIM6_DAC_IRQHandler+0x8>)
 800131e:	f004 b869 	b.w	80053f4 <HAL_TIM_IRQHandler>
 8001322:	bf00      	nop
 8001324:	24000328 	.word	0x24000328

08001328 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001328:	4801      	ldr	r0, [pc, #4]	; (8001330 <ETH_IRQHandler+0x8>)
 800132a:	f001 bad1 	b.w	80028d0 <HAL_ETH_IRQHandler>
 800132e:	bf00      	nop
 8001330:	24000478 	.word	0x24000478

08001334 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001334:	2001      	movs	r0, #1
 8001336:	4770      	bx	lr

08001338 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <_kill+0xc>)
 800133a:	2216      	movs	r2, #22
	return -1;
}
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	4770      	bx	lr
 8001344:	24010a98 	.word	0x24010a98

08001348 <_exit>:
	errno = EINVAL;
 8001348:	4b01      	ldr	r3, [pc, #4]	; (8001350 <_exit+0x8>)
 800134a:	2216      	movs	r2, #22
 800134c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800134e:	e7fe      	b.n	800134e <_exit+0x6>
 8001350:	24010a98 	.word	0x24010a98

08001354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	1e16      	subs	r6, r2, #0
 8001358:	dd07      	ble.n	800136a <_read+0x16>
 800135a:	460c      	mov	r4, r1
 800135c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800135e:	f3af 8000 	nop.w
 8001362:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	42a5      	cmp	r5, r4
 8001368:	d1f9      	bne.n	800135e <_read+0xa>
	}

return len;
}
 800136a:	4630      	mov	r0, r6
 800136c:	bd70      	pop	{r4, r5, r6, pc}
 800136e:	bf00      	nop

08001370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001370:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	1e16      	subs	r6, r2, #0
 8001374:	dd07      	ble.n	8001386 <_write+0x16>
 8001376:	460c      	mov	r4, r1
 8001378:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800137a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800137e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	42a5      	cmp	r5, r4
 8001384:	d1f9      	bne.n	800137a <_write+0xa>
	}
	return len;
}
 8001386:	4630      	mov	r0, r6
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	bf00      	nop

0800138c <_close>:

int _close(int file)
{
	return -1;
}
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001398:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800139a:	604b      	str	r3, [r1, #4]
}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80013a0:	2001      	movs	r0, #1
 80013a2:	4770      	bx	lr

080013a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80013a4:	2000      	movs	r0, #0
 80013a6:	4770      	bx	lr

080013a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	490d      	ldr	r1, [pc, #52]	; (80013e0 <_sbrk+0x38>)
{
 80013aa:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80013ae:	6808      	ldr	r0, [r1, #0]
{
 80013b0:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b2:	4c0d      	ldr	r4, [pc, #52]	; (80013e8 <_sbrk+0x40>)
 80013b4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80013b6:	b170      	cbz	r0, 80013d6 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b8:	4403      	add	r3, r0
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d803      	bhi.n	80013c6 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80013be:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 80013c2:	600b      	str	r3, [r1, #0]
}
 80013c4:	4770      	bx	lr
    errno = ENOMEM;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <_sbrk+0x44>)
 80013c8:	220c      	movs	r2, #12
    return (void *)-1;
 80013ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 80013d6:	4c06      	ldr	r4, [pc, #24]	; (80013f0 <_sbrk+0x48>)
 80013d8:	4620      	mov	r0, r4
 80013da:	600c      	str	r4, [r1, #0]
 80013dc:	e7ec      	b.n	80013b8 <_sbrk+0x10>
 80013de:	bf00      	nop
 80013e0:	24000374 	.word	0x24000374
 80013e4:	24080000 	.word	0x24080000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	24010a98 	.word	0x24010a98
 80013f0:	24010aa0 	.word	0x24010aa0

080013f4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4927      	ldr	r1, [pc, #156]	; (8001494 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f6:	4a28      	ldr	r2, [pc, #160]	; (8001498 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8001400:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001406:	6813      	ldr	r3, [r2, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	2b06      	cmp	r3, #6
 800140e:	d805      	bhi.n	800141c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	f023 030f 	bic.w	r3, r3, #15
 8001416:	f043 0307 	orr.w	r3, r3, #7
 800141a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800141e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8001422:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001424:	481c      	ldr	r0, [pc, #112]	; (8001498 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8001426:	f041 0101 	orr.w	r1, r1, #1
 800142a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800142c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	071b      	lsls	r3, r3, #28
 8001438:	d505      	bpl.n	8001446 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800143a:	6803      	ldr	r3, [r0, #0]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	f043 0307 	orr.w	r3, r3, #7
 8001444:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <SystemInit+0xa8>)
 8001448:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800144a:	4916      	ldr	r1, [pc, #88]	; (80014a4 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 800144c:	4c16      	ldr	r4, [pc, #88]	; (80014a8 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001450:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001452:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001454:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001456:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001458:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800145a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800145c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800145e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001460:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001462:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001464:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001466:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001468:	4c11      	ldr	r4, [pc, #68]	; (80014b0 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800146a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800146e:	4911      	ldr	r1, [pc, #68]	; (80014b4 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001470:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001472:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	4019      	ands	r1, r3
 8001478:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800147c:	d203      	bcs.n	8001486 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <SystemInit+0xc4>)
 8001480:	2201      	movs	r2, #1
 8001482:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <SystemInit+0xc8>)
 8001488:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800148c:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	52002000 	.word	0x52002000
 800149c:	58024400 	.word	0x58024400
 80014a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80014a4:	01010280 	.word	0x01010280
 80014a8:	02020200 	.word	0x02020200
 80014ac:	01ff0000 	.word	0x01ff0000
 80014b0:	5c001000 	.word	0x5c001000
 80014b4:	ffff0000 	.word	0xffff0000
 80014b8:	51008000 	.word	0x51008000
 80014bc:	52004000 	.word	0x52004000

080014c0 <_ZN8BissCrc6C1Ev>:
	0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32,
	0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A,
	0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02
};

BissCrc6::BissCrc6()
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
{
	dataNoCrc.all = 0;
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_ZN8BissCrc611calcCrc_rawEy>:

uint8_t BissCrc6::calcCrc_raw(uint64_t data)
{
 80014e4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80014e8:	b088      	sub	sp, #32
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t crc;
    uint64_t tmp;
    tmp = ((data >> 30) & 0x3F);
 80014f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	0f82      	lsrs	r2, r0, #30
 8001500:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8001504:	0f8b      	lsrs	r3, r1, #30
 8001506:	f002 083f 	and.w	r8, r2, #63	; 0x3f
 800150a:	f04f 0900 	mov.w	r9, #0
 800150e:	e9c7 8906 	strd	r8, r9, [r7, #24]

    for (int shift = 24; shift >=0; shift -= 6)
 8001512:	2318      	movs	r3, #24
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e024      	b.n	8001562 <_ZN8BissCrc611calcCrc_rawEy+0x7e>
    {
        crc = ((data >> shift) & 0x3F);
 8001518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800151c:	6979      	ldr	r1, [r7, #20]
 800151e:	f1c1 0620 	rsb	r6, r1, #32
 8001522:	f1a1 0020 	sub.w	r0, r1, #32
 8001526:	fa22 f401 	lsr.w	r4, r2, r1
 800152a:	fa03 f606 	lsl.w	r6, r3, r6
 800152e:	4334      	orrs	r4, r6
 8001530:	fa23 f000 	lsr.w	r0, r3, r0
 8001534:	4304      	orrs	r4, r0
 8001536:	fa23 f501 	lsr.w	r5, r3, r1
 800153a:	b2e3      	uxtb	r3, r4
 800153c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001540:	74fb      	strb	r3, [r7, #19]
        tmp = crc ^ tableCRC6[tmp];
 8001542:	4a11      	ldr	r2, [pc, #68]	; (8001588 <_ZN8BissCrc611calcCrc_rawEy+0xa4>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	4413      	add	r3, r2
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	7cfb      	ldrb	r3, [r7, #19]
 800154c:	4053      	eors	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2200      	movs	r2, #0
 8001554:	469a      	mov	sl, r3
 8001556:	4693      	mov	fp, r2
 8001558:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    for (int shift = 24; shift >=0; shift -= 6)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3b06      	subs	r3, #6
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	dad7      	bge.n	8001518 <_ZN8BissCrc611calcCrc_rawEy+0x34>
    }

    crc = tableCRC6[tmp];
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <_ZN8BissCrc611calcCrc_rawEy+0xa4>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	74fb      	strb	r3, [r7, #19]
    crc = crc ^ 0x3F;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	f083 033f 	eor.w	r3, r3, #63	; 0x3f
 8001578:	74fb      	strb	r3, [r7, #19]
    return crc;
 800157a:	7cfb      	ldrb	r3, [r7, #19]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001586:	4770      	bx	lr
 8001588:	24000010 	.word	0x24000010

0800158c <_ZN8BissCrc67calcCrcE8EncFrame>:

uint8_t BissCrc6::calcCrc(EncFrame data)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	e9c7 2300 	strd	r2, r3, [r7]
	dataNoCrc.bit.pos = data.bit.pos;
 8001598:	f8d7 2001 	ldr.w	r2, [r7, #1]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f022 4140 	bic.w	r1, r2, #3221225472	; 0xc0000000
 80015a2:	0089      	lsls	r1, r1, #2
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	f000 0003 	and.w	r0, r0, #3
 80015aa:	4301      	orrs	r1, r0
 80015ac:	6019      	str	r1, [r3, #0]
 80015ae:	0f92      	lsrs	r2, r2, #30
 80015b0:	f002 0003 	and.w	r0, r2, #3
 80015b4:	791a      	ldrb	r2, [r3, #4]
 80015b6:	f022 0203 	bic.w	r2, r2, #3
 80015ba:	4611      	mov	r1, r2
 80015bc:	4602      	mov	r2, r0
 80015be:	430a      	orrs	r2, r1
 80015c0:	711a      	strb	r2, [r3, #4]
	dataNoCrc.bit.warn = data.bit.warn;
 80015c2:	783b      	ldrb	r3, [r7, #0]
 80015c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015c8:	b2d9      	uxtb	r1, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	7813      	ldrb	r3, [r2, #0]
 80015ce:	f361 0300 	bfi	r3, r1, #0, #1
 80015d2:	7013      	strb	r3, [r2, #0]
	dataNoCrc.bit.err = data.bit.err;
 80015d4:	783b      	ldrb	r3, [r7, #0]
 80015d6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80015da:	b2d9      	uxtb	r1, r3
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	7813      	ldrb	r3, [r2, #0]
 80015e0:	f361 0341 	bfi	r3, r1, #1, #1
 80015e4:	7013      	strb	r3, [r2, #0]

	return calcCrc_raw(dataNoCrc.all);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff ff79 	bl	80014e4 <_ZN8BissCrc611calcCrc_rawEy>
 80015f2:	4603      	mov	r3, r0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZN8BissCrc68checkCrcE8EncFrame>:

bool BissCrc6::checkCrc(EncFrame data)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t crc = calcCrc(data);
 8001608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ffbd 	bl	800158c <_ZN8BissCrc67calcCrcE8EncFrame>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
	crcC = crc;
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <_ZN8BissCrc68checkCrcE8EncFrame+0x40>)
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	7013      	strb	r3, [r2, #0]
	return crc == data.bit.crc;
 800161c:	783b      	ldrb	r3, [r7, #0]
 800161e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	4293      	cmp	r3, r2
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	240001d8 	.word	0x240001d8

08001640 <_ZN13EncoderParamsC1Ev>:
#pragma once

struct EncoderParams
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	a319      	add	r3, pc, #100	; (adr r3, 80016b0 <_ZN13EncoderParamsC1Ev+0x70>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	ed93 6b00 	vldr	d6, [r3]
 800165a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800165e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	ed83 7b02 	vstr	d7, [r3, #8]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	a313      	add	r3, pc, #76	; (adr r3, 80016b8 <_ZN13EncoderParamsC1Ev+0x78>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	ed93 6b04 	vldr	d6, [r3, #16]
 800167a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800167e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	ed83 7b06 	vstr	d7, [r3, #24]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	a30d      	add	r3, pc, #52	; (adr r3, 80016c0 <_ZN13EncoderParamsC1Ev+0x80>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	584e38a5 	.word	0x584e38a5
 80016b4:	3e39b315 	.word	0x3e39b315
 80016b8:	30553261 	.word	0x30553261
 80016bc:	3f53a92a 	.word	0x3f53a92a
 80016c0:	e826d695 	.word	0xe826d695
 80016c4:	3e112e0b 	.word	0x3e112e0b

080016c8 <_ZN13EncoderDriverC1EP19__SPI_HandleTypeDef>:
}

uint8_t EncoderDriver::dataBuff[dataBuffLen] = {0};
uint8_t EncoderDriver::frameBuff[8] = {0};

EncoderDriver::EncoderDriver(SPI_HandleTypeDef * spi): spi(spi)
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3308      	adds	r3, #8
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ffaf 	bl	8001640 <_ZN13EncoderParamsC1Ev>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3338      	adds	r3, #56	; 0x38
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff feea 	bl	80014c0 <_ZN8BissCrc6C1Ev>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
{

}
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <_ZN13EncoderDriver8checkAckEv>:

/* check if ACK is correct in first byte (1110 0000) */
void EncoderDriver::checkAck()
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	isAckDetected = false;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	for (int i = 0; i < 8; i++)
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e016      	b.n	8001788 <_ZN13EncoderDriver8checkAckEv+0x44>
	{
		uint8_t check = (dataBuff[0] << i) ^ 0x80;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_ZN13EncoderDriver8checkAckEv+0x58>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	b25a      	sxtb	r2, r3
 8001768:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800176c:	4053      	eors	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	72fb      	strb	r3, [r7, #11]
		if (check == 0x00)
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d104      	bne.n	8001782 <_ZN13EncoderDriver8checkAckEv+0x3e>
		{
			isAckDetected = true;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			break;
 8001780:	e006      	b.n	8001790 <_ZN13EncoderDriver8checkAckEv+0x4c>
	for (int i = 0; i < 8; i++)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3301      	adds	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b07      	cmp	r3, #7
 800178c:	dde5      	ble.n	800175a <_ZN13EncoderDriver8checkAckEv+0x16>
	}
//	if (dataBuff[0] == 0xE0)
//		isAckDetected = true;
//	else
//		isAckDetected = false;
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	24000378 	.word	0x24000378

080017a0 <_ZN13EncoderDriver13getStartIndexEv>:

/* check from which byte we have start (10) */
void EncoderDriver::getStartIndex()
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < dataBuffLen; i++)
 80017a8:	2301      	movs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e00e      	b.n	80017cc <_ZN13EncoderDriver13getStartIndexEv+0x2c>
	{
		if (dataBuff[i] != 0x00)
 80017ae:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <_ZN13EncoderDriver13getStartIndexEv+0x40>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <_ZN13EncoderDriver13getStartIndexEv+0x26>
		{
			startIndex = i;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			break;
 80017c4:	e006      	b.n	80017d4 <_ZN13EncoderDriver13getStartIndexEv+0x34>
	for (int i = 1; i < dataBuffLen; i++)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3301      	adds	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b1d      	cmp	r3, #29
 80017d0:	dded      	ble.n	80017ae <_ZN13EncoderDriver13getStartIndexEv+0xe>
		}
	}
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	24000378 	.word	0x24000378

080017e4 <_ZN13EncoderDriver8getShiftEv>:

/* get bit shift value and check if start (10) is correct */
void EncoderDriver::getShift()
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e04b      	b.n	800188a <_ZN13EncoderDriver8getShiftEv+0xa6>
	{
		if (((dataBuff[startIndex] << i) & 0x80) == 0x80)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <_ZN13EncoderDriver8getShiftEv+0xbc>)
 80017fc:	5c9b      	ldrb	r3, [r3, r2]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d03a      	beq.n	8001884 <_ZN13EncoderDriver8getShiftEv+0xa0>
		{
			 if ((((dataBuff[startIndex] << i) | (dataBuff[startIndex+1] >> (8-i))) & 0xC0) == 0x80)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001814:	461a      	mov	r2, r3
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <_ZN13EncoderDriver8getShiftEv+0xbc>)
 8001818:	5c9b      	ldrb	r3, [r3, r2]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	409a      	lsls	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001826:	3301      	adds	r3, #1
 8001828:	491d      	ldr	r1, [pc, #116]	; (80018a0 <_ZN13EncoderDriver8getShiftEv+0xbc>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	4619      	mov	r1, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1c3 0308 	rsb	r3, r3, #8
 8001834:	fa41 f303 	asr.w	r3, r1, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800183e:	2b80      	cmp	r3, #128	; 0x80
 8001840:	d103      	bne.n	800184a <_ZN13EncoderDriver8getShiftEv+0x66>
				 isStartDeteted = 1;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			 shift = i + 2;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3302      	adds	r3, #2
 8001850:	b2da      	uxtb	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

			 if (shift > 7)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800185e:	2b07      	cmp	r3, #7
 8001860:	d917      	bls.n	8001892 <_ZN13EncoderDriver8getShiftEv+0xae>
			 {
				 startIndex++;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				 shift = shift - 8;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001878:	3b08      	subs	r3, #8
 800187a:	b2da      	uxtb	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			 }

			 break;
 8001882:	e006      	b.n	8001892 <_ZN13EncoderDriver8getShiftEv+0xae>
	for (int i = 0; i < 8; i++)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b07      	cmp	r3, #7
 800188e:	ddb0      	ble.n	80017f2 <_ZN13EncoderDriver8getShiftEv+0xe>
		}
	}
}
 8001890:	e000      	b.n	8001894 <_ZN13EncoderDriver8getShiftEv+0xb0>
			 break;
 8001892:	bf00      	nop
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	24000378 	.word	0x24000378

080018a4 <_ZN13EncoderDriver10assignDataEv>:

/* shift data and assign data to structure (crc warn err pos) */
void EncoderDriver::assignData()
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < frameBuffLen; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e029      	b.n	8001906 <_ZN13EncoderDriver10assignDataEv+0x62>
	{
		int j = startIndex + i;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018b8:	461a      	mov	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
		frameBuff[frameBuffLen - 1 - i] = (dataBuff[j] << shift) | (dataBuff[j+1] >> (8-shift));
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <_ZN13EncoderDriver10assignDataEv+0x8c>)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	b25a      	sxtb	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3301      	adds	r3, #1
 80018da:	4915      	ldr	r1, [pc, #84]	; (8001930 <_ZN13EncoderDriver10assignDataEv+0x8c>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	4619      	mov	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80018e6:	f1c3 0308 	rsb	r3, r3, #8
 80018ea:	fa41 f303 	asr.w	r3, r1, r3
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f1c3 0304 	rsb	r3, r3, #4
 80018fa:	b2d1      	uxtb	r1, r2
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <_ZN13EncoderDriver10assignDataEv+0x90>)
 80018fe:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < frameBuffLen; i++)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b04      	cmp	r3, #4
 800190a:	ddd2      	ble.n	80018b2 <_ZN13EncoderDriver10assignDataEv+0xe>
	}

	dataWithCrc = *((union EncFrame*)(frameBuff));
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <_ZN13EncoderDriver10assignDataEv+0x90>)
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	dataEnc.all = dataWithCrc.all; //debug
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800191e:	4906      	ldr	r1, [pc, #24]	; (8001938 <_ZN13EncoderDriver10assignDataEv+0x94>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	24000378 	.word	0x24000378
 8001934:	24000398 	.word	0x24000398
 8001938:	240001e0 	.word	0x240001e0

0800193c <_ZN13EncoderDriver7calcPosEv>:

/* calculate position */
void EncoderDriver::calcPos()
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	posRaw = encParams.imp2rad * (double)dataWithCrc.bit.pos;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	ed93 6b02 	vldr	d6, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001958:	ee26 7b07 	vmul.f64	d7, d6, d7
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	posCalibrated = posRaw - encParams.mechanicalOffset;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800196e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	posAngle = posRaw; //debug
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800197e:	4904      	ldr	r1, [pc, #16]	; (8001990 <_ZN13EncoderDriver7calcPosEv+0x54>)
 8001980:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	24000318 	.word	0x24000318

08001994 <_ZN13EncoderDriver11readRequestEv>:

void EncoderDriver::readRequest()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
//	HAL_SPI_Receive(spi, dataBuff, dataBuffLen, HAL_MAX_DELAY);
	if (!isTransfer)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019a2:	f083 0301 	eor.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00b      	beq.n	80019c4 <_ZN13EncoderDriver11readRequestEv+0x30>
	{
		HAL_SPI_Receive_IT(spi, dataBuff, dataBuffLen);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	221e      	movs	r2, #30
 80019b2:	4909      	ldr	r1, [pc, #36]	; (80019d8 <_ZN13EncoderDriver11readRequestEv+0x44>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fa59 	bl	8004e6c <HAL_SPI_Receive_IT>
		isTransfer = true;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	else
	{
		cntErr++;
	}
}
 80019c2:	e004      	b.n	80019ce <_ZN13EncoderDriver11readRequestEv+0x3a>
		cntErr++;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <_ZN13EncoderDriver11readRequestEv+0x48>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <_ZN13EncoderDriver11readRequestEv+0x48>)
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	24000378 	.word	0x24000378
 80019dc:	240001d0 	.word	0x240001d0

080019e0 <_ZN13EncoderDriver11readEncoderEv>:

uint32_t EncoderDriver::readEncoder()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
//	for (int i = 0; i < dataBuffLen; i++)
//	{
//		dataBuff[i] = buff[i];
//	}
	checkAck();
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff feab 	bl	8001744 <_ZN13EncoderDriver8checkAckEv>
	getStartIndex();
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fed6 	bl	80017a0 <_ZN13EncoderDriver13getStartIndexEv>
	getShift();
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fef5 	bl	80017e4 <_ZN13EncoderDriver8getShiftEv>
	assignData();
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ff52 	bl	80018a4 <_ZN13EncoderDriver10assignDataEv>
	isCrcOk = bissCrc.checkCrc(dataWithCrc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	f7ff fdf5 	bl	80015fc <_ZN8BissCrc68checkCrcE8EncFrame>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (isCrcOk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <_ZN13EncoderDriver11readEncoderEv+0x4c>
		calcPos();
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff88 	bl	800193c <_ZN13EncoderDriver7calcPosEv>
	crcOk = (uint8_t)isCrcOk; //debug
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <_ZN13EncoderDriver11readEncoderEv+0x70>)
 8001a36:	701a      	strb	r2, [r3, #0]
	isTransfer = false;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
//	pos[cntP] = posError; //debug
//	cntP++; //debug
//	cntP = cntP % BUF_POS_LEN; //debug

//	return posCalibrated;
	return dataWithCrc.bit.pos;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	240001d9 	.word	0x240001d9

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a58:	f7ff fccc 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a74:	4c0a      	ldr	r4, [pc, #40]	; (8001aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a82:	f00d feb7 	bl	800f7f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff f919 	bl	8000cbc <main>
  bx  lr
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a94:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 8001a98:	08012218 	.word	0x08012218
  ldr r2, =_sbss
 8001a9c:	240000d8 	.word	0x240000d8
  ldr r4, =_ebss
 8001aa0:	24010aa0 	.word	0x24010aa0

08001aa4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC3_IRQHandler>
	...

08001aa8 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001aa8:	b188      	cbz	r0, 8001ace <LAN8742_RegisterBusIO+0x26>
 8001aaa:	68ca      	ldr	r2, [r1, #12]
 8001aac:	b17a      	cbz	r2, 8001ace <LAN8742_RegisterBusIO+0x26>
{
 8001aae:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ab0:	688c      	ldr	r4, [r1, #8]
 8001ab2:	b17c      	cbz	r4, 8001ad4 <LAN8742_RegisterBusIO+0x2c>
 8001ab4:	690d      	ldr	r5, [r1, #16]
 8001ab6:	b16d      	cbz	r5, 8001ad4 <LAN8742_RegisterBusIO+0x2c>
 8001ab8:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8001aba:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8001abc:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8001abe:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8001ac0:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ac2:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ac4:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ac6:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8001aca:	bc30      	pop	{r4, r5}
 8001acc:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001ace:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ad2:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	e7f7      	b.n	8001aca <LAN8742_RegisterBusIO+0x22>
 8001ada:	bf00      	nop

08001adc <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001adc:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001ade:	2300      	movs	r3, #0
 {
 8001ae0:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8001ae2:	6844      	ldr	r4, [r0, #4]
 {
 8001ae4:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001ae6:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d146      	bne.n	8001b7a <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8001aec:	6883      	ldr	r3, [r0, #8]
 8001aee:	b103      	cbz	r3, 8001af2 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001af0:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001af2:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8001af4:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001af6:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001af8:	e007      	b.n	8001b0a <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001afa:	9b01      	ldr	r3, [sp, #4]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	42a3      	cmp	r3, r4
 8001b02:	d016      	beq.n	8001b32 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b04:	3401      	adds	r4, #1
 8001b06:	2c20      	cmp	r4, #32
 8001b08:	d00b      	beq.n	8001b22 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	696b      	ldr	r3, [r5, #20]
 8001b0e:	aa01      	add	r2, sp, #4
 8001b10:	2112      	movs	r1, #18
 8001b12:	4798      	blx	r3
 8001b14:	2800      	cmp	r0, #0
 8001b16:	daf0      	bge.n	8001afa <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b18:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8001b1a:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b1e:	2c20      	cmp	r4, #32
 8001b20:	d1f3      	bne.n	8001b0a <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b22:	682c      	ldr	r4, [r5, #0]
 8001b24:	2c1f      	cmp	r4, #31
 8001b26:	d937      	bls.n	8001b98 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b28:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8001b32:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001b34:	692b      	ldr	r3, [r5, #16]
 8001b36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4798      	blx	r3
 8001b40:	2800      	cmp	r0, #0
 8001b42:	db2c      	blt.n	8001b9e <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001b44:	696b      	ldr	r3, [r5, #20]
 8001b46:	aa01      	add	r2, sp, #4
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6828      	ldr	r0, [r5, #0]
 8001b4c:	4798      	blx	r3
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	db2b      	blt.n	8001baa <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8001b52:	69ab      	ldr	r3, [r5, #24]
 8001b54:	4798      	blx	r3
 8001b56:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b58:	e00c      	b.n	8001b74 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b5a:	69ab      	ldr	r3, [r5, #24]
 8001b5c:	4798      	blx	r3
 8001b5e:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b60:	aa01      	add	r2, sp, #4
 8001b62:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001b64:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001b68:	d81c      	bhi.n	8001ba4 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001b6a:	696b      	ldr	r3, [r5, #20]
 8001b6c:	6828      	ldr	r0, [r5, #0]
 8001b6e:	4798      	blx	r3
 8001b70:	2800      	cmp	r0, #0
 8001b72:	db1a      	blt.n	8001baa <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	d4ef      	bmi.n	8001b5a <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8001b7a:	69ab      	ldr	r3, [r5, #24]
 8001b7c:	4798      	blx	r3
 8001b7e:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001b80:	69ab      	ldr	r3, [r5, #24]
 8001b82:	4798      	blx	r3
 8001b84:	1b03      	subs	r3, r0, r4
 8001b86:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b8a:	d9f9      	bls.n	8001b80 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2600      	movs	r6, #0
 8001b90:	606b      	str	r3, [r5, #4]
 }
 8001b92:	4630      	mov	r0, r6
 8001b94:	b002      	add	sp, #8
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8001b98:	2e00      	cmp	r6, #0
 8001b9a:	d1fa      	bne.n	8001b92 <LAN8742_Init+0xb6>
 8001b9c:	e7ca      	b.n	8001b34 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 8001b9e:	f06f 0603 	mvn.w	r6, #3
 8001ba2:	e7f6      	b.n	8001b92 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001ba4:	f06f 0601 	mvn.w	r6, #1
   return status;
 8001ba8:	e7f3      	b.n	8001b92 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 8001baa:	f06f 0604 	mvn.w	r6, #4
 8001bae:	e7f0      	b.n	8001b92 <LAN8742_Init+0xb6>

08001bb0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001bb0:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8001bb2:	2500      	movs	r5, #0
{
 8001bb4:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bb6:	6943      	ldr	r3, [r0, #20]
{
 8001bb8:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bba:	aa01      	add	r2, sp, #4
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8001bc0:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bc2:	4798      	blx	r3
 8001bc4:	42a8      	cmp	r0, r5
 8001bc6:	db3d      	blt.n	8001c44 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bc8:	6963      	ldr	r3, [r4, #20]
 8001bca:	aa01      	add	r2, sp, #4
 8001bcc:	2101      	movs	r1, #1
 8001bce:	6820      	ldr	r0, [r4, #0]
 8001bd0:	4798      	blx	r3
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	db36      	blt.n	8001c44 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	075b      	lsls	r3, r3, #29
 8001bda:	d52a      	bpl.n	8001c32 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001bdc:	6963      	ldr	r3, [r4, #20]
 8001bde:	aa01      	add	r2, sp, #4
 8001be0:	4629      	mov	r1, r5
 8001be2:	6820      	ldr	r0, [r4, #0]
 8001be4:	4798      	blx	r3
 8001be6:	2800      	cmp	r0, #0
 8001be8:	db2c      	blt.n	8001c44 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	04dd      	lsls	r5, r3, #19
 8001bee:	d514      	bpl.n	8001c1a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001bf0:	6963      	ldr	r3, [r4, #20]
 8001bf2:	aa01      	add	r2, sp, #4
 8001bf4:	211f      	movs	r1, #31
 8001bf6:	6820      	ldr	r0, [r4, #0]
 8001bf8:	4798      	blx	r3
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	db22      	blt.n	8001c44 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bfe:	9b01      	ldr	r3, [sp, #4]
 8001c00:	04da      	lsls	r2, r3, #19
 8001c02:	d51d      	bpl.n	8001c40 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c04:	f003 031c 	and.w	r3, r3, #28
 8001c08:	2b18      	cmp	r3, #24
 8001c0a:	d017      	beq.n	8001c3c <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d013      	beq.n	8001c38 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c10:	2b14      	cmp	r3, #20
 8001c12:	d10b      	bne.n	8001c2c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c14:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001c16:	b003      	add	sp, #12
 8001c18:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001c1a:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8001c1e:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8001c22:	d00b      	beq.n	8001c3c <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c24:	0498      	lsls	r0, r3, #18
 8001c26:	d407      	bmi.n	8001c38 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001c28:	05d9      	lsls	r1, r3, #23
 8001c2a:	d4f3      	bmi.n	8001c14 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c2c:	2005      	movs	r0, #5
}
 8001c2e:	b003      	add	sp, #12
 8001c30:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	b003      	add	sp, #12
 8001c36:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c38:	2003      	movs	r0, #3
 8001c3a:	e7f8      	b.n	8001c2e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	e7f6      	b.n	8001c2e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c40:	2006      	movs	r0, #6
 8001c42:	e7f4      	b.n	8001c2e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001c44:	f06f 0004 	mvn.w	r0, #4
 8001c48:	e7f1      	b.n	8001c2e <LAN8742_GetLinkState+0x7e>
 8001c4a:	bf00      	nop

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c50:	4c12      	ldr	r4, [pc, #72]	; (8001c9c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	f000 f84d 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c56:	f001 fe55 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_Init+0x54>)
 8001c5c:	4911      	ldr	r1, [pc, #68]	; (8001ca4 <HAL_Init+0x58>)
 8001c5e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c60:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c62:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c66:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c6a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c6e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c72:	490d      	ldr	r1, [pc, #52]	; (8001ca8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c74:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c78:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c7a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001c7e:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c80:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c82:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c84:	f7ff fada 	bl	800123c <HAL_InitTick>
 8001c88:	b110      	cbz	r0, 8001c90 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8001c8a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	4604      	mov	r4, r0
  HAL_MspInit();
 8001c92:	f7ff fa15 	bl	80010c0 <HAL_MspInit>
}
 8001c96:	4620      	mov	r0, r4
 8001c98:	bd10      	pop	{r4, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2400000c 	.word	0x2400000c
 8001ca0:	58024400 	.word	0x58024400
 8001ca4:	080103fc 	.word	0x080103fc
 8001ca8:	24000008 	.word	0x24000008

08001cac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001cac:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <HAL_IncTick+0x10>)
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_IncTick+0x14>)
 8001cb0:	6811      	ldr	r1, [r2, #0]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	440b      	add	r3, r1
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	240003a0 	.word	0x240003a0
 8001cc0:	24000050 	.word	0x24000050

08001cc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cc4:	4b01      	ldr	r3, [pc, #4]	; (8001ccc <HAL_GetTick+0x8>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	240003a0 	.word	0x240003a0

08001cd0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001cd0:	4b01      	ldr	r3, [pc, #4]	; (8001cd8 <HAL_GetREVID+0x8>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
}
 8001cd4:	0c00      	lsrs	r0, r0, #16
 8001cd6:	4770      	bx	lr
 8001cd8:	5c001000 	.word	0x5c001000

08001cdc <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8001cde:	6853      	ldr	r3, [r2, #4]
 8001ce0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001ce4:	4318      	orrs	r0, r3
 8001ce6:	6050      	str	r0, [r2, #4]
}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	58000400 	.word	0x58000400

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4906      	ldr	r1, [pc, #24]	; (8001d0c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d00:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001d06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001d08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	05fa0000 	.word	0x05fa0000

08001d14 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_NVIC_SetPriority+0x70>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d26:	f1be 0f04 	cmp.w	lr, #4
 8001d2a:	bf28      	it	cs
 8001d2c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d30:	f1bc 0f06 	cmp.w	ip, #6
 8001d34:	d91a      	bls.n	8001d6c <HAL_NVIC_SetPriority+0x58>
 8001d36:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 3cff 	mov.w	ip, #4294967295
 8001d3c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001d40:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001d48:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001d4e:	ea21 010c 	bic.w	r1, r1, ip
 8001d52:	fa01 f103 	lsl.w	r1, r1, r3
 8001d56:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	db0a      	blt.n	8001d72 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	0109      	lsls	r1, r1, #4
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_NVIC_SetPriority+0x74>)
 8001d60:	b2c9      	uxtb	r1, r1
 8001d62:	4403      	add	r3, r0
 8001d64:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d68:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	4613      	mov	r3, r2
 8001d70:	e7e8      	b.n	8001d44 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	f000 000f 	and.w	r0, r0, #15
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_NVIC_SetPriority+0x78>)
 8001d7a:	b2c9      	uxtb	r1, r1
 8001d7c:	4403      	add	r3, r0
 8001d7e:	7619      	strb	r1, [r3, #24]
 8001d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ecfc 	.word	0xe000ecfc

08001d90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	db07      	blt.n	8001da4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d94:	2301      	movs	r3, #1
 8001d96:	f000 011f 	and.w	r1, r0, #31
 8001d9a:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <HAL_NVIC_EnableIRQ+0x18>)
 8001d9c:	0940      	lsrs	r0, r0, #5
 8001d9e:	408b      	lsls	r3, r1
 8001da0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000e100 	.word	0xe000e100

08001dac <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001dac:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001db2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8001dbc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_MPU_Enable+0x1c>)
 8001dca:	f040 0001 	orr.w	r0, r0, #1
 8001dce:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001de8:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_MPU_ConfigRegion+0x60>)
 8001dea:	7843      	ldrb	r3, [r0, #1]
 8001dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8001df0:	7801      	ldrb	r1, [r0, #0]
 8001df2:	b321      	cbz	r1, 8001e3e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001df4:	6843      	ldr	r3, [r0, #4]
{
 8001df6:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001df8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dfc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dfe:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e02:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e04:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e08:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e0c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e10:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e12:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e14:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e18:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e1c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e20:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e24:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001e28:	7a01      	ldrb	r1, [r0, #8]
 8001e2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001e2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001e32:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e36:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8001e3e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001e42:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d05f      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc4>
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e52:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001e56:	4603      	mov	r3, r0
 8001e58:	2a02      	cmp	r2, #2
 8001e5a:	d155      	bne.n	8001f08 <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e5c:	6801      	ldr	r1, [r0, #0]
 8001e5e:	4a57      	ldr	r2, [pc, #348]	; (8001fbc <HAL_DMA_Abort_IT+0x170>)
 8001e60:	4291      	cmp	r1, r2
 8001e62:	d048      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0xaa>
 8001e64:	3218      	adds	r2, #24
 8001e66:	4291      	cmp	r1, r2
 8001e68:	d045      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0xaa>
 8001e6a:	3230      	adds	r2, #48	; 0x30
 8001e6c:	4c54      	ldr	r4, [pc, #336]	; (8001fc0 <HAL_DMA_Abort_IT+0x174>)
 8001e6e:	4855      	ldr	r0, [pc, #340]	; (8001fc4 <HAL_DMA_Abort_IT+0x178>)
 8001e70:	42a1      	cmp	r1, r4
 8001e72:	bf18      	it	ne
 8001e74:	4291      	cmpne	r1, r2
 8001e76:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2201      	moveq	r2, #1
 8001e7e:	2200      	movne	r2, #0
 8001e80:	4281      	cmp	r1, r0
 8001e82:	bf08      	it	eq
 8001e84:	f042 0201 	orreq.w	r2, r2, #1
 8001e88:	3030      	adds	r0, #48	; 0x30
 8001e8a:	42a1      	cmp	r1, r4
 8001e8c:	bf08      	it	eq
 8001e8e:	f042 0201 	orreq.w	r2, r2, #1
 8001e92:	3430      	adds	r4, #48	; 0x30
 8001e94:	4281      	cmp	r1, r0
 8001e96:	bf08      	it	eq
 8001e98:	f042 0201 	orreq.w	r2, r2, #1
 8001e9c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001ea0:	42a1      	cmp	r1, r4
 8001ea2:	bf08      	it	eq
 8001ea4:	f042 0201 	orreq.w	r2, r2, #1
 8001ea8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001eac:	4281      	cmp	r1, r0
 8001eae:	bf08      	it	eq
 8001eb0:	f042 0201 	orreq.w	r2, r2, #1
 8001eb4:	3030      	adds	r0, #48	; 0x30
 8001eb6:	42a1      	cmp	r1, r4
 8001eb8:	bf08      	it	eq
 8001eba:	f042 0201 	orreq.w	r2, r2, #1
 8001ebe:	3430      	adds	r4, #48	; 0x30
 8001ec0:	4281      	cmp	r1, r0
 8001ec2:	bf08      	it	eq
 8001ec4:	f042 0201 	orreq.w	r2, r2, #1
 8001ec8:	3030      	adds	r0, #48	; 0x30
 8001eca:	42a1      	cmp	r1, r4
 8001ecc:	bf08      	it	eq
 8001ece:	f042 0201 	orreq.w	r2, r2, #1
 8001ed2:	3430      	adds	r4, #48	; 0x30
 8001ed4:	4281      	cmp	r1, r0
 8001ed6:	bf08      	it	eq
 8001ed8:	f042 0201 	orreq.w	r2, r2, #1
 8001edc:	3030      	adds	r0, #48	; 0x30
 8001ede:	42a1      	cmp	r1, r4
 8001ee0:	bf08      	it	eq
 8001ee2:	f042 0201 	orreq.w	r2, r2, #1
 8001ee6:	4281      	cmp	r1, r0
 8001ee8:	bf08      	it	eq
 8001eea:	f042 0201 	orreq.w	r2, r2, #1
 8001eee:	b912      	cbnz	r2, 8001ef6 <HAL_DMA_Abort_IT+0xaa>
 8001ef0:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <HAL_DMA_Abort_IT+0x17c>)
 8001ef2:	4291      	cmp	r1, r2
 8001ef4:	d10e      	bne.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ef6:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8001ef8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001efe:	680b      	ldr	r3, [r1, #0]
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	600b      	str	r3, [r1, #0]
}
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f08:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001f0a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f10:	2001      	movs	r0, #1
}
 8001f12:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f14:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <HAL_DMA_Abort_IT+0x180>)
 8001f16:	4d2e      	ldr	r5, [pc, #184]	; (8001fd0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f18:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f1a:	42a9      	cmp	r1, r5
 8001f1c:	bf18      	it	ne
 8001f1e:	4291      	cmpne	r1, r2
 8001f20:	4c2c      	ldr	r4, [pc, #176]	; (8001fd4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f22:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f26:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2201      	moveq	r2, #1
 8001f2e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f30:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f32:	42a1      	cmp	r1, r4
 8001f34:	bf08      	it	eq
 8001f36:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8001f3a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f3c:	3428      	adds	r4, #40	; 0x28
 8001f3e:	42a9      	cmp	r1, r5
 8001f40:	bf08      	it	eq
 8001f42:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8001f46:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f4a:	42a1      	cmp	r1, r4
 8001f4c:	bf08      	it	eq
 8001f4e:	f042 0201 	orreq.w	r2, r2, #1
 8001f52:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8001f54:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f56:	42a1      	cmp	r1, r4
 8001f58:	bf08      	it	eq
 8001f5a:	f042 0201 	orreq.w	r2, r2, #1
 8001f5e:	481e      	ldr	r0, [pc, #120]	; (8001fd8 <HAL_DMA_Abort_IT+0x18c>)
 8001f60:	4281      	cmp	r1, r0
 8001f62:	bf08      	it	eq
 8001f64:	f042 0201 	orreq.w	r2, r2, #1
 8001f68:	b912      	cbnz	r2, 8001f70 <HAL_DMA_Abort_IT+0x124>
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_DMA_Abort_IT+0x190>)
 8001f6c:	4291      	cmp	r1, r2
 8001f6e:	d117      	bne.n	8001fa0 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f70:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f74:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f78:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f7a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f7e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f82:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f84:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f86:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001f88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f8a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8001f8e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001f90:	b132      	cbz	r2, 8001fa0 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f92:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f94:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f98:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001f9c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f9e:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8001fa0:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8001fa2:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8001fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001faa:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8001fae:	b11a      	cbz	r2, 8001fb8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4790      	blx	r2
  return HAL_OK;
 8001fb4:	4620      	mov	r0, r4
}
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001fb8:	4610      	mov	r0, r2
}
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	40020010 	.word	0x40020010
 8001fc0:	40020040 	.word	0x40020040
 8001fc4:	40020070 	.word	0x40020070
 8001fc8:	400204b8 	.word	0x400204b8
 8001fcc:	5802541c 	.word	0x5802541c
 8001fd0:	58025408 	.word	0x58025408
 8001fd4:	58025430 	.word	0x58025430
 8001fd8:	58025480 	.word	0x58025480
 8001fdc:	58025494 	.word	0x58025494

08001fe0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fe0:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001fe2:	688b      	ldr	r3, [r1, #8]
 8001fe4:	680d      	ldr	r5, [r1, #0]
 8001fe6:	694c      	ldr	r4, [r1, #20]
 8001fe8:	432b      	orrs	r3, r5
 8001fea:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fec:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ff0:	4323      	orrs	r3, r4
 8001ff2:	698c      	ldr	r4, [r1, #24]
 8001ff4:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ff6:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ffa:	4323      	orrs	r3, r4
 8001ffc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ffe:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002002:	4d52      	ldr	r5, [pc, #328]	; (800214c <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002004:	4323      	orrs	r3, r4
 8002006:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002008:	4323      	orrs	r3, r4
 800200a:	4c51      	ldr	r4, [pc, #324]	; (8002150 <ETH_SetMACConfig+0x170>)
 800200c:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800200e:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002010:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002012:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002014:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002018:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800201a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800201e:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002020:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002024:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002026:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 800202a:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800202c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002030:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002032:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002036:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002038:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800203c:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800203e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002042:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002046:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800204a:	7c08      	ldrb	r0, [r1, #16]
 800204c:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002050:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002054:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002056:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002058:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800205c:	7f88      	ldrb	r0, [r1, #30]
 800205e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002062:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002066:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002068:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800206c:	f891 0020 	ldrb.w	r0, [r1, #32]
 8002070:	fab0 f080 	clz	r0, r0
 8002074:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002076:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800207a:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800207c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800207e:	6853      	ldr	r3, [r2, #4]
 8002080:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002082:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002086:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800208a:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800208e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002090:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002094:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002098:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800209c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80020a0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 80020a4:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020a8:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80020ac:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020b2:	4828      	ldr	r0, [pc, #160]	; (8002154 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020b4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020b6:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 80020b8:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020ba:	4018      	ands	r0, r3
 80020bc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80020be:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020c0:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020c4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80020c8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020ca:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020cc:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80020ce:	402b      	ands	r3, r5
 80020d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020d4:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020d8:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80020da:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 80020de:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020e2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80020e6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020e8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80020ec:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020f2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020f6:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020fa:	f020 0003 	bic.w	r0, r0, #3
 80020fe:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002100:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002104:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800210c:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8002110:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8002114:	432b      	orrs	r3, r5
 8002116:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800211a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800211e:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002122:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002126:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800212a:	4323      	orrs	r3, r4
 800212c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002130:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8002134:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002138:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800213c:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800213e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8002142:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002144:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	c0f88000 	.word	0xc0f88000
 8002150:	00048083 	.word	0x00048083
 8002154:	fffffef0 	.word	0xfffffef0

08002158 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002158:	6803      	ldr	r3, [r0, #0]
 800215a:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <ETH_SetDMAConfig+0x7c>)
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	6808      	ldr	r0, [r1, #0]
{
 8002162:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002164:	681c      	ldr	r4, [r3, #0]
 8002166:	4022      	ands	r2, r4
 8002168:	4302      	orrs	r2, r0
 800216a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800216c:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800216e:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002170:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002172:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002174:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8002178:	688c      	ldr	r4, [r1, #8]
 800217a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800217c:	4c16      	ldr	r4, [pc, #88]	; (80021d8 <ETH_SetDMAConfig+0x80>)
 800217e:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002180:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002182:	4322      	orrs	r2, r4
 8002184:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002186:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002188:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800218c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002190:	4812      	ldr	r0, [pc, #72]	; (80021dc <ETH_SetDMAConfig+0x84>)
 8002192:	4020      	ands	r0, r4
 8002194:	4302      	orrs	r2, r0
 8002196:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800219a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800219c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800219e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021a0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 80021a4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80021a8:	690c      	ldr	r4, [r1, #16]
 80021aa:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021ac:	4c0c      	ldr	r4, [pc, #48]	; (80021e0 <ETH_SetDMAConfig+0x88>)
 80021ae:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021b0:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021b2:	4322      	orrs	r2, r4
 80021b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021b8:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021bc:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021be:	4909      	ldr	r1, [pc, #36]	; (80021e4 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021c0:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021c4:	4021      	ands	r1, r4
}
 80021c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021ca:	430a      	orrs	r2, r1
 80021cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	ffff87fd 	.word	0xffff87fd
 80021d8:	ffff2ffe 	.word	0xffff2ffe
 80021dc:	fffec000 	.word	0xfffec000
 80021e0:	ffc0efef 	.word	0xffc0efef
 80021e4:	7fc0ffff 	.word	0x7fc0ffff

080021e8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80021ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80021ee:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021f0:	688e      	ldr	r6, [r1, #8]
 80021f2:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 80021f6:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021f8:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	2a00      	cmp	r2, #0
 8002200:	f2c0 8124 	blt.w	800244c <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002204:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8002208:	2a00      	cmp	r2, #0
 800220a:	f040 811f 	bne.w	800244c <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800220e:	f8d1 c000 	ldr.w	ip, [r1]
 8002212:	f01c 0704 	ands.w	r7, ip, #4
 8002216:	d02d      	beq.n	8002274 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002218:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800221a:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800221e:	4dae      	ldr	r5, [pc, #696]	; (80024d8 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 8002220:	ea05 0502 	and.w	r5, r5, r2
 8002224:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002226:	ea45 0502 	orr.w	r5, r5, r2
 800222a:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800222c:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800222e:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002230:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002234:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002236:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002238:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800223c:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800223e:	d019      	beq.n	8002274 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	fa1f fe82 	uxth.w	lr, r2
 8002246:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002248:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 800224c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002254:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 800225c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800225e:	ea4e 0202 	orr.w	r2, lr, r2
 8002262:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002264:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002266:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800226a:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800226c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800226e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002272:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002274:	f01c 0810 	ands.w	r8, ip, #16
 8002278:	d009      	beq.n	800228e <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	4d97      	ldr	r5, [pc, #604]	; (80024dc <ETH_Prepare_Tx_Descriptors+0x2f4>)
 800227e:	4015      	ands	r5, r2
 8002280:	698a      	ldr	r2, [r1, #24]
 8002282:	4315      	orrs	r5, r2
 8002284:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800228c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800228e:	f01c 0f14 	tst.w	ip, #20
 8002292:	f040 80df 	bne.w	8002454 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002296:	4622      	mov	r2, r4
 8002298:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800229c:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800229e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80024dc <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80022a2:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80022a4:	689d      	ldr	r5, [r3, #8]
 80022a6:	ea05 0a0a 	and.w	sl, r5, sl
 80022aa:	6875      	ldr	r5, [r6, #4]
 80022ac:	ea4a 0505 	orr.w	r5, sl, r5
 80022b0:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 80022b2:	68b5      	ldr	r5, [r6, #8]
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	f000 8133 	beq.w	8002520 <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80022ba:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80022bc:	f8df a220 	ldr.w	sl, [pc, #544]	; 80024e0 <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80022c0:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80022c2:	689e      	ldr	r6, [r3, #8]
 80022c4:	ea06 0a0a 	and.w	sl, r6, sl
 80022c8:	686e      	ldr	r6, [r5, #4]
 80022ca:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 80022ce:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80022d0:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80022d2:	f1b8 0f00 	cmp.w	r8, #0
 80022d6:	f000 80e0 	beq.w	800249a <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80022da:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 80022de:	6a0e      	ldr	r6, [r1, #32]
 80022e0:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80022e4:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80024e4 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80022e8:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80022ea:	68de      	ldr	r6, [r3, #12]
 80022ec:	ea06 0c0c 	and.w	ip, r6, ip
 80022f0:	69ce      	ldr	r6, [r1, #28]
 80022f2:	ea4c 0606 	orr.w	r6, ip, r6
 80022f6:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80022f8:	68de      	ldr	r6, [r3, #12]
 80022fa:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80022fe:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002300:	b12f      	cbz	r7, 800230e <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002302:	689f      	ldr	r7, [r3, #8]
 8002304:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8002306:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 800230a:	433e      	orrs	r6, r7
 800230c:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800230e:	68de      	ldr	r6, [r3, #12]
 8002310:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002314:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002316:	68de      	ldr	r6, [r3, #12]
 8002318:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 800231c:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800231e:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002322:	68de      	ldr	r6, [r3, #12]
 8002324:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8002328:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800232a:	680e      	ldr	r6, [r1, #0]
 800232c:	07b6      	lsls	r6, r6, #30
 800232e:	d505      	bpl.n	800233c <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002330:	68df      	ldr	r7, [r3, #12]
 8002332:	68ce      	ldr	r6, [r1, #12]
 8002334:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8002338:	433e      	orrs	r6, r7
 800233a:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800233c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002340:	f1b8 0f00 	cmp.w	r8, #0
 8002344:	f000 80d2 	beq.w	80024ec <ETH_Prepare_Tx_Descriptors+0x304>
 8002348:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800234c:	4d63      	ldr	r5, [pc, #396]	; (80024dc <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800234e:	4e64      	ldr	r6, [pc, #400]	; (80024e0 <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002350:	46a2      	mov	sl, r4
 8002352:	e01d      	b.n	8002390 <ETH_Prepare_Tx_Descriptors+0x1a8>
 8002354:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80024e4 <ETH_Prepare_Tx_Descriptors+0x2fc>
 8002358:	ea04 0808 	and.w	r8, r4, r8
 800235c:	69cc      	ldr	r4, [r1, #28]
 800235e:	ea48 0404 	orr.w	r4, r8, r4
 8002362:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002364:	68dc      	ldr	r4, [r3, #12]
 8002366:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 800236a:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 800236c:	f10c 0c01 	add.w	ip, ip, #1
 8002370:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002374:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002376:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800237a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800237e:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002380:	68dc      	ldr	r4, [r3, #12]
 8002382:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8002386:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002388:	f1b8 0f00 	cmp.w	r8, #0
 800238c:	f000 80af 	beq.w	80024ee <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002390:	68dc      	ldr	r4, [r3, #12]
 8002392:	eb0e 0b0c 	add.w	fp, lr, ip
 8002396:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 800239a:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800239c:	1c53      	adds	r3, r2, #1
 800239e:	2b03      	cmp	r3, #3
 80023a0:	bf94      	ite	ls
 80023a2:	461a      	movls	r2, r3
 80023a4:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023a6:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80023aa:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80023ac:	68dc      	ldr	r4, [r3, #12]
 80023ae:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80023b2:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80023b4:	68dc      	ldr	r4, [r3, #12]
 80023b6:	2c00      	cmp	r4, #0
 80023b8:	db30      	blt.n	800241c <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80023bc:	bb74      	cbnz	r4, 800241c <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80023be:	f8d8 4000 	ldr.w	r4, [r8]
 80023c2:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80023c4:	689f      	ldr	r7, [r3, #8]
 80023c6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80023ca:	402f      	ands	r7, r5
 80023cc:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 80023ce:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80023d2:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 80023d4:	2f00      	cmp	r7, #0
 80023d6:	d05a      	beq.n	800248e <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80023d8:	683c      	ldr	r4, [r7, #0]
 80023da:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80023dc:	689c      	ldr	r4, [r3, #8]
 80023de:	ea04 0806 	and.w	r8, r4, r6
 80023e2:	687c      	ldr	r4, [r7, #4]
 80023e4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80023e8:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80023ea:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80023ee:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80023f0:	f018 0f10 	tst.w	r8, #16
 80023f4:	d1ae      	bne.n	8002354 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80023f6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80024e8 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80023fa:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80023fe:	ea04 0b0b 	and.w	fp, r4, fp
 8002402:	684c      	ldr	r4, [r1, #4]
 8002404:	ea4b 0404 	orr.w	r4, fp, r4
 8002408:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800240a:	d0af      	beq.n	800236c <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800240c:	68dc      	ldr	r4, [r3, #12]
 800240e:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8002412:	694c      	ldr	r4, [r1, #20]
 8002414:	ea48 0404 	orr.w	r4, r8, r4
 8002418:	60dc      	str	r4, [r3, #12]
 800241a:	e7a7      	b.n	800236c <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241c:	4654      	mov	r4, sl
 800241e:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002422:	f1bb 0f00 	cmp.w	fp, #0
 8002426:	d011      	beq.n	800244c <ETH_Prepare_Tx_Descriptors+0x264>
 8002428:	2100      	movs	r1, #0
 800242a:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 800242e:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002430:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002432:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8002434:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002436:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800243c:	bf98      	it	ls
 800243e:	462c      	movls	r4, r5
 8002440:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8002442:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002444:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002448:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800244a:	d1ee      	bne.n	800242a <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 800244c:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 800244e:	b003      	add	sp, #12
 8002450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002466:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002468:	1c62      	adds	r2, r4, #1
 800246a:	2a03      	cmp	r2, #3
 800246c:	bf88      	it	hi
 800246e:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002470:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002474:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002476:	68dd      	ldr	r5, [r3, #12]
 8002478:	2d00      	cmp	r5, #0
 800247a:	db5f      	blt.n	800253c <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800247c:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002480:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002484:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002488:	f00c 0704 	and.w	r7, ip, #4
 800248c:	e706      	b.n	800229c <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800248e:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002490:	4647      	mov	r7, r8
 8002492:	689c      	ldr	r4, [r3, #8]
 8002494:	4034      	ands	r4, r6
 8002496:	609c      	str	r4, [r3, #8]
 8002498:	e7a7      	b.n	80023ea <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800249a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80024e8 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800249e:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80024a2:	ea06 0808 	and.w	r8, r6, r8
 80024a6:	684e      	ldr	r6, [r1, #4]
 80024a8:	ea48 0606 	orr.w	r6, r8, r6
 80024ac:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80024ae:	d006      	beq.n	80024be <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80024b0:	68de      	ldr	r6, [r3, #12]
 80024b2:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 80024b6:	694e      	ldr	r6, [r1, #20]
 80024b8:	ea48 0606 	orr.w	r6, r8, r6
 80024bc:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80024be:	f01c 0f20 	tst.w	ip, #32
 80024c2:	f43f af1d 	beq.w	8002300 <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80024c6:	68de      	ldr	r6, [r3, #12]
 80024c8:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 80024cc:	690e      	ldr	r6, [r1, #16]
 80024ce:	ea4c 0606 	orr.w	r6, ip, r6
 80024d2:	60de      	str	r6, [r3, #12]
 80024d4:	e714      	b.n	8002300 <ETH_Prepare_Tx_Descriptors+0x118>
 80024d6:	bf00      	nop
 80024d8:	ffff0000 	.word	0xffff0000
 80024dc:	ffffc000 	.word	0xffffc000
 80024e0:	c000ffff 	.word	0xc000ffff
 80024e4:	fffc0000 	.word	0xfffc0000
 80024e8:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 80024ec:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 80024ee:	9901      	ldr	r1, [sp, #4]
 80024f0:	b1f9      	cbz	r1, 8002532 <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80024f2:	6899      	ldr	r1, [r3, #8]
 80024f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80024f8:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002500:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002502:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002506:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002508:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 800250a:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800250e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002510:	3301      	adds	r3, #1
 8002512:	4463      	add	r3, ip
 8002514:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002516:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8002518:	2000      	movs	r0, #0
}
 800251a:	b003      	add	sp, #12
 800251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002520:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002522:	4635      	mov	r5, r6
 8002524:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8002528:	4e09      	ldr	r6, [pc, #36]	; (8002550 <ETH_Prepare_Tx_Descriptors+0x368>)
 800252a:	ea0a 0606 	and.w	r6, sl, r6
 800252e:	609e      	str	r6, [r3, #8]
 8002530:	e6ce      	b.n	80022d0 <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002538:	6099      	str	r1, [r3, #8]
 800253a:	e7de      	b.n	80024fa <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800253c:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002540:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002544:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002546:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800254c:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 800254e:	e77e      	b.n	800244e <ETH_Prepare_Tx_Descriptors+0x266>
 8002550:	c000ffff 	.word	0xc000ffff

08002554 <ETH_UpdateDescriptor>:
{
 8002554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8002558:	2300      	movs	r3, #0
{
 800255a:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 800255c:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 8002560:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002562:	f104 0312 	add.w	r3, r4, #18
 8002566:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 800256a:	b37e      	cbz	r6, 80025cc <ETH_UpdateDescriptor+0x78>
 800256c:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800256e:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002572:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 8002576:	e00c      	b.n	8002592 <ETH_UpdateDescriptor+0x3e>
 8002578:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 800257c:	1c63      	adds	r3, r4, #1
 800257e:	3c03      	subs	r4, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	bf98      	it	ls
 8002584:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 8002586:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002588:	f104 0312 	add.w	r3, r4, #18
 800258c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002590:	d011      	beq.n	80025b6 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002592:	692b      	ldr	r3, [r5, #16]
 8002594:	b13b      	cbz	r3, 80025a6 <ETH_UpdateDescriptor+0x52>
 8002596:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 800259a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1eb      	bne.n	8002578 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80025a0:	f8c5 900c 	str.w	r9, [r5, #12]
 80025a4:	e7ea      	b.n	800257c <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 80025a6:	a801      	add	r0, sp, #4
 80025a8:	f003 fbd8 	bl	8005d5c <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	b113      	cbz	r3, 80025b6 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80025b0:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	e7ef      	b.n	8002596 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	42b3      	cmp	r3, r6
 80025ba:	d007      	beq.n	80025cc <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 80025c8:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 80025cc:	b003      	add	sp, #12
 80025ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d2:	bf00      	nop

080025d4 <HAL_ETH_Start_IT>:
{
 80025d4:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80025d6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d001      	beq.n	80025e2 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
}
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80025e2:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 80025e4:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 80025e6:	2201      	movs	r2, #1
 80025e8:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80025ea:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 80025ee:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80025f0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_ETH_Start_IT+0x98>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80025fc:	4a1c      	ldr	r2, [pc, #112]	; (8002670 <HAL_ETH_Start_IT+0x9c>)
 80025fe:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002602:	430a      	orrs	r2, r1
 8002604:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002608:	2304      	movs	r3, #4
 800260a:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 800260c:	f7ff ffa2 	bl	8002554 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002610:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8002612:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002614:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002616:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800261a:	f041 0102 	orr.w	r1, r1, #2
 800261e:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	f041 0101 	orr.w	r1, r1, #1
 8002626:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002628:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 800262c:	f041 0101 	orr.w	r1, r1, #1
 8002630:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002634:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002638:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800263c:	f041 0101 	orr.w	r1, r1, #1
 8002640:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002644:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8002648:	f041 0101 	orr.w	r1, r1, #1
 800264c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002650:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8002654:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8002658:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800265c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002660:	430a      	orrs	r2, r1
 8002662:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8002666:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	0c020060 	.word	0x0c020060
 8002670:	0c20c000 	.word	0x0c20c000

08002674 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002674:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002678:	2a23      	cmp	r2, #35	; 0x23
 800267a:	d001      	beq.n	8002680 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
}
 800267e:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002680:	4601      	mov	r1, r0
 8002682:	4603      	mov	r3, r0
{
 8002684:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002686:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800268a:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 800268e:	f851 2b44 	ldr.w	r2, [r1], #68
 8002692:	4c19      	ldr	r4, [pc, #100]	; (80026f8 <HAL_ETH_Stop_IT+0x84>)
 8002694:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8002698:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 800269c:	402c      	ands	r4, r5
 800269e:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80026a2:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 80026a6:	f024 0401 	bic.w	r4, r4, #1
 80026aa:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80026ae:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 80026b2:	f024 0401 	bic.w	r4, r4, #1
 80026b6:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80026ba:	6810      	ldr	r0, [r2, #0]
 80026bc:	f020 0001 	bic.w	r0, r0, #1
 80026c0:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80026c2:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 80026c6:	f040 0001 	orr.w	r0, r0, #1
 80026ca:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026ce:	6810      	ldr	r0, [r2, #0]
 80026d0:	f020 0002 	bic.w	r0, r0, #2
 80026d4:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80026d6:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80026da:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026dc:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80026de:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026e2:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026e4:	d1f7      	bne.n	80026d6 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 80026e6:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 80026e8:	2110      	movs	r1, #16
    return HAL_OK;
 80026ea:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 80026ec:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80026ee:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80026f2:	bc30      	pop	{r4, r5}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	ffff2f3e 	.word	0xffff2f3e

080026fc <HAL_ETH_Transmit_IT>:
{
 80026fc:	b510      	push	{r4, lr}
 80026fe:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8002700:	b329      	cbz	r1, 800274e <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002702:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002706:	2a23      	cmp	r2, #35	; 0x23
 8002708:	d001      	beq.n	800270e <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
}
 800270c:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800270e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002710:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002712:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002714:	f7ff fd68 	bl	80021e8 <ETH_Prepare_Tx_Descriptors>
 8002718:	b138      	cbz	r0, 800272a <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800271a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 800271e:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002728:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 800272a:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800272e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 8002730:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002732:	1c53      	adds	r3, r2, #1
 8002734:	2b03      	cmp	r3, #3
 8002736:	bf88      	it	hi
 8002738:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800273a:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800273c:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800273e:	3306      	adds	r3, #6
 8002740:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002744:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002748:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 800274c:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800274e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8002752:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002754:	4303      	orrs	r3, r0
 8002756:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800275a:	bd10      	pop	{r4, pc}

0800275c <HAL_ETH_ReadData>:
{
 800275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002760:	b085      	sub	sp, #20
 8002762:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 8002764:	9103      	str	r1, [sp, #12]
 8002766:	2900      	cmp	r1, #0
 8002768:	d06d      	beq.n	8002846 <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 800276a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800276e:	2b23      	cmp	r3, #35	; 0x23
 8002770:	d15e      	bne.n	8002830 <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 8002772:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002776:	f108 0312 	add.w	r3, r8, #18
 800277a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800277e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002780:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002782:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8002786:	2a00      	cmp	r2, #0
 8002788:	db6a      	blt.n	8002860 <HAL_ETH_ReadData+0x104>
 800278a:	f1bb 0f00 	cmp.w	fp, #0
 800278e:	d069      	beq.n	8002864 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8002790:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002794:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8002798:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 800279a:	46ca      	mov	sl, r9
 800279c:	e003      	b.n	80027a6 <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 800279e:	45cb      	cmp	fp, r9
 80027a0:	d93f      	bls.n	8002822 <HAL_ETH_ReadData+0xc6>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d13d      	bne.n	8002822 <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80027a6:	68eb      	ldr	r3, [r5, #12]
 80027a8:	005e      	lsls	r6, r3, #1
 80027aa:	d503      	bpl.n	80027b4 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80027ac:	686b      	ldr	r3, [r5, #4]
 80027ae:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80027b4:	68eb      	ldr	r3, [r5, #12]
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	d401      	bmi.n	80027be <HAL_ETH_ReadData+0x62>
 80027ba:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80027bc:	b30e      	cbz	r6, 8002802 <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80027be:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80027c0:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80027c2:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 80027c4:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 80027c6:	bf48      	it	mi
 80027c8:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80027cc:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 80027d0:	d007      	beq.n	80027e2 <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80027d2:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 80027d4:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80027d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027d8:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80027dc:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80027de:	68eb      	ldr	r3, [r5, #12]
 80027e0:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80027e2:	b2bb      	uxth	r3, r7
 80027e4:	692a      	ldr	r2, [r5, #16]
 80027e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80027ea:	f003 fadb 	bl	8005da4 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80027ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027f0:	3301      	adds	r3, #1
 80027f2:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80027f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027f6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 80027fa:	443b      	add	r3, r7
 80027fc:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 80027fe:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002802:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8002806:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 800280a:	2b03      	cmp	r3, #3
 800280c:	bf8c      	ite	hi
 800280e:	f1a8 0803 	subhi.w	r8, r8, #3
 8002812:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002814:	f108 0312 	add.w	r3, r8, #18
 8002818:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800281c:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 800281e:	2b00      	cmp	r3, #0
 8002820:	dabd      	bge.n	800279e <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002822:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002824:	444b      	add	r3, r9
 8002826:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002828:	b9b3      	cbnz	r3, 8002858 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 800282a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800282e:	b91e      	cbnz	r6, 8002838 <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
}
 8002832:	b005      	add	sp, #20
 8002834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8002838:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 800283a:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 800283c:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 800283e:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 8002840:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 8002842:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002844:	e7f5      	b.n	8002832 <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002846:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800284a:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800284c:	4303      	orrs	r3, r0
 800284e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002852:	b005      	add	sp, #20
 8002854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff fe7b 	bl	8002554 <ETH_UpdateDescriptor>
 800285e:	e7e4      	b.n	800282a <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0e5      	beq.n	8002830 <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 8002864:	f7ff fe76 	bl	8002554 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002868:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800286c:	e7e0      	b.n	8002830 <HAL_ETH_ReadData+0xd4>
 800286e:	bf00      	nop

08002870 <HAL_ETH_ReleaseTxPacket>:
{
 8002870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002874:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002878:	b17d      	cbz	r5, 800289a <HAL_ETH_ReleaseTxPacket+0x2a>
 800287a:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 800287c:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800287e:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 8002882:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002884:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002888:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800288c:	b140      	cbz	r0, 80028a0 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800288e:	68f3      	ldr	r3, [r6, #12]
 8002890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	da08      	bge.n	80028ac <HAL_ETH_ReleaseTxPacket+0x3c>
}
 800289a:	2000      	movs	r0, #0
 800289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028a0:	3401      	adds	r4, #1
 80028a2:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028a6:	2d00      	cmp	r5, #0
 80028a8:	d1e9      	bne.n	800287e <HAL_ETH_ReleaseTxPacket+0xe>
 80028aa:	e7f6      	b.n	800289a <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028ac:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80028ae:	f003 faa9 	bl	8005e04 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 80028b2:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028b6:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 80028ba:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 80028bc:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028be:	2d00      	cmp	r5, #0
 80028c0:	d1dd      	bne.n	800287e <HAL_ETH_ReleaseTxPacket+0xe>
 80028c2:	e7ea      	b.n	800289a <HAL_ETH_ReleaseTxPacket+0x2a>

080028c4 <HAL_ETH_PMTCallback>:
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <HAL_ETH_EEECallback>:
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <HAL_ETH_WakeUpCallback>:
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop

080028d0 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80028d0:	6803      	ldr	r3, [r0, #0]
 80028d2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80028d6:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80028da:	0649      	lsls	r1, r1, #25
{
 80028dc:	b510      	push	{r4, lr}
 80028de:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80028e0:	d504      	bpl.n	80028ec <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80028e2:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80028e6:	0649      	lsls	r1, r1, #25
 80028e8:	f100 808a 	bmi.w	8002a00 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80028ec:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80028f0:	07c8      	lsls	r0, r1, #31
 80028f2:	d503      	bpl.n	80028fc <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80028f4:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80028f8:	07c9      	lsls	r1, r1, #31
 80028fa:	d476      	bmi.n	80029ea <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80028fc:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8002900:	0448      	lsls	r0, r1, #17
 8002902:	d503      	bpl.n	800290c <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002904:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8002908:	0449      	lsls	r1, r1, #17
 800290a:	d41b      	bmi.n	8002944 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 800290c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002910:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002914:	d133      	bne.n	800297e <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002916:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800291a:	06d0      	lsls	r0, r2, #27
 800291c:	d447      	bmi.n	80029ae <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800291e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002922:	0691      	lsls	r1, r2, #26
 8002924:	d454      	bmi.n	80029d0 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800292e:	0252      	lsls	r2, r2, #9
 8002930:	d400      	bmi.n	8002934 <HAL_ETH_IRQHandler+0x64>
}
 8002932:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002934:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002938:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800293a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 800293e:	f7ff ffc5 	bl	80028cc <HAL_ETH_WakeUpCallback>
}
 8002942:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002944:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002950:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 8002954:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002958:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800295c:	d15a      	bne.n	8002a14 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800295e:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002962:	400b      	ands	r3, r1
 8002964:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002968:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 800296c:	4620      	mov	r0, r4
 800296e:	f003 f853 	bl	8005a18 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002978:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 800297c:	d0cb      	beq.n	8002916 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800297e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002982:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002984:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002986:	f042 0210 	orr.w	r2, r2, #16
 800298a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800298e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002992:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002996:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 800299a:	f003 f83d 	bl	8005a18 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800299e:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80029a0:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 80029a2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80029a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029aa:	06d0      	lsls	r0, r2, #27
 80029ac:	d5b7      	bpl.n	800291e <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80029ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 80029b2:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80029b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80029b8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 80029bc:	f7ff ff82 	bl	80028c4 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029c0:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80029c2:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029c4:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80029c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029cc:	0691      	lsls	r1, r2, #26
 80029ce:	d5aa      	bpl.n	8002926 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80029d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 80029d4:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 80029de:	f7ff ff73 	bl	80028c8 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80029e8:	e79d      	b.n	8002926 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029ea:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 80029ee:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029f0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 80029f4:	f003 f80a 	bl	8005a0c <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80029fe:	e77d      	b.n	80028fc <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002a00:	f248 0340 	movw	r3, #32832	; 0x8040
 8002a04:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 8002a08:	f002 fffa 	bl	8005a00 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002a12:	e76b      	b.n	80028ec <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a14:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a18:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002a20:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8002a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a28:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a2c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8002a30:	e79c      	b.n	800296c <HAL_ETH_IRQHandler+0x9c>
 8002a32:	bf00      	nop

08002a34 <HAL_ETH_ReadPHYRegister>:
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a38:	6800      	ldr	r0, [r0, #0]
{
 8002a3a:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a3c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8002a40:	07db      	lsls	r3, r3, #31
 8002a42:	d501      	bpl.n	8002a48 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
}
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002a48:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002a4c:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8002a50:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002a54:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 8002a58:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a5c:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002a60:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002a64:	f7ff f92e 	bl	8001cc4 <HAL_GetTick>
 8002a68:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a6a:	e005      	b.n	8002a78 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002a6c:	f7ff f92a 	bl	8001cc4 <HAL_GetTick>
 8002a70:	1b82      	subs	r2, r0, r6
 8002a72:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002a76:	d8e5      	bhi.n	8002a44 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a78:	6821      	ldr	r1, [r4, #0]
 8002a7a:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 8002a7e:	f012 0201 	ands.w	r2, r2, #1
 8002a82:	d1f3      	bne.n	8002a6c <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002a84:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8002a88:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	602b      	str	r3, [r5, #0]
}
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}

08002a90 <HAL_ETH_WritePHYRegister>:
{
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a94:	6800      	ldr	r0, [r0, #0]
 8002a96:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8002a9a:	07ed      	lsls	r5, r5, #31
 8002a9c:	d501      	bpl.n	8002aa2 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
}
 8002aa0:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002aa2:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8002aac:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002ab0:	480f      	ldr	r0, [pc, #60]	; (8002af0 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002ab2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002ab6:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002aba:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002abe:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002ac2:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002ac6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002aca:	f7ff f8fb 	bl	8001cc4 <HAL_GetTick>
 8002ace:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ad0:	e005      	b.n	8002ade <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002ad2:	f7ff f8f7 	bl	8001cc4 <HAL_GetTick>
 8002ad6:	1b43      	subs	r3, r0, r5
 8002ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002adc:	d8df      	bhi.n	8002a9e <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ae4:	f013 0301 	ands.w	r3, r3, #1
 8002ae8:	d1f3      	bne.n	8002ad2 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8002aea:	4618      	mov	r0, r3
}
 8002aec:	bd38      	pop	{r3, r4, r5, pc}
 8002aee:	bf00      	nop
 8002af0:	40028000 	.word	0x40028000

08002af4 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8002af4:	2900      	cmp	r1, #0
 8002af6:	f000 80c4 	beq.w	8002c82 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002afa:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8002afc:	2000      	movs	r0, #0
{
 8002afe:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002b00:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b02:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002b04:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b08:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002b0c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b10:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002b12:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b14:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002b18:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8002b20:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8002b24:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002b28:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002b2a:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002b2e:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8002b36:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002b3a:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b3c:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002b3e:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b42:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002b4a:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b4c:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b4e:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b50:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b58:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002b62:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8002b6a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002b6e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002b76:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002b7a:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8002b82:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002b8a:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8002b92:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002b94:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b96:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002b9a:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b9c:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b9e:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002ba0:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002ba4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002ba8:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002baa:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002bac:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bae:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002bb0:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bb4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002bb8:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bba:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8002bc2:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002bc6:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002bd0:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002bd4:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002bd6:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002bda:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002bde:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8002be0:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002be4:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002be8:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002bea:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002bec:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002bf0:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002bf4:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002bf6:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002bfa:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002bfe:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c02:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c06:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c08:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c0e:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002c12:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002c16:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c1a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c1e:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c22:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c24:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c26:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002c28:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c2c:	f002 0201 	and.w	r2, r2, #1
 8002c30:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002c34:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 8002c38:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002c3c:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002c40:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002c44:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002c48:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002c4c:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8002c50:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c54:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 8002c58:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002c5c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c60:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c64:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002c68:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002c6c:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002c74:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002c78:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c7c:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 8002c80:	4770      	bx	lr
    return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002c88:	b131      	cbz	r1, 8002c98 <HAL_ETH_SetMACConfig+0x10>
{
 8002c8a:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002c8c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d003      	beq.n	8002c9c <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002c94:	2001      	movs	r0, #1
}
 8002c96:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002c98:	2001      	movs	r0, #1
}
 8002c9a:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002c9c:	f7ff f9a0 	bl	8001fe0 <ETH_SetMACConfig>
    return HAL_OK;
 8002ca0:	2000      	movs	r0, #0
}
 8002ca2:	bd08      	pop	{r3, pc}

08002ca4 <HAL_ETH_SetMDIOClockRange>:
{
 8002ca4:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ca6:	6803      	ldr	r3, [r0, #0]
{
 8002ca8:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002caa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8002cae:	f000 ff73 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002cb4:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002cb6:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002cba:	4403      	add	r3, r0
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d205      	bcs.n	8002ccc <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002cc0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0x70>)
 8002cd0:	4403      	add	r3, r0
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d805      	bhi.n	8002ce2 <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cd6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002ce6:	4403      	add	r3, r0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d3eb      	bcc.n	8002cc4 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002cee:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002cf0:	4403      	add	r3, r0
 8002cf2:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cf4:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002cf6:	bf94      	ite	ls
 8002cf8:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cfc:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d00:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002d04:	bd38      	pop	{r3, r4, r5, pc}
 8002d06:	bf00      	nop
 8002d08:	feced300 	.word	0xfeced300
 8002d0c:	00e4e1c0 	.word	0x00e4e1c0
 8002d10:	fde9f140 	.word	0xfde9f140
 8002d14:	017d783f 	.word	0x017d783f
 8002d18:	fc6c7900 	.word	0xfc6c7900
 8002d1c:	02625a00 	.word	0x02625a00
 8002d20:	fa0a1f00 	.word	0xfa0a1f00
 8002d24:	02faf07f 	.word	0x02faf07f

08002d28 <HAL_ETH_Init>:
  if (heth == NULL)
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	f000 810e 	beq.w	8002f4a <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d2e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8002d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d34:	4605      	mov	r5, r0
 8002d36:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80b2 	beq.w	8002ea2 <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	4b84      	ldr	r3, [pc, #528]	; (8002f50 <HAL_ETH_Init+0x228>)
 8002d40:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002d44:	f042 0202 	orr.w	r2, r2, #2
 8002d48:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002d50:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	f040 8095 	bne.w	8002e8a <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002d60:	f7fe ffbc 	bl	8001cdc <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d64:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8002d66:	4a7b      	ldr	r2, [pc, #492]	; (8002f54 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8002d6c:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002d76:	f7fe ffa5 	bl	8001cc4 <HAL_GetTick>
 8002d7a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d7c:	e006      	b.n	8002d8c <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d7e:	f7fe ffa1 	bl	8001cc4 <HAL_GetTick>
 8002d82:	1b83      	subs	r3, r0, r6
 8002d84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d88:	f200 8082 	bhi.w	8002e90 <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d92:	681c      	ldr	r4, [r3, #0]
 8002d94:	f014 0401 	ands.w	r4, r4, #1
 8002d98:	d1f1      	bne.n	8002d7e <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002d9a:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d9c:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8002d9e:	f7ff ff81 	bl	8002ca4 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002da2:	f000 fef9 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_ETH_Init+0x230>)
 8002da8:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002daa:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002dae:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002db2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002db6:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002db8:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002dba:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8002dbc:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002dc0:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002dc4:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002dc6:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8002dc8:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dce:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dd2:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dd6:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dd8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ddc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002de0:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 8002de6:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002dea:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002dee:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002df2:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002df4:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002df8:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002dfc:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002dfe:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002e02:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e06:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8002e08:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e0c:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e0e:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e12:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8002e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e1a:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 8002e1c:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e1e:	2320      	movs	r3, #32
 8002e20:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_ETH_Init+0x234>)
 8002e26:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8002e28:	f240 1301 	movw	r3, #257	; 0x101
 8002e2c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e30:	f7ff f8d6 	bl	8001fe0 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e38:	a902      	add	r1, sp, #8
 8002e3a:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e3c:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e40:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e42:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e44:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e48:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e4a:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e4c:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e4e:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e52:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e56:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e5a:	f7ff f97d 	bl	8002158 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002e5e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002e62:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8002e66:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e6e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002e72:	696b      	ldr	r3, [r5, #20]
 8002e74:	f013 0203 	ands.w	r2, r3, #3
 8002e78:	d019      	beq.n	8002eae <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002e7a:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8002e7c:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002e7e:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002e82:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8002e86:	b025      	add	sp, #148	; 0x94
 8002e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002e8a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002e8e:	e767      	b.n	8002d60 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e90:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e92:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e96:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e9a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8002e9e:	b025      	add	sp, #148	; 0x94
 8002ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ea2:	2323      	movs	r3, #35	; 0x23
 8002ea4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8002ea8:	f002 feb4 	bl	8005c14 <HAL_ETH_MspInit>
 8002eac:	e747      	b.n	8002d3e <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002eae:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 8002eb2:	482b      	ldr	r0, [pc, #172]	; (8002f60 <HAL_ETH_Init+0x238>)
 8002eb4:	68ee      	ldr	r6, [r5, #12]
 8002eb6:	4020      	ands	r0, r4
 8002eb8:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8002ebc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8002ec0:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002ec2:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ec6:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002eca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ecc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ed0:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ed2:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	42a3      	cmp	r3, r4
 8002eda:	d1f6      	bne.n	8002eca <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 8002edc:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ede:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8002ee0:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ee2:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8002ee6:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002eea:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002eec:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ef0:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ef2:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ef6:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002efa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002efc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f00:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f04:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f06:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f0a:	42b0      	cmp	r0, r6
 8002f0c:	f103 0318 	add.w	r3, r3, #24
 8002f10:	d1f3      	bne.n	8002efa <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f12:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f14:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f16:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f18:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f1c:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f20:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 8002f24:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f26:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f2a:	3448      	adds	r4, #72	; 0x48
 8002f2c:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f30:	8899      	ldrh	r1, [r3, #4]
 8002f32:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8002f36:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f38:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f3a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f3e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f42:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8002f46:	b025      	add	sp, #148	; 0x94
 8002f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002f4a:	2001      	movs	r0, #1
}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	58024400 	.word	0x58024400
 8002f54:	58000400 	.word	0x58000400
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	01010000 	.word	0x01010000
 8002f60:	ffff8001 	.word	0xffff8001

08002f64 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002f64:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f70:	680c      	ldr	r4, [r1, #0]
{
 8002f72:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f74:	2c00      	cmp	r4, #0
 8002f76:	f000 80a7 	beq.w	80030c8 <HAL_GPIO_Init+0x15c>
 8002f7a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7e:	4f8a      	ldr	r7, [pc, #552]	; (80031a8 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8002f80:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f82:	2201      	movs	r2, #1
 8002f84:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002f86:	ea12 0e04 	ands.w	lr, r2, r4
 8002f8a:	f000 8096 	beq.w	80030ba <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f8e:	684d      	ldr	r5, [r1, #4]
 8002f90:	f005 0903 	and.w	r9, r5, #3
 8002f94:	f109 36ff 	add.w	r6, r9, #4294967295
 8002f98:	2e01      	cmp	r6, #1
 8002f9a:	f240 8098 	bls.w	80030ce <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9e:	f1b9 0f03 	cmp.w	r9, #3
 8002fa2:	f040 80d2 	bne.w	800314a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fa6:	fa09 f20c 	lsl.w	r2, r9, ip
 8002faa:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8002fae:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fb0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fb4:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb8:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002fbc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fbe:	d07c      	beq.n	80030ba <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002fc4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fc8:	f003 0903 	and.w	r9, r3, #3
 8002fcc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	f042 0202 	orr.w	r2, r2, #2
 8002fd2:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fd6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002fde:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002fe2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fe6:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	f002 0202 	and.w	r2, r2, #2
 8002fee:	9201      	str	r2, [sp, #4]
 8002ff0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ff6:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ffa:	4e6c      	ldr	r6, [pc, #432]	; (80031ac <HAL_GPIO_Init+0x240>)
 8002ffc:	42b0      	cmp	r0, r6
 8002ffe:	d028      	beq.n	8003052 <HAL_GPIO_Init+0xe6>
 8003000:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003004:	42b0      	cmp	r0, r6
 8003006:	f000 80ac 	beq.w	8003162 <HAL_GPIO_Init+0x1f6>
 800300a:	4e69      	ldr	r6, [pc, #420]	; (80031b0 <HAL_GPIO_Init+0x244>)
 800300c:	42b0      	cmp	r0, r6
 800300e:	f000 80ad 	beq.w	800316c <HAL_GPIO_Init+0x200>
 8003012:	4e68      	ldr	r6, [pc, #416]	; (80031b4 <HAL_GPIO_Init+0x248>)
 8003014:	42b0      	cmp	r0, r6
 8003016:	f000 809f 	beq.w	8003158 <HAL_GPIO_Init+0x1ec>
 800301a:	4e67      	ldr	r6, [pc, #412]	; (80031b8 <HAL_GPIO_Init+0x24c>)
 800301c:	42b0      	cmp	r0, r6
 800301e:	f000 80af 	beq.w	8003180 <HAL_GPIO_Init+0x214>
 8003022:	4e66      	ldr	r6, [pc, #408]	; (80031bc <HAL_GPIO_Init+0x250>)
 8003024:	42b0      	cmp	r0, r6
 8003026:	f000 80b0 	beq.w	800318a <HAL_GPIO_Init+0x21e>
 800302a:	4e65      	ldr	r6, [pc, #404]	; (80031c0 <HAL_GPIO_Init+0x254>)
 800302c:	42b0      	cmp	r0, r6
 800302e:	f000 80a2 	beq.w	8003176 <HAL_GPIO_Init+0x20a>
 8003032:	4e64      	ldr	r6, [pc, #400]	; (80031c4 <HAL_GPIO_Init+0x258>)
 8003034:	42b0      	cmp	r0, r6
 8003036:	f000 80ad 	beq.w	8003194 <HAL_GPIO_Init+0x228>
 800303a:	4e63      	ldr	r6, [pc, #396]	; (80031c8 <HAL_GPIO_Init+0x25c>)
 800303c:	42b0      	cmp	r0, r6
 800303e:	f000 80ae 	beq.w	800319e <HAL_GPIO_Init+0x232>
 8003042:	4e62      	ldr	r6, [pc, #392]	; (80031cc <HAL_GPIO_Init+0x260>)
 8003044:	42b0      	cmp	r0, r6
 8003046:	bf0c      	ite	eq
 8003048:	2609      	moveq	r6, #9
 800304a:	260a      	movne	r6, #10
 800304c:	fa06 f609 	lsl.w	r6, r6, r9
 8003050:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003052:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800305a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800305e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8003062:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003064:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003068:	bf0c      	ite	eq
 800306a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800306c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003070:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8003074:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8003078:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800307c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003080:	bf0c      	ite	eq
 8003082:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8003084:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003088:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800308c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003090:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003094:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003098:	bf0c      	ite	eq
 800309a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800309c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030a0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030a2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80030a6:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80030aa:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 80030ae:	bf54      	ite	pl
 80030b0:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80030b2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80030b6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80030ba:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030bc:	f10c 0c02 	add.w	ip, ip, #2
 80030c0:	fa34 f203 	lsrs.w	r2, r4, r3
 80030c4:	f47f af5d 	bne.w	8002f82 <HAL_GPIO_Init+0x16>
  }
}
 80030c8:	b003      	add	sp, #12
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ce:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80030d2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030d4:	fa08 f80c 	lsl.w	r8, r8, ip
 80030d8:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030dc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030de:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80030e6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80030ea:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ec:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80030f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fa:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80030fc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80030fe:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003100:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003104:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003106:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800310a:	fa06 f60c 	lsl.w	r6, r6, ip
 800310e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8003112:	fa09 f20c 	lsl.w	r2, r9, ip
 8003116:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003118:	f47f af49 	bne.w	8002fae <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800311c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003120:	f003 0b07 	and.w	fp, r3, #7
 8003124:	260f      	movs	r6, #15
 8003126:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800312a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800312e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003132:	fa06 f60b 	lsl.w	r6, r6, fp
 8003136:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800313a:	690e      	ldr	r6, [r1, #16]
 800313c:	fa06 f60b 	lsl.w	r6, r6, fp
 8003140:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003144:	f8c9 6020 	str.w	r6, [r9, #32]
 8003148:	e731      	b.n	8002fae <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800314a:	f04f 0803 	mov.w	r8, #3
 800314e:	fa08 f80c 	lsl.w	r8, r8, ip
 8003152:	ea6f 0808 	mvn.w	r8, r8
 8003156:	e7d2      	b.n	80030fe <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003158:	2603      	movs	r6, #3
 800315a:	fa06 f609 	lsl.w	r6, r6, r9
 800315e:	4332      	orrs	r2, r6
 8003160:	e777      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 8003162:	2601      	movs	r6, #1
 8003164:	fa06 f609 	lsl.w	r6, r6, r9
 8003168:	4332      	orrs	r2, r6
 800316a:	e772      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 800316c:	2602      	movs	r6, #2
 800316e:	fa06 f609 	lsl.w	r6, r6, r9
 8003172:	4332      	orrs	r2, r6
 8003174:	e76d      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 8003176:	2606      	movs	r6, #6
 8003178:	fa06 f609 	lsl.w	r6, r6, r9
 800317c:	4332      	orrs	r2, r6
 800317e:	e768      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 8003180:	2604      	movs	r6, #4
 8003182:	fa06 f609 	lsl.w	r6, r6, r9
 8003186:	4332      	orrs	r2, r6
 8003188:	e763      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 800318a:	2605      	movs	r6, #5
 800318c:	fa06 f609 	lsl.w	r6, r6, r9
 8003190:	4332      	orrs	r2, r6
 8003192:	e75e      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 8003194:	2607      	movs	r6, #7
 8003196:	fa06 f609 	lsl.w	r6, r6, r9
 800319a:	4332      	orrs	r2, r6
 800319c:	e759      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 800319e:	2608      	movs	r6, #8
 80031a0:	fa06 f609 	lsl.w	r6, r6, r9
 80031a4:	4332      	orrs	r2, r6
 80031a6:	e754      	b.n	8003052 <HAL_GPIO_Init+0xe6>
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58020000 	.word	0x58020000
 80031b0:	58020800 	.word	0x58020800
 80031b4:	58020c00 	.word	0x58020c00
 80031b8:	58021000 	.word	0x58021000
 80031bc:	58021400 	.word	0x58021400
 80031c0:	58021800 	.word	0x58021800
 80031c4:	58021c00 	.word	0x58021c00
 80031c8:	58022000 	.word	0x58022000
 80031cc:	58022400 	.word	0x58022400

080031d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d0:	b902      	cbnz	r2, 80031d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031d2:	0409      	lsls	r1, r1, #16
 80031d4:	6181      	str	r1, [r0, #24]
  }
}
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031d8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031da:	ea01 0203 	and.w	r2, r1, r3
 80031de:	ea21 0103 	bic.w	r1, r1, r3
 80031e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031e6:	6181      	str	r1, [r0, #24]
}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop

080031ec <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop

080031f0 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80031f8:	4201      	tst	r1, r0
 80031fa:	d100      	bne.n	80031fe <HAL_GPIO_EXTI_IRQHandler+0xe>
 80031fc:	4770      	bx	lr
{
 80031fe:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003200:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003204:	f7ff fff2 	bl	80031ec <HAL_GPIO_EXTI_Callback>
}
 8003208:	bd08      	pop	{r3, pc}
 800320a:	bf00      	nop

0800320c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800320c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800320e:	4c10      	ldr	r4, [pc, #64]	; (8003250 <HAL_PWREx_ConfigSupply+0x44>)
 8003210:	68e3      	ldr	r3, [r4, #12]
 8003212:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003216:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003218:	d105      	bne.n	8003226 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800321a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800321e:	1a18      	subs	r0, r3, r0
 8003220:	bf18      	it	ne
 8003222:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003224:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	4303      	orrs	r3, r0
 800322c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800322e:	f7fe fd49 	bl	8001cc4 <HAL_GetTick>
 8003232:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003234:	e005      	b.n	8003242 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003236:	f7fe fd45 	bl	8001cc4 <HAL_GetTick>
 800323a:	1b40      	subs	r0, r0, r5
 800323c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003240:	d804      	bhi.n	800324c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003242:	6863      	ldr	r3, [r4, #4]
 8003244:	049b      	lsls	r3, r3, #18
 8003246:	d5f6      	bpl.n	8003236 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8003248:	2000      	movs	r0, #0
}
 800324a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
}
 800324e:	bd38      	pop	{r3, r4, r5, pc}
 8003250:	58024800 	.word	0x58024800

08003254 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003254:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003256:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800325a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800325c:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800325e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003262:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003264:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8003268:	d038      	beq.n	80032dc <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800326a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800326e:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003272:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003276:	fb05 f101 	mul.w	r1, r5, r1
 800327a:	2a01      	cmp	r2, #1
 800327c:	ee07 1a90 	vmov	s15, r1
 8003280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8003284:	d002      	beq.n	800328c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8003286:	2a02      	cmp	r2, #2
 8003288:	d04e      	beq.n	8003328 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800328a:	b34a      	cbz	r2, 80032e0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800328c:	ee07 0a90 	vmov	s15, r0
 8003290:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8003348 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8003294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800329e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800334c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80032a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80032ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80032b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80032ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80032c6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80032dc:	bc30      	pop	{r4, r5}
 80032de:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	0692      	lsls	r2, r2, #26
 80032e4:	d527      	bpl.n	8003336 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032e6:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032e8:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032ec:	4a18      	ldr	r2, [pc, #96]	; (8003350 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032ee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032f4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800334c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8003300:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003304:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003306:	ee06 3a90 	vmov	s13, r3
 800330a:	ee06 2a10 	vmov	s12, r2
 800330e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003312:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003316:	eee7 6a05 	vfma.f32	s13, s14, s10
 800331a:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800331e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003322:	ee66 6a87 	vmul.f32	s13, s13, s14
 8003326:	e7ca      	b.n	80032be <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003328:	ee07 0a90 	vmov	s15, r0
 800332c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003354 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8003330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003334:	e7b0      	b.n	8003298 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003336:	ee07 0a90 	vmov	s15, r0
 800333a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8003358 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800333e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003342:	e7a9      	b.n	8003298 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003344:	58024400 	.word	0x58024400
 8003348:	4a742400 	.word	0x4a742400
 800334c:	39000000 	.word	0x39000000
 8003350:	03d09000 	.word	0x03d09000
 8003354:	4bbebc20 	.word	0x4bbebc20
 8003358:	4c742400 	.word	0x4c742400

0800335c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800335c:	2800      	cmp	r0, #0
 800335e:	f000 81e8 	beq.w	8003732 <HAL_RCC_OscConfig+0x3d6>
{
 8003362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003364:	6803      	ldr	r3, [r0, #0]
 8003366:	4604      	mov	r4, r0
 8003368:	07d9      	lsls	r1, r3, #31
 800336a:	d52e      	bpl.n	80033ca <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336c:	49a4      	ldr	r1, [pc, #656]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 800336e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003370:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003376:	2a10      	cmp	r2, #16
 8003378:	f000 8107 	beq.w	800358a <HAL_RCC_OscConfig+0x22e>
 800337c:	2a18      	cmp	r2, #24
 800337e:	f000 80ff 	beq.w	8003580 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	f000 812a 	beq.w	80035e0 <HAL_RCC_OscConfig+0x284>
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8168 	beq.w	8003662 <HAL_RCC_OscConfig+0x306>
 8003392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003396:	4b9a      	ldr	r3, [pc, #616]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f000 8269 	beq.w	8003870 <HAL_RCC_OscConfig+0x514>
 800339e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc8a 	bl	8001cc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b0:	4e93      	ldr	r6, [pc, #588]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80033b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b4:	e005      	b.n	80033c2 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b6:	f7fe fc85 	bl	8001cc4 <HAL_GetTick>
 80033ba:	1b40      	subs	r0, r0, r5
 80033bc:	2864      	cmp	r0, #100	; 0x64
 80033be:	f200 814e 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c2:	6833      	ldr	r3, [r6, #0]
 80033c4:	039b      	lsls	r3, r3, #14
 80033c6:	d5f6      	bpl.n	80033b6 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	079d      	lsls	r5, r3, #30
 80033cc:	f100 808a 	bmi.w	80034e4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033d0:	06d9      	lsls	r1, r3, #27
 80033d2:	d533      	bpl.n	800343c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d4:	4a8a      	ldr	r2, [pc, #552]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80033d6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80033de:	2b08      	cmp	r3, #8
 80033e0:	f000 80e3 	beq.w	80035aa <HAL_RCC_OscConfig+0x24e>
 80033e4:	2b18      	cmp	r3, #24
 80033e6:	f000 80db 	beq.w	80035a0 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033ea:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80033ec:	4d84      	ldr	r5, [pc, #528]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 816f 	beq.w	80036d2 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033fc:	f7fe fc62 	bl	8001cc4 <HAL_GetTick>
 8003400:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003402:	e005      	b.n	8003410 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003404:	f7fe fc5e 	bl	8001cc4 <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	2802      	cmp	r0, #2
 800340c:	f200 8127 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	05db      	lsls	r3, r3, #23
 8003414:	d5f6      	bpl.n	8003404 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003416:	f7fe fc5b 	bl	8001cd0 <HAL_GetREVID>
 800341a:	f241 0303 	movw	r3, #4099	; 0x1003
 800341e:	4298      	cmp	r0, r3
 8003420:	f200 8247 	bhi.w	80038b2 <HAL_RCC_OscConfig+0x556>
 8003424:	6a22      	ldr	r2, [r4, #32]
 8003426:	686b      	ldr	r3, [r5, #4]
 8003428:	2a20      	cmp	r2, #32
 800342a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800342e:	bf0c      	ite	eq
 8003430:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003434:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003438:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	071d      	lsls	r5, r3, #28
 800343e:	d516      	bpl.n	800346e <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003440:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003442:	4d6f      	ldr	r5, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8122 	beq.w	800368e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800344a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003452:	f7fe fc37 	bl	8001cc4 <HAL_GetTick>
 8003456:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003458:	e005      	b.n	8003466 <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345a:	f7fe fc33 	bl	8001cc4 <HAL_GetTick>
 800345e:	1b80      	subs	r0, r0, r6
 8003460:	2802      	cmp	r0, #2
 8003462:	f200 80fc 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003466:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003468:	0798      	lsls	r0, r3, #30
 800346a:	d5f6      	bpl.n	800345a <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	069a      	lsls	r2, r3, #26
 8003470:	d516      	bpl.n	80034a0 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003472:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003474:	4d62      	ldr	r5, [pc, #392]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 811a 	beq.w	80036b0 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003482:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003484:	f7fe fc1e 	bl	8001cc4 <HAL_GetTick>
 8003488:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800348a:	e005      	b.n	8003498 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800348c:	f7fe fc1a 	bl	8001cc4 <HAL_GetTick>
 8003490:	1b80      	subs	r0, r0, r6
 8003492:	2802      	cmp	r0, #2
 8003494:	f200 80e3 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003498:	682b      	ldr	r3, [r5, #0]
 800349a:	049f      	lsls	r7, r3, #18
 800349c:	d5f6      	bpl.n	800348c <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	0759      	lsls	r1, r3, #29
 80034a2:	f100 80a3 	bmi.w	80035ec <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80034a8:	b1d0      	cbz	r0, 80034e0 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034aa:	4d55      	ldr	r5, [pc, #340]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80034ac:	692b      	ldr	r3, [r5, #16]
 80034ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034b2:	2b18      	cmp	r3, #24
 80034b4:	f000 81ae 	beq.w	8003814 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80034b8:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80034bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c2:	f000 8142 	beq.w	800374a <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 80034c6:	f7fe fbfd 	bl	8001cc4 <HAL_GetTick>
 80034ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034cc:	e005      	b.n	80034da <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe fbf9 	bl	8001cc4 <HAL_GetTick>
 80034d2:	1b00      	subs	r0, r0, r4
 80034d4:	2802      	cmp	r0, #2
 80034d6:	f200 80c2 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	d4f6      	bmi.n	80034ce <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80034e0:	2000      	movs	r0, #0
}
 80034e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e4:	4a46      	ldr	r2, [pc, #280]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80034e6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034ea:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80034ee:	d12d      	bne.n	800354c <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f0:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80034f2:	68e2      	ldr	r2, [r4, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0759      	lsls	r1, r3, #29
 80034f8:	d501      	bpl.n	80034fe <HAL_RCC_OscConfig+0x1a2>
 80034fa:	2a00      	cmp	r2, #0
 80034fc:	d04e      	beq.n	800359c <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034fe:	4d40      	ldr	r5, [pc, #256]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	f023 0319 	bic.w	r3, r3, #25
 8003506:	4313      	orrs	r3, r2
 8003508:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 800350a:	f7fe fbdb 	bl	8001cc4 <HAL_GetTick>
 800350e:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003510:	e005      	b.n	800351e <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fbd7 	bl	8001cc4 <HAL_GetTick>
 8003516:	1b80      	subs	r0, r0, r6
 8003518:	2802      	cmp	r0, #2
 800351a:	f200 80a0 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351e:	682b      	ldr	r3, [r5, #0]
 8003520:	075b      	lsls	r3, r3, #29
 8003522:	d5f6      	bpl.n	8003512 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	f7fe fbd4 	bl	8001cd0 <HAL_GetREVID>
 8003528:	f241 0303 	movw	r3, #4099	; 0x1003
 800352c:	4298      	cmp	r0, r3
 800352e:	f200 80f7 	bhi.w	8003720 <HAL_RCC_OscConfig+0x3c4>
 8003532:	6922      	ldr	r2, [r4, #16]
 8003534:	686b      	ldr	r3, [r5, #4]
 8003536:	2a40      	cmp	r2, #64	; 0x40
 8003538:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800353c:	bf0c      	ite	eq
 800353e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8003542:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003546:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	e741      	b.n	80033d0 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800354c:	2b18      	cmp	r3, #24
 800354e:	f000 80e3 	beq.w	8003718 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003552:	4d2b      	ldr	r5, [pc, #172]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003554:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003556:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003558:	2a00      	cmp	r2, #0
 800355a:	f000 80cc 	beq.w	80036f6 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800355e:	f023 0319 	bic.w	r3, r3, #25
 8003562:	4313      	orrs	r3, r2
 8003564:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003566:	f7fe fbad 	bl	8001cc4 <HAL_GetTick>
 800356a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800356c:	e004      	b.n	8003578 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356e:	f7fe fba9 	bl	8001cc4 <HAL_GetTick>
 8003572:	1b80      	subs	r0, r0, r6
 8003574:	2802      	cmp	r0, #2
 8003576:	d872      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	075f      	lsls	r7, r3, #29
 800357c:	d5f7      	bpl.n	800356e <HAL_RCC_OscConfig+0x212>
 800357e:	e7d1      	b.n	8003524 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003580:	f001 0103 	and.w	r1, r1, #3
 8003584:	2902      	cmp	r1, #2
 8003586:	f47f aefc 	bne.w	8003382 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	0392      	lsls	r2, r2, #14
 8003590:	f57f af1b 	bpl.w	80033ca <HAL_RCC_OscConfig+0x6e>
 8003594:	6862      	ldr	r2, [r4, #4]
 8003596:	2a00      	cmp	r2, #0
 8003598:	f47f af17 	bne.w	80033ca <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800359c:	2001      	movs	r0, #1
}
 800359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035a0:	f002 0203 	and.w	r2, r2, #3
 80035a4:	2a01      	cmp	r2, #1
 80035a6:	f47f af20 	bne.w	80033ea <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	05da      	lsls	r2, r3, #23
 80035b0:	d502      	bpl.n	80035b8 <HAL_RCC_OscConfig+0x25c>
 80035b2:	69e3      	ldr	r3, [r4, #28]
 80035b4:	2b80      	cmp	r3, #128	; 0x80
 80035b6:	d1f1      	bne.n	800359c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035b8:	f7fe fb8a 	bl	8001cd0 <HAL_GetREVID>
 80035bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80035c0:	4298      	cmp	r0, r3
 80035c2:	f200 80b8 	bhi.w	8003736 <HAL_RCC_OscConfig+0x3da>
 80035c6:	6a22      	ldr	r2, [r4, #32]
 80035c8:	2a20      	cmp	r2, #32
 80035ca:	f000 8187 	beq.w	80038dc <HAL_RCC_OscConfig+0x580>
 80035ce:	490c      	ldr	r1, [pc, #48]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80035d0:	684b      	ldr	r3, [r1, #4]
 80035d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035d6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80035da:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	e72d      	b.n	800343c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_RCC_OscConfig+0x2a4>)
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ea:	e6df      	b.n	80033ac <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80035ec:	4d05      	ldr	r5, [pc, #20]	; (8003604 <HAL_RCC_OscConfig+0x2a8>)
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80035f6:	f7fe fb65 	bl	8001cc4 <HAL_GetTick>
 80035fa:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035fc:	e009      	b.n	8003612 <HAL_RCC_OscConfig+0x2b6>
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fe fb5c 	bl	8001cc4 <HAL_GetTick>
 800360c:	1b80      	subs	r0, r0, r6
 800360e:	2864      	cmp	r0, #100	; 0x64
 8003610:	d825      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003612:	682b      	ldr	r3, [r5, #0]
 8003614:	05da      	lsls	r2, r3, #23
 8003616:	d5f7      	bpl.n	8003608 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	68a3      	ldr	r3, [r4, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	f000 8158 	beq.w	80038d0 <HAL_RCC_OscConfig+0x574>
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 812d 	beq.w	8003880 <HAL_RCC_OscConfig+0x524>
 8003626:	2b05      	cmp	r3, #5
 8003628:	4ba6      	ldr	r3, [pc, #664]	; (80038c4 <HAL_RCC_OscConfig+0x568>)
 800362a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800362c:	f000 815f 	beq.w	80038ee <HAL_RCC_OscConfig+0x592>
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	671a      	str	r2, [r3, #112]	; 0x70
 8003636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003638:	f022 0204 	bic.w	r2, r2, #4
 800363c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800363e:	f7fe fb41 	bl	8001cc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003642:	4ea0      	ldr	r6, [pc, #640]	; (80038c4 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003644:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003648:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800364a:	e004      	b.n	8003656 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe fb3a 	bl	8001cc4 <HAL_GetTick>
 8003650:	1b40      	subs	r0, r0, r5
 8003652:	42b8      	cmp	r0, r7
 8003654:	d803      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003656:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003658:	079b      	lsls	r3, r3, #30
 800365a:	d5f7      	bpl.n	800364c <HAL_RCC_OscConfig+0x2f0>
 800365c:	e723      	b.n	80034a6 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800365e:	2003      	movs	r0, #3
}
 8003660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	4d98      	ldr	r5, [pc, #608]	; (80038c4 <HAL_RCC_OscConfig+0x568>)
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003674:	f7fe fb26 	bl	8001cc4 <HAL_GetTick>
 8003678:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800367a:	e004      	b.n	8003686 <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367c:	f7fe fb22 	bl	8001cc4 <HAL_GetTick>
 8003680:	1b80      	subs	r0, r0, r6
 8003682:	2864      	cmp	r0, #100	; 0x64
 8003684:	d8eb      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	039f      	lsls	r7, r3, #14
 800368a:	d4f7      	bmi.n	800367c <HAL_RCC_OscConfig+0x320>
 800368c:	e69c      	b.n	80033c8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800368e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003696:	f7fe fb15 	bl	8001cc4 <HAL_GetTick>
 800369a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800369c:	e004      	b.n	80036a8 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369e:	f7fe fb11 	bl	8001cc4 <HAL_GetTick>
 80036a2:	1b80      	subs	r0, r0, r6
 80036a4:	2802      	cmp	r0, #2
 80036a6:	d8da      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80036aa:	0799      	lsls	r1, r3, #30
 80036ac:	d4f7      	bmi.n	800369e <HAL_RCC_OscConfig+0x342>
 80036ae:	e6dd      	b.n	800346c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80036b8:	f7fe fb04 	bl	8001cc4 <HAL_GetTick>
 80036bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036be:	e004      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036c0:	f7fe fb00 	bl	8001cc4 <HAL_GetTick>
 80036c4:	1b80      	subs	r0, r0, r6
 80036c6:	2802      	cmp	r0, #2
 80036c8:	d8c9      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	0498      	lsls	r0, r3, #18
 80036ce:	d4f7      	bmi.n	80036c0 <HAL_RCC_OscConfig+0x364>
 80036d0:	e6e5      	b.n	800349e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036da:	f7fe faf3 	bl	8001cc4 <HAL_GetTick>
 80036de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036e0:	e004      	b.n	80036ec <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036e2:	f7fe faef 	bl	8001cc4 <HAL_GetTick>
 80036e6:	1b80      	subs	r0, r0, r6
 80036e8:	2802      	cmp	r0, #2
 80036ea:	d8b8      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	05df      	lsls	r7, r3, #23
 80036f0:	d4f7      	bmi.n	80036e2 <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	e6a2      	b.n	800343c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036fc:	f7fe fae2 	bl	8001cc4 <HAL_GetTick>
 8003700:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003702:	e004      	b.n	800370e <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003704:	f7fe fade 	bl	8001cc4 <HAL_GetTick>
 8003708:	1b80      	subs	r0, r0, r6
 800370a:	2802      	cmp	r0, #2
 800370c:	d8a7      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800370e:	682b      	ldr	r3, [r5, #0]
 8003710:	0758      	lsls	r0, r3, #29
 8003712:	d4f7      	bmi.n	8003704 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	e65b      	b.n	80033d0 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003718:	0790      	lsls	r0, r2, #30
 800371a:	f47f af1a 	bne.w	8003552 <HAL_RCC_OscConfig+0x1f6>
 800371e:	e6e7      	b.n	80034f0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	686b      	ldr	r3, [r5, #4]
 8003722:	6922      	ldr	r2, [r4, #16]
 8003724:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800372c:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	e64e      	b.n	80033d0 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8003732:	2001      	movs	r0, #1
}
 8003734:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003736:	4a63      	ldr	r2, [pc, #396]	; (80038c4 <HAL_RCC_OscConfig+0x568>)
 8003738:	6a21      	ldr	r1, [r4, #32]
 800373a:	68d3      	ldr	r3, [r2, #12]
 800373c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003740:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003744:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	e678      	b.n	800343c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800374a:	f7fe fabb 	bl	8001cc4 <HAL_GetTick>
 800374e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003750:	e004      	b.n	800375c <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe fab7 	bl	8001cc4 <HAL_GetTick>
 8003756:	1b80      	subs	r0, r0, r6
 8003758:	2802      	cmp	r0, #2
 800375a:	d880      	bhi.n	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	0199      	lsls	r1, r3, #6
 8003760:	d4f7      	bmi.n	8003752 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003762:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003764:	4b58      	ldr	r3, [pc, #352]	; (80038c8 <HAL_RCC_OscConfig+0x56c>)
 8003766:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003768:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800376a:	4958      	ldr	r1, [pc, #352]	; (80038cc <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800376c:	4e55      	ldr	r6, [pc, #340]	; (80038c4 <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376e:	4313      	orrs	r3, r2
 8003770:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003772:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003776:	62ab      	str	r3, [r5, #40]	; 0x28
 8003778:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800377c:	3b01      	subs	r3, #1
 800377e:	3a01      	subs	r2, #1
 8003780:	025b      	lsls	r3, r3, #9
 8003782:	0412      	lsls	r2, r2, #16
 8003784:	b29b      	uxth	r3, r3
 8003786:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800378a:	4313      	orrs	r3, r2
 800378c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800378e:	3a01      	subs	r2, #1
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	4313      	orrs	r3, r2
 8003796:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003798:	3a01      	subs	r2, #1
 800379a:	0612      	lsls	r2, r2, #24
 800379c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80037a0:	4313      	orrs	r3, r2
 80037a2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80037a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80037ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80037b0:	4011      	ands	r1, r2
 80037b2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80037b6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037bc:	f023 030c 	bic.w	r3, r3, #12
 80037c0:	4313      	orrs	r3, r2
 80037c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037c8:	f023 0302 	bic.w	r3, r3, #2
 80037cc:	4313      	orrs	r3, r2
 80037ce:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037de:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80037e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80037f8:	f7fe fa64 	bl	8001cc4 <HAL_GetTick>
 80037fc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037fe:	e005      	b.n	800380c <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe fa60 	bl	8001cc4 <HAL_GetTick>
 8003804:	1b00      	subs	r0, r0, r4
 8003806:	2802      	cmp	r0, #2
 8003808:	f63f af29 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800380c:	6833      	ldr	r3, [r6, #0]
 800380e:	019a      	lsls	r2, r3, #6
 8003810:	d5f6      	bpl.n	8003800 <HAL_RCC_OscConfig+0x4a4>
 8003812:	e665      	b.n	80034e0 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003814:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003816:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003818:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381a:	f43f ae62 	beq.w	80034e2 <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003822:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003824:	428b      	cmp	r3, r1
 8003826:	f47f aeb9 	bne.w	800359c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800382a:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003830:	429a      	cmp	r2, r3
 8003832:	f47f aeb3 	bne.w	800359c <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003836:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003838:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800383c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	f47f aeac 	bne.w	800359c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003846:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800384a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	f47f aea5 	bne.w	800359c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003854:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8003858:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	f47f ae9e 	bne.w	800359c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003860:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003862:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8003866:	3801      	subs	r0, #1
    return HAL_ERROR;
 8003868:	1a28      	subs	r0, r5, r0
 800386a:	bf18      	it	ne
 800386c:	2001      	movne	r0, #1
}
 800386e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e595      	b.n	80033ac <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003880:	4d10      	ldr	r5, [pc, #64]	; (80038c4 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003882:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003886:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	672b      	str	r3, [r5, #112]	; 0x70
 800388e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003896:	f7fe fa15 	bl	8001cc4 <HAL_GetTick>
 800389a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800389c:	e005      	b.n	80038aa <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fa11 	bl	8001cc4 <HAL_GetTick>
 80038a2:	1b80      	subs	r0, r0, r6
 80038a4:	42b8      	cmp	r0, r7
 80038a6:	f63f aeda 	bhi.w	800365e <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038ac:	0798      	lsls	r0, r3, #30
 80038ae:	d4f6      	bmi.n	800389e <HAL_RCC_OscConfig+0x542>
 80038b0:	e5f9      	b.n	80034a6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038b2:	68eb      	ldr	r3, [r5, #12]
 80038b4:	6a22      	ldr	r2, [r4, #32]
 80038b6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80038ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038be:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	e5bb      	b.n	800343c <HAL_RCC_OscConfig+0xe0>
 80038c4:	58024400 	.word	0x58024400
 80038c8:	fffffc0c 	.word	0xfffffc0c
 80038cc:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x5a4>)
 80038d2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038da:	e6b0      	b.n	800363e <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038dc:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_RCC_OscConfig+0x5a4>)
 80038de:	6853      	ldr	r3, [r2, #4]
 80038e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e8:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	e5a6      	b.n	800343c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ee:	f042 0204 	orr.w	r2, r2, #4
 80038f2:	671a      	str	r2, [r3, #112]	; 0x70
 80038f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	671a      	str	r2, [r3, #112]	; 0x70
 80038fc:	e69f      	b.n	800363e <HAL_RCC_OscConfig+0x2e2>
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400

08003904 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003904:	4a0c      	ldr	r2, [pc, #48]	; (8003938 <HAL_RCC_GetSysClockFreq+0x34>)
 8003906:	6913      	ldr	r3, [r2, #16]
 8003908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390c:	2b10      	cmp	r3, #16
 800390e:	d004      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x16>
 8003910:	2b18      	cmp	r3, #24
 8003912:	d00d      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x2c>
 8003914:	b11b      	cbz	r3, 800391e <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8003916:	4809      	ldr	r0, [pc, #36]	; (800393c <HAL_RCC_GetSysClockFreq+0x38>)
 8003918:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391a:	4809      	ldr	r0, [pc, #36]	; (8003940 <HAL_RCC_GetSysClockFreq+0x3c>)
 800391c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	069b      	lsls	r3, r3, #26
 8003922:	d507      	bpl.n	8003934 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	4807      	ldr	r0, [pc, #28]	; (8003944 <HAL_RCC_GetSysClockFreq+0x40>)
 8003928:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800392c:	40d8      	lsrs	r0, r3
 800392e:	4770      	bx	lr
 8003930:	f7ff bc90 	b.w	8003254 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003934:	4803      	ldr	r0, [pc, #12]	; (8003944 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003936:	4770      	bx	lr
 8003938:	58024400 	.word	0x58024400
 800393c:	003d0900 	.word	0x003d0900
 8003940:	017d7840 	.word	0x017d7840
 8003944:	03d09000 	.word	0x03d09000

08003948 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003948:	2800      	cmp	r0, #0
 800394a:	f000 810c 	beq.w	8003b66 <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394e:	4a8c      	ldr	r2, [pc, #560]	; (8003b80 <HAL_RCC_ClockConfig+0x238>)
 8003950:	6813      	ldr	r3, [r2, #0]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	428b      	cmp	r3, r1
{
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	4604      	mov	r4, r0
 800395e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	d20c      	bcs.n	800397c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	f023 030f 	bic.w	r3, r3, #15
 8003968:	430b      	orrs	r3, r1
 800396a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	428b      	cmp	r3, r1
 8003974:	d002      	beq.n	800397c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003976:	2001      	movs	r0, #1
}
 8003978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	075f      	lsls	r7, r3, #29
 8003980:	d50b      	bpl.n	800399a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003982:	4980      	ldr	r1, [pc, #512]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003984:	6920      	ldr	r0, [r4, #16]
 8003986:	698a      	ldr	r2, [r1, #24]
 8003988:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800398c:	4290      	cmp	r0, r2
 800398e:	d904      	bls.n	800399a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003990:	698a      	ldr	r2, [r1, #24]
 8003992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003996:	4302      	orrs	r2, r0
 8003998:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399a:	071e      	lsls	r6, r3, #28
 800399c:	d50b      	bpl.n	80039b6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800399e:	4979      	ldr	r1, [pc, #484]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 80039a0:	6960      	ldr	r0, [r4, #20]
 80039a2:	69ca      	ldr	r2, [r1, #28]
 80039a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80039a8:	4290      	cmp	r0, r2
 80039aa:	d904      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039ac:	69ca      	ldr	r2, [r1, #28]
 80039ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039b2:	4302      	orrs	r2, r0
 80039b4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	06d8      	lsls	r0, r3, #27
 80039b8:	d50b      	bpl.n	80039d2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039ba:	4972      	ldr	r1, [pc, #456]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 80039bc:	69a0      	ldr	r0, [r4, #24]
 80039be:	69ca      	ldr	r2, [r1, #28]
 80039c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80039c4:	4290      	cmp	r0, r2
 80039c6:	d904      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039c8:	69ca      	ldr	r2, [r1, #28]
 80039ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ce:	4302      	orrs	r2, r0
 80039d0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039d2:	0699      	lsls	r1, r3, #26
 80039d4:	d50b      	bpl.n	80039ee <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039d6:	496b      	ldr	r1, [pc, #428]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 80039d8:	69e0      	ldr	r0, [r4, #28]
 80039da:	6a0a      	ldr	r2, [r1, #32]
 80039dc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80039e0:	4290      	cmp	r0, r2
 80039e2:	d904      	bls.n	80039ee <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039e4:	6a0a      	ldr	r2, [r1, #32]
 80039e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039ea:	4302      	orrs	r2, r0
 80039ec:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ee:	079a      	lsls	r2, r3, #30
 80039f0:	f140 80ab 	bpl.w	8003b4a <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039f4:	4863      	ldr	r0, [pc, #396]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 80039f6:	68e1      	ldr	r1, [r4, #12]
 80039f8:	6982      	ldr	r2, [r0, #24]
 80039fa:	f002 020f 	and.w	r2, r2, #15
 80039fe:	4291      	cmp	r1, r2
 8003a00:	d904      	bls.n	8003a0c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a02:	6982      	ldr	r2, [r0, #24]
 8003a04:	f022 020f 	bic.w	r2, r2, #15
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0c:	07d8      	lsls	r0, r3, #31
 8003a0e:	d530      	bpl.n	8003a72 <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a10:	4a5c      	ldr	r2, [pc, #368]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003a12:	68a1      	ldr	r1, [r4, #8]
 8003a14:	6993      	ldr	r3, [r2, #24]
 8003a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a20:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	2902      	cmp	r1, #2
 8003a24:	f000 80a1 	beq.w	8003b6a <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a28:	2903      	cmp	r1, #3
 8003a2a:	f000 8098 	beq.w	8003b5e <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a2e:	2901      	cmp	r1, #1
 8003a30:	f000 80a1 	beq.w	8003b76 <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a34:	0758      	lsls	r0, r3, #29
 8003a36:	d59e      	bpl.n	8003976 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a38:	4e52      	ldr	r6, [pc, #328]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3e:	6933      	ldr	r3, [r6, #16]
 8003a40:	f023 0307 	bic.w	r3, r3, #7
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8003a48:	f7fe f93c 	bl	8001cc4 <HAL_GetTick>
 8003a4c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e005      	b.n	8003a5c <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fe f938 	bl	8001cc4 <HAL_GetTick>
 8003a54:	1bc0      	subs	r0, r0, r7
 8003a56:	4540      	cmp	r0, r8
 8003a58:	f200 808b 	bhi.w	8003b72 <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5c:	6933      	ldr	r3, [r6, #16]
 8003a5e:	6862      	ldr	r2, [r4, #4]
 8003a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a64:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003a68:	d1f2      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	0799      	lsls	r1, r3, #30
 8003a6e:	d506      	bpl.n	8003a7e <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a70:	68e1      	ldr	r1, [r4, #12]
 8003a72:	4844      	ldr	r0, [pc, #272]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003a74:	6982      	ldr	r2, [r0, #24]
 8003a76:	f002 020f 	and.w	r2, r2, #15
 8003a7a:	428a      	cmp	r2, r1
 8003a7c:	d869      	bhi.n	8003b52 <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7e:	4940      	ldr	r1, [pc, #256]	; (8003b80 <HAL_RCC_ClockConfig+0x238>)
 8003a80:	680a      	ldr	r2, [r1, #0]
 8003a82:	f002 020f 	and.w	r2, r2, #15
 8003a86:	42aa      	cmp	r2, r5
 8003a88:	d90a      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	680a      	ldr	r2, [r1, #0]
 8003a8c:	f022 020f 	bic.w	r2, r2, #15
 8003a90:	432a      	orrs	r2, r5
 8003a92:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a94:	680a      	ldr	r2, [r1, #0]
 8003a96:	f002 020f 	and.w	r2, r2, #15
 8003a9a:	42aa      	cmp	r2, r5
 8003a9c:	f47f af6b 	bne.w	8003976 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003aa0:	075a      	lsls	r2, r3, #29
 8003aa2:	d50b      	bpl.n	8003abc <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003aa4:	4937      	ldr	r1, [pc, #220]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003aa6:	6920      	ldr	r0, [r4, #16]
 8003aa8:	698a      	ldr	r2, [r1, #24]
 8003aaa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003aae:	4290      	cmp	r0, r2
 8003ab0:	d204      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ab2:	698a      	ldr	r2, [r1, #24]
 8003ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ab8:	4302      	orrs	r2, r0
 8003aba:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	071f      	lsls	r7, r3, #28
 8003abe:	d50b      	bpl.n	8003ad8 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ac0:	4930      	ldr	r1, [pc, #192]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003ac2:	6960      	ldr	r0, [r4, #20]
 8003ac4:	69ca      	ldr	r2, [r1, #28]
 8003ac6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003aca:	4290      	cmp	r0, r2
 8003acc:	d204      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ace:	69ca      	ldr	r2, [r1, #28]
 8003ad0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad4:	4302      	orrs	r2, r0
 8003ad6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	06de      	lsls	r6, r3, #27
 8003ada:	d50b      	bpl.n	8003af4 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003adc:	4929      	ldr	r1, [pc, #164]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003ade:	69a0      	ldr	r0, [r4, #24]
 8003ae0:	69ca      	ldr	r2, [r1, #28]
 8003ae2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ae6:	4290      	cmp	r0, r2
 8003ae8:	d204      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003aea:	69ca      	ldr	r2, [r1, #28]
 8003aec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af0:	4302      	orrs	r2, r0
 8003af2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003af4:	069d      	lsls	r5, r3, #26
 8003af6:	d50b      	bpl.n	8003b10 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003af8:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003afa:	69e1      	ldr	r1, [r4, #28]
 8003afc:	6a13      	ldr	r3, [r2, #32]
 8003afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b02:	4299      	cmp	r1, r3
 8003b04:	d204      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b06:	6a13      	ldr	r3, [r2, #32]
 8003b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b10:	f7ff fef8 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <HAL_RCC_ClockConfig+0x23c>)
 8003b16:	4603      	mov	r3, r0
 8003b18:	481b      	ldr	r0, [pc, #108]	; (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b1a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b1c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b1e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8003b22:	4d1a      	ldr	r5, [pc, #104]	; (8003b8c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b24:	f002 020f 	and.w	r2, r2, #15
 8003b28:	4c19      	ldr	r4, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b2a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b2c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b2e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8003b32:	4818      	ldr	r0, [pc, #96]	; (8003b94 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b34:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b38:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8003b3a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8003b3c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b3e:	40d3      	lsrs	r3, r2
 8003b40:	6023      	str	r3, [r4, #0]
}
 8003b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003b46:	f7fd bb79 	b.w	800123c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	07da      	lsls	r2, r3, #31
 8003b4c:	f53f af60 	bmi.w	8003a10 <HAL_RCC_ClockConfig+0xc8>
 8003b50:	e795      	b.n	8003a7e <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b52:	6982      	ldr	r2, [r0, #24]
 8003b54:	f022 020f 	bic.w	r2, r2, #15
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	6182      	str	r2, [r0, #24]
 8003b5c:	e78f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b5e:	019f      	lsls	r7, r3, #6
 8003b60:	f53f af6a 	bmi.w	8003a38 <HAL_RCC_ClockConfig+0xf0>
 8003b64:	e707      	b.n	8003976 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003b66:	2001      	movs	r0, #1
}
 8003b68:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b6a:	039b      	lsls	r3, r3, #14
 8003b6c:	f53f af64 	bmi.w	8003a38 <HAL_RCC_ClockConfig+0xf0>
 8003b70:	e701      	b.n	8003976 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8003b72:	2003      	movs	r0, #3
 8003b74:	e700      	b.n	8003978 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b76:	05de      	lsls	r6, r3, #23
 8003b78:	f53f af5e 	bmi.w	8003a38 <HAL_RCC_ClockConfig+0xf0>
 8003b7c:	e6fb      	b.n	8003976 <HAL_RCC_ClockConfig+0x2e>
 8003b7e:	bf00      	nop
 8003b80:	52002000 	.word	0x52002000
 8003b84:	58024400 	.word	0x58024400
 8003b88:	080103fc 	.word	0x080103fc
 8003b8c:	24000008 	.word	0x24000008
 8003b90:	2400000c 	.word	0x2400000c
 8003b94:	24000054 	.word	0x24000054

08003b98 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b98:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	6913      	ldr	r3, [r2, #16]
 8003b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d01a      	beq.n	8003bdc <HAL_RCC_GetHCLKFreq+0x44>
 8003ba6:	2b18      	cmp	r3, #24
 8003ba8:	d023      	beq.n	8003bf2 <HAL_RCC_GetHCLKFreq+0x5a>
 8003baa:	b1cb      	cbz	r3, 8003be0 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8003bac:	4814      	ldr	r0, [pc, #80]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x64>)
 8003bb0:	4914      	ldr	r1, [pc, #80]	; (8003c04 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003bb2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bb6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bba:	4c13      	ldr	r4, [pc, #76]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x70>)
 8003bbc:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bc0:	4d12      	ldr	r5, [pc, #72]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bc2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bc4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bc6:	f002 021f 	and.w	r2, r2, #31
 8003bca:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bce:	f003 001f 	and.w	r0, r3, #31
 8003bd2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8003bd6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bd8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bdc:	480c      	ldr	r0, [pc, #48]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x78>)
 8003bde:	e7e6      	b.n	8003bae <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	069b      	lsls	r3, r3, #26
 8003be4:	d508      	bpl.n	8003bf8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003be6:	6813      	ldr	r3, [r2, #0]
 8003be8:	480a      	ldr	r0, [pc, #40]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003bea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003bee:	40d8      	lsrs	r0, r3
 8003bf0:	e7dd      	b.n	8003bae <HAL_RCC_GetHCLKFreq+0x16>
 8003bf2:	f7ff fb2f 	bl	8003254 <HAL_RCC_GetSysClockFreq.part.0>
 8003bf6:	e7da      	b.n	8003bae <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bf8:	4806      	ldr	r0, [pc, #24]	; (8003c14 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003bfa:	e7d8      	b.n	8003bae <HAL_RCC_GetHCLKFreq+0x16>
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	003d0900 	.word	0x003d0900
 8003c04:	080103fc 	.word	0x080103fc
 8003c08:	2400000c 	.word	0x2400000c
 8003c0c:	24000008 	.word	0x24000008
 8003c10:	017d7840 	.word	0x017d7840
 8003c14:	03d09000 	.word	0x03d09000

08003c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c18:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c1a:	f7ff ffbd 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c20:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003c28:	5cd3      	ldrb	r3, [r2, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c2e:	40d8      	lsrs	r0, r3
 8003c30:	bd08      	pop	{r3, pc}
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	080103fc 	.word	0x080103fc

08003c3c <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c3e:	223f      	movs	r2, #63	; 0x3f
 8003c40:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	f002 0207 	and.w	r2, r2, #7
 8003c48:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003c50:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	f002 020f 	and.w	r2, r2, #15
 8003c58:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003c60:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003c68:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003c70:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c72:	6a1b      	ldr	r3, [r3, #32]
{
 8003c74:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7a:	4c05      	ldr	r4, [pc, #20]	; (8003c90 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c7c:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7e:	6823      	ldr	r3, [r4, #0]
}
 8003c80:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	600b      	str	r3, [r1, #0]
}
 8003c8a:	4770      	bx	lr
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	52002000 	.word	0x52002000

08003c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c96:	4c3a      	ldr	r4, [pc, #232]	; (8003d80 <RCCEx_PLL2_Config+0xec>)
 8003c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d067      	beq.n	8003d72 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	460f      	mov	r7, r1
 8003ca8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cae:	f7fe f809 	bl	8001cc4 <HAL_GetTick>
 8003cb2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cb4:	e004      	b.n	8003cc0 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cb6:	f7fe f805 	bl	8001cc4 <HAL_GetTick>
 8003cba:	1b43      	subs	r3, r0, r5
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d856      	bhi.n	8003d6e <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	011a      	lsls	r2, r3, #4
 8003cc4:	d4f7      	bmi.n	8003cb6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cc8:	6832      	ldr	r2, [r6, #0]
 8003cca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003cd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cd4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	3a01      	subs	r2, #1
 8003cdc:	025b      	lsls	r3, r3, #9
 8003cde:	0412      	lsls	r2, r2, #16
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	6872      	ldr	r2, [r6, #4]
 8003cea:	3a01      	subs	r2, #1
 8003cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	6932      	ldr	r2, [r6, #16]
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0612      	lsls	r2, r2, #24
 8003cf8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d02:	6972      	ldr	r2, [r6, #20]
 8003d04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d0e:	69b3      	ldr	r3, [r6, #24]
 8003d10:	f022 0220 	bic.w	r2, r2, #32
 8003d14:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d16:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d18:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d1c:	f022 0210 	bic.w	r2, r2, #16
 8003d20:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d22:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003d24:	69f2      	ldr	r2, [r6, #28]
 8003d26:	400b      	ands	r3, r1
 8003d28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d2c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d30:	f043 0310 	orr.w	r3, r3, #16
 8003d34:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003d38:	b1ef      	cbz	r7, 8003d76 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d3a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d3c:	bf0c      	ite	eq
 8003d3e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d42:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003d46:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d48:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <RCCEx_PLL2_Config+0xec>)
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d50:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d52:	f7fd ffb7 	bl	8001cc4 <HAL_GetTick>
 8003d56:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d58:	e004      	b.n	8003d64 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d5a:	f7fd ffb3 	bl	8001cc4 <HAL_GetTick>
 8003d5e:	1b40      	subs	r0, r0, r5
 8003d60:	2802      	cmp	r0, #2
 8003d62:	d804      	bhi.n	8003d6e <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	d5f7      	bpl.n	8003d5a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8003d6a:	2000      	movs	r0, #0
}
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003d6e:	2003      	movs	r0, #3
}
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
}
 8003d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d7c:	e7e4      	b.n	8003d48 <RCCEx_PLL2_Config+0xb4>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
 8003d84:	ffff0007 	.word	0xffff0007

08003d88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d8a:	4c3a      	ldr	r4, [pc, #232]	; (8003e74 <RCCEx_PLL3_Config+0xec>)
 8003d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d067      	beq.n	8003e66 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	4606      	mov	r6, r0
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da2:	f7fd ff8f 	bl	8001cc4 <HAL_GetTick>
 8003da6:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003da8:	e004      	b.n	8003db4 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003daa:	f7fd ff8b 	bl	8001cc4 <HAL_GetTick>
 8003dae:	1b43      	subs	r3, r0, r5
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d856      	bhi.n	8003e62 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	009a      	lsls	r2, r3, #2
 8003db8:	d4f7      	bmi.n	8003daa <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dbc:	6832      	ldr	r2, [r6, #0]
 8003dbe:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8003dc2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003dc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dc8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	025b      	lsls	r3, r3, #9
 8003dd2:	0412      	lsls	r2, r2, #16
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	6872      	ldr	r2, [r6, #4]
 8003dde:	3a01      	subs	r2, #1
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	4313      	orrs	r3, r2
 8003de6:	6932      	ldr	r2, [r6, #16]
 8003de8:	3a01      	subs	r2, #1
 8003dea:	0612      	lsls	r2, r2, #24
 8003dec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003df0:	4313      	orrs	r3, r2
 8003df2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003df6:	6972      	ldr	r2, [r6, #20]
 8003df8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e02:	69b3      	ldr	r3, [r6, #24]
 8003e04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e08:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e0c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e14:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003e18:	69f2      	ldr	r2, [r6, #28]
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e20:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003e2c:	b1ef      	cbz	r7, 8003e6a <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e2e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e30:	bf0c      	ite	eq
 8003e32:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e36:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e3c:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <RCCEx_PLL3_Config+0xec>)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e46:	f7fd ff3d 	bl	8001cc4 <HAL_GetTick>
 8003e4a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e4c:	e004      	b.n	8003e58 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e4e:	f7fd ff39 	bl	8001cc4 <HAL_GetTick>
 8003e52:	1b40      	subs	r0, r0, r5
 8003e54:	2802      	cmp	r0, #2
 8003e56:	d804      	bhi.n	8003e62 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	d5f7      	bpl.n	8003e4e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8003e5e:	2000      	movs	r0, #0
}
 8003e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003e62:	2003      	movs	r0, #3
}
 8003e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003e66:	2001      	movs	r0, #1
}
 8003e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e70:	e7e4      	b.n	8003e3c <RCCEx_PLL3_Config+0xb4>
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	ffff0007 	.word	0xffff0007

08003e7c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e80:	6803      	ldr	r3, [r0, #0]
{
 8003e82:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e84:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8003e88:	d022      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e8a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003e8c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003e90:	f000 8498 	beq.w	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8003e94:	d811      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	f000 8506 	beq.w	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003e9c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003ea0:	f040 84ff 	bne.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	3004      	adds	r0, #4
 8003ea8:	f7ff fef4 	bl	8003c94 <RCCEx_PLL2_Config>
 8003eac:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003eae:	2e00      	cmp	r6, #0
 8003eb0:	f040 8490 	bne.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003eb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003eba:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003ebe:	f040 84f0 	bne.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ec2:	48a8      	ldr	r0, [pc, #672]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003ec8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ed0:	05dd      	lsls	r5, r3, #23
 8003ed2:	d50a      	bpl.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003ed6:	2a04      	cmp	r2, #4
 8003ed8:	d806      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003eda:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003ede:	04ad      	.short	0x04ad
 8003ee0:	0493048c 	.word	0x0493048c
 8003ee4:	02fc02fc 	.word	0x02fc02fc
 8003ee8:	2601      	movs	r6, #1
 8003eea:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003eec:	0598      	lsls	r0, r3, #22
 8003eee:	d51b      	bpl.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ef0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003ef2:	2a80      	cmp	r2, #128	; 0x80
 8003ef4:	f000 8497 	beq.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8003ef8:	f200 80ec 	bhi.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	f000 83a6 	beq.w	800464e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f02:	2a40      	cmp	r2, #64	; 0x40
 8003f04:	f040 80ed 	bne.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f08:	2100      	movs	r1, #0
 8003f0a:	1d20      	adds	r0, r4, #4
 8003f0c:	f7ff fec2 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f10:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f12:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	f040 8380 	bne.w	800461a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f1a:	4992      	ldr	r1, [pc, #584]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f1e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003f20:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8003f24:	4302      	orrs	r2, r0
 8003f26:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f28:	0559      	lsls	r1, r3, #21
 8003f2a:	d51f      	bpl.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f2c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8003f30:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003f34:	f000 8456 	beq.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003f38:	f200 80d6 	bhi.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f3c:	2a00      	cmp	r2, #0
 8003f3e:	f000 838c 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8003f42:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003f46:	f040 80d7 	bne.w	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	1d20      	adds	r0, r4, #4
 8003f4e:	f7ff fea1 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f52:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f54:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	f040 8363 	bne.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f5c:	4981      	ldr	r1, [pc, #516]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f5e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8003f62:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003f64:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8003f68:	4302      	orrs	r2, r0
 8003f6a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f6c:	051a      	lsls	r2, r3, #20
 8003f6e:	d51f      	bpl.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f70:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8003f74:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8003f78:	f000 8465 	beq.w	8004846 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8003f7c:	f200 80bf 	bhi.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003f80:	2a00      	cmp	r2, #0
 8003f82:	f000 8370 	beq.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 8003f86:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003f8a:	f040 80c0 	bne.w	800410e <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f8e:	2100      	movs	r1, #0
 8003f90:	1d20      	adds	r0, r4, #4
 8003f92:	f7ff fe7f 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f96:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f98:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	f040 8345 	bne.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fa0:	4970      	ldr	r1, [pc, #448]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fa2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8003fa6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8003fa8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003fac:	4302      	orrs	r2, r0
 8003fae:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fb0:	019f      	lsls	r7, r3, #6
 8003fb2:	d518      	bpl.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 8003fb4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003fb6:	2a20      	cmp	r2, #32
 8003fb8:	f000 83cd 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8003fbc:	f200 80aa 	bhi.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003fc0:	b13a      	cbz	r2, 8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8003fc2:	2a10      	cmp	r2, #16
 8003fc4:	f040 80a9 	bne.w	800411a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc8:	4966      	ldr	r1, [pc, #408]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fca:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8003fcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fd0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	f040 835f 	bne.w	8004696 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fd8:	4962      	ldr	r1, [pc, #392]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fda:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003fdc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003fde:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003fe2:	4302      	orrs	r2, r0
 8003fe4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fe6:	04d8      	lsls	r0, r3, #19
 8003fe8:	d51d      	bpl.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003fec:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003ff0:	f000 8410 	beq.w	8004814 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8003ff4:	f200 8094 	bhi.w	8004120 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	f000 833a 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003ffe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004002:	f040 8095 	bne.w	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004006:	2100      	movs	r1, #0
 8004008:	1d20      	adds	r0, r4, #4
 800400a:	f7ff fe43 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800400e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004010:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004012:	2d00      	cmp	r5, #0
 8004014:	f040 8303 	bne.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004018:	4952      	ldr	r1, [pc, #328]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800401a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800401c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800401e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004022:	4302      	orrs	r2, r0
 8004024:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004026:	0499      	lsls	r1, r3, #18
 8004028:	d51a      	bpl.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 800402a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800402c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8004030:	f000 8375 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004034:	d87f      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004036:	b14a      	cbz	r2, 800404c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004038:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800403c:	f040 8083 	bne.w	8004146 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004040:	2101      	movs	r1, #1
 8004042:	1d20      	adds	r0, r4, #4
 8004044:	f7ff fe26 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004048:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800404a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800404c:	2d00      	cmp	r5, #0
 800404e:	f040 8324 	bne.w	800469a <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004052:	4944      	ldr	r1, [pc, #272]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004054:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004056:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004058:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800405c:	4302      	orrs	r2, r0
 800405e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004060:	045a      	lsls	r2, r3, #17
 8004062:	d51b      	bpl.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004064:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8004068:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800406c:	f000 8361 	beq.w	8004732 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8004070:	d86c      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004072:	b142      	cbz	r2, 8004086 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004074:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8004078:	d170      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800407a:	2101      	movs	r1, #1
 800407c:	1d20      	adds	r0, r4, #4
 800407e:	f7ff fe09 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004082:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004084:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004086:	2d00      	cmp	r5, #0
 8004088:	f040 8309 	bne.w	800469e <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800408c:	4935      	ldr	r1, [pc, #212]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800408e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004092:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004094:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8004098:	4302      	orrs	r2, r0
 800409a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800409c:	041f      	lsls	r7, r3, #16
 800409e:	d50d      	bpl.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 80040a0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80040a2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80040a6:	f000 834e 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 80040aa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80040ae:	f000 821e 	beq.w	80044ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	f000 8221 	beq.w	80044fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80040b8:	2601      	movs	r6, #1
 80040ba:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040bc:	01d8      	lsls	r0, r3, #7
 80040be:	d562      	bpl.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    switch(PeriphClkInit->FmcClockSelection)
 80040c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80040c2:	2a03      	cmp	r2, #3
 80040c4:	f200 841b 	bhi.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040c8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80040cc:	004e0053 	.word	0x004e0053
 80040d0:	00530358 	.word	0x00530358
    switch(PeriphClkInit->Sai23ClockSelection)
 80040d4:	2ac0      	cmp	r2, #192	; 0xc0
 80040d6:	f43f af1d 	beq.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040da:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80040de:	f43f af19 	beq.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80040e2:	2601      	movs	r6, #1
 80040e4:	4635      	mov	r5, r6
 80040e6:	e71f      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 80040e8:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80040ec:	f43f af33 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80040f0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80040f4:	f43f af2f 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80040f8:	2601      	movs	r6, #1
 80040fa:	4635      	mov	r5, r6
 80040fc:	e736      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80040fe:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8004102:	f43f af4a 	beq.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004106:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800410a:	f43f af46 	beq.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800410e:	2601      	movs	r6, #1
 8004110:	4635      	mov	r5, r6
 8004112:	e74d      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 8004114:	2a30      	cmp	r2, #48	; 0x30
 8004116:	f43f af5c 	beq.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 800411a:	2601      	movs	r6, #1
 800411c:	4635      	mov	r5, r6
 800411e:	e762      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004120:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004124:	f43f af75 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004128:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800412c:	f43f af71 	beq.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004130:	2601      	movs	r6, #1
 8004132:	4635      	mov	r5, r6
 8004134:	e777      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004136:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800413a:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800413e:	d085      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004140:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8004144:	d082      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004146:	2601      	movs	r6, #1
 8004148:	4635      	mov	r5, r6
 800414a:	e789      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 800414c:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8004150:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004154:	d097      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004156:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800415a:	d094      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800415c:	2601      	movs	r6, #1
 800415e:	4635      	mov	r5, r6
 8004160:	e79c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004162:	bf00      	nop
 8004164:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4938      	ldr	r1, [pc, #224]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800416a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800416c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004170:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004172:	2d00      	cmp	r5, #0
 8004174:	f040 8285 	bne.w	8004682 <HAL_RCCEx_PeriphCLKConfig+0x806>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004178:	4934      	ldr	r1, [pc, #208]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800417a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800417c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800417e:	f022 0203 	bic.w	r2, r2, #3
 8004182:	4302      	orrs	r2, r0
 8004184:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004186:	0259      	lsls	r1, r3, #9
 8004188:	f100 81fb 	bmi.w	8004582 <HAL_RCCEx_PeriphCLKConfig+0x706>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800418c:	07df      	lsls	r7, r3, #31
 800418e:	d52f      	bpl.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->Usart16ClockSelection)
 8004190:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004192:	2a28      	cmp	r2, #40	; 0x28
 8004194:	d82a      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x370>
 8004196:	e8df f012 	tbh	[pc, r2, lsl #1]
 800419a:	01e9      	.short	0x01e9
 800419c:	00290029 	.word	0x00290029
 80041a0:	00290029 	.word	0x00290029
 80041a4:	00290029 	.word	0x00290029
 80041a8:	01e30029 	.word	0x01e30029
 80041ac:	00290029 	.word	0x00290029
 80041b0:	00290029 	.word	0x00290029
 80041b4:	00290029 	.word	0x00290029
 80041b8:	03750029 	.word	0x03750029
 80041bc:	00290029 	.word	0x00290029
 80041c0:	00290029 	.word	0x00290029
 80041c4:	00290029 	.word	0x00290029
 80041c8:	01e90029 	.word	0x01e90029
 80041cc:	00290029 	.word	0x00290029
 80041d0:	00290029 	.word	0x00290029
 80041d4:	00290029 	.word	0x00290029
 80041d8:	01e90029 	.word	0x01e90029
 80041dc:	00290029 	.word	0x00290029
 80041e0:	00290029 	.word	0x00290029
 80041e4:	00290029 	.word	0x00290029
 80041e8:	01e90029 	.word	0x01e90029
 80041ec:	2601      	movs	r6, #1
 80041ee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80041f0:	0798      	lsls	r0, r3, #30
 80041f2:	d51b      	bpl.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80041f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80041f6:	2a05      	cmp	r2, #5
 80041f8:	f200 837e 	bhi.w	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 80041fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004200:	0006000c 	.word	0x0006000c
 8004204:	000c032c 	.word	0x000c032c
 8004208:	000c000c 	.word	0x000c000c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800420c:	2101      	movs	r1, #1
 800420e:	1d20      	adds	r0, r4, #4
 8004210:	f7ff fd40 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004214:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004216:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004218:	2d00      	cmp	r5, #0
 800421a:	f040 8236 	bne.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800421e:	490b      	ldr	r1, [pc, #44]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004220:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004222:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004224:	f022 0207 	bic.w	r2, r2, #7
 8004228:	4302      	orrs	r2, r0
 800422a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422c:	0759      	lsls	r1, r3, #29
 800422e:	d520      	bpl.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004230:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004234:	2a05      	cmp	r2, #5
 8004236:	f200 8365 	bhi.w	8004904 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 800423a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800423e:	000f      	.short	0x000f
 8004240:	03180009 	.word	0x03180009
 8004244:	000f000f 	.word	0x000f000f
 8004248:	000f      	.short	0x000f
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004250:	2101      	movs	r1, #1
 8004252:	1d20      	adds	r0, r4, #4
 8004254:	f7ff fd1e 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004258:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800425a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800425c:	2d00      	cmp	r5, #0
 800425e:	f040 8216 	bne.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004262:	49ab      	ldr	r1, [pc, #684]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004264:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8004268:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800426a:	f022 0207 	bic.w	r2, r2, #7
 800426e:	4302      	orrs	r2, r0
 8004270:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004272:	069a      	lsls	r2, r3, #26
 8004274:	d51d      	bpl.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004276:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800427a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800427e:	f000 8273 	beq.w	8004768 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004282:	f200 80e6 	bhi.w	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8004286:	b14a      	cbz	r2, 800429c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004288:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800428c:	f040 80eb 	bne.w	8004466 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004290:	2100      	movs	r1, #0
 8004292:	1d20      	adds	r0, r4, #4
 8004294:	f7ff fcfe 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004298:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800429a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800429c:	2d00      	cmp	r5, #0
 800429e:	f040 81ee 	bne.w	800467e <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a2:	499b      	ldr	r1, [pc, #620]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80042a4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80042a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80042aa:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80042ae:	4302      	orrs	r2, r0
 80042b0:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042b2:	065f      	lsls	r7, r3, #25
 80042b4:	d51d      	bpl.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042b6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80042ba:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80042be:	f000 821a 	beq.w	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80042c2:	f200 80d3 	bhi.w	800446c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80042c6:	b14a      	cbz	r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0x460>
 80042c8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80042cc:	f040 80d8 	bne.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x604>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d0:	2100      	movs	r1, #0
 80042d2:	1d20      	adds	r0, r4, #4
 80042d4:	f7ff fcde 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042d8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042dc:	2d00      	cmp	r5, #0
 80042de:	f040 81e0 	bne.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042e2:	498b      	ldr	r1, [pc, #556]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80042e4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80042e8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80042ea:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80042ee:	4302      	orrs	r2, r0
 80042f0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042f2:	0618      	lsls	r0, r3, #24
 80042f4:	d51d      	bpl.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042f6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80042fa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80042fe:	f000 8204 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8004302:	f200 80c0 	bhi.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8004306:	b14a      	cbz	r2, 800431c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004308:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800430c:	f040 80c5 	bne.w	800449a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004310:	2100      	movs	r1, #0
 8004312:	1d20      	adds	r0, r4, #4
 8004314:	f7ff fcbe 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004318:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800431a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800431c:	2d00      	cmp	r5, #0
 800431e:	f040 81b2 	bne.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004322:	497b      	ldr	r1, [pc, #492]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004324:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004328:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800432a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800432e:	4302      	orrs	r2, r0
 8004330:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004332:	0719      	lsls	r1, r3, #28
 8004334:	d50b      	bpl.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004336:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800433a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800433e:	f000 8227 	beq.w	8004790 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004342:	4873      	ldr	r0, [pc, #460]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004344:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004346:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800434a:	430a      	orrs	r2, r1
 800434c:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434e:	06da      	lsls	r2, r3, #27
 8004350:	d50b      	bpl.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004352:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004356:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800435a:	f000 8226 	beq.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800435e:	486c      	ldr	r0, [pc, #432]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004360:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004362:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004366:	430a      	orrs	r2, r1
 8004368:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800436a:	031f      	lsls	r7, r3, #12
 800436c:	d50e      	bpl.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch(PeriphClkInit->AdcClockSelection)
 800436e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8004372:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004376:	f000 80e0 	beq.w	800453a <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800437a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800437e:	f000 80e3 	beq.w	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004382:	2900      	cmp	r1, #0
 8004384:	f000 81af 	beq.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8004388:	2601      	movs	r6, #1
 800438a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800438c:	0358      	lsls	r0, r3, #13
 800438e:	d50f      	bpl.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch(PeriphClkInit->UsbClockSelection)
 8004390:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8004394:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8004398:	f000 80bc 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800439c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80043a0:	f000 80bf 	beq.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80043a4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80043a8:	f000 8195 	beq.w	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 80043ac:	2601      	movs	r6, #1
 80043ae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043b0:	03d9      	lsls	r1, r3, #15
 80043b2:	d509      	bpl.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch(PeriphClkInit->SdmmcClockSelection)
 80043b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	f000 817b 	beq.w	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80043bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80043c0:	f000 8135 	beq.w	800462e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 80043c4:	2601      	movs	r6, #1
 80043c6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043c8:	009a      	lsls	r2, r3, #2
 80043ca:	f100 811b 	bmi.w	8004604 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ce:	039f      	lsls	r7, r3, #14
 80043d0:	d466      	bmi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x624>
    return HAL_OK;
 80043d2:	1e30      	subs	r0, r6, #0
 80043d4:	bf18      	it	ne
 80043d6:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043d8:	02de      	lsls	r6, r3, #11
 80043da:	d506      	bpl.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043dc:	494c      	ldr	r1, [pc, #304]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80043de:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80043e0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80043e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043e6:	432a      	orrs	r2, r5
 80043e8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043ea:	00dd      	lsls	r5, r3, #3
 80043ec:	d507      	bpl.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043ee:	4948      	ldr	r1, [pc, #288]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80043f0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80043f4:	690a      	ldr	r2, [r1, #16]
 80043f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043fa:	432a      	orrs	r2, r5
 80043fc:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043fe:	0299      	lsls	r1, r3, #10
 8004400:	d506      	bpl.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x594>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004402:	4943      	ldr	r1, [pc, #268]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004404:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8004406:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004408:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800440c:	432a      	orrs	r2, r5
 800440e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004410:	005a      	lsls	r2, r3, #1
 8004412:	d509      	bpl.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004414:	4a3e      	ldr	r2, [pc, #248]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004416:	6911      	ldr	r1, [r2, #16]
 8004418:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800441c:	6111      	str	r1, [r2, #16]
 800441e:	6911      	ldr	r1, [r2, #16]
 8004420:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8004424:	4329      	orrs	r1, r5
 8004426:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004428:	2b00      	cmp	r3, #0
 800442a:	da06      	bge.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800442c:	4938      	ldr	r1, [pc, #224]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800442e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004430:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004436:	432a      	orrs	r2, r5
 8004438:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	d507      	bpl.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800443e:	4a34      	ldr	r2, [pc, #208]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004440:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8004444:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004446:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800444a:	430b      	orrs	r3, r1
 800444c:	6553      	str	r3, [r2, #84]	; 0x54
}
 800444e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004452:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8004456:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800445a:	f43f af1f 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800445e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8004462:	f43f af1b 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004466:	2601      	movs	r6, #1
 8004468:	4635      	mov	r5, r6
 800446a:	e722      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800446c:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8004470:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004474:	f43f af32 	beq.w	80042dc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004478:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800447c:	f43f af2e 	beq.w	80042dc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004480:	2601      	movs	r6, #1
 8004482:	4635      	mov	r5, r6
 8004484:	e735      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004486:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800448a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800448e:	f43f af45 	beq.w	800431c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004492:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004496:	f43f af41 	beq.w	800431c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800449a:	2601      	movs	r6, #1
 800449c:	4635      	mov	r5, r6
 800449e:	e748      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch(PeriphClkInit->RngClockSelection)
 80044a0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80044a2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80044a6:	f000 810d 	beq.w	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80044aa:	d906      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x63e>
 80044ac:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 80044b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044b6:	2001      	movs	r0, #1
 80044b8:	e78e      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 80044ba:	2a00      	cmp	r2, #0
 80044bc:	d1fb      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if(ret == HAL_OK)
 80044be:	2d00      	cmp	r5, #0
 80044c0:	d1f9      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c2:	4d13      	ldr	r5, [pc, #76]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 80044c4:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c6:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 80044c8:	bf18      	it	ne
 80044ca:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044cc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80044d0:	430a      	orrs	r2, r1
 80044d2:	656a      	str	r2, [r5, #84]	; 0x54
 80044d4:	e780      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80044d6:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80044d8:	2d00      	cmp	r5, #0
 80044da:	f040 80a4 	bne.w	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044de:	490c      	ldr	r1, [pc, #48]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80044e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044e2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80044e4:	f022 0207 	bic.w	r2, r2, #7
 80044e8:	4302      	orrs	r2, r0
 80044ea:	650a      	str	r2, [r1, #80]	; 0x50
 80044ec:	e4fe      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044ee:	2101      	movs	r1, #1
 80044f0:	1d20      	adds	r0, r4, #4
 80044f2:	f7ff fbcf 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044f6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80044fa:	2d00      	cmp	r5, #0
 80044fc:	f040 80c9 	bne.w	8004692 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004500:	4903      	ldr	r1, [pc, #12]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8004502:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004504:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004506:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800450a:	4302      	orrs	r2, r0
 800450c:	650a      	str	r2, [r1, #80]	; 0x50
 800450e:	e5d5      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004510:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004514:	2101      	movs	r1, #1
 8004516:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800451a:	f7ff fc35 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800451e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004520:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004522:	2d00      	cmp	r5, #0
 8004524:	f040 80c3 	bne.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004528:	49ac      	ldr	r1, [pc, #688]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800452a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800452e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004530:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004534:	4302      	orrs	r2, r0
 8004536:	654a      	str	r2, [r1, #84]	; 0x54
 8004538:	e73a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800453a:	2102      	movs	r1, #2
 800453c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004540:	f7ff fc22 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004544:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004546:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004548:	2d00      	cmp	r5, #0
 800454a:	f040 80ae 	bne.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800454e:	49a3      	ldr	r1, [pc, #652]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004550:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8004554:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8004556:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800455a:	4302      	orrs	r2, r0
 800455c:	658a      	str	r2, [r1, #88]	; 0x58
 800455e:	e715      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004560:	2101      	movs	r1, #1
 8004562:	1d20      	adds	r0, r4, #4
 8004564:	f7ff fb96 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004568:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800456a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800456c:	2d00      	cmp	r5, #0
 800456e:	f040 809a 	bne.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004572:	499a      	ldr	r1, [pc, #616]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004574:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004576:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8004578:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800457c:	4302      	orrs	r2, r0
 800457e:	654a      	str	r2, [r1, #84]	; 0x54
 8004580:	e636      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004582:	4f97      	ldr	r7, [pc, #604]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800458c:	f7fd fb9a 	bl	8001cc4 <HAL_GetTick>
 8004590:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004592:	e006      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x726>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fd fb96 	bl	8001cc4 <HAL_GetTick>
 8004598:	eba0 0008 	sub.w	r0, r0, r8
 800459c:	2864      	cmp	r0, #100	; 0x64
 800459e:	f200 817c 	bhi.w	800489a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	05da      	lsls	r2, r3, #23
 80045a6:	d5f5      	bpl.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x718>
    if(ret == HAL_OK)
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	f040 81a2 	bne.w	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045ae:	4a8b      	ldr	r2, [pc, #556]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80045b0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80045b4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80045b6:	4059      	eors	r1, r3
 80045b8:	f411 7f40 	tst.w	r1, #768	; 0x300
 80045bc:	d00b      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045be:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c0:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045c2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80045ca:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045cc:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80045ce:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80045d2:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80045d4:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	f000 816c 	beq.w	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045de:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80045e2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80045e6:	f000 817a 	beq.w	80048de <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80045ea:	497c      	ldr	r1, [pc, #496]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80045ec:	690a      	ldr	r2, [r1, #16]
 80045ee:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80045f2:	610a      	str	r2, [r1, #16]
 80045f4:	4a79      	ldr	r2, [pc, #484]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80045f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fa:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80045fc:	430b      	orrs	r3, r1
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	e5c3      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x310>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004604:	2102      	movs	r1, #2
 8004606:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800460a:	f7ff fbbd 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800460e:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004610:	2800      	cmp	r0, #0
 8004612:	f43f aedc 	beq.w	80043ce <HAL_RCCEx_PeriphCLKConfig+0x552>
      status=HAL_ERROR;
 8004616:	2601      	movs	r6, #1
 8004618:	e6d9      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x552>
 800461a:	462e      	mov	r6, r5
 800461c:	e484      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800461e:	462e      	mov	r6, r5
 8004620:	e501      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004622:	462e      	mov	r6, r5
 8004624:	e4a2      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8004626:	462e      	mov	r6, r5
 8004628:	e460      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x70>
 800462a:	462e      	mov	r6, r5
 800462c:	e4c0      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800462e:	2102      	movs	r1, #2
 8004630:	1d20      	adds	r0, r4, #4
 8004632:	f7ff fb2f 	bl	8003c94 <RCCEx_PLL2_Config>
 8004636:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004638:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800463a:	2d00      	cmp	r5, #0
 800463c:	d140      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800463e:	4967      	ldr	r1, [pc, #412]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004640:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004642:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004644:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004648:	4302      	orrs	r2, r0
 800464a:	64ca      	str	r2, [r1, #76]	; 0x4c
 800464c:	e6bc      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464e:	4963      	ldr	r1, [pc, #396]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004650:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004656:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004658:	e45c      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465a:	4960      	ldr	r1, [pc, #384]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800465c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800465e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004662:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004664:	e477      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004666:	495d      	ldr	r1, [pc, #372]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004668:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800466a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800466e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004670:	e493      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004672:	495a      	ldr	r1, [pc, #360]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004674:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004676:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800467a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800467c:	e4c9      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800467e:	462e      	mov	r6, r5
 8004680:	e617      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004682:	462e      	mov	r6, r5
 8004684:	e57f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004686:	462e      	mov	r6, r5
 8004688:	e653      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800468a:	462e      	mov	r6, r5
 800468c:	e5ce      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800468e:	462e      	mov	r6, r5
 8004690:	e5ef      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004692:	462e      	mov	r6, r5
 8004694:	e512      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004696:	462e      	mov	r6, r5
 8004698:	e4a5      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800469a:	462e      	mov	r6, r5
 800469c:	e4e0      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800469e:	462e      	mov	r6, r5
 80046a0:	e4fc      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x220>
 80046a2:	462e      	mov	r6, r5
 80046a4:	e625      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80046a6:	462e      	mov	r6, r5
 80046a8:	e5a2      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80046aa:	462e      	mov	r6, r5
 80046ac:	e66e      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x510>
 80046ae:	462e      	mov	r6, r5
 80046b0:	e67e      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b2:	494a      	ldr	r1, [pc, #296]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80046b4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80046b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046ba:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80046bc:	2d00      	cmp	r5, #0
 80046be:	d0be      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 80046c0:	462e      	mov	r6, r5
 80046c2:	e681      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c4:	4845      	ldr	r0, [pc, #276]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80046c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80046c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80046cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	f47f aef1 	bne.w	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 80046d4:	e6f5      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d6:	4941      	ldr	r1, [pc, #260]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80046d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80046da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046de:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	d1e4      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x832>
 80046e4:	e720      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046e6:	1d20      	adds	r0, r4, #4
 80046e8:	f7ff fad4 	bl	8003c94 <RCCEx_PLL2_Config>
 80046ec:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ee:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	d1da      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80046f4:	e72b      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046f6:	2102      	movs	r1, #2
 80046f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80046fc:	f7ff fb44 	bl	8003d88 <RCCEx_PLL3_Config>
 8004700:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004702:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004704:	2d00      	cmp	r5, #0
 8004706:	d1cc      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x826>
 8004708:	e5eb      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800470a:	2102      	movs	r1, #2
 800470c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004710:	f7ff fb3a 	bl	8003d88 <RCCEx_PLL3_Config>
 8004714:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004716:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004718:	2d00      	cmp	r5, #0
 800471a:	d1b4      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800471c:	e601      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800471e:	2101      	movs	r1, #1
 8004720:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004724:	f7ff fb30 	bl	8003d88 <RCCEx_PLL3_Config>
 8004728:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800472a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800472c:	2d00      	cmp	r5, #0
 800472e:	d1b4      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004730:	e48f      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004732:	2101      	movs	r1, #1
 8004734:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004738:	f7ff fb26 	bl	8003d88 <RCCEx_PLL3_Config>
 800473c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800473e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004740:	2d00      	cmp	r5, #0
 8004742:	d1ac      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x822>
 8004744:	e4a2      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004746:	4925      	ldr	r1, [pc, #148]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004748:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800474a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800474e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8004750:	2d00      	cmp	r5, #0
 8004752:	d19e      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004754:	e6d4      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004756:	2102      	movs	r1, #2
 8004758:	1d20      	adds	r0, r4, #4
 800475a:	f7ff fa9b 	bl	8003c94 <RCCEx_PLL2_Config>
 800475e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004760:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004762:	2d00      	cmp	r5, #0
 8004764:	d197      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004766:	e437      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004768:	2102      	movs	r1, #2
 800476a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800476e:	f7ff fb0b 	bl	8003d88 <RCCEx_PLL3_Config>
 8004772:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004774:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004776:	2d00      	cmp	r5, #0
 8004778:	d181      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x802>
 800477a:	e592      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800477c:	2102      	movs	r1, #2
 800477e:	1d20      	adds	r0, r4, #4
 8004780:	f7ff fa88 	bl	8003c94 <RCCEx_PLL2_Config>
 8004784:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004786:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004788:	2d00      	cmp	r5, #0
 800478a:	f47f af7a 	bne.w	8004682 <HAL_RCCEx_PeriphCLKConfig+0x806>
 800478e:	e4f3      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004790:	2102      	movs	r1, #2
 8004792:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004796:	f7ff faf7 	bl	8003d88 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800479a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800479e:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f43f adce 	beq.w	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
          status = HAL_ERROR;
 80047a6:	2601      	movs	r6, #1
 80047a8:	e5cb      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047aa:	2102      	movs	r1, #2
 80047ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047b0:	f7ff faea 	bl	8003d88 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047b4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b8:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047ba:	2800      	cmp	r0, #0
 80047bc:	f43f adcf 	beq.w	800435e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        status = HAL_ERROR;
 80047c0:	2601      	movs	r6, #1
 80047c2:	e5cc      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047c4:	2102      	movs	r1, #2
 80047c6:	3024      	adds	r0, #36	; 0x24
 80047c8:	f7ff fade 	bl	8003d88 <RCCEx_PLL3_Config>
 80047cc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80047ce:	2e00      	cmp	r6, #0
 80047d0:	f43f ab70 	beq.w	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	f7ff bb7b 	b.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047e4:	2100      	movs	r1, #0
 80047e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047ea:	f7ff facd 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047ee:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047f0:	4605      	mov	r5, r0
      break;
 80047f2:	f7ff bbb0 	b.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047f6:	2100      	movs	r1, #0
 80047f8:	1d20      	adds	r0, r4, #4
 80047fa:	f7ff fa4b 	bl	8003c94 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047fe:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004800:	4605      	mov	r5, r0
      break;
 8004802:	e669      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004804:	2100      	movs	r1, #0
 8004806:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800480a:	f7ff fabd 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800480e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004810:	4605      	mov	r5, r0
      break;
 8004812:	e661      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004814:	2100      	movs	r1, #0
 8004816:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800481a:	f7ff fab5 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800481e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004820:	4605      	mov	r5, r0
      break;
 8004822:	f7ff bbf6 	b.w	8004012 <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004826:	2100      	movs	r1, #0
 8004828:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800482c:	f7ff faac 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004830:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004832:	4605      	mov	r5, r0
      break;
 8004834:	f7ff bb6e 	b.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004838:	4934      	ldr	r1, [pc, #208]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
      break;
 800483a:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800483e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004842:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8004844:	e648      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004846:	2100      	movs	r1, #0
 8004848:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800484c:	f7ff fa9c 	bl	8003d88 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004850:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004852:	4605      	mov	r5, r0
      break;
 8004854:	f7ff bba1 	b.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004858:	2101      	movs	r1, #1
 800485a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800485e:	f7ff fa93 	bl	8003d88 <RCCEx_PLL3_Config>
 8004862:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004864:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004866:	2d00      	cmp	r5, #0
 8004868:	f47f af0f 	bne.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 800486c:	e4d7      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800486e:	2101      	movs	r1, #1
 8004870:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004874:	f7ff fa88 	bl	8003d88 <RCCEx_PLL3_Config>
 8004878:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800487a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800487c:	2d00      	cmp	r5, #0
 800487e:	f47f af06 	bne.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004882:	e4ee      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004884:	2101      	movs	r1, #1
 8004886:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800488a:	f7ff fa7d 	bl	8003d88 <RCCEx_PLL3_Config>
 800488e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004890:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004892:	2d00      	cmp	r5, #0
 8004894:	f47f af07 	bne.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8004898:	e66b      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        status = ret;
 800489a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	4635      	mov	r5, r6
 80048a0:	e474      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x310>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80048a2:	2601      	movs	r6, #1
 80048a4:	f7ff bb14 	b.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a8:	4818      	ldr	r0, [pc, #96]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80048aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80048ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80048b0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80048b2:	f7ff bb06 	b.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80048b6:	f7fd fa05 	bl	8001cc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ba:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800490c <HAL_RCCEx_PeriphCLKConfig+0xa90>
        tickstart = HAL_GetTick();
 80048be:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c4:	e004      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fd f9fd 	bl	8001cc4 <HAL_GetTick>
 80048ca:	1bc0      	subs	r0, r0, r7
 80048cc:	4548      	cmp	r0, r9
 80048ce:	d8e4      	bhi.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80048d4:	079b      	lsls	r3, r3, #30
 80048d6:	d5f6      	bpl.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80048dc:	e67f      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x762>
 80048de:	480b      	ldr	r0, [pc, #44]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 80048e0:	4a0b      	ldr	r2, [pc, #44]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80048e2:	6901      	ldr	r1, [r0, #16]
 80048e4:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80048e8:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80048ec:	430a      	orrs	r2, r1
 80048ee:	6102      	str	r2, [r0, #16]
 80048f0:	e680      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	462e      	mov	r6, r5
 80048f6:	e449      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x310>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80048f8:	2601      	movs	r6, #1
 80048fa:	4635      	mov	r5, r6
 80048fc:	e496      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 80048fe:	2601      	movs	r6, #1
 8004900:	4635      	mov	r5, r6
 8004902:	e440      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004904:	2601      	movs	r6, #1
 8004906:	4635      	mov	r5, r6
 8004908:	e4b3      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	00ffffcf 	.word	0x00ffffcf

08004914 <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004914:	6801      	ldr	r1, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004916:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004918:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 800491a:	f822 3b02 	strh.w	r3, [r2], #2
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
  hspi->RxXferCount--;
 800491e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004922:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8004924:	3b01      	subs	r3, #1
 8004926:	b29b      	uxth	r3, r3
 8004928:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800492c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004930:	b29b      	uxth	r3, r3
 8004932:	b91b      	cbnz	r3, 800493c <SPI_RxISR_16BIT+0x28>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8004934:	690b      	ldr	r3, [r1, #16]
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8004940:	6801      	ldr	r1, [r0, #0]
 8004942:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8004944:	b410      	push	{r4}
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8004946:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hspi->pRxBuffPtr += sizeof(uint32_t);
  hspi->RxXferCount--;
 8004948:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800494c:	f842 4b04 	str.w	r4, [r2], #4
  hspi->RxXferCount--;
 8004950:	3b01      	subs	r3, #1
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8004952:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8004954:	b29b      	uxth	r3, r3
 8004956:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800495a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800495e:	b29b      	uxth	r3, r3
 8004960:	b91b      	cbnz	r3, 800496a <SPI_RxISR_32BIT+0x2a>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800496a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800496e:	4770      	bx	lr

08004970 <SPI_TxISR_16BIT>:
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004970:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004972:	6801      	ldr	r1, [r0, #0]
  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004974:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004978:	840b      	strh	r3, [r1, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
  hspi->TxXferCount--;
 800497a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800497e:	65c2      	str	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 8004980:	3b01      	subs	r3, #1
 8004982:	b29b      	uxth	r3, r3
 8004984:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8004988:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800498c:	b29b      	uxth	r3, r3
 800498e:	b91b      	cbnz	r3, 8004998 <SPI_TxISR_16BIT+0x28>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8004990:	690b      	ldr	r3, [r1, #16]
 8004992:	f023 0302 	bic.w	r3, r3, #2
 8004996:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop

0800499c <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800499c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800499e:	6801      	ldr	r1, [r0, #0]
 80049a0:	f852 3b04 	ldr.w	r3, [r2], #4
 80049a4:	620b      	str	r3, [r1, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
  hspi->TxXferCount--;
 80049a6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80049aa:	65c2      	str	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80049b4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	b91b      	cbnz	r3, 80049c4 <SPI_TxISR_32BIT+0x28>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80049bc:	690b      	ldr	r3, [r1, #16]
 80049be:	f023 0302 	bic.w	r3, r3, #2
 80049c2:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop

080049c8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80049c8:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80049ca:	492c      	ldr	r1, [pc, #176]	; (8004a7c <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 80049cc:	695a      	ldr	r2, [r3, #20]
{
 80049ce:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80049d0:	699c      	ldr	r4, [r3, #24]
 80049d2:	f044 0408 	orr.w	r4, r4, #8
 80049d6:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80049d8:	699c      	ldr	r4, [r3, #24]
 80049da:	f044 0410 	orr.w	r4, r4, #16
 80049de:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 80049e0:	681c      	ldr	r4, [r3, #0]
 80049e2:	f024 0401 	bic.w	r4, r4, #1
 80049e6:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80049e8:	691c      	ldr	r4, [r3, #16]
 80049ea:	4021      	ands	r1, r4
 80049ec:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80049f4:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049f6:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 80049fa:	2904      	cmp	r1, #4
 80049fc:	d001      	beq.n	8004a02 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80049fe:	0691      	lsls	r1, r2, #26
 8004a00:	d430      	bmi.n	8004a64 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a02:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8004a06:	2903      	cmp	r1, #3
 8004a08:	d001      	beq.n	8004a0e <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004a0a:	0654      	lsls	r4, r2, #25
 8004a0c:	d41f      	bmi.n	8004a4e <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004a0e:	0591      	lsls	r1, r2, #22
 8004a10:	d509      	bpl.n	8004a26 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a12:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004a16:	f041 0101 	orr.w	r1, r1, #1
 8004a1a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a1e:	6999      	ldr	r1, [r3, #24]
 8004a20:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004a24:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004a26:	05d2      	lsls	r2, r2, #23
 8004a28:	d509      	bpl.n	8004a3e <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a2a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004a2e:	f042 0208 	orr.w	r2, r2, #8
 8004a32:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004a3e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8004a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8004a44:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004a48:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8004a4c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a4e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004a52:	f041 0104 	orr.w	r1, r1, #4
 8004a56:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a5a:	6999      	ldr	r1, [r3, #24]
 8004a5c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004a60:	6199      	str	r1, [r3, #24]
 8004a62:	e7d4      	b.n	8004a0e <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004a64:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8004a68:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004a6c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	f041 0120 	orr.w	r1, r1, #32
 8004a76:	6199      	str	r1, [r3, #24]
 8004a78:	e7c3      	b.n	8004a02 <SPI_CloseTransfer+0x3a>
 8004a7a:	bf00      	nop
 8004a7c:	fffffc90 	.word	0xfffffc90

08004a80 <SPI_RxISR_8BIT>:
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8004a80:	6802      	ldr	r2, [r0, #0]
 8004a82:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004a84:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8004a88:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8004a8a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a8e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8004a90:	3b01      	subs	r3, #1
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a92:	3201      	adds	r2, #1
  hspi->RxXferCount--;
 8004a94:	b29b      	uxth	r3, r3
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a96:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8004a98:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  if (hspi->RxXferCount == 0UL)
 8004a9c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	b923      	cbnz	r3, 8004aae <SPI_RxISR_8BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8004aa4:	6802      	ldr	r2, [r0, #0]
 8004aa6:	6913      	ldr	r3, [r2, #16]
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6113      	str	r3, [r2, #16]
}
 8004aae:	4770      	bx	lr

08004ab0 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8004ab0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004ab2:	6803      	ldr	r3, [r0, #0]
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->TxXferCount--;
 8004aba:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8004abe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 8004ac0:	3b01      	subs	r3, #1
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac2:	3201      	adds	r2, #1
  hspi->TxXferCount--;
 8004ac4:	b29b      	uxth	r3, r3
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac6:	65c2      	str	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 8004ac8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->TxXferCount == 0UL)
 8004acc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	b923      	cbnz	r3, 8004ade <SPI_TxISR_8BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8004ad4:	6802      	ldr	r2, [r0, #0]
 8004ad6:	6913      	ldr	r3, [r2, #16]
 8004ad8:	f023 0302 	bic.w	r3, r3, #2
 8004adc:	6113      	str	r3, [r2, #16]
}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	f000 80b3 	beq.w	8004c4c <HAL_SPI_Init+0x16c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ae6:	4a5c      	ldr	r2, [pc, #368]	; (8004c58 <HAL_SPI_Init+0x178>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae8:	2100      	movs	r1, #0
{
 8004aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af0:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d016      	beq.n	8004b24 <HAL_SPI_Init+0x44>
 8004af6:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d012      	beq.n	8004b24 <HAL_SPI_Init+0x44>
 8004afe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b02:	68c1      	ldr	r1, [r0, #12]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	f000 8099 	beq.w	8004c3c <HAL_SPI_Init+0x15c>
 8004b0a:	290f      	cmp	r1, #15
 8004b0c:	d808      	bhi.n	8004b20 <HAL_SPI_Init+0x40>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b0e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004b10:	f101 0208 	add.w	r2, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b14:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004b16:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 8004b18:	fb05 2202 	mla	r2, r5, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b1c:	2a08      	cmp	r2, #8
 8004b1e:	d915      	bls.n	8004b4c <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8004b20:	2001      	movs	r0, #1
}
 8004b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  data_size = (data_size + 7UL) / 8UL;
 8004b24:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004b28:	f101 0208 	add.w	r2, r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b2c:	4e4a      	ldr	r6, [pc, #296]	; (8004c58 <HAL_SPI_Init+0x178>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b2e:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004b30:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8004b32:	fb05 2202 	mla	r2, r5, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b36:	4d49      	ldr	r5, [pc, #292]	; (8004c5c <HAL_SPI_Init+0x17c>)
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	bf18      	it	ne
 8004b3c:	42b3      	cmpne	r3, r6
 8004b3e:	d003      	beq.n	8004b48 <HAL_SPI_Init+0x68>
 8004b40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b44:	42ab      	cmp	r3, r5
 8004b46:	d101      	bne.n	8004b4c <HAL_SPI_Init+0x6c>
 8004b48:	2a10      	cmp	r2, #16
 8004b4a:	d8e9      	bhi.n	8004b20 <HAL_SPI_Init+0x40>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8004b50:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	d067      	beq.n	8004c28 <HAL_SPI_Init+0x148>
 8004b58:	2700      	movs	r7, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004b5a:	2202      	movs	r2, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b5c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8004b60:	6865      	ldr	r5, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004b62:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b66:	f1be 6f80 	cmp.w	lr, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8004b6a:	681a      	ldr	r2, [r3, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004b6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	f402 1cf8 	and.w	ip, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004b7a:	d048      	beq.n	8004c0e <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004b7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004b7e:	ea4e 0e02 	orr.w	lr, lr, r2
 8004b82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b84:	ea4e 0e02 	orr.w	lr, lr, r2
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	ea4e 0e02 	orr.w	lr, lr, r2
 8004b8e:	6962      	ldr	r2, [r4, #20]
 8004b90:	ea4e 0e02 	orr.w	lr, lr, r2
 8004b94:	6a22      	ldr	r2, [r4, #32]
 8004b96:	ea4e 0e02 	orr.w	lr, lr, r2
 8004b9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004b9c:	ea4e 0e02 	orr.w	lr, lr, r2
 8004ba0:	68a2      	ldr	r2, [r4, #8]
 8004ba2:	ea4e 0e02 	orr.w	lr, lr, r2
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004ba6:	69e2      	ldr	r2, [r4, #28]
 8004ba8:	4302      	orrs	r2, r0
 8004baa:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004bac:	6da1      	ldr	r1, [r4, #88]	; 0x58
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004bae:	433a      	orrs	r2, r7
 8004bb0:	ea42 020c 	orr.w	r2, r2, ip
 8004bb4:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004bb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004bb8:	ea4e 0202 	orr.w	r2, lr, r2
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	432a      	orrs	r2, r5
 8004bc0:	4332      	orrs	r2, r6
 8004bc2:	60da      	str	r2, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004bc4:	b9b5      	cbnz	r5, 8004bf4 <HAL_SPI_Init+0x114>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bdc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004be8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004bee:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004bfc:	026a      	lsls	r2, r5, #9
 8004bfe:	d5f2      	bpl.n	8004be6 <HAL_SPI_Init+0x106>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004c04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e7eb      	b.n	8004be6 <HAL_SPI_Init+0x106>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c0e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8004c12:	d01d      	beq.n	8004c50 <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	d1b1      	bne.n	8004b7c <HAL_SPI_Init+0x9c>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c18:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 8004c1c:	d1ae      	bne.n	8004b7c <HAL_SPI_Init+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e7a9      	b.n	8004b7c <HAL_SPI_Init+0x9c>
    HAL_SPI_MspInit(hspi);
 8004c28:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004c2a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8004c2e:	f7fc fa6d 	bl	800110c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004c32:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c34:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004c36:	68e1      	ldr	r1, [r4, #12]
 8004c38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004c3a:	e78e      	b.n	8004b5a <HAL_SPI_Init+0x7a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004c3c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004c3e:	f101 0208 	add.w	r2, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004c42:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8004c44:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8004c46:	fb05 2202 	mla	r2, r5, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004c4a:	e77d      	b.n	8004b48 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8004c4c:	2001      	movs	r0, #1
}
 8004c4e:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	d0e4      	beq.n	8004c1e <HAL_SPI_Init+0x13e>
 8004c54:	e792      	b.n	8004b7c <HAL_SPI_Init+0x9c>
 8004c56:	bf00      	nop
 8004c58:	40013000 	.word	0x40013000
 8004c5c:	40003800 	.word	0x40003800

08004c60 <HAL_SPI_TransmitReceive_IT>:
{
 8004c60:	4684      	mov	ip, r0
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004c62:	6800      	ldr	r0, [r0, #0]
{
 8004c64:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8004c66:	f89c 4080 	ldrb.w	r4, [ip, #128]	; 0x80
 8004c6a:	2c01      	cmp	r4, #1
 8004c6c:	f000 80d3 	beq.w	8004e16 <HAL_SPI_TransmitReceive_IT+0x1b6>
  tmp_state  = hspi->State;
 8004c70:	f89c 4081 	ldrb.w	r4, [ip, #129]	; 0x81
  __HAL_LOCK(hspi);
 8004c74:	2501      	movs	r5, #1
 8004c76:	4686      	mov	lr, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c78:	2c01      	cmp	r4, #1
  __HAL_LOCK(hspi);
 8004c7a:	f88c 5080 	strb.w	r5, [ip, #128]	; 0x80
  tmp_state  = hspi->State;
 8004c7e:	b2e6      	uxtb	r6, r4
  tmp_mode   = hspi->Init.Mode;
 8004c80:	f8dc 5004 	ldr.w	r5, [ip, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c84:	d008      	beq.n	8004c98 <HAL_SPI_TransmitReceive_IT+0x38>
 8004c86:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8004c8a:	d178      	bne.n	8004d7e <HAL_SPI_TransmitReceive_IT+0x11e>
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004c8c:	f8dc 4008 	ldr.w	r4, [ip, #8]
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004c90:	2c00      	cmp	r4, #0
 8004c92:	d174      	bne.n	8004d7e <HAL_SPI_TransmitReceive_IT+0x11e>
 8004c94:	2e04      	cmp	r6, #4
 8004c96:	d172      	bne.n	8004d7e <HAL_SPI_TransmitReceive_IT+0x11e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf18      	it	ne
 8004c9c:	2a00      	cmpne	r2, #0
 8004c9e:	d073      	beq.n	8004d88 <HAL_SPI_TransmitReceive_IT+0x128>
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	d071      	beq.n	8004d88 <HAL_SPI_TransmitReceive_IT+0x128>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ca4:	f89c 4081 	ldrb.w	r4, [ip, #129]	; 0x81
 8004ca8:	2c04      	cmp	r4, #4
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_TransmitReceive_IT+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cac:	2405      	movs	r4, #5
 8004cae:	f88c 4081 	strb.w	r4, [ip, #129]	; 0x81
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004cb2:	f8dc 400c 	ldr.w	r4, [ip, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cb6:	f8cc 2064 	str.w	r2, [ip, #100]	; 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cba:	2200      	movs	r2, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004cbc:	2c0f      	cmp	r4, #15
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cbe:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc2:	f8cc 2084 	str.w	r2, [ip, #132]	; 0x84
  hspi->TxXferCount = Size;
 8004cc6:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->RxXferCount = Size;
 8004cca:	f8ac 306a 	strh.w	r3, [ip, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8004cce:	f8bc 2062 	ldrh.w	r2, [ip, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004cd2:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  tmp_TxXferCount   = hspi->TxXferCount;
 8004cd6:	b297      	uxth	r7, r2
  hspi->RxXferSize  = Size;
 8004cd8:	f8ac 3068 	strh.w	r3, [ip, #104]	; 0x68
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004cdc:	d859      	bhi.n	8004d92 <HAL_SPI_TransmitReceive_IT+0x132>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cde:	2c07      	cmp	r4, #7
 8004ce0:	f240 80af 	bls.w	8004e42 <HAL_SPI_TransmitReceive_IT+0x1e2>
    hspi->RxISR     = SPI_RxISR_16BIT;
 8004ce4:	4a5a      	ldr	r2, [pc, #360]	; (8004e50 <HAL_SPI_TransmitReceive_IT+0x1f0>)
 8004ce6:	f8cc 2070 	str.w	r2, [ip, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8004cea:	4a5a      	ldr	r2, [pc, #360]	; (8004e54 <HAL_SPI_TransmitReceive_IT+0x1f4>)
 8004cec:	f8cc 2074 	str.w	r2, [ip, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004cf0:	6846      	ldr	r6, [r0, #4]
 8004cf2:	4a59      	ldr	r2, [pc, #356]	; (8004e58 <HAL_SPI_TransmitReceive_IT+0x1f8>)
 8004cf4:	4032      	ands	r2, r6
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	6042      	str	r2, [r0, #4]
  __HAL_SPI_ENABLE(hspi);
 8004cfa:	6803      	ldr	r3, [r0, #0]
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6003      	str	r3, [r0, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004d02:	6943      	ldr	r3, [r0, #20]
 8004d04:	079e      	lsls	r6, r3, #30
 8004d06:	f140 808a 	bpl.w	8004e1e <HAL_SPI_TransmitReceive_IT+0x1be>
 8004d0a:	2f00      	cmp	r7, #0
 8004d0c:	f000 8087 	beq.w	8004e1e <HAL_SPI_TransmitReceive_IT+0x1be>
 8004d10:	2210      	movs	r2, #16
 8004d12:	e018      	b.n	8004d46 <HAL_SPI_TransmitReceive_IT+0xe6>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004d14:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d18:	6203      	str	r3, [r0, #32]
          hspi->TxXferCount--;
 8004d1a:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1e:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount--;
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8004d2a:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8004d2e:	b29b      	uxth	r3, r3
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004d30:	6941      	ldr	r1, [r0, #20]
 8004d32:	0789      	lsls	r1, r1, #30
 8004d34:	d571      	bpl.n	8004e1a <HAL_SPI_TransmitReceive_IT+0x1ba>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d06f      	beq.n	8004e1a <HAL_SPI_TransmitReceive_IT+0x1ba>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	d01f      	beq.n	8004d7e <HAL_SPI_TransmitReceive_IT+0x11e>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004d3e:	f8dc 400c 	ldr.w	r4, [ip, #12]
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004d42:	f8dc 105c 	ldr.w	r1, [ip, #92]	; 0x5c
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004d46:	2c0f      	cmp	r4, #15
 8004d48:	d8e4      	bhi.n	8004d14 <HAL_SPI_TransmitReceive_IT+0xb4>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d4a:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d4e:	2c07      	cmp	r4, #7
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d50:	b29b      	uxth	r3, r3
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d52:	d925      	bls.n	8004da0 <HAL_SPI_TransmitReceive_IT+0x140>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d945      	bls.n	8004de4 <HAL_SPI_TransmitReceive_IT+0x184>
 8004d58:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d041      	beq.n	8004de4 <HAL_SPI_TransmitReceive_IT+0x184>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8004d64:	6203      	str	r3, [r0, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d66:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6a:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d6e:	3b02      	subs	r3, #2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8004d76:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	e7d8      	b.n	8004d30 <HAL_SPI_TransmitReceive_IT+0xd0>
    __HAL_UNLOCK(hspi);
 8004d7e:	2300      	movs	r3, #0
    return errorcode;
 8004d80:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8004d82:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8004d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8004d88:	2300      	movs	r3, #0
    return errorcode;
 8004d8a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8004d8c:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8004d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->TxISR     = SPI_TxISR_32BIT;
 8004d92:	4a32      	ldr	r2, [pc, #200]	; (8004e5c <HAL_SPI_TransmitReceive_IT+0x1fc>)
 8004d94:	f8cc 2074 	str.w	r2, [ip, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8004d98:	4a31      	ldr	r2, [pc, #196]	; (8004e60 <HAL_SPI_TransmitReceive_IT+0x200>)
 8004d9a:	f8cc 2070 	str.w	r2, [ip, #112]	; 0x70
 8004d9e:	e7a7      	b.n	8004cf0 <HAL_SPI_TransmitReceive_IT+0x90>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d912      	bls.n	8004dca <HAL_SPI_TransmitReceive_IT+0x16a>
 8004da4:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d90e      	bls.n	8004dca <HAL_SPI_TransmitReceive_IT+0x16a>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004dac:	f851 3b04 	ldr.w	r3, [r1], #4
 8004db0:	6203      	str	r3, [r0, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 8004db2:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004db6:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8004dc2:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	e7b2      	b.n	8004d30 <HAL_SPI_TransmitReceive_IT+0xd0>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004dca:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d90c      	bls.n	8004dee <HAL_SPI_TransmitReceive_IT+0x18e>
 8004dd4:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8004dd8:	b14b      	cbz	r3, 8004dee <HAL_SPI_TransmitReceive_IT+0x18e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004dda:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004dde:	f8ae 3020 	strh.w	r3, [lr, #32]
 8004de2:	e7c0      	b.n	8004d66 <HAL_SPI_TransmitReceive_IT+0x106>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004de4:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004de8:	f8ae 3020 	strh.w	r3, [lr, #32]
 8004dec:	e795      	b.n	8004d1a <HAL_SPI_TransmitReceive_IT+0xba>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004dee:	780b      	ldrb	r3, [r1, #0]
 8004df0:	f880 3020 	strb.w	r3, [r0, #32]
          hspi->TxXferCount--;
 8004df4:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df8:	f8dc 105c 	ldr.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount--;
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	f8dc 0000 	ldr.w	r0, [ip]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e02:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8004e04:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e06:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount--;
 8004e0a:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8004e0e:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	e78c      	b.n	8004d30 <HAL_SPI_TransmitReceive_IT+0xd0>
  __HAL_LOCK(hspi);
 8004e16:	2002      	movs	r0, #2
}
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1a:	f8dc 5004 	ldr.w	r5, [ip, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8004e1e:	6902      	ldr	r2, [r0, #16]
 8004e20:	f240 736c 	movw	r3, #1900	; 0x76c
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e24:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8004e28:	ea43 0302 	orr.w	r3, r3, r2
 8004e2c:	6103      	str	r3, [r0, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e2e:	d103      	bne.n	8004e38 <HAL_SPI_TransmitReceive_IT+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004e30:	6803      	ldr	r3, [r0, #0]
 8004e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e36:	6003      	str	r3, [r0, #0]
  __HAL_UNLOCK(hspi);
 8004e38:	2300      	movs	r3, #0
  return errorcode;
 8004e3a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hspi);
 8004e3c:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8004e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->RxISR     = SPI_RxISR_8BIT;
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <HAL_SPI_TransmitReceive_IT+0x204>)
 8004e44:	f8cc 2070 	str.w	r2, [ip, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8004e48:	4a07      	ldr	r2, [pc, #28]	; (8004e68 <HAL_SPI_TransmitReceive_IT+0x208>)
 8004e4a:	f8cc 2074 	str.w	r2, [ip, #116]	; 0x74
 8004e4e:	e74f      	b.n	8004cf0 <HAL_SPI_TransmitReceive_IT+0x90>
 8004e50:	08004915 	.word	0x08004915
 8004e54:	08004971 	.word	0x08004971
 8004e58:	ffff0000 	.word	0xffff0000
 8004e5c:	0800499d 	.word	0x0800499d
 8004e60:	08004941 	.word	0x08004941
 8004e64:	08004a81 	.word	0x08004a81
 8004e68:	08004ab1 	.word	0x08004ab1

08004e6c <HAL_SPI_Receive_IT>:
{
 8004e6c:	b430      	push	{r4, r5}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e6e:	6885      	ldr	r5, [r0, #8]
{
 8004e70:	4684      	mov	ip, r0
 8004e72:	460c      	mov	r4, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004e74:	b91d      	cbnz	r5, 8004e7e <HAL_SPI_Receive_IT+0x12>
 8004e76:	6843      	ldr	r3, [r0, #4]
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7c:	d060      	beq.n	8004f40 <HAL_SPI_Receive_IT+0xd4>
  __HAL_LOCK(hspi);
 8004e7e:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d064      	beq.n	8004f50 <HAL_SPI_Receive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004e86:	f89c 3081 	ldrb.w	r3, [ip, #129]	; 0x81
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	b2d8      	uxtb	r0, r3
 8004e8e:	d14a      	bne.n	8004f26 <HAL_SPI_Receive_IT+0xba>
  if ((pData == NULL) || (Size == 0UL))
 8004e90:	2c00      	cmp	r4, #0
 8004e92:	d050      	beq.n	8004f36 <HAL_SPI_Receive_IT+0xca>
 8004e94:	fab2 f382 	clz	r3, r2
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d04b      	beq.n	8004f36 <HAL_SPI_Receive_IT+0xca>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004e9e:	f8dc 100c 	ldr.w	r1, [ip, #12]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ea2:	2004      	movs	r0, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ea4:	f8cc 4064 	str.w	r4, [ip, #100]	; 0x64
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ea8:	290f      	cmp	r1, #15
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eaa:	f88c 0081 	strb.w	r0, [ip, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8004eae:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb2:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pTxBuffPtr  = NULL;
 8004eb6:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->RxXferCount = Size;
 8004eba:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004ebe:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxISR       = NULL;
 8004ec2:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  hspi->TxXferCount = (uint16_t) 0UL;
 8004ec6:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004eca:	d832      	bhi.n	8004f32 <HAL_SPI_Receive_IT+0xc6>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_SPI_Receive_IT+0xec>)
 8004ece:	4823      	ldr	r0, [pc, #140]	; (8004f5c <HAL_SPI_Receive_IT+0xf0>)
 8004ed0:	2907      	cmp	r1, #7
 8004ed2:	bf88      	it	hi
 8004ed4:	4603      	movhi	r3, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed6:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
    hspi->RxISR = SPI_RxISR_32BIT;
 8004eda:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
    SPI_1LINE_RX(hspi);
 8004ede:	f8dc 3000 	ldr.w	r3, [ip]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee2:	d103      	bne.n	8004eec <HAL_SPI_Receive_IT+0x80>
    SPI_1LINE_RX(hspi);
 8004ee4:	6819      	ldr	r1, [r3, #0]
 8004ee6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004eea:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004eec:	6858      	ldr	r0, [r3, #4]
 8004eee:	491c      	ldr	r1, [pc, #112]	; (8004f60 <HAL_SPI_Receive_IT+0xf4>)
 8004ef0:	4001      	ands	r1, r0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8004ef2:	f240 7049 	movw	r0, #1865	; 0x749
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ef6:	4311      	orrs	r1, r2
 8004ef8:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	4310      	orrs	r0, r2
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f06:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004f0a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8004f0e:	6118      	str	r0, [r3, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f10:	d103      	bne.n	8004f1a <HAL_SPI_Receive_IT+0xae>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f18:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004f1a:	2300      	movs	r3, #0
  return errorcode;
 8004f1c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hspi);
 8004f1e:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8004f22:	bc30      	pop	{r4, r5}
 8004f24:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 8004f26:	2300      	movs	r3, #0
    return errorcode;
 8004f28:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8004f2a:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8004f2e:	bc30      	pop	{r4, r5}
 8004f30:	4770      	bx	lr
 8004f32:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <HAL_SPI_Receive_IT+0xf8>)
 8004f34:	e7cf      	b.n	8004ed6 <HAL_SPI_Receive_IT+0x6a>
    __HAL_UNLOCK(hspi);
 8004f36:	2300      	movs	r3, #0
 8004f38:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8004f3c:	bc30      	pop	{r4, r5}
 8004f3e:	4770      	bx	lr
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f40:	2404      	movs	r4, #4
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004f42:	4613      	mov	r3, r2
 8004f44:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f46:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
}
 8004f4a:	bc30      	pop	{r4, r5}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004f4c:	f7ff be88 	b.w	8004c60 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8004f50:	2002      	movs	r0, #2
}
 8004f52:	bc30      	pop	{r4, r5}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	08004a81 	.word	0x08004a81
 8004f5c:	08004915 	.word	0x08004915
 8004f60:	ffff0000 	.word	0xffff0000
 8004f64:	08004941 	.word	0x08004941

08004f68 <HAL_SPI_TxCpltCallback>:
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HAL_SPI_TxRxCpltCallback>:
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <HAL_SPI_ErrorCallback>:
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8004f74:	6803      	ldr	r3, [r0, #0]
 8004f76:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8004f78:	695a      	ldr	r2, [r3, #20]
{
 8004f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trigger  = itsource & itflag;
 8004f7e:	ea01 0502 	and.w	r5, r1, r2
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004f82:	689f      	ldr	r7, [r3, #8]
{
 8004f84:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 8004f86:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004f8a:	f005 0c64 	and.w	ip, r5, #100	; 0x64
 8004f8e:	f1bc 0f04 	cmp.w	ip, #4
 8004f92:	d050      	beq.n	8005036 <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004f94:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8004f98:	2801      	cmp	r0, #1
 8004f9a:	d055      	beq.n	8005048 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004f9c:	f005 0026 	and.w	r0, r5, #38	; 0x26
 8004fa0:	2802      	cmp	r0, #2
 8004fa2:	f000 80cc 	beq.w	800513e <HAL_SPI_IRQHandler+0x1ca>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8004fa6:	0728      	lsls	r0, r5, #28
 8004fa8:	d55f      	bpl.n	800506a <HAL_SPI_IRQHandler+0xf6>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004faa:	699a      	ldr	r2, [r3, #24]
 8004fac:	b2f6      	uxtb	r6, r6
 8004fae:	f042 0208 	orr.w	r2, r2, #8
 8004fb2:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	f042 0210 	orr.w	r2, r2, #16
 8004fba:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc2:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	f022 0208 	bic.w	r2, r2, #8
 8004fca:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8004fd2:	d021      	beq.n	8005018 <HAL_SPI_IRQHandler+0xa4>
    SPI_CloseTransfer(hspi);
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff fcf7 	bl	80049c8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 80b3 	bne.w	8005150 <HAL_SPI_IRQHandler+0x1dc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004fea:	2e05      	cmp	r6, #5
 8004fec:	f000 80b9 	beq.w	8005162 <HAL_SPI_IRQHandler+0x1ee>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8004ff0:	2e04      	cmp	r6, #4
 8004ff2:	f000 80b9 	beq.w	8005168 <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8004ff6:	2e03      	cmp	r6, #3
 8004ff8:	d12d      	bne.n	8005056 <HAL_SPI_IRQHandler+0xe2>
      HAL_SPI_TxCpltCallback(hspi);
 8004ffa:	f7ff ffb5 	bl	8004f68 <HAL_SPI_TxCpltCallback>
 8004ffe:	e02a      	b.n	8005056 <HAL_SPI_IRQHandler+0xe2>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005000:	6822      	ldr	r2, [r4, #0]
 8005002:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005006:	f841 2b04 	str.w	r2, [r1], #4
        hspi->RxXferCount--;
 800500a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800500e:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8005010:	3a01      	subs	r2, #1
 8005012:	b292      	uxth	r2, r2
 8005014:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005018:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800501c:	b292      	uxth	r2, r2
 800501e:	2a00      	cmp	r2, #0
 8005020:	d0d8      	beq.n	8004fd4 <HAL_SPI_IRQHandler+0x60>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005022:	68e2      	ldr	r2, [r4, #12]
 8005024:	2a0f      	cmp	r2, #15
 8005026:	d8eb      	bhi.n	8005000 <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005028:	2a07      	cmp	r2, #7
 800502a:	d916      	bls.n	800505a <HAL_SPI_IRQHandler+0xe6>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800502c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800502e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005030:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005034:	e7e9      	b.n	800500a <HAL_SPI_IRQHandler+0x96>
    hspi->TxISR(hspi);
 8005036:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005038:	4798      	blx	r3
    hspi->RxISR(hspi);
 800503a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800503c:	4620      	mov	r0, r4
 800503e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005040:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8005044:	2b01      	cmp	r3, #1
 8005046:	d102      	bne.n	800504e <HAL_SPI_IRQHandler+0xda>
    hspi->RxISR(hspi);
 8005048:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800504a:	4620      	mov	r0, r4
 800504c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800504e:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8005052:	2d02      	cmp	r5, #2
 8005054:	d073      	beq.n	800513e <HAL_SPI_IRQHandler+0x1ca>
}
 8005056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800505a:	6821      	ldr	r1, [r4, #0]
 800505c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800505e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8005062:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005064:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005066:	3101      	adds	r1, #1
 8005068:	e7cf      	b.n	800500a <HAL_SPI_IRQHandler+0x96>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800506a:	0510      	lsls	r0, r2, #20
 800506c:	d501      	bpl.n	8005072 <HAL_SPI_IRQHandler+0xfe>
 800506e:	070a      	lsls	r2, r1, #28
 8005070:	d472      	bmi.n	8005158 <HAL_SPI_IRQHandler+0x1e4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005072:	f415 7f58 	tst.w	r5, #864	; 0x360
 8005076:	d0ee      	beq.n	8005056 <HAL_SPI_IRQHandler+0xe2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005078:	066e      	lsls	r6, r5, #25
 800507a:	d509      	bpl.n	8005090 <HAL_SPI_IRQHandler+0x11c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800507c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005080:	f042 0204 	orr.w	r2, r2, #4
 8005084:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800508e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005090:	05a8      	lsls	r0, r5, #22
 8005092:	d509      	bpl.n	80050a8 <HAL_SPI_IRQHandler+0x134>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005094:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050a0:	699a      	ldr	r2, [r3, #24]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a6:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80050a8:	05e9      	lsls	r1, r5, #23
 80050aa:	d509      	bpl.n	80050c0 <HAL_SPI_IRQHandler+0x14c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80050ac:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80050b0:	f042 0208 	orr.w	r2, r2, #8
 80050b4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050be:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80050c0:	06aa      	lsls	r2, r5, #26
 80050c2:	d509      	bpl.n	80050d8 <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80050c4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80050c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050cc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	f042 0220 	orr.w	r2, r2, #32
 80050d6:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d0ba      	beq.n	8005056 <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE(hspi);
 80050e0:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80050e2:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80050e6:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_SPI_IRQHandler+0x1fc>)
      __HAL_SPI_DISABLE(hspi);
 80050e8:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80050ec:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80050f0:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80050f2:	6919      	ldr	r1, [r3, #16]
 80050f4:	ea02 0201 	and.w	r2, r2, r1
 80050f8:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80050fa:	d125      	bne.n	8005148 <HAL_SPI_IRQHandler+0x1d4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80050fc:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80050fe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005100:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005104:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 8005106:	b150      	cbz	r0, 800511e <HAL_SPI_IRQHandler+0x1aa>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_SPI_IRQHandler+0x200>)
 800510a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800510c:	f7fc fe9e 	bl	8001e4c <HAL_DMA_Abort_IT>
 8005110:	b128      	cbz	r0, 800511e <HAL_SPI_IRQHandler+0x1aa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005112:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800511e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005120:	2800      	cmp	r0, #0
 8005122:	d098      	beq.n	8005056 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <HAL_SPI_IRQHandler+0x200>)
 8005126:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005128:	f7fc fe90 	bl	8001e4c <HAL_DMA_Abort_IT>
 800512c:	2800      	cmp	r0, #0
 800512e:	d092      	beq.n	8005056 <HAL_SPI_IRQHandler+0xe2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005130:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800513c:	e78b      	b.n	8005056 <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 800513e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005140:	4620      	mov	r0, r4
}
 8005142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8005146:	4718      	bx	r3
        hspi->State = HAL_SPI_STATE_READY;
 8005148:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800514a:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800514c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005150:	f7ff ff0e 	bl	8004f70 <HAL_SPI_ErrorCallback>
}
 8005154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515e:	619a      	str	r2, [r3, #24]
    return;
 8005160:	e779      	b.n	8005056 <HAL_SPI_IRQHandler+0xe2>
      HAL_SPI_TxRxCpltCallback(hspi);
 8005162:	f7ff ff03 	bl	8004f6c <HAL_SPI_TxRxCpltCallback>
 8005166:	e776      	b.n	8005056 <HAL_SPI_IRQHandler+0xe2>
      HAL_SPI_RxCpltCallback(hspi);
 8005168:	f7fb fcee 	bl	8000b48 <HAL_SPI_RxCpltCallback>
 800516c:	e773      	b.n	8005056 <HAL_SPI_IRQHandler+0xe2>
 800516e:	bf00      	nop
 8005170:	fffffc94 	.word	0xfffffc94
 8005174:	08005179 	.word	0x08005179

08005178 <SPI_DMAAbortOnError>:
{
 8005178:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800517c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800517e:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8005180:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005184:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8005188:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800518c:	f7ff fef0 	bl	8004f70 <HAL_SPI_ErrorCallback>
}
 8005190:	bd08      	pop	{r3, pc}
 8005192:	bf00      	nop

08005194 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005194:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005198:	2b01      	cmp	r3, #1
 800519a:	d141      	bne.n	8005220 <HAL_TIM_Base_Start_IT+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800519c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800519e:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a0:	4b24      	ldr	r3, [pc, #144]	; (8005234 <HAL_TIM_Base_Start_IT+0xa0>)
 80051a2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80051a6:	bf18      	it	ne
 80051a8:	429a      	cmpne	r2, r3
{
 80051aa:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	4d21      	ldr	r5, [pc, #132]	; (8005238 <HAL_TIM_Base_Start_IT+0xa4>)
 80051b4:	4c21      	ldr	r4, [pc, #132]	; (800523c <HAL_TIM_Base_Start_IT+0xa8>)
 80051b6:	42aa      	cmp	r2, r5
 80051b8:	bf08      	it	eq
 80051ba:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80051be:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c4:	42a2      	cmp	r2, r4
 80051c6:	bf08      	it	eq
 80051c8:	f043 0301 	orreq.w	r3, r3, #1
 80051cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d4:	481a      	ldr	r0, [pc, #104]	; (8005240 <HAL_TIM_Base_Start_IT+0xac>)
 80051d6:	42a2      	cmp	r2, r4
 80051d8:	bf08      	it	eq
 80051da:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051de:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e0:	4282      	cmp	r2, r0
 80051e2:	bf08      	it	eq
 80051e4:	f043 0301 	orreq.w	r3, r3, #1
 80051e8:	4916      	ldr	r1, [pc, #88]	; (8005244 <HAL_TIM_Base_Start_IT+0xb0>)
 80051ea:	428a      	cmp	r2, r1
 80051ec:	bf08      	it	eq
 80051ee:	f043 0301 	orreq.w	r3, r3, #1
 80051f2:	b933      	cbnz	r3, 8005202 <HAL_TIM_Base_Start_IT+0x6e>
 80051f4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 80051f8:	1a10      	subs	r0, r2, r0
 80051fa:	fab0 f080 	clz	r0, r0
 80051fe:	0940      	lsrs	r0, r0, #5
 8005200:	b198      	cbz	r0, 800522a <HAL_TIM_Base_Start_IT+0x96>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005202:	6891      	ldr	r1, [r2, #8]
 8005204:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_TIM_Base_Start_IT+0xb4>)
 8005206:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	2b06      	cmp	r3, #6
 800520a:	d00b      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x90>
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d008      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005212:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6013      	str	r3, [r2, #0]
}
 800521c:	bc30      	pop	{r4, r5}
 800521e:	4770      	bx	lr
    return HAL_ERROR;
 8005220:	2001      	movs	r0, #1
}
 8005222:	4770      	bx	lr
  return HAL_OK;
 8005224:	2000      	movs	r0, #0
}
 8005226:	bc30      	pop	{r4, r5}
 8005228:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e7f3      	b.n	800521c <HAL_TIM_Base_Start_IT+0x88>
 8005234:	40010000 	.word	0x40010000
 8005238:	40000400 	.word	0x40000400
 800523c:	40000800 	.word	0x40000800
 8005240:	40010400 	.word	0x40010400
 8005244:	40001800 	.word	0x40001800
 8005248:	00010007 	.word	0x00010007

0800524c <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	f000 8081 	beq.w	8005358 <HAL_TIM_ConfigClockSource+0x10c>
 8005256:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	2302      	movs	r3, #2
{
 800525a:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800525c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 800525e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005264:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005268:	4b5a      	ldr	r3, [pc, #360]	; (80053d4 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 800526a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526c:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800526e:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 8005270:	680b      	ldr	r3, [r1, #0]
 8005272:	2b70      	cmp	r3, #112	; 0x70
 8005274:	f000 809c 	beq.w	80053b0 <HAL_TIM_ConfigClockSource+0x164>
 8005278:	d825      	bhi.n	80052c6 <HAL_TIM_ConfigClockSource+0x7a>
 800527a:	2b50      	cmp	r3, #80	; 0x50
 800527c:	d06e      	beq.n	800535c <HAL_TIM_ConfigClockSource+0x110>
 800527e:	d939      	bls.n	80052f4 <HAL_TIM_ConfigClockSource+0xa8>
 8005280:	2b60      	cmp	r3, #96	; 0x60
 8005282:	d118      	bne.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005284:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005286:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005288:	f023 0310 	bic.w	r3, r3, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800528c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800528e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005290:	69a3      	ldr	r3, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005296:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800529a:	6a21      	ldr	r1, [r4, #32]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800529c:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a0:	61a3      	str	r3, [r4, #24]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052a2:	4b4d      	ldr	r3, [pc, #308]	; (80053d8 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 80052a8:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80052aa:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80052ac:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b4:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80052b6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80052b8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052be:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80052c2:	bc30      	pop	{r4, r5}
 80052c4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80052c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ca:	d060      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x142>
 80052cc:	d933      	bls.n	8005336 <HAL_TIM_ConfigClockSource+0xea>
 80052ce:	4943      	ldr	r1, [pc, #268]	; (80053dc <HAL_TIM_ConfigClockSource+0x190>)
 80052d0:	428b      	cmp	r3, r1
 80052d2:	d006      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x96>
 80052d4:	d929      	bls.n	800532a <HAL_TIM_ConfigClockSource+0xde>
 80052d6:	4942      	ldr	r1, [pc, #264]	; (80053e0 <HAL_TIM_ConfigClockSource+0x194>)
 80052d8:	428b      	cmp	r3, r1
 80052da:	d002      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x96>
 80052dc:	3110      	adds	r1, #16
 80052de:	428b      	cmp	r3, r1
 80052e0:	d1e9      	bne.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 80052e2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e4:	493c      	ldr	r1, [pc, #240]	; (80053d8 <HAL_TIM_ConfigClockSource+0x18c>)
 80052e6:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	4319      	orrs	r1, r3
 80052ec:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80052f0:	60a1      	str	r1, [r4, #8]
}
 80052f2:	e7e0      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d123      	bne.n	8005340 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 80052f8:	6a23      	ldr	r3, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	6848      	ldr	r0, [r1, #4]
 80052fc:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fe:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8005304:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8005306:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005308:	f021 0101 	bic.w	r1, r1, #1
 800530c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005310:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005314:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005318:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800531a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800531e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005320:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005322:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005326:	60a3      	str	r3, [r4, #8]
}
 8005328:	e7c5      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800532a:	f023 0110 	bic.w	r1, r3, #16
 800532e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005332:	d1c0      	bne.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
 8005334:	e7d5      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8005336:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800533a:	bf18      	it	ne
 800533c:	2001      	movne	r0, #1
 800533e:	e7ba      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8005340:	d8b9      	bhi.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
 8005342:	2b20      	cmp	r3, #32
 8005344:	d0cd      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x96>
 8005346:	d903      	bls.n	8005350 <HAL_TIM_ConfigClockSource+0x104>
 8005348:	2b30      	cmp	r3, #48	; 0x30
 800534a:	d0ca      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x96>
 800534c:	2001      	movs	r0, #1
 800534e:	e7b2      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
 8005350:	f033 0110 	bics.w	r1, r3, #16
 8005354:	d1af      	bne.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
 8005356:	e7c4      	b.n	80052e2 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8005358:	2002      	movs	r0, #2
}
 800535a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800535c:	6a23      	ldr	r3, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800535e:	6848      	ldr	r0, [r1, #4]
 8005360:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005362:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005366:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8005368:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 800536a:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536c:	f021 0101 	bic.w	r1, r1, #1
 8005370:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005374:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005378:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800537c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800537e:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 8005382:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005384:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005386:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800538a:	60a3      	str	r3, [r4, #8]
}
 800538c:	e793      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800538e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005392:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005394:	432b      	orrs	r3, r5
 8005396:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005398:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800539c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800539e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80053a2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ac:	60a3      	str	r3, [r4, #8]
      break;
 80053ae:	e782      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80053b4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b6:	432b      	orrs	r3, r5
 80053b8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ba:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 80053be:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80053c4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80053c6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80053c8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80053ce:	60a3      	str	r3, [r4, #8]
      break;
 80053d0:	e771      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x6a>
 80053d2:	bf00      	nop
 80053d4:	ffce0088 	.word	0xffce0088
 80053d8:	ffcfff8f 	.word	0xffcfff8f
 80053dc:	00100020 	.word	0x00100020
 80053e0:	00100030 	.word	0x00100030

080053e4 <HAL_TIM_OC_DelayElapsedCallback>:
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop

080053e8 <HAL_TIM_IC_CaptureCallback>:
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <HAL_TIM_PWM_PulseFinishedCallback>:
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop

080053f0 <HAL_TIM_TriggerCallback>:
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop

080053f4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f4:	6803      	ldr	r3, [r0, #0]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	0791      	lsls	r1, r2, #30
{
 80053fa:	b510      	push	{r4, lr}
 80053fc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053fe:	d502      	bpl.n	8005406 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	0792      	lsls	r2, r2, #30
 8005404:	d468      	bmi.n	80054d8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	0752      	lsls	r2, r2, #29
 800540a:	d502      	bpl.n	8005412 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	0750      	lsls	r0, r2, #29
 8005410:	d44f      	bmi.n	80054b2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	0711      	lsls	r1, r2, #28
 8005416:	d502      	bpl.n	800541e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	0712      	lsls	r2, r2, #28
 800541c:	d437      	bmi.n	800548e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	06d0      	lsls	r0, r2, #27
 8005422:	d502      	bpl.n	800542a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	06d1      	lsls	r1, r2, #27
 8005428:	d41e      	bmi.n	8005468 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	07d2      	lsls	r2, r2, #31
 800542e:	d502      	bpl.n	8005436 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	07d0      	lsls	r0, r2, #31
 8005434:	d469      	bmi.n	800550a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	0611      	lsls	r1, r2, #24
 800543a:	d502      	bpl.n	8005442 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	0612      	lsls	r2, r2, #24
 8005440:	d46b      	bmi.n	800551a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	05d0      	lsls	r0, r2, #23
 8005446:	d502      	bpl.n	800544e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	0611      	lsls	r1, r2, #24
 800544c:	d46d      	bmi.n	800552a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	0652      	lsls	r2, r2, #25
 8005452:	d502      	bpl.n	800545a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	0650      	lsls	r0, r2, #25
 8005458:	d46f      	bmi.n	800553a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	0691      	lsls	r1, r2, #26
 800545e:	d502      	bpl.n	8005466 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	0692      	lsls	r2, r2, #26
 8005464:	d449      	bmi.n	80054fa <HAL_TIM_IRQHandler+0x106>
}
 8005466:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005468:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800546e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005470:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005472:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f413 7f40 	tst.w	r3, #768	; 0x300
 800547a:	d16f      	bne.n	800555c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547c:	f7ff ffb2 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff ffb3 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005488:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	7722      	strb	r2, [r4, #28]
 800548c:	e7cd      	b.n	800542a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800548e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005492:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005494:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005496:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005498:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	079b      	lsls	r3, r3, #30
 800549e:	d15a      	bne.n	8005556 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a0:	f7ff ffa0 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff ffa1 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054ac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ae:	7722      	strb	r2, [r4, #28]
 80054b0:	e7b5      	b.n	800541e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ba:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054bc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80054c4:	d144      	bne.n	8005550 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	f7ff ff8d 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ca:	4620      	mov	r0, r4
 80054cc:	f7ff ff8e 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d4:	7722      	strb	r2, [r4, #28]
 80054d6:	e79c      	b.n	8005412 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054dc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054de:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	0799      	lsls	r1, r3, #30
 80054e6:	d130      	bne.n	800554a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e8:	f7ff ff7c 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff ff7d 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	7722      	strb	r2, [r4, #28]
 80054f8:	e785      	b.n	8005406 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054fa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80054fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005500:	611a      	str	r2, [r3, #16]
}
 8005502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005506:	f000 b945 	b.w	8005794 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800550a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800550e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005510:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005512:	f7fb fae1 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	e78d      	b.n	8005436 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800551e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005520:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005522:	f000 f939 	bl	8005798 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	e78b      	b.n	8005442 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800552a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800552e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005530:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005532:	f000 f933 	bl	800579c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	e789      	b.n	800544e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800553a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800553e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005540:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005542:	f7ff ff55 	bl	80053f0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	e787      	b.n	800545a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800554a:	f7ff ff4d 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 800554e:	e7d0      	b.n	80054f2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005550:	f7ff ff4a 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 8005554:	e7bc      	b.n	80054d0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	f7ff ff47 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 800555a:	e7a6      	b.n	80054aa <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800555c:	f7ff ff44 	bl	80053e8 <HAL_TIM_IC_CaptureCallback>
 8005560:	e791      	b.n	8005486 <HAL_TIM_IRQHandler+0x92>
 8005562:	bf00      	nop

08005564 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005564:	4a3f      	ldr	r2, [pc, #252]	; (8005664 <TIM_Base_SetConfig+0x100>)
 8005566:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800556a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800556c:	eba0 0202 	sub.w	r2, r0, r2
 8005570:	fab2 f282 	clz	r2, r2
{
 8005574:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005576:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800557a:	d023      	beq.n	80055c4 <TIM_Base_SetConfig+0x60>
 800557c:	bb12      	cbnz	r2, 80055c4 <TIM_Base_SetConfig+0x60>
 800557e:	4c3a      	ldr	r4, [pc, #232]	; (8005668 <TIM_Base_SetConfig+0x104>)
 8005580:	42a0      	cmp	r0, r4
 8005582:	d047      	beq.n	8005614 <TIM_Base_SetConfig+0xb0>
 8005584:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005588:	42a0      	cmp	r0, r4
 800558a:	d043      	beq.n	8005614 <TIM_Base_SetConfig+0xb0>
 800558c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005590:	42a0      	cmp	r0, r4
 8005592:	d049      	beq.n	8005628 <TIM_Base_SetConfig+0xc4>
 8005594:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8005598:	42a0      	cmp	r0, r4
 800559a:	d045      	beq.n	8005628 <TIM_Base_SetConfig+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559c:	4c33      	ldr	r4, [pc, #204]	; (800566c <TIM_Base_SetConfig+0x108>)
 800559e:	4a34      	ldr	r2, [pc, #208]	; (8005670 <TIM_Base_SetConfig+0x10c>)
 80055a0:	4290      	cmp	r0, r2
 80055a2:	bf18      	it	ne
 80055a4:	42a0      	cmpne	r0, r4
 80055a6:	d04f      	beq.n	8005648 <TIM_Base_SetConfig+0xe4>
 80055a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055ac:	4290      	cmp	r0, r2
 80055ae:	d04b      	beq.n	8005648 <TIM_Base_SetConfig+0xe4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b0:	694d      	ldr	r5, [r1, #20]
 80055b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80055b8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ba:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80055bc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055be:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055c0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c2:	e023      	b.n	800560c <TIM_Base_SetConfig+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80055c4:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055ca:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055cc:	4c29      	ldr	r4, [pc, #164]	; (8005674 <TIM_Base_SetConfig+0x110>)
 80055ce:	1b04      	subs	r4, r0, r4
 80055d0:	fab4 f484 	clz	r4, r4
 80055d4:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055dc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055de:	694d      	ldr	r5, [r1, #20]
 80055e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80055e6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e8:	688b      	ldr	r3, [r1, #8]
 80055ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055ec:	680b      	ldr	r3, [r1, #0]
 80055ee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f0:	b952      	cbnz	r2, 8005608 <TIM_Base_SetConfig+0xa4>
 80055f2:	b94c      	cbnz	r4, 8005608 <TIM_Base_SetConfig+0xa4>
 80055f4:	4a1d      	ldr	r2, [pc, #116]	; (800566c <TIM_Base_SetConfig+0x108>)
 80055f6:	4b1e      	ldr	r3, [pc, #120]	; (8005670 <TIM_Base_SetConfig+0x10c>)
 80055f8:	4298      	cmp	r0, r3
 80055fa:	bf18      	it	ne
 80055fc:	4290      	cmpne	r0, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0xa4>
 8005600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005604:	4298      	cmp	r0, r3
 8005606:	d101      	bne.n	800560c <TIM_Base_SetConfig+0xa8>
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800560c:	2301      	movs	r3, #1
}
 800560e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8005610:	6143      	str	r3, [r0, #20]
}
 8005612:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005614:	4c17      	ldr	r4, [pc, #92]	; (8005674 <TIM_Base_SetConfig+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800561a:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800561c:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800561e:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	fab4 f484 	clz	r4, r4
 8005624:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005626:	e7d6      	b.n	80055d6 <TIM_Base_SetConfig+0x72>
    tmpcr1 |= Structure->CounterMode;
 8005628:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800562e:	4c11      	ldr	r4, [pc, #68]	; (8005674 <TIM_Base_SetConfig+0x110>)
    tmpcr1 |= Structure->CounterMode;
 8005630:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005632:	4d11      	ldr	r5, [pc, #68]	; (8005678 <TIM_Base_SetConfig+0x114>)
 8005634:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005636:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005638:	fab4 f484 	clz	r4, r4
 800563c:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005640:	d0c9      	beq.n	80055d6 <TIM_Base_SetConfig+0x72>
 8005642:	2c00      	cmp	r4, #0
 8005644:	d1c7      	bne.n	80055d6 <TIM_Base_SetConfig+0x72>
 8005646:	e7a9      	b.n	800559c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005648:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005650:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005652:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005658:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800565a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800565c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005660:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005662:	e7c7      	b.n	80055f4 <TIM_Base_SetConfig+0x90>
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40010400 	.word	0x40010400
 8005678:	40000c00 	.word	0x40000c00

0800567c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800567c:	b370      	cbz	r0, 80056dc <HAL_TIM_Base_Init+0x60>
{
 800567e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005680:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005684:	4604      	mov	r4, r0
 8005686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800568a:	b313      	cbz	r3, 80056d2 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800568e:	2302      	movs	r3, #2
 8005690:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005694:	f851 0b04 	ldr.w	r0, [r1], #4
 8005698:	f7ff ff64 	bl	8005564 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569c:	2301      	movs	r3, #1
  return HAL_OK;
 800569e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80056a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80056ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80056b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80056c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056c4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80056c8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80056d0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80056d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80056d6:	f7fb fd6f 	bl	80011b8 <HAL_TIM_Base_MspInit>
 80056da:	e7d7      	b.n	800568c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80056dc:	2001      	movs	r0, #1
}
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d04b      	beq.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e8:	6803      	ldr	r3, [r0, #0]
 80056ea:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	2002      	movs	r0, #2
{
 80056ee:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056f0:	4d24      	ldr	r5, [pc, #144]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80056f2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056f6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80056f8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80056fa:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056fc:	d029      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80056fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005702:	42ab      	cmp	r3, r5
 8005704:	d025      	beq.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005706:	4d20      	ldr	r5, [pc, #128]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005708:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570c:	42ab      	cmp	r3, r5
 800570e:	bf18      	it	ne
 8005710:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8005714:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005718:	bf0c      	ite	eq
 800571a:	f04f 0c01 	moveq.w	ip, #1
 800571e:	f04f 0c00 	movne.w	ip, #0
 8005722:	42ab      	cmp	r3, r5
 8005724:	bf08      	it	eq
 8005726:	f04c 0c01 	orreq.w	ip, ip, #1
 800572a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800572e:	42ab      	cmp	r3, r5
 8005730:	bf08      	it	eq
 8005732:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005736:	680d      	ldr	r5, [r1, #0]
 8005738:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573a:	4d14      	ldr	r5, [pc, #80]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 800573c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	42ab      	cmp	r3, r5
 8005740:	bf14      	ite	ne
 8005742:	4660      	movne	r0, ip
 8005744:	f04c 0001 	orreq.w	r0, ip, #1
 8005748:	b960      	cbnz	r0, 8005764 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800574a:	4811      	ldr	r0, [pc, #68]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800574c:	4283      	cmp	r3, r0
 800574e:	d009      	beq.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005750:	e00d      	b.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005752:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005754:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005758:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800575a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800575c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005760:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005762:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005764:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005766:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800576c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800576e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005770:	2101      	movs	r1, #1

  return HAL_OK;
 8005772:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005774:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005778:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800577c:	bc30      	pop	{r4, r5}
 800577e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005780:	2002      	movs	r0, #2
}
 8005782:	4770      	bx	lr
 8005784:	40010000 	.word	0x40010000
 8005788:	40000400 	.word	0x40000400
 800578c:	40001800 	.word	0x40001800
 8005790:	40014000 	.word	0x40014000

08005794 <HAL_TIMEx_CommutCallback>:
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop

08005798 <HAL_TIMEx_BreakCallback>:
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <HAL_TIMEx_Break2Callback>:
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop

080057a0 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop

080057a4 <MX_LWIP_Init>:
{
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 80057a6:	4b25      	ldr	r3, [pc, #148]	; (800583c <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 80057a8:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 80057aa:	4f25      	ldr	r7, [pc, #148]	; (8005840 <MX_LWIP_Init+0x9c>)
{
 80057ac:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 80057ae:	4e25      	ldr	r6, [pc, #148]	; (8005844 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 80057b0:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 80057b2:	4d25      	ldr	r5, [pc, #148]	; (8005848 <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 80057b4:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 80057b6:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 80057b8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 80057bc:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 80057be:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 80057c0:	f003 f898 	bl	80088f4 <tcpip_init>
	LOCK_TCPIP_CORE();
 80057c4:	f000 fb20 	bl	8005e08 <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057c8:	4920      	ldr	r1, [pc, #128]	; (800584c <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80057ca:	4a21      	ldr	r2, [pc, #132]	; (8005850 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057cc:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80057ce:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80057d0:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80057d2:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80057d4:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80057d6:	6828      	ldr	r0, [r5, #0]
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80057da:	4c1f      	ldr	r4, [pc, #124]	; (8005858 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80057dc:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80057de:	481f      	ldr	r0, [pc, #124]	; (800585c <MX_LWIP_Init+0xb8>)
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	481f      	ldr	r0, [pc, #124]	; (8005860 <MX_LWIP_Init+0xbc>)
 80057e4:	9001      	str	r0, [sp, #4]
 80057e6:	4620      	mov	r0, r4
 80057e8:	f003 fd5e 	bl	80092a8 <netif_add>
  netif_set_default(&gnetif);
 80057ec:	4620      	mov	r0, r4
 80057ee:	f003 fe11 	bl	8009414 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80057f2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 80057f6:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 80057f8:	075b      	lsls	r3, r3, #29
 80057fa:	d51c      	bpl.n	8005836 <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 80057fc:	f003 fe14 	bl	8009428 <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005800:	4c18      	ldr	r4, [pc, #96]	; (8005864 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005802:	4919      	ldr	r1, [pc, #100]	; (8005868 <MX_LWIP_Init+0xc4>)
 8005804:	4814      	ldr	r0, [pc, #80]	; (8005858 <MX_LWIP_Init+0xb4>)
 8005806:	f003 fea3 	bl	8009550 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800580a:	2220      	movs	r2, #32
 800580c:	2100      	movs	r1, #0
 800580e:	1d20      	adds	r0, r4, #4
 8005810:	f009 ff3b 	bl	800f68a <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005814:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 8005818:	4814      	ldr	r0, [pc, #80]	; (800586c <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 800581a:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800581c:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800581e:	4622      	mov	r2, r4
 8005820:	490d      	ldr	r1, [pc, #52]	; (8005858 <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 8005822:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005824:	4812      	ldr	r0, [pc, #72]	; (8005870 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 8005826:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005828:	f000 fbf0 	bl	800600c <osThreadNew>
}
 800582c:	b005      	add	sp, #20
 800582e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 8005832:	f000 bb67 	b.w	8005f04 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 8005836:	f003 fe1b 	bl	8009470 <netif_set_down>
 800583a:	e7e1      	b.n	8005800 <MX_LWIP_Init+0x5c>
 800583c:	0a01a8c0 	.word	0x0a01a8c0
 8005840:	240003a8 	.word	0x240003a8
 8005844:	240003ac 	.word	0x240003ac
 8005848:	240003a4 	.word	0x240003a4
 800584c:	2400040c 	.word	0x2400040c
 8005850:	24000410 	.word	0x24000410
 8005854:	24000408 	.word	0x24000408
 8005858:	240003d4 	.word	0x240003d4
 800585c:	08008875 	.word	0x08008875
 8005860:	08005a35 	.word	0x08005a35
 8005864:	240003b0 	.word	0x240003b0
 8005868:	080057a1 	.word	0x080057a1
 800586c:	0801040c 	.word	0x0801040c
 8005870:	08005e25 	.word	0x08005e25

08005874 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8005874:	2000      	movs	r0, #0
 8005876:	4770      	bx	lr

08005878 <low_level_output>:
{
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	b08c      	sub	sp, #48	; 0x30
 800587c:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800587e:	2230      	movs	r2, #48	; 0x30
 8005880:	2100      	movs	r1, #0
 8005882:	4668      	mov	r0, sp
 8005884:	f009 ff01 	bl	800f68a <memset>
  for(q = p; q != NULL; q = q->next)
 8005888:	b1fc      	cbz	r4, 80058ca <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 800588a:	8962      	ldrh	r2, [r4, #10]
 800588c:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 800588e:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 8005890:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 8005894:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 8005896:	e9cd 1200 	strd	r1, r2, [sp]
 800589a:	4622      	mov	r2, r4
    if(q->next == NULL)
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	b16a      	cbz	r2, 80058bc <low_level_output+0x44>
    i++;
 80058a0:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 80058a4:	f1bc 0f04 	cmp.w	ip, #4
 80058a8:	d02b      	beq.n	8005902 <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 80058aa:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 80058ac:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 80058ae:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 80058b0:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 80058b2:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 80058b6:	330c      	adds	r3, #12
    if(q->next == NULL)
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	d1f1      	bne.n	80058a0 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 80058bc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80058c0:	ab0c      	add	r3, sp, #48	; 0x30
 80058c2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80058c6:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 80058ca:	4e10      	ldr	r6, [pc, #64]	; (800590c <low_level_output+0x94>)
  pbuf_ref(p);
 80058cc:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 80058ce:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 80058d0:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 80058d4:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 80058d6:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 80058d8:	f004 f976 	bl	8009bc8 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80058dc:	4631      	mov	r1, r6
 80058de:	480c      	ldr	r0, [pc, #48]	; (8005910 <low_level_output+0x98>)
 80058e0:	4d0c      	ldr	r5, [pc, #48]	; (8005914 <low_level_output+0x9c>)
 80058e2:	f7fc ff0b 	bl	80026fc <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80058e6:	f04f 31ff 	mov.w	r1, #4294967295
 80058ea:	6828      	ldr	r0, [r5, #0]
 80058ec:	f000 fcc0 	bl	8006270 <osSemaphoreAcquire>
 80058f0:	4604      	mov	r4, r0
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d1f7      	bne.n	80058e6 <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 80058f6:	4806      	ldr	r0, [pc, #24]	; (8005910 <low_level_output+0x98>)
 80058f8:	f7fc ffba 	bl	8002870 <HAL_ETH_ReleaseTxPacket>
  return errval;
 80058fc:	4620      	mov	r0, r4
}
 80058fe:	b00c      	add	sp, #48	; 0x30
 8005900:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8005902:	f06f 000b 	mvn.w	r0, #11
}
 8005906:	b00c      	add	sp, #48	; 0x30
 8005908:	bd70      	pop	{r4, r5, r6, pc}
 800590a:	bf00      	nop
 800590c:	2400043c 	.word	0x2400043c
 8005910:	24000478 	.word	0x24000478
 8005914:	24000474 	.word	0x24000474

08005918 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8005918:	f7fc b9d4 	b.w	8001cc4 <HAL_GetTick>

0800591c <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 800591c:	4802      	ldr	r0, [pc, #8]	; (8005928 <ETH_PHY_IO_Init+0xc>)
{
 800591e:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8005920:	f7fd f9c0 	bl	8002ca4 <HAL_ETH_SetMDIOClockRange>
}
 8005924:	2000      	movs	r0, #0
 8005926:	bd08      	pop	{r3, pc}
 8005928:	24000478 	.word	0x24000478

0800592c <ETH_PHY_IO_ReadReg>:
{
 800592c:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800592e:	4806      	ldr	r0, [pc, #24]	; (8005948 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8005930:	b508      	push	{r3, lr}
 8005932:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005934:	460a      	mov	r2, r1
 8005936:	4661      	mov	r1, ip
 8005938:	f7fd f87c 	bl	8002a34 <HAL_ETH_ReadPHYRegister>
 800593c:	3800      	subs	r0, #0
 800593e:	bf18      	it	ne
 8005940:	2001      	movne	r0, #1
}
 8005942:	4240      	negs	r0, r0
 8005944:	bd08      	pop	{r3, pc}
 8005946:	bf00      	nop
 8005948:	24000478 	.word	0x24000478

0800594c <ETH_PHY_IO_WriteReg>:
{
 800594c:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800594e:	4806      	ldr	r0, [pc, #24]	; (8005968 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8005950:	b508      	push	{r3, lr}
 8005952:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005954:	460a      	mov	r2, r1
 8005956:	4661      	mov	r1, ip
 8005958:	f7fd f89a 	bl	8002a90 <HAL_ETH_WritePHYRegister>
 800595c:	3800      	subs	r0, #0
 800595e:	bf18      	it	ne
 8005960:	2001      	movne	r0, #1
}
 8005962:	4240      	negs	r0, r0
 8005964:	bd08      	pop	{r3, pc}
 8005966:	bf00      	nop
 8005968:	24000478 	.word	0x24000478

0800596c <pbuf_free_custom>:
{
 800596c:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800596e:	4808      	ldr	r0, [pc, #32]	; (8005990 <pbuf_free_custom+0x24>)
{
 8005970:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005972:	f003 fbb7 	bl	80090e4 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005976:	4b07      	ldr	r3, [pc, #28]	; (8005994 <pbuf_free_custom+0x28>)
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	2a01      	cmp	r2, #1
 800597c:	d000      	beq.n	8005980 <pbuf_free_custom+0x14>
}
 800597e:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8005980:	4905      	ldr	r1, [pc, #20]	; (8005998 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8005982:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8005984:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8005986:	701a      	strb	r2, [r3, #0]
}
 8005988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 800598c:	f000 bca4 	b.w	80062d8 <osSemaphoreRelease>
 8005990:	080104f4 	.word	0x080104f4
 8005994:	24000434 	.word	0x24000434
 8005998:	24000438 	.word	0x24000438

0800599c <ethernetif_input>:
{
 800599c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059a0:	4c14      	ldr	r4, [pc, #80]	; (80059f4 <ethernetif_input+0x58>)
 80059a2:	b083      	sub	sp, #12
 80059a4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80059f8 <ethernetif_input+0x5c>
 80059a8:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 80059aa:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 80059ac:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80059fc <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80059b0:	f04f 31ff 	mov.w	r1, #4294967295
 80059b4:	6820      	ldr	r0, [r4, #0]
 80059b6:	f000 fc5b 	bl	8006270 <osSemaphoreAcquire>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d1f8      	bne.n	80059b0 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 80059be:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 80059c2:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f3      	bne.n	80059b0 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 80059c8:	a901      	add	r1, sp, #4
 80059ca:	4648      	mov	r0, r9
 80059cc:	f7fc fec6 	bl	800275c <HAL_ETH_ReadData>
  return p;
 80059d0:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 80059d2:	4631      	mov	r1, r6
 80059d4:	4628      	mov	r0, r5
        if (p != NULL)
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	d0ea      	beq.n	80059b0 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 80059da:	6933      	ldr	r3, [r6, #16]
 80059dc:	4798      	blx	r3
 80059de:	2800      	cmp	r0, #0
 80059e0:	d0ed      	beq.n	80059be <ethernetif_input+0x22>
            pbuf_free(p);
 80059e2:	4628      	mov	r0, r5
 80059e4:	f003 ff6e 	bl	80098c4 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 80059e8:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 80059ec:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1de      	bne.n	80059b0 <ethernetif_input+0x14>
 80059f2:	e7e9      	b.n	80059c8 <ethernetif_input+0x2c>
 80059f4:	24000438 	.word	0x24000438
 80059f8:	24000434 	.word	0x24000434
 80059fc:	24000478 	.word	0x24000478

08005a00 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8005a00:	4b01      	ldr	r3, [pc, #4]	; (8005a08 <HAL_ETH_RxCpltCallback+0x8>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	f000 bc68 	b.w	80062d8 <osSemaphoreRelease>
 8005a08:	24000438 	.word	0x24000438

08005a0c <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8005a0c:	4b01      	ldr	r3, [pc, #4]	; (8005a14 <HAL_ETH_TxCpltCallback+0x8>)
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	f000 bc62 	b.w	80062d8 <osSemaphoreRelease>
 8005a14:	24000474 	.word	0x24000474

08005a18 <HAL_ETH_ErrorCallback>:
{
 8005a18:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8005a1a:	f7fd faa3 	bl	8002f64 <HAL_ETH_GetDMAError>
 8005a1e:	0603      	lsls	r3, r0, #24
 8005a20:	d400      	bmi.n	8005a24 <HAL_ETH_ErrorCallback+0xc>
}
 8005a22:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8005a24:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <HAL_ETH_ErrorCallback+0x18>)
 8005a26:	6818      	ldr	r0, [r3, #0]
}
 8005a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8005a2c:	f000 bc54 	b.w	80062d8 <osSemaphoreRelease>
 8005a30:	24000438 	.word	0x24000438

08005a34 <ethernetif_init>:
{
 8005a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a38:	4604      	mov	r4, r0
{
 8005a3a:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f000 80b7 	beq.w	8005bb0 <ethernetif_init+0x17c>
  netif->linkoutput = low_level_output;
 8005a42:	4b5f      	ldr	r3, [pc, #380]	; (8005bc0 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8005a44:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 8005a48:	4a5e      	ldr	r2, [pc, #376]	; (8005bc4 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8005a4a:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 8005a4c:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8005a4e:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8005a50:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8005a52:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 8005a54:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8005a56:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8005a58:	f009 fe17 	bl	800f68a <memset>
  heth.Instance = ETH;
 8005a5c:	4d5a      	ldr	r5, [pc, #360]	; (8005bc8 <ethernetif_init+0x194>)
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a60:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a62:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8005c0c <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a66:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8005a68:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8005a6a:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8005a6c:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8005a70:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a72:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8005a74:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a78:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a7a:	4b57      	ldr	r3, [pc, #348]	; (8005bd8 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a7c:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a7e:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8005a80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a84:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a86:	f7fd f94f 	bl	8002d28 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a8a:	2234      	movs	r2, #52	; 0x34
 8005a8c:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a8e:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a90:	f109 0004 	add.w	r0, r9, #4
 8005a94:	f009 fdf9 	bl	800f68a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a98:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005a9a:	4850      	ldr	r0, [pc, #320]	; (8005bdc <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a9c:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005aa0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005aa4:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005aa8:	f003 faa4 	bl	8008ff4 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005aac:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005aae:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ab0:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ab2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005abc:	785a      	ldrb	r2, [r3, #1]
 8005abe:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ac2:	789a      	ldrb	r2, [r3, #2]
 8005ac4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ac8:	78da      	ldrb	r2, [r3, #3]
 8005aca:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ace:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005ad0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ad4:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005ad8:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ada:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005adc:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ae0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8005ae4:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005ae8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005aec:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8005aee:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005af0:	f000 fb6e 	bl	80061d0 <osSemaphoreNew>
 8005af4:	4b3a      	ldr	r3, [pc, #232]	; (8005be0 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005af6:	4632      	mov	r2, r6
 8005af8:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005afa:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005afc:	4638      	mov	r0, r7
 8005afe:	f000 fb67 	bl	80061d0 <osSemaphoreNew>
 8005b02:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005b04:	4631      	mov	r1, r6
 8005b06:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005b08:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005b0a:	a803      	add	r0, sp, #12
 8005b0c:	f009 fdbd 	bl	800f68a <memset>
  attributes.name = "EthIf";
 8005b10:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8005b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8005b16:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8005b18:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8005b1a:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8005b1c:	4833      	ldr	r0, [pc, #204]	; (8005bec <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8005b1e:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8005b22:	4621      	mov	r1, r4
 8005b24:	f000 fa72 	bl	800600c <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b28:	4931      	ldr	r1, [pc, #196]	; (8005bf0 <ethernetif_init+0x1bc>)
 8005b2a:	4832      	ldr	r0, [pc, #200]	; (8005bf4 <ethernetif_init+0x1c0>)
 8005b2c:	f7fb ffbc 	bl	8001aa8 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8005b30:	4830      	ldr	r0, [pc, #192]	; (8005bf4 <ethernetif_init+0x1c0>)
 8005b32:	f7fb ffd3 	bl	8001adc <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8005b36:	f1b8 0f00 	cmp.w	r8, #0
 8005b3a:	d124      	bne.n	8005b86 <ethernetif_init+0x152>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b3c:	482d      	ldr	r0, [pc, #180]	; (8005bf4 <ethernetif_init+0x1c0>)
 8005b3e:	f7fc f837 	bl	8001bb0 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005b42:	42b8      	cmp	r0, r7
 8005b44:	dd2a      	ble.n	8005b9c <ethernetif_init+0x168>
      switch (PHYLinkState)
 8005b46:	3803      	subs	r0, #3
 8005b48:	2802      	cmp	r0, #2
 8005b4a:	d822      	bhi.n	8005b92 <ethernetif_init+0x15e>
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <ethernetif_init+0x1c4>)
 8005b4e:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <ethernetif_init+0x1c8>)
 8005b50:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8005b54:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005b58:	a90b      	add	r1, sp, #44	; 0x2c
 8005b5a:	481b      	ldr	r0, [pc, #108]	; (8005bc8 <ethernetif_init+0x194>)
 8005b5c:	f7fc ffca 	bl	8002af4 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005b60:	a90b      	add	r1, sp, #44	; 0x2c
 8005b62:	4819      	ldr	r0, [pc, #100]	; (8005bc8 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8005b64:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005b68:	f7fd f88e 	bl	8002c88 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005b6c:	4816      	ldr	r0, [pc, #88]	; (8005bc8 <ethernetif_init+0x194>)
 8005b6e:	f7fc fd31 	bl	80025d4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005b72:	4620      	mov	r0, r4
 8005b74:	f003 fc58 	bl	8009428 <netif_set_up>
    netif_set_link_up(netif);
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f003 fc9d 	bl	80094b8 <netif_set_link_up>
}
 8005b7e:	2000      	movs	r0, #0
 8005b80:	b025      	add	sp, #148	; 0x94
 8005b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8005b86:	f7fb fa99 	bl	80010bc <Error_Handler>
}
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	b025      	add	sp, #148	; 0x94
 8005b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8005b92:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8005b96:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8005b9a:	e7dd      	b.n	8005b58 <ethernetif_init+0x124>
      netif_set_link_down(netif);
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f003 fcb3 	bl	8009508 <netif_set_link_down>
      netif_set_down(netif);
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f003 fc64 	bl	8009470 <netif_set_down>
}
 8005ba8:	2000      	movs	r0, #0
 8005baa:	b025      	add	sp, #148	; 0x94
 8005bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <ethernetif_init+0x1cc>)
 8005bb2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005bb6:	4913      	ldr	r1, [pc, #76]	; (8005c04 <ethernetif_init+0x1d0>)
 8005bb8:	4813      	ldr	r0, [pc, #76]	; (8005c08 <ethernetif_init+0x1d4>)
 8005bba:	f009 fd01 	bl	800f5c0 <iprintf>
 8005bbe:	e740      	b.n	8005a42 <ethernetif_init+0xe>
 8005bc0:	08005879 	.word	0x08005879
 8005bc4:	0800df65 	.word	0x0800df65
 8005bc8:	24000478 	.word	0x24000478
 8005bcc:	40028000 	.word	0x40028000
 8005bd0:	00e18000 	.word	0x00e18000
 8005bd4:	30040060 	.word	0x30040060
 8005bd8:	30040000 	.word	0x30040000
 8005bdc:	080104f4 	.word	0x080104f4
 8005be0:	24000438 	.word	0x24000438
 8005be4:	24000474 	.word	0x24000474
 8005be8:	08010468 	.word	0x08010468
 8005bec:	0800599d 	.word	0x0800599d
 8005bf0:	24000058 	.word	0x24000058
 8005bf4:	24000414 	.word	0x24000414
 8005bf8:	080104bc 	.word	0x080104bc
 8005bfc:	080104c8 	.word	0x080104c8
 8005c00:	08010414 	.word	0x08010414
 8005c04:	08010430 	.word	0x08010430
 8005c08:	08010440 	.word	0x08010440
 8005c0c:	2400043c 	.word	0x2400043c

08005c10 <sys_now>:
  return HAL_GetTick();
 8005c10:	f7fc b858 	b.w	8001cc4 <HAL_GetTick>

08005c14 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8005c14:	4b4b      	ldr	r3, [pc, #300]	; (8005d44 <HAL_ETH_MspInit+0x130>)
 8005c16:	6802      	ldr	r2, [r0, #0]
{
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8005c1a:	429a      	cmp	r2, r3
{
 8005c1c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1e:	f04f 0400 	mov.w	r4, #0
 8005c22:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005c26:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005c2a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8005c2c:	d001      	beq.n	8005c32 <HAL_ETH_MspInit+0x1e>
}
 8005c2e:	b00d      	add	sp, #52	; 0x34
 8005c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005c32:	4b45      	ldr	r3, [pc, #276]	; (8005d48 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c34:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005c36:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c38:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005c3a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c3e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c40:	4842      	ldr	r0, [pc, #264]	; (8005d4c <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c46:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005c4a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005c4e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005c52:	9200      	str	r2, [sp, #0]
 8005c54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005c56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005c5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c5e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005c62:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005c66:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8005c6a:	9201      	str	r2, [sp, #4]
 8005c6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005c6e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005c72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005c76:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005c7a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8005c7e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005c82:	9202      	str	r2, [sp, #8]
 8005c84:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005c8a:	f042 0204 	orr.w	r2, r2, #4
 8005c8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005c92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005c96:	f002 0204 	and.w	r2, r2, #4
 8005c9a:	9203      	str	r2, [sp, #12]
 8005c9c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005caa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cae:	f002 0201 	and.w	r2, r2, #1
 8005cb2:	9204      	str	r2, [sp, #16]
 8005cb4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cba:	433a      	orrs	r2, r7
 8005cbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005cc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cc4:	403a      	ands	r2, r7
 8005cc6:	9205      	str	r2, [sp, #20]
 8005cc8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005cca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cda:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ce0:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce2:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ce6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ce8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005cea:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cec:	f7fd f93e 	bl	8002f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005cf0:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf2:	a907      	add	r1, sp, #28
 8005cf4:	4816      	ldr	r0, [pc, #88]	; (8005d50 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005cf6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf8:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cfc:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d00:	f7fd f934 	bl	8002f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d08:	a907      	add	r1, sp, #28
 8005d0a:	4812      	ldr	r0, [pc, #72]	; (8005d54 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005d0c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0e:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d12:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d16:	f7fd f929 	bl	8002f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005d1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d1e:	a907      	add	r1, sp, #28
 8005d20:	480d      	ldr	r0, [pc, #52]	; (8005d58 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005d22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d24:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d26:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d28:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005d2c:	f7fd f91e 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005d30:	4622      	mov	r2, r4
 8005d32:	2105      	movs	r1, #5
 8005d34:	203d      	movs	r0, #61	; 0x3d
 8005d36:	f7fb ffed 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005d3a:	203d      	movs	r0, #61	; 0x3d
 8005d3c:	f7fc f828 	bl	8001d90 <HAL_NVIC_EnableIRQ>
}
 8005d40:	b00d      	add	sp, #52	; 0x34
 8005d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d44:	40028000 	.word	0x40028000
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	58020800 	.word	0x58020800
 8005d50:	58020000 	.word	0x58020000
 8005d54:	58020400 	.word	0x58020400
 8005d58:	58021800 	.word	0x58021800

08005d5c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005d5c:	b530      	push	{r4, r5, lr}
 8005d5e:	4604      	mov	r4, r0
 8005d60:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005d62:	480d      	ldr	r0, [pc, #52]	; (8005d98 <HAL_ETH_RxAllocateCallback+0x3c>)
 8005d64:	f003 f98e 	bl	8009084 <memp_malloc_pool>
  if (p)
 8005d68:	4603      	mov	r3, r0
 8005d6a:	b178      	cbz	r0, 8005d8c <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005d6c:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8005d70:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005d72:	2100      	movs	r1, #0
 8005d74:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005d78:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8005d7a:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005d7c:	2241      	movs	r2, #65	; 0x41
 8005d7e:	9001      	str	r0, [sp, #4]
 8005d80:	4608      	mov	r0, r1
 8005d82:	9500      	str	r5, [sp, #0]
 8005d84:	f003 fce2 	bl	800974c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005d88:	b003      	add	sp, #12
 8005d8a:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8005d8c:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <HAL_ETH_RxAllocateCallback+0x44>)
 8005d8e:	2101      	movs	r1, #1
    *buff = NULL;
 8005d90:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8005d92:	7011      	strb	r1, [r2, #0]
}
 8005d94:	b003      	add	sp, #12
 8005d96:	bd30      	pop	{r4, r5, pc}
 8005d98:	080104f4 	.word	0x080104f4
 8005d9c:	0800596d 	.word	0x0800596d
 8005da0:	24000434 	.word	0x24000434

08005da4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005da4:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8005da6:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005da8:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8005dac:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8005db0:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8005db4:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8005db8:	6805      	ldr	r5, [r0, #0]
 8005dba:	b1f5      	cbz	r5, 8005dfa <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005dbc:	680d      	ldr	r5, [r1, #0]
 8005dbe:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8005dc0:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005dc2:	6801      	ldr	r1, [r0, #0]
 8005dc4:	b129      	cbz	r1, 8005dd2 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8005dc6:	8908      	ldrh	r0, [r1, #8]
 8005dc8:	4418      	add	r0, r3
 8005dca:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005dcc:	6809      	ldr	r1, [r1, #0]
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d1f9      	bne.n	8005dc6 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005dd2:	b183      	cbz	r3, 8005df6 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005dd4:	f002 011f 	and.w	r1, r2, #31
 8005dd8:	4419      	add	r1, r3
 8005dda:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005dde:	4808      	ldr	r0, [pc, #32]	; (8005e00 <HAL_ETH_RxLinkCallback+0x5c>)
 8005de0:	4411      	add	r1, r2
 8005de2:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005de6:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8005de8:	1a8b      	subs	r3, r1, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dcf9      	bgt.n	8005de2 <HAL_ETH_RxLinkCallback+0x3e>
 8005dee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005df2:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005df6:	bc30      	pop	{r4, r5}
 8005df8:	4770      	bx	lr
    *ppStart = p;
 8005dfa:	6004      	str	r4, [r0, #0]
 8005dfc:	e7e0      	b.n	8005dc0 <HAL_ETH_RxLinkCallback+0x1c>
 8005dfe:	bf00      	nop
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005e04:	f003 bd5e 	b.w	80098c4 <pbuf_free>

08005e08 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8005e08:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8005e0a:	4804      	ldr	r0, [pc, #16]	; (8005e1c <sys_lock_tcpip_core+0x14>)
 8005e0c:	f009 f978 	bl	800f100 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8005e10:	f000 f948 	bl	80060a4 <osThreadGetId>
 8005e14:	4b02      	ldr	r3, [pc, #8]	; (8005e20 <sys_lock_tcpip_core+0x18>)
 8005e16:	6018      	str	r0, [r3, #0]
}
 8005e18:	bd08      	pop	{r3, pc}
 8005e1a:	bf00      	nop
 8005e1c:	24009d18 	.word	0x24009d18
 8005e20:	24000528 	.word	0x24000528

08005e24 <ethernet_link_thread>:
{
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005e2a:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8005e2e:	2264      	movs	r2, #100	; 0x64
 8005e30:	2100      	movs	r1, #0
{
 8005e32:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8005e34:	a801      	add	r0, sp, #4
 8005e36:	f009 fc28 	bl	800f68a <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005e3a:	46cb      	mov	fp, r9
 8005e3c:	46ca      	mov	sl, r9
 8005e3e:	4d2b      	ldr	r5, [pc, #172]	; (8005eec <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005e40:	4f2b      	ldr	r7, [pc, #172]	; (8005ef0 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8005e42:	f7ff ffe1 	bl	8005e08 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005e46:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8005f00 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8005e4a:	4c2a      	ldr	r4, [pc, #168]	; (8005ef4 <ethernet_link_thread+0xd0>)
 8005e4c:	e018      	b.n	8005e80 <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005e4e:	2801      	cmp	r0, #1
 8005e50:	dc42      	bgt.n	8005ed8 <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7fc fc0e 	bl	8002674 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f003 fb09 	bl	8009470 <netif_set_down>
    netif_set_link_down(netif);
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f003 fb52 	bl	8009508 <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 8005e64:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8005e66:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8005e68:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8005e6a:	f009 f94f 	bl	800f10c <sys_mutex_unlock>
  osDelay(100);
 8005e6e:	2064      	movs	r0, #100	; 0x64
 8005e70:	f000 f91a 	bl	80060a8 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8005e74:	4620      	mov	r0, r4
 8005e76:	f009 f943 	bl	800f100 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8005e7a:	f000 f913 	bl	80060a4 <osThreadGetId>
 8005e7e:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7fb fe95 	bl	8001bb0 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005e86:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8005e8a:	0759      	lsls	r1, r3, #29
 8005e8c:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8005e90:	d4dd      	bmi.n	8005e4e <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005e92:	07d2      	lsls	r2, r2, #31
 8005e94:	d4e6      	bmi.n	8005e64 <ethernet_link_thread+0x40>
 8005e96:	2801      	cmp	r0, #1
 8005e98:	dde4      	ble.n	8005e64 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8005e9a:	3802      	subs	r0, #2
 8005e9c:	2803      	cmp	r0, #3
 8005e9e:	d820      	bhi.n	8005ee2 <ethernet_link_thread+0xbe>
 8005ea0:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <ethernet_link_thread+0xd4>)
 8005ea2:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <ethernet_link_thread+0xd8>)
 8005ea8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005eac:	a901      	add	r1, sp, #4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f7fc fe20 	bl	8002af4 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005eb4:	a901      	add	r1, sp, #4
 8005eb6:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8005eb8:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8005ebc:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005ec0:	f7fc fee2 	bl	8002c88 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	f7fc fb85 	bl	80025d4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f003 faac 	bl	8009428 <netif_set_up>
      netif_set_link_up(netif);
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f003 faf1 	bl	80094b8 <netif_set_link_up>
 8005ed6:	e7c5      	b.n	8005e64 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005ed8:	075b      	lsls	r3, r3, #29
 8005eda:	d4c3      	bmi.n	8005e64 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8005edc:	3802      	subs	r0, #2
 8005ede:	2803      	cmp	r0, #3
 8005ee0:	d9de      	bls.n	8005ea0 <ethernet_link_thread+0x7c>
    if(linkchanged)
 8005ee2:	f1ba 0f00 	cmp.w	sl, #0
 8005ee6:	d0bd      	beq.n	8005e64 <ethernet_link_thread+0x40>
 8005ee8:	e7e0      	b.n	8005eac <ethernet_link_thread+0x88>
 8005eea:	bf00      	nop
 8005eec:	24000528 	.word	0x24000528
 8005ef0:	24000414 	.word	0x24000414
 8005ef4:	24009d18 	.word	0x24009d18
 8005ef8:	080104d4 	.word	0x080104d4
 8005efc:	080104e4 	.word	0x080104e4
 8005f00:	24000478 	.word	0x24000478

08005f04 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8005f04:	4b02      	ldr	r3, [pc, #8]	; (8005f10 <sys_unlock_tcpip_core+0xc>)
 8005f06:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8005f08:	4802      	ldr	r0, [pc, #8]	; (8005f14 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8005f0a:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8005f0c:	f009 b8fe 	b.w	800f10c <sys_mutex_unlock>
 8005f10:	24000528 	.word	0x24000528
 8005f14:	24009d18 	.word	0x24009d18

08005f18 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <sys_check_core_locking+0x44>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
void sys_check_core_locking(void){
 8005f20:	b510      	push	{r4, lr}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005f22:	b993      	cbnz	r3, 8005f4a <sys_check_core_locking+0x32>

  if (lwip_tcpip_thread_id != 0) {
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <sys_check_core_locking+0x48>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	b173      	cbz	r3, 8005f48 <sys_check_core_locking+0x30>
	  osThreadId_t current_thread_id = osThreadGetId();
 8005f2a:	f000 f8bb 	bl	80060a4 <osThreadGetId>

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <sys_check_core_locking+0x4c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4283      	cmp	r3, r0
 8005f34:	d008      	beq.n	8005f48 <sys_check_core_locking+0x30>
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <sys_check_core_locking+0x50>)
 8005f38:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005f3c:	490b      	ldr	r1, [pc, #44]	; (8005f6c <sys_check_core_locking+0x54>)
 8005f3e:	480c      	ldr	r0, [pc, #48]	; (8005f70 <sys_check_core_locking+0x58>)
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8005f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8005f44:	f009 bb3c 	b.w	800f5c0 <iprintf>
}
 8005f48:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <sys_check_core_locking+0x50>)
 8005f4c:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8005f50:	4908      	ldr	r1, [pc, #32]	; (8005f74 <sys_check_core_locking+0x5c>)
 8005f52:	4807      	ldr	r0, [pc, #28]	; (8005f70 <sys_check_core_locking+0x58>)
 8005f54:	f009 fb34 	bl	800f5c0 <iprintf>
 8005f58:	e7e4      	b.n	8005f24 <sys_check_core_locking+0xc>
 8005f5a:	bf00      	nop
 8005f5c:	e000ed00 	.word	0xe000ed00
 8005f60:	2400052c 	.word	0x2400052c
 8005f64:	24000528 	.word	0x24000528
 8005f68:	08010414 	.word	0x08010414
 8005f6c:	08010498 	.word	0x08010498
 8005f70:	08010440 	.word	0x08010440
 8005f74:	08010470 	.word	0x08010470

08005f78 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8005f78:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8005f7a:	f000 f893 	bl	80060a4 <osThreadGetId>
 8005f7e:	4b01      	ldr	r3, [pc, #4]	; (8005f84 <sys_mark_tcpip_thread+0xc>)
 8005f80:	6018      	str	r0, [r3, #0]
}
 8005f82:	bd08      	pop	{r3, pc}
 8005f84:	2400052c 	.word	0x2400052c

08005f88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005f88:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8005f8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f8e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005f90:	f001 fe02 	bl	8007b98 <xTaskGetSchedulerState>
 8005f94:	2801      	cmp	r0, #1
 8005f96:	d100      	bne.n	8005f9a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8005f98:	bd08      	pop	{r3, pc}
 8005f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005f9e:	f002 b9e1 	b.w	8008364 <xPortSysTickHandler>
 8005fa2:	bf00      	nop

08005fa4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fa4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fa8:	b92b      	cbnz	r3, 8005fb6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <osKernelInitialize+0x20>)
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	b928      	cbnz	r0, 8005fbc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fb4:	4770      	bx	lr
    stat = osErrorISR;
 8005fb6:	f06f 0005 	mvn.w	r0, #5
 8005fba:	4770      	bx	lr
    } else {
      stat = osError;
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	24000ddc 	.word	0x24000ddc

08005fc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fce:	b974      	cbnz	r4, 8005fee <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <osKernelStart+0x2c>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	2a01      	cmp	r2, #1
 8005fd6:	d107      	bne.n	8005fe8 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd8:	4907      	ldr	r1, [pc, #28]	; (8005ff8 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fda:	2202      	movs	r2, #2
 8005fdc:	77cc      	strb	r4, [r1, #31]
 8005fde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fe0:	f001 fabe 	bl	8007560 <vTaskStartScheduler>
      stat = osOK;
 8005fe4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8005fe6:	bd10      	pop	{r4, pc}
      stat = osError;
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005fec:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8005fee:	f06f 0005 	mvn.w	r0, #5
}
 8005ff2:	bd10      	pop	{r4, pc}
 8005ff4:	24000ddc 	.word	0x24000ddc
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <osKernelGetTickCount>:
 8005ffc:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8006000:	b10b      	cbz	r3, 8006006 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8006002:	f001 bb0b 	b.w	800761c <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8006006:	f001 bb03 	b.w	8007610 <xTaskGetTickCount>
 800600a:	bf00      	nop

0800600c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800600c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800600e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006010:	b087      	sub	sp, #28
 8006012:	4614      	mov	r4, r2
  hTask = NULL;
 8006014:	9505      	str	r5, [sp, #20]
 8006016:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800601a:	bb62      	cbnz	r2, 8006076 <osThreadNew+0x6a>
 800601c:	4606      	mov	r6, r0
 800601e:	b350      	cbz	r0, 8006076 <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006020:	b1e4      	cbz	r4, 800605c <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006022:	69a7      	ldr	r7, [r4, #24]
 8006024:	bb57      	cbnz	r7, 800607c <osThreadNew+0x70>
 8006026:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006028:	6863      	ldr	r3, [r4, #4]
 800602a:	07db      	lsls	r3, r3, #31
 800602c:	d423      	bmi.n	8006076 <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800602e:	6963      	ldr	r3, [r4, #20]
 8006030:	b343      	cbz	r3, 8006084 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006032:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006036:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
 8006038:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800603a:	b340      	cbz	r0, 800608e <osThreadNew+0x82>
 800603c:	68e2      	ldr	r2, [r4, #12]
 800603e:	2aa7      	cmp	r2, #167	; 0xa7
 8006040:	d919      	bls.n	8006076 <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006042:	6924      	ldr	r4, [r4, #16]
 8006044:	b1bb      	cbz	r3, 8006076 <osThreadNew+0x6a>
 8006046:	b1b4      	cbz	r4, 8006076 <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006048:	460b      	mov	r3, r1
 800604a:	4662      	mov	r2, ip
 800604c:	4629      	mov	r1, r5
 800604e:	9700      	str	r7, [sp, #0]
 8006050:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8006054:	4630      	mov	r0, r6
 8006056:	f001 fa17 	bl	8007488 <xTaskCreateStatic>
 800605a:	e00d      	b.n	8006078 <osThreadNew+0x6c>
 800605c:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 8006060:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006062:	460b      	mov	r3, r1
 8006064:	4621      	mov	r1, r4
 8006066:	ac05      	add	r4, sp, #20
 8006068:	4630      	mov	r0, r6
 800606a:	9700      	str	r7, [sp, #0]
 800606c:	9401      	str	r4, [sp, #4]
 800606e:	f001 fa45 	bl	80074fc <xTaskCreate>
 8006072:	2801      	cmp	r0, #1
 8006074:	d009      	beq.n	800608a <osThreadNew+0x7e>
        return (NULL);
 8006076:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8006078:	b007      	add	sp, #28
 800607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800607c:	1e7a      	subs	r2, r7, #1
 800607e:	2a37      	cmp	r2, #55	; 0x37
 8006080:	d9d2      	bls.n	8006028 <osThreadNew+0x1c>
 8006082:	e7f8      	b.n	8006076 <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
 8006084:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8006088:	e7d5      	b.n	8006036 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
 800608a:	9805      	ldr	r0, [sp, #20]
 800608c:	e7f4      	b.n	8006078 <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f1      	bne.n	8006078 <osThreadNew+0x6c>
 8006094:	6923      	ldr	r3, [r4, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1ee      	bne.n	8006078 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800609a:	fa1f f28c 	uxth.w	r2, ip
 800609e:	462c      	mov	r4, r5
 80060a0:	e7df      	b.n	8006062 <osThreadNew+0x56>
 80060a2:	bf00      	nop

080060a4 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80060a4:	f001 bd72 	b.w	8007b8c <xTaskGetCurrentTaskHandle>

080060a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060a8:	b510      	push	{r4, lr}
 80060aa:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ae:	b92c      	cbnz	r4, 80060bc <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80060b0:	b900      	cbnz	r0, 80060b4 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80060b2:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 80060b4:	f001 fc08 	bl	80078c8 <vTaskDelay>
    stat = osOK;
 80060b8:	4620      	mov	r0, r4
}
 80060ba:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80060bc:	f06f 0005 	mvn.w	r0, #5
}
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop

080060c4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80060ca:	b9db      	cbnz	r3, 8006104 <osMutexNew+0x40>
    if (attr != NULL) {
 80060cc:	4604      	mov	r4, r0
 80060ce:	b1e0      	cbz	r0, 800610a <osMutexNew+0x46>
      type = attr->attr_bits;
 80060d0:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80060d2:	0733      	lsls	r3, r6, #28
 80060d4:	d416      	bmi.n	8006104 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80060d6:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80060d8:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80060dc:	68c3      	ldr	r3, [r0, #12]
 80060de:	b181      	cbz	r1, 8006102 <osMutexNew+0x3e>
 80060e0:	2b4f      	cmp	r3, #79	; 0x4f
 80060e2:	d90f      	bls.n	8006104 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80060e4:	b31e      	cbz	r6, 800612e <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80060e6:	2004      	movs	r0, #4
 80060e8:	f000 fc9a 	bl	8006a20 <xQueueCreateMutexStatic>
 80060ec:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80060ee:	b14d      	cbz	r5, 8006104 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80060f0:	6821      	ldr	r1, [r4, #0]
 80060f2:	4628      	mov	r0, r5
 80060f4:	f001 f812 	bl	800711c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80060f8:	b12e      	cbz	r6, 8006106 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80060fa:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80060fe:	4628      	mov	r0, r5
 8006100:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006102:	b163      	cbz	r3, 800611e <osMutexNew+0x5a>
  hMutex = NULL;
 8006104:	2500      	movs	r5, #0
}
 8006106:	4628      	mov	r0, r5
 8006108:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
 800610a:	2001      	movs	r0, #1
 800610c:	f000 fcde 	bl	8006acc <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006110:	4605      	mov	r5, r0
 8006112:	2800      	cmp	r0, #0
 8006114:	d0f6      	beq.n	8006104 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
 8006116:	4621      	mov	r1, r4
 8006118:	f001 f800 	bl	800711c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800611c:	e7f3      	b.n	8006106 <osMutexNew+0x42>
            if (rmtx != 0U) {
 800611e:	b15e      	cbz	r6, 8006138 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006120:	2004      	movs	r0, #4
 8006122:	f000 fcd3 	bl	8006acc <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006126:	4605      	mov	r5, r0
 8006128:	2800      	cmp	r0, #0
 800612a:	d1e1      	bne.n	80060f0 <osMutexNew+0x2c>
 800612c:	e7ea      	b.n	8006104 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800612e:	2001      	movs	r0, #1
 8006130:	f000 fc76 	bl	8006a20 <xQueueCreateMutexStatic>
 8006134:	4605      	mov	r5, r0
 8006136:	e7da      	b.n	80060ee <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 8006138:	2001      	movs	r0, #1
 800613a:	f000 fcc7 	bl	8006acc <xQueueCreateMutex>
      if (hMutex != NULL) {
 800613e:	4605      	mov	r5, r0
 8006140:	e7d5      	b.n	80060ee <osMutexNew+0x2a>
 8006142:	bf00      	nop

08006144 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006144:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006148:	f000 0301 	and.w	r3, r0, #1
 800614c:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006150:	b9a8      	cbnz	r0, 800617e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006152:	b1ba      	cbz	r2, 8006184 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006154:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006156:	b510      	push	{r4, lr}
 8006158:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 800615a:	b953      	cbnz	r3, 8006172 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800615c:	f000 fe58 	bl	8006e10 <xQueueSemaphoreTake>
 8006160:	2801      	cmp	r0, #1
 8006162:	d00a      	beq.n	800617a <osMutexAcquire+0x36>
          stat = osErrorResource;
 8006164:	2c00      	cmp	r4, #0
 8006166:	bf14      	ite	ne
 8006168:	f06f 0001 	mvnne.w	r0, #1
 800616c:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006170:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006172:	f000 ff29 	bl	8006fc8 <xQueueTakeMutexRecursive>
 8006176:	2801      	cmp	r0, #1
 8006178:	d1f4      	bne.n	8006164 <osMutexAcquire+0x20>
  stat = osOK;
 800617a:	2000      	movs	r0, #0
}
 800617c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800617e:	f06f 0005 	mvn.w	r0, #5
 8006182:	4770      	bx	lr
    stat = osErrorParameter;
 8006184:	f06f 0003 	mvn.w	r0, #3
}
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop

0800618c <osMutexRelease>:
 800618c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006190:	b9ba      	cbnz	r2, 80061c2 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006192:	b510      	push	{r4, lr}
 8006194:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006198:	b1b4      	cbz	r4, 80061c8 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800619a:	f000 0301 	and.w	r3, r0, #1
 800619e:	b943      	cbnz	r3, 80061b2 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061a0:	461a      	mov	r2, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 fb77 	bl	8006898 <xQueueGenericSend>
 80061aa:	2801      	cmp	r0, #1
 80061ac:	d106      	bne.n	80061bc <osMutexRelease+0x30>
  stat = osOK;
 80061ae:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80061b0:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 fc6a 	bl	8006a8c <xQueueGiveMutexRecursive>
 80061b8:	2801      	cmp	r0, #1
 80061ba:	d0f8      	beq.n	80061ae <osMutexRelease+0x22>
        stat = osErrorResource;
 80061bc:	f06f 0002 	mvn.w	r0, #2
}
 80061c0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80061c2:	f06f 0005 	mvn.w	r0, #5
}
 80061c6:	4770      	bx	lr
    stat = osErrorParameter;
 80061c8:	f06f 0003 	mvn.w	r0, #3
}
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	bf00      	nop

080061d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80061d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d2:	b083      	sub	sp, #12
 80061d4:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80061d8:	b98e      	cbnz	r6, 80061fe <osSemaphoreNew+0x2e>
 80061da:	4605      	mov	r5, r0
 80061dc:	b178      	cbz	r0, 80061fe <osSemaphoreNew+0x2e>
 80061de:	4288      	cmp	r0, r1
 80061e0:	460f      	mov	r7, r1
 80061e2:	d30c      	bcc.n	80061fe <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 80061e4:	4614      	mov	r4, r2
 80061e6:	b182      	cbz	r2, 800620a <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061e8:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80061ec:	b15a      	cbz	r2, 8006206 <osSemaphoreNew+0x36>
 80061ee:	2b4f      	cmp	r3, #79	; 0x4f
 80061f0:	d905      	bls.n	80061fe <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80061f2:	2801      	cmp	r0, #1
 80061f4:	d032      	beq.n	800625c <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80061f6:	f000 fb0d 	bl	8006814 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80061fa:	4605      	mov	r5, r0
 80061fc:	b978      	cbnz	r0, 800621e <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 80061fe:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006200:	4628      	mov	r0, r5
 8006202:	b003      	add	sp, #12
 8006204:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f9      	bne.n	80061fe <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 800620a:	2d01      	cmp	r5, #1
 800620c:	d00f      	beq.n	800622e <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800620e:	4628      	mov	r0, r5
 8006210:	4639      	mov	r1, r7
 8006212:	f000 fb23 	bl	800685c <xQueueCreateCountingSemaphore>
 8006216:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8006218:	2d00      	cmp	r5, #0
 800621a:	d0f0      	beq.n	80061fe <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 800621c:	b104      	cbz	r4, 8006220 <osSemaphoreNew+0x50>
          name = attr->name;
 800621e:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8006220:	4628      	mov	r0, r5
 8006222:	4621      	mov	r1, r4
 8006224:	f000 ff7a 	bl	800711c <vQueueAddToRegistry>
}
 8006228:	4628      	mov	r0, r5
 800622a:	b003      	add	sp, #12
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 800622e:	4628      	mov	r0, r5
 8006230:	2203      	movs	r2, #3
 8006232:	2100      	movs	r1, #0
 8006234:	f000 fac6 	bl	80067c4 <xQueueGenericCreate>
 8006238:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800623a:	2d00      	cmp	r5, #0
 800623c:	d0df      	beq.n	80061fe <osSemaphoreNew+0x2e>
 800623e:	2f00      	cmp	r7, #0
 8006240:	d0ea      	beq.n	8006218 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006242:	2300      	movs	r3, #0
 8006244:	4628      	mov	r0, r5
 8006246:	461a      	mov	r2, r3
 8006248:	4619      	mov	r1, r3
 800624a:	f000 fb25 	bl	8006898 <xQueueGenericSend>
 800624e:	2801      	cmp	r0, #1
 8006250:	d0e4      	beq.n	800621c <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 8006252:	4628      	mov	r0, r5
            hSemaphore = NULL;
 8006254:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 8006256:	f000 ff37 	bl	80070c8 <vQueueDelete>
      if (hSemaphore != NULL) {
 800625a:	e7d1      	b.n	8006200 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800625c:	4613      	mov	r3, r2
 800625e:	2203      	movs	r2, #3
 8006260:	4631      	mov	r1, r6
 8006262:	9200      	str	r2, [sp, #0]
 8006264:	4632      	mov	r2, r6
 8006266:	f000 fa5b 	bl	8006720 <xQueueGenericCreateStatic>
 800626a:	4605      	mov	r5, r0
 800626c:	e7e5      	b.n	800623a <osSemaphoreNew+0x6a>
 800626e:	bf00      	nop

08006270 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006270:	b370      	cbz	r0, 80062d0 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006272:	b510      	push	{r4, lr}
 8006274:	460c      	mov	r4, r1
 8006276:	b082      	sub	sp, #8
 8006278:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800627c:	b1c3      	cbz	r3, 80062b0 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800627e:	bb21      	cbnz	r1, 80062ca <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006280:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006282:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006284:	f000 fec0 	bl	8007008 <xQueueReceiveFromISR>
 8006288:	2801      	cmp	r0, #1
 800628a:	d11a      	bne.n	80062c2 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800628c:	9b01      	ldr	r3, [sp, #4]
 800628e:	b913      	cbnz	r3, 8006296 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8006290:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006292:	b002      	add	sp, #8
 8006294:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800629a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80062aa:	4620      	mov	r0, r4
}
 80062ac:	b002      	add	sp, #8
 80062ae:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80062b0:	f000 fdae 	bl	8006e10 <xQueueSemaphoreTake>
 80062b4:	2801      	cmp	r0, #1
 80062b6:	d0eb      	beq.n	8006290 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 80062b8:	b11c      	cbz	r4, 80062c2 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 80062ba:	f06f 0001 	mvn.w	r0, #1
}
 80062be:	b002      	add	sp, #8
 80062c0:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 80062c2:	f06f 0002 	mvn.w	r0, #2
}
 80062c6:	b002      	add	sp, #8
 80062c8:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80062ca:	f06f 0003 	mvn.w	r0, #3
 80062ce:	e7e0      	b.n	8006292 <osSemaphoreAcquire+0x22>
 80062d0:	f06f 0003 	mvn.w	r0, #3
}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop

080062d8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80062d8:	b330      	cbz	r0, 8006328 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80062da:	b510      	push	{r4, lr}
 80062dc:	b082      	sub	sp, #8
 80062de:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80062e2:	b1ab      	cbz	r3, 8006310 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 80062e4:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80062e6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80062e8:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80062ea:	f000 fc77 	bl	8006bdc <xQueueGiveFromISR>
 80062ee:	2801      	cmp	r0, #1
 80062f0:	d117      	bne.n	8006322 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80062f2:	9b01      	ldr	r3, [sp, #4]
 80062f4:	b193      	cbz	r3, 800631c <osSemaphoreRelease+0x44>
 80062f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800630a:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800630c:	b002      	add	sp, #8
 800630e:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006310:	461a      	mov	r2, r3
 8006312:	4619      	mov	r1, r3
 8006314:	f000 fac0 	bl	8006898 <xQueueGenericSend>
 8006318:	2801      	cmp	r0, #1
 800631a:	d102      	bne.n	8006322 <osSemaphoreRelease+0x4a>
  stat = osOK;
 800631c:	2000      	movs	r0, #0
}
 800631e:	b002      	add	sp, #8
 8006320:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 8006322:	f06f 0002 	mvn.w	r0, #2
 8006326:	e7fa      	b.n	800631e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8006328:	f06f 0003 	mvn.w	r0, #3
}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop

08006330 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	b083      	sub	sp, #12
 8006334:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006338:	b987      	cbnz	r7, 800635c <osMessageQueueNew+0x2c>
 800633a:	4605      	mov	r5, r0
 800633c:	b170      	cbz	r0, 800635c <osMessageQueueNew+0x2c>
 800633e:	b169      	cbz	r1, 800635c <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8006340:	4614      	mov	r4, r2
 8006342:	b17a      	cbz	r2, 8006364 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006344:	6893      	ldr	r3, [r2, #8]
 8006346:	b1cb      	cbz	r3, 800637c <osMessageQueueNew+0x4c>
 8006348:	68d2      	ldr	r2, [r2, #12]
 800634a:	2a4f      	cmp	r2, #79	; 0x4f
 800634c:	d906      	bls.n	800635c <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800634e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006350:	b122      	cbz	r2, 800635c <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006352:	fb01 f505 	mul.w	r5, r1, r5
 8006356:	6966      	ldr	r6, [r4, #20]
 8006358:	42ae      	cmp	r6, r5
 800635a:	d21f      	bcs.n	800639c <osMessageQueueNew+0x6c>
  hQueue = NULL;
 800635c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800635e:	4628      	mov	r0, r5
 8006360:	b003      	add	sp, #12
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8006364:	f000 fa2e 	bl	80067c4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006368:	4605      	mov	r5, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d0f6      	beq.n	800635c <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 800636e:	4628      	mov	r0, r5
 8006370:	4621      	mov	r1, r4
 8006372:	f000 fed3 	bl	800711c <vQueueAddToRegistry>
}
 8006376:	4628      	mov	r0, r5
 8006378:	b003      	add	sp, #12
 800637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800637c:	68d3      	ldr	r3, [r2, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1ec      	bne.n	800635c <osMessageQueueNew+0x2c>
 8006382:	6913      	ldr	r3, [r2, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e9      	bne.n	800635c <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006388:	6952      	ldr	r2, [r2, #20]
 800638a:	2a00      	cmp	r2, #0
 800638c:	d1e6      	bne.n	800635c <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 800638e:	f000 fa19 	bl	80067c4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006392:	4605      	mov	r5, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d0e1      	beq.n	800635c <osMessageQueueNew+0x2c>
        name = attr->name;
 8006398:	6824      	ldr	r4, [r4, #0]
 800639a:	e7e8      	b.n	800636e <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800639c:	9700      	str	r7, [sp, #0]
 800639e:	f000 f9bf 	bl	8006720 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80063a2:	4605      	mov	r5, r0
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d1f7      	bne.n	8006398 <osMessageQueueNew+0x68>
 80063a8:	e7d8      	b.n	800635c <osMessageQueueNew+0x2c>
 80063aa:	bf00      	nop

080063ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80063ac:	b530      	push	{r4, r5, lr}
 80063ae:	461c      	mov	r4, r3
 80063b0:	b083      	sub	sp, #12
 80063b2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80063b6:	b30b      	cbz	r3, 80063fc <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063b8:	3c00      	subs	r4, #0
 80063ba:	bf18      	it	ne
 80063bc:	2401      	movne	r4, #1
 80063be:	2900      	cmp	r1, #0
 80063c0:	bf08      	it	eq
 80063c2:	f044 0401 	orreq.w	r4, r4, #1
 80063c6:	bb7c      	cbnz	r4, 8006428 <osMessageQueuePut+0x7c>
 80063c8:	fab0 f480 	clz	r4, r0
 80063cc:	0964      	lsrs	r4, r4, #5
 80063ce:	b358      	cbz	r0, 8006428 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80063d0:	4623      	mov	r3, r4
 80063d2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80063d4:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80063d6:	f000 fb97 	bl	8006b08 <xQueueGenericSendFromISR>
 80063da:	2801      	cmp	r0, #1
 80063dc:	d120      	bne.n	8006420 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	b1db      	cbz	r3, 800641a <osMessageQueuePut+0x6e>
 80063e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80063f6:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 80063f8:	b003      	add	sp, #12
 80063fa:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80063fc:	b1a0      	cbz	r0, 8006428 <osMessageQueuePut+0x7c>
 80063fe:	fab1 f381 	clz	r3, r1
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	b181      	cbz	r1, 8006428 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006406:	4622      	mov	r2, r4
 8006408:	f000 fa46 	bl	8006898 <xQueueGenericSend>
 800640c:	2801      	cmp	r0, #1
 800640e:	d004      	beq.n	800641a <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 8006410:	b134      	cbz	r4, 8006420 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 8006412:	f06f 0001 	mvn.w	r0, #1
}
 8006416:	b003      	add	sp, #12
 8006418:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 800641a:	2000      	movs	r0, #0
}
 800641c:	b003      	add	sp, #12
 800641e:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8006420:	f06f 0002 	mvn.w	r0, #2
}
 8006424:	b003      	add	sp, #12
 8006426:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 8006428:	f06f 0003 	mvn.w	r0, #3
 800642c:	e7e4      	b.n	80063f8 <osMessageQueuePut+0x4c>
 800642e:	bf00      	nop

08006430 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006430:	b530      	push	{r4, r5, lr}
 8006432:	461c      	mov	r4, r3
 8006434:	b083      	sub	sp, #12
 8006436:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800643a:	b303      	cbz	r3, 800647e <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800643c:	3c00      	subs	r4, #0
 800643e:	bf18      	it	ne
 8006440:	2401      	movne	r4, #1
 8006442:	2900      	cmp	r1, #0
 8006444:	bf08      	it	eq
 8006446:	f044 0401 	orreq.w	r4, r4, #1
 800644a:	bb5c      	cbnz	r4, 80064a4 <osMessageQueueGet+0x74>
 800644c:	fab0 f480 	clz	r4, r0
 8006450:	0964      	lsrs	r4, r4, #5
 8006452:	b338      	cbz	r0, 80064a4 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006454:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006456:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006458:	f000 fdd6 	bl	8007008 <xQueueReceiveFromISR>
 800645c:	2801      	cmp	r0, #1
 800645e:	d11d      	bne.n	800649c <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	b1c3      	cbz	r3, 8006496 <osMessageQueueGet+0x66>
 8006464:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006478:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 800647a:	b003      	add	sp, #12
 800647c:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800647e:	b188      	cbz	r0, 80064a4 <osMessageQueueGet+0x74>
 8006480:	b181      	cbz	r1, 80064a4 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006482:	4622      	mov	r2, r4
 8006484:	f000 fc02 	bl	8006c8c <xQueueReceive>
 8006488:	2801      	cmp	r0, #1
 800648a:	d004      	beq.n	8006496 <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 800648c:	b134      	cbz	r4, 800649c <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 800648e:	f06f 0001 	mvn.w	r0, #1
}
 8006492:	b003      	add	sp, #12
 8006494:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 8006496:	2000      	movs	r0, #0
}
 8006498:	b003      	add	sp, #12
 800649a:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 800649c:	f06f 0002 	mvn.w	r0, #2
}
 80064a0:	b003      	add	sp, #12
 80064a2:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 80064a4:	f06f 0003 	mvn.w	r0, #3
 80064a8:	e7e7      	b.n	800647a <osMessageQueueGet+0x4a>
 80064aa:	bf00      	nop

080064ac <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064ae:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064b0:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064b2:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064b6:	4c04      	ldr	r4, [pc, #16]	; (80064c8 <vApplicationGetIdleTaskMemory+0x1c>)
 80064b8:	600c      	str	r4, [r1, #0]
}
 80064ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	24000d34 	.word	0x24000d34
 80064c8:	24000534 	.word	0x24000534

080064cc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064ce:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064d0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064d6:	4c04      	ldr	r4, [pc, #16]	; (80064e8 <vApplicationGetTimerTaskMemory+0x1c>)
 80064d8:	600c      	str	r4, [r1, #0]
}
 80064da:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064de:	6013      	str	r3, [r2, #0]
}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	24001de0 	.word	0x24001de0
 80064e8:	24000de0 	.word	0x24000de0

080064ec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ec:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064f0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064f4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064f6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064f8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064fa:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064fc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800650c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800650e:	6802      	ldr	r2, [r0, #0]
{
 8006510:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006512:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8006514:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8006516:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006518:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800651a:	689c      	ldr	r4, [r3, #8]
 800651c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800651e:	6099      	str	r1, [r3, #8]
}
 8006520:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8006524:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006526:	6002      	str	r2, [r0, #0]
}
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop

0800652c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800652c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800652e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006530:	1c6b      	adds	r3, r5, #1
 8006532:	d010      	beq.n	8006556 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006534:	f100 0308 	add.w	r3, r0, #8
 8006538:	461c      	mov	r4, r3
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	42aa      	cmp	r2, r5
 8006540:	d9fa      	bls.n	8006538 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006542:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006544:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006546:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006548:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800654a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800654c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800654e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006550:	6002      	str	r2, [r0, #0]
}
 8006552:	bc30      	pop	{r4, r5}
 8006554:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006556:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	e7f2      	b.n	8006542 <vListInsert+0x16>

0800655c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800655c:	6903      	ldr	r3, [r0, #16]
{
 800655e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006560:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006562:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8006566:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8006568:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800656c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800656e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8006570:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006574:	bf08      	it	eq
 8006576:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8006578:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800657a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800657c:	3a01      	subs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8006580:	6818      	ldr	r0, [r3, #0]
}
 8006582:	4770      	bx	lr

08006584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006588:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800658a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800658c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800658e:	b92a      	cbnz	r2, 800659c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006590:	6805      	ldr	r5, [r0, #0]
 8006592:	b365      	cbz	r5, 80065ee <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006594:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8006596:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006598:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800659a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800659c:	b97d      	cbnz	r5, 80065be <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800659e:	6840      	ldr	r0, [r0, #4]
 80065a0:	f009 f94f 	bl	800f842 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80065a8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065aa:	68a2      	ldr	r2, [r4, #8]
 80065ac:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065ae:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065b0:	d319      	bcc.n	80065e6 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065b2:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065b4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80065b6:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065b8:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065ba:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065be:	68c0      	ldr	r0, [r0, #12]
 80065c0:	f009 f93f 	bl	800f842 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	4251      	negs	r1, r2
 80065ca:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065d0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d2:	d202      	bcs.n	80065da <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	440b      	add	r3, r1
 80065d8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80065da:	2d02      	cmp	r5, #2
 80065dc:	d00d      	beq.n	80065fa <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065de:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80065e0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065e2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065e6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80065e8:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065ea:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065ee:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065f0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065f2:	f001 fb27 	bl	8007c44 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065f6:	60a5      	str	r5, [r4, #8]
 80065f8:	e7ce      	b.n	8006598 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065fa:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80065fc:	f04f 0000 	mov.w	r0, #0
 8006600:	bf38      	it	cc
 8006602:	2601      	movcc	r6, #1
 8006604:	e7c8      	b.n	8006598 <prvCopyDataToQueue+0x14>
 8006606:	bf00      	nop

08006608 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800660c:	f001 fe42 	bl	8008294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006610:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8006614:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006616:	2c00      	cmp	r4, #0
 8006618:	dd14      	ble.n	8006644 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800661a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800661e:	e003      	b.n	8006628 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006620:	1e63      	subs	r3, r4, #1
 8006622:	b2da      	uxtb	r2, r3
 8006624:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006626:	b16a      	cbz	r2, 8006644 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006628:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800662a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800662c:	b153      	cbz	r3, 8006644 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800662e:	f001 fa09 	bl	8007a44 <xTaskRemoveFromEventList>
 8006632:	2800      	cmp	r0, #0
 8006634:	d0f4      	beq.n	8006620 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8006636:	f001 faa3 	bl	8007b80 <vTaskMissedYield>
			--cTxLock;
 800663a:	1e63      	subs	r3, r4, #1
 800663c:	b2da      	uxtb	r2, r3
 800663e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006640:	2a00      	cmp	r2, #0
 8006642:	d1f1      	bne.n	8006628 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006644:	23ff      	movs	r3, #255	; 0xff
 8006646:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800664a:	f001 fe45 	bl	80082d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800664e:	f001 fe21 	bl	8008294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006652:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8006656:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006658:	2c00      	cmp	r4, #0
 800665a:	dd14      	ble.n	8006686 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800665c:	f105 0610 	add.w	r6, r5, #16
 8006660:	e003      	b.n	800666a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006662:	1e63      	subs	r3, r4, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006668:	b16a      	cbz	r2, 8006686 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800666c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666e:	b153      	cbz	r3, 8006686 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006670:	f001 f9e8 	bl	8007a44 <xTaskRemoveFromEventList>
 8006674:	2800      	cmp	r0, #0
 8006676:	d0f4      	beq.n	8006662 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8006678:	f001 fa82 	bl	8007b80 <vTaskMissedYield>
				--cRxLock;
 800667c:	1e63      	subs	r3, r4, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006682:	2a00      	cmp	r2, #0
 8006684:	d1f1      	bne.n	800666a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006686:	23ff      	movs	r3, #255	; 0xff
 8006688:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800668c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006690:	f001 be22 	b.w	80082d8 <vPortExitCritical>

08006694 <xQueueGenericReset>:
{
 8006694:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006696:	b1e0      	cbz	r0, 80066d2 <xQueueGenericReset+0x3e>
 8006698:	4604      	mov	r4, r0
 800669a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800669c:	f001 fdfa 	bl	8008294 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066a6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ac:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ae:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b0:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b2:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066b4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80066b6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b8:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066ba:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80066bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80066c4:	b975      	cbnz	r5, 80066e4 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	b9c3      	cbnz	r3, 80066fc <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 80066ca:	f001 fe05 	bl	80082d8 <vPortExitCritical>
}
 80066ce:	2001      	movs	r0, #1
 80066d0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80066e2:	e7fe      	b.n	80066e2 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066e4:	f104 0010 	add.w	r0, r4, #16
 80066e8:	f7ff ff00 	bl	80064ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066f0:	f7ff fefc 	bl	80064ec <vListInitialise>
	taskEXIT_CRITICAL();
 80066f4:	f001 fdf0 	bl	80082d8 <vPortExitCritical>
}
 80066f8:	2001      	movs	r0, #1
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fc:	f104 0010 	add.w	r0, r4, #16
 8006700:	f001 f9a0 	bl	8007a44 <xTaskRemoveFromEventList>
 8006704:	2800      	cmp	r0, #0
 8006706:	d0e0      	beq.n	80066ca <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006708:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800670c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006710:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	e7d5      	b.n	80066ca <xQueueGenericReset+0x36>
 800671e:	bf00      	nop

08006720 <xQueueGenericCreateStatic>:
	{
 8006720:	b530      	push	{r4, r5, lr}
 8006722:	b085      	sub	sp, #20
 8006724:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006728:	b940      	cbnz	r0, 800673c <xQueueGenericCreateStatic+0x1c>
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	e7fe      	b.n	800673a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800673c:	b153      	cbz	r3, 8006754 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800673e:	b30a      	cbz	r2, 8006784 <xQueueGenericCreateStatic+0x64>
 8006740:	b989      	cbnz	r1, 8006766 <xQueueGenericCreateStatic+0x46>
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	e7fe      	b.n	8006752 <xQueueGenericCreateStatic+0x32>
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006764:	e7fe      	b.n	8006764 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006766:	b16a      	cbz	r2, 8006784 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006768:	2550      	movs	r5, #80	; 0x50
 800676a:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800676c:	9d03      	ldr	r5, [sp, #12]
 800676e:	2d50      	cmp	r5, #80	; 0x50
 8006770:	d013      	beq.n	800679a <xQueueGenericCreateStatic+0x7a>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	e7fe      	b.n	8006782 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006784:	2900      	cmp	r1, #0
 8006786:	d0ef      	beq.n	8006768 <xQueueGenericCreateStatic+0x48>
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	e7fe      	b.n	8006798 <xQueueGenericCreateStatic+0x78>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800679a:	2900      	cmp	r1, #0
 800679c:	bf08      	it	eq
 800679e:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 80067a0:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067a2:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80067a4:	63d8      	str	r0, [r3, #60]	; 0x3c
 80067a6:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067a8:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067aa:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80067ae:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067b0:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067b2:	f7ff ff6f 	bl	8006694 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80067b6:	9b01      	ldr	r3, [sp, #4]
	}
 80067b8:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 80067ba:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 80067be:	b005      	add	sp, #20
 80067c0:	bd30      	pop	{r4, r5, pc}
 80067c2:	bf00      	nop

080067c4 <xQueueGenericCreate>:
	{
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067c6:	b940      	cbnz	r0, 80067da <xQueueGenericCreate+0x16>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericCreate+0x14>
 80067da:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067dc:	fb01 f000 	mul.w	r0, r1, r0
 80067e0:	460d      	mov	r5, r1
 80067e2:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067e4:	3050      	adds	r0, #80	; 0x50
 80067e6:	f001 fed1 	bl	800858c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80067ea:	4607      	mov	r7, r0
 80067ec:	b170      	cbz	r0, 800680c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80067f4:	b165      	cbz	r5, 8006810 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067f6:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067fa:	2101      	movs	r1, #1
 80067fc:	4638      	mov	r0, r7
 80067fe:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8006800:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006804:	f7ff ff46 	bl	8006694 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006808:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 800680c:	4638      	mov	r0, r7
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	4603      	mov	r3, r0
 8006812:	e7f2      	b.n	80067fa <xQueueGenericCreate+0x36>

08006814 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8006814:	b940      	cbnz	r0, 8006828 <xQueueCreateCountingSemaphoreStatic+0x14>
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	e7fe      	b.n	8006826 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006828:	4288      	cmp	r0, r1
	{
 800682a:	b510      	push	{r4, lr}
 800682c:	460c      	mov	r4, r1
 800682e:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8006830:	d208      	bcs.n	8006844 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	e7fe      	b.n	8006842 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006844:	2102      	movs	r1, #2
 8006846:	4613      	mov	r3, r2
 8006848:	2200      	movs	r2, #0
 800684a:	9100      	str	r1, [sp, #0]
 800684c:	4611      	mov	r1, r2
 800684e:	f7ff ff67 	bl	8006720 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006852:	b100      	cbz	r0, 8006856 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006854:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8006856:	b002      	add	sp, #8
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop

0800685c <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800685c:	b940      	cbnz	r0, 8006870 <xQueueCreateCountingSemaphore+0x14>
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	e7fe      	b.n	800686e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006870:	4288      	cmp	r0, r1
	{
 8006872:	b510      	push	{r4, lr}
 8006874:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8006876:	d208      	bcs.n	800688a <xQueueCreateCountingSemaphore+0x2e>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	e7fe      	b.n	8006888 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800688a:	2202      	movs	r2, #2
 800688c:	2100      	movs	r1, #0
 800688e:	f7ff ff99 	bl	80067c4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006892:	b100      	cbz	r0, 8006896 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006894:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8006896:	bd10      	pop	{r4, pc}

08006898 <xQueueGenericSend>:
{
 8006898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800689c:	b085      	sub	sp, #20
 800689e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d07e      	beq.n	80069a2 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a4:	460f      	mov	r7, r1
 80068a6:	4604      	mov	r4, r0
 80068a8:	461e      	mov	r6, r3
 80068aa:	2900      	cmp	r1, #0
 80068ac:	d069      	beq.n	8006982 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068ae:	2e02      	cmp	r6, #2
 80068b0:	d10b      	bne.n	80068ca <xQueueGenericSend+0x32>
 80068b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d008      	beq.n	80068ca <xQueueGenericSend+0x32>
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ca:	f001 f965 	bl	8007b98 <xTaskGetSchedulerState>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d070      	beq.n	80069b4 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068d2:	f1a6 0802 	sub.w	r8, r6, #2
 80068d6:	2500      	movs	r5, #0
 80068d8:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80068dc:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068de:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80068e2:	e007      	b.n	80068f4 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80068e4:	f001 fcf8 	bl	80082d8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff fe8d 	bl	8006608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068ee:	f000 ffdb 	bl	80078a8 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068f2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80068f4:	f001 fcce 	bl	8008294 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80068fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80068fc:	4290      	cmp	r0, r2
 80068fe:	d365      	bcc.n	80069cc <xQueueGenericSend+0x134>
 8006900:	f1b8 0f00 	cmp.w	r8, #0
 8006904:	d162      	bne.n	80069cc <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d077      	beq.n	80069fc <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 800690c:	2d00      	cmp	r5, #0
 800690e:	d044      	beq.n	800699a <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8006910:	f001 fce2 	bl	80082d8 <vPortExitCritical>
		vTaskSuspendAll();
 8006914:	f000 fe74 	bl	8007600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006918:	f001 fcbc 	bl	8008294 <vPortEnterCritical>
 800691c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006920:	2bff      	cmp	r3, #255	; 0xff
 8006922:	d101      	bne.n	8006928 <xQueueGenericSend+0x90>
 8006924:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006928:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800692c:	2bff      	cmp	r3, #255	; 0xff
 800692e:	d101      	bne.n	8006934 <xQueueGenericSend+0x9c>
 8006930:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8006934:	f001 fcd0 	bl	80082d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006938:	a901      	add	r1, sp, #4
 800693a:	a802      	add	r0, sp, #8
 800693c:	f001 f8d8 	bl	8007af0 <xTaskCheckForTimeOut>
 8006940:	2800      	cmp	r0, #0
 8006942:	d15f      	bne.n	8006a04 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8006944:	f001 fca6 	bl	8008294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006948:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800694a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800694c:	429a      	cmp	r2, r3
 800694e:	d1c9      	bne.n	80068e4 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8006950:	f001 fcc2 	bl	80082d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006954:	9901      	ldr	r1, [sp, #4]
 8006956:	f104 0010 	add.w	r0, r4, #16
 800695a:	f001 f83b 	bl	80079d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800695e:	4620      	mov	r0, r4
 8006960:	f7ff fe52 	bl	8006608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006964:	f000 ffa0 	bl	80078a8 <xTaskResumeAll>
 8006968:	2800      	cmp	r0, #0
 800696a:	d1c2      	bne.n	80068f2 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 800696c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006974:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	e7b7      	b.n	80068f2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006982:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d092      	beq.n	80068ae <xQueueGenericSend+0x16>
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	e7fe      	b.n	8006998 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800699a:	a802      	add	r0, sp, #8
 800699c:	f001 f89c 	bl	8007ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069a0:	e7b6      	b.n	8006910 <xQueueGenericSend+0x78>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80069b2:	e7fe      	b.n	80069b2 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b4:	9b01      	ldr	r3, [sp, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d08b      	beq.n	80068d2 <xQueueGenericSend+0x3a>
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	e7fe      	b.n	80069ca <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069cc:	4632      	mov	r2, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7ff fdd7 	bl	8006584 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069d8:	b9db      	cbnz	r3, 8006a12 <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 80069da:	b148      	cbz	r0, 80069f0 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 80069dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80069f0:	f001 fc72 	bl	80082d8 <vPortExitCritical>
				return pdPASS;
 80069f4:	2001      	movs	r0, #1
}
 80069f6:	b005      	add	sp, #20
 80069f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80069fc:	f001 fc6c 	bl	80082d8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006a00:	4640      	mov	r0, r8
 8006a02:	e7f8      	b.n	80069f6 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8006a04:	4620      	mov	r0, r4
 8006a06:	f7ff fdff 	bl	8006608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a0a:	f000 ff4d 	bl	80078a8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006a0e:	2000      	movs	r0, #0
 8006a10:	e7f1      	b.n	80069f6 <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006a16:	f001 f815 	bl	8007a44 <xTaskRemoveFromEventList>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0e8      	beq.n	80069f0 <xQueueGenericSend+0x158>
 8006a1e:	e7dd      	b.n	80069dc <xQueueGenericSend+0x144>

08006a20 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8006a20:	b179      	cbz	r1, 8006a42 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a22:	2350      	movs	r3, #80	; 0x50
	{
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a28:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	2b50      	cmp	r3, #80	; 0x50
 8006a2e:	d011      	beq.n	8006a54 <xQueueCreateMutexStatic+0x34>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	e7fe      	b.n	8006a40 <xQueueCreateMutexStatic+0x20>
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006a52:	e7fe      	b.n	8006a52 <xQueueCreateMutexStatic+0x32>
 8006a54:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 8006a56:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a5c:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a5e:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a60:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a64:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 8006a66:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a6a:	f7ff fe13 	bl	8006694 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a6e:	4633      	mov	r3, r6
 8006a70:	4632      	mov	r2, r6
 8006a72:	4631      	mov	r1, r6
 8006a74:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006a76:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a7a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a7c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a7e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a80:	f7ff ff0a 	bl	8006898 <xQueueGenericSend>
	}
 8006a84:	4620      	mov	r0, r4
 8006a86:	b002      	add	sp, #8
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	bf00      	nop

08006a8c <xQueueGiveMutexRecursive>:
	{
 8006a8c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006a8e:	b138      	cbz	r0, 8006aa0 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a90:	6885      	ldr	r5, [r0, #8]
 8006a92:	4604      	mov	r4, r0
 8006a94:	f001 f87a 	bl	8007b8c <xTaskGetCurrentTaskHandle>
 8006a98:	4285      	cmp	r5, r0
 8006a9a:	d00a      	beq.n	8006ab2 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8006a9c:	2000      	movs	r0, #0
	}
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006ab8:	b10b      	cbz	r3, 8006abe <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8006aba:	2001      	movs	r0, #1
	}
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff fee8 	bl	8006898 <xQueueGenericSend>
			xReturn = pdPASS;
 8006ac8:	2001      	movs	r0, #1
	}
 8006aca:	bd38      	pop	{r3, r4, r5, pc}

08006acc <xQueueCreateMutex>:
	{
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ad0:	2050      	movs	r0, #80	; 0x50
 8006ad2:	f001 fd5b 	bl	800858c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	b198      	cbz	r0, 8006b02 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ada:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8006adc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ade:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ae0:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8006ae4:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ae8:	f7ff fdd4 	bl	8006694 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006aec:	4633      	mov	r3, r6
 8006aee:	4632      	mov	r2, r6
 8006af0:	4631      	mov	r1, r6
 8006af2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006af4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006af8:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006afa:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006afc:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006afe:	f7ff fecb 	bl	8006898 <xQueueGenericSend>
	}
 8006b02:	4620      	mov	r0, r4
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
 8006b06:	bf00      	nop

08006b08 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d04e      	beq.n	8006baa <xQueueGenericSendFromISR+0xa2>
{
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	460e      	mov	r6, r1
 8006b12:	4604      	mov	r4, r0
 8006b14:	4617      	mov	r7, r2
 8006b16:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b18:	b339      	cbz	r1, 8006b6a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b1a:	2d02      	cmp	r5, #2
 8006b1c:	d10b      	bne.n	8006b36 <xQueueGenericSendFromISR+0x2e>
 8006b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d008      	beq.n	8006b36 <xQueueGenericSendFromISR+0x2e>
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	e7fe      	b.n	8006b34 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b36:	f001 fcc9 	bl	80084cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b3a:	f3ef 8811 	mrs	r8, BASEPRI
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d315      	bcc.n	8006b82 <xQueueGenericSendFromISR+0x7a>
 8006b56:	f1a5 0002 	sub.w	r0, r5, #2
 8006b5a:	fab0 f080 	clz	r0, r0
 8006b5e:	0940      	lsrs	r0, r0, #5
 8006b60:	b978      	cbnz	r0, 8006b82 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b62:	f388 8811 	msr	BASEPRI, r8
}
 8006b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0d4      	beq.n	8006b1a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	e7fe      	b.n	8006b80 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b82:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b84:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b8c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b90:	f7ff fcf8 	bl	8006584 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006b94:	1c6b      	adds	r3, r5, #1
 8006b96:	d011      	beq.n	8006bbc <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b98:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8006b9a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8006ba2:	f388 8811 	msr	BASEPRI, r8
}
 8006ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	e7ce      	b.n	8006b62 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006bc8:	f000 ff3c 	bl	8007a44 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d0f7      	beq.n	8006bc0 <xQueueGenericSendFromISR+0xb8>
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	d0f5      	beq.n	8006bc0 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8006bd6:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	e7c2      	b.n	8006b62 <xQueueGenericSendFromISR+0x5a>

08006bdc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8006bdc:	b360      	cbz	r0, 8006c38 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bde:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006be4:	b143      	cbz	r3, 8006bf8 <xQueueGiveFromISR+0x1c>
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	e7fe      	b.n	8006bf6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006bf8:	6803      	ldr	r3, [r0, #0]
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	b32b      	cbz	r3, 8006c4a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bfe:	f001 fc65 	bl	80084cc <vPortValidateInterruptPriority>
	__asm volatile
 8006c02:	f3ef 8611 	mrs	r6, BASEPRI
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d921      	bls.n	8006c62 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c1e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c22:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8006c24:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c26:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c28:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8006c2a:	d01e      	beq.n	8006c6a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c2c:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8006c2e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c36:	e015      	b.n	8006c64 <xQueueGiveFromISR+0x88>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006c48:	e7fe      	b.n	8006c48 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c4a:	6883      	ldr	r3, [r0, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0d6      	beq.n	8006bfe <xQueueGiveFromISR+0x22>
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	e7fe      	b.n	8006c60 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8006c62:	2000      	movs	r0, #0
	__asm volatile
 8006c64:	f386 8811 	msr	BASEPRI, r6
}
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c6c:	b90b      	cbnz	r3, 8006c72 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 8006c6e:	2001      	movs	r0, #1
 8006c70:	e7f8      	b.n	8006c64 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c76:	f000 fee5 	bl	8007a44 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	d0f7      	beq.n	8006c6e <xQueueGiveFromISR+0x92>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d0f5      	beq.n	8006c6e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c82:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8006c84:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	e7ec      	b.n	8006c64 <xQueueGiveFromISR+0x88>
 8006c8a:	bf00      	nop

08006c8c <xQueueReceive>:
{
 8006c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c90:	b085      	sub	sp, #20
 8006c92:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f000 80a0 	beq.w	8006dda <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	d047      	beq.n	8006d32 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ca2:	f000 ff79 	bl	8007b98 <xTaskGetSchedulerState>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d04f      	beq.n	8006d4a <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8006caa:	f001 faf3 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cb0:	2e00      	cmp	r6, #0
 8006cb2:	d17d      	bne.n	8006db0 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cb4:	9b01      	ldr	r3, [sp, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d035      	beq.n	8006d26 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8006cba:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cbc:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8006cc0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cc4:	a802      	add	r0, sp, #8
 8006cc6:	f000 ff07 	bl	8007ad8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006cca:	f001 fb05 	bl	80082d8 <vPortExitCritical>
		vTaskSuspendAll();
 8006cce:	f000 fc97 	bl	8007600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd2:	f001 fadf 	bl	8008294 <vPortEnterCritical>
 8006cd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006cda:	2bff      	cmp	r3, #255	; 0xff
 8006cdc:	d101      	bne.n	8006ce2 <xQueueReceive+0x56>
 8006cde:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8006ce2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006ce6:	2bff      	cmp	r3, #255	; 0xff
 8006ce8:	d101      	bne.n	8006cee <xQueueReceive+0x62>
 8006cea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cee:	f001 faf3 	bl	80082d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cf2:	a901      	add	r1, sp, #4
 8006cf4:	a802      	add	r0, sp, #8
 8006cf6:	f000 fefb 	bl	8007af0 <xTaskCheckForTimeOut>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d131      	bne.n	8006d62 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8006cfe:	f001 fac9 	bl	8008294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d039      	beq.n	8006d7c <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8006d08:	f001 fae6 	bl	80082d8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7ff fc7b 	bl	8006608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d12:	f000 fdc9 	bl	80078a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006d16:	f001 fabd 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d1c:	2e00      	cmp	r6, #0
 8006d1e:	d147      	bne.n	8006db0 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1d1      	bne.n	8006cca <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8006d26:	f001 fad7 	bl	80082d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006d2a:	2000      	movs	r0, #0
}
 8006d2c:	b005      	add	sp, #20
 8006d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0b4      	beq.n	8006ca2 <xQueueReceive+0x16>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	e7fe      	b.n	8006d48 <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0ac      	beq.n	8006caa <xQueueReceive+0x1e>
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	e7fe      	b.n	8006d60 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8006d62:	4620      	mov	r0, r4
 8006d64:	f7ff fc50 	bl	8006608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d68:	f000 fd9e 	bl	80078a8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006d6c:	f001 fa92 	bl	8008294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0d7      	beq.n	8006d26 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8006d76:	f001 faaf 	bl	80082d8 <vPortExitCritical>
 8006d7a:	e7cc      	b.n	8006d16 <xQueueReceive+0x8a>
 8006d7c:	f001 faac 	bl	80082d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d80:	9901      	ldr	r1, [sp, #4]
 8006d82:	4640      	mov	r0, r8
 8006d84:	f000 fe26 	bl	80079d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f7ff fc3d 	bl	8006608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d8e:	f000 fd8b 	bl	80078a8 <xTaskResumeAll>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d1bf      	bne.n	8006d16 <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 8006d96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d9a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006da6:	f001 fa75 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006daa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dac:	2e00      	cmp	r6, #0
 8006dae:	d0b7      	beq.n	8006d20 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006db0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006db2:	b152      	cbz	r2, 8006dca <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db4:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006db6:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db8:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dba:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dbc:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dbe:	d301      	bcc.n	8006dc4 <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dc0:	6821      	ldr	r1, [r4, #0]
 8006dc2:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f008 fd3c 	bl	800f842 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dca:	3e01      	subs	r6, #1
 8006dcc:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	b963      	cbnz	r3, 8006dec <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8006dd2:	f001 fa81 	bl	80082d8 <vPortExitCritical>
				return pdPASS;
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	e7a8      	b.n	8006d2c <xQueueReceive+0xa0>
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006dea:	e7fe      	b.n	8006dea <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dec:	f104 0010 	add.w	r0, r4, #16
 8006df0:	f000 fe28 	bl	8007a44 <xTaskRemoveFromEventList>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d0ec      	beq.n	8006dd2 <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8006df8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e00:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	e7e1      	b.n	8006dd2 <xQueueReceive+0x146>
 8006e0e:	bf00      	nop

08006e10 <xQueueSemaphoreTake>:
{
 8006e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e12:	b085      	sub	sp, #20
 8006e14:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d055      	beq.n	8006ec6 <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e1a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	b146      	cbz	r6, 8006e32 <xQueueSemaphoreTake+0x22>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	e7fe      	b.n	8006e30 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e32:	f000 feb1 	bl	8007b98 <xTaskGetSchedulerState>
 8006e36:	4605      	mov	r5, r0
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d04d      	beq.n	8006ed8 <xQueueSemaphoreTake+0xc8>
 8006e3c:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8006e3e:	f001 fa29 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8006e44:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e46:	bb8b      	cbnz	r3, 8006eac <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 809b 	beq.w	8006f86 <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8006e50:	2d00      	cmp	r5, #0
 8006e52:	d059      	beq.n	8006f08 <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8006e54:	f001 fa40 	bl	80082d8 <vPortExitCritical>
		vTaskSuspendAll();
 8006e58:	f000 fbd2 	bl	8007600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e5c:	f001 fa1a 	bl	8008294 <vPortEnterCritical>
 8006e60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e64:	2bff      	cmp	r3, #255	; 0xff
 8006e66:	d101      	bne.n	8006e6c <xQueueSemaphoreTake+0x5c>
 8006e68:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8006e6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e70:	2bff      	cmp	r3, #255	; 0xff
 8006e72:	d101      	bne.n	8006e78 <xQueueSemaphoreTake+0x68>
 8006e74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e78:	f001 fa2e 	bl	80082d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e7c:	a901      	add	r1, sp, #4
 8006e7e:	a802      	add	r0, sp, #8
 8006e80:	f000 fe36 	bl	8007af0 <xTaskCheckForTimeOut>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d133      	bne.n	8006ef0 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 8006e88:	f001 fa04 	bl	8008294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d03e      	beq.n	8006f10 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8006e92:	f001 fa21 	bl	80082d8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7ff fbb6 	bl	8006608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e9c:	f000 fd04 	bl	80078a8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006ea0:	f001 f9f8 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ea6:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0cd      	beq.n	8006e48 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006eac:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eae:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006eb0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	f000 8083 	beq.w	8006fbe <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d16e      	bne.n	8006f9c <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 8006ebe:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8006ec0:	f001 fa0a 	bl	80082d8 <vPortExitCritical>
				return pdPASS;
 8006ec4:	e042      	b.n	8006f4c <xQueueSemaphoreTake+0x13c>
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006ed6:	e7fe      	b.n	8006ed6 <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ed8:	9b01      	ldr	r3, [sp, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d039      	beq.n	8006f52 <xQueueSemaphoreTake+0x142>
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	e7fe      	b.n	8006eee <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff fb89 	bl	8006608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ef6:	f000 fcd7 	bl	80078a8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006efa:	f001 f9cb 	bl	8008294 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f00:	b30b      	cbz	r3, 8006f46 <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8006f02:	f001 f9e9 	bl	80082d8 <vPortExitCritical>
	return xReturn;
 8006f06:	e7cb      	b.n	8006ea0 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f08:	a802      	add	r0, sp, #8
 8006f0a:	f000 fde5 	bl	8007ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f0e:	e7a1      	b.n	8006e54 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8006f10:	f001 f9e2 	bl	80082d8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	b36b      	cbz	r3, 8006f74 <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f18:	9901      	ldr	r1, [sp, #4]
 8006f1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f1e:	f000 fd59 	bl	80079d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fb70 	bl	8006608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f28:	f000 fcbe 	bl	80078a8 <xTaskResumeAll>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d1b7      	bne.n	8006ea0 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8006f30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	e7ac      	b.n	8006ea0 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8006f46:	f001 f9c7 	bl	80082d8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8006f4a:	b926      	cbnz	r6, 8006f56 <xQueueSemaphoreTake+0x146>
}
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	b005      	add	sp, #20
 8006f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f52:	4606      	mov	r6, r0
 8006f54:	e773      	b.n	8006e3e <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8006f56:	f001 f99d 	bl	8008294 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006f5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f5c:	b119      	cbz	r1, 8006f66 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f66:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8006f68:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f6a:	f000 feb1 	bl	8007cd0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006f6e:	f001 f9b3 	bl	80082d8 <vPortExitCritical>
 8006f72:	e7eb      	b.n	8006f4c <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8006f74:	f001 f98e 	bl	8008294 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f78:	68a0      	ldr	r0, [r4, #8]
 8006f7a:	f000 fe1d 	bl	8007bb8 <xTaskPriorityInherit>
 8006f7e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8006f80:	f001 f9aa 	bl	80082d8 <vPortExitCritical>
 8006f84:	e7c8      	b.n	8006f18 <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d0f1      	beq.n	8006f6e <xQueueSemaphoreTake+0x15e>
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	e7fe      	b.n	8006f9a <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f9c:	f104 0010 	add.w	r0, r4, #16
 8006fa0:	f000 fd50 	bl	8007a44 <xTaskRemoveFromEventList>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d08a      	beq.n	8006ebe <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8006fa8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	e77f      	b.n	8006ebe <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fbe:	f000 fedb 	bl	8007d78 <pvTaskIncrementMutexHeldCount>
 8006fc2:	60a0      	str	r0, [r4, #8]
 8006fc4:	e778      	b.n	8006eb8 <xQueueSemaphoreTake+0xa8>
 8006fc6:	bf00      	nop

08006fc8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8006fc8:	b1a8      	cbz	r0, 8006ff6 <xQueueTakeMutexRecursive+0x2e>
	{
 8006fca:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006fcc:	6886      	ldr	r6, [r0, #8]
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	f000 fddb 	bl	8007b8c <xTaskGetCurrentTaskHandle>
 8006fd6:	4286      	cmp	r6, r0
 8006fd8:	d008      	beq.n	8006fec <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff ff17 	bl	8006e10 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006fe2:	b110      	cbz	r0, 8006fea <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006fe4:	68e3      	ldr	r3, [r4, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60e3      	str	r3, [r4, #12]
	}
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006fec:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8006fee:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ff0:	4403      	add	r3, r0
 8006ff2:	60e3      	str	r3, [r4, #12]
	}
 8006ff4:	bd70      	pop	{r4, r5, r6, pc}
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8007006:	e7fe      	b.n	8007006 <xQueueTakeMutexRecursive+0x3e>

08007008 <xQueueReceiveFromISR>:
{
 8007008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800700c:	b310      	cbz	r0, 8007054 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800700e:	460e      	mov	r6, r1
 8007010:	4604      	mov	r4, r0
 8007012:	4617      	mov	r7, r2
 8007014:	b191      	cbz	r1, 800703c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007016:	f001 fa59 	bl	80084cc <vPortValidateInterruptPriority>
	__asm volatile
 800701a:	f3ef 8911 	mrs	r9, BASEPRI
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800702e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007030:	b9cd      	cbnz	r5, 8007066 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8007032:	4628      	mov	r0, r5
	__asm volatile
 8007034:	f389 8811 	msr	BASEPRI, r9
}
 8007038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800703c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0e9      	beq.n	8007016 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	e7fe      	b.n	8007052 <xQueueReceiveFromISR+0x4a>
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007064:	e7fe      	b.n	8007064 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007066:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800706a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800706c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007070:	b142      	cbz	r2, 8007084 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007072:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007074:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007076:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007078:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800707a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800707c:	d215      	bcs.n	80070aa <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800707e:	4630      	mov	r0, r6
 8007080:	f008 fbdf 	bl	800f842 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007084:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007086:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800708a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800708c:	d009      	beq.n	80070a2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800708e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8007092:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007094:	b25b      	sxtb	r3, r3
 8007096:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 800709a:	f389 8811 	msr	BASEPRI, r9
}
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a2:	6923      	ldr	r3, [r4, #16]
 80070a4:	b923      	cbnz	r3, 80070b0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 80070a6:	2001      	movs	r0, #1
 80070a8:	e7c4      	b.n	8007034 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070aa:	6821      	ldr	r1, [r4, #0]
 80070ac:	60e1      	str	r1, [r4, #12]
 80070ae:	e7e6      	b.n	800707e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070b0:	f104 0010 	add.w	r0, r4, #16
 80070b4:	f000 fcc6 	bl	8007a44 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80070b8:	2f00      	cmp	r7, #0
 80070ba:	d0f4      	beq.n	80070a6 <xQueueReceiveFromISR+0x9e>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d0f2      	beq.n	80070a6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070c0:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80070c2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	e7b5      	b.n	8007034 <xQueueReceiveFromISR+0x2c>

080070c8 <vQueueDelete>:
	configASSERT( pxQueue );
 80070c8:	b180      	cbz	r0, 80070ec <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ca:	2300      	movs	r3, #0
{
 80070cc:	b410      	push	{r4}
 80070ce:	4c12      	ldr	r4, [pc, #72]	; (8007118 <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80070d0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80070d4:	6851      	ldr	r1, [r2, #4]
 80070d6:	4288      	cmp	r0, r1
 80070d8:	d015      	beq.n	8007106 <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070da:	3301      	adds	r3, #1
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d1f7      	bne.n	80070d0 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070e0:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80070e4:	b15b      	cbz	r3, 80070fe <vQueueDelete+0x36>
}
 80070e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ea:	4770      	bx	lr
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80070fc:	e7fe      	b.n	80070fc <vQueueDelete+0x34>
}
 80070fe:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 8007102:	f001 bad9 	b.w	80086b8 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007106:	2100      	movs	r1, #0
 8007108:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800710c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007110:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e7      	bne.n	80070e6 <vQueueDelete+0x1e>
 8007116:	e7f2      	b.n	80070fe <vQueueDelete+0x36>
 8007118:	24001e88 	.word	0x24001e88

0800711c <vQueueAddToRegistry>:
	{
 800711c:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711e:	2300      	movs	r3, #0
 8007120:	4c08      	ldr	r4, [pc, #32]	; (8007144 <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007122:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8007126:	b12a      	cbz	r2, 8007134 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007128:	3301      	adds	r3, #1
 800712a:	2b08      	cmp	r3, #8
 800712c:	d1f9      	bne.n	8007122 <vQueueAddToRegistry+0x6>
	}
 800712e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007132:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007134:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007138:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 800713c:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007140:	6050      	str	r0, [r2, #4]
	}
 8007142:	4770      	bx	lr
 8007144:	24001e88 	.word	0x24001e88

08007148 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4604      	mov	r4, r0
 800714c:	460e      	mov	r6, r1
 800714e:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007150:	f001 f8a0 	bl	8008294 <vPortEnterCritical>
 8007154:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007158:	2bff      	cmp	r3, #255	; 0xff
 800715a:	d102      	bne.n	8007162 <vQueueWaitForMessageRestricted+0x1a>
 800715c:	2300      	movs	r3, #0
 800715e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007162:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007166:	2bff      	cmp	r3, #255	; 0xff
 8007168:	d102      	bne.n	8007170 <vQueueWaitForMessageRestricted+0x28>
 800716a:	2300      	movs	r3, #0
 800716c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007170:	f001 f8b2 	bl	80082d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007176:	b123      	cbz	r3, 8007182 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007178:	4620      	mov	r0, r4
	}
 800717a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800717e:	f7ff ba43 	b.w	8006608 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007186:	462a      	mov	r2, r5
 8007188:	4631      	mov	r1, r6
 800718a:	f000 fc3d 	bl	8007a08 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 800718e:	4620      	mov	r0, r4
	}
 8007190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007194:	f7ff ba38 	b.w	8006608 <prvUnlockQueue>

08007198 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800719e:	f001 f879 	bl	8008294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071a2:	4a34      	ldr	r2, [pc, #208]	; (8007274 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80071a4:	4e34      	ldr	r6, [pc, #208]	; (8007278 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d032      	beq.n	8007218 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071b2:	4c32      	ldr	r4, [pc, #200]	; (800727c <prvAddNewTaskToReadyList+0xe4>)
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	b33b      	cbz	r3, 8007208 <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80071ba:	4f31      	ldr	r7, [pc, #196]	; (8007280 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071bc:	4a31      	ldr	r2, [pc, #196]	; (8007284 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071be:	4932      	ldr	r1, [pc, #200]	; (8007288 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071c6:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80071c8:	680b      	ldr	r3, [r1, #0]
 80071ca:	4283      	cmp	r3, r0
 80071cc:	d200      	bcs.n	80071d0 <prvAddNewTaskToReadyList+0x38>
 80071ce:	6008      	str	r0, [r1, #0]
 80071d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80071d4:	1d29      	adds	r1, r5, #4
 80071d6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80071da:	f7ff f997 	bl	800650c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071de:	f001 f87b 	bl	80082d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	b173      	cbz	r3, 8007204 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071e6:	6832      	ldr	r2, [r6, #0]
 80071e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80071ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d209      	bcs.n	8007204 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007208:	6833      	ldr	r3, [r6, #0]
 800720a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	4f1c      	ldr	r7, [pc, #112]	; (8007280 <prvAddNewTaskToReadyList+0xe8>)
 8007210:	4283      	cmp	r3, r0
 8007212:	d8d3      	bhi.n	80071bc <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8007214:	6035      	str	r5, [r6, #0]
 8007216:	e7d1      	b.n	80071bc <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007218:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d003      	beq.n	8007228 <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007220:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007222:	4f17      	ldr	r7, [pc, #92]	; (8007280 <prvAddNewTaskToReadyList+0xe8>)
 8007224:	4c15      	ldr	r4, [pc, #84]	; (800727c <prvAddNewTaskToReadyList+0xe4>)
 8007226:	e7c9      	b.n	80071bc <prvAddNewTaskToReadyList+0x24>
 8007228:	4f15      	ldr	r7, [pc, #84]	; (8007280 <prvAddNewTaskToReadyList+0xe8>)
 800722a:	463c      	mov	r4, r7
 800722c:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007230:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007232:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007234:	f7ff f95a 	bl	80064ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007238:	45a0      	cmp	r8, r4
 800723a:	d1f9      	bne.n	8007230 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 800723c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80072a0 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8007240:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80072a4 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8007244:	4648      	mov	r0, r9
 8007246:	4c0d      	ldr	r4, [pc, #52]	; (800727c <prvAddNewTaskToReadyList+0xe4>)
 8007248:	f7ff f950 	bl	80064ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800724c:	4640      	mov	r0, r8
 800724e:	f7ff f94d 	bl	80064ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007252:	480e      	ldr	r0, [pc, #56]	; (800728c <prvAddNewTaskToReadyList+0xf4>)
 8007254:	f7ff f94a 	bl	80064ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007258:	480d      	ldr	r0, [pc, #52]	; (8007290 <prvAddNewTaskToReadyList+0xf8>)
 800725a:	f7ff f947 	bl	80064ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800725e:	480d      	ldr	r0, [pc, #52]	; (8007294 <prvAddNewTaskToReadyList+0xfc>)
 8007260:	f7ff f944 	bl	80064ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007264:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8007266:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8007268:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <prvAddNewTaskToReadyList+0x104>)
 800726e:	f8c3 8000 	str.w	r8, [r3]
}
 8007272:	e7a3      	b.n	80071bc <prvAddNewTaskToReadyList+0x24>
 8007274:	24002334 	.word	0x24002334
 8007278:	24001ec8 	.word	0x24001ec8
 800727c:	24002390 	.word	0x24002390
 8007280:	24001ed4 	.word	0x24001ed4
 8007284:	24002340 	.word	0x24002340
 8007288:	24002344 	.word	0x24002344
 800728c:	2400237c 	.word	0x2400237c
 8007290:	240023a8 	.word	0x240023a8
 8007294:	24002394 	.word	0x24002394
 8007298:	24001ecc 	.word	0x24001ecc
 800729c:	24001ed0 	.word	0x24001ed0
 80072a0:	24002348 	.word	0x24002348
 80072a4:	2400235c 	.word	0x2400235c

080072a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072aa:	4b15      	ldr	r3, [pc, #84]	; (8007300 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80072ac:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072ae:	4e15      	ldr	r6, [pc, #84]	; (8007304 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80072b0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80072b2:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072b4:	6833      	ldr	r3, [r6, #0]
 80072b6:	1d18      	adds	r0, r3, #4
 80072b8:	f7ff f950 	bl	800655c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072bc:	1c63      	adds	r3, r4, #1
 80072be:	d100      	bne.n	80072c2 <prvAddCurrentTaskToDelayedList+0x1a>
 80072c0:	b9bf      	cbnz	r7, 80072f2 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072c2:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072c4:	6833      	ldr	r3, [r6, #0]
 80072c6:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80072c8:	d307      	bcc.n	80072da <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <prvAddCurrentTaskToDelayedList+0x60>)
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072d4:	3104      	adds	r1, #4
 80072d6:	f7ff b929 	b.w	800652c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072da:	4b0c      	ldr	r3, [pc, #48]	; (800730c <prvAddCurrentTaskToDelayedList+0x64>)
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	6831      	ldr	r1, [r6, #0]
 80072e0:	3104      	adds	r1, #4
 80072e2:	f7ff f923 	bl	800652c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072e6:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <prvAddCurrentTaskToDelayedList+0x68>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	42aa      	cmp	r2, r5
 80072ec:	d900      	bls.n	80072f0 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 80072ee:	601d      	str	r5, [r3, #0]
}
 80072f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072f2:	6831      	ldr	r1, [r6, #0]
 80072f4:	4807      	ldr	r0, [pc, #28]	; (8007314 <prvAddCurrentTaskToDelayedList+0x6c>)
 80072f6:	3104      	adds	r1, #4
}
 80072f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072fc:	f7ff b906 	b.w	800650c <vListInsertEnd>
 8007300:	240023bc 	.word	0x240023bc
 8007304:	24001ec8 	.word	0x24001ec8
 8007308:	24001ed0 	.word	0x24001ed0
 800730c:	24001ecc 	.word	0x24001ecc
 8007310:	24002370 	.word	0x24002370
 8007314:	24002394 	.word	0x24002394

08007318 <prvDeleteTCB>:
	{
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800731c:	3054      	adds	r0, #84	; 0x54
 800731e:	f008 f9cd 	bl	800f6bc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007322:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8007326:	b163      	cbz	r3, 8007342 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007328:	2b01      	cmp	r3, #1
 800732a:	d013      	beq.n	8007354 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800732c:	2b02      	cmp	r3, #2
 800732e:	d010      	beq.n	8007352 <prvDeleteTCB+0x3a>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	e7fe      	b.n	8007340 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8007342:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007344:	f001 f9b8 	bl	80086b8 <vPortFree>
				vPortFree( pxTCB );
 8007348:	4620      	mov	r0, r4
	}
 800734a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800734e:	f001 b9b3 	b.w	80086b8 <vPortFree>
	}
 8007352:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8007354:	4620      	mov	r0, r4
	}
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800735a:	f001 b9ad 	b.w	80086b8 <vPortFree>
 800735e:	bf00      	nop

08007360 <prvIdleTask>:
{
 8007360:	4c15      	ldr	r4, [pc, #84]	; (80073b8 <prvIdleTask+0x58>)
				taskYIELD();
 8007362:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8007366:	4e15      	ldr	r6, [pc, #84]	; (80073bc <prvIdleTask+0x5c>)
 8007368:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 800736c:	4d14      	ldr	r5, [pc, #80]	; (80073c0 <prvIdleTask+0x60>)
 800736e:	f8df a054 	ldr.w	sl, [pc, #84]	; 80073c4 <prvIdleTask+0x64>
{
 8007372:	b580      	push	{r7, lr}
 8007374:	e011      	b.n	800739a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8007376:	f000 ff8d 	bl	8008294 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800737a:	68f3      	ldr	r3, [r6, #12]
 800737c:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800737e:	1d38      	adds	r0, r7, #4
 8007380:	f7ff f8ec 	bl	800655c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	3b01      	subs	r3, #1
 800738e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007390:	f000 ffa2 	bl	80082d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff ffbf 	bl	8007318 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1ea      	bne.n	8007376 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073a0:	f8da 3000 	ldr.w	r3, [sl]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d9f8      	bls.n	800739a <prvIdleTask+0x3a>
				taskYIELD();
 80073a8:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	e7f1      	b.n	800739a <prvIdleTask+0x3a>
 80073b6:	bf00      	nop
 80073b8:	24002338 	.word	0x24002338
 80073bc:	240023a8 	.word	0x240023a8
 80073c0:	24002334 	.word	0x24002334
 80073c4:	24001ed4 	.word	0x24001ed4

080073c8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80073c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073ce:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80073d2:	4606      	mov	r6, r0
 80073d4:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073d6:	464a      	mov	r2, r9
 80073d8:	21a5      	movs	r1, #165	; 0xa5
 80073da:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80073dc:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073de:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80073e2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073e6:	f008 f950 	bl	800f68a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80073ec:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073ee:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	d043      	beq.n	800747e <prvInitialiseNewTask.constprop.0+0xb6>
 80073f6:	f105 3cff 	add.w	ip, r5, #4294967295
 80073fa:	f105 030f 	add.w	r3, r5, #15
 80073fe:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007402:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8007406:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800740a:	b10d      	cbz	r5, 8007410 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800740c:	459c      	cmp	ip, r3
 800740e:	d1f8      	bne.n	8007402 <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007410:	2300      	movs	r3, #0
 8007412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007416:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007418:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800741c:	1d20      	adds	r0, r4, #4
 800741e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007420:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8007424:	bf28      	it	cs
 8007426:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007428:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800742a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007430:	f7ff f868 	bl	8006504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007434:	f104 0018 	add.w	r0, r4, #24
 8007438:	f7ff f864 	bl	8006504 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800743c:	4651      	mov	r1, sl
 800743e:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007440:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8007442:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007446:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800744a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800744c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800744e:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007452:	f008 f91a 	bl	800f68a <memset>
 8007456:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007458:	463a      	mov	r2, r7
 800745a:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800745c:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8007460:	65a3      	str	r3, [r4, #88]	; 0x58
 8007462:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007464:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007466:	65e5      	str	r5, [r4, #92]	; 0x5c
 8007468:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800746a:	f000 fee5 	bl	8008238 <pxPortInitialiseStack>
 800746e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	d001      	beq.n	800747a <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007476:	f8c8 4000 	str.w	r4, [r8]
}
 800747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800747e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8007482:	e7c8      	b.n	8007416 <prvInitialiseNewTask.constprop.0+0x4e>
 8007484:	2401095c 	.word	0x2401095c

08007488 <xTaskCreateStatic>:
	{
 8007488:	b530      	push	{r4, r5, lr}
 800748a:	b087      	sub	sp, #28
 800748c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800748e:	b1c4      	cbz	r4, 80074c2 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8007490:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007492:	b16d      	cbz	r5, 80074b0 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007494:	25a8      	movs	r5, #168	; 0xa8
 8007496:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007498:	9d05      	ldr	r5, [sp, #20]
 800749a:	2da8      	cmp	r5, #168	; 0xa8
 800749c:	d01a      	beq.n	80074d4 <xTaskCreateStatic+0x4c>
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	e7fe      	b.n	80074ae <xTaskCreateStatic+0x26>
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80074c0:	e7fe      	b.n	80074c0 <xTaskCreateStatic+0x38>
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80074d2:	e7fe      	b.n	80074d2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074d6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074d8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074da:	9502      	str	r5, [sp, #8]
 80074dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80074de:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074e2:	f885 40a5 	strb.w	r4, [r5, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074e6:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074e8:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074ea:	9401      	str	r4, [sp, #4]
 80074ec:	f7ff ff6c 	bl	80073c8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074f2:	f7ff fe51 	bl	8007198 <prvAddNewTaskToReadyList>
	}
 80074f6:	9804      	ldr	r0, [sp, #16]
 80074f8:	b007      	add	sp, #28
 80074fa:	bd30      	pop	{r4, r5, pc}

080074fc <xTaskCreate>:
	{
 80074fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007500:	4607      	mov	r7, r0
 8007502:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007504:	0090      	lsls	r0, r2, #2
	{
 8007506:	4615      	mov	r5, r2
 8007508:	4688      	mov	r8, r1
 800750a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800750c:	f001 f83e 	bl	800858c <pvPortMalloc>
			if( pxStack != NULL )
 8007510:	b1d8      	cbz	r0, 800754a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007512:	4604      	mov	r4, r0
 8007514:	20a8      	movs	r0, #168	; 0xa8
 8007516:	f001 f839 	bl	800858c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800751a:	4606      	mov	r6, r0
 800751c:	b1d0      	cbz	r0, 8007554 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 800751e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007520:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007522:	464b      	mov	r3, r9
 8007524:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007526:	f886 40a5 	strb.w	r4, [r6, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800752a:	4641      	mov	r1, r8
 800752c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800752e:	4638      	mov	r0, r7
 8007530:	9602      	str	r6, [sp, #8]
 8007532:	9401      	str	r4, [sp, #4]
 8007534:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007536:	9400      	str	r4, [sp, #0]
 8007538:	f7ff ff46 	bl	80073c8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff fe2b 	bl	8007198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007542:	2001      	movs	r0, #1
	}
 8007544:	b005      	add	sp, #20
 8007546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800754e:	b005      	add	sp, #20
 8007550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007554:	4620      	mov	r0, r4
 8007556:	f001 f8af 	bl	80086b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800755a:	f04f 30ff 	mov.w	r0, #4294967295
 800755e:	e7f1      	b.n	8007544 <xTaskCreate+0x48>

08007560 <vTaskStartScheduler>:
{
 8007560:	b510      	push	{r4, lr}
 8007562:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007564:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007566:	aa07      	add	r2, sp, #28
 8007568:	a906      	add	r1, sp, #24
 800756a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800756c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007570:	f7fe ff9c 	bl	80064ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007574:	4623      	mov	r3, r4
 8007576:	9a07      	ldr	r2, [sp, #28]
 8007578:	9400      	str	r4, [sp, #0]
 800757a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800757e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8007582:	4918      	ldr	r1, [pc, #96]	; (80075e4 <vTaskStartScheduler+0x84>)
 8007584:	4818      	ldr	r0, [pc, #96]	; (80075e8 <vTaskStartScheduler+0x88>)
 8007586:	f7ff ff7f 	bl	8007488 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800758a:	b1e8      	cbz	r0, 80075c8 <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 800758c:	f000 fc36 	bl	8007dfc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007590:	2801      	cmp	r0, #1
 8007592:	d11b      	bne.n	80075cc <vTaskStartScheduler+0x6c>
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075a4:	4b11      	ldr	r3, [pc, #68]	; (80075ec <vTaskStartScheduler+0x8c>)
 80075a6:	4a12      	ldr	r2, [pc, #72]	; (80075f0 <vTaskStartScheduler+0x90>)
 80075a8:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80075aa:	4912      	ldr	r1, [pc, #72]	; (80075f4 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075ac:	3354      	adds	r3, #84	; 0x54
 80075ae:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80075b4:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b6:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 80075ba:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075bc:	601c      	str	r4, [r3, #0]
}
 80075be:	b008      	add	sp, #32
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80075c4:	f000 bef8 	b.w	80083b8 <xPortStartScheduler>
}
 80075c8:	b008      	add	sp, #32
 80075ca:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075cc:	3001      	adds	r0, #1
 80075ce:	d1fb      	bne.n	80075c8 <vTaskStartScheduler+0x68>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	e7fe      	b.n	80075e0 <vTaskStartScheduler+0x80>
 80075e2:	bf00      	nop
 80075e4:	08010500 	.word	0x08010500
 80075e8:	08007361 	.word	0x08007361
 80075ec:	24001ec8 	.word	0x24001ec8
 80075f0:	240000d0 	.word	0x240000d0
 80075f4:	24002370 	.word	0x24002370
 80075f8:	24002390 	.word	0x24002390
 80075fc:	240023bc 	.word	0x240023bc

08007600 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007600:	4a02      	ldr	r2, [pc, #8]	; (800760c <vTaskSuspendAll+0xc>)
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	6013      	str	r3, [r2, #0]
}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	2400233c 	.word	0x2400233c

08007610 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007610:	4b01      	ldr	r3, [pc, #4]	; (8007618 <xTaskGetTickCount+0x8>)
 8007612:	6818      	ldr	r0, [r3, #0]
}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	240023bc 	.word	0x240023bc

0800761c <xTaskGetTickCountFromISR>:
{
 800761c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800761e:	f000 ff55 	bl	80084cc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8007622:	4b01      	ldr	r3, [pc, #4]	; (8007628 <xTaskGetTickCountFromISR+0xc>)
 8007624:	6818      	ldr	r0, [r3, #0]
}
 8007626:	bd08      	pop	{r3, pc}
 8007628:	240023bc 	.word	0x240023bc

0800762c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762c:	4b50      	ldr	r3, [pc, #320]	; (8007770 <xTaskIncrementTick+0x144>)
 800762e:	681b      	ldr	r3, [r3, #0]
{
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007636:	2b00      	cmp	r3, #0
 8007638:	d146      	bne.n	80076c8 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800763a:	4b4e      	ldr	r3, [pc, #312]	; (8007774 <xTaskIncrementTick+0x148>)
 800763c:	681e      	ldr	r6, [r3, #0]
 800763e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8007640:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007642:	2e00      	cmp	r6, #0
 8007644:	d049      	beq.n	80076da <xTaskIncrementTick+0xae>
 8007646:	f8df b144 	ldr.w	fp, [pc, #324]	; 800778c <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800764a:	f8db 3000 	ldr.w	r3, [fp]
 800764e:	429e      	cmp	r6, r3
 8007650:	d350      	bcc.n	80076f4 <xTaskIncrementTick+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007652:	4f49      	ldr	r7, [pc, #292]	; (8007778 <xTaskIncrementTick+0x14c>)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681d      	ldr	r5, [r3, #0]
 8007658:	2d00      	cmp	r5, #0
 800765a:	d077      	beq.n	800774c <xTaskIncrementTick+0x120>
BaseType_t xSwitchRequired = pdFALSE;
 800765c:	2500      	movs	r5, #0
 800765e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8007790 <xTaskIncrementTick+0x164>
 8007662:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007794 <xTaskIncrementTick+0x168>
					prvAddTaskToReadyList( pxTCB );
 8007666:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8007798 <xTaskIncrementTick+0x16c>
 800766a:	e022      	b.n	80076b2 <xTaskIncrementTick+0x86>
 800766c:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766e:	f7fe ff75 	bl	800655c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007674:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007678:	9901      	ldr	r1, [sp, #4]
 800767a:	b113      	cbz	r3, 8007682 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800767c:	f7fe ff6e 	bl	800655c <uxListRemove>
 8007680:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8007682:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007684:	f8d8 3000 	ldr.w	r3, [r8]
 8007688:	4298      	cmp	r0, r3
 800768a:	d901      	bls.n	8007690 <xTaskIncrementTick+0x64>
 800768c:	f8c8 0000 	str.w	r0, [r8]
 8007690:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007694:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007698:	f7fe ff38 	bl	800650c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800769c:	f8da 3000 	ldr.w	r3, [sl]
 80076a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80076a4:	429a      	cmp	r2, r3
 80076a6:	bf28      	it	cs
 80076a8:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d050      	beq.n	8007754 <xTaskIncrementTick+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076b8:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ba:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 80076bc:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076be:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80076c0:	d2d4      	bcs.n	800766c <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80076c2:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076c6:	e01a      	b.n	80076fe <xTaskIncrementTick+0xd2>
		++xPendedTicks;
 80076c8:	4a2c      	ldr	r2, [pc, #176]	; (800777c <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 80076ca:	2500      	movs	r5, #0
		++xPendedTicks;
 80076cc:	6813      	ldr	r3, [r2, #0]
}
 80076ce:	4628      	mov	r0, r5
		++xPendedTicks;
 80076d0:	3301      	adds	r3, #1
 80076d2:	6013      	str	r3, [r2, #0]
}
 80076d4:	b003      	add	sp, #12
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80076da:	4b27      	ldr	r3, [pc, #156]	; (8007778 <xTaskIncrementTick+0x14c>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	b30a      	cbz	r2, 8007726 <xTaskIncrementTick+0xfa>
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	e7fe      	b.n	80076f2 <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 80076f4:	2500      	movs	r5, #0
 80076f6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8007790 <xTaskIncrementTick+0x164>
 80076fa:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007794 <xTaskIncrementTick+0x168>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076fe:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8007702:	491f      	ldr	r1, [pc, #124]	; (8007780 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8007710:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8007712:	2a02      	cmp	r2, #2
 8007714:	bf28      	it	cs
 8007716:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf18      	it	ne
 800771c:	2501      	movne	r5, #1
}
 800771e:	4628      	mov	r0, r5
 8007720:	b003      	add	sp, #12
 8007722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <xTaskIncrementTick+0x158>)
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	6811      	ldr	r1, [r2, #0]
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	4916      	ldr	r1, [pc, #88]	; (8007788 <xTaskIncrementTick+0x15c>)
 8007730:	6010      	str	r0, [r2, #0]
 8007732:	680a      	ldr	r2, [r1, #0]
 8007734:	3201      	adds	r2, #1
 8007736:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	b97a      	cbnz	r2, 800775e <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 800773e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 800778c <xTaskIncrementTick+0x160>
 8007742:	f04f 33ff 	mov.w	r3, #4294967295
 8007746:	f8cb 3000 	str.w	r3, [fp]
 800774a:	e77e      	b.n	800764a <xTaskIncrementTick+0x1e>
 800774c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8007790 <xTaskIncrementTick+0x164>
 8007750:	f8df a040 	ldr.w	sl, [pc, #64]	; 8007794 <xTaskIncrementTick+0x168>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007754:	f04f 33ff 	mov.w	r3, #4294967295
 8007758:	f8cb 3000 	str.w	r3, [fp]
					break;
 800775c:	e7cf      	b.n	80076fe <xTaskIncrementTick+0xd2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007760:	f8df b028 	ldr.w	fp, [pc, #40]	; 800778c <xTaskIncrementTick+0x160>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007764:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f8cb 3000 	str.w	r3, [fp]
}
 800776e:	e76c      	b.n	800764a <xTaskIncrementTick+0x1e>
 8007770:	2400233c 	.word	0x2400233c
 8007774:	240023bc 	.word	0x240023bc
 8007778:	24001ecc 	.word	0x24001ecc
 800777c:	24002378 	.word	0x24002378
 8007780:	240023c0 	.word	0x240023c0
 8007784:	24001ed0 	.word	0x24001ed0
 8007788:	24002374 	.word	0x24002374
 800778c:	24002370 	.word	0x24002370
 8007790:	24001ed4 	.word	0x24001ed4
 8007794:	24001ec8 	.word	0x24001ec8
 8007798:	24002344 	.word	0x24002344

0800779c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80077a2:	f000 fd77 	bl	8008294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80077a6:	4b36      	ldr	r3, [pc, #216]	; (8007880 <xTaskResumeAll.part.0+0xe4>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	3a01      	subs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d155      	bne.n	8007860 <xTaskResumeAll.part.0+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077b4:	4b33      	ldr	r3, [pc, #204]	; (8007884 <xTaskResumeAll.part.0+0xe8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d051      	beq.n	8007860 <xTaskResumeAll.part.0+0xc4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077bc:	4d32      	ldr	r5, [pc, #200]	; (8007888 <xTaskResumeAll.part.0+0xec>)
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d05a      	beq.n	800787a <xTaskResumeAll.part.0+0xde>
 80077c4:	4e31      	ldr	r6, [pc, #196]	; (800788c <xTaskResumeAll.part.0+0xf0>)
						xYieldPending = pdTRUE;
 80077c6:	f04f 0a01 	mov.w	sl, #1
 80077ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80078a0 <xTaskResumeAll.part.0+0x104>
 80077ce:	4f30      	ldr	r7, [pc, #192]	; (8007890 <xTaskResumeAll.part.0+0xf4>)
 80077d0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80078a4 <xTaskResumeAll.part.0+0x108>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d4:	68eb      	ldr	r3, [r5, #12]
 80077d6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d8:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077dc:	f104 0018 	add.w	r0, r4, #24
 80077e0:	f7fe febc 	bl	800655c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e4:	4658      	mov	r0, fp
 80077e6:	f7fe feb9 	bl	800655c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077ec:	6832      	ldr	r2, [r6, #0]
 80077ee:	4659      	mov	r1, fp
 80077f0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80077f4:	4293      	cmp	r3, r2
 80077f6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80077fa:	d900      	bls.n	80077fe <xTaskResumeAll.part.0+0x62>
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	f7fe fe85 	bl	800650c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	429a      	cmp	r2, r3
 800780a:	d301      	bcc.n	8007810 <xTaskResumeAll.part.0+0x74>
						xYieldPending = pdTRUE;
 800780c:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1de      	bne.n	80077d4 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007816:	4b1f      	ldr	r3, [pc, #124]	; (8007894 <xTaskResumeAll.part.0+0xf8>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	b342      	cbz	r2, 8007870 <xTaskResumeAll.part.0+0xd4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007820:	4b1d      	ldr	r3, [pc, #116]	; (8007898 <xTaskResumeAll.part.0+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007822:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007824:	68d2      	ldr	r2, [r2, #12]
 8007826:	6852      	ldr	r2, [r2, #4]
 8007828:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800782a:	4e1c      	ldr	r6, [pc, #112]	; (800789c <xTaskResumeAll.part.0+0x100>)
 800782c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800782e:	b144      	cbz	r4, 8007842 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8007830:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7ff fefb 	bl	800762c <xTaskIncrementTick>
 8007836:	b108      	cbz	r0, 800783c <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 8007838:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800783c:	3c01      	subs	r4, #1
 800783e:	d1f8      	bne.n	8007832 <xTaskResumeAll.part.0+0x96>
						xPendedTicks = 0;
 8007840:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8007842:	f8d9 3000 	ldr.w	r3, [r9]
 8007846:	b15b      	cbz	r3, 8007860 <xTaskResumeAll.part.0+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8007848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800784c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007850:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800785c:	2001      	movs	r0, #1
 800785e:	e000      	b.n	8007862 <xTaskResumeAll.part.0+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 8007860:	2000      	movs	r0, #0
 8007862:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8007864:	f000 fd38 	bl	80082d8 <vPortExitCritical>
}
 8007868:	9801      	ldr	r0, [sp, #4]
 800786a:	b003      	add	sp, #12
 800786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8007870:	4b09      	ldr	r3, [pc, #36]	; (8007898 <xTaskResumeAll.part.0+0xfc>)
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e7d7      	b.n	800782a <xTaskResumeAll.part.0+0x8e>
 800787a:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80078a4 <xTaskResumeAll.part.0+0x108>
 800787e:	e7d4      	b.n	800782a <xTaskResumeAll.part.0+0x8e>
 8007880:	2400233c 	.word	0x2400233c
 8007884:	24002334 	.word	0x24002334
 8007888:	2400237c 	.word	0x2400237c
 800788c:	24002344 	.word	0x24002344
 8007890:	24001ec8 	.word	0x24001ec8
 8007894:	24001ecc 	.word	0x24001ecc
 8007898:	24002370 	.word	0x24002370
 800789c:	24002378 	.word	0x24002378
 80078a0:	24001ed4 	.word	0x24001ed4
 80078a4:	240023c0 	.word	0x240023c0

080078a8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <xTaskResumeAll+0x1c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	b943      	cbnz	r3, 80078c0 <xTaskResumeAll+0x18>
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	e7fe      	b.n	80078be <xTaskResumeAll+0x16>
 80078c0:	f7ff bf6c 	b.w	800779c <xTaskResumeAll.part.0>
 80078c4:	2400233c 	.word	0x2400233c

080078c8 <vTaskDelay>:
	{
 80078c8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078ca:	b950      	cbnz	r0, 80078e2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80078cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80078d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
	}
 80078e0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80078e2:	4c10      	ldr	r4, [pc, #64]	; (8007924 <vTaskDelay+0x5c>)
 80078e4:	6821      	ldr	r1, [r4, #0]
 80078e6:	b141      	cbz	r1, 80078fa <vTaskDelay+0x32>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	e7fe      	b.n	80078f8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007900:	f7ff fcd2 	bl	80072a8 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	b943      	cbnz	r3, 800791a <vTaskDelay+0x52>
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	e7fe      	b.n	8007918 <vTaskDelay+0x50>
 800791a:	f7ff ff3f 	bl	800779c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800791e:	2800      	cmp	r0, #0
 8007920:	d0d4      	beq.n	80078cc <vTaskDelay+0x4>
	}
 8007922:	bd10      	pop	{r4, pc}
 8007924:	2400233c 	.word	0x2400233c

08007928 <vTaskSwitchContext>:
{
 8007928:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800792a:	4b24      	ldr	r3, [pc, #144]	; (80079bc <vTaskSwitchContext+0x94>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b11b      	cbz	r3, 8007938 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007930:	4b23      	ldr	r3, [pc, #140]	; (80079c0 <vTaskSwitchContext+0x98>)
 8007932:	2201      	movs	r2, #1
 8007934:	601a      	str	r2, [r3, #0]
}
 8007936:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8007938:	4c22      	ldr	r4, [pc, #136]	; (80079c4 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800793a:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <vTaskSwitchContext+0x98>)
 800793c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	429a      	cmp	r2, r3
 8007948:	d92e      	bls.n	80079a8 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794a:	4d1f      	ldr	r5, [pc, #124]	; (80079c8 <vTaskSwitchContext+0xa0>)
 800794c:	491f      	ldr	r1, [pc, #124]	; (80079cc <vTaskSwitchContext+0xa4>)
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007954:	0098      	lsls	r0, r3, #2
 8007956:	0092      	lsls	r2, r2, #2
 8007958:	588a      	ldr	r2, [r1, r2]
 800795a:	b942      	cbnz	r2, 800796e <vTaskSwitchContext+0x46>
 800795c:	b1db      	cbz	r3, 8007996 <vTaskSwitchContext+0x6e>
 800795e:	3b01      	subs	r3, #1
 8007960:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007964:	0098      	lsls	r0, r3, #2
 8007966:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800796a:	2a00      	cmp	r2, #0
 800796c:	d0f6      	beq.n	800795c <vTaskSwitchContext+0x34>
 800796e:	4418      	add	r0, r3
 8007970:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8007974:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007978:	4662      	mov	r2, ip
 800797a:	6849      	ldr	r1, [r1, #4]
 800797c:	3208      	adds	r2, #8
 800797e:	4291      	cmp	r1, r2
 8007980:	f8cc 1004 	str.w	r1, [ip, #4]
 8007984:	d016      	beq.n	80079b4 <vTaskSwitchContext+0x8c>
 8007986:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007988:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	6021      	str	r1, [r4, #0]
 800798c:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	3354      	adds	r3, #84	; 0x54
 8007992:	6013      	str	r3, [r2, #0]
}
 8007994:	bd38      	pop	{r3, r4, r5, pc}
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a6:	e7fe      	b.n	80079a6 <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	6821      	ldr	r1, [r4, #0]
 80079ac:	3134      	adds	r1, #52	; 0x34
 80079ae:	f7f8 fd05 	bl	80003bc <vApplicationStackOverflowHook>
 80079b2:	e7ca      	b.n	800794a <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b4:	6849      	ldr	r1, [r1, #4]
 80079b6:	f8cc 1004 	str.w	r1, [ip, #4]
 80079ba:	e7e4      	b.n	8007986 <vTaskSwitchContext+0x5e>
 80079bc:	2400233c 	.word	0x2400233c
 80079c0:	240023c0 	.word	0x240023c0
 80079c4:	24001ec8 	.word	0x24001ec8
 80079c8:	24002344 	.word	0x24002344
 80079cc:	24001ed4 	.word	0x24001ed4
 80079d0:	240000d0 	.word	0x240000d0

080079d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80079d4:	b160      	cbz	r0, 80079f0 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079d6:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <vTaskPlaceOnEventList+0x30>)
{
 80079d8:	b510      	push	{r4, lr}
 80079da:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	3118      	adds	r1, #24
 80079e0:	f7fe fda4 	bl	800652c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079e4:	4620      	mov	r0, r4
 80079e6:	2101      	movs	r1, #1
}
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079ec:	f7ff bc5c 	b.w	80072a8 <prvAddCurrentTaskToDelayedList>
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007a00:	e7fe      	b.n	8007a00 <vTaskPlaceOnEventList+0x2c>
 8007a02:	bf00      	nop
 8007a04:	24001ec8 	.word	0x24001ec8

08007a08 <vTaskPlaceOnEventListRestricted>:
	{
 8007a08:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8007a0a:	b180      	cbz	r0, 8007a2e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a0c:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <vTaskPlaceOnEventListRestricted+0x38>)
 8007a0e:	460d      	mov	r5, r1
 8007a10:	4614      	mov	r4, r2
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	3118      	adds	r1, #24
 8007a16:	f7fe fd79 	bl	800650c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8007a1a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	bf0c      	ite	eq
 8007a20:	4628      	moveq	r0, r5
 8007a22:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a2a:	f7ff bc3d 	b.w	80072a8 <prvAddCurrentTaskToDelayedList>
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007a3e:	e7fe      	b.n	8007a3e <vTaskPlaceOnEventListRestricted+0x36>
 8007a40:	24001ec8 	.word	0x24001ec8

08007a44 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a44:	68c3      	ldr	r3, [r0, #12]
{
 8007a46:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a48:	68dc      	ldr	r4, [r3, #12]
{
 8007a4a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8007a4c:	b35c      	cbz	r4, 8007aa6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a4e:	f104 0518 	add.w	r5, r4, #24
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7fe fd82 	bl	800655c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a58:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <xTaskRemoveFromEventList+0x7c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	b17b      	cbz	r3, 8007a7e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a5e:	4629      	mov	r1, r5
 8007a60:	4818      	ldr	r0, [pc, #96]	; (8007ac4 <xTaskRemoveFromEventList+0x80>)
 8007a62:	f7fe fd53 	bl	800650c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a66:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <xTaskRemoveFromEventList+0x84>)
 8007a68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d922      	bls.n	8007ab8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	4a15      	ldr	r2, [pc, #84]	; (8007acc <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8007a76:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8007a78:	6013      	str	r3, [r2, #0]
}
 8007a7a:	b003      	add	sp, #12
 8007a7c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a7e:	1d21      	adds	r1, r4, #4
 8007a80:	4608      	mov	r0, r1
 8007a82:	9101      	str	r1, [sp, #4]
 8007a84:	f7fe fd6a 	bl	800655c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a88:	4a11      	ldr	r2, [pc, #68]	; (8007ad0 <xTaskRemoveFromEventList+0x8c>)
 8007a8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a8c:	6810      	ldr	r0, [r2, #0]
 8007a8e:	9901      	ldr	r1, [sp, #4]
 8007a90:	4283      	cmp	r3, r0
 8007a92:	d900      	bls.n	8007a96 <xTaskRemoveFromEventList+0x52>
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007a9a:	480e      	ldr	r0, [pc, #56]	; (8007ad4 <xTaskRemoveFromEventList+0x90>)
 8007a9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007aa0:	f7fe fd34 	bl	800650c <vListInsertEnd>
 8007aa4:	e7df      	b.n	8007a66 <xTaskRemoveFromEventList+0x22>
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007ab6:	e7fe      	b.n	8007ab6 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8007ab8:	2000      	movs	r0, #0
}
 8007aba:	b003      	add	sp, #12
 8007abc:	bd30      	pop	{r4, r5, pc}
 8007abe:	bf00      	nop
 8007ac0:	2400233c 	.word	0x2400233c
 8007ac4:	2400237c 	.word	0x2400237c
 8007ac8:	24001ec8 	.word	0x24001ec8
 8007acc:	240023c0 	.word	0x240023c0
 8007ad0:	24002344 	.word	0x24002344
 8007ad4:	24001ed4 	.word	0x24001ed4

08007ad8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ad8:	4a03      	ldr	r2, [pc, #12]	; (8007ae8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ada:	4b04      	ldr	r3, [pc, #16]	; (8007aec <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007adc:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	e9c0 2300 	strd	r2, r3, [r0]
}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	24002374 	.word	0x24002374
 8007aec:	240023bc 	.word	0x240023bc

08007af0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8007af0:	b328      	cbz	r0, 8007b3e <xTaskCheckForTimeOut+0x4e>
{
 8007af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af4:	460d      	mov	r5, r1
 8007af6:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8007af8:	b1c1      	cbz	r1, 8007b2c <xTaskCheckForTimeOut+0x3c>
 8007afa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007afc:	f000 fbca 	bl	8008294 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8007b00:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8007b02:	4a1d      	ldr	r2, [pc, #116]	; (8007b78 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8007b04:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8007b06:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007b08:	d030      	beq.n	8007b6c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b0a:	f8df c070 	ldr.w	ip, [pc, #112]	; 8007b7c <xTaskCheckForTimeOut+0x8c>
 8007b0e:	6826      	ldr	r6, [r4, #0]
 8007b10:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b14:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b16:	42be      	cmp	r6, r7
 8007b18:	d01a      	beq.n	8007b50 <xTaskCheckForTimeOut+0x60>
 8007b1a:	4288      	cmp	r0, r1
 8007b1c:	d818      	bhi.n	8007b50 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8007b1e:	2001      	movs	r0, #1
 8007b20:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8007b22:	f000 fbd9 	bl	80082d8 <vPortExitCritical>
}
 8007b26:	9801      	ldr	r0, [sp, #4]
 8007b28:	b003      	add	sp, #12
 8007b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007b3c:	e7fe      	b.n	8007b3c <xTaskCheckForTimeOut+0x4c>
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007b4e:	e7fe      	b.n	8007b4e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b50:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b54:	4573      	cmp	r3, lr
 8007b56:	d90b      	bls.n	8007b70 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8007b58:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b5a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b5e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8007b60:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8007b62:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8007b64:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b66:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8007b6a:	e7d9      	b.n	8007b20 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7d7      	b.n	8007b20 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8007b70:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8007b72:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8007b74:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8007b76:	e7d3      	b.n	8007b20 <xTaskCheckForTimeOut+0x30>
 8007b78:	240023bc 	.word	0x240023bc
 8007b7c:	24002374 	.word	0x24002374

08007b80 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007b80:	4b01      	ldr	r3, [pc, #4]	; (8007b88 <vTaskMissedYield+0x8>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
}
 8007b86:	4770      	bx	lr
 8007b88:	240023c0 	.word	0x240023c0

08007b8c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <xTaskGetCurrentTaskHandle+0x8>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
	}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	24001ec8 	.word	0x24001ec8

08007b98 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <xTaskGetSchedulerState+0x18>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	b133      	cbz	r3, 8007bac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <xTaskGetSchedulerState+0x1c>)
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	fab0 f080 	clz	r0, r0
 8007ba6:	0940      	lsrs	r0, r0, #5
 8007ba8:	0040      	lsls	r0, r0, #1
 8007baa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bac:	2001      	movs	r0, #1
	}
 8007bae:	4770      	bx	lr
 8007bb0:	24002390 	.word	0x24002390
 8007bb4:	2400233c 	.word	0x2400233c

08007bb8 <xTaskPriorityInherit>:
	{
 8007bb8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8007bba:	4604      	mov	r4, r0
	{
 8007bbc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8007bbe:	b1c8      	cbz	r0, 8007bf4 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bc0:	4d1d      	ldr	r5, [pc, #116]	; (8007c38 <xTaskPriorityInherit+0x80>)
 8007bc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007bc4:	682a      	ldr	r2, [r5, #0]
 8007bc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d215      	bcs.n	8007bf8 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bcc:	6982      	ldr	r2, [r0, #24]
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	db04      	blt.n	8007bdc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd2:	682a      	ldr	r2, [r5, #0]
 8007bd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bd6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007bda:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007bdc:	4e17      	ldr	r6, [pc, #92]	; (8007c3c <xTaskPriorityInherit+0x84>)
 8007bde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007be2:	6962      	ldr	r2, [r4, #20]
 8007be4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d00e      	beq.n	8007c0a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bec:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8007bee:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8007bf4:	b002      	add	sp, #8
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	bf2c      	ite	cs
 8007c02:	2000      	movcs	r0, #0
 8007c04:	2001      	movcc	r0, #1
	}
 8007c06:	b002      	add	sp, #8
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c0a:	1d21      	adds	r1, r4, #4
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	9101      	str	r1, [sp, #4]
 8007c10:	f7fe fca4 	bl	800655c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c14:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c18:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	9901      	ldr	r1, [sp, #4]
 8007c1e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c20:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c22:	d900      	bls.n	8007c26 <xTaskPriorityInherit+0x6e>
 8007c24:	6018      	str	r0, [r3, #0]
 8007c26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007c2a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8007c2e:	f7fe fc6d 	bl	800650c <vListInsertEnd>
				xReturn = pdTRUE;
 8007c32:	2001      	movs	r0, #1
 8007c34:	e7de      	b.n	8007bf4 <xTaskPriorityInherit+0x3c>
 8007c36:	bf00      	nop
 8007c38:	24001ec8 	.word	0x24001ec8
 8007c3c:	24001ed4 	.word	0x24001ed4
 8007c40:	24002344 	.word	0x24002344

08007c44 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007c44:	b318      	cbz	r0, 8007c8e <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 8007c46:	4b1f      	ldr	r3, [pc, #124]	; (8007cc4 <xTaskPriorityDisinherit+0x80>)
	{
 8007c48:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4a:	681c      	ldr	r4, [r3, #0]
	{
 8007c4c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8007c4e:	4284      	cmp	r4, r0
 8007c50:	d008      	beq.n	8007c64 <xTaskPriorityDisinherit+0x20>
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	e7fe      	b.n	8007c62 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007c66:	b14b      	cbz	r3, 8007c7c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c68:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8007c6a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c6c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8007c6e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c70:	4291      	cmp	r1, r2
 8007c72:	d000      	beq.n	8007c76 <xTaskPriorityDisinherit+0x32>
 8007c74:	b16b      	cbz	r3, 8007c92 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8007c76:	2000      	movs	r0, #0
	}
 8007c78:	b002      	add	sp, #8
 8007c7a:	bd10      	pop	{r4, pc}
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8007c8c:	e7fe      	b.n	8007c8c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8007c8e:	2000      	movs	r0, #0
	}
 8007c90:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c92:	1d21      	adds	r1, r4, #4
 8007c94:	4608      	mov	r0, r1
 8007c96:	9101      	str	r1, [sp, #4]
 8007c98:	f7fe fc60 	bl	800655c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c9c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8007ca4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ca6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4290      	cmp	r0, r2
 8007cae:	d900      	bls.n	8007cb2 <xTaskPriorityDisinherit+0x6e>
 8007cb0:	6018      	str	r0, [r3, #0]
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <xTaskPriorityDisinherit+0x88>)
 8007cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007cb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cbc:	f7fe fc26 	bl	800650c <vListInsertEnd>
					xReturn = pdTRUE;
 8007cc0:	2001      	movs	r0, #1
		return xReturn;
 8007cc2:	e7d9      	b.n	8007c78 <xTaskPriorityDisinherit+0x34>
 8007cc4:	24001ec8 	.word	0x24001ec8
 8007cc8:	24002344 	.word	0x24002344
 8007ccc:	24001ed4 	.word	0x24001ed4

08007cd0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d040      	beq.n	8007d56 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cd4:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8007cd6:	b530      	push	{r4, r5, lr}
 8007cd8:	4604      	mov	r4, r0
 8007cda:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8007cdc:	b153      	cbz	r3, 8007cf4 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cde:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007ce2:	4281      	cmp	r1, r0
 8007ce4:	bf38      	it	cc
 8007ce6:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8007cec:	428a      	cmp	r2, r1
 8007cee:	d10a      	bne.n	8007d06 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8007cf0:	b003      	add	sp, #12
 8007cf2:	bd30      	pop	{r4, r5, pc}
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8007d04:	e7fe      	b.n	8007d04 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8007d06:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	d024      	beq.n	8007d58 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d0e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d10:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	db02      	blt.n	8007d1c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d16:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8007d1a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d1c:	4d14      	ldr	r5, [pc, #80]	; (8007d70 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8007d1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007d22:	6961      	ldr	r1, [r4, #20]
 8007d24:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8007d28:	4299      	cmp	r1, r3
 8007d2a:	d1e1      	bne.n	8007cf0 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d2c:	1d21      	adds	r1, r4, #4
 8007d2e:	4608      	mov	r0, r1
 8007d30:	9101      	str	r1, [sp, #4]
 8007d32:	f7fe fc13 	bl	800655c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007d36:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8007d38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	9901      	ldr	r1, [sp, #4]
 8007d3e:	4290      	cmp	r0, r2
 8007d40:	d900      	bls.n	8007d44 <vTaskPriorityDisinheritAfterTimeout+0x74>
 8007d42:	6018      	str	r0, [r3, #0]
 8007d44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007d48:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8007d4c:	b003      	add	sp, #12
 8007d4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8007d52:	f7fe bbdb 	b.w	800650c <vListInsertEnd>
 8007d56:	4770      	bx	lr
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007d68:	e7fe      	b.n	8007d68 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8007d6a:	bf00      	nop
 8007d6c:	24001ec8 	.word	0x24001ec8
 8007d70:	24001ed4 	.word	0x24001ed4
 8007d74:	24002344 	.word	0x24002344

08007d78 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <pvTaskIncrementMutexHeldCount+0x14>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	b11a      	cbz	r2, 8007d86 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007d82:	3201      	adds	r2, #1
 8007d84:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8007d86:	6818      	ldr	r0, [r3, #0]
	}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	24001ec8 	.word	0x24001ec8

08007d90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007d92:	4c12      	ldr	r4, [pc, #72]	; (8007ddc <prvCheckForValidListAndQueue+0x4c>)
{
 8007d94:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8007d96:	f000 fa7d 	bl	8008294 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007d9a:	6825      	ldr	r5, [r4, #0]
 8007d9c:	b125      	cbz	r5, 8007da8 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8007d9e:	b003      	add	sp, #12
 8007da0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007da4:	f000 ba98 	b.w	80082d8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8007da8:	4f0d      	ldr	r7, [pc, #52]	; (8007de0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8007daa:	4e0e      	ldr	r6, [pc, #56]	; (8007de4 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7fe fb9d 	bl	80064ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7fe fb9a 	bl	80064ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007db8:	4a0b      	ldr	r2, [pc, #44]	; (8007de8 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dba:	9500      	str	r5, [sp, #0]
 8007dbc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8007dbe:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dc0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8007dc2:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8007dc6:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dc8:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <prvCheckForValidListAndQueue+0x64>)
 8007dca:	f7fe fca9 	bl	8006720 <xQueueGenericCreateStatic>
 8007dce:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d0e4      	beq.n	8007d9e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dd4:	4908      	ldr	r1, [pc, #32]	; (8007df8 <prvCheckForValidListAndQueue+0x68>)
 8007dd6:	f7ff f9a1 	bl	800711c <vQueueAddToRegistry>
 8007dda:	e7e0      	b.n	8007d9e <prvCheckForValidListAndQueue+0xe>
 8007ddc:	240024e8 	.word	0x240024e8
 8007de0:	2400246c 	.word	0x2400246c
 8007de4:	24002480 	.word	0x24002480
 8007de8:	240023c4 	.word	0x240023c4
 8007dec:	240023c8 	.word	0x240023c8
 8007df0:	24002498 	.word	0x24002498
 8007df4:	240023cc 	.word	0x240023cc
 8007df8:	08010508 	.word	0x08010508

08007dfc <xTimerCreateTimerTask>:
{
 8007dfc:	b530      	push	{r4, r5, lr}
 8007dfe:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8007e00:	f7ff ffc6 	bl	8007d90 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <xTimerCreateTimerTask+0x54>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	b1cb      	cbz	r3, 8007e3e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e0a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e0c:	aa07      	add	r2, sp, #28
 8007e0e:	a906      	add	r1, sp, #24
 8007e10:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e12:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e14:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e18:	f7fe fb58 	bl	80064cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	9a07      	ldr	r2, [sp, #28]
 8007e20:	9500      	str	r5, [sp, #0]
 8007e22:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8007e26:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8007e2a:	490a      	ldr	r1, [pc, #40]	; (8007e54 <xTimerCreateTimerTask+0x58>)
 8007e2c:	480a      	ldr	r0, [pc, #40]	; (8007e58 <xTimerCreateTimerTask+0x5c>)
 8007e2e:	f7ff fb2b 	bl	8007488 <xTaskCreateStatic>
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <xTimerCreateTimerTask+0x60>)
 8007e34:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007e36:	b110      	cbz	r0, 8007e3e <xTimerCreateTimerTask+0x42>
}
 8007e38:	2001      	movs	r0, #1
 8007e3a:	b009      	add	sp, #36	; 0x24
 8007e3c:	bd30      	pop	{r4, r5, pc}
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007e4e:	e7fe      	b.n	8007e4e <xTimerCreateTimerTask+0x52>
 8007e50:	240024e8 	.word	0x240024e8
 8007e54:	08010510 	.word	0x08010510
 8007e58:	08007f4d 	.word	0x08007f4d
 8007e5c:	240024ec 	.word	0x240024ec

08007e60 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007e60:	b1c8      	cbz	r0, 8007e96 <xTimerGenericCommand+0x36>
{
 8007e62:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8007e64:	4e17      	ldr	r6, [pc, #92]	; (8007ec4 <xTimerGenericCommand+0x64>)
{
 8007e66:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8007e68:	6834      	ldr	r4, [r6, #0]
 8007e6a:	b18c      	cbz	r4, 8007e90 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e6c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e6e:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8007e70:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e74:	dc18      	bgt.n	8007ea8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e76:	f7ff fe8f 	bl	8007b98 <xTaskGetSchedulerState>
 8007e7a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e7c:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e80:	d01a      	beq.n	8007eb8 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e82:	4669      	mov	r1, sp
 8007e84:	461a      	mov	r2, r3
 8007e86:	6830      	ldr	r0, [r6, #0]
 8007e88:	f7fe fd06 	bl	8006898 <xQueueGenericSend>
}
 8007e8c:	b004      	add	sp, #16
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8007e90:	4620      	mov	r0, r4
}
 8007e92:	b004      	add	sp, #16
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	f383 8811 	msr	BASEPRI, r3
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007ea6:	e7fe      	b.n	8007ea6 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4669      	mov	r1, sp
 8007eac:	2300      	movs	r3, #0
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7fe fe2a 	bl	8006b08 <xQueueGenericSendFromISR>
}
 8007eb4:	b004      	add	sp, #16
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eb8:	9a08      	ldr	r2, [sp, #32]
 8007eba:	4669      	mov	r1, sp
 8007ebc:	6830      	ldr	r0, [r6, #0]
 8007ebe:	f7fe fceb 	bl	8006898 <xQueueGenericSend>
 8007ec2:	e7e6      	b.n	8007e92 <xTimerGenericCommand+0x32>
 8007ec4:	240024e8 	.word	0x240024e8

08007ec8 <prvSwitchTimerLists>:
{
 8007ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	4e1d      	ldr	r6, [pc, #116]	; (8007f44 <prvSwitchTimerLists+0x7c>)
 8007ece:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed0:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ed4:	e00d      	b.n	8007ef2 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ed6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007eda:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007edc:	1d25      	adds	r5, r4, #4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f7fe fb3c 	bl	800655c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ee4:	6a23      	ldr	r3, [r4, #32]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007eee:	075b      	lsls	r3, r3, #29
 8007ef0:	d40a      	bmi.n	8007f08 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ef2:	6833      	ldr	r3, [r6, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	d1ed      	bne.n	8007ed6 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8007efa:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <prvSwitchTimerLists+0x80>)
 8007efc:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007efe:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f00:	6031      	str	r1, [r6, #0]
}
 8007f02:	b002      	add	sp, #8
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f08:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f0a:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f10:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f12:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8007f14:	42af      	cmp	r7, r5
 8007f16:	d205      	bcs.n	8007f24 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f18:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f1a:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f1c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f1e:	f7fe fb05 	bl	800652c <vListInsert>
 8007f22:	e7e6      	b.n	8007ef2 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f24:	4619      	mov	r1, r3
 8007f26:	f8cd 8000 	str.w	r8, [sp]
 8007f2a:	f7ff ff99 	bl	8007e60 <xTimerGenericCommand>
				configASSERT( xResult );
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d1df      	bne.n	8007ef2 <prvSwitchTimerLists+0x2a>
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	e7fe      	b.n	8007f42 <prvSwitchTimerLists+0x7a>
 8007f44:	240023c4 	.word	0x240023c4
 8007f48:	240023c8 	.word	0x240023c8

08007f4c <prvTimerTask>:
{
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	4e96      	ldr	r6, [pc, #600]	; (80081ac <prvTimerTask+0x260>)
 8007f52:	b087      	sub	sp, #28
 8007f54:	4d96      	ldr	r5, [pc, #600]	; (80081b0 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8007f56:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8007f5a:	4c96      	ldr	r4, [pc, #600]	; (80081b4 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	681f      	ldr	r7, [r3, #0]
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	f000 80a9 	beq.w	80080b8 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8007f6a:	f7ff fb49 	bl	8007600 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007f6e:	f7ff fb4f 	bl	8007610 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007f72:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8007f74:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007f76:	4290      	cmp	r0, r2
 8007f78:	f0c0 80a6 	bcc.w	80080c8 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f7c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8007f7e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f80:	f200 80c7 	bhi.w	8008112 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8007f84:	f7ff fc90 	bl	80078a8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f88:	6832      	ldr	r2, [r6, #0]
 8007f8a:	68d2      	ldr	r2, [r2, #12]
 8007f8c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f90:	f10b 0804 	add.w	r8, fp, #4
 8007f94:	4640      	mov	r0, r8
 8007f96:	f7fe fae1 	bl	800655c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f9a:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8007f9e:	0743      	lsls	r3, r0, #29
 8007fa0:	f100 80c6 	bmi.w	8008130 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fa4:	f020 0001 	bic.w	r0, r0, #1
 8007fa8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fac:	f8db 3020 	ldr.w	r3, [fp, #32]
 8007fb0:	4658      	mov	r0, fp
 8007fb2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	a902      	add	r1, sp, #8
 8007fb8:	6820      	ldr	r0, [r4, #0]
 8007fba:	f7fe fe67 	bl	8006c8c <xQueueReceive>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d0cc      	beq.n	8007f5c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	db6e      	blt.n	80080a6 <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fc8:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	b113      	cbz	r3, 8007fd4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fce:	1d38      	adds	r0, r7, #4
 8007fd0:	f7fe fac4 	bl	800655c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8007fd4:	f7ff fb1c 	bl	8007610 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007fd8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8007fda:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8007fdc:	4298      	cmp	r0, r3
 8007fde:	d37a      	bcc.n	80080d6 <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8007fe0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8007fe2:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8007fe6:	2b09      	cmp	r3, #9
 8007fe8:	d8e4      	bhi.n	8007fb4 <prvTimerTask+0x68>
 8007fea:	e8df f003 	tbb	[pc, r3]
 8007fee:	0505      	.short	0x0505
 8007ff0:	53364c05 	.word	0x53364c05
 8007ff4:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ffc:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008002:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008004:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008006:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800800a:	185a      	adds	r2, r3, r1
 800800c:	bf2c      	ite	cs
 800800e:	2001      	movcs	r0, #1
 8008010:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008012:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008014:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008016:	d87e      	bhi.n	8008116 <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008018:	eba8 0303 	sub.w	r3, r8, r3
 800801c:	4299      	cmp	r1, r3
 800801e:	f200 80b0 	bhi.w	8008182 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	4638      	mov	r0, r7
 8008026:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800802c:	0759      	lsls	r1, r3, #29
 800802e:	d5c1      	bpl.n	8007fb4 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008030:	2200      	movs	r2, #0
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	4638      	mov	r0, r7
 8008036:	9200      	str	r2, [sp, #0]
 8008038:	9a03      	ldr	r2, [sp, #12]
 800803a:	441a      	add	r2, r3
 800803c:	2300      	movs	r3, #0
 800803e:	4619      	mov	r1, r3
 8008040:	f7ff ff0e 	bl	8007e60 <xTimerGenericCommand>
							configASSERT( xResult );
 8008044:	2800      	cmp	r0, #0
 8008046:	d1b5      	bne.n	8007fb4 <prvTimerTask+0x68>
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	e7fe      	b.n	8008058 <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800805a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800805e:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008060:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008064:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008066:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8095 	beq.w	800819a <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008070:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008072:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008074:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008076:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008078:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800807a:	d855      	bhi.n	8008128 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800807c:	4b4e      	ldr	r3, [pc, #312]	; (80081b8 <prvTimerTask+0x26c>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	f7fe fa54 	bl	800652c <vListInsert>
	return xProcessTimerNow;
 8008084:	e796      	b.n	8007fb4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008086:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8008092:	e78f      	b.n	8007fb4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008094:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008098:	079a      	lsls	r2, r3, #30
 800809a:	d569      	bpl.n	8008170 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80080a4:	e786      	b.n	8007fb4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ac:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f6ff af7f 	blt.w	8007fb4 <prvTimerTask+0x68>
 80080b6:	e787      	b.n	8007fc8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 80080b8:	f7ff faa2 	bl	8007600 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80080bc:	f7ff faa8 	bl	8007610 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80080c0:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80080c2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80080c4:	4290      	cmp	r0, r2
 80080c6:	d209      	bcs.n	80080dc <prvTimerTask+0x190>
		prvSwitchTimerLists();
 80080c8:	f7ff fefe 	bl	8007ec8 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80080cc:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80080d0:	f7ff fbea 	bl	80078a8 <xTaskResumeAll>
 80080d4:	e76e      	b.n	8007fb4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80080d6:	f7ff fef7 	bl	8007ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080da:	e781      	b.n	8007fe0 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 80080de:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	fab2 f282 	clz	r2, r2
 80080ea:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080ec:	eba7 010a 	sub.w	r1, r7, sl
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	f7ff f829 	bl	8007148 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080f6:	f7ff fbd7 	bl	80078a8 <xTaskResumeAll>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f47f af5a 	bne.w	8007fb4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8008100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008104:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	e750      	b.n	8007fb4 <prvTimerTask+0x68>
 8008112:	2200      	movs	r2, #0
 8008114:	e7ea      	b.n	80080ec <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008116:	4543      	cmp	r3, r8
 8008118:	d901      	bls.n	800811e <prvTimerTask+0x1d2>
 800811a:	2800      	cmp	r0, #0
 800811c:	d081      	beq.n	8008022 <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800811e:	1d39      	adds	r1, r7, #4
 8008120:	6830      	ldr	r0, [r6, #0]
 8008122:	f7fe fa03 	bl	800652c <vListInsert>
	return xProcessTimerNow;
 8008126:	e745      	b.n	8007fb4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008128:	6830      	ldr	r0, [r6, #0]
 800812a:	f7fe f9ff 	bl	800652c <vListInsert>
 800812e:	e741      	b.n	8007fb4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008130:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008134:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008138:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800813a:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800813c:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008140:	d31a      	bcc.n	8008178 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008142:	ebaa 0307 	sub.w	r3, sl, r7
 8008146:	429a      	cmp	r2, r3
 8008148:	d821      	bhi.n	800818e <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800814a:	2300      	movs	r3, #0
 800814c:	463a      	mov	r2, r7
 800814e:	4658      	mov	r0, fp
 8008150:	4619      	mov	r1, r3
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	f7ff fe84 	bl	8007e60 <xTimerGenericCommand>
			configASSERT( xResult );
 8008158:	2800      	cmp	r0, #0
 800815a:	f47f af27 	bne.w	8007fac <prvTimerTask+0x60>
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	e7fe      	b.n	800816e <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8008170:	4638      	mov	r0, r7
 8008172:	f000 faa1 	bl	80086b8 <vPortFree>
 8008176:	e71d      	b.n	8007fb4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008178:	4641      	mov	r1, r8
 800817a:	6830      	ldr	r0, [r6, #0]
 800817c:	f7fe f9d6 	bl	800652c <vListInsert>
	return xProcessTimerNow;
 8008180:	e714      	b.n	8007fac <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <prvTimerTask+0x26c>)
 8008184:	1d39      	adds	r1, r7, #4
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f7fe f9d0 	bl	800652c <vListInsert>
	return xProcessTimerNow;
 800818c:	e712      	b.n	8007fb4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <prvTimerTask+0x26c>)
 8008190:	4641      	mov	r1, r8
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	f7fe f9ca 	bl	800652c <vListInsert>
	return xProcessTimerNow;
 8008198:	e708      	b.n	8007fac <prvTimerTask+0x60>
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081aa:	e7fe      	b.n	80081aa <prvTimerTask+0x25e>
 80081ac:	240023c4 	.word	0x240023c4
 80081b0:	24002494 	.word	0x24002494
 80081b4:	240024e8 	.word	0x240024e8
 80081b8:	240023c8 	.word	0x240023c8

080081bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081bc:	4808      	ldr	r0, [pc, #32]	; (80081e0 <prvPortStartFirstTask+0x24>)
 80081be:	6800      	ldr	r0, [r0, #0]
 80081c0:	6800      	ldr	r0, [r0, #0]
 80081c2:	f380 8808 	msr	MSP, r0
 80081c6:	f04f 0000 	mov.w	r0, #0
 80081ca:	f380 8814 	msr	CONTROL, r0
 80081ce:	b662      	cpsie	i
 80081d0:	b661      	cpsie	f
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	df00      	svc	0
 80081dc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081de:	0000      	.short	0x0000
 80081e0:	e000ed08 	.word	0xe000ed08

080081e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081f4 <vPortEnableVFP+0x10>
 80081e8:	6801      	ldr	r1, [r0, #0]
 80081ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ee:	6001      	str	r1, [r0, #0]
 80081f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081f2:	0000      	.short	0x0000
 80081f4:	e000ed88 	.word	0xe000ed88

080081f8 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <prvTaskExitError+0x3c>)
{
 80081fa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80081fc:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80081fe:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8008200:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008202:	3301      	adds	r3, #1
 8008204:	d008      	beq.n	8008218 <prvTaskExitError+0x20>
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	e7fe      	b.n	8008216 <prvTaskExitError+0x1e>
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0fc      	beq.n	8008228 <prvTaskExitError+0x30>
}
 800822e:	b002      	add	sp, #8
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	2400006c 	.word	0x2400006c

08008238 <pxPortInitialiseStack>:
{
 8008238:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800823a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800823e:	4809      	ldr	r0, [pc, #36]	; (8008264 <pxPortInitialiseStack+0x2c>)
{
 8008240:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008242:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008246:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800824a:	f843 2c20 	str.w	r2, [r3, #-32]
}
 800824e:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008252:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008256:	f06f 0102 	mvn.w	r1, #2
}
 800825a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800825e:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8008262:	4770      	bx	lr
 8008264:	080081f9 	.word	0x080081f9
	...

08008270 <SVC_Handler>:
	__asm volatile (
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <pxCurrentTCBConst2>)
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	6808      	ldr	r0, [r1, #0]
 8008276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f380 8809 	msr	PSP, r0
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f380 8811 	msr	BASEPRI, r0
 800828a:	4770      	bx	lr
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst2>:
 8008290:	24001ec8 	.word	0x24001ec8

08008294 <vPortEnterCritical>:
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80082a4:	4a0b      	ldr	r2, [pc, #44]	; (80082d4 <vPortEnterCritical+0x40>)
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80082aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80082ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80082ae:	d000      	beq.n	80082b2 <vPortEnterCritical+0x1e>
}
 80082b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082b6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0f7      	beq.n	80082b0 <vPortEnterCritical+0x1c>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	e7fe      	b.n	80082d0 <vPortEnterCritical+0x3c>
 80082d2:	bf00      	nop
 80082d4:	2400006c 	.word	0x2400006c

080082d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <vPortExitCritical+0x24>)
 80082da:	6813      	ldr	r3, [r2, #0]
 80082dc:	b943      	cbnz	r3, 80082f0 <vPortExitCritical+0x18>
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	e7fe      	b.n	80082ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80082f0:	3b01      	subs	r3, #1
 80082f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082f4:	b90b      	cbnz	r3, 80082fa <vPortExitCritical+0x22>
	__asm volatile
 80082f6:	f383 8811 	msr	BASEPRI, r3
}
 80082fa:	4770      	bx	lr
 80082fc:	2400006c 	.word	0x2400006c

08008300 <PendSV_Handler>:
	__asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <pxCurrentTCBConst>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f01e 0f10 	tst.w	lr, #16
 8008310:	bf08      	it	eq
 8008312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008324:	f380 8811 	msr	BASEPRI, r0
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f7ff fafa 	bl	8007928 <vTaskSwitchContext>
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	f380 8811 	msr	BASEPRI, r0
 800833c:	bc09      	pop	{r0, r3}
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	6808      	ldr	r0, [r1, #0]
 8008342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008346:	f01e 0f10 	tst.w	lr, #16
 800834a:	bf08      	it	eq
 800834c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008350:	f380 8809 	msr	PSP, r0
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst>:
 8008360:	24001ec8 	.word	0x24001ec8

08008364 <xPortSysTickHandler>:
{
 8008364:	b508      	push	{r3, lr}
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008376:	f7ff f959 	bl	800762c <xTaskIncrementTick>
 800837a:	b128      	cbz	r0, 8008388 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800837c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008384:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008388:	2300      	movs	r3, #0
 800838a:	f383 8811 	msr	BASEPRI, r3
}
 800838e:	bd08      	pop	{r3, pc}

08008390 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008394:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008396:	4806      	ldr	r0, [pc, #24]	; (80083b0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008398:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839a:	4906      	ldr	r1, [pc, #24]	; (80083b4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800839c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083a0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083a2:	fba1 1303 	umull	r1, r3, r1, r3
 80083a6:	099b      	lsrs	r3, r3, #6
 80083a8:	3b01      	subs	r3, #1
 80083aa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ac:	6110      	str	r0, [r2, #16]
}
 80083ae:	4770      	bx	lr
 80083b0:	24000008 	.word	0x24000008
 80083b4:	10624dd3 	.word	0x10624dd3

080083b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083bc:	4a3d      	ldr	r2, [pc, #244]	; (80084b4 <xPortStartScheduler+0xfc>)
 80083be:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80083c2:	4291      	cmp	r1, r2
 80083c4:	d041      	beq.n	800844a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80083ca:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <xPortStartScheduler+0x100>)
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d033      	beq.n	8008438 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083d0:	4b3a      	ldr	r3, [pc, #232]	; (80084bc <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083d2:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083d4:	493a      	ldr	r1, [pc, #232]	; (80084c0 <xPortStartScheduler+0x108>)
{
 80083d6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083d8:	781a      	ldrb	r2, [r3, #0]
{
 80083da:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083dc:	4c39      	ldr	r4, [pc, #228]	; (80084c4 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083e2:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083e4:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083e6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083e8:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083fc:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083fe:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008400:	d511      	bpl.n	8008426 <xPortStartScheduler+0x6e>
 8008402:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008404:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008408:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800840a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008414:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8008418:	0609      	lsls	r1, r1, #24
 800841a:	d4f3      	bmi.n	8008404 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800841c:	2803      	cmp	r0, #3
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	f88d 3003 	strb.w	r3, [sp, #3]
 8008424:	d01a      	beq.n	800845c <xPortStartScheduler+0xa4>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	e7fe      	b.n	8008436 <xPortStartScheduler+0x7e>
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008448:	e7fe      	b.n	8008448 <xPortStartScheduler+0x90>
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800845a:	e7fe      	b.n	800845a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800845c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800845e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008464:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008468:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800846a:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 800846c:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800846e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008470:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 8008474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008478:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800847c:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 8008480:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008484:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008488:	f7ff ff82 	bl	8008390 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <xPortStartScheduler+0x110>)
 800848e:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8008490:	f7ff fea8 	bl	80081e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008494:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 8008498:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800849c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 80084a0:	f7ff fe8c 	bl	80081bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 80084a4:	f7ff fa40 	bl	8007928 <vTaskSwitchContext>
}
 80084a8:	4620      	mov	r0, r4
	prvTaskExitError();
 80084aa:	f7ff fea5 	bl	80081f8 <prvTaskExitError>
}
 80084ae:	b003      	add	sp, #12
 80084b0:	bd30      	pop	{r4, r5, pc}
 80084b2:	bf00      	nop
 80084b4:	410fc271 	.word	0x410fc271
 80084b8:	410fc270 	.word	0x410fc270
 80084bc:	e000e400 	.word	0xe000e400
 80084c0:	240024f0 	.word	0x240024f0
 80084c4:	240024f4 	.word	0x240024f4
 80084c8:	2400006c 	.word	0x2400006c

080084cc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084cc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084d0:	2b0f      	cmp	r3, #15
 80084d2:	d90e      	bls.n	80084f2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084d4:	4911      	ldr	r1, [pc, #68]	; (800851c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084d6:	4a12      	ldr	r2, [pc, #72]	; (8008520 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084d8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d908      	bls.n	80084f2 <vPortValidateInterruptPriority+0x26>
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	e7fe      	b.n	80084f0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084f6:	4a0b      	ldr	r2, [pc, #44]	; (8008524 <vPortValidateInterruptPriority+0x58>)
 80084f8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008502:	4293      	cmp	r3, r2
 8008504:	d908      	bls.n	8008518 <vPortValidateInterruptPriority+0x4c>
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	e7fe      	b.n	8008516 <vPortValidateInterruptPriority+0x4a>
	}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	e000e3f0 	.word	0xe000e3f0
 8008520:	240024f0 	.word	0x240024f0
 8008524:	240024f4 	.word	0x240024f4

08008528 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008528:	4b16      	ldr	r3, [pc, #88]	; (8008584 <prvInsertBlockIntoFreeList+0x5c>)
 800852a:	461a      	mov	r2, r3
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4283      	cmp	r3, r0
 8008530:	d3fb      	bcc.n	800852a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008532:	6851      	ldr	r1, [r2, #4]
 8008534:	eb02 0c01 	add.w	ip, r2, r1
 8008538:	4560      	cmp	r0, ip
 800853a:	d01a      	beq.n	8008572 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800853c:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800853e:	eb00 0c01 	add.w	ip, r0, r1
 8008542:	4563      	cmp	r3, ip
 8008544:	d005      	beq.n	8008552 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008546:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008548:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800854a:	bf18      	it	ne
 800854c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800854e:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008550:	4610      	mov	r0, r2
{
 8008552:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008554:	4c0c      	ldr	r4, [pc, #48]	; (8008588 <prvInsertBlockIntoFreeList+0x60>)
 8008556:	6824      	ldr	r4, [r4, #0]
 8008558:	42a3      	cmp	r3, r4
 800855a:	d003      	beq.n	8008564 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800855c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008560:	4421      	add	r1, r4
 8008562:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 8008564:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008566:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008568:	d000      	beq.n	800856c <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800856a:	6010      	str	r0, [r2, #0]
	}
}
 800856c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008570:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008572:	6840      	ldr	r0, [r0, #4]
 8008574:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008576:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008578:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800857a:	4283      	cmp	r3, r0
 800857c:	d0e8      	beq.n	8008550 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800857e:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	24009d10 	.word	0x24009d10
 8008588:	240024f8 	.word	0x240024f8

0800858c <pvPortMalloc>:
{
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8008590:	4e42      	ldr	r6, [pc, #264]	; (800869c <pvPortMalloc+0x110>)
{
 8008592:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008594:	f7ff f834 	bl	8007600 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008598:	6833      	ldr	r3, [r6, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d05a      	beq.n	8008654 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800859e:	4b40      	ldr	r3, [pc, #256]	; (80086a0 <pvPortMalloc+0x114>)
 80085a0:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 80085a2:	422c      	tst	r4, r5
 80085a4:	d12e      	bne.n	8008604 <pvPortMalloc+0x78>
 80085a6:	b36c      	cbz	r4, 8008604 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085a8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80085aa:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085ae:	d002      	beq.n	80085b6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085b0:	f021 0107 	bic.w	r1, r1, #7
 80085b4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085b6:	b329      	cbz	r1, 8008604 <pvPortMalloc+0x78>
 80085b8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80086b4 <pvPortMalloc+0x128>
 80085bc:	f8d8 7000 	ldr.w	r7, [r8]
 80085c0:	428f      	cmp	r7, r1
 80085c2:	d31f      	bcc.n	8008604 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 80085c4:	4837      	ldr	r0, [pc, #220]	; (80086a4 <pvPortMalloc+0x118>)
 80085c6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085c8:	e003      	b.n	80085d2 <pvPortMalloc+0x46>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	b123      	cbz	r3, 80085d8 <pvPortMalloc+0x4c>
 80085ce:	4620      	mov	r0, r4
 80085d0:	461c      	mov	r4, r3
 80085d2:	6862      	ldr	r2, [r4, #4]
 80085d4:	428a      	cmp	r2, r1
 80085d6:	d3f8      	bcc.n	80085ca <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80085d8:	6833      	ldr	r3, [r6, #0]
 80085da:	42a3      	cmp	r3, r4
 80085dc:	d012      	beq.n	8008604 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085de:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085e0:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085e2:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085e4:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085e6:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d916      	bls.n	800861a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085ec:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085ee:	0742      	lsls	r2, r0, #29
 80085f0:	d00e      	beq.n	8008610 <pvPortMalloc+0x84>
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	e7fe      	b.n	8008602 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8008604:	2600      	movs	r6, #0
 8008606:	f7ff f94f 	bl	80078a8 <xTaskResumeAll>
}
 800860a:	4630      	mov	r0, r6
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008610:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008612:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008614:	f7ff ff88 	bl	8008528 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008618:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800861a:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800861c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 800861e:	4923      	ldr	r1, [pc, #140]	; (80086ac <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008620:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008622:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008624:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008626:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800862a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800862c:	bf38      	it	cc
 800862e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008630:	680b      	ldr	r3, [r1, #0]
 8008632:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 8008634:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 8008638:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800863a:	f7ff f935 	bl	80078a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800863e:	0773      	lsls	r3, r6, #29
 8008640:	d0e3      	beq.n	800860a <pvPortMalloc+0x7e>
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	e7fe      	b.n	8008652 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 8008654:	4b16      	ldr	r3, [pc, #88]	; (80086b0 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008656:	075d      	lsls	r5, r3, #29
 8008658:	d119      	bne.n	800868e <pvPortMalloc+0x102>
 800865a:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
 800865e:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 8008660:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 8008662:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008664:	4d0f      	ldr	r5, [pc, #60]	; (80086a4 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008666:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800866a:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800866e:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 8008670:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008672:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 8008676:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800867a:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800867e:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <pvPortMalloc+0x11c>)
}
 8008680:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008684:	4a0b      	ldr	r2, [pc, #44]	; (80086b4 <pvPortMalloc+0x128>)
 8008686:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <pvPortMalloc+0x114>)
 800868a:	601f      	str	r7, [r3, #0]
}
 800868c:	e789      	b.n	80085a2 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800868e:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008690:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008694:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008698:	460b      	mov	r3, r1
 800869a:	e7e1      	b.n	8008660 <pvPortMalloc+0xd4>
 800869c:	240024f8 	.word	0x240024f8
 80086a0:	24009cfc 	.word	0x24009cfc
 80086a4:	24009d10 	.word	0x24009d10
 80086a8:	24009d04 	.word	0x24009d04
 80086ac:	24009d08 	.word	0x24009d08
 80086b0:	240024fc 	.word	0x240024fc
 80086b4:	24009d00 	.word	0x24009d00

080086b8 <vPortFree>:
	if( pv != NULL )
 80086b8:	b1d0      	cbz	r0, 80086f0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086ba:	4a1c      	ldr	r2, [pc, #112]	; (800872c <vPortFree+0x74>)
 80086bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80086c0:	6812      	ldr	r2, [r2, #0]
 80086c2:	4213      	tst	r3, r2
 80086c4:	d00b      	beq.n	80086de <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086c6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80086ca:	b191      	cbz	r1, 80086f2 <vPortFree+0x3a>
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	e7fe      	b.n	80086dc <vPortFree+0x24>
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086ee:	e7fe      	b.n	80086ee <vPortFree+0x36>
 80086f0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086f2:	ea23 0302 	bic.w	r3, r3, r2
{
 80086f6:	b500      	push	{lr}
 80086f8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086fa:	f840 3c04 	str.w	r3, [r0, #-4]
 80086fe:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8008700:	f7fe ff7e 	bl	8007600 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008704:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <vPortFree+0x78>)
 8008706:	9801      	ldr	r0, [sp, #4]
 8008708:	6811      	ldr	r1, [r2, #0]
 800870a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800870e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008710:	440b      	add	r3, r1
 8008712:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008714:	f7ff ff08 	bl	8008528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008718:	4a06      	ldr	r2, [pc, #24]	; (8008734 <vPortFree+0x7c>)
 800871a:	6813      	ldr	r3, [r2, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	6013      	str	r3, [r2, #0]
}
 8008720:	b003      	add	sp, #12
 8008722:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8008726:	f7ff b8bf 	b.w	80078a8 <xTaskResumeAll>
 800872a:	bf00      	nop
 800872c:	24009cfc 	.word	0x24009cfc
 8008730:	24009d00 	.word	0x24009d00
 8008734:	24009d0c 	.word	0x24009d0c

08008738 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800873c:	f7fd fc1c 	bl	8005f78 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8008740:	f7fd fb62 	bl	8005e08 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8008744:	4b2c      	ldr	r3, [pc, #176]	; (80087f8 <tcpip_thread+0xc0>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	b113      	cbz	r3, 8008750 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800874a:	4a2c      	ldr	r2, [pc, #176]	; (80087fc <tcpip_thread+0xc4>)
 800874c:	6810      	ldr	r0, [r2, #0]
 800874e:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008750:	4d2b      	ldr	r5, [pc, #172]	; (8008800 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008752:	4f2c      	ldr	r7, [pc, #176]	; (8008804 <tcpip_thread+0xcc>)
 8008754:	4e2c      	ldr	r6, [pc, #176]	; (8008808 <tcpip_thread+0xd0>)
 8008756:	e00e      	b.n	8008776 <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 8008758:	b158      	cbz	r0, 8008772 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800875a:	f7fd fbd3 	bl	8005f04 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800875e:	4622      	mov	r2, r4
 8008760:	a901      	add	r1, sp, #4
 8008762:	4628      	mov	r0, r5
 8008764:	f006 fc90 	bl	800f088 <sys_arch_mbox_fetch>
 8008768:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800876a:	f7fd fb4d 	bl	8005e08 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800876e:	3401      	adds	r4, #1
 8008770:	d111      	bne.n	8008796 <tcpip_thread+0x5e>
    sys_check_timeouts();
 8008772:	f004 ff0f 	bl	800d594 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 8008776:	f7fd fbcf 	bl	8005f18 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800877a:	f004 ff35 	bl	800d5e8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800877e:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8008780:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008782:	d1e9      	bne.n	8008758 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 8008784:	f7fd fbbe 	bl	8005f04 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8008788:	2200      	movs	r2, #0
 800878a:	a901      	add	r1, sp, #4
 800878c:	4628      	mov	r0, r5
 800878e:	f006 fc7b 	bl	800f088 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008792:	f7fd fb39 	bl	8005e08 <sys_lock_tcpip_core>
    if (msg == NULL) {
 8008796:	9c01      	ldr	r4, [sp, #4]
 8008798:	b164      	cbz	r4, 80087b4 <tcpip_thread+0x7c>
  switch (msg->type) {
 800879a:	7823      	ldrb	r3, [r4, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d01e      	beq.n	80087de <tcpip_thread+0xa6>
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d018      	beq.n	80087d6 <tcpip_thread+0x9e>
 80087a4:	b16b      	cbz	r3, 80087c2 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80087a6:	463b      	mov	r3, r7
 80087a8:	22cf      	movs	r2, #207	; 0xcf
 80087aa:	4631      	mov	r1, r6
 80087ac:	4817      	ldr	r0, [pc, #92]	; (800880c <tcpip_thread+0xd4>)
 80087ae:	f006 ff07 	bl	800f5c0 <iprintf>
      break;
 80087b2:	e7e0      	b.n	8008776 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80087b4:	463b      	mov	r3, r7
 80087b6:	2291      	movs	r2, #145	; 0x91
 80087b8:	4631      	mov	r1, r6
 80087ba:	4814      	ldr	r0, [pc, #80]	; (800880c <tcpip_thread+0xd4>)
 80087bc:	f006 ff00 	bl	800f5c0 <iprintf>
      continue;
 80087c0:	e7d9      	b.n	8008776 <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80087c2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80087c6:	6860      	ldr	r0, [r4, #4]
 80087c8:	4798      	blx	r3
 80087ca:	b980      	cbnz	r0, 80087ee <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80087cc:	4621      	mov	r1, r4
 80087ce:	2009      	movs	r0, #9
 80087d0:	f000 fcb2 	bl	8009138 <memp_free>
      break;
 80087d4:	e7cf      	b.n	8008776 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80087d6:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80087da:	4798      	blx	r3
      break;
 80087dc:	e7cb      	b.n	8008776 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80087de:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80087e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80087e4:	4621      	mov	r1, r4
 80087e6:	2008      	movs	r0, #8
 80087e8:	f000 fca6 	bl	8009138 <memp_free>
      break;
 80087ec:	e7c3      	b.n	8008776 <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 80087ee:	6860      	ldr	r0, [r4, #4]
 80087f0:	f001 f868 	bl	80098c4 <pbuf_free>
 80087f4:	e7ea      	b.n	80087cc <tcpip_thread+0x94>
 80087f6:	bf00      	nop
 80087f8:	24009d1c 	.word	0x24009d1c
 80087fc:	24009d20 	.word	0x24009d20
 8008800:	24009d24 	.word	0x24009d24
 8008804:	08010518 	.word	0x08010518
 8008808:	08010548 	.word	0x08010548
 800880c:	08010440 	.word	0x08010440

08008810 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008814:	4813      	ldr	r0, [pc, #76]	; (8008864 <tcpip_inpkt+0x54>)
{
 8008816:	460e      	mov	r6, r1
 8008818:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800881a:	f006 fc55 	bl	800f0c8 <sys_mbox_valid>
 800881e:	b178      	cbz	r0, 8008840 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008820:	2009      	movs	r0, #9
 8008822:	f000 fc43 	bl	80090ac <memp_malloc>
  if (msg == NULL) {
 8008826:	4604      	mov	r4, r0
 8008828:	b1c0      	cbz	r0, 800885c <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800882a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800882c:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800882e:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008830:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8008832:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008834:	480b      	ldr	r0, [pc, #44]	; (8008864 <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 8008836:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008838:	f006 fc16 	bl	800f068 <sys_mbox_trypost>
 800883c:	b938      	cbnz	r0, 800884e <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800883e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008840:	4b09      	ldr	r3, [pc, #36]	; (8008868 <tcpip_inpkt+0x58>)
 8008842:	22fc      	movs	r2, #252	; 0xfc
 8008844:	4909      	ldr	r1, [pc, #36]	; (800886c <tcpip_inpkt+0x5c>)
 8008846:	480a      	ldr	r0, [pc, #40]	; (8008870 <tcpip_inpkt+0x60>)
 8008848:	f006 feba 	bl	800f5c0 <iprintf>
 800884c:	e7e8      	b.n	8008820 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800884e:	4621      	mov	r1, r4
 8008850:	2009      	movs	r0, #9
 8008852:	f000 fc71 	bl	8009138 <memp_free>
    return ERR_MEM;
 8008856:	f04f 30ff 	mov.w	r0, #4294967295
}
 800885a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008862:	bf00      	nop
 8008864:	24009d24 	.word	0x24009d24
 8008868:	08010518 	.word	0x08010518
 800886c:	08010568 	.word	0x08010568
 8008870:	08010440 	.word	0x08010440

08008874 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008874:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8008878:	f013 0f18 	tst.w	r3, #24
 800887c:	d002      	beq.n	8008884 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800887e:	4a03      	ldr	r2, [pc, #12]	; (800888c <tcpip_input+0x18>)
 8008880:	f7ff bfc6 	b.w	8008810 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008884:	4a02      	ldr	r2, [pc, #8]	; (8008890 <tcpip_input+0x1c>)
 8008886:	f7ff bfc3 	b.w	8008810 <tcpip_inpkt>
 800888a:	bf00      	nop
 800888c:	0800ef31 	.word	0x0800ef31
 8008890:	0800e35d 	.word	0x0800e35d

08008894 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008898:	4812      	ldr	r0, [pc, #72]	; (80088e4 <tcpip_try_callback+0x50>)
{
 800889a:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800889c:	f006 fc14 	bl	800f0c8 <sys_mbox_valid>
 80088a0:	b170      	cbz	r0, 80088c0 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80088a2:	2008      	movs	r0, #8
 80088a4:	f000 fc02 	bl	80090ac <memp_malloc>
  if (msg == NULL) {
 80088a8:	4604      	mov	r4, r0
 80088aa:	b1c0      	cbz	r0, 80088de <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80088ac:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80088ae:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 80088b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80088b4:	480b      	ldr	r0, [pc, #44]	; (80088e4 <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 80088b6:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80088b8:	f006 fbd6 	bl	800f068 <sys_mbox_trypost>
 80088bc:	b940      	cbnz	r0, 80088d0 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80088be:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <tcpip_try_callback+0x54>)
 80088c2:	f240 125d 	movw	r2, #349	; 0x15d
 80088c6:	4909      	ldr	r1, [pc, #36]	; (80088ec <tcpip_try_callback+0x58>)
 80088c8:	4809      	ldr	r0, [pc, #36]	; (80088f0 <tcpip_try_callback+0x5c>)
 80088ca:	f006 fe79 	bl	800f5c0 <iprintf>
 80088ce:	e7e8      	b.n	80088a2 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80088d0:	4621      	mov	r1, r4
 80088d2:	2008      	movs	r0, #8
 80088d4:	f000 fc30 	bl	8009138 <memp_free>
    return ERR_MEM;
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80088dc:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80088de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	24009d24 	.word	0x24009d24
 80088e8:	08010518 	.word	0x08010518
 80088ec:	08010568 	.word	0x08010568
 80088f0:	08010440 	.word	0x08010440

080088f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80088f4:	b530      	push	{r4, r5, lr}
 80088f6:	b083      	sub	sp, #12
 80088f8:	4605      	mov	r5, r0
 80088fa:	460c      	mov	r4, r1
  lwip_init();
 80088fc:	f000 f8b2 	bl	8008a64 <lwip_init>

  tcpip_init_done = initfunc;
 8008900:	4a15      	ldr	r2, [pc, #84]	; (8008958 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008902:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8008904:	4b15      	ldr	r3, [pc, #84]	; (800895c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008906:	4816      	ldr	r0, [pc, #88]	; (8008960 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8008908:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800890a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800890c:	f006 fb9e 	bl	800f04c <sys_mbox_new>
 8008910:	b970      	cbnz	r0, 8008930 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008912:	4814      	ldr	r0, [pc, #80]	; (8008964 <tcpip_init+0x70>)
 8008914:	f006 fbe8 	bl	800f0e8 <sys_mutex_new>
 8008918:	b9b0      	cbnz	r0, 8008948 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800891a:	2418      	movs	r4, #24
 800891c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008920:	2200      	movs	r2, #0
 8008922:	4911      	ldr	r1, [pc, #68]	; (8008968 <tcpip_init+0x74>)
 8008924:	9400      	str	r4, [sp, #0]
 8008926:	4811      	ldr	r0, [pc, #68]	; (800896c <tcpip_init+0x78>)
 8008928:	f006 fbf4 	bl	800f114 <sys_thread_new>
}
 800892c:	b003      	add	sp, #12
 800892e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <tcpip_init+0x7c>)
 8008932:	f240 2261 	movw	r2, #609	; 0x261
 8008936:	490f      	ldr	r1, [pc, #60]	; (8008974 <tcpip_init+0x80>)
 8008938:	480f      	ldr	r0, [pc, #60]	; (8008978 <tcpip_init+0x84>)
 800893a:	f006 fe41 	bl	800f5c0 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800893e:	4809      	ldr	r0, [pc, #36]	; (8008964 <tcpip_init+0x70>)
 8008940:	f006 fbd2 	bl	800f0e8 <sys_mutex_new>
 8008944:	2800      	cmp	r0, #0
 8008946:	d0e8      	beq.n	800891a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008948:	4b09      	ldr	r3, [pc, #36]	; (8008970 <tcpip_init+0x7c>)
 800894a:	f240 2265 	movw	r2, #613	; 0x265
 800894e:	490b      	ldr	r1, [pc, #44]	; (800897c <tcpip_init+0x88>)
 8008950:	4809      	ldr	r0, [pc, #36]	; (8008978 <tcpip_init+0x84>)
 8008952:	f006 fe35 	bl	800f5c0 <iprintf>
 8008956:	e7e0      	b.n	800891a <tcpip_init+0x26>
 8008958:	24009d1c 	.word	0x24009d1c
 800895c:	24009d20 	.word	0x24009d20
 8008960:	24009d24 	.word	0x24009d24
 8008964:	24009d18 	.word	0x24009d18
 8008968:	08008739 	.word	0x08008739
 800896c:	080105c0 	.word	0x080105c0
 8008970:	08010518 	.word	0x08010518
 8008974:	08010578 	.word	0x08010578
 8008978:	08010440 	.word	0x08010440
 800897c:	0801059c 	.word	0x0801059c

08008980 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8008980:	ba40      	rev16	r0, r0
}
 8008982:	b280      	uxth	r0, r0
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8008988:	ba00      	rev	r0, r0
 800898a:	4770      	bx	lr

0800898c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800898c:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800898e:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 8008992:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008996:	4571      	cmp	r1, lr
 8008998:	dd05      	ble.n	80089a6 <lwip_standard_chksum+0x1a>
 800899a:	b125      	cbz	r5, 80089a6 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 800899c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 80089a0:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80089a2:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80089a6:	2901      	cmp	r1, #1
 80089a8:	dd27      	ble.n	80089fa <lwip_standard_chksum+0x6e>
 80089aa:	3902      	subs	r1, #2
  u32_t sum = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	084c      	lsrs	r4, r1, #1
 80089b0:	f104 0c01 	add.w	ip, r4, #1
 80089b4:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 80089b8:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80089bc:	4584      	cmp	ip, r0
    sum += *ps++;
 80089be:	4413      	add	r3, r2
  while (len > 1) {
 80089c0:	d1fa      	bne.n	80089b8 <lwip_standard_chksum+0x2c>
    len -= 2;
 80089c2:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 80089c6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80089ca:	2901      	cmp	r1, #1
 80089cc:	d105      	bne.n	80089da <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80089ce:	f89c 2000 	ldrb.w	r2, [ip]
 80089d2:	f362 0e07 	bfi	lr, r2, #0, #8
 80089d6:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 80089da:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80089dc:	fa1f f38e 	uxth.w	r3, lr
 80089e0:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 80089e4:	b298      	uxth	r0, r3
 80089e6:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80089ea:	b125      	cbz	r5, 80089f6 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 80089ec:	0203      	lsls	r3, r0, #8
 80089ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80089f6:	b280      	uxth	r0, r0
 80089f8:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 80089fa:	4684      	mov	ip, r0
  u32_t sum = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	e7e4      	b.n	80089ca <lwip_standard_chksum+0x3e>

08008a00 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8008a00:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8008a02:	f7ff ffc3 	bl	800898c <lwip_standard_chksum>
 8008a06:	43c0      	mvns	r0, r0
}
 8008a08:	b280      	uxth	r0, r0
 8008a0a:	bd08      	pop	{r3, pc}

08008a0c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8008a0c:	b338      	cbz	r0, 8008a5e <inet_chksum_pbuf+0x52>
{
 8008a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8008a10:	2700      	movs	r7, #0
 8008a12:	4605      	mov	r5, r0
  acc = 0;
 8008a14:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008a16:	896e      	ldrh	r6, [r5, #10]
 8008a18:	6868      	ldr	r0, [r5, #4]
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	f7ff ffb6 	bl	800898c <lwip_standard_chksum>
 8008a20:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8008a22:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8008a26:	b2a3      	uxth	r3, r4
 8008a28:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8008a2c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8008a30:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8008a34:	d004      	beq.n	8008a40 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f087 0701 	eor.w	r7, r7, #1
 8008a3c:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8008a40:	682d      	ldr	r5, [r5, #0]
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	d1e7      	bne.n	8008a16 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8008a46:	b13f      	cbz	r7, 8008a58 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008a48:	0220      	lsls	r0, r4, #8
 8008a4a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008a4e:	b280      	uxth	r0, r0
 8008a50:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8008a52:	43c0      	mvns	r0, r0
 8008a54:	b280      	uxth	r0, r0
}
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8008a58:	43e0      	mvns	r0, r4
 8008a5a:	b280      	uxth	r0, r0
}
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8008a5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8008a62:	4770      	bx	lr

08008a64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008a64:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008a66:	f006 fb35 	bl	800f0d4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008a6a:	f000 f80d 	bl	8008a88 <mem_init>
  memp_init();
 8008a6e:	f000 fadb 	bl	8009028 <memp_init>
  pbuf_init();
  netif_init();
 8008a72:	f000 fbe1 	bl	8009238 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008a76:	f004 fdcb 	bl	800d610 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008a7a:	f001 f9c9 	bl	8009e10 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8008a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8008a82:	f004 bd69 	b.w	800d558 <sys_timeouts_init>
 8008a86:	bf00      	nop

08008a88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008a88:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8008a8c:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008a8e:	4c11      	ldr	r4, [pc, #68]	; (8008ad4 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 8008a90:	4911      	ldr	r1, [pc, #68]	; (8008ad8 <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008a92:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008a94:	4811      	ldr	r0, [pc, #68]	; (8008adc <mem_init+0x54>)
 8008a96:	4c12      	ldr	r4, [pc, #72]	; (8008ae0 <mem_init+0x58>)
  mem->used = 0;
 8008a98:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 8008a9a:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008a9e:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	4a10      	ldr	r2, [pc, #64]	; (8008ae4 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008aa4:	4c10      	ldr	r4, [pc, #64]	; (8008ae8 <mem_init+0x60>)
  ram_end->used = 1;
 8008aa6:	f882 00f0 	strb.w	r0, [r2, #240]	; 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 8008aaa:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008aae:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008ab2:	480e      	ldr	r0, [pc, #56]	; (8008aec <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8008ab4:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008ab6:	f006 fb17 	bl	800f0e8 <sys_mutex_new>
 8008aba:	b900      	cbnz	r0, 8008abe <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008abc:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <mem_init+0x68>)
 8008ac0:	f240 221f 	movw	r2, #543	; 0x21f
 8008ac4:	490b      	ldr	r1, [pc, #44]	; (8008af4 <mem_init+0x6c>)
 8008ac6:	480c      	ldr	r0, [pc, #48]	; (8008af8 <mem_init+0x70>)
}
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008acc:	f006 bd78 	b.w	800f5c0 <iprintf>
 8008ad0:	30020000 	.word	0x30020000
 8008ad4:	24009d48 	.word	0x24009d48
 8008ad8:	0001ffe8 	.word	0x0001ffe8
 8008adc:	24009d4c 	.word	0x24009d4c
 8008ae0:	3003ffe8 	.word	0x3003ffe8
 8008ae4:	3003ff00 	.word	0x3003ff00
 8008ae8:	24009d40 	.word	0x24009d40
 8008aec:	24009d44 	.word	0x24009d44
 8008af0:	080105d0 	.word	0x080105d0
 8008af4:	08010600 	.word	0x08010600
 8008af8:	08010440 	.word	0x08010440

08008afc <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f000 8098 	beq.w	8008c32 <mem_free+0x136>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008b02:	0783      	lsls	r3, r0, #30
{
 8008b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b08:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008b0a:	f040 808d 	bne.w	8008c28 <mem_free+0x12c>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008b0e:	4e61      	ldr	r6, [pc, #388]	; (8008c94 <mem_free+0x198>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008b10:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	42ab      	cmp	r3, r5
 8008b18:	d805      	bhi.n	8008b26 <mem_free+0x2a>
 8008b1a:	4f5f      	ldr	r7, [pc, #380]	; (8008c98 <mem_free+0x19c>)
 8008b1c:	f100 030c 	add.w	r3, r0, #12
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d20c      	bcs.n	8008b40 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008b26:	4b5d      	ldr	r3, [pc, #372]	; (8008c9c <mem_free+0x1a0>)
 8008b28:	f240 227f 	movw	r2, #639	; 0x27f
 8008b2c:	495c      	ldr	r1, [pc, #368]	; (8008ca0 <mem_free+0x1a4>)
 8008b2e:	485d      	ldr	r0, [pc, #372]	; (8008ca4 <mem_free+0x1a8>)
 8008b30:	f006 fd46 	bl	800f5c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008b34:	f006 fb04 	bl	800f140 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8008b3c:	f006 bb0c 	b.w	800f158 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8008b40:	4859      	ldr	r0, [pc, #356]	; (8008ca8 <mem_free+0x1ac>)
 8008b42:	f006 fadd 	bl	800f100 <sys_mutex_lock>
  if (!mem->used) {
 8008b46:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 809c 	beq.w	8008c88 <mem_free+0x18c>
  pmem = ptr_to_mem(mem->prev);
 8008b50:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b54:	4855      	ldr	r0, [pc, #340]	; (8008cac <mem_free+0x1b0>)
  return (mem_size_t)((u8_t *)mem - ram);
 8008b56:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b58:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 8008b5a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b5e:	d807      	bhi.n	8008b70 <mem_free+0x74>
 8008b60:	4283      	cmp	r3, r0
 8008b62:	d805      	bhi.n	8008b70 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 8008b64:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008b66:	4288      	cmp	r0, r1
 8008b68:	d012      	beq.n	8008b90 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b6a:	5851      	ldr	r1, [r2, r1]
 8008b6c:	4288      	cmp	r0, r1
 8008b6e:	d00f      	beq.n	8008b90 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008b70:	4b4a      	ldr	r3, [pc, #296]	; (8008c9c <mem_free+0x1a0>)
 8008b72:	f240 2295 	movw	r2, #661	; 0x295
 8008b76:	494e      	ldr	r1, [pc, #312]	; (8008cb0 <mem_free+0x1b4>)
 8008b78:	484a      	ldr	r0, [pc, #296]	; (8008ca4 <mem_free+0x1a8>)
 8008b7a:	f006 fd21 	bl	800f5c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008b7e:	484a      	ldr	r0, [pc, #296]	; (8008ca8 <mem_free+0x1ac>)
 8008b80:	f006 fac4 	bl	800f10c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8008b84:	f006 fadc 	bl	800f140 <sys_arch_protect>
}
 8008b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8008b8c:	f006 bae4 	b.w	800f158 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 8008b90:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b92:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008b96:	4561      	cmp	r1, ip
 8008b98:	d002      	beq.n	8008ba0 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008b9a:	6849      	ldr	r1, [r1, #4]
 8008b9c:	4288      	cmp	r0, r1
 8008b9e:	d1e7      	bne.n	8008b70 <mem_free+0x74>
  if (mem < lfree) {
 8008ba0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8008ccc <mem_free+0x1d0>
  mem->used = 0;
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 8008baa:	f8d8 1000 	ldr.w	r1, [r8]
 8008bae:	42a9      	cmp	r1, r5
    lfree = mem;
 8008bb0:	bf88      	it	hi
 8008bb2:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008bb6:	4295      	cmp	r5, r2
 8008bb8:	d33c      	bcc.n	8008c34 <mem_free+0x138>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008bba:	4565      	cmp	r5, ip
 8008bbc:	d244      	bcs.n	8008c48 <mem_free+0x14c>
  return (struct mem *)(void *)&ram[ptr];
 8008bbe:	6832      	ldr	r2, [r6, #0]
 8008bc0:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008bc2:	429d      	cmp	r5, r3
 8008bc4:	d014      	beq.n	8008bf0 <mem_free+0xf4>
 8008bc6:	7a19      	ldrb	r1, [r3, #8]
 8008bc8:	b991      	cbnz	r1, 8008bf0 <mem_free+0xf4>
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	d00f      	beq.n	8008bf0 <mem_free+0xf4>
    if (lfree == nmem) {
 8008bd0:	f8d8 1000 	ldr.w	r1, [r8]
 8008bd4:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8008bd6:	6819      	ldr	r1, [r3, #0]
 8008bd8:	f844 1c0c 	str.w	r1, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008bdc:	4933      	ldr	r1, [pc, #204]	; (8008cac <mem_free+0x1b0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
      lfree = mem;
 8008be0:	bf08      	it	eq
 8008be2:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008be6:	428b      	cmp	r3, r1
 8008be8:	d002      	beq.n	8008bf0 <mem_free+0xf4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008bea:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8008bec:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008bee:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 8008bf0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8008bf4:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8008bf6:	429d      	cmp	r5, r3
 8008bf8:	d011      	beq.n	8008c1e <mem_free+0x122>
 8008bfa:	7a18      	ldrb	r0, [r3, #8]
 8008bfc:	b978      	cbnz	r0, 8008c1e <mem_free+0x122>
    if (lfree == mem) {
 8008bfe:	f8d8 0000 	ldr.w	r0, [r8]
 8008c02:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008c04:	4829      	ldr	r0, [pc, #164]	; (8008cac <mem_free+0x1b0>)
      lfree = pmem;
 8008c06:	bf08      	it	eq
 8008c08:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8008c0c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8008c10:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008c12:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8008c16:	4283      	cmp	r3, r0
 8008c18:	d001      	beq.n	8008c1e <mem_free+0x122>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008c1a:	441a      	add	r2, r3
 8008c1c:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 8008c1e:	4822      	ldr	r0, [pc, #136]	; (8008ca8 <mem_free+0x1ac>)
}
 8008c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8008c24:	f006 ba72 	b.w	800f10c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008c28:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <mem_free+0x1a0>)
 8008c2a:	f240 2273 	movw	r2, #627	; 0x273
 8008c2e:	4921      	ldr	r1, [pc, #132]	; (8008cb4 <mem_free+0x1b8>)
 8008c30:	e77d      	b.n	8008b2e <mem_free+0x32>
 8008c32:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008c34:	4b19      	ldr	r3, [pc, #100]	; (8008c9c <mem_free+0x1a0>)
 8008c36:	f240 12df 	movw	r2, #479	; 0x1df
 8008c3a:	491f      	ldr	r1, [pc, #124]	; (8008cb8 <mem_free+0x1bc>)
 8008c3c:	4819      	ldr	r0, [pc, #100]	; (8008ca4 <mem_free+0x1a8>)
 8008c3e:	f006 fcbf 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	429d      	cmp	r5, r3
 8008c46:	d306      	bcc.n	8008c56 <mem_free+0x15a>
 8008c48:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <mem_free+0x1a0>)
 8008c4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008c4e:	491b      	ldr	r1, [pc, #108]	; (8008cbc <mem_free+0x1c0>)
 8008c50:	4814      	ldr	r0, [pc, #80]	; (8008ca4 <mem_free+0x1a8>)
 8008c52:	f006 fcb5 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008c56:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008c5a:	b133      	cbz	r3, 8008c6a <mem_free+0x16e>
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <mem_free+0x1a0>)
 8008c5e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008c62:	4917      	ldr	r1, [pc, #92]	; (8008cc0 <mem_free+0x1c4>)
 8008c64:	480f      	ldr	r0, [pc, #60]	; (8008ca4 <mem_free+0x1a8>)
 8008c66:	f006 fcab 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008c6a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8008c6e:	4a0f      	ldr	r2, [pc, #60]	; (8008cac <mem_free+0x1b0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d9a4      	bls.n	8008bbe <mem_free+0xc2>
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <mem_free+0x1a0>)
 8008c76:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008c7a:	4912      	ldr	r1, [pc, #72]	; (8008cc4 <mem_free+0x1c8>)
 8008c7c:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <mem_free+0x1a8>)
 8008c7e:	f006 fc9f 	bl	800f5c0 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8008c82:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8008c86:	e79a      	b.n	8008bbe <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008c88:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <mem_free+0x1a0>)
 8008c8a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008c8e:	490e      	ldr	r1, [pc, #56]	; (8008cc8 <mem_free+0x1cc>)
 8008c90:	e772      	b.n	8008b78 <mem_free+0x7c>
 8008c92:	bf00      	nop
 8008c94:	24009d48 	.word	0x24009d48
 8008c98:	24009d4c 	.word	0x24009d4c
 8008c9c:	080105d0 	.word	0x080105d0
 8008ca0:	08010640 	.word	0x08010640
 8008ca4:	08010440 	.word	0x08010440
 8008ca8:	24009d44 	.word	0x24009d44
 8008cac:	0001ffe8 	.word	0x0001ffe8
 8008cb0:	08010684 	.word	0x08010684
 8008cb4:	0801061c 	.word	0x0801061c
 8008cb8:	080106b8 	.word	0x080106b8
 8008cbc:	080106d0 	.word	0x080106d0
 8008cc0:	080106ec 	.word	0x080106ec
 8008cc4:	08010708 	.word	0x08010708
 8008cc8:	0801065c 	.word	0x0801065c
 8008ccc:	24009d40 	.word	0x24009d40

08008cd0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008cd4:	1ccb      	adds	r3, r1, #3
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 8008cda:	2b0c      	cmp	r3, #12
 8008cdc:	461d      	mov	r5, r3
 8008cde:	bf38      	it	cc
 8008ce0:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008ce2:	42a9      	cmp	r1, r5
 8008ce4:	d875      	bhi.n	8008dd2 <mem_trim+0x102>
 8008ce6:	4a4d      	ldr	r2, [pc, #308]	; (8008e1c <mem_trim+0x14c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d872      	bhi.n	8008dd2 <mem_trim+0x102>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008cec:	4f4c      	ldr	r7, [pc, #304]	; (8008e20 <mem_trim+0x150>)
 8008cee:	4604      	mov	r4, r0
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	4283      	cmp	r3, r0
 8008cf4:	d83b      	bhi.n	8008d6e <mem_trim+0x9e>
 8008cf6:	4a4b      	ldr	r2, [pc, #300]	; (8008e24 <mem_trim+0x154>)
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	4282      	cmp	r2, r0
 8008cfc:	d937      	bls.n	8008d6e <mem_trim+0x9e>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008cfe:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008d02:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 8008d06:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008d0a:	3e0c      	subs	r6, #12
 8008d0c:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008d10:	42ae      	cmp	r6, r5
 8008d12:	d361      	bcc.n	8008dd8 <mem_trim+0x108>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8008d14:	d06a      	beq.n	8008dec <mem_trim+0x11c>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008d16:	4844      	ldr	r0, [pc, #272]	; (8008e28 <mem_trim+0x158>)
 8008d18:	f006 f9f2 	bl	800f100 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008d1c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8008d26:	f899 1008 	ldrb.w	r1, [r9, #8]
 8008d2a:	2900      	cmp	r1, #0
 8008d2c:	d134      	bne.n	8008d98 <mem_trim+0xc8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008d2e:	493b      	ldr	r1, [pc, #236]	; (8008e1c <mem_trim+0x14c>)
 8008d30:	428a      	cmp	r2, r1
 8008d32:	d069      	beq.n	8008e08 <mem_trim+0x138>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 8008d34:	493d      	ldr	r1, [pc, #244]	; (8008e2c <mem_trim+0x15c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008d36:	350c      	adds	r5, #12
    next = mem2->next;
 8008d38:	f8d9 0000 	ldr.w	r0, [r9]
    if (lfree == mem2) {
 8008d3c:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008d3e:	4445      	add	r5, r8
    if (lfree == mem2) {
 8008d40:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 8008d42:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8008d46:	bf08      	it	eq
 8008d48:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8008d4a:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 8008d4c:	e9c2 0800 	strd	r0, r8, [r2]
    mem2->used = 0;
 8008d50:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008d52:	4932      	ldr	r1, [pc, #200]	; (8008e1c <mem_trim+0x14c>)
    mem->next = ptr2;
 8008d54:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008d58:	6812      	ldr	r2, [r2, #0]
 8008d5a:	428a      	cmp	r2, r1
 8008d5c:	d001      	beq.n	8008d62 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008d5e:	441a      	add	r2, r3
 8008d60:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008d62:	4831      	ldr	r0, [pc, #196]	; (8008e28 <mem_trim+0x158>)
 8008d64:	f006 f9d2 	bl	800f10c <sys_mutex_unlock>
  return rmem;
 8008d68:	4620      	mov	r0, r4
}
 8008d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008d6e:	4b30      	ldr	r3, [pc, #192]	; (8008e30 <mem_trim+0x160>)
 8008d70:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008d74:	492f      	ldr	r1, [pc, #188]	; (8008e34 <mem_trim+0x164>)
 8008d76:	4830      	ldr	r0, [pc, #192]	; (8008e38 <mem_trim+0x168>)
 8008d78:	f006 fc22 	bl	800f5c0 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	42a3      	cmp	r3, r4
 8008d80:	d803      	bhi.n	8008d8a <mem_trim+0xba>
 8008d82:	4a28      	ldr	r2, [pc, #160]	; (8008e24 <mem_trim+0x154>)
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	42a2      	cmp	r2, r4
 8008d88:	d8b9      	bhi.n	8008cfe <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 8008d8a:	f006 f9d9 	bl	800f140 <sys_arch_protect>
 8008d8e:	f006 f9e3 	bl	800f158 <sys_arch_unprotect>
    return rmem;
 8008d92:	4620      	mov	r0, r4
}
 8008d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008d98:	f105 0118 	add.w	r1, r5, #24
 8008d9c:	42b1      	cmp	r1, r6
 8008d9e:	d8e0      	bhi.n	8008d62 <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008da0:	491e      	ldr	r1, [pc, #120]	; (8008e1c <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008da2:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008da4:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008da6:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008da8:	d023      	beq.n	8008df2 <mem_trim+0x122>
    if (mem2 < lfree) {
 8008daa:	4820      	ldr	r0, [pc, #128]	; (8008e2c <mem_trim+0x15c>)
  return (struct mem *)(void *)&ram[ptr];
 8008dac:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8008dae:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 8008db0:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 8008db4:	428e      	cmp	r6, r1
    mem2->used = 0;
 8008db6:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 8008dba:	bf88      	it	hi
 8008dbc:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 8008dbe:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 8008dc0:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008dc4:	680a      	ldr	r2, [r1, #0]
 8008dc6:	4915      	ldr	r1, [pc, #84]	; (8008e1c <mem_trim+0x14c>)
 8008dc8:	428a      	cmp	r2, r1
 8008dca:	d0ca      	beq.n	8008d62 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008dcc:	4413      	add	r3, r2
 8008dce:	605d      	str	r5, [r3, #4]
 8008dd0:	e7c7      	b.n	8008d62 <mem_trim+0x92>
    return NULL;
 8008dd2:	2000      	movs	r0, #0
}
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008dd8:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <mem_trim+0x160>)
 8008dda:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008dde:	4917      	ldr	r1, [pc, #92]	; (8008e3c <mem_trim+0x16c>)
 8008de0:	4815      	ldr	r0, [pc, #84]	; (8008e38 <mem_trim+0x168>)
 8008de2:	f006 fbed 	bl	800f5c0 <iprintf>
    return NULL;
 8008de6:	2000      	movs	r0, #0
}
 8008de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dec:	4620      	mov	r0, r4
 8008dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <mem_trim+0x160>)
 8008df4:	f240 3216 	movw	r2, #790	; 0x316
 8008df8:	4911      	ldr	r1, [pc, #68]	; (8008e40 <mem_trim+0x170>)
 8008dfa:	480f      	ldr	r0, [pc, #60]	; (8008e38 <mem_trim+0x168>)
 8008dfc:	f006 fbe0 	bl	800f5c0 <iprintf>
    mem2->next = mem->next;
 8008e00:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	e7d0      	b.n	8008daa <mem_trim+0xda>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008e08:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <mem_trim+0x160>)
 8008e0a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008e0e:	490c      	ldr	r1, [pc, #48]	; (8008e40 <mem_trim+0x170>)
 8008e10:	4809      	ldr	r0, [pc, #36]	; (8008e38 <mem_trim+0x168>)
 8008e12:	f006 fbd5 	bl	800f5c0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	e78c      	b.n	8008d34 <mem_trim+0x64>
 8008e1a:	bf00      	nop
 8008e1c:	0001ffe8 	.word	0x0001ffe8
 8008e20:	24009d48 	.word	0x24009d48
 8008e24:	24009d4c 	.word	0x24009d4c
 8008e28:	24009d44 	.word	0x24009d44
 8008e2c:	24009d40 	.word	0x24009d40
 8008e30:	080105d0 	.word	0x080105d0
 8008e34:	08010734 	.word	0x08010734
 8008e38:	08010440 	.word	0x08010440
 8008e3c:	0801074c 	.word	0x0801074c
 8008e40:	0801076c 	.word	0x0801076c

08008e44 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d066      	beq.n	8008f16 <mem_malloc+0xd2>
{
 8008e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008e4c:	1cc3      	adds	r3, r0, #3
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 8008e52:	2b0c      	cmp	r3, #12
 8008e54:	4698      	mov	r8, r3
 8008e56:	bf38      	it	cc
 8008e58:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008e5c:	4540      	cmp	r0, r8
 8008e5e:	d827      	bhi.n	8008eb0 <mem_malloc+0x6c>
 8008e60:	4c47      	ldr	r4, [pc, #284]	; (8008f80 <mem_malloc+0x13c>)
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	d824      	bhi.n	8008eb0 <mem_malloc+0x6c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e66:	4f47      	ldr	r7, [pc, #284]	; (8008f84 <mem_malloc+0x140>)
  return (mem_size_t)((u8_t *)mem - ram);
 8008e68:	4e47      	ldr	r6, [pc, #284]	; (8008f88 <mem_malloc+0x144>)
  sys_mutex_lock(&mem_mutex);
 8008e6a:	4848      	ldr	r0, [pc, #288]	; (8008f8c <mem_malloc+0x148>)
 8008e6c:	f006 f948 	bl	800f100 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e70:	6838      	ldr	r0, [r7, #0]
  return (mem_size_t)((u8_t *)mem - ram);
 8008e72:	6832      	ldr	r2, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e74:	eba4 0c08 	sub.w	ip, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 8008e78:	1a84      	subs	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e7a:	4564      	cmp	r4, ip
 8008e7c:	d212      	bcs.n	8008ea4 <mem_malloc+0x60>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008e7e:	f06f 0e0b 	mvn.w	lr, #11
 8008e82:	e006      	b.n	8008e92 <mem_malloc+0x4e>
 8008e84:	5911      	ldr	r1, [r2, r4]
 8008e86:	440b      	add	r3, r1
      if ((!mem->used) &&
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	d214      	bcs.n	8008eb6 <mem_malloc+0x72>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008e8c:	460c      	mov	r4, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e8e:	4564      	cmp	r4, ip
 8008e90:	d208      	bcs.n	8008ea4 <mem_malloc+0x60>
  return (struct mem *)(void *)&ram[ptr];
 8008e92:	1915      	adds	r5, r2, r4
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008e94:	ebae 0304 	sub.w	r3, lr, r4
      if ((!mem->used) &&
 8008e98:	7a29      	ldrb	r1, [r5, #8]
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	d0f2      	beq.n	8008e84 <mem_malloc+0x40>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008e9e:	5914      	ldr	r4, [r2, r4]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008ea0:	4564      	cmp	r4, ip
 8008ea2:	d3f6      	bcc.n	8008e92 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008ea4:	4839      	ldr	r0, [pc, #228]	; (8008f8c <mem_malloc+0x148>)
 8008ea6:	f006 f931 	bl	800f10c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008eaa:	2000      	movs	r0, #0
}
 8008eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8008eb0:	2000      	movs	r0, #0
}
 8008eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008eb6:	f108 0c18 	add.w	ip, r8, #24
 8008eba:	f108 080c 	add.w	r8, r8, #12
 8008ebe:	4563      	cmp	r3, ip
 8008ec0:	d32a      	bcc.n	8008f18 <mem_malloc+0xd4>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008ec2:	4b2f      	ldr	r3, [pc, #188]	; (8008f80 <mem_malloc+0x13c>)
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008ec4:	eb08 0904 	add.w	r9, r8, r4
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008ec8:	4599      	cmp	r9, r3
 8008eca:	d04d      	beq.n	8008f68 <mem_malloc+0x124>
  return (struct mem *)(void *)&ram[ptr];
 8008ecc:	eb02 0309 	add.w	r3, r2, r9
          mem2->used = 0;
 8008ed0:	f04f 0c00 	mov.w	ip, #0
 8008ed4:	f883 c008 	strb.w	ip, [r3, #8]
          mem2->next = mem->next;
 8008ed8:	f842 1009 	str.w	r1, [r2, r9]
          mem2->prev = ptr;
 8008edc:	605c      	str	r4, [r3, #4]
          mem->used = 1;
 8008ede:	2301      	movs	r3, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008ee0:	4927      	ldr	r1, [pc, #156]	; (8008f80 <mem_malloc+0x13c>)
          mem->next = ptr2;
 8008ee2:	f8c5 9000 	str.w	r9, [r5]
          mem->used = 1;
 8008ee6:	722b      	strb	r3, [r5, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008ee8:	f852 3009 	ldr.w	r3, [r2, r9]
 8008eec:	428b      	cmp	r3, r1
 8008eee:	d002      	beq.n	8008ef6 <mem_malloc+0xb2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008ef0:	441a      	add	r2, r3
 8008ef2:	f8c2 9004 	str.w	r9, [r2, #4]
        if (mem == lfree) {
 8008ef6:	4285      	cmp	r5, r0
          while (cur->used && cur != ram_end) {
 8008ef8:	4c25      	ldr	r4, [pc, #148]	; (8008f90 <mem_malloc+0x14c>)
        if (mem == lfree) {
 8008efa:	d027      	beq.n	8008f4c <mem_malloc+0x108>
        sys_mutex_unlock(&mem_mutex);
 8008efc:	4823      	ldr	r0, [pc, #140]	; (8008f8c <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008efe:	44a8      	add	r8, r5
        sys_mutex_unlock(&mem_mutex);
 8008f00:	f006 f904 	bl	800f10c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	4543      	cmp	r3, r8
 8008f08:	d318      	bcc.n	8008f3c <mem_malloc+0xf8>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008f0a:	07ab      	lsls	r3, r5, #30
 8008f0c:	d107      	bne.n	8008f1e <mem_malloc+0xda>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008f0e:	f105 000c 	add.w	r0, r5, #12
}
 8008f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f16:	4770      	bx	lr
          mem->used = 1;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	722b      	strb	r3, [r5, #8]
 8008f1c:	e7eb      	b.n	8008ef6 <mem_malloc+0xb2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <mem_malloc+0x150>)
 8008f20:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008f24:	491c      	ldr	r1, [pc, #112]	; (8008f98 <mem_malloc+0x154>)
 8008f26:	481d      	ldr	r0, [pc, #116]	; (8008f9c <mem_malloc+0x158>)
 8008f28:	f006 fb4a 	bl	800f5c0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008f2c:	4b19      	ldr	r3, [pc, #100]	; (8008f94 <mem_malloc+0x150>)
 8008f2e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008f32:	491b      	ldr	r1, [pc, #108]	; (8008fa0 <mem_malloc+0x15c>)
 8008f34:	4819      	ldr	r0, [pc, #100]	; (8008f9c <mem_malloc+0x158>)
 8008f36:	f006 fb43 	bl	800f5c0 <iprintf>
 8008f3a:	e7e8      	b.n	8008f0e <mem_malloc+0xca>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008f3c:	4b15      	ldr	r3, [pc, #84]	; (8008f94 <mem_malloc+0x150>)
 8008f3e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008f42:	4918      	ldr	r1, [pc, #96]	; (8008fa4 <mem_malloc+0x160>)
 8008f44:	4815      	ldr	r0, [pc, #84]	; (8008f9c <mem_malloc+0x158>)
 8008f46:	f006 fb3b 	bl	800f5c0 <iprintf>
 8008f4a:	e7de      	b.n	8008f0a <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8008f4c:	6830      	ldr	r0, [r6, #0]
 8008f4e:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	e003      	b.n	8008f5c <mem_malloc+0x118>
  return (struct mem *)(void *)&ram[ptr];
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8008f58:	7a1a      	ldrb	r2, [r3, #8]
 8008f5a:	b11a      	cbz	r2, 8008f64 <mem_malloc+0x120>
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	d1f9      	bne.n	8008f54 <mem_malloc+0x110>
          lfree = cur;
 8008f60:	6039      	str	r1, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008f62:	e7cb      	b.n	8008efc <mem_malloc+0xb8>
          lfree = cur;
 8008f64:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008f66:	e7c9      	b.n	8008efc <mem_malloc+0xb8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008f68:	f240 3287 	movw	r2, #903	; 0x387
 8008f6c:	490e      	ldr	r1, [pc, #56]	; (8008fa8 <mem_malloc+0x164>)
 8008f6e:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <mem_malloc+0x150>)
 8008f70:	480a      	ldr	r0, [pc, #40]	; (8008f9c <mem_malloc+0x158>)
 8008f72:	f006 fb25 	bl	800f5c0 <iprintf>
          mem2->next = mem->next;
 8008f76:	6829      	ldr	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8008f78:	6832      	ldr	r2, [r6, #0]
        if (mem == lfree) {
 8008f7a:	6838      	ldr	r0, [r7, #0]
 8008f7c:	e7a6      	b.n	8008ecc <mem_malloc+0x88>
 8008f7e:	bf00      	nop
 8008f80:	0001ffe8 	.word	0x0001ffe8
 8008f84:	24009d40 	.word	0x24009d40
 8008f88:	24009d48 	.word	0x24009d48
 8008f8c:	24009d44 	.word	0x24009d44
 8008f90:	24009d4c 	.word	0x24009d4c
 8008f94:	080105d0 	.word	0x080105d0
 8008f98:	080107b0 	.word	0x080107b0
 8008f9c:	08010440 	.word	0x08010440
 8008fa0:	080107e0 	.word	0x080107e0
 8008fa4:	08010780 	.word	0x08010780
 8008fa8:	0801076c 	.word	0x0801076c

08008fac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008fb0:	f006 f8c6 	bl	800f140 <sys_arch_protect>

  memp = *desc->tab;
 8008fb4:	68a3      	ldr	r3, [r4, #8]
 8008fb6:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008fb8:	b18c      	cbz	r4, 8008fde <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008fc0:	07a3      	lsls	r3, r4, #30
 8008fc2:	d104      	bne.n	8008fce <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f006 f8c7 	bl	800f158 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008fca:	4620      	mov	r0, r4
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <do_memp_malloc_pool+0x3c>)
 8008fd0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008fd4:	4905      	ldr	r1, [pc, #20]	; (8008fec <do_memp_malloc_pool+0x40>)
 8008fd6:	4806      	ldr	r0, [pc, #24]	; (8008ff0 <do_memp_malloc_pool+0x44>)
 8008fd8:	f006 faf2 	bl	800f5c0 <iprintf>
 8008fdc:	e7f2      	b.n	8008fc4 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8008fde:	f006 f8bb 	bl	800f158 <sys_arch_unprotect>
}
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	bf00      	nop
 8008fe8:	08010804 	.word	0x08010804
 8008fec:	08010834 	.word	0x08010834
 8008ff0:	08010440 	.word	0x08010440

08008ff4 <memp_init_pool>:
{
 8008ff4:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8008ff6:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8008ff8:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8008ffa:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8008ffe:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 8009000:	b17c      	cbz	r4, 8009022 <memp_init_pool+0x2e>
 8009002:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009004:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8009008:	460a      	mov	r2, r1
 800900a:	f023 0303 	bic.w	r3, r3, #3
 800900e:	e000      	b.n	8009012 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009010:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009012:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009014:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009016:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800901a:	4619      	mov	r1, r3
 800901c:	42a2      	cmp	r2, r4
 800901e:	d1f7      	bne.n	8009010 <memp_init_pool+0x1c>
 8009020:	602b      	str	r3, [r5, #0]
}
 8009022:	bc30      	pop	{r4, r5}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop

08009028 <memp_init>:
{
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902a:	f8df e054 	ldr.w	lr, [pc, #84]	; 8009080 <memp_init+0x58>
 800902e:	2404      	movs	r4, #4
 8009030:	4b10      	ldr	r3, [pc, #64]	; (8009074 <memp_init+0x4c>)
  *desc->tab = NULL;
 8009032:	2600      	movs	r6, #0
{
 8009034:	4d10      	ldr	r5, [pc, #64]	; (8009078 <memp_init+0x50>)
 8009036:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 800903a:	4a10      	ldr	r2, [pc, #64]	; (800907c <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800903c:	3303      	adds	r3, #3
  *desc->tab = NULL;
 800903e:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009040:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009044:	b16c      	cbz	r4, 8009062 <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009046:	2100      	movs	r1, #0
 8009048:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800904c:	460a      	mov	r2, r1
 800904e:	e000      	b.n	8009052 <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009050:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009052:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009054:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009056:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800905a:	4619      	mov	r1, r3
 800905c:	42a2      	cmp	r2, r4
 800905e:	d1f7      	bne.n	8009050 <memp_init+0x28>
 8009060:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009062:	4577      	cmp	r7, lr
 8009064:	d005      	beq.n	8009072 <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 8009066:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800906a:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800906e:	8854      	ldrh	r4, [r2, #2]
 8009070:	e7e4      	b.n	800903c <memp_init+0x14>
}
 8009072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009074:	24010724 	.word	0x24010724
 8009078:	240107d8 	.word	0x240107d8
 800907c:	08010958 	.word	0x08010958
 8009080:	08010964 	.word	0x08010964

08009084 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009084:	b108      	cbz	r0, 800908a <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009086:	f7ff bf91 	b.w	8008fac <do_memp_malloc_pool>
{
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800908e:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <memp_malloc_pool+0x1c>)
 8009090:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009094:	4903      	ldr	r1, [pc, #12]	; (80090a4 <memp_malloc_pool+0x20>)
 8009096:	4804      	ldr	r0, [pc, #16]	; (80090a8 <memp_malloc_pool+0x24>)
 8009098:	f006 fa92 	bl	800f5c0 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800909c:	4620      	mov	r0, r4
 800909e:	bd10      	pop	{r4, pc}
 80090a0:	08010804 	.word	0x08010804
 80090a4:	08010858 	.word	0x08010858
 80090a8:	08010440 	.word	0x08010440

080090ac <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80090ac:	280c      	cmp	r0, #12
{
 80090ae:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80090b0:	d806      	bhi.n	80090c0 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <memp_malloc+0x28>)
 80090b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 80090b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80090bc:	f7ff bf76 	b.w	8008fac <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <memp_malloc+0x2c>)
 80090c2:	f240 1257 	movw	r2, #343	; 0x157
 80090c6:	4905      	ldr	r1, [pc, #20]	; (80090dc <memp_malloc+0x30>)
 80090c8:	4805      	ldr	r0, [pc, #20]	; (80090e0 <memp_malloc+0x34>)
 80090ca:	f006 fa79 	bl	800f5c0 <iprintf>
}
 80090ce:	2000      	movs	r0, #0
 80090d0:	bd08      	pop	{r3, pc}
 80090d2:	bf00      	nop
 80090d4:	08010964 	.word	0x08010964
 80090d8:	08010804 	.word	0x08010804
 80090dc:	0801086c 	.word	0x0801086c
 80090e0:	08010440 	.word	0x08010440

080090e4 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80090e4:	b180      	cbz	r0, 8009108 <memp_free_pool+0x24>
{
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 80090ea:	b161      	cbz	r1, 8009106 <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80090ec:	078b      	lsls	r3, r1, #30
 80090ee:	4605      	mov	r5, r0
 80090f0:	d111      	bne.n	8009116 <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 80090f2:	f006 f825 	bl	800f140 <sys_arch_protect>
  memp->next = *desc->tab;
 80090f6:	68ab      	ldr	r3, [r5, #8]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80090fc:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 80090fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009102:	f006 b829 	b.w	800f158 <sys_arch_unprotect>
}
 8009106:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009108:	4b07      	ldr	r3, [pc, #28]	; (8009128 <memp_free_pool+0x44>)
 800910a:	f240 1295 	movw	r2, #405	; 0x195
 800910e:	4907      	ldr	r1, [pc, #28]	; (800912c <memp_free_pool+0x48>)
 8009110:	4807      	ldr	r0, [pc, #28]	; (8009130 <memp_free_pool+0x4c>)
 8009112:	f006 ba55 	b.w	800f5c0 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009116:	4b04      	ldr	r3, [pc, #16]	; (8009128 <memp_free_pool+0x44>)
 8009118:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800911c:	4905      	ldr	r1, [pc, #20]	; (8009134 <memp_free_pool+0x50>)
 800911e:	4804      	ldr	r0, [pc, #16]	; (8009130 <memp_free_pool+0x4c>)
 8009120:	f006 fa4e 	bl	800f5c0 <iprintf>
 8009124:	e7e5      	b.n	80090f2 <memp_free_pool+0xe>
 8009126:	bf00      	nop
 8009128:	08010804 	.word	0x08010804
 800912c:	08010858 	.word	0x08010858
 8009130:	08010440 	.word	0x08010440
 8009134:	0801088c 	.word	0x0801088c

08009138 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009138:	280c      	cmp	r0, #12
 800913a:	d812      	bhi.n	8009162 <memp_free+0x2a>
{
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	460c      	mov	r4, r1

  if (mem == NULL) {
 8009140:	b171      	cbz	r1, 8009160 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <memp_free+0x48>)
 8009144:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009148:	078b      	lsls	r3, r1, #30
 800914a:	d111      	bne.n	8009170 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800914c:	f005 fff8 	bl	800f140 <sys_arch_protect>
  memp->next = *desc->tab;
 8009150:	68ab      	ldr	r3, [r5, #8]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009156:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800915c:	f005 bffc 	b.w	800f158 <sys_arch_unprotect>
}
 8009160:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <memp_free+0x4c>)
 8009164:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009168:	4907      	ldr	r1, [pc, #28]	; (8009188 <memp_free+0x50>)
 800916a:	4808      	ldr	r0, [pc, #32]	; (800918c <memp_free+0x54>)
 800916c:	f006 ba28 	b.w	800f5c0 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <memp_free+0x4c>)
 8009172:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009176:	4906      	ldr	r1, [pc, #24]	; (8009190 <memp_free+0x58>)
 8009178:	4804      	ldr	r0, [pc, #16]	; (800918c <memp_free+0x54>)
 800917a:	f006 fa21 	bl	800f5c0 <iprintf>
 800917e:	e7e5      	b.n	800914c <memp_free+0x14>
 8009180:	08010964 	.word	0x08010964
 8009184:	08010804 	.word	0x08010804
 8009188:	080108ac 	.word	0x080108ac
 800918c:	08010440 	.word	0x08010440
 8009190:	0801088c 	.word	0x0801088c

08009194 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009194:	f06f 000b 	mvn.w	r0, #11
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop

0800919c <netif_issue_reports>:
{
 800919c:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800919e:	4604      	mov	r4, r0
 80091a0:	b150      	cbz	r0, 80091b8 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80091a2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80091a6:	f003 0205 	and.w	r2, r3, #5
 80091aa:	2a05      	cmp	r2, #5
 80091ac:	d103      	bne.n	80091b6 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	b10a      	cbz	r2, 80091b6 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80091b2:	071b      	lsls	r3, r3, #28
 80091b4:	d408      	bmi.n	80091c8 <netif_issue_reports+0x2c>
}
 80091b6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <netif_issue_reports+0x38>)
 80091ba:	f240 326d 	movw	r2, #877	; 0x36d
 80091be:	4906      	ldr	r1, [pc, #24]	; (80091d8 <netif_issue_reports+0x3c>)
 80091c0:	4806      	ldr	r0, [pc, #24]	; (80091dc <netif_issue_reports+0x40>)
 80091c2:	f006 f9fd 	bl	800f5c0 <iprintf>
 80091c6:	e7ec      	b.n	80091a2 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 80091c8:	1d21      	adds	r1, r4, #4
 80091ca:	4620      	mov	r0, r4
}
 80091cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 80091d0:	f004 bf78 	b.w	800e0c4 <etharp_request>
 80091d4:	08010998 	.word	0x08010998
 80091d8:	080109cc 	.word	0x080109cc
 80091dc:	08010440 	.word	0x08010440

080091e0 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	4605      	mov	r5, r0
 80091e4:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80091e6:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80091e8:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80091ea:	b1b9      	cbz	r1, 800921c <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80091ec:	686b      	ldr	r3, [r5, #4]
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d101      	bne.n	80091f8 <netif_do_set_ipaddr.isra.0+0x18>
}
 80091f4:	b002      	add	sp, #8
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80091f8:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80091fa:	4630      	mov	r0, r6
 80091fc:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80091fe:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009200:	f001 fe02 	bl	800ae08 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009204:	a901      	add	r1, sp, #4
 8009206:	4630      	mov	r0, r6
 8009208:	f004 fb0e 	bl	800d828 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800920c:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800920e:	2101      	movs	r1, #1
 8009210:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009212:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009214:	f7ff ffc2 	bl	800919c <netif_issue_reports>
}
 8009218:	b002      	add	sp, #8
 800921a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800921c:	4b03      	ldr	r3, [pc, #12]	; (800922c <netif_do_set_ipaddr.isra.0+0x4c>)
 800921e:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009222:	4903      	ldr	r1, [pc, #12]	; (8009230 <netif_do_set_ipaddr.isra.0+0x50>)
 8009224:	4803      	ldr	r0, [pc, #12]	; (8009234 <netif_do_set_ipaddr.isra.0+0x54>)
 8009226:	f006 f9cb 	bl	800f5c0 <iprintf>
 800922a:	e7df      	b.n	80091ec <netif_do_set_ipaddr.isra.0+0xc>
 800922c:	08010998 	.word	0x08010998
 8009230:	080109f0 	.word	0x080109f0
 8009234:	08010440 	.word	0x08010440

08009238 <netif_init>:
}
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop

0800923c <netif_set_addr>:
{
 800923c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923e:	460d      	mov	r5, r1
 8009240:	b083      	sub	sp, #12
 8009242:	4604      	mov	r4, r0
 8009244:	4617      	mov	r7, r2
 8009246:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8009248:	f7fc fe66 	bl	8005f18 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800924c:	b1fd      	cbz	r5, 800928e <netif_set_addr+0x52>
  if (netmask == NULL) {
 800924e:	b187      	cbz	r7, 8009272 <netif_set_addr+0x36>
  if (gw == NULL) {
 8009250:	b196      	cbz	r6, 8009278 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	b1a3      	cbz	r3, 8009280 <netif_set_addr+0x44>
 8009256:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	68a1      	ldr	r1, [r4, #8]
 800925c:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800925e:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009260:	bf18      	it	ne
 8009262:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009268:	bf18      	it	ne
 800926a:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800926c:	b19a      	cbz	r2, 8009296 <netif_set_addr+0x5a>
}
 800926e:	b003      	add	sp, #12
 8009270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8009272:	4f0c      	ldr	r7, [pc, #48]	; (80092a4 <netif_set_addr+0x68>)
  if (gw == NULL) {
 8009274:	2e00      	cmp	r6, #0
 8009276:	d1ec      	bne.n	8009252 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8009278:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 800927a:	4e0a      	ldr	r6, [pc, #40]	; (80092a4 <netif_set_addr+0x68>)
  remove = ip4_addr_isany(ipaddr);
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1ea      	bne.n	8009256 <netif_set_addr+0x1a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009280:	aa01      	add	r2, sp, #4
 8009282:	4629      	mov	r1, r5
 8009284:	4620      	mov	r0, r4
 8009286:	f7ff ffab 	bl	80091e0 <netif_do_set_ipaddr.isra.0>
 800928a:	2201      	movs	r2, #1
 800928c:	e7e4      	b.n	8009258 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 800928e:	4d05      	ldr	r5, [pc, #20]	; (80092a4 <netif_set_addr+0x68>)
  if (netmask == NULL) {
 8009290:	2f00      	cmp	r7, #0
 8009292:	d1dd      	bne.n	8009250 <netif_set_addr+0x14>
 8009294:	e7ed      	b.n	8009272 <netif_set_addr+0x36>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009296:	aa01      	add	r2, sp, #4
 8009298:	4629      	mov	r1, r5
 800929a:	4620      	mov	r0, r4
 800929c:	f7ff ffa0 	bl	80091e0 <netif_do_set_ipaddr.isra.0>
}
 80092a0:	b003      	add	sp, #12
 80092a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a4:	08011f28 	.word	0x08011f28

080092a8 <netif_add>:
{
 80092a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4615      	mov	r5, r2
 80092b2:	461f      	mov	r7, r3
 80092b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 80092b8:	f7fc fe2e 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80092bc:	2e00      	cmp	r6, #0
 80092be:	f000 8083 	beq.w	80093c8 <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80092c2:	f1b8 0f00 	cmp.w	r8, #0
 80092c6:	f000 8088 	beq.w	80093da <netif_add+0x132>
  if (ipaddr == NULL) {
 80092ca:	2c00      	cmp	r4, #0
 80092cc:	d070      	beq.n	80093b0 <netif_add+0x108>
  if (netmask == NULL) {
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	d069      	beq.n	80093a6 <netif_add+0xfe>
  if (gw == NULL) {
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	d06a      	beq.n	80093ac <netif_add+0x104>
  netif->state = state;
 80092d6:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 80092d8:	4621      	mov	r1, r4
  netif->num = netif_num;
 80092da:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8009408 <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80092de:	2400      	movs	r4, #0
  netif->state = state;
 80092e0:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80092e2:	463b      	mov	r3, r7
  netif->input = input;
 80092e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 80092e6:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 80092e8:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 80092ea:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 80092ec:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 80092f0:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 80092f2:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 80092f6:	483d      	ldr	r0, [pc, #244]	; (80093ec <netif_add+0x144>)
  netif->flags = 0;
 80092f8:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 80092fc:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80092fe:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 8009300:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009302:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009306:	f7ff ff99 	bl	800923c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800930a:	4630      	mov	r0, r6
 800930c:	47c0      	blx	r8
 800930e:	2800      	cmp	r0, #0
 8009310:	d157      	bne.n	80093c2 <netif_add+0x11a>
      if (netif->num == 255) {
 8009312:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8009316:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800940c <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800931a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80093fc <netif_add+0x154>
 800931e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8009410 <netif_add+0x168>
 8009322:	4f33      	ldr	r7, [pc, #204]	; (80093f0 <netif_add+0x148>)
      if (netif->num == 255) {
 8009324:	2aff      	cmp	r2, #255	; 0xff
 8009326:	d102      	bne.n	800932e <netif_add+0x86>
        netif->num = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800932e:	f8d8 4000 	ldr.w	r4, [r8]
 8009332:	2c00      	cmp	r4, #0
 8009334:	d042      	beq.n	80093bc <netif_add+0x114>
      num_netifs = 0;
 8009336:	2500      	movs	r5, #0
 8009338:	e007      	b.n	800934a <netif_add+0xa2>
        if (netif2->num == netif->num) {
 800933a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800933e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009342:	429a      	cmp	r2, r3
 8009344:	d014      	beq.n	8009370 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009346:	6824      	ldr	r4, [r4, #0]
 8009348:	b1fc      	cbz	r4, 800938a <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800934a:	42b4      	cmp	r4, r6
        num_netifs++;
 800934c:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009350:	d013      	beq.n	800937a <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009352:	2dff      	cmp	r5, #255	; 0xff
 8009354:	ddf1      	ble.n	800933a <netif_add+0x92>
 8009356:	465b      	mov	r3, fp
 8009358:	f240 128d 	movw	r2, #397	; 0x18d
 800935c:	4925      	ldr	r1, [pc, #148]	; (80093f4 <netif_add+0x14c>)
 800935e:	4638      	mov	r0, r7
 8009360:	f006 f92e 	bl	800f5c0 <iprintf>
        if (netif2->num == netif->num) {
 8009364:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8009368:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800936c:	429a      	cmp	r2, r3
 800936e:	d1ea      	bne.n	8009346 <netif_add+0x9e>
          netif->num++;
 8009370:	3201      	adds	r2, #1
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8009378:	e7d4      	b.n	8009324 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800937a:	465b      	mov	r3, fp
 800937c:	f240 128b 	movw	r2, #395	; 0x18b
 8009380:	4649      	mov	r1, r9
 8009382:	4638      	mov	r0, r7
 8009384:	f006 f91c 	bl	800f5c0 <iprintf>
 8009388:	e7e3      	b.n	8009352 <netif_add+0xaa>
  netif->next = netif_list;
 800938a:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 800938e:	2bfe      	cmp	r3, #254	; 0xfe
 8009390:	d012      	beq.n	80093b8 <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 8009392:	3301      	adds	r3, #1
 8009394:	b2db      	uxtb	r3, r3
  return netif;
 8009396:	4630      	mov	r0, r6
  netif->next = netif_list;
 8009398:	6034      	str	r4, [r6, #0]
 800939a:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 800939e:	f8c8 6000 	str.w	r6, [r8]
}
 80093a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80093a6:	4d14      	ldr	r5, [pc, #80]	; (80093f8 <netif_add+0x150>)
  if (gw == NULL) {
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	d194      	bne.n	80092d6 <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80093ac:	4f12      	ldr	r7, [pc, #72]	; (80093f8 <netif_add+0x150>)
 80093ae:	e792      	b.n	80092d6 <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80093b0:	4c11      	ldr	r4, [pc, #68]	; (80093f8 <netif_add+0x150>)
  if (netmask == NULL) {
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	d18d      	bne.n	80092d2 <netif_add+0x2a>
 80093b6:	e7f6      	b.n	80093a6 <netif_add+0xfe>
    netif_num = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e7ec      	b.n	8009396 <netif_add+0xee>
  if (netif->num == 254) {
 80093bc:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80093c0:	e7e5      	b.n	800938e <netif_add+0xe6>
    return NULL;
 80093c2:	4620      	mov	r0, r4
}
 80093c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80093c8:	4b0c      	ldr	r3, [pc, #48]	; (80093fc <netif_add+0x154>)
 80093ca:	f240 1227 	movw	r2, #295	; 0x127
 80093ce:	490c      	ldr	r1, [pc, #48]	; (8009400 <netif_add+0x158>)
 80093d0:	4807      	ldr	r0, [pc, #28]	; (80093f0 <netif_add+0x148>)
 80093d2:	f006 f8f5 	bl	800f5c0 <iprintf>
 80093d6:	4630      	mov	r0, r6
 80093d8:	e7e3      	b.n	80093a2 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80093da:	4b08      	ldr	r3, [pc, #32]	; (80093fc <netif_add+0x154>)
 80093dc:	f44f 7294 	mov.w	r2, #296	; 0x128
 80093e0:	4908      	ldr	r1, [pc, #32]	; (8009404 <netif_add+0x15c>)
 80093e2:	4803      	ldr	r0, [pc, #12]	; (80093f0 <netif_add+0x148>)
 80093e4:	f006 f8ec 	bl	800f5c0 <iprintf>
 80093e8:	4640      	mov	r0, r8
 80093ea:	e7da      	b.n	80093a2 <netif_add+0xfa>
 80093ec:	08009195 	.word	0x08009195
 80093f0:	08010440 	.word	0x08010440
 80093f4:	08010a54 	.word	0x08010a54
 80093f8:	08011f28 	.word	0x08011f28
 80093fc:	08010998 	.word	0x08010998
 8009400:	08010a00 	.word	0x08010a00
 8009404:	08010a1c 	.word	0x08010a1c
 8009408:	240107e4 	.word	0x240107e4
 800940c:	240107e0 	.word	0x240107e0
 8009410:	08010a40 	.word	0x08010a40

08009414 <netif_set_default>:
{
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009418:	f7fc fd7e 	bl	8005f18 <sys_check_core_locking>
  netif_default = netif;
 800941c:	4b01      	ldr	r3, [pc, #4]	; (8009424 <netif_set_default+0x10>)
 800941e:	601c      	str	r4, [r3, #0]
}
 8009420:	bd10      	pop	{r4, pc}
 8009422:	bf00      	nop
 8009424:	240107dc 	.word	0x240107dc

08009428 <netif_set_up>:
{
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800942c:	f7fc fd74 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009430:	b174      	cbz	r4, 8009450 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009432:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009436:	07da      	lsls	r2, r3, #31
 8009438:	d500      	bpl.n	800943c <netif_set_up+0x14>
}
 800943a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800943c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009440:	4620      	mov	r0, r4
 8009442:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009444:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8009448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800944c:	f7ff bea6 	b.w	800919c <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009450:	4b04      	ldr	r3, [pc, #16]	; (8009464 <netif_set_up+0x3c>)
 8009452:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009456:	4904      	ldr	r1, [pc, #16]	; (8009468 <netif_set_up+0x40>)
 8009458:	4804      	ldr	r0, [pc, #16]	; (800946c <netif_set_up+0x44>)
}
 800945a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800945e:	f006 b8af 	b.w	800f5c0 <iprintf>
 8009462:	bf00      	nop
 8009464:	08010998 	.word	0x08010998
 8009468:	08010a84 	.word	0x08010a84
 800946c:	08010440 	.word	0x08010440

08009470 <netif_set_down>:
{
 8009470:	b510      	push	{r4, lr}
 8009472:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009474:	f7fc fd50 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009478:	b17c      	cbz	r4, 800949a <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800947a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800947e:	07da      	lsls	r2, r3, #31
 8009480:	d505      	bpl.n	800948e <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009482:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009486:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009488:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800948c:	d400      	bmi.n	8009490 <netif_set_down+0x20>
}
 800948e:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8009490:	4620      	mov	r0, r4
}
 8009492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 8009496:	f004 bbdb 	b.w	800dc50 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800949a:	4b04      	ldr	r3, [pc, #16]	; (80094ac <netif_set_down+0x3c>)
 800949c:	f240 329b 	movw	r2, #923	; 0x39b
 80094a0:	4903      	ldr	r1, [pc, #12]	; (80094b0 <netif_set_down+0x40>)
 80094a2:	4804      	ldr	r0, [pc, #16]	; (80094b4 <netif_set_down+0x44>)
}
 80094a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80094a8:	f006 b88a 	b.w	800f5c0 <iprintf>
 80094ac:	08010998 	.word	0x08010998
 80094b0:	08010aa0 	.word	0x08010aa0
 80094b4:	08010440 	.word	0x08010440

080094b8 <netif_set_link_up>:
{
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80094bc:	f7fc fd2c 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80094c0:	b19c      	cbz	r4, 80094ea <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80094c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80094c6:	075a      	lsls	r2, r3, #29
 80094c8:	d500      	bpl.n	80094cc <netif_set_link_up+0x14>
}
 80094ca:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80094cc:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80094d0:	2103      	movs	r1, #3
 80094d2:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80094d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80094d8:	f7ff fe60 	bl	800919c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80094dc:	69e3      	ldr	r3, [r4, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0f3      	beq.n	80094ca <netif_set_link_up+0x12>
 80094e2:	4620      	mov	r0, r4
}
 80094e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80094e8:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80094ea:	4b04      	ldr	r3, [pc, #16]	; (80094fc <netif_set_link_up+0x44>)
 80094ec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80094f0:	4903      	ldr	r1, [pc, #12]	; (8009500 <netif_set_link_up+0x48>)
 80094f2:	4804      	ldr	r0, [pc, #16]	; (8009504 <netif_set_link_up+0x4c>)
}
 80094f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80094f8:	f006 b862 	b.w	800f5c0 <iprintf>
 80094fc:	08010998 	.word	0x08010998
 8009500:	08010ac0 	.word	0x08010ac0
 8009504:	08010440 	.word	0x08010440

08009508 <netif_set_link_down>:
{
 8009508:	b510      	push	{r4, lr}
 800950a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800950c:	f7fc fd04 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009510:	b174      	cbz	r4, 8009530 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009512:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009516:	075a      	lsls	r2, r3, #29
 8009518:	d509      	bpl.n	800952e <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800951a:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800951e:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009520:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009524:	b11a      	cbz	r2, 800952e <netif_set_link_down+0x26>
 8009526:	4620      	mov	r0, r4
}
 8009528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800952c:	4710      	bx	r2
}
 800952e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <netif_set_link_down+0x3c>)
 8009532:	f240 4206 	movw	r2, #1030	; 0x406
 8009536:	4904      	ldr	r1, [pc, #16]	; (8009548 <netif_set_link_down+0x40>)
 8009538:	4804      	ldr	r0, [pc, #16]	; (800954c <netif_set_link_down+0x44>)
}
 800953a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800953e:	f006 b83f 	b.w	800f5c0 <iprintf>
 8009542:	bf00      	nop
 8009544:	08010998 	.word	0x08010998
 8009548:	08010ae4 	.word	0x08010ae4
 800954c:	08010440 	.word	0x08010440

08009550 <netif_set_link_callback>:
{
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4604      	mov	r4, r0
 8009554:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009556:	f7fc fcdf 	bl	8005f18 <sys_check_core_locking>
  if (netif) {
 800955a:	b104      	cbz	r4, 800955e <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800955c:	61e5      	str	r5, [r4, #28]
}
 800955e:	bd38      	pop	{r3, r4, r5, pc}

08009560 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009560:	b510      	push	{r4, lr}
 8009562:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8009564:	f7fc fcd8 	bl	8005f18 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8009568:	b164      	cbz	r4, 8009584 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <netif_get_by_index+0x28>)
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	b910      	cbnz	r0, 8009576 <netif_get_by_index+0x16>
 8009570:	e007      	b.n	8009582 <netif_get_by_index+0x22>
 8009572:	6800      	ldr	r0, [r0, #0]
 8009574:	b128      	cbz	r0, 8009582 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8009576:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800957a:	3301      	adds	r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	42a3      	cmp	r3, r4
 8009580:	d1f7      	bne.n	8009572 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 8009582:	bd10      	pop	{r4, pc}
  return NULL;
 8009584:	4620      	mov	r0, r4
}
 8009586:	bd10      	pop	{r4, pc}
 8009588:	240107e0 	.word	0x240107e0

0800958c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800958c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800958e:	f005 fdd7 	bl	800f140 <sys_arch_protect>
 8009592:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <pbuf_free_ooseq_callback+0x2c>)
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	f005 fdde 	bl	800f158 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800959c:	4b07      	ldr	r3, [pc, #28]	; (80095bc <pbuf_free_ooseq_callback+0x30>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	b910      	cbnz	r0, 80095a8 <pbuf_free_ooseq_callback+0x1c>
 80095a2:	e008      	b.n	80095b6 <pbuf_free_ooseq_callback+0x2a>
 80095a4:	68c0      	ldr	r0, [r0, #12]
 80095a6:	b130      	cbz	r0, 80095b6 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 80095a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0fa      	beq.n	80095a4 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 80095ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 80095b2:	f001 bc53 	b.w	800ae5c <tcp_free_ooseq>
}
 80095b6:	bd08      	pop	{r3, pc}
 80095b8:	240107e5 	.word	0x240107e5
 80095bc:	240107e8 	.word	0x240107e8

080095c0 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 80095c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 80095c4:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095c6:	f8df a124 	ldr.w	sl, [pc, #292]	; 80096ec <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 80095ca:	4605      	mov	r5, r0
 80095cc:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 80095ce:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095d0:	8944      	ldrh	r4, [r0, #10]
 80095d2:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095d4:	f8df b128 	ldr.w	fp, [pc, #296]	; 8009700 <pbuf_copy.part.0+0x140>
 80095d8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80096f4 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80095dc:	1be4      	subs	r4, r4, r7
 80095de:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80095e0:	6868      	ldr	r0, [r5, #4]
 80095e2:	429c      	cmp	r4, r3
 80095e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095e8:	4438      	add	r0, r7
 80095ea:	bf28      	it	cs
 80095ec:	461c      	movcs	r4, r3
 80095ee:	4431      	add	r1, r6
 80095f0:	4622      	mov	r2, r4
    offset_to += len;
 80095f2:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80095f4:	f006 f925 	bl	800f842 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095f8:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80095fa:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80095fc:	429f      	cmp	r7, r3
 80095fe:	d838      	bhi.n	8009672 <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009600:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009604:	429e      	cmp	r6, r3
 8009606:	d82a      	bhi.n	800965e <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 8009608:	429e      	cmp	r6, r3
 800960a:	d318      	bcc.n	800963e <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800960c:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800960e:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8009612:	429f      	cmp	r7, r3
 8009614:	d04c      	beq.n	80096b0 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	d145      	bne.n	80096a8 <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800961c:	892a      	ldrh	r2, [r5, #8]
 800961e:	896b      	ldrh	r3, [r5, #10]
 8009620:	429a      	cmp	r2, r3
 8009622:	d14d      	bne.n	80096c0 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009624:	6828      	ldr	r0, [r5, #0]
 8009626:	b140      	cbz	r0, 800963a <pbuf_copy.part.0+0x7a>
 8009628:	4b30      	ldr	r3, [pc, #192]	; (80096ec <pbuf_copy.part.0+0x12c>)
 800962a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800962e:	4930      	ldr	r1, [pc, #192]	; (80096f0 <pbuf_copy.part.0+0x130>)
 8009630:	4830      	ldr	r0, [pc, #192]	; (80096f4 <pbuf_copy.part.0+0x134>)
 8009632:	f005 ffc5 	bl	800f5c0 <iprintf>
 8009636:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800963a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 800963e:	896a      	ldrh	r2, [r5, #10]
 8009640:	4297      	cmp	r7, r2
 8009642:	d040      	beq.n	80096c6 <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009644:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8009648:	429a      	cmp	r2, r3
 800964a:	d01a      	beq.n	8009682 <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800964c:	896c      	ldrh	r4, [r5, #10]
 800964e:	2d00      	cmp	r5, #0
 8009650:	d0c4      	beq.n	80095dc <pbuf_copy.part.0+0x1c>
 8009652:	892b      	ldrh	r3, [r5, #8]
 8009654:	42a3      	cmp	r3, r4
 8009656:	d045      	beq.n	80096e4 <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009658:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800965c:	e7be      	b.n	80095dc <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800965e:	4653      	mov	r3, sl
 8009660:	f240 32da 	movw	r2, #986	; 0x3da
 8009664:	4924      	ldr	r1, [pc, #144]	; (80096f8 <pbuf_copy.part.0+0x138>)
 8009666:	4648      	mov	r0, r9
 8009668:	f005 ffaa 	bl	800f5c0 <iprintf>
    if (offset_from >= p_from->len) {
 800966c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009670:	e7ca      	b.n	8009608 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009672:	4653      	mov	r3, sl
 8009674:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009678:	4659      	mov	r1, fp
 800967a:	4648      	mov	r0, r9
 800967c:	f005 ffa0 	bl	800f5c0 <iprintf>
 8009680:	e7be      	b.n	8009600 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009682:	f8d8 2000 	ldr.w	r2, [r8]
 8009686:	2a00      	cmp	r2, #0
 8009688:	d0e0      	beq.n	800964c <pbuf_copy.part.0+0x8c>
 800968a:	4b18      	ldr	r3, [pc, #96]	; (80096ec <pbuf_copy.part.0+0x12c>)
 800968c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009690:	4917      	ldr	r1, [pc, #92]	; (80096f0 <pbuf_copy.part.0+0x130>)
 8009692:	4818      	ldr	r0, [pc, #96]	; (80096f4 <pbuf_copy.part.0+0x134>)
 8009694:	f005 ff94 	bl	800f5c0 <iprintf>
 8009698:	f06f 0005 	mvn.w	r0, #5
}
 800969c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80096a0:	f1b8 0f00 	cmp.w	r8, #0
 80096a4:	d00a      	beq.n	80096bc <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 80096a6:	2700      	movs	r7, #0
 80096a8:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80096aa:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80096ae:	e7c9      	b.n	8009644 <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 80096b0:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	d1f4      	bne.n	80096a0 <pbuf_copy.part.0+0xe0>
 80096b6:	f1b8 0f00 	cmp.w	r8, #0
 80096ba:	d108      	bne.n	80096ce <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80096bc:	2d00      	cmp	r5, #0
 80096be:	d1ad      	bne.n	800961c <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 80096c0:	2000      	movs	r0, #0
}
 80096c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 80096c6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096c8:	b10d      	cbz	r5, 80096ce <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 80096ca:	2700      	movs	r7, #0
 80096cc:	e7ed      	b.n	80096aa <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <pbuf_copy.part.0+0x12c>)
 80096d0:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80096d4:	4909      	ldr	r1, [pc, #36]	; (80096fc <pbuf_copy.part.0+0x13c>)
 80096d6:	4807      	ldr	r0, [pc, #28]	; (80096f4 <pbuf_copy.part.0+0x134>)
 80096d8:	f005 ff72 	bl	800f5c0 <iprintf>
 80096dc:	f06f 000f 	mvn.w	r0, #15
}
 80096e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0b6      	beq.n	8009658 <pbuf_copy.part.0+0x98>
 80096ea:	e79d      	b.n	8009628 <pbuf_copy.part.0+0x68>
 80096ec:	08010b08 	.word	0x08010b08
 80096f0:	08010b7c 	.word	0x08010b7c
 80096f4:	08010440 	.word	0x08010440
 80096f8:	08010b50 	.word	0x08010b50
 80096fc:	08010b6c 	.word	0x08010b6c
 8009700:	08010b38 	.word	0x08010b38

08009704 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009704:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009708:	2b01      	cmp	r3, #1
{
 800970a:	b570      	push	{r4, r5, r6, lr}
 800970c:	4614      	mov	r4, r2
 800970e:	4606      	mov	r6, r0
 8009710:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009712:	d10d      	bne.n	8009730 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009714:	200b      	movs	r0, #11
 8009716:	f7ff fcc9 	bl	80090ac <memp_malloc>
  if (p == NULL) {
 800971a:	b140      	cbz	r0, 800972e <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 800971c:	2300      	movs	r3, #0
  p->ref = 1;
 800971e:	2201      	movs	r2, #1
  p->payload = payload;
 8009720:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8009722:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 8009724:	6003      	str	r3, [r0, #0]
  p->len = len;
 8009726:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8009728:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800972a:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800972c:	81c2      	strh	r2, [r0, #14]
}
 800972e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009730:	4b03      	ldr	r3, [pc, #12]	; (8009740 <pbuf_alloc_reference+0x3c>)
 8009732:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009736:	4903      	ldr	r1, [pc, #12]	; (8009744 <pbuf_alloc_reference+0x40>)
 8009738:	4803      	ldr	r0, [pc, #12]	; (8009748 <pbuf_alloc_reference+0x44>)
 800973a:	f005 ff41 	bl	800f5c0 <iprintf>
 800973e:	e7e9      	b.n	8009714 <pbuf_alloc_reference+0x10>
 8009740:	08010b08 	.word	0x08010b08
 8009744:	08010ba8 	.word	0x08010ba8
 8009748:	08010440 	.word	0x08010440

0800974c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800974c:	3003      	adds	r0, #3
 800974e:	f020 0003 	bic.w	r0, r0, #3
{
 8009752:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009754:	eb01 0e00 	add.w	lr, r1, r0
{
 8009758:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800975c:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800975e:	45e6      	cmp	lr, ip
 8009760:	d80d      	bhi.n	800977e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8009762:	b104      	cbz	r4, 8009766 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009764:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009766:	4618      	mov	r0, r3
  p->next = NULL;
 8009768:	2300      	movs	r3, #0
  p->payload = payload;
 800976a:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 800976c:	2402      	movs	r4, #2
  p->next = NULL;
 800976e:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8009770:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8009772:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8009774:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8009776:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8009778:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 800977a:	81c3      	strh	r3, [r0, #14]
}
 800977c:	bd10      	pop	{r4, pc}
    return NULL;
 800977e:	2000      	movs	r0, #0
}
 8009780:	bd10      	pop	{r4, pc}
 8009782:	bf00      	nop

08009784 <pbuf_add_header>:
{
 8009784:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009786:	b310      	cbz	r0, 80097ce <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009788:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800978c:	d20c      	bcs.n	80097a8 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 800978e:	b169      	cbz	r1, 80097ac <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 8009790:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009794:	8902      	ldrh	r2, [r0, #8]
 8009796:	4603      	mov	r3, r0
 8009798:	4462      	add	r2, ip
 800979a:	b292      	uxth	r2, r2
 800979c:	4594      	cmp	ip, r2
 800979e:	d803      	bhi.n	80097a8 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80097a0:	f990 000c 	ldrsb.w	r0, [r0, #12]
 80097a4:	2800      	cmp	r0, #0
 80097a6:	db03      	blt.n	80097b0 <pbuf_add_header+0x2c>
    return 1;
 80097a8:	2001      	movs	r0, #1
}
 80097aa:	bd08      	pop	{r3, pc}
    return 0;
 80097ac:	4608      	mov	r0, r1
}
 80097ae:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 80097b0:	6858      	ldr	r0, [r3, #4]
 80097b2:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80097b4:	f103 0010 	add.w	r0, r3, #16
 80097b8:	4281      	cmp	r1, r0
 80097ba:	d3f5      	bcc.n	80097a8 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 80097bc:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 80097c0:	2000      	movs	r0, #0
  p->payload = payload;
 80097c2:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80097c4:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80097c6:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80097c8:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 80097cc:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <pbuf_add_header+0x5c>)
 80097d0:	f240 12df 	movw	r2, #479	; 0x1df
 80097d4:	4903      	ldr	r1, [pc, #12]	; (80097e4 <pbuf_add_header+0x60>)
 80097d6:	4804      	ldr	r0, [pc, #16]	; (80097e8 <pbuf_add_header+0x64>)
 80097d8:	f005 fef2 	bl	800f5c0 <iprintf>
    return 1;
 80097dc:	2001      	movs	r0, #1
}
 80097de:	bd08      	pop	{r3, pc}
 80097e0:	08010b08 	.word	0x08010b08
 80097e4:	08010bbc 	.word	0x08010bbc
 80097e8:	08010440 	.word	0x08010440

080097ec <pbuf_remove_header>:
{
 80097ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80097ee:	b1a0      	cbz	r0, 800981a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80097f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80097f4:	d21a      	bcs.n	800982c <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 80097f6:	b171      	cbz	r1, 8009816 <pbuf_remove_header+0x2a>
 80097f8:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 80097fa:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80097fc:	895a      	ldrh	r2, [r3, #10]
 80097fe:	4290      	cmp	r0, r2
 8009800:	d816      	bhi.n	8009830 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009802:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8009804:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009806:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009808:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800980a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800980c:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800980e:	605c      	str	r4, [r3, #4]
  return 0;
 8009810:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009812:	811a      	strh	r2, [r3, #8]
}
 8009814:	bd10      	pop	{r4, pc}
    return 0;
 8009816:	4608      	mov	r0, r1
}
 8009818:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800981a:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <pbuf_remove_header+0x58>)
 800981c:	f240 224b 	movw	r2, #587	; 0x24b
 8009820:	4909      	ldr	r1, [pc, #36]	; (8009848 <pbuf_remove_header+0x5c>)
 8009822:	480a      	ldr	r0, [pc, #40]	; (800984c <pbuf_remove_header+0x60>)
 8009824:	f005 fecc 	bl	800f5c0 <iprintf>
    return 1;
 8009828:	2001      	movs	r0, #1
}
 800982a:	bd10      	pop	{r4, pc}
    return 1;
 800982c:	2001      	movs	r0, #1
}
 800982e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009830:	4b04      	ldr	r3, [pc, #16]	; (8009844 <pbuf_remove_header+0x58>)
 8009832:	f240 2255 	movw	r2, #597	; 0x255
 8009836:	4906      	ldr	r1, [pc, #24]	; (8009850 <pbuf_remove_header+0x64>)
 8009838:	4804      	ldr	r0, [pc, #16]	; (800984c <pbuf_remove_header+0x60>)
 800983a:	f005 fec1 	bl	800f5c0 <iprintf>
 800983e:	2001      	movs	r0, #1
}
 8009840:	bd10      	pop	{r4, pc}
 8009842:	bf00      	nop
 8009844:	08010b08 	.word	0x08010b08
 8009848:	08010bbc 	.word	0x08010bbc
 800984c:	08010440 	.word	0x08010440
 8009850:	08010bc8 	.word	0x08010bc8

08009854 <pbuf_header_force>:
  if (header_size_increment < 0) {
 8009854:	2900      	cmp	r1, #0
 8009856:	db1a      	blt.n	800988e <pbuf_header_force+0x3a>
{
 8009858:	b508      	push	{r3, lr}
 800985a:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 800985c:	b1d0      	cbz	r0, 8009894 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 800985e:	b341      	cbz	r1, 80098b2 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 8009860:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009864:	891a      	ldrh	r2, [r3, #8]
 8009866:	4462      	add	r2, ip
 8009868:	b292      	uxth	r2, r2
 800986a:	4594      	cmp	ip, r2
 800986c:	d81f      	bhi.n	80098ae <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800986e:	f993 000c 	ldrsb.w	r0, [r3, #12]
 8009872:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 8009874:	6858      	ldr	r0, [r3, #4]
 8009876:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800987a:	db14      	blt.n	80098a6 <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 800987c:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8009880:	2000      	movs	r0, #0
  p->payload = payload;
 8009882:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009884:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009886:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009888:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800988c:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800988e:	4249      	negs	r1, r1
 8009890:	f7ff bfac 	b.w	80097ec <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 8009894:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <pbuf_header_force+0x64>)
 8009896:	f240 12df 	movw	r2, #479	; 0x1df
 800989a:	4908      	ldr	r1, [pc, #32]	; (80098bc <pbuf_header_force+0x68>)
 800989c:	4808      	ldr	r0, [pc, #32]	; (80098c0 <pbuf_header_force+0x6c>)
 800989e:	f005 fe8f 	bl	800f5c0 <iprintf>
    return 1;
 80098a2:	2001      	movs	r0, #1
}
 80098a4:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80098a6:	f103 0010 	add.w	r0, r3, #16
 80098aa:	4281      	cmp	r1, r0
 80098ac:	d2e6      	bcs.n	800987c <pbuf_header_force+0x28>
    return 1;
 80098ae:	2001      	movs	r0, #1
}
 80098b0:	bd08      	pop	{r3, pc}
    return 0;
 80098b2:	4608      	mov	r0, r1
}
 80098b4:	bd08      	pop	{r3, pc}
 80098b6:	bf00      	nop
 80098b8:	08010b08 	.word	0x08010b08
 80098bc:	08010bbc 	.word	0x08010bbc
 80098c0:	08010440 	.word	0x08010440

080098c4 <pbuf_free>:
{
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 80098c8:	4605      	mov	r5, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d055      	beq.n	800997a <pbuf_free+0xb6>
  count = 0;
 80098ce:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80098d0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8009998 <pbuf_free+0xd4>
 80098d4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80099a0 <pbuf_free+0xdc>
 80098d8:	4f2c      	ldr	r7, [pc, #176]	; (800998c <pbuf_free+0xc8>)
 80098da:	e008      	b.n	80098ee <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80098dc:	692b      	ldr	r3, [r5, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03d      	beq.n	800995e <pbuf_free+0x9a>
        pc->custom_free_function(p);
 80098e2:	4628      	mov	r0, r5
 80098e4:	4798      	blx	r3
      count++;
 80098e6:	3601      	adds	r6, #1
 80098e8:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 80098ea:	b1fc      	cbz	r4, 800992c <pbuf_free+0x68>
 80098ec:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 80098ee:	f005 fc27 	bl	800f140 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80098f2:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 80098f4:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80098f6:	b1e3      	cbz	r3, 8009932 <pbuf_free+0x6e>
    ref = --(p->ref);
 80098f8:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 80098fa:	4620      	mov	r0, r4
    ref = --(p->ref);
 80098fc:	b2dc      	uxtb	r4, r3
 80098fe:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8009900:	f005 fc2a 	bl	800f158 <sys_arch_unprotect>
    if (ref == 0) {
 8009904:	b994      	cbnz	r4, 800992c <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009906:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 8009908:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800990a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800990c:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800990e:	d4e5      	bmi.n	80098dc <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 8009910:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009914:	2b02      	cmp	r3, #2
 8009916:	d01d      	beq.n	8009954 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009918:	2b01      	cmp	r3, #1
 800991a:	d029      	beq.n	8009970 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800991c:	b993      	cbnz	r3, 8009944 <pbuf_free+0x80>
      count++;
 800991e:	3601      	adds	r6, #1
          mem_free(p);
 8009920:	4628      	mov	r0, r5
 8009922:	f7ff f8eb 	bl	8008afc <mem_free>
      count++;
 8009926:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8009928:	2c00      	cmp	r4, #0
 800992a:	d1df      	bne.n	80098ec <pbuf_free+0x28>
}
 800992c:	4630      	mov	r0, r6
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009932:	4643      	mov	r3, r8
 8009934:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009938:	4649      	mov	r1, r9
 800993a:	4638      	mov	r0, r7
 800993c:	f005 fe40 	bl	800f5c0 <iprintf>
    ref = --(p->ref);
 8009940:	7bab      	ldrb	r3, [r5, #14]
 8009942:	e7d9      	b.n	80098f8 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8009944:	4643      	mov	r3, r8
 8009946:	f240 320f 	movw	r2, #783	; 0x30f
 800994a:	4911      	ldr	r1, [pc, #68]	; (8009990 <pbuf_free+0xcc>)
 800994c:	4638      	mov	r0, r7
 800994e:	f005 fe37 	bl	800f5c0 <iprintf>
 8009952:	e7c8      	b.n	80098e6 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 8009954:	4629      	mov	r1, r5
 8009956:	200c      	movs	r0, #12
 8009958:	f7ff fbee 	bl	8009138 <memp_free>
 800995c:	e7c3      	b.n	80098e6 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800995e:	4643      	mov	r3, r8
 8009960:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009964:	490b      	ldr	r1, [pc, #44]	; (8009994 <pbuf_free+0xd0>)
 8009966:	4638      	mov	r0, r7
 8009968:	f005 fe2a 	bl	800f5c0 <iprintf>
        pc->custom_free_function(p);
 800996c:	692b      	ldr	r3, [r5, #16]
 800996e:	e7b8      	b.n	80098e2 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 8009970:	4629      	mov	r1, r5
 8009972:	200b      	movs	r0, #11
 8009974:	f7ff fbe0 	bl	8009138 <memp_free>
 8009978:	e7b5      	b.n	80098e6 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <pbuf_free+0xd4>)
 800997c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009980:	4906      	ldr	r1, [pc, #24]	; (800999c <pbuf_free+0xd8>)
    return 0;
 8009982:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 8009984:	4801      	ldr	r0, [pc, #4]	; (800998c <pbuf_free+0xc8>)
 8009986:	f005 fe1b 	bl	800f5c0 <iprintf>
    return 0;
 800998a:	e7cf      	b.n	800992c <pbuf_free+0x68>
 800998c:	08010440 	.word	0x08010440
 8009990:	08010c24 	.word	0x08010c24
 8009994:	08010c00 	.word	0x08010c00
 8009998:	08010b08 	.word	0x08010b08
 800999c:	08010bbc 	.word	0x08010bbc
 80099a0:	08010be8 	.word	0x08010be8

080099a4 <pbuf_alloc>:
  switch (type) {
 80099a4:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 80099a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099ac:	4688      	mov	r8, r1
 80099ae:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 80099b0:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 80099b4:	d040      	beq.n	8009a38 <pbuf_alloc+0x94>
 80099b6:	d80f      	bhi.n	80099d8 <pbuf_alloc+0x34>
 80099b8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d035      	beq.n	8009a2c <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80099c0:	4b48      	ldr	r3, [pc, #288]	; (8009ae4 <pbuf_alloc+0x140>)
 80099c2:	f240 1227 	movw	r2, #295	; 0x127
 80099c6:	4948      	ldr	r1, [pc, #288]	; (8009ae8 <pbuf_alloc+0x144>)
      return NULL;
 80099c8:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80099ca:	4848      	ldr	r0, [pc, #288]	; (8009aec <pbuf_alloc+0x148>)
 80099cc:	f005 fdf8 	bl	800f5c0 <iprintf>
}
 80099d0:	4620      	mov	r0, r4
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 80099d8:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80099dc:	d1f0      	bne.n	80099c0 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80099de:	f109 0303 	add.w	r3, r9, #3
 80099e2:	1cca      	adds	r2, r1, #3
 80099e4:	4605      	mov	r5, r0
 80099e6:	f022 0203 	bic.w	r2, r2, #3
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	4413      	add	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80099f6:	4283      	cmp	r3, r0
 80099f8:	bf28      	it	cs
 80099fa:	4603      	movcs	r3, r0
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d84c      	bhi.n	8009a9a <pbuf_alloc+0xf6>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009a00:	f7ff fa20 	bl	8008e44 <mem_malloc>
      if (p == NULL) {
 8009a04:	4604      	mov	r4, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d0e2      	beq.n	80099d0 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009a0a:	1943      	adds	r3, r0, r5
  p->next = NULL;
 8009a0c:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8009a0e:	4a38      	ldr	r2, [pc, #224]	; (8009af0 <pbuf_alloc+0x14c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009a10:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 8009a12:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 8009a16:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009a18:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 8009a1c:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 8009a20:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 8009a22:	6043      	str	r3, [r0, #4]
}
 8009a24:	4620      	mov	r0, r4
 8009a26:	b003      	add	sp, #12
 8009a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8009a2c:	2000      	movs	r0, #0
}
 8009a2e:	b003      	add	sp, #12
 8009a30:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8009a34:	f7ff be66 	b.w	8009704 <pbuf_alloc_reference>
  switch (type) {
 8009a38:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a3a:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 8009a3e:	4d2d      	ldr	r5, [pc, #180]	; (8009af4 <pbuf_alloc+0x150>)
  switch (type) {
 8009a40:	460c      	mov	r4, r1
 8009a42:	e009      	b.n	8009a58 <pbuf_alloc+0xb4>
          last->next = q;
 8009a44:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8009a46:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 8009a4a:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 8009a4e:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 8009a52:	f1b8 0f00 	cmp.w	r8, #0
 8009a56:	d0bb      	beq.n	80099d0 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009a58:	200c      	movs	r0, #12
 8009a5a:	460f      	mov	r7, r1
 8009a5c:	f7ff fb26 	bl	80090ac <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a60:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 8009a64:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 8009a68:	4601      	mov	r1, r0
 8009a6a:	b1d8      	cbz	r0, 8009aa4 <pbuf_alloc+0x100>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a6c:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009a70:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 8009a74:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a78:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009a7a:	3213      	adds	r2, #19
  p->next = NULL;
 8009a7c:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a80:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009a82:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8009a86:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a88:	4543      	cmp	r3, r8
  p->payload = payload;
 8009a8a:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009a8c:	bf28      	it	cs
 8009a8e:	4643      	movcs	r3, r8
  p->len = len;
 8009a90:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8009a92:	2c00      	cmp	r4, #0
 8009a94:	d1d6      	bne.n	8009a44 <pbuf_alloc+0xa0>
 8009a96:	4604      	mov	r4, r0
 8009a98:	e7d5      	b.n	8009a46 <pbuf_alloc+0xa2>
          return NULL;
 8009a9a:	2400      	movs	r4, #0
}
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	b003      	add	sp, #12
 8009aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 8009aa4:	4e14      	ldr	r6, [pc, #80]	; (8009af8 <pbuf_alloc+0x154>)
 8009aa6:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 8009aa8:	f005 fb4a 	bl	800f140 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8009aac:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8009aae:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8009ab0:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8009ab2:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009ab4:	f005 fb50 	bl	800f158 <sys_arch_unprotect>
  if (!queued) {
 8009ab8:	9901      	ldr	r1, [sp, #4]
 8009aba:	b135      	cbz	r5, 8009aca <pbuf_alloc+0x126>
          if (p) {
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d0ec      	beq.n	8009a9a <pbuf_alloc+0xf6>
            pbuf_free(p);
 8009ac0:	4620      	mov	r0, r4
          return NULL;
 8009ac2:	2400      	movs	r4, #0
            pbuf_free(p);
 8009ac4:	f7ff fefe 	bl	80098c4 <pbuf_free>
 8009ac8:	e782      	b.n	80099d0 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009aca:	480c      	ldr	r0, [pc, #48]	; (8009afc <pbuf_alloc+0x158>)
 8009acc:	f7fe fee2 	bl	8008894 <tcpip_try_callback>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d0f3      	beq.n	8009abc <pbuf_alloc+0x118>
 8009ad4:	f005 fb34 	bl	800f140 <sys_arch_protect>
 8009ad8:	9901      	ldr	r1, [sp, #4]
 8009ada:	7031      	strb	r1, [r6, #0]
 8009adc:	f005 fb3c 	bl	800f158 <sys_arch_unprotect>
 8009ae0:	e7ec      	b.n	8009abc <pbuf_alloc+0x118>
 8009ae2:	bf00      	nop
 8009ae4:	08010b08 	.word	0x08010b08
 8009ae8:	08010c38 	.word	0x08010c38
 8009aec:	08010440 	.word	0x08010440
 8009af0:	00010080 	.word	0x00010080
 8009af4:	00010082 	.word	0x00010082
 8009af8:	240107e5 	.word	0x240107e5
 8009afc:	0800958d 	.word	0x0800958d

08009b00 <pbuf_realloc>:
{
 8009b00:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b02:	4604      	mov	r4, r0
{
 8009b04:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d036      	beq.n	8009b78 <pbuf_realloc+0x78>
  if (new_len >= p->tot_len) {
 8009b0a:	8922      	ldrh	r2, [r4, #8]
 8009b0c:	42aa      	cmp	r2, r5
 8009b0e:	d91b      	bls.n	8009b48 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 8009b10:	8963      	ldrh	r3, [r4, #10]
 8009b12:	429d      	cmp	r5, r3
 8009b14:	d90d      	bls.n	8009b32 <pbuf_realloc+0x32>
 8009b16:	1aa9      	subs	r1, r5, r2
 8009b18:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009b1a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8009b1c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009b1e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8009b20:	b29d      	uxth	r5, r3
    q = q->next;
 8009b22:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009b24:	2c00      	cmp	r4, #0
 8009b26:	d02f      	beq.n	8009b88 <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 8009b28:	8963      	ldrh	r3, [r4, #10]
 8009b2a:	42ab      	cmp	r3, r5
 8009b2c:	d201      	bcs.n	8009b32 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009b2e:	8922      	ldrh	r2, [r4, #8]
 8009b30:	e7f3      	b.n	8009b1a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009b32:	7b22      	ldrb	r2, [r4, #12]
 8009b34:	0712      	lsls	r2, r2, #28
 8009b36:	d008      	beq.n	8009b4a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 8009b38:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8009b3a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8009b3c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8009b3e:	b108      	cbz	r0, 8009b44 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 8009b40:	f7ff fec0 	bl	80098c4 <pbuf_free>
  q->next = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	6023      	str	r3, [r4, #0]
}
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009b4a:	42ab      	cmp	r3, r5
 8009b4c:	d0f4      	beq.n	8009b38 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009b4e:	7b63      	ldrb	r3, [r4, #13]
 8009b50:	079b      	lsls	r3, r3, #30
 8009b52:	d4f1      	bmi.n	8009b38 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	4620      	mov	r0, r4
 8009b58:	1b1b      	subs	r3, r3, r4
 8009b5a:	1959      	adds	r1, r3, r5
 8009b5c:	f7ff f8b8 	bl	8008cd0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009b60:	4604      	mov	r4, r0
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d1e8      	bne.n	8009b38 <pbuf_realloc+0x38>
 8009b66:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <pbuf_realloc+0x9c>)
 8009b68:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009b6c:	490c      	ldr	r1, [pc, #48]	; (8009ba0 <pbuf_realloc+0xa0>)
 8009b6e:	480d      	ldr	r0, [pc, #52]	; (8009ba4 <pbuf_realloc+0xa4>)
 8009b70:	f005 fd26 	bl	800f5c0 <iprintf>
  q->len = rem_len;
 8009b74:	8164      	strh	r4, [r4, #10]
 8009b76:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b78:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <pbuf_realloc+0x9c>)
 8009b7a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009b7e:	490a      	ldr	r1, [pc, #40]	; (8009ba8 <pbuf_realloc+0xa8>)
 8009b80:	4808      	ldr	r0, [pc, #32]	; (8009ba4 <pbuf_realloc+0xa4>)
 8009b82:	f005 fd1d 	bl	800f5c0 <iprintf>
 8009b86:	e7c0      	b.n	8009b0a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <pbuf_realloc+0x9c>)
 8009b8a:	f240 12af 	movw	r2, #431	; 0x1af
 8009b8e:	4907      	ldr	r1, [pc, #28]	; (8009bac <pbuf_realloc+0xac>)
 8009b90:	4804      	ldr	r0, [pc, #16]	; (8009ba4 <pbuf_realloc+0xa4>)
 8009b92:	f005 fd15 	bl	800f5c0 <iprintf>
  while (rem_len > q->len) {
 8009b96:	8963      	ldrh	r3, [r4, #10]
 8009b98:	deff      	udf	#255	; 0xff
 8009b9a:	bf00      	nop
 8009b9c:	08010b08 	.word	0x08010b08
 8009ba0:	08010c84 	.word	0x08010c84
 8009ba4:	08010440 	.word	0x08010440
 8009ba8:	08010c54 	.word	0x08010c54
 8009bac:	08010c6c 	.word	0x08010c6c

08009bb0 <pbuf_clen>:
  while (p != NULL) {
 8009bb0:	b138      	cbz	r0, 8009bc2 <pbuf_clen+0x12>
  len = 0;
 8009bb2:	2300      	movs	r3, #0
    ++len;
 8009bb4:	3301      	adds	r3, #1
    p = p->next;
 8009bb6:	6800      	ldr	r0, [r0, #0]
    ++len;
 8009bb8:	b29b      	uxth	r3, r3
  while (p != NULL) {
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d1fa      	bne.n	8009bb4 <pbuf_clen+0x4>
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	4770      	bx	lr
  len = 0;
 8009bc2:	4603      	mov	r3, r0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	4770      	bx	lr

08009bc8 <pbuf_ref>:
  if (p != NULL) {
 8009bc8:	b158      	cbz	r0, 8009be2 <pbuf_ref+0x1a>
{
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009bce:	f005 fab7 	bl	800f140 <sys_arch_protect>
 8009bd2:	7ba3      	ldrb	r3, [r4, #14]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	73a3      	strb	r3, [r4, #14]
 8009bd8:	f005 fabe 	bl	800f158 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009bdc:	7ba3      	ldrb	r3, [r4, #14]
 8009bde:	b10b      	cbz	r3, 8009be4 <pbuf_ref+0x1c>
}
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <pbuf_ref+0x30>)
 8009be6:	f240 3242 	movw	r2, #834	; 0x342
 8009bea:	4904      	ldr	r1, [pc, #16]	; (8009bfc <pbuf_ref+0x34>)
 8009bec:	4804      	ldr	r0, [pc, #16]	; (8009c00 <pbuf_ref+0x38>)
}
 8009bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009bf2:	f005 bce5 	b.w	800f5c0 <iprintf>
 8009bf6:	bf00      	nop
 8009bf8:	08010b08 	.word	0x08010b08
 8009bfc:	08010ca0 	.word	0x08010ca0
 8009c00:	08010440 	.word	0x08010440

08009c04 <pbuf_cat>:
{
 8009c04:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009c06:	b330      	cbz	r0, 8009c56 <pbuf_cat+0x52>
 8009c08:	460d      	mov	r5, r1
 8009c0a:	b321      	cbz	r1, 8009c56 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 8009c0c:	6803      	ldr	r3, [r0, #0]
 8009c0e:	4604      	mov	r4, r0
 8009c10:	b13b      	cbz	r3, 8009c22 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009c12:	8922      	ldrh	r2, [r4, #8]
 8009c14:	8928      	ldrh	r0, [r5, #8]
 8009c16:	4402      	add	r2, r0
 8009c18:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009c1a:	461c      	mov	r4, r3
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f7      	bne.n	8009c12 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009c22:	8963      	ldrh	r3, [r4, #10]
 8009c24:	8922      	ldrh	r2, [r4, #8]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d010      	beq.n	8009c4c <pbuf_cat+0x48>
 8009c2a:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <pbuf_cat+0x64>)
 8009c2c:	f240 3262 	movw	r2, #866	; 0x362
 8009c30:	490e      	ldr	r1, [pc, #56]	; (8009c6c <pbuf_cat+0x68>)
 8009c32:	480f      	ldr	r0, [pc, #60]	; (8009c70 <pbuf_cat+0x6c>)
 8009c34:	f005 fcc4 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	b133      	cbz	r3, 8009c4a <pbuf_cat+0x46>
 8009c3c:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <pbuf_cat+0x64>)
 8009c3e:	f240 3263 	movw	r2, #867	; 0x363
 8009c42:	490c      	ldr	r1, [pc, #48]	; (8009c74 <pbuf_cat+0x70>)
 8009c44:	480a      	ldr	r0, [pc, #40]	; (8009c70 <pbuf_cat+0x6c>)
 8009c46:	f005 fcbb 	bl	800f5c0 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009c4a:	8923      	ldrh	r3, [r4, #8]
 8009c4c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 8009c4e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009c50:	4413      	add	r3, r2
 8009c52:	8123      	strh	r3, [r4, #8]
}
 8009c54:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009c56:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <pbuf_cat+0x64>)
 8009c58:	f240 3259 	movw	r2, #857	; 0x359
 8009c5c:	4906      	ldr	r1, [pc, #24]	; (8009c78 <pbuf_cat+0x74>)
 8009c5e:	4804      	ldr	r0, [pc, #16]	; (8009c70 <pbuf_cat+0x6c>)
}
 8009c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009c64:	f005 bcac 	b.w	800f5c0 <iprintf>
 8009c68:	08010b08 	.word	0x08010b08
 8009c6c:	08010cec 	.word	0x08010cec
 8009c70:	08010440 	.word	0x08010440
 8009c74:	08010d1c 	.word	0x08010d1c
 8009c78:	08010cb4 	.word	0x08010cb4

08009c7c <pbuf_copy>:
{
 8009c7c:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009c7e:	b140      	cbz	r0, 8009c92 <pbuf_copy+0x16>
 8009c80:	b139      	cbz	r1, 8009c92 <pbuf_copy+0x16>
 8009c82:	8902      	ldrh	r2, [r0, #8]
 8009c84:	890b      	ldrh	r3, [r1, #8]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d303      	bcc.n	8009c92 <pbuf_copy+0x16>
}
 8009c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009c8e:	f7ff bc97 	b.w	80095c0 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009c92:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <pbuf_copy+0x2c>)
 8009c94:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009c98:	4904      	ldr	r1, [pc, #16]	; (8009cac <pbuf_copy+0x30>)
 8009c9a:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <pbuf_copy+0x34>)
 8009c9c:	f005 fc90 	bl	800f5c0 <iprintf>
}
 8009ca0:	f06f 000f 	mvn.w	r0, #15
 8009ca4:	bd08      	pop	{r3, pc}
 8009ca6:	bf00      	nop
 8009ca8:	08010b08 	.word	0x08010b08
 8009cac:	08010d2c 	.word	0x08010d2c
 8009cb0:	08010440 	.word	0x08010440

08009cb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009cb8:	4605      	mov	r5, r0
 8009cba:	b370      	cbz	r0, 8009d1a <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d036      	beq.n	8009d30 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009cc2:	4690      	mov	r8, r2
 8009cc4:	b392      	cbz	r2, 8009d2c <pbuf_copy_partial+0x78>
  u16_t left = 0;
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	e005      	b.n	8009cd6 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009cca:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009ccc:	682d      	ldr	r5, [r5, #0]
 8009cce:	f1b8 0f00 	cmp.w	r8, #0
 8009cd2:	d01f      	beq.n	8009d14 <pbuf_copy_partial+0x60>
 8009cd4:	b1f5      	cbz	r5, 8009d14 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009cd6:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 8009cd8:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8009cdc:	b11b      	cbz	r3, 8009ce6 <pbuf_copy_partial+0x32>
 8009cde:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 8009ce0:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 8009ce4:	d2f1      	bcs.n	8009cca <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 8009ce6:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009cea:	6869      	ldr	r1, [r5, #4]
 8009cec:	fa1f f48c 	uxth.w	r4, ip
 8009cf0:	4419      	add	r1, r3
 8009cf2:	4544      	cmp	r4, r8
 8009cf4:	bf28      	it	cs
 8009cf6:	4644      	movcs	r4, r8
 8009cf8:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009cfa:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009cfc:	f005 fda1 	bl	800f842 <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8009d00:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 8009d04:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009d06:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8009d08:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009d0c:	682d      	ldr	r5, [r5, #0]
 8009d0e:	f1b8 0f00 	cmp.w	r8, #0
 8009d12:	d1df      	bne.n	8009cd4 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 8009d14:	4630      	mov	r0, r6
 8009d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009d1a:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <pbuf_copy_partial+0x90>)
 8009d1c:	f240 420a 	movw	r2, #1034	; 0x40a
 8009d20:	4909      	ldr	r1, [pc, #36]	; (8009d48 <pbuf_copy_partial+0x94>)
 8009d22:	462e      	mov	r6, r5
 8009d24:	4809      	ldr	r0, [pc, #36]	; (8009d4c <pbuf_copy_partial+0x98>)
 8009d26:	f005 fc4b 	bl	800f5c0 <iprintf>
 8009d2a:	e7f3      	b.n	8009d14 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	e7f1      	b.n	8009d14 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <pbuf_copy_partial+0x90>)
 8009d32:	f240 420b 	movw	r2, #1035	; 0x40b
 8009d36:	4906      	ldr	r1, [pc, #24]	; (8009d50 <pbuf_copy_partial+0x9c>)
 8009d38:	463e      	mov	r6, r7
 8009d3a:	4804      	ldr	r0, [pc, #16]	; (8009d4c <pbuf_copy_partial+0x98>)
 8009d3c:	f005 fc40 	bl	800f5c0 <iprintf>
 8009d40:	e7e8      	b.n	8009d14 <pbuf_copy_partial+0x60>
 8009d42:	bf00      	nop
 8009d44:	08010b08 	.word	0x08010b08
 8009d48:	08010d5c 	.word	0x08010d5c
 8009d4c:	08010440 	.word	0x08010440
 8009d50:	08010d7c 	.word	0x08010d7c

08009d54 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	4615      	mov	r5, r2
 8009d58:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009d5a:	8929      	ldrh	r1, [r5, #8]
 8009d5c:	f7ff fe22 	bl	80099a4 <pbuf_alloc>
  if (q == NULL) {
 8009d60:	4604      	mov	r4, r0
 8009d62:	b138      	cbz	r0, 8009d74 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009d64:	8902      	ldrh	r2, [r0, #8]
 8009d66:	892b      	ldrh	r3, [r5, #8]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d305      	bcc.n	8009d78 <pbuf_clone+0x24>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7ff fc27 	bl	80095c0 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009d72:	b940      	cbnz	r0, 8009d86 <pbuf_clone+0x32>
  return q;
}
 8009d74:	4620      	mov	r0, r4
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009d78:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <pbuf_clone+0x44>)
 8009d7a:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009d7e:	4907      	ldr	r1, [pc, #28]	; (8009d9c <pbuf_clone+0x48>)
 8009d80:	4807      	ldr	r0, [pc, #28]	; (8009da0 <pbuf_clone+0x4c>)
 8009d82:	f005 fc1d 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009d86:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <pbuf_clone+0x44>)
 8009d88:	f240 5224 	movw	r2, #1316	; 0x524
 8009d8c:	4905      	ldr	r1, [pc, #20]	; (8009da4 <pbuf_clone+0x50>)
 8009d8e:	4804      	ldr	r0, [pc, #16]	; (8009da0 <pbuf_clone+0x4c>)
 8009d90:	f005 fc16 	bl	800f5c0 <iprintf>
}
 8009d94:	4620      	mov	r0, r4
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	08010b08 	.word	0x08010b08
 8009d9c:	08010d2c 	.word	0x08010d2c
 8009da0:	08010440 	.word	0x08010440
 8009da4:	08010da0 	.word	0x08010da0

08009da8 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009da8:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009daa:	4604      	mov	r4, r0
 8009dac:	b308      	cbz	r0, 8009df2 <tcp_close_shutdown_fin+0x4a>

  switch (pcb->state) {
 8009dae:	7d23      	ldrb	r3, [r4, #20]
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d005      	beq.n	8009dc0 <tcp_close_shutdown_fin+0x18>
 8009db4:	2b07      	cmp	r3, #7
 8009db6:	d00e      	beq.n	8009dd6 <tcp_close_shutdown_fin+0x2e>
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d001      	beq.n	8009dc0 <tcp_close_shutdown_fin+0x18>
 8009dbc:	2000      	movs	r0, #0
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8009dbe:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f002 ff11 	bl	800cbe8 <tcp_send_fin>
      if (err == ERR_OK) {
 8009dc6:	b950      	cbnz	r0, 8009dde <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 8009dc8:	2305      	movs	r3, #5
    tcp_output(pcb);
 8009dca:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8009dcc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009dce:	f003 f87b 	bl	800cec8 <tcp_output>
 8009dd2:	2000      	movs	r0, #0
}
 8009dd4:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f002 ff06 	bl	800cbe8 <tcp_send_fin>
      if (err == ERR_OK) {
 8009ddc:	b138      	cbz	r0, 8009dee <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	d1ed      	bne.n	8009dbe <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009de2:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 8009de4:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009de6:	f043 0308 	orr.w	r3, r3, #8
 8009dea:	8363      	strh	r3, [r4, #26]
}
 8009dec:	bd10      	pop	{r4, pc}
 8009dee:	2309      	movs	r3, #9
 8009df0:	e7eb      	b.n	8009dca <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <tcp_close_shutdown_fin+0x5c>)
 8009df4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009df8:	4903      	ldr	r1, [pc, #12]	; (8009e08 <tcp_close_shutdown_fin+0x60>)
 8009dfa:	4804      	ldr	r0, [pc, #16]	; (8009e0c <tcp_close_shutdown_fin+0x64>)
 8009dfc:	f005 fbe0 	bl	800f5c0 <iprintf>
 8009e00:	e7d5      	b.n	8009dae <tcp_close_shutdown_fin+0x6>
 8009e02:	bf00      	nop
 8009e04:	08010db4 	.word	0x08010db4
 8009e08:	08010de4 	.word	0x08010de4
 8009e0c:	08010440 	.word	0x08010440

08009e10 <tcp_init>:
{
 8009e10:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009e12:	f005 fad5 	bl	800f3c0 <rand>
 8009e16:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <tcp_init+0x10>)
 8009e18:	4a02      	ldr	r2, [pc, #8]	; (8009e24 <tcp_init+0x14>)
 8009e1a:	4303      	orrs	r3, r0
 8009e1c:	8013      	strh	r3, [r2, #0]
}
 8009e1e:	bd08      	pop	{r3, pc}
 8009e20:	ffffc000 	.word	0xffffc000
 8009e24:	24000074 	.word	0x24000074

08009e28 <tcp_free>:
{
 8009e28:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009e2a:	7d03      	ldrb	r3, [r0, #20]
{
 8009e2c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d005      	beq.n	8009e3e <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8009e32:	4621      	mov	r1, r4
 8009e34:	2001      	movs	r0, #1
}
 8009e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009e3a:	f7ff b97d 	b.w	8009138 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009e3e:	4906      	ldr	r1, [pc, #24]	; (8009e58 <tcp_free+0x30>)
 8009e40:	22d4      	movs	r2, #212	; 0xd4
 8009e42:	4b06      	ldr	r3, [pc, #24]	; (8009e5c <tcp_free+0x34>)
 8009e44:	4806      	ldr	r0, [pc, #24]	; (8009e60 <tcp_free+0x38>)
 8009e46:	f005 fbbb 	bl	800f5c0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	2001      	movs	r0, #1
}
 8009e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009e52:	f7ff b971 	b.w	8009138 <memp_free>
 8009e56:	bf00      	nop
 8009e58:	08010df0 	.word	0x08010df0
 8009e5c:	08010db4 	.word	0x08010db4
 8009e60:	08010440 	.word	0x08010440

08009e64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009e64:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009e66:	4604      	mov	r4, r0
 8009e68:	b1c8      	cbz	r0, 8009e9e <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009e6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009e6c:	f640 3c68 	movw	ip, #2920	; 0xb68
 8009e70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009e72:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009e76:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009e78:	1a58      	subs	r0, r3, r1
 8009e7a:	45e6      	cmp	lr, ip
 8009e7c:	4410      	add	r0, r2
 8009e7e:	bf94      	ite	ls
 8009e80:	eba0 050e 	subls.w	r5, r0, lr
 8009e84:	eba0 050c 	subhi.w	r5, r0, ip
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	db01      	blt.n	8009e90 <tcp_update_rcv_ann_wnd+0x2c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009e8c:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
    }
    return 0;
  }
}
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009e90:	1a53      	subs	r3, r2, r1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	dd0b      	ble.n	8009eae <tcp_update_rcv_ann_wnd+0x4a>
 8009e96:	2300      	movs	r3, #0
    return 0;
 8009e98:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009e9a:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8009e9c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009e9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ed0 <tcp_update_rcv_ann_wnd+0x6c>)
 8009ea0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009ea4:	490b      	ldr	r1, [pc, #44]	; (8009ed4 <tcp_update_rcv_ann_wnd+0x70>)
 8009ea6:	480c      	ldr	r0, [pc, #48]	; (8009ed8 <tcp_update_rcv_ann_wnd+0x74>)
 8009ea8:	f005 fb8a 	bl	800f5c0 <iprintf>
 8009eac:	e7dd      	b.n	8009e6a <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009eae:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009eb0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009eb4:	d203      	bcs.n	8009ebe <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009eb6:	b2ab      	uxth	r3, r5
    return 0;
 8009eb8:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009eba:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009ebe:	4b04      	ldr	r3, [pc, #16]	; (8009ed0 <tcp_update_rcv_ann_wnd+0x6c>)
 8009ec0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009ec4:	4905      	ldr	r1, [pc, #20]	; (8009edc <tcp_update_rcv_ann_wnd+0x78>)
 8009ec6:	4804      	ldr	r0, [pc, #16]	; (8009ed8 <tcp_update_rcv_ann_wnd+0x74>)
 8009ec8:	f005 fb7a 	bl	800f5c0 <iprintf>
 8009ecc:	e7f3      	b.n	8009eb6 <tcp_update_rcv_ann_wnd+0x52>
 8009ece:	bf00      	nop
 8009ed0:	08010db4 	.word	0x08010db4
 8009ed4:	08010e04 	.word	0x08010e04
 8009ed8:	08010440 	.word	0x08010440
 8009edc:	08010e28 	.word	0x08010e28

08009ee0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	460c      	mov	r4, r1
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 8009ee6:	f7fc f817 	bl	8005f18 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009eea:	b33d      	cbz	r5, 8009f3c <tcp_recved+0x5c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009eec:	7d2b      	ldrb	r3, [r5, #20]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d01c      	beq.n	8009f2c <tcp_recved+0x4c>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009ef2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009ef4:	1919      	adds	r1, r3, r4
 8009ef6:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	d803      	bhi.n	8009f04 <tcp_recved+0x24>
 8009efc:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8009f00:	4299      	cmp	r1, r3
 8009f02:	d901      	bls.n	8009f08 <tcp_recved+0x28>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009f04:	f241 61d0 	movw	r1, #5840	; 0x16d0
  } else  {
    pcb->rcv_wnd = rcv_wnd;
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009f08:	4628      	mov	r0, r5
 8009f0a:	8529      	strh	r1, [r5, #40]	; 0x28
 8009f0c:	f7ff ffaa 	bl	8009e64 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009f10:	f240 53b3 	movw	r3, #1459	; 0x5b3
 8009f14:	4298      	cmp	r0, r3
 8009f16:	d800      	bhi.n	8009f1a <tcp_recved+0x3a>
    tcp_output(pcb);
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009f18:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 8009f1a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8009f1c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8009f1e:	f043 0302 	orr.w	r3, r3, #2
 8009f22:	836b      	strh	r3, [r5, #26]
}
 8009f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009f28:	f002 bfce 	b.w	800cec8 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009f2c:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <tcp_recved+0x70>)
 8009f2e:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009f32:	4908      	ldr	r1, [pc, #32]	; (8009f54 <tcp_recved+0x74>)
 8009f34:	4808      	ldr	r0, [pc, #32]	; (8009f58 <tcp_recved+0x78>)
 8009f36:	f005 fb43 	bl	800f5c0 <iprintf>
 8009f3a:	e7da      	b.n	8009ef2 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f3c:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <tcp_recved+0x70>)
 8009f3e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009f42:	4906      	ldr	r1, [pc, #24]	; (8009f5c <tcp_recved+0x7c>)
 8009f44:	4804      	ldr	r0, [pc, #16]	; (8009f58 <tcp_recved+0x78>)
}
 8009f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009f4a:	f005 bb39 	b.w	800f5c0 <iprintf>
 8009f4e:	bf00      	nop
 8009f50:	08010db4 	.word	0x08010db4
 8009f54:	08010e5c 	.word	0x08010e5c
 8009f58:	08010440 	.word	0x08010440
 8009f5c:	08010e44 	.word	0x08010e44

08009f60 <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 8009f60:	b170      	cbz	r0, 8009f80 <tcp_segs_free+0x20>
{
 8009f62:	b538      	push	{r3, r4, r5, lr}
 8009f64:	4604      	mov	r4, r0
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
    if (seg->p != NULL) {
      pbuf_free(seg->p);
 8009f66:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8009f68:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8009f6a:	6868      	ldr	r0, [r5, #4]
 8009f6c:	b108      	cbz	r0, 8009f72 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 8009f6e:	f7ff fca9 	bl	80098c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009f72:	4629      	mov	r1, r5
 8009f74:	2003      	movs	r0, #3
 8009f76:	f7ff f8df 	bl	8009138 <memp_free>
  while (seg != NULL) {
 8009f7a:	2c00      	cmp	r4, #0
 8009f7c:	d1f3      	bne.n	8009f66 <tcp_segs_free+0x6>
}
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <tcp_seg_free>:
  if (seg != NULL) {
 8009f84:	b158      	cbz	r0, 8009f9e <tcp_seg_free+0x1a>
{
 8009f86:	b510      	push	{r4, lr}
 8009f88:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8009f8a:	6840      	ldr	r0, [r0, #4]
 8009f8c:	b108      	cbz	r0, 8009f92 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009f8e:	f7ff fc99 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009f92:	4621      	mov	r1, r4
 8009f94:	2003      	movs	r0, #3
  }
}
 8009f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009f9a:	f7ff b8cd 	b.w	8009138 <memp_free>
 8009f9e:	4770      	bx	lr

08009fa0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009fa0:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	b188      	cbz	r0, 8009fca <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009fa6:	2003      	movs	r0, #3
 8009fa8:	f7ff f880 	bl	80090ac <memp_malloc>
  if (cseg == NULL) {
 8009fac:	4604      	mov	r4, r0
 8009fae:	b150      	cbz	r0, 8009fc6 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009fb0:	6868      	ldr	r0, [r5, #4]
 8009fb2:	6829      	ldr	r1, [r5, #0]
 8009fb4:	68aa      	ldr	r2, [r5, #8]
 8009fb6:	68eb      	ldr	r3, [r5, #12]
 8009fb8:	6060      	str	r0, [r4, #4]
 8009fba:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 8009fbc:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009fbe:	60a2      	str	r2, [r4, #8]
 8009fc0:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8009fc2:	f7ff fe01 	bl	8009bc8 <pbuf_ref>
  return cseg;
}
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009fca:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <tcp_seg_copy+0x3c>)
 8009fcc:	f240 6282 	movw	r2, #1666	; 0x682
 8009fd0:	4903      	ldr	r1, [pc, #12]	; (8009fe0 <tcp_seg_copy+0x40>)
 8009fd2:	4804      	ldr	r0, [pc, #16]	; (8009fe4 <tcp_seg_copy+0x44>)
 8009fd4:	f005 faf4 	bl	800f5c0 <iprintf>
 8009fd8:	e7e5      	b.n	8009fa6 <tcp_seg_copy+0x6>
 8009fda:	bf00      	nop
 8009fdc:	08010db4 	.word	0x08010db4
 8009fe0:	08010e84 	.word	0x08010e84
 8009fe4:	08010440 	.word	0x08010440

08009fe8 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d041      	beq.n	800a070 <tcp_pcb_purge+0x88>
{
 8009fec:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 8009fee:	7d03      	ldrb	r3, [r0, #20]
 8009ff0:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8009ff2:	2b0a      	cmp	r3, #10
 8009ff4:	d001      	beq.n	8009ffa <tcp_pcb_purge+0x12>
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d800      	bhi.n	8009ffc <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 8009ffc:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009ffe:	b118      	cbz	r0, 800a008 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800a000:	f7ff fc60 	bl	80098c4 <pbuf_free>
      pcb->refused_data = NULL;
 800a004:	2300      	movs	r3, #0
 800a006:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800a008:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800a00a:	b164      	cbz	r4, 800a026 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800a00c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800a00e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a010:	6870      	ldr	r0, [r6, #4]
 800a012:	b108      	cbz	r0, 800a018 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800a014:	f7ff fc56 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a018:	4631      	mov	r1, r6
 800a01a:	2003      	movs	r0, #3
 800a01c:	f7ff f88c 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a020:	2c00      	cmp	r4, #0
 800a022:	d1f3      	bne.n	800a00c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800a024:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800a026:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800a02a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 800a02c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 800a02e:	b15c      	cbz	r4, 800a048 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800a030:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800a032:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a034:	6870      	ldr	r0, [r6, #4]
 800a036:	b108      	cbz	r0, 800a03c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800a038:	f7ff fc44 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a03c:	4631      	mov	r1, r6
 800a03e:	2003      	movs	r0, #3
 800a040:	f7ff f87a 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a044:	2c00      	cmp	r4, #0
 800a046:	d1f3      	bne.n	800a030 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800a048:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 800a04a:	b15c      	cbz	r4, 800a064 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800a04c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800a04e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a050:	6870      	ldr	r0, [r6, #4]
 800a052:	b108      	cbz	r0, 800a058 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800a054:	f7ff fc36 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a058:	4631      	mov	r1, r6
 800a05a:	2003      	movs	r0, #3
 800a05c:	f7ff f86c 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a060:	2c00      	cmp	r4, #0
 800a062:	d1f3      	bne.n	800a04c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800a06a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a070:	4b03      	ldr	r3, [pc, #12]	; (800a080 <tcp_pcb_purge+0x98>)
 800a072:	f640 0251 	movw	r2, #2129	; 0x851
 800a076:	4903      	ldr	r1, [pc, #12]	; (800a084 <tcp_pcb_purge+0x9c>)
 800a078:	4803      	ldr	r0, [pc, #12]	; (800a088 <tcp_pcb_purge+0xa0>)
 800a07a:	f005 baa1 	b.w	800f5c0 <iprintf>
 800a07e:	bf00      	nop
 800a080:	08010db4 	.word	0x08010db4
 800a084:	08010ea0 	.word	0x08010ea0
 800a088:	08010440 	.word	0x08010440

0800a08c <tcp_slowtmr>:
{
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800a090:	4da9      	ldr	r5, [pc, #676]	; (800a338 <tcp_slowtmr+0x2ac>)
{
 800a092:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800a094:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800a364 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800a098:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a09a:	4fa8      	ldr	r7, [pc, #672]	; (800a33c <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 800a09c:	3301      	adds	r3, #1
 800a09e:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800a0a0:	f89b 3000 	ldrb.w	r3, [fp]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 800a0aa:	4ba5      	ldr	r3, [pc, #660]	; (800a340 <tcp_slowtmr+0x2b4>)
 800a0ac:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	f000 808a 	beq.w	800a1c8 <tcp_slowtmr+0x13c>
  prev = NULL;
 800a0b4:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a0b6:	46b1      	mov	r9, r6
 800a0b8:	7d23      	ldrb	r3, [r4, #20]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80fc 	beq.w	800a2b8 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	f000 8104 	beq.w	800a2ce <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a0c6:	2b0a      	cmp	r3, #10
 800a0c8:	f000 810c 	beq.w	800a2e4 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a0cc:	f89b 2000 	ldrb.w	r2, [fp]
 800a0d0:	7fa3      	ldrb	r3, [r4, #30]
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	f000 8113 	beq.w	800a2fe <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0d8:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800a0da:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800a0e2:	f000 8112 	beq.w	800a30a <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a0e6:	2a0b      	cmp	r2, #11
 800a0e8:	f240 80cb 	bls.w	800a282 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 800a0ec:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800a0f0:	2b06      	cmp	r3, #6
 800a0f2:	f000 80b7 	beq.w	800a264 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a0f6:	f894 a009 	ldrb.w	sl, [r4, #9]
 800a0fa:	f01a 0a08 	ands.w	sl, sl, #8
 800a0fe:	d01d      	beq.n	800a13c <tcp_slowtmr+0xb0>
 800a100:	2b04      	cmp	r3, #4
 800a102:	d007      	beq.n	800a114 <tcp_slowtmr+0x88>
 800a104:	f1a3 0307 	sub.w	r3, r3, #7
 800a108:	fab3 f383 	clz	r3, r3
 800a10c:	095b      	lsrs	r3, r3, #5
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 80b4 	beq.w	800a27c <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a114:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a118:	4b8a      	ldr	r3, [pc, #552]	; (800a344 <tcp_slowtmr+0x2b8>)
 800a11a:	488b      	ldr	r0, [pc, #556]	; (800a348 <tcp_slowtmr+0x2bc>)
 800a11c:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a11e:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a120:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a124:	6a20      	ldr	r0, [r4, #32]
 800a126:	1a12      	subs	r2, r2, r0
 800a128:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800a12c:	f240 8160 	bls.w	800a3f0 <tcp_slowtmr+0x364>
        ++pcb_remove;
 800a130:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800a134:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800a138:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800a13c:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800a13e:	b156      	cbz	r6, 800a156 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	6a22      	ldr	r2, [r4, #32]
 800a144:	1a9a      	subs	r2, r3, r2
 800a146:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a14a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800a14e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a152:	f080 80e1 	bcs.w	800a318 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 800a156:	7d23      	ldrb	r3, [r4, #20]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d057      	beq.n	800a20c <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d15a      	bne.n	800a216 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	6a22      	ldr	r2, [r4, #32]
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	2bf0      	cmp	r3, #240	; 0xf0
 800a168:	d955      	bls.n	800a216 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 800a16a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800a16c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800a170:	f7ff ff3a 	bl	8009fe8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a174:	4b72      	ldr	r3, [pc, #456]	; (800a340 <tcp_slowtmr+0x2b4>)
 800a176:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800a178:	f1b9 0f00 	cmp.w	r9, #0
 800a17c:	f000 817e 	beq.w	800a47c <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a180:	42a3      	cmp	r3, r4
 800a182:	f000 81da 	beq.w	800a53a <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 800a186:	68e3      	ldr	r3, [r4, #12]
 800a188:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800a18c:	f1ba 0f00 	cmp.w	sl, #0
 800a190:	f040 8147 	bne.w	800a422 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a194:	7d23      	ldrb	r3, [r4, #20]
 800a196:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800a198:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a19c:	f000 8153 	beq.w	800a446 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	f7fe ffc8 	bl	8009138 <memp_free>
      tcp_active_pcbs_changed = 0;
 800a1a8:	4c68      	ldr	r4, [pc, #416]	; (800a34c <tcp_slowtmr+0x2c0>)
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a1ae:	b13e      	cbz	r6, 800a1c0 <tcp_slowtmr+0x134>
 800a1b0:	f06f 010c 	mvn.w	r1, #12
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 800a1b8:	7823      	ldrb	r3, [r4, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f47f af75 	bne.w	800a0aa <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 800a1c0:	4644      	mov	r4, r8
  while (pcb != NULL) {
 800a1c2:	2c00      	cmp	r4, #0
 800a1c4:	f47f af78 	bne.w	800a0b8 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 800a1c8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800a368 <tcp_slowtmr+0x2dc>
 800a1cc:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 800a1d0:	b1cc      	cbz	r4, 800a206 <tcp_slowtmr+0x17a>
  prev = NULL;
 800a1d2:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a1d4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800a33c <tcp_slowtmr+0x2b0>
 800a1d8:	f8df a190 	ldr.w	sl, [pc, #400]	; 800a36c <tcp_slowtmr+0x2e0>
 800a1dc:	4f5c      	ldr	r7, [pc, #368]	; (800a350 <tcp_slowtmr+0x2c4>)
 800a1de:	7d23      	ldrb	r3, [r4, #20]
 800a1e0:	2b0a      	cmp	r3, #10
 800a1e2:	d006      	beq.n	800a1f2 <tcp_slowtmr+0x166>
 800a1e4:	4643      	mov	r3, r8
 800a1e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a1ea:	4651      	mov	r1, sl
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f005 f9e7 	bl	800f5c0 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	6a22      	ldr	r2, [r4, #32]
 800a1f6:	1a9b      	subs	r3, r3, r2
 800a1f8:	2bf0      	cmp	r3, #240	; 0xf0
 800a1fa:	f200 80d4 	bhi.w	800a3a6 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 800a1fe:	4626      	mov	r6, r4
 800a200:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800a202:	2c00      	cmp	r4, #0
 800a204:	d1eb      	bne.n	800a1de <tcp_slowtmr+0x152>
}
 800a206:	b007      	add	sp, #28
 800a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	6a22      	ldr	r2, [r4, #32]
 800a210:	1a9b      	subs	r3, r3, r2
 800a212:	2b28      	cmp	r3, #40	; 0x28
 800a214:	d8a9      	bhi.n	800a16a <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800a216:	f1b8 0f00 	cmp.w	r8, #0
 800a21a:	d1a6      	bne.n	800a16a <tcp_slowtmr+0xde>
      ++prev->polltmr;
 800a21c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a21e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800a220:	3301      	adds	r3, #1
      pcb = pcb->next;
 800a222:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800a224:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800a226:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800a228:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a22a:	d815      	bhi.n	800a258 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 800a22c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800a34c <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 800a230:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800a234:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800a238:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 80ce 	beq.w	800a3de <tcp_slowtmr+0x352>
 800a242:	4621      	mov	r1, r4
 800a244:	6920      	ldr	r0, [r4, #16]
 800a246:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a248:	f899 3000 	ldrb.w	r3, [r9]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f47f af2c 	bne.w	800a0aa <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800a252:	2800      	cmp	r0, #0
 800a254:	f000 80c3 	beq.w	800a3de <tcp_slowtmr+0x352>
 800a258:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800a25a:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800a25c:	2c00      	cmp	r4, #0
 800a25e:	f47f af2b 	bne.w	800a0b8 <tcp_slowtmr+0x2c>
 800a262:	e7b1      	b.n	800a1c8 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 800a264:	8b63      	ldrh	r3, [r4, #26]
 800a266:	06db      	lsls	r3, r3, #27
 800a268:	d508      	bpl.n	800a27c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	6a22      	ldr	r2, [r4, #32]
 800a26e:	1a9b      	subs	r3, r3, r2
 800a270:	2b28      	cmp	r3, #40	; 0x28
 800a272:	d903      	bls.n	800a27c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 800a274:	f108 0801 	add.w	r8, r8, #1
 800a278:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 800a27c:	f04f 0a00 	mov.w	sl, #0
 800a280:	e75c      	b.n	800a13c <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 800a282:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 800a286:	f1b8 0f00 	cmp.w	r8, #0
 800a28a:	d071      	beq.n	800a370 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a28c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a28e:	b133      	cbz	r3, 800a29e <tcp_slowtmr+0x212>
 800a290:	463b      	mov	r3, r7
 800a292:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a296:	492f      	ldr	r1, [pc, #188]	; (800a354 <tcp_slowtmr+0x2c8>)
 800a298:	482d      	ldr	r0, [pc, #180]	; (800a350 <tcp_slowtmr+0x2c4>)
 800a29a:	f005 f991 	bl	800f5c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a29e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 816c 	beq.w	800a57e <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a2a6:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800a2aa:	2b0b      	cmp	r3, #11
 800a2ac:	f240 80d2 	bls.w	800a454 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 800a2b0:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800a2b2:	f04f 0801 	mov.w	r8, #1
 800a2b6:	e71b      	b.n	800a0f0 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a2b8:	463b      	mov	r3, r7
 800a2ba:	f240 42be 	movw	r2, #1214	; 0x4be
 800a2be:	4926      	ldr	r1, [pc, #152]	; (800a358 <tcp_slowtmr+0x2cc>)
 800a2c0:	4823      	ldr	r0, [pc, #140]	; (800a350 <tcp_slowtmr+0x2c4>)
 800a2c2:	f005 f97d 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a2c6:	7d23      	ldrb	r3, [r4, #20]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	f47f aefc 	bne.w	800a0c6 <tcp_slowtmr+0x3a>
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a2d4:	4921      	ldr	r1, [pc, #132]	; (800a35c <tcp_slowtmr+0x2d0>)
 800a2d6:	481e      	ldr	r0, [pc, #120]	; (800a350 <tcp_slowtmr+0x2c4>)
 800a2d8:	f005 f972 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a2dc:	7d23      	ldrb	r3, [r4, #20]
 800a2de:	2b0a      	cmp	r3, #10
 800a2e0:	f47f aef4 	bne.w	800a0cc <tcp_slowtmr+0x40>
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a2ea:	491d      	ldr	r1, [pc, #116]	; (800a360 <tcp_slowtmr+0x2d4>)
 800a2ec:	4818      	ldr	r0, [pc, #96]	; (800a350 <tcp_slowtmr+0x2c4>)
 800a2ee:	f005 f967 	bl	800f5c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a2f2:	f89b 2000 	ldrb.w	r2, [fp]
 800a2f6:	7fa3      	ldrb	r3, [r4, #30]
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	f47f aeed 	bne.w	800a0d8 <tcp_slowtmr+0x4c>
      continue;
 800a2fe:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800a300:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800a302:	2c00      	cmp	r4, #0
 800a304:	f47f aed8 	bne.w	800a0b8 <tcp_slowtmr+0x2c>
 800a308:	e75e      	b.n	800a1c8 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a30a:	2a05      	cmp	r2, #5
 800a30c:	d9b9      	bls.n	800a282 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 800a30e:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 800a312:	f04f 0801 	mov.w	r8, #1
 800a316:	e711      	b.n	800a13c <tcp_slowtmr+0xb0>
 800a318:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800a31a:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 800a31c:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 800a31e:	6860      	ldr	r0, [r4, #4]
 800a320:	b108      	cbz	r0, 800a326 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 800a322:	f7ff facf 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a326:	4621      	mov	r1, r4
 800a328:	2003      	movs	r0, #3
 800a32a:	f7fe ff05 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a32e:	2e00      	cmp	r6, #0
 800a330:	d1f3      	bne.n	800a31a <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 800a332:	9c05      	ldr	r4, [sp, #20]
 800a334:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a336:	e70e      	b.n	800a156 <tcp_slowtmr+0xca>
 800a338:	240107f8 	.word	0x240107f8
 800a33c:	08010db4 	.word	0x08010db4
 800a340:	240107e8 	.word	0x240107e8
 800a344:	000a4cb8 	.word	0x000a4cb8
 800a348:	10624dd3 	.word	0x10624dd3
 800a34c:	240107ec 	.word	0x240107ec
 800a350:	08010440 	.word	0x08010440
 800a354:	08010f44 	.word	0x08010f44
 800a358:	08010ebc 	.word	0x08010ebc
 800a35c:	08010ee8 	.word	0x08010ee8
 800a360:	08010f14 	.word	0x08010f14
 800a364:	240107fd 	.word	0x240107fd
 800a368:	24010800 	.word	0x24010800
 800a36c:	08011008 	.word	0x08011008
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a370:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a374:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 800a378:	b291      	uxth	r1, r2
 800a37a:	4281      	cmp	r1, r0
 800a37c:	d802      	bhi.n	800a384 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 800a37e:	3101      	adds	r1, #1
 800a380:	b20a      	sxth	r2, r1
 800a382:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800a384:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800a388:	4291      	cmp	r1, r2
 800a38a:	f73f aeb1 	bgt.w	800a0f0 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a38e:	4620      	mov	r0, r4
 800a390:	f002 fc5c 	bl	800cc4c <tcp_rexmit_rto_prepare>
 800a394:	2800      	cmp	r0, #0
 800a396:	f000 809e 	beq.w	800a4d6 <tcp_slowtmr+0x44a>
 800a39a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 8096 	beq.w	800a4ce <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 800a3a2:	7d23      	ldrb	r3, [r4, #20]
 800a3a4:	e6a4      	b.n	800a0f0 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff fe1e 	bl	8009fe8 <tcp_pcb_purge>
      if (prev != NULL) {
 800a3ac:	2e00      	cmp	r6, #0
 800a3ae:	f000 80cc 	beq.w	800a54a <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a3b2:	f8d9 3000 	ldr.w	r3, [r9]
 800a3b6:	42a3      	cmp	r3, r4
 800a3b8:	f000 80e9 	beq.w	800a58e <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 800a3bc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800a3c0:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a3c4:	7d23      	ldrb	r3, [r4, #20]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	f000 80d2 	beq.w	800a570 <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 800a3cc:	4621      	mov	r1, r4
      pcb = pcb->next;
 800a3ce:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	f7fe feb1 	bl	8009138 <memp_free>
  while (pcb != NULL) {
 800a3d6:	2c00      	cmp	r4, #0
 800a3d8:	f47f af01 	bne.w	800a1de <tcp_slowtmr+0x152>
 800a3dc:	e713      	b.n	800a206 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 800a3de:	4620      	mov	r0, r4
 800a3e0:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800a3e2:	4634      	mov	r4, r6
          tcp_output(prev);
 800a3e4:	f002 fd70 	bl	800cec8 <tcp_output>
  while (pcb != NULL) {
 800a3e8:	2c00      	cmp	r4, #0
 800a3ea:	f47f ae65 	bne.w	800a0b8 <tcp_slowtmr+0x2c>
 800a3ee:	e6eb      	b.n	800a1c8 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a3f0:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800a3f4:	486e      	ldr	r0, [pc, #440]	; (800a5b0 <tcp_slowtmr+0x524>)
 800a3f6:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a3fa:	4b6e      	ldr	r3, [pc, #440]	; (800a5b4 <tcp_slowtmr+0x528>)
 800a3fc:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a400:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800a404:	f67f af3a 	bls.w	800a27c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800a408:	4620      	mov	r0, r4
 800a40a:	f002 ff8b 	bl	800d324 <tcp_keepalive>
        if (err == ERR_OK) {
 800a40e:	2800      	cmp	r0, #0
 800a410:	f47f af34 	bne.w	800a27c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 800a414:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800a418:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800a41a:	3301      	adds	r3, #1
 800a41c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800a420:	e68c      	b.n	800a13c <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a422:	8b23      	ldrh	r3, [r4, #24]
 800a424:	4620      	mov	r0, r4
 800a426:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a428:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	8ae3      	ldrh	r3, [r4, #22]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	1d23      	adds	r3, r4, #4
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	4623      	mov	r3, r4
 800a436:	f002 fccd 	bl	800cdd4 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a43a:	7d23      	ldrb	r3, [r4, #20]
 800a43c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800a43e:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a442:	f47f aead 	bne.w	800a1a0 <tcp_slowtmr+0x114>
 800a446:	463b      	mov	r3, r7
 800a448:	22d4      	movs	r2, #212	; 0xd4
 800a44a:	495b      	ldr	r1, [pc, #364]	; (800a5b8 <tcp_slowtmr+0x52c>)
 800a44c:	485b      	ldr	r0, [pc, #364]	; (800a5bc <tcp_slowtmr+0x530>)
 800a44e:	f005 f8b7 	bl	800f5c0 <iprintf>
 800a452:	e6a5      	b.n	800a1a0 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a454:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800a458:	4a59      	ldr	r2, [pc, #356]	; (800a5c0 <tcp_slowtmr+0x534>)
 800a45a:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800a45c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a460:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800a464:	4293      	cmp	r3, r2
 800a466:	d216      	bcs.n	800a496 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 800a468:	3301      	adds	r3, #1
 800a46a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800a46c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800a46e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800a472:	d210      	bcs.n	800a496 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 800a474:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	e639      	b.n	800a0f0 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a47c:	42a3      	cmp	r3, r4
 800a47e:	d006      	beq.n	800a48e <tcp_slowtmr+0x402>
 800a480:	463b      	mov	r3, r7
 800a482:	f240 5271 	movw	r2, #1393	; 0x571
 800a486:	494f      	ldr	r1, [pc, #316]	; (800a5c4 <tcp_slowtmr+0x538>)
 800a488:	484c      	ldr	r0, [pc, #304]	; (800a5bc <tcp_slowtmr+0x530>)
 800a48a:	f005 f899 	bl	800f5c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a48e:	68e3      	ldr	r3, [r4, #12]
 800a490:	4a4d      	ldr	r2, [pc, #308]	; (800a5c8 <tcp_slowtmr+0x53c>)
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	e67a      	b.n	800a18c <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 800a496:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 800a49a:	b936      	cbnz	r6, 800a4aa <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a49c:	4620      	mov	r0, r4
 800a49e:	f002 ff67 	bl	800d370 <tcp_zero_window_probe>
 800a4a2:	b140      	cbz	r0, 800a4b6 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800a4a4:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 800a4a6:	7d23      	ldrb	r3, [r4, #20]
 800a4a8:	e622      	b.n	800a0f0 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f002 fa19 	bl	800c8e4 <tcp_split_unsent_seg>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d073      	beq.n	800a59e <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a4b6:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 800a4ba:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a4be:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800a4c0:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 800a4c4:	bf9c      	itt	ls
 800a4c6:	3301      	addls	r3, #1
 800a4c8:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 800a4cc:	e769      	b.n	800a3a2 <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a4ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f43f af66 	beq.w	800a3a2 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 800a4d6:	7d23      	ldrb	r3, [r4, #20]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d014      	beq.n	800a506 <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a4dc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a4e0:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800a4e4:	2a0c      	cmp	r2, #12
 800a4e6:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800a4ea:	bf28      	it	cs
 800a4ec:	220c      	movcs	r2, #12
 800a4ee:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a4f2:	4936      	ldr	r1, [pc, #216]	; (800a5cc <tcp_slowtmr+0x540>)
 800a4f4:	5c8a      	ldrb	r2, [r1, r2]
 800a4f6:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a4f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	bfa8      	it	ge
 800a500:	4613      	movge	r3, r2
 800a502:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a506:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 800a508:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a50a:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 800a50e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a516:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800a51a:	428b      	cmp	r3, r1
 800a51c:	bf28      	it	cs
 800a51e:	460b      	movcs	r3, r1
 800a520:	085b      	lsrs	r3, r3, #1
 800a522:	4293      	cmp	r3, r2
 800a524:	bf38      	it	cc
 800a526:	4613      	movcc	r3, r2
 800a528:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800a530:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a534:	f002 feaa 	bl	800d28c <tcp_rexmit_rto_commit>
 800a538:	e733      	b.n	800a3a2 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a53a:	463b      	mov	r3, r7
 800a53c:	f240 526d 	movw	r2, #1389	; 0x56d
 800a540:	4923      	ldr	r1, [pc, #140]	; (800a5d0 <tcp_slowtmr+0x544>)
 800a542:	481e      	ldr	r0, [pc, #120]	; (800a5bc <tcp_slowtmr+0x530>)
 800a544:	f005 f83c 	bl	800f5c0 <iprintf>
 800a548:	e61d      	b.n	800a186 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a54a:	f8d9 3000 	ldr.w	r3, [r9]
 800a54e:	42a3      	cmp	r3, r4
 800a550:	d006      	beq.n	800a560 <tcp_slowtmr+0x4d4>
 800a552:	4643      	mov	r3, r8
 800a554:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a558:	491e      	ldr	r1, [pc, #120]	; (800a5d4 <tcp_slowtmr+0x548>)
 800a55a:	4638      	mov	r0, r7
 800a55c:	f005 f830 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a560:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800a562:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a566:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800a568:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a56c:	f47f af2e 	bne.w	800a3cc <tcp_slowtmr+0x340>
 800a570:	4643      	mov	r3, r8
 800a572:	22d4      	movs	r2, #212	; 0xd4
 800a574:	4910      	ldr	r1, [pc, #64]	; (800a5b8 <tcp_slowtmr+0x52c>)
 800a576:	4638      	mov	r0, r7
 800a578:	f005 f822 	bl	800f5c0 <iprintf>
 800a57c:	e726      	b.n	800a3cc <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a57e:	463b      	mov	r3, r7
 800a580:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a584:	4914      	ldr	r1, [pc, #80]	; (800a5d8 <tcp_slowtmr+0x54c>)
 800a586:	480d      	ldr	r0, [pc, #52]	; (800a5bc <tcp_slowtmr+0x530>)
 800a588:	f005 f81a 	bl	800f5c0 <iprintf>
 800a58c:	e68b      	b.n	800a2a6 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a58e:	4643      	mov	r3, r8
 800a590:	f240 52af 	movw	r2, #1455	; 0x5af
 800a594:	4911      	ldr	r1, [pc, #68]	; (800a5dc <tcp_slowtmr+0x550>)
 800a596:	4638      	mov	r0, r7
 800a598:	f005 f812 	bl	800f5c0 <iprintf>
 800a59c:	e70e      	b.n	800a3bc <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f002 fc92 	bl	800cec8 <tcp_output>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d186      	bne.n	800a4b6 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800a5a8:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800a5aa:	7d23      	ldrb	r3, [r4, #20]
 800a5ac:	e5a0      	b.n	800a0f0 <tcp_slowtmr+0x64>
 800a5ae:	bf00      	nop
 800a5b0:	000124f8 	.word	0x000124f8
 800a5b4:	10624dd3 	.word	0x10624dd3
 800a5b8:	08010df0 	.word	0x08010df0
 800a5bc:	08010440 	.word	0x08010440
 800a5c0:	08011294 	.word	0x08011294
 800a5c4:	08010fdc 	.word	0x08010fdc
 800a5c8:	240107e8 	.word	0x240107e8
 800a5cc:	08011274 	.word	0x08011274
 800a5d0:	08010fb0 	.word	0x08010fb0
 800a5d4:	08011060 	.word	0x08011060
 800a5d8:	08010f78 	.word	0x08010f78
 800a5dc:	08011038 	.word	0x08011038

0800a5e0 <tcp_pcb_remove>:
{
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	2900      	cmp	r1, #0
 800a5e8:	d04a      	beq.n	800a680 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	d051      	beq.n	800a692 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d032      	beq.n	800a65a <tcp_pcb_remove+0x7a>
 800a5f4:	b12b      	cbz	r3, 800a602 <tcp_pcb_remove+0x22>
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	42a2      	cmp	r2, r4
 800a5fa:	d03e      	beq.n	800a67a <tcp_pcb_remove+0x9a>
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f9      	bne.n	800a5f6 <tcp_pcb_remove+0x16>
 800a602:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800a604:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800a606:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800a608:	f7ff fcee 	bl	8009fe8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800a60c:	7d23      	ldrb	r3, [r4, #20]
 800a60e:	2b0a      	cmp	r3, #10
 800a610:	d02d      	beq.n	800a66e <tcp_pcb_remove+0x8e>
 800a612:	2b01      	cmp	r3, #1
 800a614:	d01d      	beq.n	800a652 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800a616:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800a618:	07da      	lsls	r2, r3, #31
 800a61a:	d421      	bmi.n	800a660 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a61c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a61e:	b133      	cbz	r3, 800a62e <tcp_pcb_remove+0x4e>
 800a620:	4b20      	ldr	r3, [pc, #128]	; (800a6a4 <tcp_pcb_remove+0xc4>)
 800a622:	f640 0293 	movw	r2, #2195	; 0x893
 800a626:	4920      	ldr	r1, [pc, #128]	; (800a6a8 <tcp_pcb_remove+0xc8>)
 800a628:	4820      	ldr	r0, [pc, #128]	; (800a6ac <tcp_pcb_remove+0xcc>)
 800a62a:	f004 ffc9 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a62e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a630:	b133      	cbz	r3, 800a640 <tcp_pcb_remove+0x60>
 800a632:	4b1c      	ldr	r3, [pc, #112]	; (800a6a4 <tcp_pcb_remove+0xc4>)
 800a634:	f640 0294 	movw	r2, #2196	; 0x894
 800a638:	491d      	ldr	r1, [pc, #116]	; (800a6b0 <tcp_pcb_remove+0xd0>)
 800a63a:	481c      	ldr	r0, [pc, #112]	; (800a6ac <tcp_pcb_remove+0xcc>)
 800a63c:	f004 ffc0 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a640:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a642:	b133      	cbz	r3, 800a652 <tcp_pcb_remove+0x72>
 800a644:	4b17      	ldr	r3, [pc, #92]	; (800a6a4 <tcp_pcb_remove+0xc4>)
 800a646:	f640 0296 	movw	r2, #2198	; 0x896
 800a64a:	491a      	ldr	r1, [pc, #104]	; (800a6b4 <tcp_pcb_remove+0xd4>)
 800a64c:	4817      	ldr	r0, [pc, #92]	; (800a6ac <tcp_pcb_remove+0xcc>)
 800a64e:	f004 ffb7 	bl	800f5c0 <iprintf>
  pcb->state = CLOSED;
 800a652:	2300      	movs	r3, #0
 800a654:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800a656:	82e3      	strh	r3, [r4, #22]
}
 800a658:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800a65a:	68e3      	ldr	r3, [r4, #12]
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	e7d0      	b.n	800a602 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800a660:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800a664:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800a666:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a668:	f002 fc2e 	bl	800cec8 <tcp_output>
  if (pcb->state != LISTEN) {
 800a66c:	7d23      	ldrb	r3, [r4, #20]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d0ef      	beq.n	800a652 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a672:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1d3      	bne.n	800a620 <tcp_pcb_remove+0x40>
 800a678:	e7d9      	b.n	800a62e <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800a67a:	68e2      	ldr	r2, [r4, #12]
 800a67c:	60da      	str	r2, [r3, #12]
 800a67e:	e7c0      	b.n	800a602 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a680:	4b08      	ldr	r3, [pc, #32]	; (800a6a4 <tcp_pcb_remove+0xc4>)
 800a682:	f640 0283 	movw	r2, #2179	; 0x883
 800a686:	490c      	ldr	r1, [pc, #48]	; (800a6b8 <tcp_pcb_remove+0xd8>)
 800a688:	4808      	ldr	r0, [pc, #32]	; (800a6ac <tcp_pcb_remove+0xcc>)
 800a68a:	f004 ff99 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a68e:	2d00      	cmp	r5, #0
 800a690:	d1ad      	bne.n	800a5ee <tcp_pcb_remove+0xe>
 800a692:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <tcp_pcb_remove+0xc4>)
 800a694:	f640 0284 	movw	r2, #2180	; 0x884
 800a698:	4908      	ldr	r1, [pc, #32]	; (800a6bc <tcp_pcb_remove+0xdc>)
 800a69a:	4804      	ldr	r0, [pc, #16]	; (800a6ac <tcp_pcb_remove+0xcc>)
 800a69c:	f004 ff90 	bl	800f5c0 <iprintf>
 800a6a0:	e7a5      	b.n	800a5ee <tcp_pcb_remove+0xe>
 800a6a2:	bf00      	nop
 800a6a4:	08010db4 	.word	0x08010db4
 800a6a8:	080110c4 	.word	0x080110c4
 800a6ac:	08010440 	.word	0x08010440
 800a6b0:	080110dc 	.word	0x080110dc
 800a6b4:	080110f8 	.word	0x080110f8
 800a6b8:	08011088 	.word	0x08011088
 800a6bc:	080110a4 	.word	0x080110a4

0800a6c0 <tcp_abandon>:
{
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800a6ca:	f7fb fc25 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	f000 80a8 	beq.w	800a824 <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a6d4:	7d2b      	ldrb	r3, [r5, #20]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	f000 808b 	beq.w	800a7f2 <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 800a6dc:	2b0a      	cmp	r3, #10
 800a6de:	f000 8093 	beq.w	800a808 <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 800a6e2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800a6e4:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 800a6e8:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800a6ec:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 800a6f0:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800a6f2:	b96b      	cbnz	r3, 800a710 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 800a6f4:	8aef      	ldrh	r7, [r5, #22]
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	d052      	beq.n	800a7a0 <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a6fa:	4a53      	ldr	r2, [pc, #332]	; (800a848 <tcp_abandon+0x188>)
 800a6fc:	6813      	ldr	r3, [r2, #0]
 800a6fe:	42ab      	cmp	r3, r5
 800a700:	d074      	beq.n	800a7ec <tcp_abandon+0x12c>
 800a702:	2b00      	cmp	r3, #0
 800a704:	d050      	beq.n	800a7a8 <tcp_abandon+0xe8>
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	42aa      	cmp	r2, r5
 800a70a:	d04b      	beq.n	800a7a4 <tcp_abandon+0xe4>
 800a70c:	4613      	mov	r3, r2
 800a70e:	e7f8      	b.n	800a702 <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a710:	4629      	mov	r1, r5
 800a712:	484e      	ldr	r0, [pc, #312]	; (800a84c <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 800a714:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a716:	f7ff ff63 	bl	800a5e0 <tcp_pcb_remove>
 800a71a:	4b4d      	ldr	r3, [pc, #308]	; (800a850 <tcp_abandon+0x190>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800a720:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800a722:	b164      	cbz	r4, 800a73e <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 800a724:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800a726:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a728:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a72c:	b108      	cbz	r0, 800a732 <tcp_abandon+0x72>
      pbuf_free(seg->p);
 800a72e:	f7ff f8c9 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a732:	4651      	mov	r1, sl
 800a734:	2003      	movs	r0, #3
 800a736:	f7fe fcff 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a73a:	2c00      	cmp	r4, #0
 800a73c:	d1f2      	bne.n	800a724 <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 800a73e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800a740:	b164      	cbz	r4, 800a75c <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 800a742:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800a744:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a746:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a74a:	b108      	cbz	r0, 800a750 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 800a74c:	f7ff f8ba 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a750:	4651      	mov	r1, sl
 800a752:	2003      	movs	r0, #3
 800a754:	f7fe fcf0 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a758:	2c00      	cmp	r4, #0
 800a75a:	d1f2      	bne.n	800a742 <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 800a75c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800a75e:	b164      	cbz	r4, 800a77a <tcp_abandon+0xba>
      pbuf_free(seg->p);
 800a760:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800a762:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a764:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a768:	b108      	cbz	r0, 800a76e <tcp_abandon+0xae>
      pbuf_free(seg->p);
 800a76a:	f7ff f8ab 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a76e:	4651      	mov	r1, sl
 800a770:	2003      	movs	r0, #3
 800a772:	f7fe fce1 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800a776:	2c00      	cmp	r4, #0
 800a778:	d1f2      	bne.n	800a760 <tcp_abandon+0xa0>
    if (send_rst) {
 800a77a:	b9ce      	cbnz	r6, 800a7b0 <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a77c:	7d2b      	ldrb	r3, [r5, #20]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d024      	beq.n	800a7cc <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 800a782:	4629      	mov	r1, r5
 800a784:	2001      	movs	r0, #1
 800a786:	f7fe fcd7 	bl	8009138 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a78a:	f1b8 0f00 	cmp.w	r8, #0
 800a78e:	d02a      	beq.n	800a7e6 <tcp_abandon+0x126>
 800a790:	f06f 010c 	mvn.w	r1, #12
 800a794:	4648      	mov	r0, r9
 800a796:	4643      	mov	r3, r8
}
 800a798:	b007      	add	sp, #28
 800a79a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a79e:	4718      	bx	r3
    int send_rst = 0;
 800a7a0:	461e      	mov	r6, r3
 800a7a2:	e7bd      	b.n	800a720 <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a7a4:	68ea      	ldr	r2, [r5, #12]
 800a7a6:	60da      	str	r2, [r3, #12]
 800a7a8:	2700      	movs	r7, #0
    int send_rst = 0;
 800a7aa:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a7ac:	60ef      	str	r7, [r5, #12]
 800a7ae:	e7b7      	b.n	800a720 <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a7b0:	9701      	str	r7, [sp, #4]
 800a7b2:	465a      	mov	r2, fp
 800a7b4:	8b2b      	ldrh	r3, [r5, #24]
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	9905      	ldr	r1, [sp, #20]
 800a7ba:	9302      	str	r3, [sp, #8]
 800a7bc:	1d2b      	adds	r3, r5, #4
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	462b      	mov	r3, r5
 800a7c2:	f002 fb07 	bl	800cdd4 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a7c6:	7d2b      	ldrb	r3, [r5, #20]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d1da      	bne.n	800a782 <tcp_abandon+0xc2>
 800a7cc:	4921      	ldr	r1, [pc, #132]	; (800a854 <tcp_abandon+0x194>)
 800a7ce:	22d4      	movs	r2, #212	; 0xd4
 800a7d0:	4b21      	ldr	r3, [pc, #132]	; (800a858 <tcp_abandon+0x198>)
 800a7d2:	4822      	ldr	r0, [pc, #136]	; (800a85c <tcp_abandon+0x19c>)
 800a7d4:	f004 fef4 	bl	800f5c0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a7d8:	4629      	mov	r1, r5
 800a7da:	2001      	movs	r0, #1
 800a7dc:	f7fe fcac 	bl	8009138 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a7e0:	f1b8 0f00 	cmp.w	r8, #0
 800a7e4:	d1d4      	bne.n	800a790 <tcp_abandon+0xd0>
}
 800a7e6:	b007      	add	sp, #28
 800a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a7ec:	68eb      	ldr	r3, [r5, #12]
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e7da      	b.n	800a7a8 <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a7f2:	4b19      	ldr	r3, [pc, #100]	; (800a858 <tcp_abandon+0x198>)
 800a7f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a7f8:	4919      	ldr	r1, [pc, #100]	; (800a860 <tcp_abandon+0x1a0>)
 800a7fa:	4818      	ldr	r0, [pc, #96]	; (800a85c <tcp_abandon+0x19c>)
 800a7fc:	f004 fee0 	bl	800f5c0 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800a800:	7d2b      	ldrb	r3, [r5, #20]
 800a802:	2b0a      	cmp	r3, #10
 800a804:	f47f af6d 	bne.w	800a6e2 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a808:	4629      	mov	r1, r5
 800a80a:	4816      	ldr	r0, [pc, #88]	; (800a864 <tcp_abandon+0x1a4>)
 800a80c:	f7ff fee8 	bl	800a5e0 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a810:	7d2b      	ldrb	r3, [r5, #20]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d010      	beq.n	800a838 <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 800a816:	4629      	mov	r1, r5
 800a818:	2001      	movs	r0, #1
}
 800a81a:	b007      	add	sp, #28
 800a81c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a820:	f7fe bc8a 	b.w	8009138 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a824:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <tcp_abandon+0x198>)
 800a826:	f240 223d 	movw	r2, #573	; 0x23d
 800a82a:	490f      	ldr	r1, [pc, #60]	; (800a868 <tcp_abandon+0x1a8>)
 800a82c:	480b      	ldr	r0, [pc, #44]	; (800a85c <tcp_abandon+0x19c>)
}
 800a82e:	b007      	add	sp, #28
 800a830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a834:	f004 bec4 	b.w	800f5c0 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a838:	4b07      	ldr	r3, [pc, #28]	; (800a858 <tcp_abandon+0x198>)
 800a83a:	22d4      	movs	r2, #212	; 0xd4
 800a83c:	4905      	ldr	r1, [pc, #20]	; (800a854 <tcp_abandon+0x194>)
 800a83e:	4807      	ldr	r0, [pc, #28]	; (800a85c <tcp_abandon+0x19c>)
 800a840:	f004 febe 	bl	800f5c0 <iprintf>
 800a844:	e7e7      	b.n	800a816 <tcp_abandon+0x156>
 800a846:	bf00      	nop
 800a848:	240107f0 	.word	0x240107f0
 800a84c:	240107e8 	.word	0x240107e8
 800a850:	240107ec 	.word	0x240107ec
 800a854:	08010df0 	.word	0x08010df0
 800a858:	08010db4 	.word	0x08010db4
 800a85c:	08010440 	.word	0x08010440
 800a860:	0801112c 	.word	0x0801112c
 800a864:	24010800 	.word	0x24010800
 800a868:	08011110 	.word	0x08011110

0800a86c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800a86c:	2101      	movs	r1, #1
 800a86e:	f7ff bf27 	b.w	800a6c0 <tcp_abandon>
 800a872:	bf00      	nop

0800a874 <tcp_netif_ip_addr_changed_pcblist>:
{
 800a874:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a876:	4605      	mov	r5, r0
{
 800a878:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a87a:	b178      	cbz	r0, 800a89c <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 800a87c:	b134      	cbz	r4, 800a88c <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a87e:	6822      	ldr	r2, [r4, #0]
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d003      	beq.n	800a88e <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 800a886:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800a888:	2c00      	cmp	r4, #0
 800a88a:	d1f8      	bne.n	800a87e <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 800a88e:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 800a890:	4620      	mov	r0, r4
 800a892:	2101      	movs	r1, #1
      pcb = next;
 800a894:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 800a896:	f7ff ff13 	bl	800a6c0 <tcp_abandon>
      pcb = next;
 800a89a:	e7ef      	b.n	800a87c <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a89c:	4b03      	ldr	r3, [pc, #12]	; (800a8ac <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800a89e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a8a2:	4903      	ldr	r1, [pc, #12]	; (800a8b0 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800a8a4:	4803      	ldr	r0, [pc, #12]	; (800a8b4 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800a8a6:	f004 fe8b 	bl	800f5c0 <iprintf>
 800a8aa:	e7e7      	b.n	800a87c <tcp_netif_ip_addr_changed_pcblist+0x8>
 800a8ac:	08010db4 	.word	0x08010db4
 800a8b0:	08011160 	.word	0x08011160
 800a8b4:	08010440 	.word	0x08010440

0800a8b8 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <tcp_kill_state+0x40>)
 800a8ba:	6819      	ldr	r1, [r3, #0]
 800a8bc:	b1d1      	cbz	r1, 800a8f4 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <tcp_kill_state+0x44>)
  inactivity = 0;
 800a8c0:	2200      	movs	r2, #0
{
 800a8c2:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8c4:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800a8c6:	4614      	mov	r4, r2
 800a8c8:	e001      	b.n	800a8ce <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ca:	68c9      	ldr	r1, [r1, #12]
 800a8cc:	b159      	cbz	r1, 800a8e6 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 800a8ce:	7d0b      	ldrb	r3, [r1, #20]
 800a8d0:	4283      	cmp	r3, r0
 800a8d2:	d1fa      	bne.n	800a8ca <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8d4:	6a0b      	ldr	r3, [r1, #32]
 800a8d6:	1aeb      	subs	r3, r5, r3
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d3f6      	bcc.n	800a8ca <tcp_kill_state+0x12>
 800a8dc:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8de:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8e0:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d1f3      	bne.n	800a8ce <tcp_kill_state+0x16>
  if (inactive != NULL) {
 800a8e6:	b11c      	cbz	r4, 800a8f0 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 800a8e8:	4620      	mov	r0, r4
}
 800a8ea:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800a8ec:	f7ff bee8 	b.w	800a6c0 <tcp_abandon>
}
 800a8f0:	bc30      	pop	{r4, r5}
 800a8f2:	4770      	bx	lr
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	240107e8 	.word	0x240107e8
 800a8fc:	240107f8 	.word	0x240107f8

0800a900 <tcp_alloc>:
{
 800a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a902:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a904:	f7fb fb08 	bl	8005f18 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a908:	2001      	movs	r0, #1
 800a90a:	f7fe fbcf 	bl	80090ac <memp_malloc>
  if (pcb == NULL) {
 800a90e:	4603      	mov	r3, r0
 800a910:	b320      	cbz	r0, 800a95c <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a912:	229c      	movs	r2, #156	; 0x9c
 800a914:	2100      	movs	r1, #0
 800a916:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 800a918:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a91c:	f004 feb5 	bl	800f68a <memset>
    pcb->last_timer = tcp_timer_ctr;
 800a920:	4943      	ldr	r1, [pc, #268]	; (800aa30 <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a922:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a924:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 800a926:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800a928:	4842      	ldr	r0, [pc, #264]	; (800aa34 <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a92a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 800a92e:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a930:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 800a932:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a934:	4a40      	ldr	r2, [pc, #256]	; (800aa38 <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 800a936:	4941      	ldr	r1, [pc, #260]	; (800aa3c <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 800a938:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 800a93c:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 800a93e:	4c40      	ldr	r4, [pc, #256]	; (800aa40 <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 800a940:	4840      	ldr	r0, [pc, #256]	; (800aa44 <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 800a942:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a946:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 800a94a:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a94c:	493e      	ldr	r1, [pc, #248]	; (800aa48 <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 800a94e:	6498      	str	r0, [r3, #72]	; 0x48
}
 800a950:	4618      	mov	r0, r3
    pcb->prio = prio;
 800a952:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 800a954:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a956:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a958:	72da      	strb	r2, [r3, #11]
}
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a95c:	4e3b      	ldr	r6, [pc, #236]	; (800aa4c <tcp_alloc+0x14c>)
 800a95e:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 800a960:	b15c      	cbz	r4, 800a97a <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 800a962:	4620      	mov	r0, r4
 800a964:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800a966:	8b43      	ldrh	r3, [r0, #26]
 800a968:	0719      	lsls	r1, r3, #28
 800a96a:	d5f9      	bpl.n	800a960 <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a96c:	f023 0308 	bic.w	r3, r3, #8
 800a970:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800a972:	f7ff fa19 	bl	8009da8 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800a976:	2c00      	cmp	r4, #0
 800a978:	d1f3      	bne.n	800a962 <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a97a:	4b35      	ldr	r3, [pc, #212]	; (800aa50 <tcp_alloc+0x150>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	b193      	cbz	r3, 800a9a6 <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a980:	4a2c      	ldr	r2, [pc, #176]	; (800aa34 <tcp_alloc+0x134>)
 800a982:	4618      	mov	r0, r3
 800a984:	6a19      	ldr	r1, [r3, #32]
 800a986:	6814      	ldr	r4, [r2, #0]
 800a988:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	b143      	cbz	r3, 800a9a0 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a98e:	6a1a      	ldr	r2, [r3, #32]
 800a990:	1aa2      	subs	r2, r4, r2
 800a992:	428a      	cmp	r2, r1
 800a994:	d3f9      	bcc.n	800a98a <tcp_alloc+0x8a>
 800a996:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a998:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a99a:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1f6      	bne.n	800a98e <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	f7ff fe8d 	bl	800a6c0 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	f7fe fb80 	bl	80090ac <memp_malloc>
    if (pcb == NULL) {
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d1af      	bne.n	800a912 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800a9b2:	2009      	movs	r0, #9
 800a9b4:	f7ff ff80 	bl	800a8b8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	f7fe fb77 	bl	80090ac <memp_malloc>
      if (pcb == NULL) {
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	d1a6      	bne.n	800a912 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800a9c4:	2008      	movs	r0, #8
 800a9c6:	f7ff ff77 	bl	800a8b8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	f7fe fb6e 	bl	80090ac <memp_malloc>
        if (pcb == NULL) {
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d19d      	bne.n	800a912 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a9d6:	062a      	lsls	r2, r5, #24
 800a9d8:	d427      	bmi.n	800aa2a <tcp_alloc+0x12a>
  if (mprio == 0) {
 800a9da:	b1ed      	cbz	r5, 800aa18 <tcp_alloc+0x118>
 800a9dc:	462a      	mov	r2, r5
  mprio--;
 800a9de:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9e0:	6832      	ldr	r2, [r6, #0]
  mprio--;
 800a9e2:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9e4:	b1c2      	cbz	r2, 800aa18 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9e6:	4813      	ldr	r0, [pc, #76]	; (800aa34 <tcp_alloc+0x134>)
  inactivity = 0;
 800a9e8:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9ea:	6807      	ldr	r7, [r0, #0]
 800a9ec:	e005      	b.n	800a9fa <tcp_alloc+0xfa>
 800a9ee:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800a9f0:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 800a9f2:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 800a9f4:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9f6:	68d2      	ldr	r2, [r2, #12]
 800a9f8:	b14a      	cbz	r2, 800aa0e <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 800a9fa:	7d50      	ldrb	r0, [r2, #21]
 800a9fc:	4288      	cmp	r0, r1
 800a9fe:	d3f6      	bcc.n	800a9ee <tcp_alloc+0xee>
 800aa00:	d1f9      	bne.n	800a9f6 <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aa02:	6a14      	ldr	r4, [r2, #32]
 800aa04:	eba7 0e04 	sub.w	lr, r7, r4
 800aa08:	45b6      	cmp	lr, r6
 800aa0a:	d3f4      	bcc.n	800a9f6 <tcp_alloc+0xf6>
 800aa0c:	e7f0      	b.n	800a9f0 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 800aa0e:	b11b      	cbz	r3, 800aa18 <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 800aa10:	2101      	movs	r1, #1
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fe54 	bl	800a6c0 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa18:	2001      	movs	r0, #1
 800aa1a:	f7fe fb47 	bl	80090ac <memp_malloc>
  if (pcb != NULL) {
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f47f af76 	bne.w	800a912 <tcp_alloc+0x12>
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800aa2a:	227f      	movs	r2, #127	; 0x7f
 800aa2c:	e7d7      	b.n	800a9de <tcp_alloc+0xde>
 800aa2e:	bf00      	nop
 800aa30:	240107fd 	.word	0x240107fd
 800aa34:	240107f8 	.word	0x240107f8
 800aa38:	006ddd00 	.word	0x006ddd00
 800aa3c:	0800abf5 	.word	0x0800abf5
 800aa40:	0218ffff 	.word	0x0218ffff
 800aa44:	16d00001 	.word	0x16d00001
 800aa48:	16d016d0 	.word	0x16d016d0
 800aa4c:	240107e8 	.word	0x240107e8
 800aa50:	24010800 	.word	0x24010800

0800aa54 <tcp_close_shutdown>:
{
 800aa54:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa56:	4604      	mov	r4, r0
{
 800aa58:	b085      	sub	sp, #20
 800aa5a:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d06b      	beq.n	800ab38 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aa60:	7d23      	ldrb	r3, [r4, #20]
 800aa62:	b11d      	cbz	r5, 800aa6c <tcp_close_shutdown+0x18>
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	d00c      	beq.n	800aa82 <tcp_close_shutdown+0x2e>
 800aa68:	2b07      	cmp	r3, #7
 800aa6a:	d00a      	beq.n	800aa82 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d06b      	beq.n	800ab48 <tcp_close_shutdown+0xf4>
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d030      	beq.n	800aad6 <tcp_close_shutdown+0x82>
 800aa74:	b333      	cbz	r3, 800aac4 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 800aa76:	4620      	mov	r0, r4
}
 800aa78:	b005      	add	sp, #20
 800aa7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800aa7e:	f7ff b993 	b.w	8009da8 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aa82:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	d037      	beq.n	800aaf8 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aa88:	8b63      	ldrh	r3, [r4, #26]
 800aa8a:	06db      	lsls	r3, r3, #27
 800aa8c:	f140 8085 	bpl.w	800ab9a <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa90:	8b21      	ldrh	r1, [r4, #24]
 800aa92:	1d20      	adds	r0, r4, #4
 800aa94:	8ae2      	ldrh	r2, [r4, #22]
 800aa96:	4623      	mov	r3, r4
 800aa98:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800aa9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa9e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800aaa0:	9000      	str	r0, [sp, #0]
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f002 f996 	bl	800cdd4 <tcp_rst>
      tcp_pcb_purge(pcb);
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7ff fa9d 	bl	8009fe8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aaae:	4a45      	ldr	r2, [pc, #276]	; (800abc4 <tcp_close_shutdown+0x170>)
 800aab0:	6813      	ldr	r3, [r2, #0]
 800aab2:	42a3      	cmp	r3, r4
 800aab4:	d031      	beq.n	800ab1a <tcp_close_shutdown+0xc6>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d031      	beq.n	800ab1e <tcp_close_shutdown+0xca>
 800aaba:	68da      	ldr	r2, [r3, #12]
 800aabc:	42a2      	cmp	r2, r4
 800aabe:	d069      	beq.n	800ab94 <tcp_close_shutdown+0x140>
 800aac0:	4613      	mov	r3, r2
 800aac2:	e7f8      	b.n	800aab6 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 800aac4:	8ae3      	ldrh	r3, [r4, #22]
 800aac6:	b9eb      	cbnz	r3, 800ab04 <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 800aac8:	4621      	mov	r1, r4
 800aaca:	2001      	movs	r0, #1
 800aacc:	f7fe fb34 	bl	8009138 <memp_free>
}
 800aad0:	2000      	movs	r0, #0
 800aad2:	b005      	add	sp, #20
 800aad4:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aad6:	4621      	mov	r1, r4
 800aad8:	483a      	ldr	r0, [pc, #232]	; (800abc4 <tcp_close_shutdown+0x170>)
 800aada:	f7ff fd81 	bl	800a5e0 <tcp_pcb_remove>
 800aade:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aae0:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aae2:	4a39      	ldr	r2, [pc, #228]	; (800abc8 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aae4:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aae6:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aae8:	d1ee      	bne.n	800aac8 <tcp_close_shutdown+0x74>
 800aaea:	4b38      	ldr	r3, [pc, #224]	; (800abcc <tcp_close_shutdown+0x178>)
 800aaec:	22d4      	movs	r2, #212	; 0xd4
 800aaee:	4938      	ldr	r1, [pc, #224]	; (800abd0 <tcp_close_shutdown+0x17c>)
 800aaf0:	4838      	ldr	r0, [pc, #224]	; (800abd4 <tcp_close_shutdown+0x180>)
 800aaf2:	f004 fd65 	bl	800f5c0 <iprintf>
 800aaf6:	e7e7      	b.n	800aac8 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aaf8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800aafa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800aafe:	4291      	cmp	r1, r2
 800ab00:	d0b4      	beq.n	800aa6c <tcp_close_shutdown+0x18>
 800ab02:	e7c1      	b.n	800aa88 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab04:	4a34      	ldr	r2, [pc, #208]	; (800abd8 <tcp_close_shutdown+0x184>)
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	d051      	beq.n	800abb0 <tcp_close_shutdown+0x15c>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d03e      	beq.n	800ab8e <tcp_close_shutdown+0x13a>
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	42a2      	cmp	r2, r4
 800ab14:	d039      	beq.n	800ab8a <tcp_close_shutdown+0x136>
 800ab16:	4613      	mov	r3, r2
 800ab18:	e7f8      	b.n	800ab0c <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 800ab1a:	68e3      	ldr	r3, [r4, #12]
 800ab1c:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800ab1e:	4b2f      	ldr	r3, [pc, #188]	; (800abdc <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 800ab20:	2000      	movs	r0, #0
 800ab22:	4a29      	ldr	r2, [pc, #164]	; (800abc8 <tcp_close_shutdown+0x174>)
 800ab24:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800ab26:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800ab28:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800ab2a:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800ab2c:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800ab2e:	d03c      	beq.n	800abaa <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ab30:	7d23      	ldrb	r3, [r4, #20]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d1c8      	bne.n	800aac8 <tcp_close_shutdown+0x74>
 800ab36:	e7d8      	b.n	800aaea <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ab38:	4b24      	ldr	r3, [pc, #144]	; (800abcc <tcp_close_shutdown+0x178>)
 800ab3a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ab3e:	4928      	ldr	r1, [pc, #160]	; (800abe0 <tcp_close_shutdown+0x18c>)
 800ab40:	4824      	ldr	r0, [pc, #144]	; (800abd4 <tcp_close_shutdown+0x180>)
 800ab42:	f004 fd3d 	bl	800f5c0 <iprintf>
 800ab46:	e78b      	b.n	800aa60 <tcp_close_shutdown+0xc>
 800ab48:	4926      	ldr	r1, [pc, #152]	; (800abe4 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 800ab4a:	2000      	movs	r0, #0
  switch (pcb->state) {
 800ab4c:	4b22      	ldr	r3, [pc, #136]	; (800abd8 <tcp_close_shutdown+0x184>)
 800ab4e:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ab52:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ab54:	b133      	cbz	r3, 800ab64 <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 800ab56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ab58:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800ab5a:	bf08      	it	eq
 800ab5c:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1f8      	bne.n	800ab56 <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab64:	42a9      	cmp	r1, r5
 800ab66:	d002      	beq.n	800ab6e <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ab68:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800ab6c:	e7f1      	b.n	800ab52 <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ab6e:	4621      	mov	r1, r4
 800ab70:	481d      	ldr	r0, [pc, #116]	; (800abe8 <tcp_close_shutdown+0x194>)
 800ab72:	f7ff fd35 	bl	800a5e0 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ab76:	7d23      	ldrb	r3, [r4, #20]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d01c      	beq.n	800abb6 <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f7fe fada 	bl	8009138 <memp_free>
}
 800ab84:	2000      	movs	r0, #0
 800ab86:	b005      	add	sp, #20
 800ab88:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab8a:	68e2      	ldr	r2, [r4, #12]
 800ab8c:	60da      	str	r2, [r3, #12]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60e3      	str	r3, [r4, #12]
 800ab92:	e799      	b.n	800aac8 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 800ab94:	68e2      	ldr	r2, [r4, #12]
 800ab96:	60da      	str	r2, [r3, #12]
 800ab98:	e7c1      	b.n	800ab1e <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab9a:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <tcp_close_shutdown+0x178>)
 800ab9c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aba0:	4912      	ldr	r1, [pc, #72]	; (800abec <tcp_close_shutdown+0x198>)
 800aba2:	480c      	ldr	r0, [pc, #48]	; (800abd4 <tcp_close_shutdown+0x180>)
 800aba4:	f004 fd0c 	bl	800f5c0 <iprintf>
 800aba8:	e772      	b.n	800aa90 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 800abaa:	f001 fd69 	bl	800c680 <tcp_trigger_input_pcb_close>
 800abae:	e78f      	b.n	800aad0 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800abb0:	68e3      	ldr	r3, [r4, #12]
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	e7eb      	b.n	800ab8e <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800abb6:	4b05      	ldr	r3, [pc, #20]	; (800abcc <tcp_close_shutdown+0x178>)
 800abb8:	22df      	movs	r2, #223	; 0xdf
 800abba:	490d      	ldr	r1, [pc, #52]	; (800abf0 <tcp_close_shutdown+0x19c>)
 800abbc:	4805      	ldr	r0, [pc, #20]	; (800abd4 <tcp_close_shutdown+0x180>)
 800abbe:	f004 fcff 	bl	800f5c0 <iprintf>
 800abc2:	e7db      	b.n	800ab7c <tcp_close_shutdown+0x128>
 800abc4:	240107e8 	.word	0x240107e8
 800abc8:	240107ec 	.word	0x240107ec
 800abcc:	08010db4 	.word	0x08010db4
 800abd0:	08010df0 	.word	0x08010df0
 800abd4:	08010440 	.word	0x08010440
 800abd8:	240107f0 	.word	0x240107f0
 800abdc:	2401082c 	.word	0x2401082c
 800abe0:	08011194 	.word	0x08011194
 800abe4:	08011288 	.word	0x08011288
 800abe8:	240107f4 	.word	0x240107f4
 800abec:	080111b4 	.word	0x080111b4
 800abf0:	080111d0 	.word	0x080111d0

0800abf4 <tcp_recv_null>:
{
 800abf4:	b510      	push	{r4, lr}
 800abf6:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800abf8:	b301      	cbz	r1, 800ac3c <tcp_recv_null+0x48>
  if (p != NULL) {
 800abfa:	4614      	mov	r4, r2
 800abfc:	4608      	mov	r0, r1
 800abfe:	b142      	cbz	r2, 800ac12 <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800ac00:	8911      	ldrh	r1, [r2, #8]
 800ac02:	f7ff f96d 	bl	8009ee0 <tcp_recved>
    pbuf_free(p);
 800ac06:	4620      	mov	r0, r4
 800ac08:	f7fe fe5c 	bl	80098c4 <pbuf_free>
  return ERR_OK;
 800ac0c:	2000      	movs	r0, #0
}
 800ac0e:	b002      	add	sp, #8
 800ac10:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800ac12:	b113      	cbz	r3, 800ac1a <tcp_recv_null+0x26>
  return ERR_OK;
 800ac14:	4610      	mov	r0, r2
}
 800ac16:	b002      	add	sp, #8
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ac1c:	f7fb f97c 	bl	8005f18 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800ac20:	9801      	ldr	r0, [sp, #4]
 800ac22:	7d03      	ldrb	r3, [r0, #20]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d003      	beq.n	800ac30 <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ac28:	8b43      	ldrh	r3, [r0, #26]
 800ac2a:	f043 0310 	orr.w	r3, r3, #16
 800ac2e:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800ac30:	2101      	movs	r1, #1
}
 800ac32:	b002      	add	sp, #8
 800ac34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800ac38:	f7ff bf0c 	b.w	800aa54 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <tcp_recv_null+0x5c>)
 800ac3e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ac42:	4904      	ldr	r1, [pc, #16]	; (800ac54 <tcp_recv_null+0x60>)
 800ac44:	4804      	ldr	r0, [pc, #16]	; (800ac58 <tcp_recv_null+0x64>)
 800ac46:	f004 fcbb 	bl	800f5c0 <iprintf>
 800ac4a:	f06f 000f 	mvn.w	r0, #15
 800ac4e:	e7de      	b.n	800ac0e <tcp_recv_null+0x1a>
 800ac50:	08010db4 	.word	0x08010db4
 800ac54:	080111ec 	.word	0x080111ec
 800ac58:	08010440 	.word	0x08010440

0800ac5c <tcp_process_refused_data>:
{
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac5e:	b380      	cbz	r0, 800acc2 <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800ac60:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800ac62:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ac64:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800ac68:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ac6a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800ac6c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ac6e:	b156      	cbz	r6, 800ac86 <tcp_process_refused_data+0x2a>
 800ac70:	4601      	mov	r1, r0
 800ac72:	462a      	mov	r2, r5
 800ac74:	6900      	ldr	r0, [r0, #16]
 800ac76:	47b0      	blx	r6
    if (err == ERR_OK) {
 800ac78:	b158      	cbz	r0, 800ac92 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800ac7a:	300d      	adds	r0, #13
 800ac7c:	d01e      	beq.n	800acbc <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800ac7e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800ac82:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800ac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800ac86:	8929      	ldrh	r1, [r5, #8]
 800ac88:	f7ff f92a 	bl	8009ee0 <tcp_recved>
    pbuf_free(p);
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f7fe fe19 	bl	80098c4 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ac92:	06bb      	lsls	r3, r7, #26
 800ac94:	d510      	bpl.n	800acb8 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ac98:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d001      	beq.n	800aca4 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800aca0:	3301      	adds	r3, #1
 800aca2:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800aca4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800aca8:	b135      	cbz	r5, 800acb8 <tcp_process_refused_data+0x5c>
 800acaa:	2300      	movs	r3, #0
 800acac:	4621      	mov	r1, r4
 800acae:	6920      	ldr	r0, [r4, #16]
 800acb0:	461a      	mov	r2, r3
 800acb2:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800acb4:	300d      	adds	r0, #13
 800acb6:	d001      	beq.n	800acbc <tcp_process_refused_data+0x60>
  return ERR_OK;
 800acb8:	2000      	movs	r0, #0
}
 800acba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800acbc:	f06f 000c 	mvn.w	r0, #12
}
 800acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800acc2:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <tcp_process_refused_data+0x7c>)
 800acc4:	f240 6209 	movw	r2, #1545	; 0x609
 800acc8:	4904      	ldr	r1, [pc, #16]	; (800acdc <tcp_process_refused_data+0x80>)
 800acca:	4805      	ldr	r0, [pc, #20]	; (800ace0 <tcp_process_refused_data+0x84>)
 800accc:	f004 fc78 	bl	800f5c0 <iprintf>
 800acd0:	f06f 000f 	mvn.w	r0, #15
}
 800acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd6:	bf00      	nop
 800acd8:	08010db4 	.word	0x08010db4
 800acdc:	08011208 	.word	0x08011208
 800ace0:	08010440 	.word	0x08010440

0800ace4 <tcp_fasttmr>:
{
 800ace4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800ace8:	4d1c      	ldr	r5, [pc, #112]	; (800ad5c <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800acea:	2700      	movs	r7, #0
 800acec:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800ad64 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800acf0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800acf2:	4e1b      	ldr	r6, [pc, #108]	; (800ad60 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800acf4:	3301      	adds	r3, #1
 800acf6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800acf8:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800acfc:	b1bc      	cbz	r4, 800ad2e <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 800acfe:	782a      	ldrb	r2, [r5, #0]
 800ad00:	7fa3      	ldrb	r3, [r4, #30]
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d015      	beq.n	800ad32 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 800ad06:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800ad08:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800ad0a:	07d9      	lsls	r1, r3, #31
 800ad0c:	d41a      	bmi.n	800ad44 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 800ad0e:	071a      	lsls	r2, r3, #28
 800ad10:	d411      	bmi.n	800ad36 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 800ad12:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800ad14:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800ad18:	b133      	cbz	r3, 800ad28 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 800ad1a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800ad1c:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800ad1e:	f7ff ff9d 	bl	800ac5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ad22:	7833      	ldrb	r3, [r6, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e7      	bne.n	800acf8 <tcp_fasttmr+0x14>
      pcb = next;
 800ad28:	464c      	mov	r4, r9
  while (pcb != NULL) {
 800ad2a:	2c00      	cmp	r4, #0
 800ad2c:	d1e7      	bne.n	800acfe <tcp_fasttmr+0x1a>
}
 800ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800ad32:	68e4      	ldr	r4, [r4, #12]
 800ad34:	e7e2      	b.n	800acfc <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ad36:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800ad3a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ad3c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ad3e:	f7ff f833 	bl	8009da8 <tcp_close_shutdown_fin>
 800ad42:	e7e6      	b.n	800ad12 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800ad44:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ad48:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ad4a:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800ad4c:	f002 f8bc 	bl	800cec8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad50:	8b63      	ldrh	r3, [r4, #26]
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	8363      	strh	r3, [r4, #26]
 800ad5a:	e7d8      	b.n	800ad0e <tcp_fasttmr+0x2a>
 800ad5c:	240107fd 	.word	0x240107fd
 800ad60:	240107ec 	.word	0x240107ec
 800ad64:	240107e8 	.word	0x240107e8

0800ad68 <tcp_tmr>:
{
 800ad68:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ad6a:	f7ff ffbb 	bl	800ace4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ad6e:	4a06      	ldr	r2, [pc, #24]	; (800ad88 <tcp_tmr+0x20>)
 800ad70:	7813      	ldrb	r3, [r2, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	7013      	strb	r3, [r2, #0]
 800ad78:	07db      	lsls	r3, r3, #31
 800ad7a:	d400      	bmi.n	800ad7e <tcp_tmr+0x16>
}
 800ad7c:	bd08      	pop	{r3, pc}
 800ad7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800ad82:	f7ff b983 	b.w	800a08c <tcp_slowtmr>
 800ad86:	bf00      	nop
 800ad88:	240107fc 	.word	0x240107fc

0800ad8c <tcp_next_iss>:
{
 800ad8c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ad8e:	b130      	cbz	r0, 800ad9e <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <tcp_next_iss+0x24>)
 800ad92:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <tcp_next_iss+0x28>)
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	6812      	ldr	r2, [r2, #0]
 800ad98:	4410      	add	r0, r2
 800ad9a:	6018      	str	r0, [r3, #0]
}
 800ad9c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ad9e:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <tcp_next_iss+0x2c>)
 800ada0:	f640 02af 	movw	r2, #2223	; 0x8af
 800ada4:	4905      	ldr	r1, [pc, #20]	; (800adbc <tcp_next_iss+0x30>)
 800ada6:	4806      	ldr	r0, [pc, #24]	; (800adc0 <tcp_next_iss+0x34>)
 800ada8:	f004 fc0a 	bl	800f5c0 <iprintf>
 800adac:	e7f0      	b.n	800ad90 <tcp_next_iss+0x4>
 800adae:	bf00      	nop
 800adb0:	24000070 	.word	0x24000070
 800adb4:	240107f8 	.word	0x240107f8
 800adb8:	08010db4 	.word	0x08010db4
 800adbc:	08011230 	.word	0x08011230
 800adc0:	08010440 	.word	0x08010440

0800adc4 <tcp_eff_send_mss_netif>:
{
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4605      	mov	r5, r0
 800adc8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800adca:	b172      	cbz	r2, 800adea <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 800adcc:	b144      	cbz	r4, 800ade0 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 800adce:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 800add0:	b133      	cbz	r3, 800ade0 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800add2:	2b28      	cmp	r3, #40	; 0x28
 800add4:	d906      	bls.n	800ade4 <tcp_eff_send_mss_netif+0x20>
 800add6:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800add8:	b29b      	uxth	r3, r3
 800adda:	429d      	cmp	r5, r3
 800addc:	bf28      	it	cs
 800adde:	461d      	movcs	r5, r3
}
 800ade0:	4628      	mov	r0, r5
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	2500      	movs	r5, #0
 800ade6:	4628      	mov	r0, r5
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800adea:	4b04      	ldr	r3, [pc, #16]	; (800adfc <tcp_eff_send_mss_netif+0x38>)
 800adec:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800adf0:	4903      	ldr	r1, [pc, #12]	; (800ae00 <tcp_eff_send_mss_netif+0x3c>)
 800adf2:	4804      	ldr	r0, [pc, #16]	; (800ae04 <tcp_eff_send_mss_netif+0x40>)
 800adf4:	f004 fbe4 	bl	800f5c0 <iprintf>
 800adf8:	e7e8      	b.n	800adcc <tcp_eff_send_mss_netif+0x8>
 800adfa:	bf00      	nop
 800adfc:	08010db4 	.word	0x08010db4
 800ae00:	0801124c 	.word	0x0801124c
 800ae04:	08010440 	.word	0x08010440

0800ae08 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800ae08:	b308      	cbz	r0, 800ae4e <tcp_netif_ip_addr_changed+0x46>
{
 800ae0a:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800ae0c:	6803      	ldr	r3, [r0, #0]
 800ae0e:	4604      	mov	r4, r0
 800ae10:	b903      	cbnz	r3, 800ae14 <tcp_netif_ip_addr_changed+0xc>
}
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ae14:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <tcp_netif_ip_addr_changed+0x48>)
 800ae16:	460d      	mov	r5, r1
 800ae18:	6819      	ldr	r1, [r3, #0]
 800ae1a:	f7ff fd2b 	bl	800a874 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ae1e:	4b0d      	ldr	r3, [pc, #52]	; (800ae54 <tcp_netif_ip_addr_changed+0x4c>)
 800ae20:	4620      	mov	r0, r4
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	f7ff fd26 	bl	800a874 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	d0f2      	beq.n	800ae12 <tcp_netif_ip_addr_changed+0xa>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0ef      	beq.n	800ae12 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae32:	4b09      	ldr	r3, [pc, #36]	; (800ae58 <tcp_netif_ip_addr_changed+0x50>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0eb      	beq.n	800ae12 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ae3a:	6819      	ldr	r1, [r3, #0]
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	4291      	cmp	r1, r2
 800ae40:	d101      	bne.n	800ae46 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ae42:	682a      	ldr	r2, [r5, #0]
 800ae44:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f6      	bne.n	800ae3a <tcp_netif_ip_addr_changed+0x32>
}
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	4770      	bx	lr
 800ae50:	240107e8 	.word	0x240107e8
 800ae54:	240107f0 	.word	0x240107f0
 800ae58:	240107f4 	.word	0x240107f4

0800ae5c <tcp_free_ooseq>:
{
 800ae5c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800ae5e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800ae60:	b16c      	cbz	r4, 800ae7e <tcp_free_ooseq+0x22>
 800ae62:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800ae64:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800ae66:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ae68:	6868      	ldr	r0, [r5, #4]
 800ae6a:	b108      	cbz	r0, 800ae70 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800ae6c:	f7fe fd2a 	bl	80098c4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ae70:	4629      	mov	r1, r5
 800ae72:	2003      	movs	r0, #3
 800ae74:	f7fe f960 	bl	8009138 <memp_free>
  while (seg != NULL) {
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d1f3      	bne.n	800ae64 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800ae7c:	6774      	str	r4, [r6, #116]	; 0x74
}
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}

0800ae80 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ae82:	4605      	mov	r5, r0
{
 800ae84:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d03e      	beq.n	800af08 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ae8a:	68eb      	ldr	r3, [r5, #12]
 800ae8c:	8998      	ldrh	r0, [r3, #12]
 800ae8e:	f7fd fd77 	bl	8008980 <lwip_htons>
 800ae92:	07c2      	lsls	r2, r0, #31
 800ae94:	d432      	bmi.n	800aefc <tcp_oos_insert_segment+0x7c>
 800ae96:	4e20      	ldr	r6, [pc, #128]	; (800af18 <tcp_oos_insert_segment+0x98>)
 800ae98:	e005      	b.n	800aea6 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800ae9a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f7ff f871 	bl	8009f84 <tcp_seg_free>
    while (next &&
 800aea2:	463c      	mov	r4, r7
 800aea4:	b1ef      	cbz	r7, 800aee2 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800aea6:	68e1      	ldr	r1, [r4, #12]
 800aea8:	8923      	ldrh	r3, [r4, #8]
 800aeaa:	6837      	ldr	r7, [r6, #0]
 800aeac:	892a      	ldrh	r2, [r5, #8]
 800aeae:	6848      	ldr	r0, [r1, #4]
 800aeb0:	443a      	add	r2, r7
 800aeb2:	4403      	add	r3, r0
 800aeb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	db15      	blt.n	800aee6 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aeba:	8988      	ldrh	r0, [r1, #12]
 800aebc:	f7fd fd60 	bl	8008980 <lwip_htons>
 800aec0:	07c3      	lsls	r3, r0, #31
 800aec2:	d5ea      	bpl.n	800ae9a <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aec4:	68eb      	ldr	r3, [r5, #12]
 800aec6:	2001      	movs	r0, #1
 800aec8:	899f      	ldrh	r7, [r3, #12]
 800aeca:	f7fd fd59 	bl	8008980 <lwip_htons>
 800aece:	68eb      	ldr	r3, [r5, #12]
 800aed0:	4338      	orrs	r0, r7
      next = next->next;
 800aed2:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aed4:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800aed6:	4620      	mov	r0, r4
 800aed8:	f7ff f854 	bl	8009f84 <tcp_seg_free>
    while (next &&
 800aedc:	463c      	mov	r4, r7
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d1e1      	bne.n	800aea6 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 800aee2:	602c      	str	r4, [r5, #0]
}
 800aee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800aee6:	1a12      	subs	r2, r2, r0
    if (next &&
 800aee8:	2a00      	cmp	r2, #0
 800aeea:	ddfa      	ble.n	800aee2 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aeec:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800aeee:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aef0:	b289      	uxth	r1, r1
 800aef2:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800aef4:	f7fe fe04 	bl	8009b00 <pbuf_realloc>
  cseg->next = next;
 800aef8:	602c      	str	r4, [r5, #0]
}
 800aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800aefc:	4620      	mov	r0, r4
    next = NULL;
 800aefe:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800af00:	f7ff f82e 	bl	8009f60 <tcp_segs_free>
  cseg->next = next;
 800af04:	602c      	str	r4, [r5, #0]
}
 800af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af08:	4b04      	ldr	r3, [pc, #16]	; (800af1c <tcp_oos_insert_segment+0x9c>)
 800af0a:	f240 421f 	movw	r2, #1055	; 0x41f
 800af0e:	4904      	ldr	r1, [pc, #16]	; (800af20 <tcp_oos_insert_segment+0xa0>)
 800af10:	4804      	ldr	r0, [pc, #16]	; (800af24 <tcp_oos_insert_segment+0xa4>)
 800af12:	f004 fb55 	bl	800f5c0 <iprintf>
 800af16:	e7b8      	b.n	800ae8a <tcp_oos_insert_segment+0xa>
 800af18:	24010828 	.word	0x24010828
 800af1c:	0801129c 	.word	0x0801129c
 800af20:	080112d0 	.word	0x080112d0
 800af24:	08010440 	.word	0x08010440

0800af28 <tcp_input_delayed_close>:
{
 800af28:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800af2a:	4604      	mov	r4, r0
 800af2c:	b1c8      	cbz	r0, 800af62 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800af2e:	4b11      	ldr	r3, [pc, #68]	; (800af74 <tcp_input_delayed_close+0x4c>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f013 0310 	ands.w	r3, r3, #16
 800af36:	d101      	bne.n	800af3c <tcp_input_delayed_close+0x14>
  return 0;
 800af38:	4618      	mov	r0, r3
}
 800af3a:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800af3c:	8b63      	ldrh	r3, [r4, #26]
 800af3e:	06db      	lsls	r3, r3, #27
 800af40:	d406      	bmi.n	800af50 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800af42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af46:	b11b      	cbz	r3, 800af50 <tcp_input_delayed_close+0x28>
 800af48:	f06f 010e 	mvn.w	r1, #14
 800af4c:	6920      	ldr	r0, [r4, #16]
 800af4e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800af50:	4621      	mov	r1, r4
 800af52:	4809      	ldr	r0, [pc, #36]	; (800af78 <tcp_input_delayed_close+0x50>)
 800af54:	f7ff fb44 	bl	800a5e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800af58:	4620      	mov	r0, r4
 800af5a:	f7fe ff65 	bl	8009e28 <tcp_free>
 800af5e:	2001      	movs	r0, #1
}
 800af60:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800af62:	4b06      	ldr	r3, [pc, #24]	; (800af7c <tcp_input_delayed_close+0x54>)
 800af64:	f240 225a 	movw	r2, #602	; 0x25a
 800af68:	4905      	ldr	r1, [pc, #20]	; (800af80 <tcp_input_delayed_close+0x58>)
 800af6a:	4806      	ldr	r0, [pc, #24]	; (800af84 <tcp_input_delayed_close+0x5c>)
 800af6c:	f004 fb28 	bl	800f5c0 <iprintf>
 800af70:	e7dd      	b.n	800af2e <tcp_input_delayed_close+0x6>
 800af72:	bf00      	nop
 800af74:	24010824 	.word	0x24010824
 800af78:	240107e8 	.word	0x240107e8
 800af7c:	0801129c 	.word	0x0801129c
 800af80:	080112f8 	.word	0x080112f8
 800af84:	08010440 	.word	0x08010440

0800af88 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	b083      	sub	sp, #12
 800af8e:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800af90:	2900      	cmp	r1, #0
 800af92:	d03d      	beq.n	800b010 <tcp_free_acked_segments.constprop.0+0x88>
 800af94:	4607      	mov	r7, r0
 800af96:	460c      	mov	r4, r1
 800af98:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b05c <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800af9c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800b050 <tcp_free_acked_segments.constprop.0+0xc8>
 800afa0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b060 <tcp_free_acked_segments.constprop.0+0xd8>
 800afa4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800b058 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800afa8:	68e3      	ldr	r3, [r4, #12]
 800afaa:	6858      	ldr	r0, [r3, #4]
 800afac:	f7fd fcec 	bl	8008988 <lwip_htonl>
 800afb0:	68e3      	ldr	r3, [r4, #12]
 800afb2:	4605      	mov	r5, r0
 800afb4:	8926      	ldrh	r6, [r4, #8]
 800afb6:	8998      	ldrh	r0, [r3, #12]
 800afb8:	f7fd fce2 	bl	8008980 <lwip_htons>
 800afbc:	f8d8 3000 	ldr.w	r3, [r8]
 800afc0:	f010 0003 	ands.w	r0, r0, #3
 800afc4:	eba5 0503 	sub.w	r5, r5, r3
 800afc8:	bf18      	it	ne
 800afca:	2001      	movne	r0, #1
 800afcc:	4435      	add	r5, r6
 800afce:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	dc36      	bgt.n	800b042 <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 800afd4:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 800afd8:	f7fe fdea 	bl	8009bb0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800afdc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800afe0:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800afe2:	4298      	cmp	r0, r3
 800afe4:	d823      	bhi.n	800b02e <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800afe6:	4919      	ldr	r1, [pc, #100]	; (800b04c <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800afe8:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800afea:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 800afec:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800afee:	880d      	ldrh	r5, [r1, #0]
 800aff0:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aff2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800aff6:	1953      	adds	r3, r2, r5
 800aff8:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800affa:	f7fe ffc3 	bl	8009f84 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800affe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b002:	b11b      	cbz	r3, 800b00c <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b004:	9b01      	ldr	r3, [sp, #4]
 800b006:	ea53 0506 	orrs.w	r5, r3, r6
 800b00a:	d005      	beq.n	800b018 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 800b00c:	2e00      	cmp	r6, #0
 800b00e:	d1cb      	bne.n	800afa8 <tcp_free_acked_segments.constprop.0+0x20>
 800b010:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800b012:	b003      	add	sp, #12
 800b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b018:	4b0d      	ldr	r3, [pc, #52]	; (800b050 <tcp_free_acked_segments.constprop.0+0xc8>)
 800b01a:	f240 4261 	movw	r2, #1121	; 0x461
 800b01e:	490d      	ldr	r1, [pc, #52]	; (800b054 <tcp_free_acked_segments.constprop.0+0xcc>)
 800b020:	480d      	ldr	r0, [pc, #52]	; (800b058 <tcp_free_acked_segments.constprop.0+0xd0>)
 800b022:	f004 facd 	bl	800f5c0 <iprintf>
 800b026:	4628      	mov	r0, r5
}
 800b028:	b003      	add	sp, #12
 800b02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b02e:	465b      	mov	r3, fp
 800b030:	f240 4257 	movw	r2, #1111	; 0x457
 800b034:	4651      	mov	r1, sl
 800b036:	4648      	mov	r0, r9
 800b038:	f004 fac2 	bl	800f5c0 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b03c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b040:	e7d1      	b.n	800afe6 <tcp_free_acked_segments.constprop.0+0x5e>
 800b042:	4620      	mov	r0, r4
}
 800b044:	b003      	add	sp, #12
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	bf00      	nop
 800b04c:	2401081c 	.word	0x2401081c
 800b050:	0801129c 	.word	0x0801129c
 800b054:	08011348 	.word	0x08011348
 800b058:	08010440 	.word	0x08010440
 800b05c:	24010804 	.word	0x24010804
 800b060:	08011320 	.word	0x08011320

0800b064 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b068:	4604      	mov	r4, r0
 800b06a:	2800      	cmp	r0, #0
 800b06c:	f000 81e2 	beq.w	800b434 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b070:	7d23      	ldrb	r3, [r4, #20]
 800b072:	2b03      	cmp	r3, #3
 800b074:	f240 80f5 	bls.w	800b262 <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 800b078:	4baf      	ldr	r3, [pc, #700]	; (800b338 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b07a:	4eb0      	ldr	r6, [pc, #704]	; (800b33c <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	06d8      	lsls	r0, r3, #27
 800b080:	d470      	bmi.n	800b164 <tcp_receive+0x100>
 800b082:	4faf      	ldr	r7, [pc, #700]	; (800b340 <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b084:	883b      	ldrh	r3, [r7, #0]
 800b086:	b113      	cbz	r3, 800b08e <tcp_receive+0x2a>
 800b088:	7d22      	ldrb	r2, [r4, #20]
 800b08a:	2a06      	cmp	r2, #6
 800b08c:	d911      	bls.n	800b0b2 <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b08e:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b092:	1ad1      	subs	r1, r2, r3
 800b094:	2900      	cmp	r1, #0
 800b096:	db06      	blt.n	800b0a6 <tcp_receive+0x42>
 800b098:	f1c3 0301 	rsb	r3, r3, #1
 800b09c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b09e:	1a5b      	subs	r3, r3, r1
 800b0a0:	4413      	add	r3, r2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd03      	ble.n	800b0ae <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 800b0a6:	8b63      	ldrh	r3, [r4, #26]
 800b0a8:	f043 0302 	orr.w	r3, r3, #2
 800b0ac:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800b0ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b0b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0b4:	6832      	ldr	r2, [r6, #0]
 800b0b6:	eba1 0802 	sub.w	r8, r1, r2
 800b0ba:	f1b8 0f01 	cmp.w	r8, #1
 800b0be:	d406      	bmi.n	800b0ce <tcp_receive+0x6a>
 800b0c0:	f1c2 0001 	rsb	r0, r2, #1
 800b0c4:	1ac3      	subs	r3, r0, r3
 800b0c6:	440b      	add	r3, r1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f340 81c2 	ble.w	800b452 <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b0ce:	1a53      	subs	r3, r2, r1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f2c0 81b9 	blt.w	800b448 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b0d6:	f102 0c01 	add.w	ip, r2, #1
 800b0da:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800b0dc:	ebac 0301 	sub.w	r3, ip, r1
 800b0e0:	1a1b      	subs	r3, r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	dc39      	bgt.n	800b15a <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 800b0e6:	4291      	cmp	r1, r2
 800b0e8:	f000 8452 	beq.w	800b990 <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 800b0ec:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800b0ee:	2d00      	cmp	r5, #0
 800b0f0:	f000 835d 	beq.w	800b7ae <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 800b0f4:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 800b0f6:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b0fa:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800b0fe:	6843      	ldr	r3, [r0, #4]
 800b100:	429a      	cmp	r2, r3
 800b102:	d019      	beq.n	800b138 <tcp_receive+0xd4>
              if (prev == NULL) {
 800b104:	f1b8 0f00 	cmp.w	r8, #0
 800b108:	f000 812c 	beq.w	800b364 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b10c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b110:	6849      	ldr	r1, [r1, #4]
 800b112:	ebae 0101 	sub.w	r1, lr, r1
 800b116:	2900      	cmp	r1, #0
 800b118:	db04      	blt.n	800b124 <tcp_receive+0xc0>
 800b11a:	ebac 0103 	sub.w	r1, ip, r3
 800b11e:	2900      	cmp	r1, #0
 800b120:	f340 834e 	ble.w	800b7c0 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800b124:	6829      	ldr	r1, [r5, #0]
 800b126:	46a8      	mov	r8, r5
 800b128:	2900      	cmp	r1, #0
 800b12a:	f000 812a 	beq.w	800b382 <tcp_receive+0x31e>
 800b12e:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800b130:	68e8      	ldr	r0, [r5, #12]
 800b132:	6843      	ldr	r3, [r0, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d1e5      	bne.n	800b104 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 800b138:	4882      	ldr	r0, [pc, #520]	; (800b344 <tcp_receive+0x2e0>)
 800b13a:	892b      	ldrh	r3, [r5, #8]
 800b13c:	8902      	ldrh	r2, [r0, #8]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d90b      	bls.n	800b15a <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b142:	f7fe ff2d 	bl	8009fa0 <tcp_seg_copy>
                if (cseg != NULL) {
 800b146:	b140      	cbz	r0, 800b15a <tcp_receive+0xf6>
                  if (prev != NULL) {
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	f000 83f7 	beq.w	800b93e <tcp_receive+0x8da>
                    prev->next = cseg;
 800b150:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800b154:	4629      	mov	r1, r5
 800b156:	f7ff fe93 	bl	800ae80 <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 800b15a:	4620      	mov	r0, r4
}
 800b15c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800b160:	f001 be80 	b.w	800ce64 <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b164:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b166:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b168:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b16c:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b16e:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b172:	2900      	cmp	r1, #0
 800b174:	db7d      	blt.n	800b272 <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b176:	4d74      	ldr	r5, [pc, #464]	; (800b348 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b178:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b17a:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b17c:	f000 80cb 	beq.w	800b316 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b180:	459c      	cmp	ip, r3
 800b182:	f000 80d1 	beq.w	800b328 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b186:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b188:	1a19      	subs	r1, r3, r0
 800b18a:	2900      	cmp	r1, #0
 800b18c:	f340 8085 	ble.w	800b29a <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b190:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b192:	1a9a      	subs	r2, r3, r2
 800b194:	2a00      	cmp	r2, #0
 800b196:	f300 808f 	bgt.w	800b2b8 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 800b19a:	8b62      	ldrh	r2, [r4, #26]
 800b19c:	0750      	lsls	r0, r2, #29
 800b19e:	d509      	bpl.n	800b1b4 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800b1a0:	f022 0204 	bic.w	r2, r2, #4
 800b1a4:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800b1a6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b1aa:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b1b4:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800b1b8:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b1ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 800b1bc:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b1be:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800b1c2:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b1c4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800b1c8:	f04f 0300 	mov.w	r3, #0
 800b1cc:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800b1d0:	d913      	bls.n	800b1fa <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 800b1d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b1d6:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800b1d8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	f200 81d1 	bhi.w	800b584 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b1e2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800b1e6:	4411      	add	r1, r2
 800b1e8:	b289      	uxth	r1, r1
 800b1ea:	428a      	cmp	r2, r1
 800b1ec:	f200 82c6 	bhi.w	800b77c <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	f240 82c5 	bls.w	800b780 <tcp_receive+0x71c>
 800b1f6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800b200:	f7ff fec2 	bl	800af88 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b204:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b206:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b208:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7ff febc 	bl	800af88 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800b210:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b212:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800b214:	fab2 f382 	clz	r3, r2
 800b218:	095b      	lsrs	r3, r3, #5
 800b21a:	425b      	negs	r3, r3
 800b21c:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800b222:	2800      	cmp	r0, #0
 800b224:	f000 81ab 	beq.w	800b57e <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b228:	4b48      	ldr	r3, [pc, #288]	; (800b34c <tcp_receive+0x2e8>)
 800b22a:	8819      	ldrh	r1, [r3, #0]
 800b22c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b230:	440b      	add	r3, r1
 800b232:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800b236:	8b63      	ldrh	r3, [r4, #26]
 800b238:	0519      	lsls	r1, r3, #20
 800b23a:	f140 8103 	bpl.w	800b444 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800b23e:	2a00      	cmp	r2, #0
 800b240:	f000 81b7 	beq.w	800b5b2 <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b244:	68d3      	ldr	r3, [r2, #12]
 800b246:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800b248:	6858      	ldr	r0, [r3, #4]
 800b24a:	f7fd fb9d 	bl	8008988 <lwip_htonl>
 800b24e:	1a38      	subs	r0, r7, r0
 800b250:	2800      	cmp	r0, #0
 800b252:	f300 80f7 	bgt.w	800b444 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 800b256:	8b63      	ldrh	r3, [r4, #26]
 800b258:	4f39      	ldr	r7, [pc, #228]	; (800b340 <tcp_receive+0x2dc>)
 800b25a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b25e:	8363      	strh	r3, [r4, #26]
 800b260:	e02e      	b.n	800b2c0 <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b262:	4b3b      	ldr	r3, [pc, #236]	; (800b350 <tcp_receive+0x2ec>)
 800b264:	f240 427c 	movw	r2, #1148	; 0x47c
 800b268:	493a      	ldr	r1, [pc, #232]	; (800b354 <tcp_receive+0x2f0>)
 800b26a:	483b      	ldr	r0, [pc, #236]	; (800b358 <tcp_receive+0x2f4>)
 800b26c:	f004 f9a8 	bl	800f5c0 <iprintf>
 800b270:	e702      	b.n	800b078 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b272:	4b3a      	ldr	r3, [pc, #232]	; (800b35c <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b274:	4d34      	ldr	r5, [pc, #208]	; (800b348 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b27a:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b27c:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b280:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b284:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b286:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b288:	bf38      	it	cc
 800b28a:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b28e:	1a19      	subs	r1, r3, r0
 800b290:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800b292:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b296:	f73f af7b 	bgt.w	800b190 <tcp_receive+0x12c>
      if (tcplen == 0) {
 800b29a:	4f29      	ldr	r7, [pc, #164]	; (800b340 <tcp_receive+0x2dc>)
 800b29c:	8839      	ldrh	r1, [r7, #0]
 800b29e:	b939      	cbnz	r1, 800b2b0 <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b2a0:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b2a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2a4:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 800b2a8:	4461      	add	r1, ip
 800b2aa:	4571      	cmp	r1, lr
 800b2ac:	f000 8191 	beq.w	800b5d2 <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b6:	e003      	b.n	800b2c0 <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	4f21      	ldr	r7, [pc, #132]	; (800b340 <tcp_receive+0x2dc>)
 800b2bc:	f001 fdd2 	bl	800ce64 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2c2:	2900      	cmp	r1, #0
 800b2c4:	f43f aede 	beq.w	800b084 <tcp_receive+0x20>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b2cc:	1ad2      	subs	r2, r2, r3
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	f6bf aed8 	bge.w	800b084 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 800b2d4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b2d8:	b289      	uxth	r1, r1
 800b2da:	4b21      	ldr	r3, [pc, #132]	; (800b360 <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800b2dc:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b2e0:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800b2e2:	1a2b      	subs	r3, r5, r0
 800b2e4:	1a5b      	subs	r3, r3, r1
 800b2e6:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800b2e8:	441a      	add	r2, r3
      if (m < 0) {
 800b2ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800b2ee:	b212      	sxth	r2, r2
 800b2f0:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 800b2f2:	d002      	beq.n	800b2fa <tcp_receive+0x296>
        m = (s16_t) - m;
 800b2f4:	1b40      	subs	r0, r0, r5
 800b2f6:	4401      	add	r1, r0
 800b2f8:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800b2fa:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b2fe:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800b302:	440b      	add	r3, r1
 800b304:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b306:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800b30a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800b30c:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b30e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800b312:	6363      	str	r3, [r4, #52]	; 0x34
 800b314:	e6b6      	b.n	800b084 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b316:	ebac 0103 	sub.w	r1, ip, r3
 800b31a:	2900      	cmp	r1, #0
 800b31c:	f6bf af30 	bge.w	800b180 <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b320:	490e      	ldr	r1, [pc, #56]	; (800b35c <tcp_receive+0x2f8>)
 800b322:	6809      	ldr	r1, [r1, #0]
 800b324:	89c9      	ldrh	r1, [r1, #14]
 800b326:	e7a9      	b.n	800b27c <tcp_receive+0x218>
 800b328:	490c      	ldr	r1, [pc, #48]	; (800b35c <tcp_receive+0x2f8>)
 800b32a:	6809      	ldr	r1, [r1, #0]
 800b32c:	89c9      	ldrh	r1, [r1, #14]
 800b32e:	458e      	cmp	lr, r1
 800b330:	f4bf af29 	bcs.w	800b186 <tcp_receive+0x122>
 800b334:	e7a2      	b.n	800b27c <tcp_receive+0x218>
 800b336:	bf00      	nop
 800b338:	24010808 	.word	0x24010808
 800b33c:	24010828 	.word	0x24010828
 800b340:	24010842 	.word	0x24010842
 800b344:	2401080c 	.word	0x2401080c
 800b348:	24010804 	.word	0x24010804
 800b34c:	2401081c 	.word	0x2401081c
 800b350:	0801129c 	.word	0x0801129c
 800b354:	08011384 	.word	0x08011384
 800b358:	08010440 	.word	0x08010440
 800b35c:	24010834 	.word	0x24010834
 800b360:	240107f8 	.word	0x240107f8
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b364:	1ad1      	subs	r1, r2, r3
 800b366:	2900      	cmp	r1, #0
 800b368:	f6bf aedc 	bge.w	800b124 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b36c:	48af      	ldr	r0, [pc, #700]	; (800b62c <tcp_receive+0x5c8>)
 800b36e:	f7fe fe17 	bl	8009fa0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800b372:	2800      	cmp	r0, #0
 800b374:	f43f aef1 	beq.w	800b15a <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 800b378:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800b37a:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b37c:	f7ff fd80 	bl	800ae80 <tcp_oos_insert_segment>
 800b380:	e6eb      	b.n	800b15a <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b382:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b384:	2b00      	cmp	r3, #0
 800b386:	f77f aee8 	ble.w	800b15a <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b38a:	8980      	ldrh	r0, [r0, #12]
 800b38c:	f7fd faf8 	bl	8008980 <lwip_htons>
 800b390:	07c1      	lsls	r1, r0, #31
 800b392:	f53f aee2 	bmi.w	800b15a <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 800b396:	48a5      	ldr	r0, [pc, #660]	; (800b62c <tcp_receive+0x5c8>)
 800b398:	f7fe fe02 	bl	8009fa0 <tcp_seg_copy>
 800b39c:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f43f aedb 	beq.w	800b15a <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b3a4:	68eb      	ldr	r3, [r5, #12]
 800b3a6:	892a      	ldrh	r2, [r5, #8]
 800b3a8:	6859      	ldr	r1, [r3, #4]
 800b3aa:	6833      	ldr	r3, [r6, #0]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	dd05      	ble.n	800b3c0 <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b3b4:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800b3b6:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b3b8:	b299      	uxth	r1, r3
 800b3ba:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800b3bc:	f7fe fba0 	bl	8009b00 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b3c0:	6832      	ldr	r2, [r6, #0]
 800b3c2:	883b      	ldrh	r3, [r7, #0]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b3c8:	1a9b      	subs	r3, r3, r2
 800b3ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b3cc:	1a9b      	subs	r3, r3, r2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f77f aec3 	ble.w	800b15a <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	8998      	ldrh	r0, [r3, #12]
 800b3da:	f7fd fad1 	bl	8008980 <lwip_htons>
 800b3de:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b3e0:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b3e2:	f100 82c3 	bmi.w	800b96c <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b3e6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b3e8:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800b3ea:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b3ec:	1a89      	subs	r1, r1, r2
 800b3ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b3f0:	4411      	add	r1, r2
 800b3f2:	b289      	uxth	r1, r1
 800b3f4:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b3f6:	f7fe fb83 	bl	8009b00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b3fa:	682b      	ldr	r3, [r5, #0]
 800b3fc:	891d      	ldrh	r5, [r3, #8]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	8998      	ldrh	r0, [r3, #12]
 800b402:	f7fd fabd 	bl	8008980 <lwip_htons>
 800b406:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b40a:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800b40c:	bf18      	it	ne
 800b40e:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b410:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800b412:	182b      	adds	r3, r5, r0
 800b414:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b416:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800b418:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b41a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b41c:	4413      	add	r3, r2
 800b41e:	4299      	cmp	r1, r3
 800b420:	f43f ae9b 	beq.w	800b15a <tcp_receive+0xf6>
 800b424:	4b82      	ldr	r3, [pc, #520]	; (800b630 <tcp_receive+0x5cc>)
 800b426:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b42a:	4982      	ldr	r1, [pc, #520]	; (800b634 <tcp_receive+0x5d0>)
 800b42c:	4882      	ldr	r0, [pc, #520]	; (800b638 <tcp_receive+0x5d4>)
 800b42e:	f004 f8c7 	bl	800f5c0 <iprintf>
 800b432:	e692      	b.n	800b15a <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b434:	4b7e      	ldr	r3, [pc, #504]	; (800b630 <tcp_receive+0x5cc>)
 800b436:	f240 427b 	movw	r2, #1147	; 0x47b
 800b43a:	4980      	ldr	r1, [pc, #512]	; (800b63c <tcp_receive+0x5d8>)
 800b43c:	487e      	ldr	r0, [pc, #504]	; (800b638 <tcp_receive+0x5d4>)
 800b43e:	f004 f8bf 	bl	800f5c0 <iprintf>
 800b442:	e615      	b.n	800b070 <tcp_receive+0xc>
 800b444:	4f7e      	ldr	r7, [pc, #504]	; (800b640 <tcp_receive+0x5dc>)
 800b446:	e73b      	b.n	800b2c0 <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 800b448:	8b63      	ldrh	r3, [r4, #26]
 800b44a:	f043 0302 	orr.w	r3, r3, #2
 800b44e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b450:	e683      	b.n	800b15a <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 800b452:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800b62c <tcp_receive+0x5c8>
 800b456:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b45a:	2d00      	cmp	r5, #0
 800b45c:	f000 8186 	beq.w	800b76c <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b460:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b464:	4598      	cmp	r8, r3
 800b466:	f200 80d9 	bhi.w	800b61c <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b46a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800b46e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b472:	891a      	ldrh	r2, [r3, #8]
 800b474:	4542      	cmp	r2, r8
 800b476:	f0c0 80c6 	bcc.w	800b606 <tcp_receive+0x5a2>
      inseg.len -= off;
 800b47a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b47e:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800b482:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b486:	b292      	uxth	r2, r2
      inseg.len -= off;
 800b488:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800b48c:	896b      	ldrh	r3, [r5, #10]
 800b48e:	4543      	cmp	r3, r8
 800b490:	d20a      	bcs.n	800b4a8 <tcp_receive+0x444>
        p->len = 0;
 800b492:	2100      	movs	r1, #0
        off -= p->len;
 800b494:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800b498:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800b49a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800b49c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800b49e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800b4a2:	896b      	ldrh	r3, [r5, #10]
 800b4a4:	4543      	cmp	r3, r8
 800b4a6:	d3f5      	bcc.n	800b494 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 800b4a8:	4641      	mov	r1, r8
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7fe f99e 	bl	80097ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4b2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800b4b6:	6033      	str	r3, [r6, #0]
 800b4b8:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b4ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f43f ae4c 	beq.w	800b15a <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 800b4c2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b4c6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800b4ca:	8998      	ldrh	r0, [r3, #12]
 800b4cc:	f7fd fa58 	bl	8008980 <lwip_htons>
 800b4d0:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800b4d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800b4d6:	bf18      	it	ne
 800b4d8:	2001      	movne	r0, #1
 800b4da:	182b      	adds	r3, r5, r0
 800b4dc:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800b4de:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800b4e0:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800b4e2:	f0c0 8197 	bcc.w	800b814 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 800b4e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 80b6 	beq.w	800b65a <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b4f2:	8998      	ldrh	r0, [r3, #12]
 800b4f4:	f7fd fa44 	bl	8008980 <lwip_htons>
 800b4f8:	07c2      	lsls	r2, r0, #31
 800b4fa:	f100 80ab 	bmi.w	800b654 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 800b4fe:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800b500:	b955      	cbnz	r5, 800b518 <tcp_receive+0x4b4>
 800b502:	e208      	b.n	800b916 <tcp_receive+0x8b2>
              next = next->next;
 800b504:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800b508:	4628      	mov	r0, r5
 800b50a:	f7fe fd3b 	bl	8009f84 <tcp_seg_free>
            while (next &&
 800b50e:	4645      	mov	r5, r8
 800b510:	f1b8 0f00 	cmp.w	r8, #0
 800b514:	f000 81ff 	beq.w	800b916 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b518:	68e8      	ldr	r0, [r5, #12]
 800b51a:	883a      	ldrh	r2, [r7, #0]
 800b51c:	f8d6 e000 	ldr.w	lr, [r6]
 800b520:	892b      	ldrh	r3, [r5, #8]
 800b522:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b526:	eb02 010e 	add.w	r1, r2, lr
 800b52a:	4463      	add	r3, ip
 800b52c:	1acb      	subs	r3, r1, r3
            while (next &&
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f2c0 81b9 	blt.w	800b8a6 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b534:	8980      	ldrh	r0, [r0, #12]
 800b536:	f7fd fa23 	bl	8008980 <lwip_htons>
 800b53a:	07c3      	lsls	r3, r0, #31
 800b53c:	d5e2      	bpl.n	800b504 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b53e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b542:	8998      	ldrh	r0, [r3, #12]
 800b544:	f7fd fa1c 	bl	8008980 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b548:	0780      	lsls	r0, r0, #30
 800b54a:	d4db      	bmi.n	800b504 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b54c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b550:	2001      	movs	r0, #1
 800b552:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800b556:	f7fd fa13 	bl	8008980 <lwip_htons>
 800b55a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b55e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800b562:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b566:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b568:	b280      	uxth	r0, r0
 800b56a:	f7fd fa09 	bl	8008980 <lwip_htons>
 800b56e:	f010 0003 	ands.w	r0, r0, #3
 800b572:	bf18      	it	ne
 800b574:	2001      	movne	r0, #1
 800b576:	4480      	add	r8, r0
 800b578:	f8a7 8000 	strh.w	r8, [r7]
 800b57c:	e7c2      	b.n	800b504 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 800b57e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 800b582:	e651      	b.n	800b228 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b584:	8b62      	ldrh	r2, [r4, #26]
 800b586:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b58a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b58c:	bf14      	ite	ne
 800b58e:	2001      	movne	r0, #1
 800b590:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b592:	fb12 f200 	smulbb	r2, r2, r0
 800b596:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800b598:	428a      	cmp	r2, r1
 800b59a:	bf94      	ite	ls
 800b59c:	1898      	addls	r0, r3, r2
 800b59e:	1858      	addhi	r0, r3, r1
 800b5a0:	b282      	uxth	r2, r0
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	f240 80f5 	bls.w	800b792 <tcp_receive+0x72e>
 800b5a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5ac:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800b5b0:	e623      	b.n	800b1fa <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 800b5b2:	b148      	cbz	r0, 800b5c8 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b5b4:	68c3      	ldr	r3, [r0, #12]
 800b5b6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800b5b8:	6858      	ldr	r0, [r3, #4]
 800b5ba:	f7fd f9e5 	bl	8008988 <lwip_htonl>
 800b5be:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	f73f af3f 	bgt.w	800b444 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 800b5c6:	8b63      	ldrh	r3, [r4, #26]
 800b5c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5cc:	4f1c      	ldr	r7, [pc, #112]	; (800b640 <tcp_receive+0x5dc>)
 800b5ce:	8363      	strh	r3, [r4, #26]
 800b5d0:	e676      	b.n	800b2c0 <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 800b5d2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800b5d4:	0409      	lsls	r1, r1, #16
 800b5d6:	f53f ae6b 	bmi.w	800b2b0 <tcp_receive+0x24c>
 800b5da:	4298      	cmp	r0, r3
 800b5dc:	f47f ae68 	bne.w	800b2b0 <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b5e0:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800b5e4:	29ff      	cmp	r1, #255	; 0xff
 800b5e6:	f000 814e 	beq.w	800b886 <tcp_receive+0x822>
                ++pcb->dupacks;
 800b5ea:	3101      	adds	r1, #1
 800b5ec:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800b5ee:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800b5f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800b5f4:	f200 8147 	bhi.w	800b886 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 800b5f8:	f000 8151 	beq.w	800b89e <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5fe:	2900      	cmp	r1, #0
 800b600:	f47f ae63 	bne.w	800b2ca <tcp_receive+0x266>
 800b604:	e544      	b.n	800b090 <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b606:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <tcp_receive+0x5cc>)
 800b608:	f240 5297 	movw	r2, #1431	; 0x597
 800b60c:	490d      	ldr	r1, [pc, #52]	; (800b644 <tcp_receive+0x5e0>)
 800b60e:	480a      	ldr	r0, [pc, #40]	; (800b638 <tcp_receive+0x5d4>)
 800b610:	f003 ffd6 	bl	800f5c0 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b614:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b618:	891a      	ldrh	r2, [r3, #8]
 800b61a:	e72e      	b.n	800b47a <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b61c:	4b04      	ldr	r3, [pc, #16]	; (800b630 <tcp_receive+0x5cc>)
 800b61e:	f240 5295 	movw	r2, #1429	; 0x595
 800b622:	4909      	ldr	r1, [pc, #36]	; (800b648 <tcp_receive+0x5e4>)
 800b624:	4804      	ldr	r0, [pc, #16]	; (800b638 <tcp_receive+0x5d4>)
 800b626:	f003 ffcb 	bl	800f5c0 <iprintf>
 800b62a:	e71e      	b.n	800b46a <tcp_receive+0x406>
 800b62c:	2401080c 	.word	0x2401080c
 800b630:	0801129c 	.word	0x0801129c
 800b634:	080113d0 	.word	0x080113d0
 800b638:	08010440 	.word	0x08010440
 800b63c:	08011368 	.word	0x08011368
 800b640:	24010842 	.word	0x24010842
 800b644:	080113c0 	.word	0x080113c0
 800b648:	080113b0 	.word	0x080113b0
              pcb->ooseq = pcb->ooseq->next;
 800b64c:	6803      	ldr	r3, [r0, #0]
 800b64e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b650:	f7fe fc98 	bl	8009f84 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b654:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b656:	2800      	cmp	r0, #0
 800b658:	d1f8      	bne.n	800b64c <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 800b65a:	883a      	ldrh	r2, [r7, #0]
 800b65c:	6831      	ldr	r1, [r6, #0]
 800b65e:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b660:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800b662:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b664:	4293      	cmp	r3, r2
 800b666:	f0c0 80cb 	bcc.w	800b800 <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 800b66a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800b66c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800b66e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800b670:	f7fe fbf8 	bl	8009e64 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800b674:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b678:	891a      	ldrh	r2, [r3, #8]
 800b67a:	b122      	cbz	r2, 800b686 <tcp_receive+0x622>
          recv_data = inseg.p;
 800b67c:	4ab1      	ldr	r2, [pc, #708]	; (800b944 <tcp_receive+0x8e0>)
 800b67e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800b680:	2300      	movs	r3, #0
 800b682:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b686:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b68a:	8998      	ldrh	r0, [r3, #12]
 800b68c:	f7fd f978 	bl	8008980 <lwip_htons>
 800b690:	07c2      	lsls	r2, r0, #31
 800b692:	d504      	bpl.n	800b69e <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 800b694:	4aac      	ldr	r2, [pc, #688]	; (800b948 <tcp_receive+0x8e4>)
 800b696:	7813      	ldrb	r3, [r2, #0]
 800b698:	f043 0320 	orr.w	r3, r3, #32
 800b69c:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800b69e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800b6a0:	2d00      	cmp	r5, #0
 800b6a2:	d07b      	beq.n	800b79c <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b6a4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800b950 <tcp_receive+0x8ec>
 800b6a8:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800b968 <tcp_receive+0x904>
 800b6ac:	4fa7      	ldr	r7, [pc, #668]	; (800b94c <tcp_receive+0x8e8>)
 800b6ae:	e033      	b.n	800b718 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b6b0:	68eb      	ldr	r3, [r5, #12]
 800b6b2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b6b6:	8998      	ldrh	r0, [r3, #12]
 800b6b8:	f7fd f962 	bl	8008980 <lwip_htons>
 800b6bc:	f010 0003 	ands.w	r0, r0, #3
 800b6c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b6c2:	bf18      	it	ne
 800b6c4:	2001      	movne	r0, #1
 800b6c6:	4450      	add	r0, sl
 800b6c8:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800b6ca:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b6cc:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800b6ce:	f7fe fbc9 	bl	8009e64 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800b6d2:	6869      	ldr	r1, [r5, #4]
 800b6d4:	890b      	ldrh	r3, [r1, #8]
 800b6d6:	b13b      	cbz	r3, 800b6e8 <tcp_receive+0x684>
            if (recv_data) {
 800b6d8:	4b9a      	ldr	r3, [pc, #616]	; (800b944 <tcp_receive+0x8e0>)
 800b6da:	6818      	ldr	r0, [r3, #0]
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d05b      	beq.n	800b798 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 800b6e0:	f7fe fa90 	bl	8009c04 <pbuf_cat>
            cseg->p = NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b6e8:	68eb      	ldr	r3, [r5, #12]
 800b6ea:	8998      	ldrh	r0, [r3, #12]
 800b6ec:	f7fd f948 	bl	8008980 <lwip_htons>
 800b6f0:	07c3      	lsls	r3, r0, #31
 800b6f2:	d509      	bpl.n	800b708 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 800b6f4:	4a94      	ldr	r2, [pc, #592]	; (800b948 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b6f6:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800b6f8:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b6fa:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800b6fc:	f043 0320 	orr.w	r3, r3, #32
 800b700:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b702:	d101      	bne.n	800b708 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 800b704:	2307      	movs	r3, #7
 800b706:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800b708:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800b70a:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800b70c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800b70e:	f7fe fc39 	bl	8009f84 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b712:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800b714:	2d00      	cmp	r5, #0
 800b716:	d041      	beq.n	800b79c <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b718:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800b71a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b71c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800b71e:	428b      	cmp	r3, r1
 800b720:	d13c      	bne.n	800b79c <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 800b722:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b724:	8990      	ldrh	r0, [r2, #12]
 800b726:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b72a:	f7fd f929 	bl	8008980 <lwip_htons>
 800b72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b730:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b734:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b738:	bf18      	it	ne
 800b73a:	2001      	movne	r0, #1
 800b73c:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b73e:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b740:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b742:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b746:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b748:	8998      	ldrh	r0, [r3, #12]
 800b74a:	f7fd f919 	bl	8008980 <lwip_htons>
 800b74e:	f010 0003 	ands.w	r0, r0, #3
 800b752:	bf18      	it	ne
 800b754:	2001      	movne	r0, #1
 800b756:	4458      	add	r0, fp
 800b758:	4582      	cmp	sl, r0
 800b75a:	d2a9      	bcs.n	800b6b0 <tcp_receive+0x64c>
 800b75c:	464b      	mov	r3, r9
 800b75e:	f240 622b 	movw	r2, #1579	; 0x62b
 800b762:	4641      	mov	r1, r8
 800b764:	4638      	mov	r0, r7
 800b766:	f003 ff2b 	bl	800f5c0 <iprintf>
 800b76a:	e7a1      	b.n	800b6b0 <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b76c:	4b78      	ldr	r3, [pc, #480]	; (800b950 <tcp_receive+0x8ec>)
 800b76e:	f240 5294 	movw	r2, #1428	; 0x594
 800b772:	4978      	ldr	r1, [pc, #480]	; (800b954 <tcp_receive+0x8f0>)
 800b774:	4875      	ldr	r0, [pc, #468]	; (800b94c <tcp_receive+0x8e8>)
 800b776:	f003 ff23 	bl	800f5c0 <iprintf>
 800b77a:	e671      	b.n	800b460 <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b77c:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b780:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b782:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b784:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b786:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b78a:	b292      	uxth	r2, r2
 800b78c:	4293      	cmp	r3, r2
 800b78e:	f63f af0b 	bhi.w	800b5a8 <tcp_receive+0x544>
 800b792:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800b796:	e530      	b.n	800b1fa <tcp_receive+0x196>
              recv_data = cseg->p;
 800b798:	6019      	str	r1, [r3, #0]
 800b79a:	e7a3      	b.n	800b6e4 <tcp_receive+0x680>
        tcp_ack(pcb);
 800b79c:	8b63      	ldrh	r3, [r4, #26]
 800b79e:	07d8      	lsls	r0, r3, #31
 800b7a0:	d50a      	bpl.n	800b7b8 <tcp_receive+0x754>
 800b7a2:	f023 0301 	bic.w	r3, r3, #1
 800b7a6:	f043 0302 	orr.w	r3, r3, #2
 800b7aa:	8363      	strh	r3, [r4, #26]
 800b7ac:	e47f      	b.n	800b0ae <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b7ae:	486a      	ldr	r0, [pc, #424]	; (800b958 <tcp_receive+0x8f4>)
 800b7b0:	f7fe fbf6 	bl	8009fa0 <tcp_seg_copy>
 800b7b4:	6760      	str	r0, [r4, #116]	; 0x74
 800b7b6:	e4d0      	b.n	800b15a <tcp_receive+0xf6>
        tcp_ack(pcb);
 800b7b8:	f043 0301 	orr.w	r3, r3, #1
 800b7bc:	8363      	strh	r3, [r4, #26]
 800b7be:	e476      	b.n	800b0ae <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b7c0:	4865      	ldr	r0, [pc, #404]	; (800b958 <tcp_receive+0x8f4>)
 800b7c2:	f7fe fbed 	bl	8009fa0 <tcp_seg_copy>
                  if (cseg != NULL) {
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	f43f acc6 	beq.w	800b15a <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b7ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7d2:	6832      	ldr	r2, [r6, #0]
 800b7d4:	6859      	ldr	r1, [r3, #4]
 800b7d6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b7da:	440b      	add	r3, r1
 800b7dc:	1a9b      	subs	r3, r3, r2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dd07      	ble.n	800b7f2 <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b7e2:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800b7e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b7e8:	b291      	uxth	r1, r2
 800b7ea:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b7ee:	f7fe f987 	bl	8009b00 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4638      	mov	r0, r7
                    prev->next = cseg;
 800b7f6:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800b7fa:	f7ff fb41 	bl	800ae80 <tcp_oos_insert_segment>
 800b7fe:	e4ac      	b.n	800b15a <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b800:	4b53      	ldr	r3, [pc, #332]	; (800b950 <tcp_receive+0x8ec>)
 800b802:	f240 6207 	movw	r2, #1543	; 0x607
 800b806:	4955      	ldr	r1, [pc, #340]	; (800b95c <tcp_receive+0x8f8>)
 800b808:	4850      	ldr	r0, [pc, #320]	; (800b94c <tcp_receive+0x8e8>)
 800b80a:	f003 fed9 	bl	800f5c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b80e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b810:	883a      	ldrh	r2, [r7, #0]
 800b812:	e72a      	b.n	800b66a <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b814:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b818:	8998      	ldrh	r0, [r3, #12]
 800b81a:	f7fd f8b1 	bl	8008980 <lwip_htons>
 800b81e:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b820:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b824:	d47b      	bmi.n	800b91e <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b826:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b828:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b82a:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b82e:	f7fd f8a7 	bl	8008980 <lwip_htons>
 800b832:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800b834:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b838:	d503      	bpl.n	800b842 <tcp_receive+0x7de>
            inseg.len -= 1;
 800b83a:	3901      	subs	r1, #1
 800b83c:	b289      	uxth	r1, r1
 800b83e:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800b842:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b846:	f7fe f95b 	bl	8009b00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b84a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b84e:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800b852:	8998      	ldrh	r0, [r3, #12]
 800b854:	f7fd f894 	bl	8008980 <lwip_htons>
 800b858:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b85c:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800b85e:	bf18      	it	ne
 800b860:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b862:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800b864:	182b      	adds	r3, r5, r0
 800b866:	b29b      	uxth	r3, r3
 800b868:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b86a:	4413      	add	r3, r2
 800b86c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b86e:	440a      	add	r2, r1
 800b870:	4293      	cmp	r3, r2
 800b872:	f43f ae38 	beq.w	800b4e6 <tcp_receive+0x482>
 800b876:	4b36      	ldr	r3, [pc, #216]	; (800b950 <tcp_receive+0x8ec>)
 800b878:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b87c:	4938      	ldr	r1, [pc, #224]	; (800b960 <tcp_receive+0x8fc>)
 800b87e:	4833      	ldr	r0, [pc, #204]	; (800b94c <tcp_receive+0x8e8>)
 800b880:	f003 fe9e 	bl	800f5c0 <iprintf>
 800b884:	e62f      	b.n	800b4e6 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b886:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b88a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b88e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b890:	4413      	add	r3, r2
 800b892:	b29b      	uxth	r3, r3
 800b894:	429a      	cmp	r2, r3
 800b896:	bf88      	it	hi
 800b898:	460b      	movhi	r3, r1
 800b89a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f001 fa5e 	bl	800cd60 <tcp_rexmit_fast>
      if (!found_dupack) {
 800b8a4:	e50c      	b.n	800b2c0 <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 800b8a6:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dc01      	bgt.n	800b8b2 <tcp_receive+0x84e>
            pcb->ooseq = next;
 800b8ae:	6765      	str	r5, [r4, #116]	; 0x74
 800b8b0:	e6d6      	b.n	800b660 <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b8b2:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b8b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b8ba:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b8be:	8998      	ldrh	r0, [r3, #12]
 800b8c0:	f7fd f85e 	bl	8008980 <lwip_htons>
 800b8c4:	0781      	lsls	r1, r0, #30
 800b8c6:	d504      	bpl.n	800b8d2 <tcp_receive+0x86e>
                inseg.len -= 1;
 800b8c8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800b8d2:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800b8d6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b8da:	f7fe f911 	bl	8009b00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b8de:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b8e2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800b8e6:	8998      	ldrh	r0, [r3, #12]
 800b8e8:	f7fd f84a 	bl	8008980 <lwip_htons>
 800b8ec:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b8f0:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800b8f2:	bf18      	it	ne
 800b8f4:	2001      	movne	r0, #1
 800b8f6:	eb08 0200 	add.w	r2, r8, r0
 800b8fa:	b292      	uxth	r2, r2
 800b8fc:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b8fe:	6859      	ldr	r1, [r3, #4]
 800b900:	6833      	ldr	r3, [r6, #0]
 800b902:	4413      	add	r3, r2
 800b904:	428b      	cmp	r3, r1
 800b906:	d0d2      	beq.n	800b8ae <tcp_receive+0x84a>
 800b908:	4b11      	ldr	r3, [pc, #68]	; (800b950 <tcp_receive+0x8ec>)
 800b90a:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b90e:	4915      	ldr	r1, [pc, #84]	; (800b964 <tcp_receive+0x900>)
 800b910:	480e      	ldr	r0, [pc, #56]	; (800b94c <tcp_receive+0x8e8>)
 800b912:	f003 fe55 	bl	800f5c0 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800b916:	883a      	ldrh	r2, [r7, #0]
 800b918:	6831      	ldr	r1, [r6, #0]
 800b91a:	4411      	add	r1, r2
 800b91c:	e7c7      	b.n	800b8ae <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b91e:	899d      	ldrh	r5, [r3, #12]
 800b920:	4628      	mov	r0, r5
 800b922:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800b926:	f7fd f82b 	bl	8008980 <lwip_htons>
 800b92a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b92e:	f7fd f827 	bl	8008980 <lwip_htons>
 800b932:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b936:	4328      	orrs	r0, r5
 800b938:	8198      	strh	r0, [r3, #12]
 800b93a:	b280      	uxth	r0, r0
 800b93c:	e774      	b.n	800b828 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 800b93e:	6760      	str	r0, [r4, #116]	; 0x74
 800b940:	e408      	b.n	800b154 <tcp_receive+0xf0>
 800b942:	bf00      	nop
 800b944:	24010820 	.word	0x24010820
 800b948:	24010824 	.word	0x24010824
 800b94c:	08010440 	.word	0x08010440
 800b950:	0801129c 	.word	0x0801129c
 800b954:	080113a0 	.word	0x080113a0
 800b958:	2401080c 	.word	0x2401080c
 800b95c:	08011444 	.word	0x08011444
 800b960:	080113d0 	.word	0x080113d0
 800b964:	08011408 	.word	0x08011408
 800b968:	08011464 	.word	0x08011464
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800b972:	4640      	mov	r0, r8
 800b974:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800b978:	f7fd f802 	bl	8008980 <lwip_htons>
 800b97c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b980:	f7fc fffe 	bl	8008980 <lwip_htons>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	ea40 0008 	orr.w	r0, r0, r8
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	8190      	strh	r0, [r2, #12]
 800b98e:	e52a      	b.n	800b3e6 <tcp_receive+0x382>
 800b990:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800b998 <tcp_receive+0x934>
 800b994:	e595      	b.n	800b4c2 <tcp_receive+0x45e>
 800b996:	bf00      	nop
 800b998:	2401080c 	.word	0x2401080c

0800b99c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d07b      	beq.n	800ba9e <tcp_parseopt+0x102>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b9a6:	4b4b      	ldr	r3, [pc, #300]	; (800bad4 <tcp_parseopt+0x138>)
 800b9a8:	8818      	ldrh	r0, [r3, #0]
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d03c      	beq.n	800ba28 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9ae:	4b4a      	ldr	r3, [pc, #296]	; (800bad8 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800baf0 <tcp_parseopt+0x154>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b9b6:	f240 5ab3 	movw	sl, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9ba:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b9be:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9c0:	4b46      	ldr	r3, [pc, #280]	; (800badc <tcp_parseopt+0x140>)
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b9c2:	f240 59b4 	movw	r9, #1460	; 0x5b4
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b9c6:	fa5f f78e 	uxtb.w	r7, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b9ca:	f8a8 2000 	strh.w	r2, [r8]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9ce:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b9d0:	4b43      	ldr	r3, [pc, #268]	; (800bae0 <tcp_parseopt+0x144>)
 800b9d2:	681e      	ldr	r6, [r3, #0]
 800b9d4:	f101 0c14 	add.w	ip, r1, #20
 800b9d8:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b9da:	4288      	cmp	r0, r1
  u16_t optidx = tcp_optidx++;
 800b9dc:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b9e0:	d96b      	bls.n	800baba <tcp_parseopt+0x11e>
  u16_t optidx = tcp_optidx++;
 800b9e2:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9e4:	b1b4      	cbz	r4, 800ba14 <tcp_parseopt+0x78>
 800b9e6:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 800b9e8:	eba3 0207 	sub.w	r2, r3, r7
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9ec:	d812      	bhi.n	800ba14 <tcp_parseopt+0x78>
    return tcphdr_opt2[idx];
 800b9ee:	3a01      	subs	r2, #1
 800b9f0:	b2d2      	uxtb	r2, r2
 800b9f2:	5ca2      	ldrb	r2, [r4, r2]
      switch (opt) {
 800b9f4:	2a01      	cmp	r2, #1
 800b9f6:	d011      	beq.n	800ba1c <tcp_parseopt+0x80>
 800b9f8:	2a02      	cmp	r2, #2
 800b9fa:	d017      	beq.n	800ba2c <tcp_parseopt+0x90>
 800b9fc:	b192      	cbz	r2, 800ba24 <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b9fe:	b10c      	cbz	r4, 800ba04 <tcp_parseopt+0x68>
 800ba00:	4573      	cmp	r3, lr
 800ba02:	d23d      	bcs.n	800ba80 <tcp_parseopt+0xe4>
    return opts[optidx];
 800ba04:	4433      	add	r3, r6
 800ba06:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d95e      	bls.n	800baca <tcp_parseopt+0x12e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ba0c:	440b      	add	r3, r1
 800ba0e:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ba10:	2201      	movs	r2, #1
 800ba12:	e7df      	b.n	800b9d4 <tcp_parseopt+0x38>
    return opts[optidx];
 800ba14:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 800ba18:	2a01      	cmp	r2, #1
 800ba1a:	d1ed      	bne.n	800b9f8 <tcp_parseopt+0x5c>
 800ba1c:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 800ba20:	4619      	mov	r1, r3
 800ba22:	e7da      	b.n	800b9da <tcp_parseopt+0x3e>
 800ba24:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
  }
}
 800ba28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t optidx = tcp_optidx++;
 800ba2c:	1c8a      	adds	r2, r1, #2
 800ba2e:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba30:	b10c      	cbz	r4, 800ba36 <tcp_parseopt+0x9a>
 800ba32:	4573      	cmp	r3, lr
 800ba34:	d220      	bcs.n	800ba78 <tcp_parseopt+0xdc>
    return opts[optidx];
 800ba36:	4433      	add	r3, r6
 800ba38:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	d142      	bne.n	800bac4 <tcp_parseopt+0x128>
 800ba3e:	1c53      	adds	r3, r2, #1
 800ba40:	4283      	cmp	r3, r0
 800ba42:	da3f      	bge.n	800bac4 <tcp_parseopt+0x128>
  u16_t optidx = tcp_optidx++;
 800ba44:	1ccb      	adds	r3, r1, #3
 800ba46:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba48:	2c00      	cmp	r4, #0
 800ba4a:	d030      	beq.n	800baae <tcp_parseopt+0x112>
 800ba4c:	4596      	cmp	lr, r2
 800ba4e:	d81b      	bhi.n	800ba88 <tcp_parseopt+0xec>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba50:	1bd2      	subs	r2, r2, r7
  u16_t optidx = tcp_optidx++;
 800ba52:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba54:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 800ba56:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 800ba58:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ba5a:	5ca2      	ldrb	r2, [r4, r2]
 800ba5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba60:	d81a      	bhi.n	800ba98 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba62:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 800ba68:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ba6a:	1e5a      	subs	r2, r3, #1
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	4552      	cmp	r2, sl
 800ba70:	bf88      	it	hi
 800ba72:	464b      	movhi	r3, r9
 800ba74:	866b      	strh	r3, [r5, #50]	; 0x32
          break;
 800ba76:	e7cb      	b.n	800ba10 <tcp_parseopt+0x74>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba78:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	5ce3      	ldrb	r3, [r4, r3]
 800ba7e:	e7dc      	b.n	800ba3a <tcp_parseopt+0x9e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba80:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	5ce3      	ldrb	r3, [r4, r3]
 800ba86:	e7bf      	b.n	800ba08 <tcp_parseopt+0x6c>
    return opts[optidx];
 800ba88:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800ba8a:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba8c:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ba8e:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800ba90:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ba92:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba96:	d9e4      	bls.n	800ba62 <tcp_parseopt+0xc6>
    return opts[optidx];
 800ba98:	4433      	add	r3, r6
 800ba9a:	7d1b      	ldrb	r3, [r3, #20]
 800ba9c:	e7e4      	b.n	800ba68 <tcp_parseopt+0xcc>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ba9e:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <tcp_parseopt+0x148>)
 800baa0:	f240 727d 	movw	r2, #1917	; 0x77d
 800baa4:	4910      	ldr	r1, [pc, #64]	; (800bae8 <tcp_parseopt+0x14c>)
 800baa6:	4811      	ldr	r0, [pc, #68]	; (800baec <tcp_parseopt+0x150>)
 800baa8:	f003 fd8a 	bl	800f5c0 <iprintf>
 800baac:	e77b      	b.n	800b9a6 <tcp_parseopt+0xa>
    return opts[optidx];
 800baae:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800bab0:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bab2:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800bab4:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bab6:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bab8:	e7ee      	b.n	800ba98 <tcp_parseopt+0xfc>
 800baba:	2a00      	cmp	r2, #0
 800babc:	d0b4      	beq.n	800ba28 <tcp_parseopt+0x8c>
 800babe:	f8a8 1000 	strh.w	r1, [r8]
 800bac2:	e7b1      	b.n	800ba28 <tcp_parseopt+0x8c>
 800bac4:	f8a8 2000 	strh.w	r2, [r8]
 800bac8:	e7ae      	b.n	800ba28 <tcp_parseopt+0x8c>
  u16_t optidx = tcp_optidx++;
 800baca:	3102      	adds	r1, #2
 800bacc:	f8a8 1000 	strh.w	r1, [r8]
 800bad0:	e7aa      	b.n	800ba28 <tcp_parseopt+0x8c>
 800bad2:	bf00      	nop
 800bad4:	24010840 	.word	0x24010840
 800bad8:	24010838 	.word	0x24010838
 800badc:	2401083c 	.word	0x2401083c
 800bae0:	24010834 	.word	0x24010834
 800bae4:	0801129c 	.word	0x0801129c
 800bae8:	0801148c 	.word	0x0801148c
 800baec:	08010440 	.word	0x08010440
 800baf0:	24010830 	.word	0x24010830

0800baf4 <tcp_input>:
{
 800baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf8:	4604      	mov	r4, r0
 800bafa:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800bafc:	f7fa fa0c 	bl	8005f18 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bb00:	2c00      	cmp	r4, #0
 800bb02:	f000 80d6 	beq.w	800bcb2 <tcp_input+0x1be>
  if (p->len < TCP_HLEN) {
 800bb06:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb08:	4e6d      	ldr	r6, [pc, #436]	; (800bcc0 <tcp_input+0x1cc>)
 800bb0a:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800bb0c:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb0e:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800bb10:	d805      	bhi.n	800bb1e <tcp_input+0x2a>
  pbuf_free(p);
 800bb12:	4620      	mov	r0, r4
}
 800bb14:	b007      	add	sp, #28
 800bb16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800bb1a:	f7fd bed3 	b.w	80098c4 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb1e:	4f69      	ldr	r7, [pc, #420]	; (800bcc4 <tcp_input+0x1d0>)
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6978      	ldr	r0, [r7, #20]
 800bb24:	f002 fd8e 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800bb28:	4605      	mov	r5, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d1f1      	bne.n	800bb12 <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb34:	2be0      	cmp	r3, #224	; 0xe0
 800bb36:	d0ec      	beq.n	800bb12 <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bb38:	6833      	ldr	r3, [r6, #0]
 800bb3a:	8998      	ldrh	r0, [r3, #12]
 800bb3c:	f7fc ff20 	bl	8008980 <lwip_htons>
 800bb40:	0a80      	lsrs	r0, r0, #10
 800bb42:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bb46:	2913      	cmp	r1, #19
 800bb48:	d9e3      	bls.n	800bb12 <tcp_input+0x1e>
 800bb4a:	8923      	ldrh	r3, [r4, #8]
 800bb4c:	b28a      	uxth	r2, r1
 800bb4e:	428b      	cmp	r3, r1
 800bb50:	d3df      	bcc.n	800bb12 <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bb52:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800bb56:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bb58:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800bcf8 <tcp_input+0x204>
 800bb5c:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800bb5e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800bcfc <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800bb62:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bb64:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800bb68:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800bb6c:	f080 819a 	bcs.w	800bea4 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 836e 	beq.w	800c254 <tcp_input+0x760>
    pbuf_remove_header(p, TCP_HLEN);
 800bb78:	2114      	movs	r1, #20
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f7fd fe36 	bl	80097ec <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800bb80:	8965      	ldrh	r5, [r4, #10]
 800bb82:	4b51      	ldr	r3, [pc, #324]	; (800bcc8 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800bb84:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bb86:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800bb8a:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800bb8c:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800bb8e:	f7fd fe2d 	bl	80097ec <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bb92:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800bb96:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bb98:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800bb9c:	8943      	ldrh	r3, [r0, #10]
 800bb9e:	454b      	cmp	r3, r9
 800bba0:	d3b7      	bcc.n	800bb12 <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bba2:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800bba4:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bba6:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800bbaa:	f7fd fe1f 	bl	80097ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bbae:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bbb0:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bbb2:	442b      	add	r3, r5
 800bbb4:	eba3 030a 	sub.w	r3, r3, sl
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	f040 8350 	bne.w	800c262 <tcp_input+0x76e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bbc2:	6822      	ldr	r2, [r4, #0]
 800bbc4:	8912      	ldrh	r2, [r2, #8]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d005      	beq.n	800bbd6 <tcp_input+0xe2>
 800bbca:	4b40      	ldr	r3, [pc, #256]	; (800bccc <tcp_input+0x1d8>)
 800bbcc:	22e0      	movs	r2, #224	; 0xe0
 800bbce:	4940      	ldr	r1, [pc, #256]	; (800bcd0 <tcp_input+0x1dc>)
 800bbd0:	4840      	ldr	r0, [pc, #256]	; (800bcd4 <tcp_input+0x1e0>)
 800bbd2:	f003 fcf5 	bl	800f5c0 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bbd6:	6835      	ldr	r5, [r6, #0]
 800bbd8:	8828      	ldrh	r0, [r5, #0]
 800bbda:	f7fc fed1 	bl	8008980 <lwip_htons>
 800bbde:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bbe0:	6835      	ldr	r5, [r6, #0]
 800bbe2:	8868      	ldrh	r0, [r5, #2]
 800bbe4:	f7fc fecc 	bl	8008980 <lwip_htons>
 800bbe8:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bbea:	6835      	ldr	r5, [r6, #0]
 800bbec:	6868      	ldr	r0, [r5, #4]
 800bbee:	f7fc fecb 	bl	8008988 <lwip_htonl>
 800bbf2:	4b39      	ldr	r3, [pc, #228]	; (800bcd8 <tcp_input+0x1e4>)
 800bbf4:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bbf6:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bbf8:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bbfa:	68a8      	ldr	r0, [r5, #8]
 800bbfc:	f7fc fec4 	bl	8008988 <lwip_htonl>
 800bc00:	4b36      	ldr	r3, [pc, #216]	; (800bcdc <tcp_input+0x1e8>)
 800bc02:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc04:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bc06:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc08:	89e8      	ldrh	r0, [r5, #14]
 800bc0a:	f7fc feb9 	bl	8008980 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800bc0e:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc10:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800bc12:	8998      	ldrh	r0, [r3, #12]
 800bc14:	f7fc feb4 	bl	8008980 <lwip_htons>
 800bc18:	4931      	ldr	r1, [pc, #196]	; (800bce0 <tcp_input+0x1ec>)
 800bc1a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800bc1e:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800bc20:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bc22:	0783      	lsls	r3, r0, #30
 800bc24:	f040 8144 	bne.w	800beb0 <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800bc28:	4b2e      	ldr	r3, [pc, #184]	; (800bce4 <tcp_input+0x1f0>)
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc2e:	4b2e      	ldr	r3, [pc, #184]	; (800bce8 <tcp_input+0x1f4>)
 800bc30:	681d      	ldr	r5, [r3, #0]
 800bc32:	2d00      	cmp	r5, #0
 800bc34:	f000 80e5 	beq.w	800be02 <tcp_input+0x30e>
  prev = NULL;
 800bc38:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bc3c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800bccc <tcp_input+0x1d8>
 800bc40:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800bd00 <tcp_input+0x20c>
 800bc44:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bcd4 <tcp_input+0x1e0>
 800bc48:	e017      	b.n	800bc7a <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bc4a:	2b0a      	cmp	r3, #10
 800bc4c:	d021      	beq.n	800bc92 <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d028      	beq.n	800bca4 <tcp_input+0x1b0>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc52:	7a2a      	ldrb	r2, [r5, #8]
 800bc54:	b132      	cbz	r2, 800bc64 <tcp_input+0x170>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc5c:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d104      	bne.n	800bc6e <tcp_input+0x17a>
    if (pcb->remote_port == tcphdr->src &&
 800bc64:	6833      	ldr	r3, [r6, #0]
 800bc66:	8b29      	ldrh	r1, [r5, #24]
 800bc68:	881a      	ldrh	r2, [r3, #0]
 800bc6a:	4291      	cmp	r1, r2
 800bc6c:	d04a      	beq.n	800bd04 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6e:	68eb      	ldr	r3, [r5, #12]
 800bc70:	46a8      	mov	r8, r5
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f000 80c5 	beq.w	800be02 <tcp_input+0x30e>
 800bc78:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bc7a:	7d2b      	ldrb	r3, [r5, #20]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1e4      	bne.n	800bc4a <tcp_input+0x156>
 800bc80:	4653      	mov	r3, sl
 800bc82:	22fb      	movs	r2, #251	; 0xfb
 800bc84:	4659      	mov	r1, fp
 800bc86:	4648      	mov	r0, r9
 800bc88:	f003 fc9a 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bc8c:	7d2b      	ldrb	r3, [r5, #20]
 800bc8e:	2b0a      	cmp	r3, #10
 800bc90:	d1dd      	bne.n	800bc4e <tcp_input+0x15a>
 800bc92:	4653      	mov	r3, sl
 800bc94:	22fc      	movs	r2, #252	; 0xfc
 800bc96:	4915      	ldr	r1, [pc, #84]	; (800bcec <tcp_input+0x1f8>)
 800bc98:	4648      	mov	r0, r9
 800bc9a:	f003 fc91 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bc9e:	7d2b      	ldrb	r3, [r5, #20]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d1d6      	bne.n	800bc52 <tcp_input+0x15e>
 800bca4:	4653      	mov	r3, sl
 800bca6:	22fd      	movs	r2, #253	; 0xfd
 800bca8:	4911      	ldr	r1, [pc, #68]	; (800bcf0 <tcp_input+0x1fc>)
 800bcaa:	4648      	mov	r0, r9
 800bcac:	f003 fc88 	bl	800f5c0 <iprintf>
 800bcb0:	e7cf      	b.n	800bc52 <tcp_input+0x15e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bcb2:	4b06      	ldr	r3, [pc, #24]	; (800bccc <tcp_input+0x1d8>)
 800bcb4:	2283      	movs	r2, #131	; 0x83
 800bcb6:	490f      	ldr	r1, [pc, #60]	; (800bcf4 <tcp_input+0x200>)
 800bcb8:	4806      	ldr	r0, [pc, #24]	; (800bcd4 <tcp_input+0x1e0>)
 800bcba:	f003 fc81 	bl	800f5c0 <iprintf>
 800bcbe:	e722      	b.n	800bb06 <tcp_input+0x12>
 800bcc0:	24010834 	.word	0x24010834
 800bcc4:	24009d28 	.word	0x24009d28
 800bcc8:	24010838 	.word	0x24010838
 800bccc:	0801129c 	.word	0x0801129c
 800bcd0:	080114dc 	.word	0x080114dc
 800bcd4:	08010440 	.word	0x08010440
 800bcd8:	24010828 	.word	0x24010828
 800bcdc:	24010804 	.word	0x24010804
 800bce0:	24010808 	.word	0x24010808
 800bce4:	24010842 	.word	0x24010842
 800bce8:	240107e8 	.word	0x240107e8
 800bcec:	08011524 	.word	0x08011524
 800bcf0:	08011550 	.word	0x08011550
 800bcf4:	080114a8 	.word	0x080114a8
 800bcf8:	24010840 	.word	0x24010840
 800bcfc:	2401083c 	.word	0x2401083c
 800bd00:	080114fc 	.word	0x080114fc
    if (pcb->remote_port == tcphdr->src &&
 800bd04:	885b      	ldrh	r3, [r3, #2]
 800bd06:	8aea      	ldrh	r2, [r5, #22]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d1b0      	bne.n	800bc6e <tcp_input+0x17a>
        pcb->local_port == tcphdr->dest &&
 800bd0c:	686a      	ldr	r2, [r5, #4]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d1ac      	bne.n	800bc6e <tcp_input+0x17a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd14:	682a      	ldr	r2, [r5, #0]
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d1a8      	bne.n	800bc6e <tcp_input+0x17a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bd1c:	68eb      	ldr	r3, [r5, #12]
 800bd1e:	42ab      	cmp	r3, r5
 800bd20:	f000 8405 	beq.w	800c52e <tcp_input+0xa3a>
      if (prev != NULL) {
 800bd24:	f1b8 0f00 	cmp.w	r8, #0
 800bd28:	d009      	beq.n	800bd3e <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800bd2a:	4a6e      	ldr	r2, [pc, #440]	; (800bee4 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800bd2c:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800bd30:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800bd32:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800bd34:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bd36:	68eb      	ldr	r3, [r5, #12]
 800bd38:	42ab      	cmp	r3, r5
 800bd3a:	f000 8432 	beq.w	800c5a2 <tcp_input+0xaae>
    inseg.next = NULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4f69      	ldr	r7, [pc, #420]	; (800bee8 <tcp_input+0x3f4>)
    recv_data = NULL;
 800bd42:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf04 <tcp_input+0x410>
    recv_flags = 0;
 800bd46:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800bf08 <tcp_input+0x414>
    recv_acked = 0;
 800bd4a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800bf0c <tcp_input+0x418>
    inseg.len = p->tot_len;
 800bd4e:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800bd50:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800bd52:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800bd56:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800bd5a:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800bd5e:	4b63      	ldr	r3, [pc, #396]	; (800beec <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800bd60:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800bd62:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800bd64:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800bd66:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800bd68:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800bd6a:	071a      	lsls	r2, r3, #28
 800bd6c:	d503      	bpl.n	800bd76 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800bd6e:	7b62      	ldrb	r2, [r4, #13]
 800bd70:	f042 0201 	orr.w	r2, r2, #1
 800bd74:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800bd76:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800bd78:	b172      	cbz	r2, 800bd98 <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f7fe ff6e 	bl	800ac5c <tcp_process_refused_data>
 800bd80:	300d      	adds	r0, #13
 800bd82:	f000 8276 	beq.w	800c272 <tcp_input+0x77e>
 800bd86:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800bd88:	b123      	cbz	r3, 800bd94 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd8a:	9b05      	ldr	r3, [sp, #20]
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f040 826f 	bne.w	800c272 <tcp_input+0x77e>
  if (flags & TCP_RST) {
 800bd94:	4b55      	ldr	r3, [pc, #340]	; (800beec <tcp_input+0x3f8>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800bd98:	4c55      	ldr	r4, [pc, #340]	; (800bef0 <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800bd9a:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 800bd9c:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800bd9e:	f140 814a 	bpl.w	800c036 <tcp_input+0x542>
    if (pcb->state == SYN_SENT) {
 800bda2:	7d29      	ldrb	r1, [r5, #20]
 800bda4:	2902      	cmp	r1, #2
 800bda6:	f000 8331 	beq.w	800c40c <tcp_input+0x918>
      if (seqno == pcb->rcv_nxt) {
 800bdaa:	4b52      	ldr	r3, [pc, #328]	; (800bef4 <tcp_input+0x400>)
 800bdac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	f000 8415 	beq.w	800c5e0 <tcp_input+0xaec>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bdb6:	1a9b      	subs	r3, r3, r2
 800bdb8:	d404      	bmi.n	800bdc4 <tcp_input+0x2d0>
 800bdba:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800bdbc:	1a9b      	subs	r3, r3, r2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f340 831f 	ble.w	800c402 <tcp_input+0x90e>
      if (recv_flags & TF_RESET) {
 800bdc4:	f899 3000 	ldrb.w	r3, [r9]
 800bdc8:	0718      	lsls	r0, r3, #28
 800bdca:	f140 8258 	bpl.w	800c27e <tcp_input+0x78a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bdce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800bdd2:	b11b      	cbz	r3, 800bddc <tcp_input+0x2e8>
 800bdd4:	f06f 010d 	mvn.w	r1, #13
 800bdd8:	6928      	ldr	r0, [r5, #16]
 800bdda:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bddc:	4841      	ldr	r0, [pc, #260]	; (800bee4 <tcp_input+0x3f0>)
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7fe fbfe 	bl	800a5e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800bde4:	4628      	mov	r0, r5
 800bde6:	f7fe f81f 	bl	8009e28 <tcp_free>
    tcp_input_pcb = NULL;
 800bdea:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800bdec:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800bdee:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800bdf0:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800bdf4:	b110      	cbz	r0, 800bdfc <tcp_input+0x308>
      pbuf_free(inseg.p);
 800bdf6:	f7fd fd65 	bl	80098c4 <pbuf_free>
      inseg.p = NULL;
 800bdfa:	607d      	str	r5, [r7, #4]
}
 800bdfc:	b007      	add	sp, #28
 800bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be02:	4b3d      	ldr	r3, [pc, #244]	; (800bef8 <tcp_input+0x404>)
 800be04:	681d      	ldr	r5, [r3, #0]
 800be06:	2d00      	cmp	r5, #0
 800be08:	d05b      	beq.n	800bec2 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be0a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800bf10 <tcp_input+0x41c>
 800be0e:	f8df b104 	ldr.w	fp, [pc, #260]	; 800bf14 <tcp_input+0x420>
 800be12:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800bf18 <tcp_input+0x424>
 800be16:	e002      	b.n	800be1e <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be18:	68ed      	ldr	r5, [r5, #12]
 800be1a:	2d00      	cmp	r5, #0
 800be1c:	d051      	beq.n	800bec2 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be1e:	7d2b      	ldrb	r3, [r5, #20]
 800be20:	2b0a      	cmp	r3, #10
 800be22:	4643      	mov	r3, r8
 800be24:	d005      	beq.n	800be32 <tcp_input+0x33e>
 800be26:	f240 121f 	movw	r2, #287	; 0x11f
 800be2a:	4659      	mov	r1, fp
 800be2c:	4648      	mov	r0, r9
 800be2e:	f003 fbc7 	bl	800f5c0 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be32:	7a2a      	ldrb	r2, [r5, #8]
 800be34:	b132      	cbz	r2, 800be44 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be3c:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	429a      	cmp	r2, r3
 800be42:	d1e9      	bne.n	800be18 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800be44:	6832      	ldr	r2, [r6, #0]
 800be46:	8b2b      	ldrh	r3, [r5, #24]
 800be48:	8811      	ldrh	r1, [r2, #0]
 800be4a:	428b      	cmp	r3, r1
 800be4c:	d1e4      	bne.n	800be18 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800be4e:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800be50:	8ae8      	ldrh	r0, [r5, #22]
 800be52:	4290      	cmp	r0, r2
 800be54:	d1e0      	bne.n	800be18 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800be56:	6869      	ldr	r1, [r5, #4]
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	4291      	cmp	r1, r2
 800be5c:	d1dc      	bne.n	800be18 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be5e:	6829      	ldr	r1, [r5, #0]
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	4291      	cmp	r1, r2
 800be64:	d1d8      	bne.n	800be18 <tcp_input+0x324>
  if (flags & TCP_RST) {
 800be66:	4a21      	ldr	r2, [pc, #132]	; (800beec <tcp_input+0x3f8>)
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	0757      	lsls	r7, r2, #29
 800be6c:	f53f ae51 	bmi.w	800bb12 <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800be70:	0796      	lsls	r6, r2, #30
 800be72:	f140 83aa 	bpl.w	800c5ca <tcp_input+0xad6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800be76:	4a1f      	ldr	r2, [pc, #124]	; (800bef4 <tcp_input+0x400>)
 800be78:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800be7a:	6812      	ldr	r2, [r2, #0]
 800be7c:	1a51      	subs	r1, r2, r1
 800be7e:	d404      	bmi.n	800be8a <tcp_input+0x396>
 800be80:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800be82:	1b89      	subs	r1, r1, r6
 800be84:	2900      	cmp	r1, #0
 800be86:	f340 83b6 	ble.w	800c5f6 <tcp_input+0xb02>
  if ((tcplen > 0)) {
 800be8a:	9b05      	ldr	r3, [sp, #20]
 800be8c:	881b      	ldrh	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f43f ae3f 	beq.w	800bb12 <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800be94:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800be96:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800be98:	f043 0302 	orr.w	r3, r3, #2
 800be9c:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800be9e:	f001 f813 	bl	800cec8 <tcp_output>
        pbuf_free(p);
 800bea2:	e636      	b.n	800bb12 <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800bea4:	4a15      	ldr	r2, [pc, #84]	; (800befc <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bea6:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800bea8:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800beaa:	f7fd fc9f 	bl	80097ec <pbuf_remove_header>
 800beae:	e692      	b.n	800bbd6 <tcp_input+0xe2>
    tcplen++;
 800beb0:	1c53      	adds	r3, r2, #1
 800beb2:	4913      	ldr	r1, [pc, #76]	; (800bf00 <tcp_input+0x40c>)
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800beb8:	429a      	cmp	r2, r3
    tcplen++;
 800beba:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800bebc:	f67f aeb7 	bls.w	800bc2e <tcp_input+0x13a>
 800bec0:	e627      	b.n	800bb12 <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bec2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800bf1c <tcp_input+0x428>
 800bec6:	f8d9 8000 	ldr.w	r8, [r9]
 800beca:	f1b8 0f00 	cmp.w	r8, #0
 800bece:	f000 8226 	beq.w	800c31e <tcp_input+0x82a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bed2:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bed6:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800bed8:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800beda:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bedc:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800bee0:	e024      	b.n	800bf2c <tcp_input+0x438>
 800bee2:	bf00      	nop
 800bee4:	240107e8 	.word	0x240107e8
 800bee8:	2401080c 	.word	0x2401080c
 800beec:	24010808 	.word	0x24010808
 800bef0:	2401082c 	.word	0x2401082c
 800bef4:	24010828 	.word	0x24010828
 800bef8:	24010800 	.word	0x24010800
 800befc:	24010838 	.word	0x24010838
 800bf00:	24010842 	.word	0x24010842
 800bf04:	24010820 	.word	0x24010820
 800bf08:	24010824 	.word	0x24010824
 800bf0c:	2401081c 	.word	0x2401081c
 800bf10:	0801129c 	.word	0x0801129c
 800bf14:	080115d0 	.word	0x080115d0
 800bf18:	08010440 	.word	0x08010440
 800bf1c:	240107f4 	.word	0x240107f4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf20:	68eb      	ldr	r3, [r5, #12]
 800bf22:	4629      	mov	r1, r5
 800bf24:	461d      	mov	r5, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f000 81fa 	beq.w	800c320 <tcp_input+0x82c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bf2c:	7a2a      	ldrb	r2, [r5, #8]
 800bf2e:	b12a      	cbz	r2, 800bf3c <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf30:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800bf34:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d1f1      	bne.n	800bf20 <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 800bf3c:	8aea      	ldrh	r2, [r5, #22]
 800bf3e:	8843      	ldrh	r3, [r0, #2]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d1ed      	bne.n	800bf20 <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bf44:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bf46:	b10a      	cbz	r2, 800bf4c <tcp_input+0x458>
 800bf48:	4572      	cmp	r2, lr
 800bf4a:	d1e9      	bne.n	800bf20 <tcp_input+0x42c>
      if (prev != NULL) {
 800bf4c:	b129      	cbz	r1, 800bf5a <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bf4e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bf50:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bf54:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bf56:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 800bf5a:	4aa8      	ldr	r2, [pc, #672]	; (800c1fc <tcp_input+0x708>)
 800bf5c:	7812      	ldrb	r2, [r2, #0]
 800bf5e:	0751      	lsls	r1, r2, #29
 800bf60:	f53f add7 	bmi.w	800bb12 <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800bf64:	f012 0810 	ands.w	r8, r2, #16
 800bf68:	f040 8266 	bne.w	800c438 <tcp_input+0x944>
  } else if (flags & TCP_SYN) {
 800bf6c:	0790      	lsls	r0, r2, #30
 800bf6e:	f57f add0 	bpl.w	800bb12 <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800bf72:	7d68      	ldrb	r0, [r5, #21]
 800bf74:	f7fe fcc4 	bl	800a900 <tcp_alloc>
    if (npcb == NULL) {
 800bf78:	4681      	mov	r9, r0
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	f000 82c6 	beq.w	800c50c <tcp_input+0xa18>
    npcb->rcv_nxt = seqno + 1;
 800bf80:	4b9f      	ldr	r3, [pc, #636]	; (800c200 <tcp_input+0x70c>)
    npcb->remote_port = tcphdr->src;
 800bf82:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 800bf84:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800bf86:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800bf88:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800bf8a:	7849      	ldrb	r1, [r1, #1]
 800bf8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800bf90:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800bf92:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bf94:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bf96:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800bf98:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bf9a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bf9c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800bf9e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bfa0:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800bfa6:	f7fe fef1 	bl	800ad8c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bfaa:	4b95      	ldr	r3, [pc, #596]	; (800c200 <tcp_input+0x70c>)
    npcb->snd_nxt = iss;
 800bfac:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bfb0:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800bfb2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bfb6:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 800bfb8:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 800bfbc:	4a91      	ldr	r2, [pc, #580]	; (800c204 <tcp_input+0x710>)
    npcb->snd_wl2 = iss;
 800bfbe:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bfc2:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 800bfc4:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800bfc8:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bfcc:	7a6b      	ldrb	r3, [r5, #9]
 800bfce:	f003 030c 	and.w	r3, r3, #12
 800bfd2:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bfd6:	7a2b      	ldrb	r3, [r5, #8]
 800bfd8:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800bfdc:	6813      	ldr	r3, [r2, #0]
 800bfde:	f8c2 9000 	str.w	r9, [r2]
 800bfe2:	f8c9 300c 	str.w	r3, [r9, #12]
 800bfe6:	f001 fa93 	bl	800d510 <tcp_timer_needed>
 800bfea:	4b87      	ldr	r3, [pc, #540]	; (800c208 <tcp_input+0x714>)
 800bfec:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800bfee:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800bff0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bff2:	f7ff fcd3 	bl	800b99c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bff6:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bff8:	f109 0204 	add.w	r2, r9, #4
 800bffc:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800c000:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c002:	4610      	mov	r0, r2
 800c004:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800c006:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c00a:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c00e:	f002 f971 	bl	800e2f4 <ip4_route>
 800c012:	9a05      	ldr	r2, [sp, #20]
 800c014:	4601      	mov	r1, r0
 800c016:	4628      	mov	r0, r5
 800c018:	f7fe fed4 	bl	800adc4 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c01c:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c01e:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c022:	4648      	mov	r0, r9
 800c024:	f000 fd34 	bl	800ca90 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800c028:	2800      	cmp	r0, #0
 800c02a:	f040 827a 	bne.w	800c522 <tcp_input+0xa2e>
    tcp_output(npcb);
 800c02e:	4648      	mov	r0, r9
 800c030:	f000 ff4a 	bl	800cec8 <tcp_output>
 800c034:	e56d      	b.n	800bb12 <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c036:	079a      	lsls	r2, r3, #30
 800c038:	d504      	bpl.n	800c044 <tcp_input+0x550>
 800c03a:	7d2b      	ldrb	r3, [r5, #20]
 800c03c:	3b02      	subs	r3, #2
 800c03e:	2b01      	cmp	r3, #1
 800c040:	f200 81df 	bhi.w	800c402 <tcp_input+0x90e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c044:	8b6b      	ldrh	r3, [r5, #26]
 800c046:	06db      	lsls	r3, r3, #27
 800c048:	d402      	bmi.n	800c050 <tcp_input+0x55c>
    pcb->tmr = tcp_ticks;
 800c04a:	4b70      	ldr	r3, [pc, #448]	; (800c20c <tcp_input+0x718>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800c050:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800c052:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800c054:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 800c058:	f7ff fca0 	bl	800b99c <tcp_parseopt>
  switch (pcb->state) {
 800c05c:	7d2b      	ldrb	r3, [r5, #20]
 800c05e:	3b02      	subs	r3, #2
 800c060:	2b07      	cmp	r3, #7
 800c062:	f63f aeaf 	bhi.w	800bdc4 <tcp_input+0x2d0>
 800c066:	e8df f003 	tbb	[pc, r3]
 800c06a:	1334      	.short	0x1334
 800c06c:	04748f04 	.word	0x04748f04
 800c070:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800c072:	4628      	mov	r0, r5
 800c074:	f7fe fff6 	bl	800b064 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c078:	f899 3000 	ldrb.w	r3, [r9]
 800c07c:	069e      	lsls	r6, r3, #26
 800c07e:	f57f aea1 	bpl.w	800bdc4 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800c082:	8b6b      	ldrh	r3, [r5, #26]
 800c084:	f043 0302 	orr.w	r3, r3, #2
 800c088:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800c08a:	2307      	movs	r3, #7
 800c08c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800c08e:	e699      	b.n	800bdc4 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800c090:	4b5a      	ldr	r3, [pc, #360]	; (800c1fc <tcp_input+0x708>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	06d9      	lsls	r1, r3, #27
 800c096:	f140 820d 	bpl.w	800c4b4 <tcp_input+0x9c0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c09a:	4b5d      	ldr	r3, [pc, #372]	; (800c210 <tcp_input+0x71c>)
 800c09c:	6819      	ldr	r1, [r3, #0]
 800c09e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c0a0:	43db      	mvns	r3, r3
 800c0a2:	42cb      	cmn	r3, r1
 800c0a4:	d404      	bmi.n	800c0b0 <tcp_input+0x5bc>
 800c0a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c0a8:	1acb      	subs	r3, r1, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f340 824d 	ble.w	800c54a <tcp_input+0xa56>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0b0:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0b2:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0b4:	8810      	ldrh	r0, [r2, #0]
 800c0b6:	4a52      	ldr	r2, [pc, #328]	; (800c200 <tcp_input+0x70c>)
 800c0b8:	6812      	ldr	r2, [r2, #0]
 800c0ba:	4402      	add	r2, r0
 800c0bc:	8818      	ldrh	r0, [r3, #0]
 800c0be:	9002      	str	r0, [sp, #8]
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	885b      	ldrh	r3, [r3, #2]
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	4b53      	ldr	r3, [pc, #332]	; (800c214 <tcp_input+0x720>)
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	f000 fe82 	bl	800cdd4 <tcp_rst>
    if (err != ERR_ABRT) {
 800c0d0:	e678      	b.n	800bdc4 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c0d2:	4b4a      	ldr	r3, [pc, #296]	; (800c1fc <tcp_input+0x708>)
 800c0d4:	781a      	ldrb	r2, [r3, #0]
 800c0d6:	f002 0312 	and.w	r3, r2, #18
 800c0da:	2b12      	cmp	r3, #18
 800c0dc:	f000 813a 	beq.w	800c354 <tcp_input+0x860>
      else if (flags & TCP_ACK) {
 800c0e0:	06d0      	lsls	r0, r2, #27
 800c0e2:	f57f ae6f 	bpl.w	800bdc4 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0e6:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0e8:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ea:	8811      	ldrh	r1, [r2, #0]
 800c0ec:	4a44      	ldr	r2, [pc, #272]	; (800c200 <tcp_input+0x70c>)
 800c0ee:	8818      	ldrh	r0, [r3, #0]
 800c0f0:	6812      	ldr	r2, [r2, #0]
 800c0f2:	440a      	add	r2, r1
 800c0f4:	4946      	ldr	r1, [pc, #280]	; (800c210 <tcp_input+0x71c>)
 800c0f6:	6809      	ldr	r1, [r1, #0]
 800c0f8:	9002      	str	r0, [sp, #8]
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	885b      	ldrh	r3, [r3, #2]
 800c0fe:	9301      	str	r3, [sp, #4]
 800c100:	4b44      	ldr	r3, [pc, #272]	; (800c214 <tcp_input+0x720>)
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	3304      	adds	r3, #4
 800c106:	f000 fe65 	bl	800cdd4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c10a:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800c10e:	2b05      	cmp	r3, #5
 800c110:	f63f ae58 	bhi.w	800bdc4 <tcp_input+0x2d0>
          pcb->rtime = 0;
 800c114:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800c116:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800c118:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c11a:	f001 f8d5 	bl	800d2c8 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c11e:	e651      	b.n	800bdc4 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800c120:	4628      	mov	r0, r5
 800c122:	f7fe ff9f 	bl	800b064 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c126:	4b35      	ldr	r3, [pc, #212]	; (800c1fc <tcp_input+0x708>)
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	06de      	lsls	r6, r3, #27
 800c12c:	f57f ae4a 	bpl.w	800bdc4 <tcp_input+0x2d0>
 800c130:	4b37      	ldr	r3, [pc, #220]	; (800c210 <tcp_input+0x71c>)
 800c132:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	f47f ae44 	bne.w	800bdc4 <tcp_input+0x2d0>
 800c13c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f47f ae40 	bne.w	800bdc4 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 800c144:	f899 3000 	ldrb.w	r3, [r9]
 800c148:	f043 0310 	orr.w	r3, r3, #16
 800c14c:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800c150:	e638      	b.n	800bdc4 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800c152:	4628      	mov	r0, r5
 800c154:	f7fe ff86 	bl	800b064 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c158:	f899 3000 	ldrb.w	r3, [r9]
 800c15c:	069a      	lsls	r2, r3, #26
 800c15e:	f57f ae31 	bpl.w	800bdc4 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800c162:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800c164:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800c166:	f043 0302 	orr.w	r3, r3, #2
 800c16a:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800c16c:	f7fd ff3c 	bl	8009fe8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c170:	4b24      	ldr	r3, [pc, #144]	; (800c204 <tcp_input+0x710>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	42ab      	cmp	r3, r5
 800c176:	d05e      	beq.n	800c236 <tcp_input+0x742>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d05f      	beq.n	800c23c <tcp_input+0x748>
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	42aa      	cmp	r2, r5
 800c180:	f000 8218 	beq.w	800c5b4 <tcp_input+0xac0>
 800c184:	4613      	mov	r3, r2
 800c186:	e7f7      	b.n	800c178 <tcp_input+0x684>
      tcp_receive(pcb);
 800c188:	4628      	mov	r0, r5
 800c18a:	f7fe ff6b 	bl	800b064 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c18e:	f899 3000 	ldrb.w	r3, [r9]
 800c192:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c196:	4b19      	ldr	r3, [pc, #100]	; (800c1fc <tcp_input+0x708>)
 800c198:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800c19a:	f000 817b 	beq.w	800c494 <tcp_input+0x9a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c19e:	06d8      	lsls	r0, r3, #27
 800c1a0:	d504      	bpl.n	800c1ac <tcp_input+0x6b8>
 800c1a2:	4b1b      	ldr	r3, [pc, #108]	; (800c210 <tcp_input+0x71c>)
 800c1a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d035      	beq.n	800c218 <tcp_input+0x724>
          tcp_ack_now(pcb);
 800c1ac:	8b6b      	ldrh	r3, [r5, #26]
 800c1ae:	f043 0302 	orr.w	r3, r3, #2
 800c1b2:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800c1b8:	e604      	b.n	800bdc4 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f7fe ff52 	bl	800b064 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c1c0:	4b0e      	ldr	r3, [pc, #56]	; (800c1fc <tcp_input+0x708>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	06db      	lsls	r3, r3, #27
 800c1c6:	f57f adfd 	bpl.w	800bdc4 <tcp_input+0x2d0>
 800c1ca:	4b11      	ldr	r3, [pc, #68]	; (800c210 <tcp_input+0x71c>)
 800c1cc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	f47f adf7 	bne.w	800bdc4 <tcp_input+0x2d0>
 800c1d6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f47f adf3 	bne.w	800bdc4 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f7fd ff02 	bl	8009fe8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c1e4:	4b07      	ldr	r3, [pc, #28]	; (800c204 <tcp_input+0x710>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	42ab      	cmp	r3, r5
 800c1ea:	d024      	beq.n	800c236 <tcp_input+0x742>
 800c1ec:	b333      	cbz	r3, 800c23c <tcp_input+0x748>
 800c1ee:	68da      	ldr	r2, [r3, #12]
 800c1f0:	42aa      	cmp	r2, r5
 800c1f2:	f000 81df 	beq.w	800c5b4 <tcp_input+0xac0>
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	e7f8      	b.n	800c1ec <tcp_input+0x6f8>
 800c1fa:	bf00      	nop
 800c1fc:	24010808 	.word	0x24010808
 800c200:	24010828 	.word	0x24010828
 800c204:	240107e8 	.word	0x240107e8
 800c208:	240107ec 	.word	0x240107ec
 800c20c:	240107f8 	.word	0x240107f8
 800c210:	24010804 	.word	0x24010804
 800c214:	24009d38 	.word	0x24009d38
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c218:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1c6      	bne.n	800c1ac <tcp_input+0x6b8>
          tcp_ack_now(pcb);
 800c21e:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800c220:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 800c222:	f043 0302 	orr.w	r3, r3, #2
 800c226:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800c228:	f7fd fede 	bl	8009fe8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c22c:	4bab      	ldr	r3, [pc, #684]	; (800c4dc <tcp_input+0x9e8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	42ab      	cmp	r3, r5
 800c232:	f040 81c2 	bne.w	800c5ba <tcp_input+0xac6>
        TCP_RMV_ACTIVE(pcb);
 800c236:	68eb      	ldr	r3, [r5, #12]
 800c238:	4aa8      	ldr	r2, [pc, #672]	; (800c4dc <tcp_input+0x9e8>)
 800c23a:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c23c:	4ba8      	ldr	r3, [pc, #672]	; (800c4e0 <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 800c23e:	220a      	movs	r2, #10
 800c240:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	601d      	str	r5, [r3, #0]
 800c246:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800c248:	2201      	movs	r2, #1
 800c24a:	4ba6      	ldr	r3, [pc, #664]	; (800c4e4 <tcp_input+0x9f0>)
 800c24c:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c24e:	f001 f95f 	bl	800d510 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c252:	e5b7      	b.n	800bdc4 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c254:	4ba4      	ldr	r3, [pc, #656]	; (800c4e8 <tcp_input+0x9f4>)
 800c256:	22c2      	movs	r2, #194	; 0xc2
 800c258:	49a4      	ldr	r1, [pc, #656]	; (800c4ec <tcp_input+0x9f8>)
 800c25a:	48a5      	ldr	r0, [pc, #660]	; (800c4f0 <tcp_input+0x9fc>)
 800c25c:	f003 f9b0 	bl	800f5c0 <iprintf>
 800c260:	e48a      	b.n	800bb78 <tcp_input+0x84>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c262:	4ba1      	ldr	r3, [pc, #644]	; (800c4e8 <tcp_input+0x9f4>)
 800c264:	22df      	movs	r2, #223	; 0xdf
 800c266:	49a3      	ldr	r1, [pc, #652]	; (800c4f4 <tcp_input+0xa00>)
 800c268:	48a1      	ldr	r0, [pc, #644]	; (800c4f0 <tcp_input+0x9fc>)
 800c26a:	f003 f9a9 	bl	800f5c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c26e:	8923      	ldrh	r3, [r4, #8]
 800c270:	e4a7      	b.n	800bbc2 <tcp_input+0xce>
        if (pcb->rcv_ann_wnd == 0) {
 800c272:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 80da 	beq.w	800c42e <tcp_input+0x93a>
 800c27a:	4c9f      	ldr	r4, [pc, #636]	; (800c4f8 <tcp_input+0xa04>)
 800c27c:	e5b5      	b.n	800bdea <tcp_input+0x2f6>
        if (recv_acked > 0) {
 800c27e:	f8bb 2000 	ldrh.w	r2, [fp]
 800c282:	b15a      	cbz	r2, 800c29c <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c284:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800c288:	b12b      	cbz	r3, 800c296 <tcp_input+0x7a2>
 800c28a:	4629      	mov	r1, r5
 800c28c:	6928      	ldr	r0, [r5, #16]
 800c28e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c290:	300d      	adds	r0, #13
 800c292:	f43f adaa 	beq.w	800bdea <tcp_input+0x2f6>
          recv_acked = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800c29c:	4628      	mov	r0, r5
 800c29e:	f7fe fe43 	bl	800af28 <tcp_input_delayed_close>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f47f ada1 	bne.w	800bdea <tcp_input+0x2f6>
        if (recv_data != NULL) {
 800c2a8:	f8d8 2000 	ldr.w	r2, [r8]
 800c2ac:	b1fa      	cbz	r2, 800c2ee <tcp_input+0x7fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c2ae:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800c2b0:	b143      	cbz	r3, 800c2c4 <tcp_input+0x7d0>
 800c2b2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c2b6:	4b8c      	ldr	r3, [pc, #560]	; (800c4e8 <tcp_input+0x9f4>)
 800c2b8:	4990      	ldr	r1, [pc, #576]	; (800c4fc <tcp_input+0xa08>)
 800c2ba:	488d      	ldr	r0, [pc, #564]	; (800c4f0 <tcp_input+0x9fc>)
 800c2bc:	f003 f980 	bl	800f5c0 <iprintf>
            pbuf_free(recv_data);
 800c2c0:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800c2c4:	8b6b      	ldrh	r3, [r5, #26]
 800c2c6:	f013 0310 	ands.w	r3, r3, #16
 800c2ca:	f040 80dc 	bne.w	800c486 <tcp_input+0x992>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c2ce:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800c2d2:	2e00      	cmp	r6, #0
 800c2d4:	f000 80fc 	beq.w	800c4d0 <tcp_input+0x9dc>
 800c2d8:	4629      	mov	r1, r5
 800c2da:	6928      	ldr	r0, [r5, #16]
 800c2dc:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800c2de:	f110 0f0d 	cmn.w	r0, #13
 800c2e2:	f43f ad82 	beq.w	800bdea <tcp_input+0x2f6>
          if (err != ERR_OK) {
 800c2e6:	b110      	cbz	r0, 800c2ee <tcp_input+0x7fa>
            pcb->refused_data = recv_data;
 800c2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ec:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800c2ee:	f899 3000 	ldrb.w	r3, [r9]
 800c2f2:	0699      	lsls	r1, r3, #26
 800c2f4:	d507      	bpl.n	800c306 <tcp_input+0x812>
          if (pcb->refused_data != NULL) {
 800c2f6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 80af 	beq.w	800c45c <tcp_input+0x968>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c2fe:	7b5a      	ldrb	r2, [r3, #13]
 800c300:	f042 0220 	orr.w	r2, r2, #32
 800c304:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c306:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800c308:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800c30a:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c30c:	f7fe fe0c 	bl	800af28 <tcp_input_delayed_close>
 800c310:	2800      	cmp	r0, #0
 800c312:	f47f ad6a 	bne.w	800bdea <tcp_input+0x2f6>
        tcp_output(pcb);
 800c316:	4628      	mov	r0, r5
 800c318:	f000 fdd6 	bl	800cec8 <tcp_output>
 800c31c:	e565      	b.n	800bdea <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c31e:	6830      	ldr	r0, [r6, #0]
 800c320:	8980      	ldrh	r0, [r0, #12]
 800c322:	f7fc fb2d 	bl	8008980 <lwip_htons>
 800c326:	f010 0004 	ands.w	r0, r0, #4
 800c32a:	f47f abf2 	bne.w	800bb12 <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c32e:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c330:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c332:	8811      	ldrh	r1, [r2, #0]
 800c334:	4a72      	ldr	r2, [pc, #456]	; (800c500 <tcp_input+0xa0c>)
 800c336:	881d      	ldrh	r5, [r3, #0]
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	440a      	add	r2, r1
 800c33c:	4971      	ldr	r1, [pc, #452]	; (800c504 <tcp_input+0xa10>)
 800c33e:	6809      	ldr	r1, [r1, #0]
 800c340:	9502      	str	r5, [sp, #8]
 800c342:	885b      	ldrh	r3, [r3, #2]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	4b70      	ldr	r3, [pc, #448]	; (800c508 <tcp_input+0xa14>)
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	3304      	adds	r3, #4
 800c34c:	f000 fd42 	bl	800cdd4 <tcp_rst>
 800c350:	f7ff bbdf 	b.w	800bb12 <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 800c354:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c356:	496b      	ldr	r1, [pc, #428]	; (800c504 <tcp_input+0xa10>)
 800c358:	3301      	adds	r3, #1
 800c35a:	6809      	ldr	r1, [r1, #0]
 800c35c:	428b      	cmp	r3, r1
 800c35e:	f47f aebf 	bne.w	800c0e0 <tcp_input+0x5ec>
        pcb->lastack = ackno;
 800c362:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c364:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800c366:	4b66      	ldr	r3, [pc, #408]	; (800c500 <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 800c368:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800c36a:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c36c:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800c36e:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c370:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800c372:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c374:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800c376:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c378:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c37a:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c37c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800c37e:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800c382:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c384:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c388:	9205      	str	r2, [sp, #20]
 800c38a:	f001 ffb3 	bl	800e2f4 <ip4_route>
 800c38e:	9a05      	ldr	r2, [sp, #20]
 800c390:	4601      	mov	r1, r0
 800c392:	4630      	mov	r0, r6
 800c394:	f7fe fd16 	bl	800adc4 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c398:	f241 131c 	movw	r3, #4380	; 0x111c
 800c39c:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c39e:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c3a0:	0081      	lsls	r1, r0, #2
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	4616      	mov	r6, r2
 800c3a6:	bf38      	it	cc
 800c3a8:	461e      	movcc	r6, r3
 800c3aa:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800c3ae:	f240 8148 	bls.w	800c642 <tcp_input+0xb4e>
 800c3b2:	b28b      	uxth	r3, r1
 800c3b4:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c3b8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 8138 	beq.w	800c632 <tcp_input+0xb3e>
        --pcb->snd_queuelen;
 800c3c2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 800c3c6:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	f000 812a 	beq.w	800c628 <tcp_input+0xb34>
          pcb->unacked = rseg->next;
 800c3d4:	6833      	ldr	r3, [r6, #0]
 800c3d6:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7fd fdd3 	bl	8009f84 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800c3de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 811d 	beq.w	800c620 <tcp_input+0xb2c>
          pcb->rtime = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 800c3ea:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c3ee:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800c3f2:	b133      	cbz	r3, 800c402 <tcp_input+0x90e>
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	6928      	ldr	r0, [r5, #16]
 800c3fa:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800c3fc:	300d      	adds	r0, #13
 800c3fe:	f43f acf4 	beq.w	800bdea <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 800c402:	8b6b      	ldrh	r3, [r5, #26]
 800c404:	f043 0302 	orr.w	r3, r3, #2
 800c408:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800c40a:	e4db      	b.n	800bdc4 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 800c40c:	4b3d      	ldr	r3, [pc, #244]	; (800c504 <tcp_input+0xa10>)
 800c40e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	429a      	cmp	r2, r3
 800c414:	f47f acd6 	bne.w	800bdc4 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 800c418:	f899 3000 	ldrb.w	r3, [r9]
 800c41c:	f043 0308 	orr.w	r3, r3, #8
 800c420:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c424:	8b6b      	ldrh	r3, [r5, #26]
 800c426:	f023 0301 	bic.w	r3, r3, #1
 800c42a:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800c42c:	e4ca      	b.n	800bdc4 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 800c42e:	4628      	mov	r0, r5
 800c430:	4c31      	ldr	r4, [pc, #196]	; (800c4f8 <tcp_input+0xa04>)
 800c432:	f000 fd17 	bl	800ce64 <tcp_send_empty_ack>
 800c436:	e4d8      	b.n	800bdea <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c438:	8802      	ldrh	r2, [r0, #0]
 800c43a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c43e:	9b05      	ldr	r3, [sp, #20]
 800c440:	881a      	ldrh	r2, [r3, #0]
 800c442:	4b2f      	ldr	r3, [pc, #188]	; (800c500 <tcp_input+0xa0c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	441a      	add	r2, r3
 800c448:	4b2e      	ldr	r3, [pc, #184]	; (800c504 <tcp_input+0xa10>)
 800c44a:	4628      	mov	r0, r5
 800c44c:	6819      	ldr	r1, [r3, #0]
 800c44e:	4b2e      	ldr	r3, [pc, #184]	; (800c508 <tcp_input+0xa14>)
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	3304      	adds	r3, #4
 800c454:	f000 fcbe 	bl	800cdd4 <tcp_rst>
 800c458:	f7ff bb5b 	b.w	800bb12 <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c45c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800c45e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800c462:	4293      	cmp	r3, r2
 800c464:	d001      	beq.n	800c46a <tcp_input+0x976>
              pcb->rcv_wnd++;
 800c466:	3301      	adds	r3, #1
 800c468:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c46a:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800c46e:	2e00      	cmp	r6, #0
 800c470:	f43f af49 	beq.w	800c306 <tcp_input+0x812>
 800c474:	2300      	movs	r3, #0
 800c476:	4629      	mov	r1, r5
 800c478:	6928      	ldr	r0, [r5, #16]
 800c47a:	461a      	mov	r2, r3
 800c47c:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800c47e:	300d      	adds	r0, #13
 800c480:	f47f af41 	bne.w	800c306 <tcp_input+0x812>
 800c484:	e4b1      	b.n	800bdea <tcp_input+0x2f6>
            pbuf_free(recv_data);
 800c486:	4610      	mov	r0, r2
 800c488:	f7fd fa1c 	bl	80098c4 <pbuf_free>
            tcp_abort(pcb);
 800c48c:	4628      	mov	r0, r5
 800c48e:	f7fe f9ed 	bl	800a86c <tcp_abort>
            goto aborted;
 800c492:	e4aa      	b.n	800bdea <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c494:	06d9      	lsls	r1, r3, #27
 800c496:	f57f ac95 	bpl.w	800bdc4 <tcp_input+0x2d0>
 800c49a:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <tcp_input+0xa10>)
 800c49c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	f47f ac8f 	bne.w	800bdc4 <tcp_input+0x2d0>
 800c4a6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f47f ac8b 	bne.w	800bdc4 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 800c4ae:	2306      	movs	r3, #6
 800c4b0:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800c4b2:	e487      	b.n	800bdc4 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c4b4:	079b      	lsls	r3, r3, #30
 800c4b6:	f57f ac85 	bpl.w	800bdc4 <tcp_input+0x2d0>
 800c4ba:	4b11      	ldr	r3, [pc, #68]	; (800c500 <tcp_input+0xa0c>)
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	f47f ac7e 	bne.w	800bdc4 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 fc05 	bl	800ccd8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c4ce:	e479      	b.n	800bdc4 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c4d0:	4633      	mov	r3, r6
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f7fe fb8d 	bl	800abf4 <tcp_recv_null>
 800c4da:	e700      	b.n	800c2de <tcp_input+0x7ea>
 800c4dc:	240107e8 	.word	0x240107e8
 800c4e0:	24010800 	.word	0x24010800
 800c4e4:	240107ec 	.word	0x240107ec
 800c4e8:	0801129c 	.word	0x0801129c
 800c4ec:	080114c0 	.word	0x080114c0
 800c4f0:	08010440 	.word	0x08010440
 800c4f4:	080114d0 	.word	0x080114d0
 800c4f8:	2401082c 	.word	0x2401082c
 800c4fc:	0801166c 	.word	0x0801166c
 800c500:	24010828 	.word	0x24010828
 800c504:	24010804 	.word	0x24010804
 800c508:	24009d38 	.word	0x24009d38
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c50c:	69ab      	ldr	r3, [r5, #24]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f43f aaff 	beq.w	800bb12 <tcp_input+0x1e>
 800c514:	4601      	mov	r1, r0
 800c516:	f04f 32ff 	mov.w	r2, #4294967295
 800c51a:	6928      	ldr	r0, [r5, #16]
 800c51c:	4798      	blx	r3
 800c51e:	f7ff baf8 	b.w	800bb12 <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800c522:	4641      	mov	r1, r8
 800c524:	4648      	mov	r0, r9
 800c526:	f7fe f8cb 	bl	800a6c0 <tcp_abandon>
      return;
 800c52a:	f7ff baf2 	b.w	800bb12 <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c52e:	4b4b      	ldr	r3, [pc, #300]	; (800c65c <tcp_input+0xb68>)
 800c530:	f240 120d 	movw	r2, #269	; 0x10d
 800c534:	494a      	ldr	r1, [pc, #296]	; (800c660 <tcp_input+0xb6c>)
 800c536:	484b      	ldr	r0, [pc, #300]	; (800c664 <tcp_input+0xb70>)
 800c538:	f003 f842 	bl	800f5c0 <iprintf>
      if (prev != NULL) {
 800c53c:	f1b8 0f00 	cmp.w	r8, #0
 800c540:	f43f abf9 	beq.w	800bd36 <tcp_input+0x242>
 800c544:	68eb      	ldr	r3, [r5, #12]
 800c546:	f7ff bbf0 	b.w	800bd2a <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 800c54a:	2304      	movs	r3, #4
 800c54c:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800c54e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d09b      	beq.n	800c48c <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d056      	beq.n	800c608 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c55a:	2200      	movs	r2, #0
 800c55c:	4629      	mov	r1, r5
 800c55e:	6928      	ldr	r0, [r5, #16]
 800c560:	4798      	blx	r3
          if (err != ERR_OK) {
 800c562:	2800      	cmp	r0, #0
 800c564:	d14c      	bne.n	800c600 <tcp_input+0xb0c>
          tcp_receive(pcb);
 800c566:	4628      	mov	r0, r5
 800c568:	f7fe fd7c 	bl	800b064 <tcp_receive>
          if (recv_acked != 0) {
 800c56c:	f8bb 3000 	ldrh.w	r3, [fp]
 800c570:	b113      	cbz	r3, 800c578 <tcp_input+0xa84>
            recv_acked--;
 800c572:	3b01      	subs	r3, #1
 800c574:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c578:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 800c57a:	f241 131c 	movw	r3, #4380	; 0x111c
 800c57e:	004a      	lsls	r2, r1, #1
 800c580:	0088      	lsls	r0, r1, #2
 800c582:	429a      	cmp	r2, r3
 800c584:	4616      	mov	r6, r2
 800c586:	bf38      	it	cc
 800c588:	461e      	movcc	r6, r3
 800c58a:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800c58e:	d923      	bls.n	800c5d8 <tcp_input+0xae4>
 800c590:	b283      	uxth	r3, r0
 800c592:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800c596:	f899 3000 	ldrb.w	r3, [r9]
 800c59a:	069a      	lsls	r2, r3, #26
 800c59c:	f57f ac12 	bpl.w	800bdc4 <tcp_input+0x2d0>
 800c5a0:	e56f      	b.n	800c082 <tcp_input+0x58e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c5a2:	4b2e      	ldr	r3, [pc, #184]	; (800c65c <tcp_input+0xb68>)
 800c5a4:	f240 1215 	movw	r2, #277	; 0x115
 800c5a8:	492f      	ldr	r1, [pc, #188]	; (800c668 <tcp_input+0xb74>)
 800c5aa:	482e      	ldr	r0, [pc, #184]	; (800c664 <tcp_input+0xb70>)
 800c5ac:	f003 f808 	bl	800f5c0 <iprintf>
 800c5b0:	f7ff bbc5 	b.w	800bd3e <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 800c5b4:	68ea      	ldr	r2, [r5, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
 800c5b8:	e640      	b.n	800c23c <tcp_input+0x748>
          TCP_RMV_ACTIVE(pcb);
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f43f ae3e 	beq.w	800c23c <tcp_input+0x748>
 800c5c0:	68da      	ldr	r2, [r3, #12]
 800c5c2:	42aa      	cmp	r2, r5
 800c5c4:	d0f6      	beq.n	800c5b4 <tcp_input+0xac0>
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	e7f7      	b.n	800c5ba <tcp_input+0xac6>
  } else if (flags & TCP_FIN) {
 800c5ca:	07d0      	lsls	r0, r2, #31
 800c5cc:	f57f ac5d 	bpl.w	800be8a <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 800c5d0:	4b26      	ldr	r3, [pc, #152]	; (800c66c <tcp_input+0xb78>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	622b      	str	r3, [r5, #32]
 800c5d6:	e458      	b.n	800be8a <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	bf88      	it	hi
 800c5dc:	b293      	uxthhi	r3, r2
 800c5de:	e7d8      	b.n	800c592 <tcp_input+0xa9e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	f47f af19 	bne.w	800c418 <tcp_input+0x924>
 800c5e6:	4b1d      	ldr	r3, [pc, #116]	; (800c65c <tcp_input+0xb68>)
 800c5e8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c5ec:	4920      	ldr	r1, [pc, #128]	; (800c670 <tcp_input+0xb7c>)
 800c5ee:	481d      	ldr	r0, [pc, #116]	; (800c664 <tcp_input+0xb70>)
 800c5f0:	f002 ffe6 	bl	800f5c0 <iprintf>
 800c5f4:	e710      	b.n	800c418 <tcp_input+0x924>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5f6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800c5fa:	9b05      	ldr	r3, [sp, #20]
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	e722      	b.n	800c446 <tcp_input+0x952>
            if (err != ERR_ABRT) {
 800c600:	300d      	adds	r0, #13
 800c602:	f43f abf2 	beq.w	800bdea <tcp_input+0x2f6>
 800c606:	e741      	b.n	800c48c <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c608:	4b14      	ldr	r3, [pc, #80]	; (800c65c <tcp_input+0xb68>)
 800c60a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c60e:	4919      	ldr	r1, [pc, #100]	; (800c674 <tcp_input+0xb80>)
 800c610:	4814      	ldr	r0, [pc, #80]	; (800c664 <tcp_input+0xb70>)
 800c612:	f002 ffd5 	bl	800f5c0 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c616:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d19d      	bne.n	800c55a <tcp_input+0xa66>
 800c61e:	e735      	b.n	800c48c <tcp_input+0x998>
          pcb->rtime = -1;
 800c620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c624:	862b      	strh	r3, [r5, #48]	; 0x30
 800c626:	e6e2      	b.n	800c3ee <tcp_input+0x8fa>
          rseg = pcb->unsent;
 800c628:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c62a:	b176      	cbz	r6, 800c64a <tcp_input+0xb56>
          pcb->unsent = rseg->next;
 800c62c:	6833      	ldr	r3, [r6, #0]
 800c62e:	66eb      	str	r3, [r5, #108]	; 0x6c
 800c630:	e6d2      	b.n	800c3d8 <tcp_input+0x8e4>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c632:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <tcp_input+0xb68>)
 800c634:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c638:	490f      	ldr	r1, [pc, #60]	; (800c678 <tcp_input+0xb84>)
 800c63a:	480a      	ldr	r0, [pc, #40]	; (800c664 <tcp_input+0xb70>)
 800c63c:	f002 ffc0 	bl	800f5c0 <iprintf>
 800c640:	e6bf      	b.n	800c3c2 <tcp_input+0x8ce>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c642:	429a      	cmp	r2, r3
 800c644:	bf88      	it	hi
 800c646:	b293      	uxthhi	r3, r2
 800c648:	e6b4      	b.n	800c3b4 <tcp_input+0x8c0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c64a:	4b04      	ldr	r3, [pc, #16]	; (800c65c <tcp_input+0xb68>)
 800c64c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c650:	490a      	ldr	r1, [pc, #40]	; (800c67c <tcp_input+0xb88>)
 800c652:	4804      	ldr	r0, [pc, #16]	; (800c664 <tcp_input+0xb70>)
 800c654:	f002 ffb4 	bl	800f5c0 <iprintf>
 800c658:	e7e8      	b.n	800c62c <tcp_input+0xb38>
 800c65a:	bf00      	nop
 800c65c:	0801129c 	.word	0x0801129c
 800c660:	08011578 	.word	0x08011578
 800c664:	08010440 	.word	0x08010440
 800c668:	080115a4 	.word	0x080115a4
 800c66c:	240107f8 	.word	0x240107f8
 800c670:	08011600 	.word	0x08011600
 800c674:	0801164c 	.word	0x0801164c
 800c678:	08011620 	.word	0x08011620
 800c67c:	08011638 	.word	0x08011638

0800c680 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c680:	4a02      	ldr	r2, [pc, #8]	; (800c68c <tcp_trigger_input_pcb_close+0xc>)
 800c682:	7813      	ldrb	r3, [r2, #0]
 800c684:	f043 0310 	orr.w	r3, r3, #16
 800c688:	7013      	strb	r3, [r2, #0]
}
 800c68a:	4770      	bx	lr
 800c68c:	24010824 	.word	0x24010824

0800c690 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c694:	460e      	mov	r6, r1
 800c696:	f89d a020 	ldrb.w	sl, [sp, #32]
 800c69a:	4690      	mov	r8, r2
 800c69c:	4699      	mov	r9, r3
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c69e:	4607      	mov	r7, r0
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d04a      	beq.n	800c73a <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c6a4:	2e00      	cmp	r6, #0
 800c6a6:	d050      	beq.n	800c74a <tcp_create_segment+0xba>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c6a8:	ea4f 058a 	mov.w	r5, sl, lsl #2

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c6ac:	2003      	movs	r0, #3
 800c6ae:	f7fc fcfd 	bl	80090ac <memp_malloc>
 800c6b2:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c6b4:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d054      	beq.n	800c766 <tcp_create_segment+0xd6>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
 800c6bc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800c6c0:	2300      	movs	r3, #0
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c6c2:	8932      	ldrh	r2, [r6, #8]
 800c6c4:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800c6c8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c6ca:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800c6cc:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c6ce:	d32c      	bcc.n	800c72a <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 800c6d0:	eba2 020a 	sub.w	r2, r2, sl
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800c6d8:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c6da:	f7fd f853 	bl	8009784 <pbuf_add_header>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d139      	bne.n	800c758 <tcp_create_segment+0xc8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c6e4:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  seg->tcphdr->seqno = lwip_htonl(seqno);
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c6e6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c6e8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c6ea:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c6ee:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c6f2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c6f6:	f7fc f943 	bl	8008980 <lwip_htons>
 800c6fa:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c6fe:	8b38      	ldrh	r0, [r7, #24]
 800c700:	68e7      	ldr	r7, [r4, #12]
 800c702:	f7fc f93d 	bl	8008980 <lwip_htons>
 800c706:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c708:	4648      	mov	r0, r9
 800c70a:	68e7      	ldr	r7, [r4, #12]
 800c70c:	f7fc f93c 	bl	8008988 <lwip_htonl>
 800c710:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c712:	ea45 0008 	orr.w	r0, r5, r8
 800c716:	68e7      	ldr	r7, [r4, #12]
 800c718:	f7fc f932 	bl	8008980 <lwip_htons>
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c71c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c71e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800c720:	749e      	strb	r6, [r3, #18]
 800c722:	74de      	strb	r6, [r3, #19]
  return seg;
}
 800c724:	4620      	mov	r0, r4
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c72a:	22b0      	movs	r2, #176	; 0xb0
 800c72c:	4b10      	ldr	r3, [pc, #64]	; (800c770 <tcp_create_segment+0xe0>)
 800c72e:	4911      	ldr	r1, [pc, #68]	; (800c774 <tcp_create_segment+0xe4>)
 800c730:	4811      	ldr	r0, [pc, #68]	; (800c778 <tcp_create_segment+0xe8>)
 800c732:	f002 ff45 	bl	800f5c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800c736:	8932      	ldrh	r2, [r6, #8]
 800c738:	e7ca      	b.n	800c6d0 <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c73a:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <tcp_create_segment+0xe0>)
 800c73c:	22a3      	movs	r2, #163	; 0xa3
 800c73e:	490f      	ldr	r1, [pc, #60]	; (800c77c <tcp_create_segment+0xec>)
 800c740:	480d      	ldr	r0, [pc, #52]	; (800c778 <tcp_create_segment+0xe8>)
 800c742:	f002 ff3d 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c746:	2e00      	cmp	r6, #0
 800c748:	d1ae      	bne.n	800c6a8 <tcp_create_segment+0x18>
 800c74a:	4b09      	ldr	r3, [pc, #36]	; (800c770 <tcp_create_segment+0xe0>)
 800c74c:	22a4      	movs	r2, #164	; 0xa4
 800c74e:	490c      	ldr	r1, [pc, #48]	; (800c780 <tcp_create_segment+0xf0>)
 800c750:	4809      	ldr	r0, [pc, #36]	; (800c778 <tcp_create_segment+0xe8>)
 800c752:	f002 ff35 	bl	800f5c0 <iprintf>
 800c756:	e7a7      	b.n	800c6a8 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800c758:	4620      	mov	r0, r4
    return NULL;
 800c75a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800c75c:	f7fd fc12 	bl	8009f84 <tcp_seg_free>
}
 800c760:	4620      	mov	r0, r4
 800c762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800c766:	4630      	mov	r0, r6
 800c768:	f7fd f8ac 	bl	80098c4 <pbuf_free>
    return NULL;
 800c76c:	e7da      	b.n	800c724 <tcp_create_segment+0x94>
 800c76e:	bf00      	nop
 800c770:	08011688 	.word	0x08011688
 800c774:	08011734 	.word	0x08011734
 800c778:	08010440 	.word	0x08010440
 800c77c:	080116f0 	.word	0x080116f0
 800c780:	08011710 	.word	0x08011710

0800c784 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c784:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c78a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c78c:	4606      	mov	r6, r0
 800c78e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c790:	2022      	movs	r0, #34	; 0x22
 800c792:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c796:	461c      	mov	r4, r3
 800c798:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800c79c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800c7a0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c7a4:	f7fd f8fe 	bl	80099a4 <pbuf_alloc>
  if (p != NULL) {
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	b300      	cbz	r0, 800c7ee <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c7ac:	8943      	ldrh	r3, [r0, #10]
 800c7ae:	2b13      	cmp	r3, #19
 800c7b0:	d920      	bls.n	800c7f4 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800c7b2:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800c7b4:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800c7b6:	f7fc f8e3 	bl	8008980 <lwip_htons>
 800c7ba:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c7bc:	4650      	mov	r0, sl
 800c7be:	f7fc f8df 	bl	8008980 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c7c2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800c7c4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7fc f8de 	bl	8008988 <lwip_htonl>
 800c7cc:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c7ce:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800c7d2:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c7d4:	f7fc f8d4 	bl	8008980 <lwip_htons>
 800c7d8:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800c7da:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c7dc:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c7de:	f7fc f8cf 	bl	8008980 <lwip_htons>
    tcphdr->chksum = 0;
 800c7e2:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800c7e4:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800c7e6:	7423      	strb	r3, [r4, #16]
 800c7e8:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800c7ea:	74a3      	strb	r3, [r4, #18]
 800c7ec:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c7f4:	4b03      	ldr	r3, [pc, #12]	; (800c804 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800c7f6:	f240 7223 	movw	r2, #1827	; 0x723
 800c7fa:	4903      	ldr	r1, [pc, #12]	; (800c808 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800c7fc:	4803      	ldr	r0, [pc, #12]	; (800c80c <tcp_output_alloc_header_common.constprop.0+0x88>)
 800c7fe:	f002 fedf 	bl	800f5c0 <iprintf>
 800c802:	e7d6      	b.n	800c7b2 <tcp_output_alloc_header_common.constprop.0+0x2e>
 800c804:	08011688 	.word	0x08011688
 800c808:	0801174c 	.word	0x0801174c
 800c80c:	08010440 	.word	0x08010440

0800c810 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	460d      	mov	r5, r1
 800c814:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c816:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c818:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c81a:	b190      	cbz	r0, 800c842 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c81c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c81e:	2210      	movs	r2, #16
 800c820:	8b21      	ldrh	r1, [r4, #24]
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	e9cd 1200 	strd	r1, r2, [sp]
 800c828:	4632      	mov	r2, r6
 800c82a:	4629      	mov	r1, r5
 800c82c:	8ae3      	ldrh	r3, [r4, #22]
 800c82e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c830:	f7ff ffa8 	bl	800c784 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c834:	b118      	cbz	r0, 800c83e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c836:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c83a:	4413      	add	r3, r2
 800c83c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800c83e:	b004      	add	sp, #16
 800c840:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c842:	4b04      	ldr	r3, [pc, #16]	; (800c854 <tcp_output_alloc_header.constprop.0+0x44>)
 800c844:	f240 7242 	movw	r2, #1858	; 0x742
 800c848:	4903      	ldr	r1, [pc, #12]	; (800c858 <tcp_output_alloc_header.constprop.0+0x48>)
 800c84a:	4804      	ldr	r0, [pc, #16]	; (800c85c <tcp_output_alloc_header.constprop.0+0x4c>)
 800c84c:	f002 feb8 	bl	800f5c0 <iprintf>
 800c850:	e7e4      	b.n	800c81c <tcp_output_alloc_header.constprop.0+0xc>
 800c852:	bf00      	nop
 800c854:	08011688 	.word	0x08011688
 800c858:	0801177c 	.word	0x0801177c
 800c85c:	08010440 	.word	0x08010440

0800c860 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c862:	4604      	mov	r4, r0
 800c864:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c866:	460d      	mov	r5, r1
{
 800c868:	4617      	mov	r7, r2
 800c86a:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c86c:	b321      	cbz	r1, 800c8b8 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c86e:	b35c      	cbz	r4, 800c8c8 <tcp_output_control_segment+0x68>
 800c870:	7a20      	ldrb	r0, [r4, #8]
 800c872:	b9a8      	cbnz	r0, 800c8a0 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800c874:	4630      	mov	r0, r6
 800c876:	f001 fd3d 	bl	800e2f4 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800c87a:	b1a8      	cbz	r0, 800c8a8 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c87c:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800c87e:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c880:	9400      	str	r4, [sp, #0]
 800c882:	2406      	movs	r4, #6
 800c884:	4632      	mov	r2, r6
 800c886:	4639      	mov	r1, r7
 800c888:	9002      	str	r0, [sp, #8]
 800c88a:	4628      	mov	r0, r5
 800c88c:	9401      	str	r4, [sp, #4]
 800c88e:	f001 fec7 	bl	800e620 <ip4_output_if>
 800c892:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c894:	4628      	mov	r0, r5
 800c896:	f7fd f815 	bl	80098c4 <pbuf_free>
  return err;
}
 800c89a:	4620      	mov	r0, r4
 800c89c:	b005      	add	sp, #20
 800c89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800c8a0:	f7fc fe5e 	bl	8009560 <netif_get_by_index>
  if (netif == NULL) {
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1e9      	bne.n	800c87c <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800c8a8:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	f7fd f809 	bl	80098c4 <pbuf_free>
}
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	b005      	add	sp, #20
 800c8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c8b8:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <tcp_output_control_segment+0x78>)
 800c8ba:	f240 7287 	movw	r2, #1927	; 0x787
 800c8be:	4907      	ldr	r1, [pc, #28]	; (800c8dc <tcp_output_control_segment+0x7c>)
 800c8c0:	4807      	ldr	r0, [pc, #28]	; (800c8e0 <tcp_output_control_segment+0x80>)
 800c8c2:	f002 fe7d 	bl	800f5c0 <iprintf>
 800c8c6:	e7d2      	b.n	800c86e <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	f001 fd13 	bl	800e2f4 <ip4_route>
  if (netif == NULL) {
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	d0ea      	beq.n	800c8a8 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800c8d2:	23ff      	movs	r3, #255	; 0xff
 800c8d4:	e7d4      	b.n	800c880 <tcp_output_control_segment+0x20>
 800c8d6:	bf00      	nop
 800c8d8:	08011688 	.word	0x08011688
 800c8dc:	080117a4 	.word	0x080117a4
 800c8e0:	08010440 	.word	0x08010440

0800c8e4 <tcp_split_unsent_seg>:
{
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c8e8:	4605      	mov	r5, r0
{
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f000 80a7 	beq.w	800ca42 <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 800c8f4:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800c8f6:	b376      	cbz	r6, 800c956 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 800c8f8:	2c00      	cmp	r4, #0
 800c8fa:	f000 80b3 	beq.w	800ca64 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 800c8fe:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800c902:	45a1      	cmp	r9, r4
 800c904:	f240 8099 	bls.w	800ca3a <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c908:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800c90a:	42a3      	cmp	r3, r4
 800c90c:	d328      	bcc.n	800c960 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 800c90e:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 800c912:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c916:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c91a:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c91c:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800c920:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c924:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c928:	eb08 010b 	add.w	r1, r8, fp
 800c92c:	b289      	uxth	r1, r1
 800c92e:	f7fd f839 	bl	80099a4 <pbuf_alloc>
  if (p == NULL) {
 800c932:	4607      	mov	r7, r0
 800c934:	b178      	cbz	r0, 800c956 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 800c936:	6870      	ldr	r0, [r6, #4]
 800c938:	8932      	ldrh	r2, [r6, #8]
 800c93a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c93c:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800c93e:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c940:	4642      	mov	r2, r8
 800c942:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800c944:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c946:	b29b      	uxth	r3, r3
 800c948:	f7fd f9b4 	bl	8009cb4 <pbuf_copy_partial>
 800c94c:	4540      	cmp	r0, r8
 800c94e:	d01d      	beq.n	800c98c <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 800c950:	4638      	mov	r0, r7
 800c952:	f7fc ffb7 	bl	80098c4 <pbuf_free>
  return ERR_MEM;
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c95a:	b003      	add	sp, #12
 800c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c960:	4b45      	ldr	r3, [pc, #276]	; (800ca78 <tcp_split_unsent_seg+0x194>)
 800c962:	f240 325b 	movw	r2, #859	; 0x35b
 800c966:	4945      	ldr	r1, [pc, #276]	; (800ca7c <tcp_split_unsent_seg+0x198>)
 800c968:	4845      	ldr	r0, [pc, #276]	; (800ca80 <tcp_split_unsent_seg+0x19c>)
 800c96a:	f002 fe29 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c96e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800c972:	f1b9 0f00 	cmp.w	r9, #0
 800c976:	d1ca      	bne.n	800c90e <tcp_split_unsent_seg+0x2a>
 800c978:	4b3f      	ldr	r3, [pc, #252]	; (800ca78 <tcp_split_unsent_seg+0x194>)
 800c97a:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c97e:	4941      	ldr	r1, [pc, #260]	; (800ca84 <tcp_split_unsent_seg+0x1a0>)
 800c980:	483f      	ldr	r0, [pc, #252]	; (800ca80 <tcp_split_unsent_seg+0x19c>)
 800c982:	f002 fe1d 	bl	800f5c0 <iprintf>
  remainder = useg->len - split;
 800c986:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800c98a:	e7c0      	b.n	800c90e <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c98c:	68f3      	ldr	r3, [r6, #12]
 800c98e:	8998      	ldrh	r0, [r3, #12]
 800c990:	f7fb fff6 	bl	8008980 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800c994:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c998:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 800c99c:	d159      	bne.n	800ca52 <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c99e:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800c9a2:	f018 0f01 	tst.w	r8, #1
 800c9a6:	d003      	beq.n	800c9b0 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 800c9a8:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800c9ac:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c9b0:	68f3      	ldr	r3, [r6, #12]
 800c9b2:	6858      	ldr	r0, [r3, #4]
 800c9b4:	f7fb ffe8 	bl	8008988 <lwip_htonl>
 800c9b8:	f8cd a000 	str.w	sl, [sp]
 800c9bc:	1823      	adds	r3, r4, r0
 800c9be:	465a      	mov	r2, fp
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f7ff fe64 	bl	800c690 <tcp_create_segment>
  if (seg == NULL) {
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d0c0      	beq.n	800c950 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9ce:	6870      	ldr	r0, [r6, #4]
 800c9d0:	eba4 0409 	sub.w	r4, r4, r9
 800c9d4:	f7fd f8ec 	bl	8009bb0 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9d8:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9da:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800c9de:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9e0:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9e2:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c9e8:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c9ec:	b289      	uxth	r1, r1
 800c9ee:	f7fd f887 	bl	8009b00 <pbuf_realloc>
  useg->len -= remainder;
 800c9f2:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c9f4:	4640      	mov	r0, r8
  useg->len -= remainder;
 800c9f6:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c9f8:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 800c9fa:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c9fc:	899c      	ldrh	r4, [r3, #12]
 800c9fe:	f7fb ffbf 	bl	8008980 <lwip_htons>
 800ca02:	68f3      	ldr	r3, [r6, #12]
 800ca04:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca06:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ca08:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca0a:	f7fd f8d1 	bl	8009bb0 <pbuf_clen>
 800ca0e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800ca12:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca14:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ca18:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca1c:	f7fd f8c8 	bl	8009bb0 <pbuf_clen>
 800ca20:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800ca24:	4418      	add	r0, r3
  seg->next = useg->next;
 800ca26:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca28:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800ca2c:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800ca30:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800ca34:	f8da 3000 	ldr.w	r3, [sl]
 800ca38:	b183      	cbz	r3, 800ca5c <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800ca3a:	2000      	movs	r0, #0
}
 800ca3c:	b003      	add	sp, #12
 800ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca42:	4b0d      	ldr	r3, [pc, #52]	; (800ca78 <tcp_split_unsent_seg+0x194>)
 800ca44:	f240 324b 	movw	r2, #843	; 0x34b
 800ca48:	490f      	ldr	r1, [pc, #60]	; (800ca88 <tcp_split_unsent_seg+0x1a4>)
 800ca4a:	480d      	ldr	r0, [pc, #52]	; (800ca80 <tcp_split_unsent_seg+0x19c>)
 800ca4c:	f002 fdb8 	bl	800f5c0 <iprintf>
 800ca50:	e750      	b.n	800c8f4 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800ca52:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800ca56:	f04f 0b08 	mov.w	fp, #8
 800ca5a:	e7a2      	b.n	800c9a2 <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800ca5c:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800ca5e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800ca62:	e77a      	b.n	800c95a <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ca64:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <tcp_split_unsent_seg+0x194>)
 800ca66:	f240 3253 	movw	r2, #851	; 0x353
 800ca6a:	4908      	ldr	r1, [pc, #32]	; (800ca8c <tcp_split_unsent_seg+0x1a8>)
 800ca6c:	4804      	ldr	r0, [pc, #16]	; (800ca80 <tcp_split_unsent_seg+0x19c>)
 800ca6e:	f002 fda7 	bl	800f5c0 <iprintf>
    return ERR_VAL;
 800ca72:	f06f 0005 	mvn.w	r0, #5
 800ca76:	e770      	b.n	800c95a <tcp_split_unsent_seg+0x76>
 800ca78:	08011688 	.word	0x08011688
 800ca7c:	08011818 	.word	0x08011818
 800ca80:	08010440 	.word	0x08010440
 800ca84:	08011828 	.word	0x08011828
 800ca88:	080117d0 	.word	0x080117d0
 800ca8c:	080117f4 	.word	0x080117f4

0800ca90 <tcp_enqueue_flags>:
{
 800ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ca94:	f011 0703 	ands.w	r7, r1, #3
{
 800ca98:	b082      	sub	sp, #8
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ca9e:	d05e      	beq.n	800cb5e <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800caa0:	2c00      	cmp	r4, #0
 800caa2:	d065      	beq.n	800cb70 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800caa4:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800caa8:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800caac:	d049      	beq.n	800cb42 <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800caae:	2104      	movs	r1, #4
 800cab0:	2036      	movs	r0, #54	; 0x36
 800cab2:	f7fc ff77 	bl	80099a4 <pbuf_alloc>
 800cab6:	4606      	mov	r6, r0
 800cab8:	2800      	cmp	r0, #0
 800caba:	d049      	beq.n	800cb50 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cabc:	8943      	ldrh	r3, [r0, #10]
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d872      	bhi.n	800cba8 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800cac2:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cac6:	4b40      	ldr	r3, [pc, #256]	; (800cbc8 <tcp_enqueue_flags+0x138>)
 800cac8:	f240 4239 	movw	r2, #1081	; 0x439
 800cacc:	493f      	ldr	r1, [pc, #252]	; (800cbcc <tcp_enqueue_flags+0x13c>)
 800cace:	4840      	ldr	r0, [pc, #256]	; (800cbd0 <tcp_enqueue_flags+0x140>)
 800cad0:	f002 fd76 	bl	800f5c0 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cad4:	4631      	mov	r1, r6
 800cad6:	f8cd 8000 	str.w	r8, [sp]
 800cada:	462a      	mov	r2, r5
 800cadc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff fdd6 	bl	800c690 <tcp_create_segment>
 800cae4:	4606      	mov	r6, r0
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d032      	beq.n	800cb50 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800caea:	68c3      	ldr	r3, [r0, #12]
 800caec:	079a      	lsls	r2, r3, #30
 800caee:	d153      	bne.n	800cb98 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800caf0:	8933      	ldrh	r3, [r6, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d144      	bne.n	800cb80 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800caf6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d04b      	beq.n	800cb94 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cafc:	461a      	mov	r2, r3
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1fb      	bne.n	800cafc <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800cb04:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cb0c:	b117      	cbz	r7, 800cb14 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800cb0e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800cb10:	3301      	adds	r3, #1
 800cb12:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800cb14:	07eb      	lsls	r3, r5, #31
 800cb16:	d503      	bpl.n	800cb20 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800cb18:	8b63      	ldrh	r3, [r4, #26]
 800cb1a:	f043 0320 	orr.w	r3, r3, #32
 800cb1e:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cb20:	6870      	ldr	r0, [r6, #4]
 800cb22:	f7fd f845 	bl	8009bb0 <pbuf_clen>
 800cb26:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800cb2a:	4418      	add	r0, r3
 800cb2c:	b280      	uxth	r0, r0
 800cb2e:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800cb32:	b118      	cbz	r0, 800cb3c <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cb34:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d039      	beq.n	800cbae <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800cb3a:	2000      	movs	r0, #0
}
 800cb3c:	b002      	add	sp, #8
 800cb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cb42:	4641      	mov	r1, r8
 800cb44:	2036      	movs	r0, #54	; 0x36
 800cb46:	f7fc ff2d 	bl	80099a4 <pbuf_alloc>
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d1c1      	bne.n	800cad4 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb50:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5a:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800cb5c:	e7ee      	b.n	800cb3c <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cb5e:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <tcp_enqueue_flags+0x138>)
 800cb60:	f240 4211 	movw	r2, #1041	; 0x411
 800cb64:	491b      	ldr	r1, [pc, #108]	; (800cbd4 <tcp_enqueue_flags+0x144>)
 800cb66:	481a      	ldr	r0, [pc, #104]	; (800cbd0 <tcp_enqueue_flags+0x140>)
 800cb68:	f002 fd2a 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cb6c:	2c00      	cmp	r4, #0
 800cb6e:	d199      	bne.n	800caa4 <tcp_enqueue_flags+0x14>
 800cb70:	4b15      	ldr	r3, [pc, #84]	; (800cbc8 <tcp_enqueue_flags+0x138>)
 800cb72:	f240 4213 	movw	r2, #1043	; 0x413
 800cb76:	4918      	ldr	r1, [pc, #96]	; (800cbd8 <tcp_enqueue_flags+0x148>)
 800cb78:	4815      	ldr	r0, [pc, #84]	; (800cbd0 <tcp_enqueue_flags+0x140>)
 800cb7a:	f002 fd21 	bl	800f5c0 <iprintf>
 800cb7e:	e791      	b.n	800caa4 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cb80:	4b11      	ldr	r3, [pc, #68]	; (800cbc8 <tcp_enqueue_flags+0x138>)
 800cb82:	f240 4243 	movw	r2, #1091	; 0x443
 800cb86:	4915      	ldr	r1, [pc, #84]	; (800cbdc <tcp_enqueue_flags+0x14c>)
 800cb88:	4811      	ldr	r0, [pc, #68]	; (800cbd0 <tcp_enqueue_flags+0x140>)
 800cb8a:	f002 fd19 	bl	800f5c0 <iprintf>
  if (pcb->unsent == NULL) {
 800cb8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1b3      	bne.n	800cafc <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800cb94:	66e6      	str	r6, [r4, #108]	; 0x6c
 800cb96:	e7b6      	b.n	800cb06 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cb98:	4b0b      	ldr	r3, [pc, #44]	; (800cbc8 <tcp_enqueue_flags+0x138>)
 800cb9a:	f240 4242 	movw	r2, #1090	; 0x442
 800cb9e:	4910      	ldr	r1, [pc, #64]	; (800cbe0 <tcp_enqueue_flags+0x150>)
 800cba0:	480b      	ldr	r0, [pc, #44]	; (800cbd0 <tcp_enqueue_flags+0x140>)
 800cba2:	f002 fd0d 	bl	800f5c0 <iprintf>
 800cba6:	e7a3      	b.n	800caf0 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800cba8:	f04f 0801 	mov.w	r8, #1
 800cbac:	e792      	b.n	800cad4 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cbae:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800cbb0:	2c00      	cmp	r4, #0
 800cbb2:	d1c3      	bne.n	800cb3c <tcp_enqueue_flags+0xac>
 800cbb4:	4b04      	ldr	r3, [pc, #16]	; (800cbc8 <tcp_enqueue_flags+0x138>)
 800cbb6:	f240 4265 	movw	r2, #1125	; 0x465
 800cbba:	490a      	ldr	r1, [pc, #40]	; (800cbe4 <tcp_enqueue_flags+0x154>)
 800cbbc:	4804      	ldr	r0, [pc, #16]	; (800cbd0 <tcp_enqueue_flags+0x140>)
 800cbbe:	f002 fcff 	bl	800f5c0 <iprintf>
  return ERR_OK;
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	e7ba      	b.n	800cb3c <tcp_enqueue_flags+0xac>
 800cbc6:	bf00      	nop
 800cbc8:	08011688 	.word	0x08011688
 800cbcc:	080118b0 	.word	0x080118b0
 800cbd0:	08010440 	.word	0x08010440
 800cbd4:	08011838 	.word	0x08011838
 800cbd8:	08011890 	.word	0x08011890
 800cbdc:	08011904 	.word	0x08011904
 800cbe0:	080118ec 	.word	0x080118ec
 800cbe4:	08011930 	.word	0x08011930

0800cbe8 <tcp_send_fin>:
{
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cbea:	4606      	mov	r6, r0
 800cbec:	b188      	cbz	r0, 800cc12 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800cbee:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800cbf0:	b14c      	cbz	r4, 800cc06 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cbf2:	4625      	mov	r5, r4
 800cbf4:	6824      	ldr	r4, [r4, #0]
 800cbf6:	2c00      	cmp	r4, #0
 800cbf8:	d1fb      	bne.n	800cbf2 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cbfa:	68eb      	ldr	r3, [r5, #12]
 800cbfc:	8998      	ldrh	r0, [r3, #12]
 800cbfe:	f7fb febf 	bl	8008980 <lwip_htons>
 800cc02:	0743      	lsls	r3, r0, #29
 800cc04:	d00d      	beq.n	800cc22 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cc06:	4630      	mov	r0, r6
 800cc08:	2101      	movs	r1, #1
}
 800cc0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cc0e:	f7ff bf3f 	b.w	800ca90 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cc12:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <tcp_send_fin+0x58>)
 800cc14:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cc18:	490a      	ldr	r1, [pc, #40]	; (800cc44 <tcp_send_fin+0x5c>)
 800cc1a:	480b      	ldr	r0, [pc, #44]	; (800cc48 <tcp_send_fin+0x60>)
 800cc1c:	f002 fcd0 	bl	800f5c0 <iprintf>
 800cc20:	e7e5      	b.n	800cbee <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cc22:	68eb      	ldr	r3, [r5, #12]
 800cc24:	2001      	movs	r0, #1
 800cc26:	899f      	ldrh	r7, [r3, #12]
 800cc28:	f7fb feaa 	bl	8008980 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800cc2c:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cc2e:	4338      	orrs	r0, r7
 800cc30:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cc32:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cc36:	8190      	strh	r0, [r2, #12]
}
 800cc38:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800cc3a:	8373      	strh	r3, [r6, #26]
}
 800cc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	08011688 	.word	0x08011688
 800cc44:	08011958 	.word	0x08011958
 800cc48:	08010440 	.word	0x08010440

0800cc4c <tcp_rexmit_rto_prepare>:
{
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cc4e:	4605      	mov	r5, r0
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d032      	beq.n	800ccba <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800cc54:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800cc56:	b132      	cbz	r2, 800cc66 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc58:	6813      	ldr	r3, [r2, #0]
 800cc5a:	4614      	mov	r4, r2
 800cc5c:	b15b      	cbz	r3, 800cc76 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	7b9b      	ldrb	r3, [r3, #14]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d003      	beq.n	800cc6e <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800cc66:	f06f 0305 	mvn.w	r3, #5
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cc6e:	6824      	ldr	r4, [r4, #0]
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1f3      	bne.n	800cc5e <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800cc76:	6863      	ldr	r3, [r4, #4]
 800cc78:	7b9b      	ldrb	r3, [r3, #14]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d1f3      	bne.n	800cc66 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800cc7e:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800cc80:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800cc82:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800cc84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800cc88:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800cc8a:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc8c:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800cc8e:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc92:	6858      	ldr	r0, [r3, #4]
 800cc94:	f7fb fe78 	bl	8008988 <lwip_htonl>
 800cc98:	68e3      	ldr	r3, [r4, #12]
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	8924      	ldrh	r4, [r4, #8]
 800cc9e:	8998      	ldrh	r0, [r3, #12]
 800cca0:	f7fb fe6e 	bl	8008980 <lwip_htons>
 800cca4:	f010 0003 	ands.w	r0, r0, #3
 800cca8:	4426      	add	r6, r4
  return ERR_OK;
 800ccaa:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ccac:	bf18      	it	ne
 800ccae:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800ccb0:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ccb2:	4430      	add	r0, r6
 800ccb4:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ccba:	4b04      	ldr	r3, [pc, #16]	; (800cccc <tcp_rexmit_rto_prepare+0x80>)
 800ccbc:	f240 6263 	movw	r2, #1635	; 0x663
 800ccc0:	4903      	ldr	r1, [pc, #12]	; (800ccd0 <tcp_rexmit_rto_prepare+0x84>)
 800ccc2:	4804      	ldr	r0, [pc, #16]	; (800ccd4 <tcp_rexmit_rto_prepare+0x88>)
 800ccc4:	f002 fc7c 	bl	800f5c0 <iprintf>
 800ccc8:	e7c4      	b.n	800cc54 <tcp_rexmit_rto_prepare+0x8>
 800ccca:	bf00      	nop
 800cccc:	08011688 	.word	0x08011688
 800ccd0:	08011974 	.word	0x08011974
 800ccd4:	08010440 	.word	0x08010440

0800ccd8 <tcp_rexmit>:
{
 800ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ccda:	4607      	mov	r7, r0
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d031      	beq.n	800cd44 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800cce0:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800cce2:	b34e      	cbz	r6, 800cd38 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800cce4:	6873      	ldr	r3, [r6, #4]
 800cce6:	7b9b      	ldrb	r3, [r3, #14]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d125      	bne.n	800cd38 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800ccec:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800ccee:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800ccf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800ccf4:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800ccf6:	b91b      	cbnz	r3, 800cd00 <tcp_rexmit+0x28>
 800ccf8:	e00f      	b.n	800cd1a <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800ccfa:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b163      	cbz	r3, 800cd1a <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	6858      	ldr	r0, [r3, #4]
 800cd04:	f7fb fe40 	bl	8008988 <lwip_htonl>
 800cd08:	68f3      	ldr	r3, [r6, #12]
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	6858      	ldr	r0, [r3, #4]
 800cd0e:	f7fb fe3b 	bl	8008988 <lwip_htonl>
 800cd12:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800cd14:	2c00      	cmp	r4, #0
 800cd16:	dbf0      	blt.n	800ccfa <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800cd18:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800cd1a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800cd1c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800cd1e:	6833      	ldr	r3, [r6, #0]
 800cd20:	b16b      	cbz	r3, 800cd3e <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800cd22:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800cd26:	2bff      	cmp	r3, #255	; 0xff
 800cd28:	d002      	beq.n	800cd30 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800cd30:	2300      	movs	r3, #0
  return ERR_OK;
 800cd32:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800cd34:	637b      	str	r3, [r7, #52]	; 0x34
}
 800cd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800cd38:	f06f 0005 	mvn.w	r0, #5
}
 800cd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800cd3e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800cd42:	e7ee      	b.n	800cd22 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cd44:	4b03      	ldr	r3, [pc, #12]	; (800cd54 <tcp_rexmit+0x7c>)
 800cd46:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cd4a:	4903      	ldr	r1, [pc, #12]	; (800cd58 <tcp_rexmit+0x80>)
 800cd4c:	4803      	ldr	r0, [pc, #12]	; (800cd5c <tcp_rexmit+0x84>)
 800cd4e:	f002 fc37 	bl	800f5c0 <iprintf>
 800cd52:	e7c5      	b.n	800cce0 <tcp_rexmit+0x8>
 800cd54:	08011688 	.word	0x08011688
 800cd58:	08011998 	.word	0x08011998
 800cd5c:	08010440 	.word	0x08010440

0800cd60 <tcp_rexmit_fast>:
{
 800cd60:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cd62:	4604      	mov	r4, r0
 800cd64:	b340      	cbz	r0, 800cdb8 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cd66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cd68:	b113      	cbz	r3, 800cd70 <tcp_rexmit_fast+0x10>
 800cd6a:	8b63      	ldrh	r3, [r4, #26]
 800cd6c:	075b      	lsls	r3, r3, #29
 800cd6e:	d500      	bpl.n	800cd72 <tcp_rexmit_fast+0x12>
}
 800cd70:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cd72:	4620      	mov	r0, r4
 800cd74:	f7ff ffb0 	bl	800ccd8 <tcp_rexmit>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d1f9      	bne.n	800cd70 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd7c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800cd80:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd84:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd86:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd88:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd8c:	bf28      	it	cs
 800cd8e:	4619      	movcs	r1, r3
 800cd90:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd92:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd96:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd9a:	d902      	bls.n	800cda2 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800cd9c:	b283      	uxth	r3, r0
 800cd9e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800cda2:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cda4:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800cda6:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cdaa:	4413      	add	r3, r2
      pcb->rtime = 0;
 800cdac:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cdae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cdb2:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800cdb4:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800cdb6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cdb8:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <tcp_rexmit_fast+0x68>)
 800cdba:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cdbe:	4903      	ldr	r1, [pc, #12]	; (800cdcc <tcp_rexmit_fast+0x6c>)
 800cdc0:	4803      	ldr	r0, [pc, #12]	; (800cdd0 <tcp_rexmit_fast+0x70>)
 800cdc2:	f002 fbfd 	bl	800f5c0 <iprintf>
 800cdc6:	e7ce      	b.n	800cd66 <tcp_rexmit_fast+0x6>
 800cdc8:	08011688 	.word	0x08011688
 800cdcc:	080119b0 	.word	0x080119b0
 800cdd0:	08010440 	.word	0x08010440

0800cdd4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd8:	b084      	sub	sp, #16
 800cdda:	4607      	mov	r7, r0
 800cddc:	460e      	mov	r6, r1
 800cdde:	4615      	mov	r5, r2
 800cde0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cde4:	461c      	mov	r4, r3
{
 800cde6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800cdea:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cdee:	b1fb      	cbz	r3, 800ce30 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cdf0:	f1b8 0f00 	cmp.w	r8, #0
 800cdf4:	d026      	beq.n	800ce44 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7fb fdc6 	bl	8008988 <lwip_htonl>
 800cdfc:	2114      	movs	r1, #20
 800cdfe:	4602      	mov	r2, r0
 800ce00:	4628      	mov	r0, r5
 800ce02:	f24d 0516 	movw	r5, #53270	; 0xd016
 800ce06:	464b      	mov	r3, r9
 800ce08:	f8cd a000 	str.w	sl, [sp]
 800ce0c:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800ce10:	2100      	movs	r1, #0
 800ce12:	f7ff fcb7 	bl	800c784 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ce16:	4601      	mov	r1, r0
 800ce18:	b138      	cbz	r0, 800ce2a <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ce1a:	4643      	mov	r3, r8
 800ce1c:	4622      	mov	r2, r4
 800ce1e:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ce20:	b004      	add	sp, #16
 800ce22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ce26:	f7ff bd1b 	b.w	800c860 <tcp_output_control_segment>
}
 800ce2a:	b004      	add	sp, #16
 800ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ce30:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <tcp_rst+0x80>)
 800ce32:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ce36:	4908      	ldr	r1, [pc, #32]	; (800ce58 <tcp_rst+0x84>)
 800ce38:	4808      	ldr	r0, [pc, #32]	; (800ce5c <tcp_rst+0x88>)
 800ce3a:	f002 fbc1 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ce3e:	f1b8 0f00 	cmp.w	r8, #0
 800ce42:	d1d8      	bne.n	800cdf6 <tcp_rst+0x22>
 800ce44:	4b03      	ldr	r3, [pc, #12]	; (800ce54 <tcp_rst+0x80>)
 800ce46:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ce4a:	4905      	ldr	r1, [pc, #20]	; (800ce60 <tcp_rst+0x8c>)
 800ce4c:	4803      	ldr	r0, [pc, #12]	; (800ce5c <tcp_rst+0x88>)
 800ce4e:	f002 fbb7 	bl	800f5c0 <iprintf>
 800ce52:	e7d0      	b.n	800cdf6 <tcp_rst+0x22>
 800ce54:	08011688 	.word	0x08011688
 800ce58:	080119d0 	.word	0x080119d0
 800ce5c:	08010440 	.word	0x08010440
 800ce60:	080119ec 	.word	0x080119ec

0800ce64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ce64:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ce66:	4604      	mov	r4, r0
 800ce68:	b1c8      	cbz	r0, 800ce9e <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ce6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ce6c:	f7fb fd8c 	bl	8008988 <lwip_htonl>
 800ce70:	2100      	movs	r1, #0
 800ce72:	4602      	mov	r2, r0
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7ff fccb 	bl	800c810 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ce7a:	4601      	mov	r1, r0
 800ce7c:	b1b8      	cbz	r0, 800ceae <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ce7e:	1d23      	adds	r3, r4, #4
 800ce80:	4622      	mov	r2, r4
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7ff fcec 	bl	800c860 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce88:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800ce8a:	b920      	cbnz	r0, 800ce96 <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce8c:	f023 0303 	bic.w	r3, r3, #3
 800ce90:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce92:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800ce94:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce96:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ce9a:	8363      	strh	r3, [r4, #26]
}
 800ce9c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ce9e:	4b07      	ldr	r3, [pc, #28]	; (800cebc <tcp_send_empty_ack+0x58>)
 800cea0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cea4:	4906      	ldr	r1, [pc, #24]	; (800cec0 <tcp_send_empty_ack+0x5c>)
 800cea6:	4807      	ldr	r0, [pc, #28]	; (800cec4 <tcp_send_empty_ack+0x60>)
 800cea8:	f002 fb8a 	bl	800f5c0 <iprintf>
 800ceac:	e7dd      	b.n	800ce6a <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ceae:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800ceb0:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ceb4:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800ceb8:	e7eb      	b.n	800ce92 <tcp_send_empty_ack+0x2e>
 800ceba:	bf00      	nop
 800cebc:	08011688 	.word	0x08011688
 800cec0:	08011a08 	.word	0x08011a08
 800cec4:	08010440 	.word	0x08010440

0800cec8 <tcp_output>:
{
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	4604      	mov	r4, r0
 800cece:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800ced0:	f7f9 f822 	bl	8005f18 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ced4:	2c00      	cmp	r4, #0
 800ced6:	f000 81b2 	beq.w	800d23e <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ceda:	7d23      	ldrb	r3, [r4, #20]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	f000 8169 	beq.w	800d1b4 <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 800cee2:	4bae      	ldr	r3, [pc, #696]	; (800d19c <tcp_output+0x2d4>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	42a3      	cmp	r3, r4
 800cee8:	f000 8170 	beq.w	800d1cc <tcp_output+0x304>
  seg = pcb->unsent;
 800ceec:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ceee:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800cef2:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 800cef6:	b325      	cbz	r5, 800cf42 <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cef8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cefa:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f040 81a5 	bne.w	800d24e <tcp_output+0x386>
    return ip_route(src, dst);
 800cf04:	4648      	mov	r0, r9
 800cf06:	f001 f9f5 	bl	800e2f4 <ip4_route>
 800cf0a:	4680      	mov	r8, r0
  if (netif == NULL) {
 800cf0c:	f1b8 0f00 	cmp.w	r8, #0
 800cf10:	f000 81af 	beq.w	800d272 <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	b913      	cbnz	r3, 800cf1e <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cf18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf1c:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cf1e:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf20:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cf22:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cf24:	bf28      	it	cs
 800cf26:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cf28:	f7fb fd2e 	bl	8008988 <lwip_htonl>
 800cf2c:	892b      	ldrh	r3, [r5, #8]
 800cf2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800cf30:	1a9b      	subs	r3, r3, r2
 800cf32:	4418      	add	r0, r3
 800cf34:	42b0      	cmp	r0, r6
 800cf36:	d90f      	bls.n	800cf58 <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cf38:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800cf3c:	42b3      	cmp	r3, r6
 800cf3e:	f000 814f 	beq.w	800d1e0 <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 800cf42:	8b62      	ldrh	r2, [r4, #26]
 800cf44:	0791      	lsls	r1, r2, #30
 800cf46:	f100 8145 	bmi.w	800d1d4 <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cf4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800cf4e:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cf50:	8362      	strh	r2, [r4, #26]
}
 800cf52:	b005      	add	sp, #20
 800cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800cf5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 814d 	beq.w	800d200 <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 800cf66:	461f      	mov	r7, r3
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 80af 	beq.w	800d0ce <tcp_output+0x206>
 800cf70:	461f      	mov	r7, r3
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f6      	bne.n	800cf66 <tcp_output+0x9e>
 800cf78:	e0a9      	b.n	800d0ce <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cf7a:	68eb      	ldr	r3, [r5, #12]
 800cf7c:	2010      	movs	r0, #16
 800cf7e:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800cf82:	f7fb fcfd 	bl	8008980 <lwip_htons>
 800cf86:	ea4a 0000 	orr.w	r0, sl, r0
 800cf8a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800cf8e:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800cf92:	686b      	ldr	r3, [r5, #4]
 800cf94:	7b9b      	ldrb	r3, [r3, #14]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d154      	bne.n	800d044 <tcp_output+0x17c>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cf9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cf9c:	f7fb fcf4 	bl	8008988 <lwip_htonl>
 800cfa0:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cfa4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800cfa6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800cfaa:	f7fb fce9 	bl	8008980 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800cfb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cfb2:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfb6:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cfb8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfbc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cfbe:	7aab      	ldrb	r3, [r5, #10]
 800cfc0:	07db      	lsls	r3, r3, #31
 800cfc2:	f100 80c2 	bmi.w	800d14a <tcp_output+0x282>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cfc6:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800cfca:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	da01      	bge.n	800cfd6 <tcp_output+0x10e>
    pcb->rtime = 0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800cfd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80ab 	beq.w	800d134 <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cfde:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800cfe0:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cfe2:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800cfe4:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cfe6:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800cfea:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cfee:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800cff0:	1ac9      	subs	r1, r1, r3
 800cff2:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800cff4:	8901      	ldrh	r1, [r0, #8]
 800cff6:	1acb      	subs	r3, r1, r3
 800cff8:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800cffa:	f88a 2010 	strb.w	r2, [sl, #16]
 800cffe:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d002:	7aab      	ldrb	r3, [r5, #10]
 800d004:	f013 0f01 	tst.w	r3, #1
 800d008:	bf14      	ite	ne
 800d00a:	2318      	movne	r3, #24
 800d00c:	2314      	moveq	r3, #20
 800d00e:	449a      	add	sl, r3
 800d010:	45d3      	cmp	fp, sl
 800d012:	d007      	beq.n	800d024 <tcp_output+0x15c>
 800d014:	4b62      	ldr	r3, [pc, #392]	; (800d1a0 <tcp_output+0x2d8>)
 800d016:	f240 621c 	movw	r2, #1564	; 0x61c
 800d01a:	4962      	ldr	r1, [pc, #392]	; (800d1a4 <tcp_output+0x2dc>)
 800d01c:	4862      	ldr	r0, [pc, #392]	; (800d1a8 <tcp_output+0x2e0>)
 800d01e:	f002 facf 	bl	800f5c0 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d022:	6868      	ldr	r0, [r5, #4]
 800d024:	f8cd 8008 	str.w	r8, [sp, #8]
 800d028:	464a      	mov	r2, r9
 800d02a:	7aa3      	ldrb	r3, [r4, #10]
 800d02c:	4621      	mov	r1, r4
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	2306      	movs	r3, #6
 800d032:	9301      	str	r3, [sp, #4]
 800d034:	7ae3      	ldrb	r3, [r4, #11]
 800d036:	f001 faf3 	bl	800e620 <ip4_output_if>
    if (err != ERR_OK) {
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f040 8114 	bne.w	800d268 <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d040:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d048:	7d23      	ldrb	r3, [r4, #20]
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d003      	beq.n	800d056 <tcp_output+0x18e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d04e:	8b63      	ldrh	r3, [r4, #26]
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d056:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d05a:	f7fb fc95 	bl	8008988 <lwip_htonl>
 800d05e:	68eb      	ldr	r3, [r5, #12]
 800d060:	4682      	mov	sl, r0
 800d062:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800d066:	8998      	ldrh	r0, [r3, #12]
 800d068:	f7fb fc8a 	bl	8008980 <lwip_htons>
 800d06c:	f010 0303 	ands.w	r3, r0, #3
 800d070:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d072:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d074:	bf18      	it	ne
 800d076:	2301      	movne	r3, #1
 800d078:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800d07a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d07e:	1ad2      	subs	r2, r2, r3
 800d080:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800d082:	bfb8      	it	lt
 800d084:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800d086:	68eb      	ldr	r3, [r5, #12]
 800d088:	8998      	ldrh	r0, [r3, #12]
 800d08a:	f7fb fc79 	bl	8008980 <lwip_htons>
 800d08e:	f010 0003 	ands.w	r0, r0, #3
 800d092:	bf18      	it	ne
 800d094:	2001      	movne	r0, #1
 800d096:	eb10 0f0a 	cmn.w	r0, sl
 800d09a:	d044      	beq.n	800d126 <tcp_output+0x25e>
      seg->next = NULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800d0a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d043      	beq.n	800d12e <tcp_output+0x266>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d0a6:	68eb      	ldr	r3, [r5, #12]
 800d0a8:	6858      	ldr	r0, [r3, #4]
 800d0aa:	f7fb fc6d 	bl	8008988 <lwip_htonl>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	6858      	ldr	r0, [r3, #4]
 800d0b4:	f7fb fc68 	bl	8008988 <lwip_htonl>
 800d0b8:	ebaa 0000 	sub.w	r0, sl, r0
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f2c0 80a1 	blt.w	800d204 <tcp_output+0x33c>
          useg->next = seg;
 800d0c2:	603d      	str	r5, [r7, #0]
 800d0c4:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800d0c6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	f000 80c4 	beq.w	800d256 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d0ce:	68eb      	ldr	r3, [r5, #12]
 800d0d0:	6858      	ldr	r0, [r3, #4]
 800d0d2:	f7fb fc59 	bl	8008988 <lwip_htonl>
 800d0d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d0d8:	1ac0      	subs	r0, r0, r3
 800d0da:	892b      	ldrh	r3, [r5, #8]
 800d0dc:	4418      	add	r0, r3
  while (seg != NULL &&
 800d0de:	42b0      	cmp	r0, r6
 800d0e0:	f200 80bb 	bhi.w	800d25a <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 800d0e4:	68eb      	ldr	r3, [r5, #12]
 800d0e6:	8998      	ldrh	r0, [r3, #12]
 800d0e8:	f7fb fc4a 	bl	8008980 <lwip_htons>
 800d0ec:	0742      	lsls	r2, r0, #29
 800d0ee:	d412      	bmi.n	800d116 <tcp_output+0x24e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d0f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d0f2:	b14b      	cbz	r3, 800d108 <tcp_output+0x240>
 800d0f4:	8b63      	ldrh	r3, [r4, #26]
 800d0f6:	f013 0f44 	tst.w	r3, #68	; 0x44
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	d104      	bne.n	800d108 <tcp_output+0x240>
 800d0fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d100:	2900      	cmp	r1, #0
 800d102:	d038      	beq.n	800d176 <tcp_output+0x2ae>
 800d104:	6808      	ldr	r0, [r1, #0]
 800d106:	b388      	cbz	r0, 800d16c <tcp_output+0x2a4>
    if (pcb->state != SYN_SENT) {
 800d108:	7d23      	ldrb	r3, [r4, #20]
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	f47f af35 	bne.w	800cf7a <tcp_output+0xb2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d110:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d114:	e73d      	b.n	800cf92 <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 800d116:	4b22      	ldr	r3, [pc, #136]	; (800d1a0 <tcp_output+0x2d8>)
 800d118:	f240 5236 	movw	r2, #1334	; 0x536
 800d11c:	4923      	ldr	r1, [pc, #140]	; (800d1ac <tcp_output+0x2e4>)
 800d11e:	4822      	ldr	r0, [pc, #136]	; (800d1a8 <tcp_output+0x2e0>)
 800d120:	f002 fa4e 	bl	800f5c0 <iprintf>
 800d124:	e7e4      	b.n	800d0f0 <tcp_output+0x228>
      tcp_seg_free(seg);
 800d126:	4628      	mov	r0, r5
 800d128:	f7fc ff2c 	bl	8009f84 <tcp_seg_free>
 800d12c:	e7cb      	b.n	800d0c6 <tcp_output+0x1fe>
        pcb->unacked = seg;
 800d12e:	462f      	mov	r7, r5
 800d130:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800d132:	e7c8      	b.n	800d0c6 <tcp_output+0x1fe>
    pcb->rttest = tcp_ticks;
 800d134:	4b1e      	ldr	r3, [pc, #120]	; (800d1b0 <tcp_output+0x2e8>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d13a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d13e:	f7fb fc23 	bl	8008988 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d142:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d146:	63a0      	str	r0, [r4, #56]	; 0x38
 800d148:	e749      	b.n	800cfde <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d14a:	464a      	mov	r2, r9
 800d14c:	4641      	mov	r1, r8
 800d14e:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 800d152:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d156:	f7fd fe35 	bl	800adc4 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d15a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800d15e:	f7fb fc13 	bl	8008988 <lwip_htonl>
 800d162:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d166:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d16a:	e72e      	b.n	800cfca <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d16c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800d170:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800d172:	4584      	cmp	ip, r0
 800d174:	d2c8      	bcs.n	800d108 <tcp_output+0x240>
 800d176:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0c4      	beq.n	800d108 <tcp_output+0x240>
 800d17e:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800d182:	280f      	cmp	r0, #15
 800d184:	d8c0      	bhi.n	800d108 <tcp_output+0x240>
 800d186:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800d18a:	d1bd      	bne.n	800d108 <tcp_output+0x240>
  if (pcb->unsent == NULL) {
 800d18c:	2900      	cmp	r1, #0
 800d18e:	f47f aedc 	bne.w	800cf4a <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 800d192:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d194:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800d196:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800d19a:	e6d6      	b.n	800cf4a <tcp_output+0x82>
 800d19c:	2401082c 	.word	0x2401082c
 800d1a0:	08011688 	.word	0x08011688
 800d1a4:	08011a80 	.word	0x08011a80
 800d1a8:	08010440 	.word	0x08010440
 800d1ac:	08011a68 	.word	0x08011a68
 800d1b0:	240107f8 	.word	0x240107f8
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d1b4:	4b30      	ldr	r3, [pc, #192]	; (800d278 <tcp_output+0x3b0>)
 800d1b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d1ba:	4930      	ldr	r1, [pc, #192]	; (800d27c <tcp_output+0x3b4>)
 800d1bc:	4830      	ldr	r0, [pc, #192]	; (800d280 <tcp_output+0x3b8>)
 800d1be:	f002 f9ff 	bl	800f5c0 <iprintf>
  if (tcp_input_pcb == pcb) {
 800d1c2:	4b30      	ldr	r3, [pc, #192]	; (800d284 <tcp_output+0x3bc>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	f47f ae90 	bne.w	800ceec <tcp_output+0x24>
    return ERR_OK;
 800d1cc:	2000      	movs	r0, #0
}
 800d1ce:	b005      	add	sp, #20
 800d1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800d1d4:	4620      	mov	r0, r4
}
 800d1d6:	b005      	add	sp, #20
 800d1d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800d1dc:	f7ff be42 	b.w	800ce64 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d1e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f47f aead 	bne.w	800cf42 <tcp_output+0x7a>
 800d1e8:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f47f aea8 	bne.w	800cf42 <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 800d1f2:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800d1f6:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800d1fa:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800d1fe:	e6a0      	b.n	800cf42 <tcp_output+0x7a>
  useg = pcb->unacked;
 800d200:	461f      	mov	r7, r3
 800d202:	e764      	b.n	800d0ce <tcp_output+0x206>
          while (*cur_seg &&
 800d204:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d206:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800d20a:	b92b      	cbnz	r3, 800d218 <tcp_output+0x350>
 800d20c:	e013      	b.n	800d236 <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 800d20e:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800d212:	f8db 3000 	ldr.w	r3, [fp]
 800d216:	b173      	cbz	r3, 800d236 <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	6858      	ldr	r0, [r3, #4]
 800d21c:	f7fb fbb4 	bl	8008988 <lwip_htonl>
 800d220:	68eb      	ldr	r3, [r5, #12]
 800d222:	4682      	mov	sl, r0
 800d224:	6858      	ldr	r0, [r3, #4]
 800d226:	f7fb fbaf 	bl	8008988 <lwip_htonl>
 800d22a:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800d22e:	2800      	cmp	r0, #0
 800d230:	dbed      	blt.n	800d20e <tcp_output+0x346>
            cur_seg = &((*cur_seg)->next );
 800d232:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800d236:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800d238:	f8cb 5000 	str.w	r5, [fp]
 800d23c:	e743      	b.n	800d0c6 <tcp_output+0x1fe>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d23e:	4b0e      	ldr	r3, [pc, #56]	; (800d278 <tcp_output+0x3b0>)
 800d240:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d244:	4910      	ldr	r1, [pc, #64]	; (800d288 <tcp_output+0x3c0>)
 800d246:	480e      	ldr	r0, [pc, #56]	; (800d280 <tcp_output+0x3b8>)
 800d248:	f002 f9ba 	bl	800f5c0 <iprintf>
 800d24c:	e645      	b.n	800ceda <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800d24e:	f7fc f987 	bl	8009560 <netif_get_by_index>
 800d252:	4680      	mov	r8, r0
 800d254:	e65a      	b.n	800cf0c <tcp_output+0x44>
 800d256:	8b63      	ldrh	r3, [r4, #26]
 800d258:	e79b      	b.n	800d192 <tcp_output+0x2ca>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d25a:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800d25c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d25e:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800d260:	2900      	cmp	r1, #0
 800d262:	f47f ae72 	bne.w	800cf4a <tcp_output+0x82>
 800d266:	e794      	b.n	800d192 <tcp_output+0x2ca>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d268:	8b63      	ldrh	r3, [r4, #26]
 800d26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d26e:	8363      	strh	r3, [r4, #26]
      return err;
 800d270:	e66f      	b.n	800cf52 <tcp_output+0x8a>
    return ERR_RTE;
 800d272:	f06f 0003 	mvn.w	r0, #3
 800d276:	e66c      	b.n	800cf52 <tcp_output+0x8a>
 800d278:	08011688 	.word	0x08011688
 800d27c:	08011a40 	.word	0x08011a40
 800d280:	08010440 	.word	0x08010440
 800d284:	2401082c 	.word	0x2401082c
 800d288:	08011a28 	.word	0x08011a28

0800d28c <tcp_rexmit_rto_commit>:
{
 800d28c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d28e:	4604      	mov	r4, r0
 800d290:	b158      	cbz	r0, 800d2aa <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800d292:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d296:	2bff      	cmp	r3, #255	; 0xff
 800d298:	d002      	beq.n	800d2a0 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800d29a:	3301      	adds	r3, #1
 800d29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800d2a0:	4620      	mov	r0, r4
}
 800d2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800d2a6:	f7ff be0f 	b.w	800cec8 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d2aa:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <tcp_rexmit_rto_commit+0x30>)
 800d2ac:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d2b0:	4903      	ldr	r1, [pc, #12]	; (800d2c0 <tcp_rexmit_rto_commit+0x34>)
 800d2b2:	4804      	ldr	r0, [pc, #16]	; (800d2c4 <tcp_rexmit_rto_commit+0x38>)
 800d2b4:	f002 f984 	bl	800f5c0 <iprintf>
 800d2b8:	e7eb      	b.n	800d292 <tcp_rexmit_rto_commit+0x6>
 800d2ba:	bf00      	nop
 800d2bc:	08011688 	.word	0x08011688
 800d2c0:	08011a94 	.word	0x08011a94
 800d2c4:	08010440 	.word	0x08010440

0800d2c8 <tcp_rexmit_rto>:
{
 800d2c8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	b118      	cbz	r0, 800d2d6 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d2ce:	f7ff fcbd 	bl	800cc4c <tcp_rexmit_rto_prepare>
 800d2d2:	b198      	cbz	r0, 800d2fc <tcp_rexmit_rto+0x34>
}
 800d2d4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d2d6:	4b0f      	ldr	r3, [pc, #60]	; (800d314 <tcp_rexmit_rto+0x4c>)
 800d2d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d2dc:	490e      	ldr	r1, [pc, #56]	; (800d318 <tcp_rexmit_rto+0x50>)
 800d2de:	480f      	ldr	r0, [pc, #60]	; (800d31c <tcp_rexmit_rto+0x54>)
 800d2e0:	f002 f96e 	bl	800f5c0 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f7ff fcb1 	bl	800cc4c <tcp_rexmit_rto_prepare>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d1f2      	bne.n	800d2d4 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d2ee:	4b09      	ldr	r3, [pc, #36]	; (800d314 <tcp_rexmit_rto+0x4c>)
 800d2f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d2f4:	490a      	ldr	r1, [pc, #40]	; (800d320 <tcp_rexmit_rto+0x58>)
 800d2f6:	4809      	ldr	r0, [pc, #36]	; (800d31c <tcp_rexmit_rto+0x54>)
 800d2f8:	f002 f962 	bl	800f5c0 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800d2fc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d300:	2bff      	cmp	r3, #255	; 0xff
 800d302:	d002      	beq.n	800d30a <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800d304:	3301      	adds	r3, #1
 800d306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800d30a:	4620      	mov	r0, r4
}
 800d30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800d310:	f7ff bdda 	b.w	800cec8 <tcp_output>
 800d314:	08011688 	.word	0x08011688
 800d318:	08011ab8 	.word	0x08011ab8
 800d31c:	08010440 	.word	0x08010440
 800d320:	08011a94 	.word	0x08011a94

0800d324 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d324:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d326:	4604      	mov	r4, r0
 800d328:	b188      	cbz	r0, 800d34e <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d32a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d32c:	3801      	subs	r0, #1
 800d32e:	f7fb fb2b 	bl	8008988 <lwip_htonl>
 800d332:	2100      	movs	r1, #0
 800d334:	4602      	mov	r2, r0
 800d336:	4620      	mov	r0, r4
 800d338:	f7ff fa6a 	bl	800c810 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d33c:	4601      	mov	r1, r0
 800d33e:	b170      	cbz	r0, 800d35e <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d340:	1d23      	adds	r3, r4, #4
 800d342:	4622      	mov	r2, r4
 800d344:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d34a:	f7ff ba89 	b.w	800c860 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d34e:	4b05      	ldr	r3, [pc, #20]	; (800d364 <tcp_keepalive+0x40>)
 800d350:	f640 0224 	movw	r2, #2084	; 0x824
 800d354:	4904      	ldr	r1, [pc, #16]	; (800d368 <tcp_keepalive+0x44>)
 800d356:	4805      	ldr	r0, [pc, #20]	; (800d36c <tcp_keepalive+0x48>)
 800d358:	f002 f932 	bl	800f5c0 <iprintf>
 800d35c:	e7e5      	b.n	800d32a <tcp_keepalive+0x6>
}
 800d35e:	f04f 30ff 	mov.w	r0, #4294967295
 800d362:	bd10      	pop	{r4, pc}
 800d364:	08011688 	.word	0x08011688
 800d368:	08011ad4 	.word	0x08011ad4
 800d36c:	08010440 	.word	0x08010440

0800d370 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d374:	4604      	mov	r4, r0
 800d376:	2800      	cmp	r0, #0
 800d378:	d051      	beq.n	800d41e <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d37a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800d37c:	2d00      	cmp	r5, #0
 800d37e:	d04b      	beq.n	800d418 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d380:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800d384:	2bff      	cmp	r3, #255	; 0xff
 800d386:	d002      	beq.n	800d38e <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800d388:	3301      	adds	r3, #1
 800d38a:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d38e:	68eb      	ldr	r3, [r5, #12]
 800d390:	8998      	ldrh	r0, [r3, #12]
 800d392:	f7fb faf5 	bl	8008980 <lwip_htons>
 800d396:	07c3      	lsls	r3, r0, #31
 800d398:	d527      	bpl.n	800d3ea <tcp_zero_window_probe+0x7a>
 800d39a:	8929      	ldrh	r1, [r5, #8]
 800d39c:	bb29      	cbnz	r1, 800d3ea <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d39e:	68eb      	ldr	r3, [r5, #12]
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	f7ff fa34 	bl	800c810 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	b388      	cbz	r0, 800d410 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d3ac:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d3b0:	2011      	movs	r0, #17
 800d3b2:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800d3b6:	f7fb fae3 	bl	8008980 <lwip_htons>
 800d3ba:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800d3be:	4338      	orrs	r0, r7
 800d3c0:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d3c4:	68eb      	ldr	r3, [r5, #12]
 800d3c6:	6858      	ldr	r0, [r3, #4]
 800d3c8:	f7fb fade 	bl	8008988 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d3ce:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3d4:	1a1b      	subs	r3, r3, r0
 800d3d6:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d3d8:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800d3dc:	bfb8      	it	lt
 800d3de:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d3e0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d3e6:	f7ff ba3b 	b.w	800c860 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d3ea:	68eb      	ldr	r3, [r5, #12]
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	f7ff fa0d 	bl	800c810 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	b150      	cbz	r0, 800d410 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d3fa:	6868      	ldr	r0, [r5, #4]
 800d3fc:	892a      	ldrh	r2, [r5, #8]
 800d3fe:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800d400:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d402:	1a9b      	subs	r3, r3, r2
 800d404:	2201      	movs	r2, #1
 800d406:	3114      	adds	r1, #20
 800d408:	b29b      	uxth	r3, r3
 800d40a:	f7fc fc53 	bl	8009cb4 <pbuf_copy_partial>
 800d40e:	e7d9      	b.n	800d3c4 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800d418:	4628      	mov	r0, r5
}
 800d41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d41e:	4b04      	ldr	r3, [pc, #16]	; (800d430 <tcp_zero_window_probe+0xc0>)
 800d420:	f640 024f 	movw	r2, #2127	; 0x84f
 800d424:	4903      	ldr	r1, [pc, #12]	; (800d434 <tcp_zero_window_probe+0xc4>)
 800d426:	4804      	ldr	r0, [pc, #16]	; (800d438 <tcp_zero_window_probe+0xc8>)
 800d428:	f002 f8ca 	bl	800f5c0 <iprintf>
 800d42c:	e7a5      	b.n	800d37a <tcp_zero_window_probe+0xa>
 800d42e:	bf00      	nop
 800d430:	08011688 	.word	0x08011688
 800d434:	08011af0 	.word	0x08011af0
 800d438:	08010440 	.word	0x08010440

0800d43c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d440:	200a      	movs	r0, #10
{
 800d442:	460e      	mov	r6, r1
 800d444:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d446:	f7fb fe31 	bl	80090ac <memp_malloc>
  if (timeout == NULL) {
 800d44a:	b190      	cbz	r0, 800d472 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800d44c:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d44e:	490d      	ldr	r1, [pc, #52]	; (800d484 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800d450:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800d452:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800d454:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800d458:	680b      	ldr	r3, [r1, #0]
 800d45a:	b91b      	cbnz	r3, 800d464 <sys_timeout_abs+0x28>
 800d45c:	e007      	b.n	800d46e <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d45e:	4619      	mov	r1, r3
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	b11b      	cbz	r3, 800d46c <sys_timeout_abs+0x30>
 800d464:	685a      	ldr	r2, [r3, #4]
 800d466:	1aa2      	subs	r2, r4, r2
 800d468:	2a00      	cmp	r2, #0
 800d46a:	daf8      	bge.n	800d45e <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800d46c:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800d46e:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800d470:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d472:	4b05      	ldr	r3, [pc, #20]	; (800d488 <sys_timeout_abs+0x4c>)
 800d474:	22be      	movs	r2, #190	; 0xbe
 800d476:	4905      	ldr	r1, [pc, #20]	; (800d48c <sys_timeout_abs+0x50>)
 800d478:	4805      	ldr	r0, [pc, #20]	; (800d490 <sys_timeout_abs+0x54>)
}
 800d47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d47e:	f002 b89f 	b.w	800f5c0 <iprintf>
 800d482:	bf00      	nop
 800d484:	24010848 	.word	0x24010848
 800d488:	08011b14 	.word	0x08011b14
 800d48c:	08011b48 	.word	0x08011b48
 800d490:	08010440 	.word	0x08010440

0800d494 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d494:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d496:	6843      	ldr	r3, [r0, #4]
{
 800d498:	4604      	mov	r4, r0
  cyclic->handler();
 800d49a:	4798      	blx	r3

  now = sys_now();
 800d49c:	f7f8 fbb8 	bl	8005c10 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4a0:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <lwip_cyclic_timer+0x34>)
 800d4a2:	6825      	ldr	r5, [r4, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4a6:	4909      	ldr	r1, [pc, #36]	; (800d4cc <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4a8:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d4aa:	1a1a      	subs	r2, r3, r0
 800d4ac:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4ae:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d4b0:	da04      	bge.n	800d4bc <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4b2:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4b8:	f7ff bfc0 	b.w	800d43c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4bc:	4618      	mov	r0, r3
}
 800d4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4c2:	f7ff bfbb 	b.w	800d43c <sys_timeout_abs>
 800d4c6:	bf00      	nop
 800d4c8:	24010844 	.word	0x24010844
 800d4cc:	0800d495 	.word	0x0800d495

0800d4d0 <tcpip_tcp_timer>:
{
 800d4d0:	b508      	push	{r3, lr}
  tcp_tmr();
 800d4d2:	f7fd fc49 	bl	800ad68 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d4d6:	4b0a      	ldr	r3, [pc, #40]	; (800d500 <tcpip_tcp_timer+0x30>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	b153      	cbz	r3, 800d4f2 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800d4dc:	f7f8 fd1c 	bl	8005f18 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d4e0:	f7f8 fb96 	bl	8005c10 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	4907      	ldr	r1, [pc, #28]	; (800d504 <tcpip_tcp_timer+0x34>)
 800d4e8:	30fa      	adds	r0, #250	; 0xfa
}
 800d4ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d4ee:	f7ff bfa5 	b.w	800d43c <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d4f2:	4b05      	ldr	r3, [pc, #20]	; (800d508 <tcpip_tcp_timer+0x38>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1f0      	bne.n	800d4dc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800d4fa:	4a04      	ldr	r2, [pc, #16]	; (800d50c <tcpip_tcp_timer+0x3c>)
 800d4fc:	6013      	str	r3, [r2, #0]
}
 800d4fe:	bd08      	pop	{r3, pc}
 800d500:	240107e8 	.word	0x240107e8
 800d504:	0800d4d1 	.word	0x0800d4d1
 800d508:	24010800 	.word	0x24010800
 800d50c:	2401084c 	.word	0x2401084c

0800d510 <tcp_timer_needed>:
{
 800d510:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800d512:	f7f8 fd01 	bl	8005f18 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d516:	4b0c      	ldr	r3, [pc, #48]	; (800d548 <tcp_timer_needed+0x38>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	b99a      	cbnz	r2, 800d544 <tcp_timer_needed+0x34>
 800d51c:	4a0b      	ldr	r2, [pc, #44]	; (800d54c <tcp_timer_needed+0x3c>)
 800d51e:	6812      	ldr	r2, [r2, #0]
 800d520:	b162      	cbz	r2, 800d53c <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800d522:	2201      	movs	r2, #1
 800d524:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d526:	f7f8 fcf7 	bl	8005f18 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d52a:	f7f8 fb71 	bl	8005c10 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d52e:	2200      	movs	r2, #0
 800d530:	4907      	ldr	r1, [pc, #28]	; (800d550 <tcp_timer_needed+0x40>)
 800d532:	30fa      	adds	r0, #250	; 0xfa
}
 800d534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d538:	f7ff bf80 	b.w	800d43c <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d53c:	4a05      	ldr	r2, [pc, #20]	; (800d554 <tcp_timer_needed+0x44>)
 800d53e:	6812      	ldr	r2, [r2, #0]
 800d540:	2a00      	cmp	r2, #0
 800d542:	d1ee      	bne.n	800d522 <tcp_timer_needed+0x12>
}
 800d544:	bd08      	pop	{r3, pc}
 800d546:	bf00      	nop
 800d548:	2401084c 	.word	0x2401084c
 800d54c:	240107e8 	.word	0x240107e8
 800d550:	0800d4d1 	.word	0x0800d4d1
 800d554:	24010800 	.word	0x24010800

0800d558 <sys_timeouts_init>:
{
 800d558:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d55a:	4c0c      	ldr	r4, [pc, #48]	; (800d58c <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800d55c:	f7f8 fcdc 	bl	8005f18 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d560:	f7f8 fb56 	bl	8005c10 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d564:	490a      	ldr	r1, [pc, #40]	; (800d590 <sys_timeouts_init+0x38>)
 800d566:	f104 0208 	add.w	r2, r4, #8
 800d56a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800d56e:	f7ff ff65 	bl	800d43c <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800d572:	f7f8 fcd1 	bl	8005f18 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d576:	f7f8 fb4b 	bl	8005c10 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d57a:	f104 0210 	add.w	r2, r4, #16
 800d57e:	4904      	ldr	r1, [pc, #16]	; (800d590 <sys_timeouts_init+0x38>)
 800d580:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800d584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d588:	f7ff bf58 	b.w	800d43c <sys_timeout_abs>
 800d58c:	08011b88 	.word	0x08011b88
 800d590:	0800d495 	.word	0x0800d495

0800d594 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800d598:	f7f8 fcbe 	bl	8005f18 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d59c:	4c10      	ldr	r4, [pc, #64]	; (800d5e0 <sys_check_timeouts+0x4c>)
 800d59e:	f7f8 fb37 	bl	8005c10 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800d5a2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800d5e4 <sys_check_timeouts+0x50>
  now = sys_now();
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	e00f      	b.n	800d5ca <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	eba7 0c02 	sub.w	ip, r7, r2
 800d5b0:	f1bc 0f00 	cmp.w	ip, #0
 800d5b4:	db0e      	blt.n	800d5d4 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800d5b6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800d5b8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800d5ba:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800d5be:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800d5c2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5c4:	f7fb fdb8 	bl	8009138 <memp_free>
    if (handler != NULL) {
 800d5c8:	b935      	cbnz	r5, 800d5d8 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800d5ca:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5cc:	200a      	movs	r0, #10
 800d5ce:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1ea      	bne.n	800d5aa <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d5d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800d5d8:	4648      	mov	r0, r9
 800d5da:	47a8      	blx	r5
 800d5dc:	e7f5      	b.n	800d5ca <sys_check_timeouts+0x36>
 800d5de:	bf00      	nop
 800d5e0:	24010848 	.word	0x24010848
 800d5e4:	24010844 	.word	0x24010844

0800d5e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800d5e8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d5ea:	4c08      	ldr	r4, [pc, #32]	; (800d60c <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800d5ec:	f7f8 fc94 	bl	8005f18 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	b13b      	cbz	r3, 800d604 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800d5f4:	f7f8 fb0c 	bl	8005c10 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800d5f8:	6823      	ldr	r3, [r4, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
    return 0;
 800d5fc:	1a18      	subs	r0, r3, r0
 800d5fe:	bf48      	it	mi
 800d600:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800d602:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	bf00      	nop
 800d60c:	24010848 	.word	0x24010848

0800d610 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d610:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d612:	f001 fed5 	bl	800f3c0 <rand>
 800d616:	4b02      	ldr	r3, [pc, #8]	; (800d620 <udp_init+0x10>)
 800d618:	4a02      	ldr	r2, [pc, #8]	; (800d624 <udp_init+0x14>)
 800d61a:	4303      	orrs	r3, r0
 800d61c:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800d61e:	bd08      	pop	{r3, pc}
 800d620:	ffffc000 	.word	0xffffc000
 800d624:	24000076 	.word	0x24000076

0800d628 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	4680      	mov	r8, r0
 800d62e:	b085      	sub	sp, #20
 800d630:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800d632:	f7f8 fc71 	bl	8005f18 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d636:	f1b8 0f00 	cmp.w	r8, #0
 800d63a:	f000 80af 	beq.w	800d79c <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d63e:	2f00      	cmp	r7, #0
 800d640:	f000 80b5 	beq.w	800d7ae <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d644:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800d648:	2b07      	cmp	r3, #7
 800d64a:	f240 8091 	bls.w	800d770 <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d64e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800d824 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800d652:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d656:	f8d9 1000 	ldr.w	r1, [r9]
 800d65a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d65e:	f000 fff1 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800d662:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d664:	8820      	ldrh	r0, [r4, #0]
 800d666:	f7fb f98b 	bl	8008980 <lwip_htons>
 800d66a:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800d66c:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800d66e:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800d670:	f7fb f986 	bl	8008980 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d674:	4b63      	ldr	r3, [pc, #396]	; (800d804 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800d676:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d678:	681c      	ldr	r4, [r3, #0]
 800d67a:	2c00      	cmp	r4, #0
 800d67c:	d064      	beq.n	800d748 <udp_input+0x120>
  uncon_pcb = NULL;
 800d67e:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d682:	f8df c190 	ldr.w	ip, [pc, #400]	; 800d814 <udp_input+0x1ec>
 800d686:	4960      	ldr	r1, [pc, #384]	; (800d808 <udp_input+0x1e0>)
  prev = NULL;
 800d688:	465e      	mov	r6, fp
 800d68a:	e004      	b.n	800d696 <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d68c:	68e2      	ldr	r2, [r4, #12]
 800d68e:	4626      	mov	r6, r4
 800d690:	2a00      	cmp	r2, #0
 800d692:	d056      	beq.n	800d742 <udp_input+0x11a>
 800d694:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d696:	8a62      	ldrh	r2, [r4, #18]
 800d698:	42aa      	cmp	r2, r5
 800d69a:	d1f7      	bne.n	800d68c <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	d06d      	beq.n	800d77c <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6a0:	7a20      	ldrb	r0, [r4, #8]
 800d6a2:	b138      	cbz	r0, 800d6b4 <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d6a8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800d6ac:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	4290      	cmp	r0, r2
 800d6b2:	d1eb      	bne.n	800d68c <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6b4:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800d6b6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ba:	d038      	beq.n	800d72e <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6bc:	b13a      	cbz	r2, 800d6ce <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6be:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6c2:	1c43      	adds	r3, r0, #1
 800d6c4:	d003      	beq.n	800d6ce <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d6c6:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	4218      	tst	r0, r3
 800d6cc:	d1de      	bne.n	800d68c <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d6ce:	7c20      	ldrb	r0, [r4, #16]
 800d6d0:	0743      	lsls	r3, r0, #29
 800d6d2:	d409      	bmi.n	800d6e8 <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 800d6d4:	f1bb 0f00 	cmp.w	fp, #0
 800d6d8:	d059      	beq.n	800d78e <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d6da:	f1ba 0f00 	cmp.w	sl, #0
 800d6de:	d003      	beq.n	800d6e8 <udp_input+0xc0>
 800d6e0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d069      	beq.n	800d7bc <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d6e8:	8aa2      	ldrh	r2, [r4, #20]
 800d6ea:	9803      	ldr	r0, [sp, #12]
 800d6ec:	4282      	cmp	r2, r0
 800d6ee:	d1cd      	bne.n	800d68c <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d6f0:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d6f2:	b11a      	cbz	r2, 800d6fc <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d6f4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d6f8:	4282      	cmp	r2, r0
 800d6fa:	d1c7      	bne.n	800d68c <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d6fc:	b12e      	cbz	r6, 800d70a <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d6fe:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800d700:	4a40      	ldr	r2, [pc, #256]	; (800d804 <udp_input+0x1dc>)
          prev->next = pcb->next;
 800d702:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800d704:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800d706:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800d708:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d70a:	2108      	movs	r1, #8
 800d70c:	4640      	mov	r0, r8
 800d70e:	f7fc f86d 	bl	80097ec <pbuf_remove_header>
 800d712:	2800      	cmp	r0, #0
 800d714:	d15b      	bne.n	800d7ce <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d716:	69a5      	ldr	r5, [r4, #24]
 800d718:	b355      	cbz	r5, 800d770 <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d71a:	9b03      	ldr	r3, [sp, #12]
 800d71c:	4642      	mov	r2, r8
 800d71e:	69e0      	ldr	r0, [r4, #28]
 800d720:	4621      	mov	r1, r4
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	4b39      	ldr	r3, [pc, #228]	; (800d80c <udp_input+0x1e4>)
 800d726:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d728:	b005      	add	sp, #20
 800d72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d72e:	2a00      	cmp	r2, #0
 800d730:	d0cd      	beq.n	800d6ce <udp_input+0xa6>
 800d732:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d736:	4282      	cmp	r2, r0
 800d738:	d0c9      	beq.n	800d6ce <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d73a:	68e2      	ldr	r2, [r4, #12]
 800d73c:	4626      	mov	r6, r4
 800d73e:	2a00      	cmp	r2, #0
 800d740:	d1a8      	bne.n	800d694 <udp_input+0x6c>
  if (pcb != NULL) {
 800d742:	f1bb 0f00 	cmp.w	fp, #0
 800d746:	d15b      	bne.n	800d800 <udp_input+0x1d8>
  if (for_us) {
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d10e      	bne.n	800d770 <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d752:	2108      	movs	r1, #8
 800d754:	4640      	mov	r0, r8
 800d756:	f7fc f849 	bl	80097ec <pbuf_remove_header>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d137      	bne.n	800d7ce <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d75e:	f1ba 0f00 	cmp.w	sl, #0
 800d762:	d105      	bne.n	800d770 <udp_input+0x148>
 800d764:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d76c:	2be0      	cmp	r3, #224	; 0xe0
 800d76e:	d13b      	bne.n	800d7e8 <udp_input+0x1c0>
      pbuf_free(p);
 800d770:	4640      	mov	r0, r8
}
 800d772:	b005      	add	sp, #20
 800d774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800d778:	f7fc b8a4 	b.w	80098c4 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d77c:	4663      	mov	r3, ip
 800d77e:	2288      	movs	r2, #136	; 0x88
 800d780:	4823      	ldr	r0, [pc, #140]	; (800d810 <udp_input+0x1e8>)
 800d782:	f001 ff1d 	bl	800f5c0 <iprintf>
 800d786:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800d814 <udp_input+0x1ec>
 800d78a:	491f      	ldr	r1, [pc, #124]	; (800d808 <udp_input+0x1e0>)
 800d78c:	e788      	b.n	800d6a0 <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 800d78e:	8aa2      	ldrh	r2, [r4, #20]
 800d790:	46a3      	mov	fp, r4
 800d792:	9803      	ldr	r0, [sp, #12]
 800d794:	4282      	cmp	r2, r0
 800d796:	f47f af79 	bne.w	800d68c <udp_input+0x64>
 800d79a:	e7a9      	b.n	800d6f0 <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d79c:	4b1d      	ldr	r3, [pc, #116]	; (800d814 <udp_input+0x1ec>)
 800d79e:	22cf      	movs	r2, #207	; 0xcf
 800d7a0:	491d      	ldr	r1, [pc, #116]	; (800d818 <udp_input+0x1f0>)
 800d7a2:	481b      	ldr	r0, [pc, #108]	; (800d810 <udp_input+0x1e8>)
 800d7a4:	f001 ff0c 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d7a8:	2f00      	cmp	r7, #0
 800d7aa:	f47f af4b 	bne.w	800d644 <udp_input+0x1c>
 800d7ae:	4b19      	ldr	r3, [pc, #100]	; (800d814 <udp_input+0x1ec>)
 800d7b0:	22d0      	movs	r2, #208	; 0xd0
 800d7b2:	491a      	ldr	r1, [pc, #104]	; (800d81c <udp_input+0x1f4>)
 800d7b4:	4816      	ldr	r0, [pc, #88]	; (800d810 <udp_input+0x1e8>)
 800d7b6:	f001 ff03 	bl	800f5c0 <iprintf>
 800d7ba:	e743      	b.n	800d644 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f8db 3000 	ldr.w	r3, [fp]
 800d7c2:	4283      	cmp	r3, r0
 800d7c4:	d090      	beq.n	800d6e8 <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d7c6:	4290      	cmp	r0, r2
 800d7c8:	bf08      	it	eq
 800d7ca:	46a3      	moveq	fp, r4
 800d7cc:	e78c      	b.n	800d6e8 <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d7ce:	4b11      	ldr	r3, [pc, #68]	; (800d814 <udp_input+0x1ec>)
 800d7d0:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d7d4:	4912      	ldr	r1, [pc, #72]	; (800d820 <udp_input+0x1f8>)
 800d7d6:	480e      	ldr	r0, [pc, #56]	; (800d810 <udp_input+0x1e8>)
 800d7d8:	f001 fef2 	bl	800f5c0 <iprintf>
      pbuf_free(p);
 800d7dc:	4640      	mov	r0, r8
}
 800d7de:	b005      	add	sp, #20
 800d7e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800d7e4:	f7fc b86e 	b.w	80098c4 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d7e8:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	3108      	adds	r1, #8
 800d7f0:	b209      	sxth	r1, r1
 800d7f2:	f7fc f82f 	bl	8009854 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d7f6:	2103      	movs	r1, #3
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	f000 fd73 	bl	800e2e4 <icmp_dest_unreach>
 800d7fe:	e7b7      	b.n	800d770 <udp_input+0x148>
 800d800:	465c      	mov	r4, fp
 800d802:	e782      	b.n	800d70a <udp_input+0xe2>
 800d804:	24010850 	.word	0x24010850
 800d808:	08011c04 	.word	0x08011c04
 800d80c:	24009d38 	.word	0x24009d38
 800d810:	08010440 	.word	0x08010440
 800d814:	08011ba0 	.word	0x08011ba0
 800d818:	08011bd0 	.word	0x08011bd0
 800d81c:	08011be8 	.word	0x08011be8
 800d820:	08011c2c 	.word	0x08011c2c
 800d824:	24009d28 	.word	0x24009d28

0800d828 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d828:	b110      	cbz	r0, 800d830 <udp_netif_ip_addr_changed+0x8>
 800d82a:	6802      	ldr	r2, [r0, #0]
 800d82c:	b101      	cbz	r1, 800d830 <udp_netif_ip_addr_changed+0x8>
 800d82e:	b902      	cbnz	r2, 800d832 <udp_netif_ip_addr_changed+0xa>
 800d830:	4770      	bx	lr
 800d832:	680b      	ldr	r3, [r1, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d0fb      	beq.n	800d830 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d838:	4b08      	ldr	r3, [pc, #32]	; (800d85c <udp_netif_ip_addr_changed+0x34>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0f7      	beq.n	800d830 <udp_netif_ip_addr_changed+0x8>
{
 800d840:	b410      	push	{r4}
 800d842:	e000      	b.n	800d846 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d844:	6802      	ldr	r2, [r0, #0]
 800d846:	681c      	ldr	r4, [r3, #0]
 800d848:	4294      	cmp	r4, r2
 800d84a:	d101      	bne.n	800d850 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d84c:	680a      	ldr	r2, [r1, #0]
 800d84e:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1f6      	bne.n	800d844 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800d856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	24010850 	.word	0x24010850

0800d860 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d864:	468b      	mov	fp, r1
 800d866:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d868:	f04f 080a 	mov.w	r8, #10
{
 800d86c:	b085      	sub	sp, #20
 800d86e:	4617      	mov	r7, r2
 800d870:	4e52      	ldr	r6, [pc, #328]	; (800d9bc <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d872:	465a      	mov	r2, fp
{
 800d874:	4605      	mov	r5, r0
 800d876:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d878:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800d87a:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d87c:	46c6      	mov	lr, r8
 800d87e:	46c3      	mov	fp, r8
 800d880:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d882:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d884:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800d888:	e004      	b.n	800d894 <etharp_find_entry+0x34>
 800d88a:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d88c:	3301      	adds	r3, #1
 800d88e:	3118      	adds	r1, #24
 800d890:	2b0a      	cmp	r3, #10
 800d892:	d016      	beq.n	800d8c2 <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d894:	2c0a      	cmp	r4, #10
 800d896:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800d89a:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d89c:	d13a      	bne.n	800d914 <etharp_find_entry+0xb4>
 800d89e:	2a00      	cmp	r2, #0
 800d8a0:	d0f3      	beq.n	800d88a <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d8a2:	b11d      	cbz	r5, 800d8ac <etharp_find_entry+0x4c>
 800d8a4:	6828      	ldr	r0, [r5, #0]
 800d8a6:	684f      	ldr	r7, [r1, #4]
 800d8a8:	42b8      	cmp	r0, r7
 800d8aa:	d03e      	beq.n	800d92a <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d8ac:	2a01      	cmp	r2, #1
 800d8ae:	d034      	beq.n	800d91a <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d8b0:	8a4a      	ldrh	r2, [r1, #18]
 800d8b2:	454a      	cmp	r2, r9
 800d8b4:	d3ea      	bcc.n	800d88c <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8b6:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800d8b8:	4691      	mov	r9, r2
 800d8ba:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8bc:	3118      	adds	r1, #24
 800d8be:	2b0a      	cmp	r3, #10
 800d8c0:	d1e8      	bne.n	800d894 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d8c2:	46da      	mov	sl, fp
 800d8c4:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800d8c8:	f1bb 0f01 	cmp.w	fp, #1
 800d8cc:	d172      	bne.n	800d9b4 <etharp_find_entry+0x154>
 800d8ce:	2c0a      	cmp	r4, #10
 800d8d0:	d032      	beq.n	800d938 <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d8d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d8d6:	46a1      	mov	r9, r4
 800d8d8:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800d8dc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800d8e0:	7d1b      	ldrb	r3, [r3, #20]
 800d8e2:	b133      	cbz	r3, 800d8f2 <etharp_find_entry+0x92>
 800d8e4:	4b36      	ldr	r3, [pc, #216]	; (800d9c0 <etharp_find_entry+0x160>)
 800d8e6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d8ea:	4936      	ldr	r1, [pc, #216]	; (800d9c4 <etharp_find_entry+0x164>)
 800d8ec:	4836      	ldr	r0, [pc, #216]	; (800d9c8 <etharp_find_entry+0x168>)
 800d8ee:	f001 fe67 	bl	800f5c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d8f2:	b12d      	cbz	r5, 800d900 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d8f4:	eb08 0309 	add.w	r3, r8, r9
 800d8f8:	682a      	ldr	r2, [r5, #0]
 800d8fa:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800d8fe:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800d900:	44c8      	add	r8, r9
 800d902:	2300      	movs	r3, #0
 800d904:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800d908:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d90a:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800d90c:	4620      	mov	r0, r4
 800d90e:	b005      	add	sp, #20
 800d910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800d914:	2a00      	cmp	r2, #0
 800d916:	d0b9      	beq.n	800d88c <etharp_find_entry+0x2c>
 800d918:	e7c3      	b.n	800d8a2 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800d91a:	680a      	ldr	r2, [r1, #0]
 800d91c:	b3a2      	cbz	r2, 800d988 <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800d91e:	8a4a      	ldrh	r2, [r1, #18]
 800d920:	4552      	cmp	r2, sl
 800d922:	d3b3      	bcc.n	800d88c <etharp_find_entry+0x2c>
 800d924:	4692      	mov	sl, r2
 800d926:	46e0      	mov	r8, ip
 800d928:	e7b0      	b.n	800d88c <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d92a:	9f01      	ldr	r7, [sp, #4]
 800d92c:	b117      	cbz	r7, 800d934 <etharp_find_entry+0xd4>
 800d92e:	6888      	ldr	r0, [r1, #8]
 800d930:	42b8      	cmp	r0, r7
 800d932:	d1bb      	bne.n	800d8ac <etharp_find_entry+0x4c>
 800d934:	4664      	mov	r4, ip
 800d936:	e7e9      	b.n	800d90c <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800d938:	f1be 0f0a 	cmp.w	lr, #10
 800d93c:	d02c      	beq.n	800d998 <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d93e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800d942:	46f1      	mov	r9, lr
 800d944:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800d948:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800d94c:	b383      	cbz	r3, 800d9b0 <etharp_find_entry+0x150>
 800d94e:	464c      	mov	r4, r9
 800d950:	4b1b      	ldr	r3, [pc, #108]	; (800d9c0 <etharp_find_entry+0x160>)
 800d952:	f240 126d 	movw	r2, #365	; 0x16d
 800d956:	491d      	ldr	r1, [pc, #116]	; (800d9cc <etharp_find_entry+0x16c>)
 800d958:	481b      	ldr	r0, [pc, #108]	; (800d9c8 <etharp_find_entry+0x168>)
 800d95a:	f001 fe31 	bl	800f5c0 <iprintf>
  if (arp_table[i].q != NULL) {
 800d95e:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800d962:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800d966:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d96a:	f856 000a 	ldr.w	r0, [r6, sl]
 800d96e:	b120      	cbz	r0, 800d97a <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800d970:	f7fb ffa8 	bl	80098c4 <pbuf_free>
    arp_table[i].q = NULL;
 800d974:	2300      	movs	r3, #0
 800d976:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d97a:	eb08 0309 	add.w	r3, r8, r9
 800d97e:	2200      	movs	r2, #0
 800d980:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800d984:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d986:	e7b4      	b.n	800d8f2 <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800d988:	8a4a      	ldrh	r2, [r1, #18]
 800d98a:	9803      	ldr	r0, [sp, #12]
 800d98c:	4282      	cmp	r2, r0
 800d98e:	f4ff af7d 	bcc.w	800d88c <etharp_find_entry+0x2c>
 800d992:	46e3      	mov	fp, ip
 800d994:	9203      	str	r2, [sp, #12]
 800d996:	e779      	b.n	800d88c <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d998:	f1ba 0f0a 	cmp.w	sl, #10
 800d99c:	d105      	bne.n	800d9aa <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d99e:	f1b8 0f0a 	cmp.w	r8, #10
 800d9a2:	d007      	beq.n	800d9b4 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800d9a4:	4644      	mov	r4, r8
 800d9a6:	46c1      	mov	r9, r8
 800d9a8:	e7d9      	b.n	800d95e <etharp_find_entry+0xfe>
 800d9aa:	4654      	mov	r4, sl
 800d9ac:	46d1      	mov	r9, sl
 800d9ae:	e7d6      	b.n	800d95e <etharp_find_entry+0xfe>
 800d9b0:	4674      	mov	r4, lr
 800d9b2:	e7e2      	b.n	800d97a <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800d9b4:	f04f 34ff 	mov.w	r4, #4294967295
 800d9b8:	e7a8      	b.n	800d90c <etharp_find_entry+0xac>
 800d9ba:	bf00      	nop
 800d9bc:	24010854 	.word	0x24010854
 800d9c0:	08011c48 	.word	0x08011c48
 800d9c4:	08011c98 	.word	0x08011c98
 800d9c8:	08010440 	.word	0x08010440
 800d9cc:	08011c80 	.word	0x08011c80

0800d9d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	4688      	mov	r8, r1
 800d9d8:	4691      	mov	r9, r2
 800d9da:	461f      	mov	r7, r3
 800d9dc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9e0:	4606      	mov	r6, r0
{
 800d9e2:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d050      	beq.n	800da8c <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9ee:	211c      	movs	r1, #28
 800d9f0:	200e      	movs	r0, #14
 800d9f2:	f7fb ffd7 	bl	80099a4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d04f      	beq.n	800da9c <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d9fc:	8943      	ldrh	r3, [r0, #10]
 800d9fe:	2b1b      	cmp	r3, #27
 800da00:	d93c      	bls.n	800da7c <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da02:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800da04:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800da06:	f7fa ffbb 	bl	8008980 <lwip_htons>
 800da0a:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da0c:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800da10:	2b06      	cmp	r3, #6
 800da12:	d006      	beq.n	800da22 <etharp_raw+0x52>
 800da14:	4b23      	ldr	r3, [pc, #140]	; (800daa4 <etharp_raw+0xd4>)
 800da16:	f240 4269 	movw	r2, #1129	; 0x469
 800da1a:	4923      	ldr	r1, [pc, #140]	; (800daa8 <etharp_raw+0xd8>)
 800da1c:	4823      	ldr	r0, [pc, #140]	; (800daac <etharp_raw+0xdc>)
 800da1e:	f001 fdcf 	bl	800f5c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da22:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da24:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da26:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da28:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da2a:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da2c:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da2e:	88b9      	ldrh	r1, [r7, #4]
 800da30:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da32:	f8da 1000 	ldr.w	r1, [sl]
 800da36:	f8c4 1012 	str.w	r1, [r4, #18]
 800da3a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800da3e:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da40:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da42:	6809      	ldr	r1, [r1, #0]
 800da44:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da48:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da4a:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da4c:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da4e:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da50:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da52:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da54:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da56:	2108      	movs	r1, #8
 800da58:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800da5a:	2106      	movs	r1, #6
 800da5c:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da5e:	2104      	movs	r1, #4
 800da60:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da62:	f640 0106 	movw	r1, #2054	; 0x806
 800da66:	9100      	str	r1, [sp, #0]
 800da68:	4629      	mov	r1, r5
 800da6a:	f001 fab5 	bl	800efd8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800da6e:	4628      	mov	r0, r5
 800da70:	f7fb ff28 	bl	80098c4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800da74:	4630      	mov	r0, r6
}
 800da76:	b002      	add	sp, #8
 800da78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da7c:	4b09      	ldr	r3, [pc, #36]	; (800daa4 <etharp_raw+0xd4>)
 800da7e:	f240 4262 	movw	r2, #1122	; 0x462
 800da82:	490b      	ldr	r1, [pc, #44]	; (800dab0 <etharp_raw+0xe0>)
 800da84:	4809      	ldr	r0, [pc, #36]	; (800daac <etharp_raw+0xdc>)
 800da86:	f001 fd9b 	bl	800f5c0 <iprintf>
 800da8a:	e7ba      	b.n	800da02 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da8c:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <etharp_raw+0xd4>)
 800da8e:	f240 4257 	movw	r2, #1111	; 0x457
 800da92:	4908      	ldr	r1, [pc, #32]	; (800dab4 <etharp_raw+0xe4>)
 800da94:	4805      	ldr	r0, [pc, #20]	; (800daac <etharp_raw+0xdc>)
 800da96:	f001 fd93 	bl	800f5c0 <iprintf>
 800da9a:	e7a6      	b.n	800d9ea <etharp_raw+0x1a>
    return ERR_MEM;
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	e7e9      	b.n	800da76 <etharp_raw+0xa6>
 800daa2:	bf00      	nop
 800daa4:	08011c48 	.word	0x08011c48
 800daa8:	08011cf8 	.word	0x08011cf8
 800daac:	08010440 	.word	0x08010440
 800dab0:	08011cc4 	.word	0x08011cc4
 800dab4:	08010430 	.word	0x08010430

0800dab8 <etharp_output_to_arp_index>:
{
 800dab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dabc:	4f39      	ldr	r7, [pc, #228]	; (800dba4 <etharp_output_to_arp_index+0xec>)
 800dabe:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800dac2:	b084      	sub	sp, #16
 800dac4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dac6:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800daca:	4605      	mov	r5, r0
 800dacc:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dace:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800dad2:	f899 3014 	ldrb.w	r3, [r9, #20]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d93d      	bls.n	800db56 <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d013      	beq.n	800db06 <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dade:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dae2:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dae6:	fb09 7904 	mla	r9, r9, r4, r7
 800daea:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800daee:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800daf2:	464b      	mov	r3, r9
 800daf4:	4652      	mov	r2, sl
 800daf6:	4631      	mov	r1, r6
 800daf8:	4628      	mov	r0, r5
 800dafa:	9400      	str	r4, [sp, #0]
 800dafc:	f001 fa6c 	bl	800efd8 <ethernet_output>
}
 800db00:	b004      	add	sp, #16
 800db02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800db06:	44a0      	add	r8, r4
 800db08:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800db0c:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800db10:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800db14:	d829      	bhi.n	800db6a <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800db16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800db1a:	d3e0      	bcc.n	800dade <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db20:	2301      	movs	r3, #1
 800db22:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800db26:	4628      	mov	r0, r5
 800db28:	00e4      	lsls	r4, r4, #3
 800db2a:	9303      	str	r3, [sp, #12]
 800db2c:	4b1e      	ldr	r3, [pc, #120]	; (800dba8 <etharp_output_to_arp_index+0xf0>)
 800db2e:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db30:	f104 090c 	add.w	r9, r4, #12
 800db34:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db36:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800db38:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db3a:	44b9      	add	r9, r7
 800db3c:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db3e:	9300      	str	r3, [sp, #0]
 800db40:	4653      	mov	r3, sl
 800db42:	464a      	mov	r2, r9
 800db44:	9702      	str	r7, [sp, #8]
 800db46:	f7ff ff43 	bl	800d9d0 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d1cf      	bne.n	800daee <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800db4e:	2303      	movs	r3, #3
 800db50:	f888 3014 	strb.w	r3, [r8, #20]
 800db54:	e7cb      	b.n	800daee <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db56:	4b15      	ldr	r3, [pc, #84]	; (800dbac <etharp_output_to_arp_index+0xf4>)
 800db58:	f240 22ee 	movw	r2, #750	; 0x2ee
 800db5c:	4914      	ldr	r1, [pc, #80]	; (800dbb0 <etharp_output_to_arp_index+0xf8>)
 800db5e:	4815      	ldr	r0, [pc, #84]	; (800dbb4 <etharp_output_to_arp_index+0xfc>)
 800db60:	f001 fd2e 	bl	800f5c0 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800db64:	f899 3014 	ldrb.w	r3, [r9, #20]
 800db68:	e7b7      	b.n	800dada <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800db6a:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db6e:	2301      	movs	r3, #1
 800db70:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800db74:	4a10      	ldr	r2, [pc, #64]	; (800dbb8 <etharp_output_to_arp_index+0x100>)
 800db76:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	4651      	mov	r1, sl
 800db7e:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800db80:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db84:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800db88:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800db8a:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db8c:	9302      	str	r3, [sp, #8]
 800db8e:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <etharp_output_to_arp_index+0xf0>)
 800db90:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800db92:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	4653      	mov	r3, sl
 800db98:	f7ff ff1a 	bl	800d9d0 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800db9c:	2800      	cmp	r0, #0
 800db9e:	d0d6      	beq.n	800db4e <etharp_output_to_arp_index+0x96>
 800dba0:	e7a5      	b.n	800daee <etharp_output_to_arp_index+0x36>
 800dba2:	bf00      	nop
 800dba4:	24010854 	.word	0x24010854
 800dba8:	08012124 	.word	0x08012124
 800dbac:	08011c48 	.word	0x08011c48
 800dbb0:	08011d3c 	.word	0x08011d3c
 800dbb4:	08010440 	.word	0x08010440
 800dbb8:	0801211c 	.word	0x0801211c

0800dbbc <etharp_tmr>:
{
 800dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc0:	4c20      	ldr	r4, [pc, #128]	; (800dc44 <etharp_tmr+0x88>)
 800dbc2:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dbc4:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dbc6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800dc4c <etharp_tmr+0x90>
 800dbca:	4f1f      	ldr	r7, [pc, #124]	; (800dc48 <etharp_tmr+0x8c>)
 800dbcc:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800dbd0:	e00c      	b.n	800dbec <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800dbd2:	2a01      	cmp	r2, #1
 800dbd4:	d101      	bne.n	800dbda <etharp_tmr+0x1e>
 800dbd6:	2b04      	cmp	r3, #4
 800dbd8:	d812      	bhi.n	800dc00 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800dbda:	2a03      	cmp	r2, #3
 800dbdc:	d01e      	beq.n	800dc1c <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dbde:	2a04      	cmp	r2, #4
 800dbe0:	d01f      	beq.n	800dc22 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dbe2:	2a01      	cmp	r2, #1
 800dbe4:	d020      	beq.n	800dc28 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dbe6:	3418      	adds	r4, #24
 800dbe8:	42ac      	cmp	r4, r5
 800dbea:	d014      	beq.n	800dc16 <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800dbec:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800dbee:	2a00      	cmp	r2, #0
 800dbf0:	d0f9      	beq.n	800dbe6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800dbf2:	89e3      	ldrh	r3, [r4, #14]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dbf8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800dbfc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800dbfe:	d3e8      	bcc.n	800dbd2 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800dc00:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800dc04:	b118      	cbz	r0, 800dc0e <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800dc06:	f7fb fe5d 	bl	80098c4 <pbuf_free>
    arp_table[i].q = NULL;
 800dc0a:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dc0e:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc10:	3418      	adds	r4, #24
 800dc12:	42ac      	cmp	r4, r5
 800dc14:	d1ea      	bne.n	800dbec <etharp_tmr+0x30>
}
 800dc16:	b004      	add	sp, #16
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dc1c:	2304      	movs	r3, #4
 800dc1e:	7423      	strb	r3, [r4, #16]
 800dc20:	e7e1      	b.n	800dbe6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dc22:	2302      	movs	r3, #2
 800dc24:	7423      	strb	r3, [r4, #16]
 800dc26:	e7de      	b.n	800dbe6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dc28:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dc2a:	f8cd 8004 	str.w	r8, [sp, #4]
 800dc2e:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dc32:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dc34:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800dc38:	9100      	str	r1, [sp, #0]
 800dc3a:	463a      	mov	r2, r7
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f7ff fec7 	bl	800d9d0 <etharp_raw>
 800dc42:	e7d0      	b.n	800dbe6 <etharp_tmr+0x2a>
 800dc44:	24010858 	.word	0x24010858
 800dc48:	0801211c 	.word	0x0801211c
 800dc4c:	08012124 	.word	0x08012124

0800dc50 <etharp_cleanup_netif>:
{
 800dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc52:	4c0a      	ldr	r4, [pc, #40]	; (800dc7c <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dc54:	2700      	movs	r7, #0
{
 800dc56:	4606      	mov	r6, r0
 800dc58:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dc5c:	7d23      	ldrb	r3, [r4, #20]
 800dc5e:	b113      	cbz	r3, 800dc66 <etharp_cleanup_netif+0x16>
 800dc60:	68a3      	ldr	r3, [r4, #8]
 800dc62:	42b3      	cmp	r3, r6
 800dc64:	d003      	beq.n	800dc6e <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc66:	3418      	adds	r4, #24
 800dc68:	42ac      	cmp	r4, r5
 800dc6a:	d1f7      	bne.n	800dc5c <etharp_cleanup_netif+0xc>
}
 800dc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800dc6e:	6820      	ldr	r0, [r4, #0]
 800dc70:	b110      	cbz	r0, 800dc78 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800dc72:	f7fb fe27 	bl	80098c4 <pbuf_free>
    arp_table[i].q = NULL;
 800dc76:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dc78:	7527      	strb	r7, [r4, #20]
}
 800dc7a:	e7f4      	b.n	800dc66 <etharp_cleanup_netif+0x16>
 800dc7c:	24010854 	.word	0x24010854

0800dc80 <etharp_input>:
{
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	460d      	mov	r5, r1
 800dc86:	b087      	sub	sp, #28
 800dc88:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800dc8a:	f7f8 f945 	bl	8005f18 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dc8e:	2d00      	cmp	r5, #0
 800dc90:	d07b      	beq.n	800dd8a <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800dc92:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dc94:	8833      	ldrh	r3, [r6, #0]
 800dc96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc9a:	d102      	bne.n	800dca2 <etharp_input+0x22>
 800dc9c:	7933      	ldrb	r3, [r6, #4]
 800dc9e:	2b06      	cmp	r3, #6
 800dca0:	d005      	beq.n	800dcae <etharp_input+0x2e>
  pbuf_free(p);
 800dca2:	4620      	mov	r0, r4
}
 800dca4:	b007      	add	sp, #28
 800dca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800dcaa:	f7fb be0b 	b.w	80098c4 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dcae:	7973      	ldrb	r3, [r6, #5]
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	d1f6      	bne.n	800dca2 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dcb4:	8873      	ldrh	r3, [r6, #2]
 800dcb6:	2b08      	cmp	r3, #8
 800dcb8:	d1f3      	bne.n	800dca2 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dcba:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dcbe:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcc2:	686f      	ldr	r7, [r5, #4]
 800dcc4:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dcc6:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcca:	2f00      	cmp	r7, #0
 800dccc:	d167      	bne.n	800dd9e <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dcce:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dcd2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800dcd6:	2b06      	cmp	r3, #6
 800dcd8:	d165      	bne.n	800dda6 <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800dcda:	f1ba 0f00 	cmp.w	sl, #0
 800dcde:	d03e      	beq.n	800dd5e <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dce0:	4629      	mov	r1, r5
 800dce2:	4650      	mov	r0, sl
 800dce4:	f000 fcae 	bl	800e644 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800dce8:	4681      	mov	r9, r0
 800dcea:	bbc0      	cbnz	r0, 800dd5e <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 800dcec:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dcf0:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 800dcf4:	d033      	beq.n	800dd5e <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 800dcf6:	4659      	mov	r1, fp
 800dcf8:	462a      	mov	r2, r5
 800dcfa:	a805      	add	r0, sp, #20
 800dcfc:	f7ff fdb0 	bl	800d860 <etharp_find_entry>
  if (i < 0) {
 800dd00:	1e03      	subs	r3, r0, #0
 800dd02:	db2c      	blt.n	800dd5e <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd04:	492d      	ldr	r1, [pc, #180]	; (800ddbc <etharp_input+0x13c>)
 800dd06:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dd0a:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dd0c:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd10:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800dd14:	00d2      	lsls	r2, r2, #3
 800dd16:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dd1a:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800dd1c:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dd20:	fb13 030e 	smlabb	r3, r3, lr, r0
 800dd24:	f8d8 0000 	ldr.w	r0, [r8]
 800dd28:	50c8      	str	r0, [r1, r3]
 800dd2a:	440b      	add	r3, r1
 800dd2c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800dd30:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800dd32:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800dd36:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800dd3a:	f1ba 0f00 	cmp.w	sl, #0
 800dd3e:	d00e      	beq.n	800dd5e <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dd40:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800dd44:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	4651      	mov	r1, sl
 800dd52:	4643      	mov	r3, r8
 800dd54:	f001 f940 	bl	800efd8 <ethernet_output>
    pbuf_free(p);
 800dd58:	4650      	mov	r0, sl
 800dd5a:	f7fb fdb3 	bl	80098c4 <pbuf_free>
  switch (hdr->opcode) {
 800dd5e:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800dd60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd64:	d19d      	bne.n	800dca2 <etharp_input+0x22>
 800dd66:	2f00      	cmp	r7, #0
 800dd68:	d09b      	beq.n	800dca2 <etharp_input+0x22>
        etharp_raw(netif,
 800dd6a:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dd6c:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800dd70:	4642      	mov	r2, r8
 800dd72:	4628      	mov	r0, r5
 800dd74:	9103      	str	r1, [sp, #12]
 800dd76:	a905      	add	r1, sp, #20
 800dd78:	f8cd 8004 	str.w	r8, [sp, #4]
 800dd7c:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dd7e:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800dd80:	9100      	str	r1, [sp, #0]
 800dd82:	4619      	mov	r1, r3
 800dd84:	f7ff fe24 	bl	800d9d0 <etharp_raw>
 800dd88:	e78b      	b.n	800dca2 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dd8a:	4b0d      	ldr	r3, [pc, #52]	; (800ddc0 <etharp_input+0x140>)
 800dd8c:	f240 228a 	movw	r2, #650	; 0x28a
 800dd90:	490c      	ldr	r1, [pc, #48]	; (800ddc4 <etharp_input+0x144>)
 800dd92:	480d      	ldr	r0, [pc, #52]	; (800ddc8 <etharp_input+0x148>)
}
 800dd94:	b007      	add	sp, #28
 800dd96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dd9a:	f001 bc11 	b.w	800f5c0 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dd9e:	429f      	cmp	r7, r3
 800dda0:	d009      	beq.n	800ddb6 <etharp_input+0x136>
 800dda2:	2700      	movs	r7, #0
 800dda4:	e793      	b.n	800dcce <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800dda6:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <etharp_input+0x140>)
 800dda8:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ddac:	4907      	ldr	r1, [pc, #28]	; (800ddcc <etharp_input+0x14c>)
 800ddae:	4806      	ldr	r0, [pc, #24]	; (800ddc8 <etharp_input+0x148>)
 800ddb0:	f001 fc06 	bl	800f5c0 <iprintf>
 800ddb4:	e791      	b.n	800dcda <etharp_input+0x5a>
 800ddb6:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ddb8:	46bb      	mov	fp, r7
 800ddba:	e78a      	b.n	800dcd2 <etharp_input+0x52>
 800ddbc:	24010854 	.word	0x24010854
 800ddc0:	08011c48 	.word	0x08011c48
 800ddc4:	08010430 	.word	0x08010430
 800ddc8:	08010440 	.word	0x08010440
 800ddcc:	08011d8c 	.word	0x08011d8c

0800ddd0 <etharp_query>:
{
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	460e      	mov	r6, r1
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ddda:	4601      	mov	r1, r0
 800dddc:	6830      	ldr	r0, [r6, #0]
{
 800ddde:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dde0:	f000 fc30 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	f040 8099 	bne.w	800df1c <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 800ddea:	6833      	ldr	r3, [r6, #0]
 800ddec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800ddf0:	2ae0      	cmp	r2, #224	; 0xe0
 800ddf2:	f000 8093 	beq.w	800df1c <etharp_query+0x14c>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 8090 	beq.w	800df1c <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ddfc:	462a      	mov	r2, r5
 800ddfe:	2101      	movs	r1, #1
 800de00:	4630      	mov	r0, r6
 800de02:	f7ff fd2d 	bl	800d860 <etharp_find_entry>
  if (i_err < 0) {
 800de06:	f1b0 0800 	subs.w	r8, r0, #0
 800de0a:	db4c      	blt.n	800dea6 <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800de0c:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800de10:	dc41      	bgt.n	800de96 <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 800de12:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800de16:	f8df a144 	ldr.w	sl, [pc, #324]	; 800df5c <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800de1a:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800de1e:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800de22:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800de26:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800de2a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800de2e:	b14b      	cbz	r3, 800de44 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 800de30:	2f00      	cmp	r7, #0
 800de32:	d079      	beq.n	800df28 <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800de34:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 800de36:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800de3a:	d81a      	bhi.n	800de72 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800de3c:	d038      	beq.n	800deb0 <etharp_query+0xe0>
}
 800de3e:	b005      	add	sp, #20
 800de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800de44:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de46:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800de48:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de4c:	4621      	mov	r1, r4
 800de4e:	9303      	str	r3, [sp, #12]
 800de50:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800de52:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de56:	4b3b      	ldr	r3, [pc, #236]	; (800df44 <etharp_query+0x174>)
 800de58:	4a3b      	ldr	r2, [pc, #236]	; (800df48 <etharp_query+0x178>)
 800de5a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800de5c:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	4623      	mov	r3, r4
 800de62:	f7ff fdb5 	bl	800d9d0 <etharp_raw>
    if (q == NULL) {
 800de66:	2f00      	cmp	r7, #0
 800de68:	d0e9      	beq.n	800de3e <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800de6a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d9e4      	bls.n	800de3c <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800de72:	2318      	movs	r3, #24
 800de74:	4622      	mov	r2, r4
 800de76:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800de7a:	4639      	mov	r1, r7
 800de7c:	fb03 a308 	mla	r3, r3, r8, sl
 800de80:	4628      	mov	r0, r5
 800de82:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800de84:	4c31      	ldr	r4, [pc, #196]	; (800df4c <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800de86:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800de88:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800de8c:	f001 f8a4 	bl	800efd8 <ethernet_output>
}
 800de90:	b005      	add	sp, #20
 800de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800de96:	4b2e      	ldr	r3, [pc, #184]	; (800df50 <etharp_query+0x180>)
 800de98:	f240 32c1 	movw	r2, #961	; 0x3c1
 800de9c:	492d      	ldr	r1, [pc, #180]	; (800df54 <etharp_query+0x184>)
 800de9e:	482e      	ldr	r0, [pc, #184]	; (800df58 <etharp_query+0x188>)
 800dea0:	f001 fb8e 	bl	800f5c0 <iprintf>
 800dea4:	e7b5      	b.n	800de12 <etharp_query+0x42>
    return (err_t)i_err;
 800dea6:	fa4f f088 	sxtb.w	r0, r8
}
 800deaa:	b005      	add	sp, #20
 800deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb0:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800deb2:	4d27      	ldr	r5, [pc, #156]	; (800df50 <etharp_query+0x180>)
 800deb4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800df60 <etharp_query+0x190>
 800deb8:	4e27      	ldr	r6, [pc, #156]	; (800df58 <etharp_query+0x188>)
 800deba:	e004      	b.n	800dec6 <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 800debc:	7b23      	ldrb	r3, [r4, #12]
 800debe:	065a      	lsls	r2, r3, #25
 800dec0:	d412      	bmi.n	800dee8 <etharp_query+0x118>
      p = p->next;
 800dec2:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800dec4:	b334      	cbz	r4, 800df14 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dec6:	8962      	ldrh	r2, [r4, #10]
 800dec8:	8923      	ldrh	r3, [r4, #8]
 800deca:	429a      	cmp	r2, r3
 800decc:	d1f6      	bne.n	800debc <etharp_query+0xec>
 800dece:	6822      	ldr	r2, [r4, #0]
 800ded0:	462b      	mov	r3, r5
 800ded2:	b132      	cbz	r2, 800dee2 <etharp_query+0x112>
 800ded4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ded8:	4649      	mov	r1, r9
 800deda:	4630      	mov	r0, r6
 800dedc:	f001 fb70 	bl	800f5c0 <iprintf>
 800dee0:	e7ec      	b.n	800debc <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 800dee2:	7b23      	ldrb	r3, [r4, #12]
 800dee4:	065b      	lsls	r3, r3, #25
 800dee6:	d515      	bpl.n	800df14 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800dee8:	463a      	mov	r2, r7
 800deea:	f44f 7120 	mov.w	r1, #640	; 0x280
 800deee:	200e      	movs	r0, #14
 800def0:	f7fb ff30 	bl	8009d54 <pbuf_clone>
    if (p != NULL) {
 800def4:	4607      	mov	r7, r0
 800def6:	b1a0      	cbz	r0, 800df22 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 800def8:	eb0b 0308 	add.w	r3, fp, r8
 800defc:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 800df00:	b108      	cbz	r0, 800df06 <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 800df02:	f7fb fcdf 	bl	80098c4 <pbuf_free>
      arp_table[i].q = p;
 800df06:	44d8      	add	r8, fp
      result = ERR_OK;
 800df08:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800df0a:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 800df0e:	b005      	add	sp, #20
 800df10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800df14:	4638      	mov	r0, r7
 800df16:	f7fb fe57 	bl	8009bc8 <pbuf_ref>
    if (p != NULL) {
 800df1a:	e7ed      	b.n	800def8 <etharp_query+0x128>
    return ERR_ARG;
 800df1c:	f06f 000f 	mvn.w	r0, #15
 800df20:	e78d      	b.n	800de3e <etharp_query+0x6e>
      result = ERR_MEM;
 800df22:	f04f 30ff 	mov.w	r0, #4294967295
 800df26:	e78a      	b.n	800de3e <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800df28:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df2a:	2301      	movs	r3, #1
 800df2c:	4f05      	ldr	r7, [pc, #20]	; (800df44 <etharp_query+0x174>)
 800df2e:	4621      	mov	r1, r4
 800df30:	4628      	mov	r0, r5
 800df32:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800df36:	e9cd 2700 	strd	r2, r7, [sp]
 800df3a:	4623      	mov	r3, r4
 800df3c:	4a02      	ldr	r2, [pc, #8]	; (800df48 <etharp_query+0x178>)
 800df3e:	f7ff fd47 	bl	800d9d0 <etharp_raw>
    if (q == NULL) {
 800df42:	e77c      	b.n	800de3e <etharp_query+0x6e>
 800df44:	08012124 	.word	0x08012124
 800df48:	0801211c 	.word	0x0801211c
 800df4c:	24010944 	.word	0x24010944
 800df50:	08011c48 	.word	0x08011c48
 800df54:	08011db0 	.word	0x08011db0
 800df58:	08010440 	.word	0x08010440
 800df5c:	24010854 	.word	0x24010854
 800df60:	08011dc0 	.word	0x08011dc0

0800df64 <etharp_output>:
{
 800df64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df66:	4605      	mov	r5, r0
 800df68:	b085      	sub	sp, #20
 800df6a:	460f      	mov	r7, r1
 800df6c:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 800df6e:	f7f7 ffd3 	bl	8005f18 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df72:	2d00      	cmp	r5, #0
 800df74:	f000 8081 	beq.w	800e07a <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800df78:	2f00      	cmp	r7, #0
 800df7a:	d06d      	beq.n	800e058 <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800df7c:	2e00      	cmp	r6, #0
 800df7e:	d074      	beq.n	800e06a <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800df80:	4629      	mov	r1, r5
 800df82:	6830      	ldr	r0, [r6, #0]
 800df84:	f000 fb5e 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800df88:	2800      	cmp	r0, #0
 800df8a:	d163      	bne.n	800e054 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800df8c:	6833      	ldr	r3, [r6, #0]
 800df8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800df92:	2ae0      	cmp	r2, #224	; 0xe0
 800df94:	d039      	beq.n	800e00a <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800df96:	686a      	ldr	r2, [r5, #4]
 800df98:	68a9      	ldr	r1, [r5, #8]
 800df9a:	405a      	eors	r2, r3
 800df9c:	420a      	tst	r2, r1
 800df9e:	d009      	beq.n	800dfb4 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800dfa0:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dfa2:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d004      	beq.n	800dfb4 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dfaa:	68eb      	ldr	r3, [r5, #12]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d076      	beq.n	800e09e <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800dfb0:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dfb4:	f8df c108 	ldr.w	ip, [pc, #264]	; 800e0c0 <etharp_output+0x15c>
 800dfb8:	4b3a      	ldr	r3, [pc, #232]	; (800e0a4 <etharp_output+0x140>)
 800dfba:	f89c 2000 	ldrb.w	r2, [ip]
 800dfbe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800dfc2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800dfc6:	7d19      	ldrb	r1, [r3, #20]
 800dfc8:	2901      	cmp	r1, #1
 800dfca:	d902      	bls.n	800dfd2 <etharp_output+0x6e>
 800dfcc:	6899      	ldr	r1, [r3, #8]
 800dfce:	42a9      	cmp	r1, r5
 800dfd0:	d05e      	beq.n	800e090 <etharp_output+0x12c>
 800dfd2:	4c34      	ldr	r4, [pc, #208]	; (800e0a4 <etharp_output+0x140>)
{
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e003      	b.n	800dfe0 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dfd8:	2b0a      	cmp	r3, #10
 800dfda:	f104 0418 	add.w	r4, r4, #24
 800dfde:	d031      	beq.n	800e044 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dfe0:	7d20      	ldrb	r0, [r4, #20]
 800dfe2:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dfe4:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dfe6:	2801      	cmp	r0, #1
 800dfe8:	d9f6      	bls.n	800dfd8 <etharp_output+0x74>
 800dfea:	68a1      	ldr	r1, [r4, #8]
 800dfec:	42a9      	cmp	r1, r5
 800dfee:	d1f3      	bne.n	800dfd8 <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 800dff0:	6830      	ldr	r0, [r6, #0]
 800dff2:	6861      	ldr	r1, [r4, #4]
 800dff4:	4288      	cmp	r0, r1
 800dff6:	d1ef      	bne.n	800dfd8 <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 800dff8:	4639      	mov	r1, r7
 800dffa:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800dffc:	f88c 2000 	strb.w	r2, [ip]
}
 800e000:	b005      	add	sp, #20
 800e002:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800e006:	f7ff bd57 	b.w	800dab8 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e00a:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e00c:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e00e:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e014:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e018:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e01a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e01e:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e020:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e024:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800e028:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e02a:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e02e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800e032:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800e036:	4639      	mov	r1, r7
 800e038:	4628      	mov	r0, r5
 800e03a:	9400      	str	r4, [sp, #0]
 800e03c:	f000 ffcc 	bl	800efd8 <ethernet_output>
}
 800e040:	b005      	add	sp, #20
 800e042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800e044:	463a      	mov	r2, r7
 800e046:	4631      	mov	r1, r6
 800e048:	4628      	mov	r0, r5
}
 800e04a:	b005      	add	sp, #20
 800e04c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800e050:	f7ff bebe 	b.w	800ddd0 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800e054:	4b14      	ldr	r3, [pc, #80]	; (800e0a8 <etharp_output+0x144>)
 800e056:	e7ea      	b.n	800e02e <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e058:	4b14      	ldr	r3, [pc, #80]	; (800e0ac <etharp_output+0x148>)
 800e05a:	f240 321f 	movw	r2, #799	; 0x31f
 800e05e:	4914      	ldr	r1, [pc, #80]	; (800e0b0 <etharp_output+0x14c>)
 800e060:	4814      	ldr	r0, [pc, #80]	; (800e0b4 <etharp_output+0x150>)
 800e062:	f001 faad 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e066:	2e00      	cmp	r6, #0
 800e068:	d18a      	bne.n	800df80 <etharp_output+0x1c>
 800e06a:	4b10      	ldr	r3, [pc, #64]	; (800e0ac <etharp_output+0x148>)
 800e06c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e070:	4911      	ldr	r1, [pc, #68]	; (800e0b8 <etharp_output+0x154>)
 800e072:	4810      	ldr	r0, [pc, #64]	; (800e0b4 <etharp_output+0x150>)
 800e074:	f001 faa4 	bl	800f5c0 <iprintf>
 800e078:	e782      	b.n	800df80 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e07a:	4b0c      	ldr	r3, [pc, #48]	; (800e0ac <etharp_output+0x148>)
 800e07c:	f240 321e 	movw	r2, #798	; 0x31e
 800e080:	490e      	ldr	r1, [pc, #56]	; (800e0bc <etharp_output+0x158>)
 800e082:	480c      	ldr	r0, [pc, #48]	; (800e0b4 <etharp_output+0x150>)
 800e084:	f001 fa9c 	bl	800f5c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e088:	2f00      	cmp	r7, #0
 800e08a:	f47f af77 	bne.w	800df7c <etharp_output+0x18>
 800e08e:	e7e3      	b.n	800e058 <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	6831      	ldr	r1, [r6, #0]
 800e094:	4299      	cmp	r1, r3
 800e096:	d19c      	bne.n	800dfd2 <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e098:	4639      	mov	r1, r7
 800e09a:	4628      	mov	r0, r5
 800e09c:	e7b0      	b.n	800e000 <etharp_output+0x9c>
            return ERR_RTE;
 800e09e:	f06f 0003 	mvn.w	r0, #3
 800e0a2:	e7cd      	b.n	800e040 <etharp_output+0xdc>
 800e0a4:	24010854 	.word	0x24010854
 800e0a8:	0801211c 	.word	0x0801211c
 800e0ac:	08011c48 	.word	0x08011c48
 800e0b0:	08011ddc 	.word	0x08011ddc
 800e0b4:	08010440 	.word	0x08010440
 800e0b8:	08011d6c 	.word	0x08011d6c
 800e0bc:	08010430 	.word	0x08010430
 800e0c0:	24010944 	.word	0x24010944

0800e0c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e0c4:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e0c6:	2301      	movs	r3, #1
{
 800e0c8:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e0ca:	4c07      	ldr	r4, [pc, #28]	; (800e0e8 <etharp_request+0x24>)
 800e0cc:	4a07      	ldr	r2, [pc, #28]	; (800e0ec <etharp_request+0x28>)
 800e0ce:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e0d0:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e0d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800e0d6:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800e0da:	9400      	str	r4, [sp, #0]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f7ff fc77 	bl	800d9d0 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800e0e2:	b004      	add	sp, #16
 800e0e4:	bd10      	pop	{r4, pc}
 800e0e6:	bf00      	nop
 800e0e8:	08012124 	.word	0x08012124
 800e0ec:	0801211c 	.word	0x0801211c

0800e0f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0f2:	460e      	mov	r6, r1
 800e0f4:	b087      	sub	sp, #28
 800e0f6:	4617      	mov	r7, r2
 800e0f8:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e0fa:	2124      	movs	r1, #36	; 0x24
 800e0fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e100:	2022      	movs	r0, #34	; 0x22
 800e102:	f7fb fc4f 	bl	80099a4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800e106:	b3a8      	cbz	r0, 800e174 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e108:	8943      	ldrh	r3, [r0, #10]
 800e10a:	4605      	mov	r5, r0
 800e10c:	2b23      	cmp	r3, #35	; 0x23
 800e10e:	d933      	bls.n	800e178 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e110:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e112:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800e114:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800e116:	2600      	movs	r6, #0
  icmphdr->code = code;
 800e118:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800e11a:	7126      	strb	r6, [r4, #4]
 800e11c:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800e11e:	71a6      	strb	r6, [r4, #6]
 800e120:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	6859      	ldr	r1, [r3, #4]
 800e126:	689a      	ldr	r2, [r3, #8]
 800e128:	68df      	ldr	r7, [r3, #12]
 800e12a:	60a0      	str	r0, [r4, #8]
 800e12c:	6167      	str	r7, [r4, #20]
 800e12e:	60e1      	str	r1, [r4, #12]
 800e130:	6122      	str	r2, [r4, #16]
 800e132:	6918      	ldr	r0, [r3, #16]
 800e134:	6959      	ldr	r1, [r3, #20]
 800e136:	699a      	ldr	r2, [r3, #24]
 800e138:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e13a:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e13c:	61e1      	str	r1, [r4, #28]
 800e13e:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800e144:	f000 f8d6 	bl	800e2f4 <ip4_route>
#endif
  if (netif != NULL) {
 800e148:	4607      	mov	r7, r0
 800e14a:	b180      	cbz	r0, 800e16e <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e14c:	8969      	ldrh	r1, [r5, #10]
 800e14e:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800e150:	70a6      	strb	r6, [r4, #2]
 800e152:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e154:	f7fa fc54 	bl	8008a00 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e158:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e15a:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e15c:	aa05      	add	r2, sp, #20
 800e15e:	4631      	mov	r1, r6
 800e160:	4628      	mov	r0, r5
 800e162:	9600      	str	r6, [sp, #0]
 800e164:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800e168:	23ff      	movs	r3, #255	; 0xff
 800e16a:	f000 fa59 	bl	800e620 <ip4_output_if>
  }
  pbuf_free(q);
 800e16e:	4628      	mov	r0, r5
 800e170:	f7fb fba8 	bl	80098c4 <pbuf_free>
}
 800e174:	b007      	add	sp, #28
 800e176:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e178:	4b03      	ldr	r3, [pc, #12]	; (800e188 <icmp_send_response+0x98>)
 800e17a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e17e:	4903      	ldr	r1, [pc, #12]	; (800e18c <icmp_send_response+0x9c>)
 800e180:	4803      	ldr	r0, [pc, #12]	; (800e190 <icmp_send_response+0xa0>)
 800e182:	f001 fa1d 	bl	800f5c0 <iprintf>
 800e186:	e7c3      	b.n	800e110 <icmp_send_response+0x20>
 800e188:	08011de8 	.word	0x08011de8
 800e18c:	08011e20 	.word	0x08011e20
 800e190:	08010440 	.word	0x08010440

0800e194 <icmp_input>:
{
 800e194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800e198:	4f4c      	ldr	r7, [pc, #304]	; (800e2cc <icmp_input+0x138>)
{
 800e19a:	b087      	sub	sp, #28
 800e19c:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800e19e:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800e1a2:	f898 4000 	ldrb.w	r4, [r8]
 800e1a6:	f004 040f 	and.w	r4, r4, #15
 800e1aa:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800e1ac:	2c13      	cmp	r4, #19
 800e1ae:	d913      	bls.n	800e1d8 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800e1b0:	8943      	ldrh	r3, [r0, #10]
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d910      	bls.n	800e1d8 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800e1b6:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b08      	cmp	r3, #8
 800e1bc:	d10c      	bne.n	800e1d8 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e1be:	6978      	ldr	r0, [r7, #20]
 800e1c0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800e1c4:	2be0      	cmp	r3, #224	; 0xe0
 800e1c6:	d007      	beq.n	800e1d8 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e1c8:	460e      	mov	r6, r1
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	f000 fa3a 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800e1d0:	b910      	cbnz	r0, 800e1d8 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e1d2:	892b      	ldrh	r3, [r5, #8]
 800e1d4:	2b07      	cmp	r3, #7
 800e1d6:	d805      	bhi.n	800e1e4 <icmp_input+0x50>
  pbuf_free(p);
 800e1d8:	4628      	mov	r0, r5
}
 800e1da:	b007      	add	sp, #28
 800e1dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800e1e0:	f7fb bb70 	b.w	80098c4 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f7fa fc11 	bl	8008a0c <inet_chksum_pbuf>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d1f4      	bne.n	800e1d8 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e1ee:	f104 010e 	add.w	r1, r4, #14
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	9105      	str	r1, [sp, #20]
 800e1f6:	f7fb fac5 	bl	8009784 <pbuf_add_header>
 800e1fa:	9905      	ldr	r1, [sp, #20]
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d04b      	beq.n	800e298 <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e200:	892b      	ldrh	r3, [r5, #8]
 800e202:	1919      	adds	r1, r3, r4
 800e204:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800e206:	428b      	cmp	r3, r1
 800e208:	d8e6      	bhi.n	800e1d8 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e20a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e20e:	200e      	movs	r0, #14
 800e210:	f7fb fbc8 	bl	80099a4 <pbuf_alloc>
        if (r == NULL) {
 800e214:	4681      	mov	r9, r0
 800e216:	2800      	cmp	r0, #0
 800e218:	d0de      	beq.n	800e1d8 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e21a:	8942      	ldrh	r2, [r0, #10]
 800e21c:	f104 0308 	add.w	r3, r4, #8
 800e220:	429a      	cmp	r2, r3
 800e222:	d345      	bcc.n	800e2b0 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800e224:	4641      	mov	r1, r8
 800e226:	4622      	mov	r2, r4
 800e228:	6840      	ldr	r0, [r0, #4]
 800e22a:	f001 fb0a 	bl	800f842 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800e22e:	4621      	mov	r1, r4
 800e230:	4648      	mov	r0, r9
 800e232:	f7fb fadb 	bl	80097ec <pbuf_remove_header>
 800e236:	2800      	cmp	r0, #0
 800e238:	d13e      	bne.n	800e2b8 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800e23a:	4629      	mov	r1, r5
 800e23c:	4648      	mov	r0, r9
 800e23e:	f7fb fd1d 	bl	8009c7c <pbuf_copy>
 800e242:	2800      	cmp	r0, #0
 800e244:	d134      	bne.n	800e2b0 <icmp_input+0x11c>
        pbuf_free(p);
 800e246:	4628      	mov	r0, r5
 800e248:	464d      	mov	r5, r9
 800e24a:	f7fb fb3b 	bl	80098c4 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800e24e:	4621      	mov	r1, r4
 800e250:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e252:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800e254:	f7fb fa96 	bl	8009784 <pbuf_add_header>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d1bd      	bne.n	800e1d8 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e25c:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e25e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e26a:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e26c:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e26e:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e270:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800e272:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e276:	bf8c      	ite	hi
 800e278:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e27a:	3308      	addls	r3, #8
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e280:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800e282:	728a      	strb	r2, [r1, #10]
 800e284:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e286:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e288:	2101      	movs	r1, #1
 800e28a:	9200      	str	r2, [sp, #0]
 800e28c:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800e290:	490f      	ldr	r1, [pc, #60]	; (800e2d0 <icmp_input+0x13c>)
 800e292:	f000 f9c5 	bl	800e620 <ip4_output_if>
  pbuf_free(p);
 800e296:	e79f      	b.n	800e1d8 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e298:	4628      	mov	r0, r5
 800e29a:	f7fb faa7 	bl	80097ec <pbuf_remove_header>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0d5      	beq.n	800e24e <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e2a2:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <icmp_input+0x140>)
 800e2a4:	22c7      	movs	r2, #199	; 0xc7
 800e2a6:	490c      	ldr	r1, [pc, #48]	; (800e2d8 <icmp_input+0x144>)
 800e2a8:	480c      	ldr	r0, [pc, #48]	; (800e2dc <icmp_input+0x148>)
 800e2aa:	f001 f989 	bl	800f5c0 <iprintf>
          goto icmperr;
 800e2ae:	e793      	b.n	800e1d8 <icmp_input+0x44>
          pbuf_free(r);
 800e2b0:	4648      	mov	r0, r9
 800e2b2:	f7fb fb07 	bl	80098c4 <pbuf_free>
          goto icmperr;
 800e2b6:	e78f      	b.n	800e1d8 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e2b8:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <icmp_input+0x140>)
 800e2ba:	22b6      	movs	r2, #182	; 0xb6
 800e2bc:	4908      	ldr	r1, [pc, #32]	; (800e2e0 <icmp_input+0x14c>)
 800e2be:	4807      	ldr	r0, [pc, #28]	; (800e2dc <icmp_input+0x148>)
 800e2c0:	f001 f97e 	bl	800f5c0 <iprintf>
          pbuf_free(r);
 800e2c4:	4648      	mov	r0, r9
 800e2c6:	f7fb fafd 	bl	80098c4 <pbuf_free>
          goto icmperr;
 800e2ca:	e785      	b.n	800e1d8 <icmp_input+0x44>
 800e2cc:	24009d28 	.word	0x24009d28
 800e2d0:	24009d3c 	.word	0x24009d3c
 800e2d4:	08011de8 	.word	0x08011de8
 800e2d8:	08011e84 	.word	0x08011e84
 800e2dc:	08010440 	.word	0x08010440
 800e2e0:	08011e4c 	.word	0x08011e4c

0800e2e4 <icmp_dest_unreach>:
{
 800e2e4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800e2e6:	2103      	movs	r1, #3
 800e2e8:	f7ff bf02 	b.w	800e0f0 <icmp_send_response>

0800e2ec <icmp_time_exceeded>:
{
 800e2ec:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800e2ee:	210b      	movs	r1, #11
 800e2f0:	f7ff befe 	b.w	800e0f0 <icmp_send_response>

0800e2f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800e2f8:	f7f7 fe0e 	bl	8005f18 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e2fc:	4b15      	ldr	r3, [pc, #84]	; (800e354 <ip4_route+0x60>)
 800e2fe:	6818      	ldr	r0, [r3, #0]
 800e300:	b1a0      	cbz	r0, 800e32c <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e302:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800e306:	07d9      	lsls	r1, r3, #31
 800e308:	d50d      	bpl.n	800e326 <ip4_route+0x32>
 800e30a:	075a      	lsls	r2, r3, #29
 800e30c:	d50b      	bpl.n	800e326 <ip4_route+0x32>
 800e30e:	6842      	ldr	r2, [r0, #4]
 800e310:	b14a      	cbz	r2, 800e326 <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e312:	6821      	ldr	r1, [r4, #0]
 800e314:	6885      	ldr	r5, [r0, #8]
 800e316:	404a      	eors	r2, r1
 800e318:	422a      	tst	r2, r5
 800e31a:	d016      	beq.n	800e34a <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e31c:	079b      	lsls	r3, r3, #30
 800e31e:	d402      	bmi.n	800e326 <ip4_route+0x32>
 800e320:	68c3      	ldr	r3, [r0, #12]
 800e322:	4299      	cmp	r1, r3
 800e324:	d011      	beq.n	800e34a <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800e326:	6800      	ldr	r0, [r0, #0]
 800e328:	2800      	cmp	r0, #0
 800e32a:	d1ea      	bne.n	800e302 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <ip4_route+0x64>)
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	b158      	cbz	r0, 800e34a <ip4_route+0x56>
 800e332:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800e336:	f003 0305 	and.w	r3, r3, #5
 800e33a:	2b05      	cmp	r3, #5
 800e33c:	d106      	bne.n	800e34c <ip4_route+0x58>
 800e33e:	6843      	ldr	r3, [r0, #4]
 800e340:	b133      	cbz	r3, 800e350 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e342:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e344:	2b7f      	cmp	r3, #127	; 0x7f
 800e346:	bf08      	it	eq
 800e348:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800e34c:	2000      	movs	r0, #0
}
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800e350:	4618      	mov	r0, r3
}
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	240107e0 	.word	0x240107e0
 800e358:	240107dc 	.word	0x240107dc

0800e35c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e360:	4604      	mov	r4, r0
 800e362:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800e364:	f7f7 fdd8 	bl	8005f18 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e368:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800e36a:	783b      	ldrb	r3, [r7, #0]
 800e36c:	091a      	lsrs	r2, r3, #4
 800e36e:	2a04      	cmp	r2, #4
 800e370:	f040 808d 	bne.w	800e48e <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e374:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e378:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e37a:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e37e:	f7fa faff 	bl	8008980 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e382:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e384:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e386:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800e388:	4283      	cmp	r3, r0
 800e38a:	f200 8086 	bhi.w	800e49a <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e38e:	8963      	ldrh	r3, [r4, #10]
 800e390:	42ab      	cmp	r3, r5
 800e392:	d37c      	bcc.n	800e48e <ip4_input+0x132>
 800e394:	8923      	ldrh	r3, [r4, #8]
 800e396:	4543      	cmp	r3, r8
 800e398:	d379      	bcc.n	800e48e <ip4_input+0x132>
 800e39a:	2d13      	cmp	r5, #19
 800e39c:	d977      	bls.n	800e48e <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800e514 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e3a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e3a8:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e3ac:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e3b4:	d076      	beq.n	800e4a4 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e3b6:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800e3ba:	07d2      	lsls	r2, r2, #31
 800e3bc:	d503      	bpl.n	800e3c6 <ip4_input+0x6a>
 800e3be:	6872      	ldr	r2, [r6, #4]
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	f040 8082 	bne.w	800e4ca <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b7f      	cmp	r3, #127	; 0x7f
 800e3ca:	f000 8088 	beq.w	800e4de <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e3ce:	4b50      	ldr	r3, [pc, #320]	; (800e510 <ip4_input+0x1b4>)
 800e3d0:	681d      	ldr	r5, [r3, #0]
 800e3d2:	b92d      	cbnz	r5, 800e3e0 <ip4_input+0x84>
 800e3d4:	e083      	b.n	800e4de <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e3d6:	f000 f935 	bl	800e644 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e3da:	b978      	cbnz	r0, 800e3fc <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 800e3dc:	682d      	ldr	r5, [r5, #0]
 800e3de:	b16d      	cbz	r5, 800e3fc <ip4_input+0xa0>
          if (netif == inp) {
 800e3e0:	42ae      	cmp	r6, r5
 800e3e2:	d0fb      	beq.n	800e3dc <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e3e4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e3e8:	07db      	lsls	r3, r3, #31
 800e3ea:	d5f7      	bpl.n	800e3dc <ip4_input+0x80>
 800e3ec:	686b      	ldr	r3, [r5, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d0f4      	beq.n	800e3dc <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e3f2:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e3f6:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e3f8:	4283      	cmp	r3, r0
 800e3fa:	d1ec      	bne.n	800e3d6 <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e3fc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e400:	4631      	mov	r1, r6
 800e402:	f000 f91f 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800e406:	2800      	cmp	r0, #0
 800e408:	d141      	bne.n	800e48e <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e40a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e40e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e412:	2be0      	cmp	r3, #224	; 0xe0
 800e414:	d03b      	beq.n	800e48e <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e416:	b3d5      	cbz	r5, 800e48e <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e418:	88fb      	ldrh	r3, [r7, #6]
 800e41a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d14b      	bne.n	800e4ba <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800e422:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e426:	4649      	mov	r1, r9
 800e428:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800e42a:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e42e:	783b      	ldrb	r3, [r7, #0]
 800e430:	f003 030f 	and.w	r3, r3, #15
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e43a:	f7fb f9d7 	bl	80097ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e43e:	7a7b      	ldrb	r3, [r7, #9]
 800e440:	2b06      	cmp	r3, #6
 800e442:	d05a      	beq.n	800e4fa <ip4_input+0x19e>
 800e444:	2b11      	cmp	r3, #17
 800e446:	d053      	beq.n	800e4f0 <ip4_input+0x194>
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d04c      	beq.n	800e4e6 <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e44c:	4629      	mov	r1, r5
 800e44e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800e452:	f000 f8f7 	bl	800e644 <ip4_addr_isbroadcast_u32>
 800e456:	b968      	cbnz	r0, 800e474 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e458:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e45c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e460:	2be0      	cmp	r3, #224	; 0xe0
 800e462:	d007      	beq.n	800e474 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e464:	4649      	mov	r1, r9
 800e466:	4620      	mov	r0, r4
 800e468:	f7fb f9f4 	bl	8009854 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e46c:	2102      	movs	r1, #2
 800e46e:	4620      	mov	r0, r4
 800e470:	f7ff ff38 	bl	800e2e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e474:	4620      	mov	r0, r4
 800e476:	f7fb fa25 	bl	80098c4 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e47a:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800e47c:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800e480:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e484:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800e488:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800e48c:	e002      	b.n	800e494 <ip4_input+0x138>
    pbuf_free(p);
 800e48e:	4620      	mov	r0, r4
 800e490:	f7fb fa18 	bl	80098c4 <pbuf_free>
}
 800e494:	2000      	movs	r0, #0
 800e496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800e49a:	4601      	mov	r1, r0
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7fb fb2f 	bl	8009b00 <pbuf_realloc>
 800e4a2:	e774      	b.n	800e38e <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e4a4:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800e4a8:	f015 0501 	ands.w	r5, r5, #1
 800e4ac:	d0a8      	beq.n	800e400 <ip4_input+0xa4>
 800e4ae:	6873      	ldr	r3, [r6, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	bf14      	ite	ne
 800e4b4:	4635      	movne	r5, r6
 800e4b6:	2500      	moveq	r5, #0
 800e4b8:	e7a2      	b.n	800e400 <ip4_input+0xa4>
    p = ip4_reass(p);
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f000 f9ec 	bl	800e898 <ip4_reass>
    if (p == NULL) {
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d0e6      	beq.n	800e494 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 800e4c6:	6847      	ldr	r7, [r0, #4]
 800e4c8:	e7ab      	b.n	800e422 <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d01a      	beq.n	800e504 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	f000 f8b7 	bl	800e644 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e4d6:	b9b8      	cbnz	r0, 800e508 <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e4d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e4dc:	e773      	b.n	800e3c6 <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e4de:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800e4e2:	2500      	movs	r5, #0
 800e4e4:	e78c      	b.n	800e400 <ip4_input+0xa4>
        icmp_input(p, inp);
 800e4e6:	4631      	mov	r1, r6
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f7ff fe53 	bl	800e194 <icmp_input>
        break;
 800e4ee:	e7c4      	b.n	800e47a <ip4_input+0x11e>
        udp_input(p, inp);
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	f7ff f898 	bl	800d628 <udp_input>
        break;
 800e4f8:	e7bf      	b.n	800e47a <ip4_input+0x11e>
        tcp_input(p, inp);
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7fd faf9 	bl	800baf4 <tcp_input>
        break;
 800e502:	e7ba      	b.n	800e47a <ip4_input+0x11e>
 800e504:	4635      	mov	r5, r6
 800e506:	e77b      	b.n	800e400 <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e508:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e50c:	4635      	mov	r5, r6
 800e50e:	e777      	b.n	800e400 <ip4_input+0xa4>
 800e510:	240107e0 	.word	0x240107e0
 800e514:	24009d28 	.word	0x24009d28

0800e518 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	4604      	mov	r4, r0
 800e51e:	b083      	sub	sp, #12
 800e520:	4699      	mov	r9, r3
 800e522:	460f      	mov	r7, r1
 800e524:	4616      	mov	r6, r2
 800e526:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800e52a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800e52e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800e532:	f7f7 fcf1 	bl	8005f18 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e536:	7ba3      	ldrb	r3, [r4, #14]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d13d      	bne.n	800e5b8 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e53c:	2e00      	cmp	r6, #0
 800e53e:	d044      	beq.n	800e5ca <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e540:	2114      	movs	r1, #20
 800e542:	4620      	mov	r0, r4
 800e544:	f7fb f91e 	bl	8009784 <pbuf_add_header>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d159      	bne.n	800e600 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e54c:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800e54e:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e550:	2b13      	cmp	r3, #19
 800e552:	d942      	bls.n	800e5da <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e554:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e558:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800e55a:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800e55e:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e560:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800e562:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800e566:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e568:	8920      	ldrh	r0, [r4, #8]
 800e56a:	f7fa fa09 	bl	8008980 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e56e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800e61c <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800e572:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e574:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e576:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800e57a:	71ab      	strb	r3, [r5, #6]
 800e57c:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e57e:	f7fa f9ff 	bl	8008980 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e582:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e586:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800e588:	3301      	adds	r3, #1
 800e58a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800e58e:	b367      	cbz	r7, 800e5ea <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e594:	2300      	movs	r3, #0
 800e596:	72ab      	strb	r3, [r5, #10]
 800e598:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e59a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800e59e:	b113      	cbz	r3, 800e5a6 <ip4_output_if_src+0x8e>
 800e5a0:	8922      	ldrh	r2, [r4, #8]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d824      	bhi.n	800e5f0 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e5a6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e5aa:	4632      	mov	r2, r6
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	4798      	blx	r3
}
 800e5b2:	b003      	add	sp, #12
 800e5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e5b8:	4b13      	ldr	r3, [pc, #76]	; (800e608 <ip4_output_if_src+0xf0>)
 800e5ba:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e5be:	4913      	ldr	r1, [pc, #76]	; (800e60c <ip4_output_if_src+0xf4>)
 800e5c0:	4813      	ldr	r0, [pc, #76]	; (800e610 <ip4_output_if_src+0xf8>)
 800e5c2:	f000 fffd 	bl	800f5c0 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800e5c6:	2e00      	cmp	r6, #0
 800e5c8:	d1ba      	bne.n	800e540 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800e5ca:	8963      	ldrh	r3, [r4, #10]
 800e5cc:	2b13      	cmp	r3, #19
 800e5ce:	d917      	bls.n	800e600 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e5d0:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800e5d2:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800e5d8:	e7df      	b.n	800e59a <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e5da:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <ip4_output_if_src+0xf0>)
 800e5dc:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e5e0:	490c      	ldr	r1, [pc, #48]	; (800e614 <ip4_output_if_src+0xfc>)
 800e5e2:	480b      	ldr	r0, [pc, #44]	; (800e610 <ip4_output_if_src+0xf8>)
 800e5e4:	f000 ffec 	bl	800f5c0 <iprintf>
 800e5e8:	e7b4      	b.n	800e554 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <ip4_output_if_src+0x100>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	e7d0      	b.n	800e592 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800e5f0:	4632      	mov	r2, r6
 800e5f2:	4641      	mov	r1, r8
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f000 fb83 	bl	800ed00 <ip4_frag>
}
 800e5fa:	b003      	add	sp, #12
 800e5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800e600:	f06f 0001 	mvn.w	r0, #1
 800e604:	e7d5      	b.n	800e5b2 <ip4_output_if_src+0x9a>
 800e606:	bf00      	nop
 800e608:	08011eb8 	.word	0x08011eb8
 800e60c:	08011eec 	.word	0x08011eec
 800e610:	08010440 	.word	0x08010440
 800e614:	08011ef8 	.word	0x08011ef8
 800e618:	08011f28 	.word	0x08011f28
 800e61c:	24010946 	.word	0x24010946

0800e620 <ip4_output_if>:
{
 800e620:	b4f0      	push	{r4, r5, r6, r7}
 800e622:	9c06      	ldr	r4, [sp, #24]
 800e624:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800e628:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e62c:	b11a      	cbz	r2, 800e636 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800e62e:	b109      	cbz	r1, 800e634 <ip4_output_if+0x14>
 800e630:	680f      	ldr	r7, [r1, #0]
 800e632:	b907      	cbnz	r7, 800e636 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800e634:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e636:	9504      	str	r5, [sp, #16]
 800e638:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800e63c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e63e:	f7ff bf6b 	b.w	800e518 <ip4_output_if_src>
 800e642:	bf00      	nop

0800e644 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e644:	1e43      	subs	r3, r0, #1
 800e646:	3303      	adds	r3, #3
 800e648:	d814      	bhi.n	800e674 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e64a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800e64e:	f013 0302 	ands.w	r3, r3, #2
 800e652:	d00d      	beq.n	800e670 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e654:	684b      	ldr	r3, [r1, #4]
 800e656:	4283      	cmp	r3, r0
 800e658:	d00f      	beq.n	800e67a <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e65a:	688a      	ldr	r2, [r1, #8]
 800e65c:	4043      	eors	r3, r0
 800e65e:	4213      	tst	r3, r2
 800e660:	d10b      	bne.n	800e67a <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e662:	43d3      	mvns	r3, r2
 800e664:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 800e668:	1ac3      	subs	r3, r0, r3
 800e66a:	fab3 f383 	clz	r3, r3
 800e66e:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800e670:	4618      	mov	r0, r3
 800e672:	4770      	bx	lr
    return 1;
 800e674:	2301      	movs	r3, #1
}
 800e676:	4618      	mov	r0, r3
 800e678:	4770      	bx	lr
    return 0;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	4770      	bx	lr

0800e680 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e680:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e682:	4604      	mov	r4, r0
 800e684:	b148      	cbz	r0, 800e69a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800e686:	6960      	ldr	r0, [r4, #20]
 800e688:	b108      	cbz	r0, 800e68e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800e68a:	f7fb f91b 	bl	80098c4 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800e68e:	4621      	mov	r1, r4
 800e690:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800e692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800e696:	f7fa bd4f 	b.w	8009138 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e69a:	4b04      	ldr	r3, [pc, #16]	; (800e6ac <ipfrag_free_pbuf_custom+0x2c>)
 800e69c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e6a0:	4903      	ldr	r1, [pc, #12]	; (800e6b0 <ipfrag_free_pbuf_custom+0x30>)
 800e6a2:	4804      	ldr	r0, [pc, #16]	; (800e6b4 <ipfrag_free_pbuf_custom+0x34>)
 800e6a4:	f000 ff8c 	bl	800f5c0 <iprintf>
 800e6a8:	e7ed      	b.n	800e686 <ipfrag_free_pbuf_custom+0x6>
 800e6aa:	bf00      	nop
 800e6ac:	08011f2c 	.word	0x08011f2c
 800e6b0:	08011f68 	.word	0x08011f68
 800e6b4:	08010440 	.word	0x08010440

0800e6b8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e6b8:	4281      	cmp	r1, r0
{
 800e6ba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6be:	4606      	mov	r6, r0
 800e6c0:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e6c2:	d075      	beq.n	800e7b0 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 800e6c4:	b147      	cbz	r7, 800e6d8 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	42b3      	cmp	r3, r6
 800e6ca:	d005      	beq.n	800e6d8 <ip_reass_free_complete_datagram+0x20>
 800e6cc:	4b40      	ldr	r3, [pc, #256]	; (800e7d0 <ip_reass_free_complete_datagram+0x118>)
 800e6ce:	22ad      	movs	r2, #173	; 0xad
 800e6d0:	4940      	ldr	r1, [pc, #256]	; (800e7d4 <ip_reass_free_complete_datagram+0x11c>)
 800e6d2:	4841      	ldr	r0, [pc, #260]	; (800e7d8 <ip_reass_free_complete_datagram+0x120>)
 800e6d4:	f000 ff74 	bl	800f5c0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e6d8:	6875      	ldr	r5, [r6, #4]
 800e6da:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800e6dc:	889a      	ldrh	r2, [r3, #4]
 800e6de:	2a00      	cmp	r2, #0
 800e6e0:	d047      	beq.n	800e772 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 800e6e2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e6e6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800e7d0 <ip_reass_free_complete_datagram+0x118>
 800e6ea:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800e7f0 <ip_reass_free_complete_datagram+0x138>
 800e6ee:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800e7d8 <ip_reass_free_complete_datagram+0x120>
 800e6f2:	e005      	b.n	800e700 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 800e6f4:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800e6f6:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800e6f8:	f7fb f8e4 	bl	80098c4 <pbuf_free>
  while (p != NULL) {
 800e6fc:	b1b4      	cbz	r4, 800e72c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800e6fe:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800e700:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 800e702:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800e704:	f7fb fa54 	bl	8009bb0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e708:	4458      	add	r0, fp
 800e70a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e70e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e712:	dbef      	blt.n	800e6f4 <ip_reass_free_complete_datagram+0x3c>
 800e714:	4653      	mov	r3, sl
 800e716:	22cc      	movs	r2, #204	; 0xcc
 800e718:	4649      	mov	r1, r9
 800e71a:	4640      	mov	r0, r8
 800e71c:	f000 ff50 	bl	800f5c0 <iprintf>
    pbuf_free(pcur);
 800e720:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800e722:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800e724:	f7fb f8ce 	bl	80098c4 <pbuf_free>
  while (p != NULL) {
 800e728:	2c00      	cmp	r4, #0
 800e72a:	d1e8      	bne.n	800e6fe <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 800e72c:	4b2b      	ldr	r3, [pc, #172]	; (800e7dc <ip_reass_free_complete_datagram+0x124>)
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	4296      	cmp	r6, r2
 800e732:	d03a      	beq.n	800e7aa <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e734:	2f00      	cmp	r7, #0
 800e736:	d042      	beq.n	800e7be <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 800e738:	6833      	ldr	r3, [r6, #0]
 800e73a:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e73c:	4c28      	ldr	r4, [pc, #160]	; (800e7e0 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800e73e:	4631      	mov	r1, r6
 800e740:	2004      	movs	r0, #4
 800e742:	f7fa fcf9 	bl	8009138 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e746:	8823      	ldrh	r3, [r4, #0]
 800e748:	455b      	cmp	r3, fp
 800e74a:	d305      	bcc.n	800e758 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e74c:	eba3 030b 	sub.w	r3, r3, fp
}
 800e750:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e752:	8023      	strh	r3, [r4, #0]
}
 800e754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e758:	4b1d      	ldr	r3, [pc, #116]	; (800e7d0 <ip_reass_free_complete_datagram+0x118>)
 800e75a:	22d2      	movs	r2, #210	; 0xd2
 800e75c:	4921      	ldr	r1, [pc, #132]	; (800e7e4 <ip_reass_free_complete_datagram+0x12c>)
 800e75e:	481e      	ldr	r0, [pc, #120]	; (800e7d8 <ip_reass_free_complete_datagram+0x120>)
 800e760:	f000 ff2e 	bl	800f5c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e764:	8823      	ldrh	r3, [r4, #0]
}
 800e766:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e768:	eba3 030b 	sub.w	r3, r3, fp
 800e76c:	8023      	strh	r3, [r4, #0]
}
 800e76e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800e772:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e774:	6930      	ldr	r0, [r6, #16]
 800e776:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800e778:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e77a:	68f4      	ldr	r4, [r6, #12]
 800e77c:	68b2      	ldr	r2, [r6, #8]
 800e77e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e780:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e782:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e784:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e786:	601a      	str	r2, [r3, #0]
 800e788:	605c      	str	r4, [r3, #4]
 800e78a:	69b2      	ldr	r2, [r6, #24]
 800e78c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e78e:	f7ff fdad 	bl	800e2ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e792:	4628      	mov	r0, r5
 800e794:	f7fb fa0c 	bl	8009bb0 <pbuf_clen>
 800e798:	4683      	mov	fp, r0
    pbuf_free(p);
 800e79a:	4628      	mov	r0, r5
 800e79c:	f7fb f892 	bl	80098c4 <pbuf_free>
  p = ipr->p;
 800e7a0:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 800e7a2:	2d00      	cmp	r5, #0
 800e7a4:	d0c2      	beq.n	800e72c <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800e7a6:	686b      	ldr	r3, [r5, #4]
 800e7a8:	e79d      	b.n	800e6e6 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 800e7aa:	6832      	ldr	r2, [r6, #0]
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	e7c5      	b.n	800e73c <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e7b0:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <ip_reass_free_complete_datagram+0x118>)
 800e7b2:	22ab      	movs	r2, #171	; 0xab
 800e7b4:	490c      	ldr	r1, [pc, #48]	; (800e7e8 <ip_reass_free_complete_datagram+0x130>)
 800e7b6:	4808      	ldr	r0, [pc, #32]	; (800e7d8 <ip_reass_free_complete_datagram+0x120>)
 800e7b8:	f000 ff02 	bl	800f5c0 <iprintf>
 800e7bc:	e782      	b.n	800e6c4 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e7be:	4b04      	ldr	r3, [pc, #16]	; (800e7d0 <ip_reass_free_complete_datagram+0x118>)
 800e7c0:	f240 1245 	movw	r2, #325	; 0x145
 800e7c4:	4909      	ldr	r1, [pc, #36]	; (800e7ec <ip_reass_free_complete_datagram+0x134>)
 800e7c6:	4804      	ldr	r0, [pc, #16]	; (800e7d8 <ip_reass_free_complete_datagram+0x120>)
 800e7c8:	f000 fefa 	bl	800f5c0 <iprintf>
 800e7cc:	e7b4      	b.n	800e738 <ip_reass_free_complete_datagram+0x80>
 800e7ce:	bf00      	nop
 800e7d0:	08011f2c 	.word	0x08011f2c
 800e7d4:	08011f80 	.word	0x08011f80
 800e7d8:	08010440 	.word	0x08010440
 800e7dc:	2401094c 	.word	0x2401094c
 800e7e0:	24010948 	.word	0x24010948
 800e7e4:	08011fd0 	.word	0x08011fd0
 800e7e8:	08011f74 	.word	0x08011f74
 800e7ec:	08011fb4 	.word	0x08011fb4
 800e7f0:	08011f94 	.word	0x08011f94

0800e7f4 <ip_reass_remove_oldest_datagram>:
{
 800e7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800e7f8:	2700      	movs	r7, #0
 800e7fa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e864 <ip_reass_remove_oldest_datagram+0x70>
{
 800e7fe:	4605      	mov	r5, r0
 800e800:	460e      	mov	r6, r1
    r = reassdatagrams;
 800e802:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800e806:	b1f3      	cbz	r3, 800e846 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800e808:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e80a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800e80e:	4621      	mov	r1, r4
    prev = NULL;
 800e810:	46a4      	mov	ip, r4
    oldest = NULL;
 800e812:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e814:	695a      	ldr	r2, [r3, #20]
 800e816:	4572      	cmp	r2, lr
 800e818:	d018      	beq.n	800e84c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800e81a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800e81c:	b120      	cbz	r0, 800e828 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 800e81e:	f893 901f 	ldrb.w	r9, [r3, #31]
 800e822:	7fc2      	ldrb	r2, [r0, #31]
 800e824:	4591      	cmp	r9, r2
 800e826:	d801      	bhi.n	800e82c <ip_reass_remove_oldest_datagram+0x38>
 800e828:	4661      	mov	r1, ip
 800e82a:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	469c      	mov	ip, r3
 800e830:	4613      	mov	r3, r2
 800e832:	2a00      	cmp	r2, #0
 800e834:	d1ee      	bne.n	800e814 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800e836:	b110      	cbz	r0, 800e83e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e838:	f7ff ff3e 	bl	800e6b8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800e83c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e83e:	42b7      	cmp	r7, r6
 800e840:	da01      	bge.n	800e846 <ip_reass_remove_oldest_datagram+0x52>
 800e842:	2c01      	cmp	r4, #1
 800e844:	dcdd      	bgt.n	800e802 <ip_reass_remove_oldest_datagram+0xe>
}
 800e846:	4638      	mov	r0, r7
 800e848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e84c:	699a      	ldr	r2, [r3, #24]
 800e84e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e852:	454a      	cmp	r2, r9
 800e854:	d1e1      	bne.n	800e81a <ip_reass_remove_oldest_datagram+0x26>
 800e856:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800e85a:	88aa      	ldrh	r2, [r5, #4]
 800e85c:	4591      	cmp	r9, r2
 800e85e:	d1dc      	bne.n	800e81a <ip_reass_remove_oldest_datagram+0x26>
 800e860:	e7e4      	b.n	800e82c <ip_reass_remove_oldest_datagram+0x38>
 800e862:	bf00      	nop
 800e864:	2401094c 	.word	0x2401094c

0800e868 <ip_reass_tmr>:
{
 800e868:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800e86a:	4b0a      	ldr	r3, [pc, #40]	; (800e894 <ip_reass_tmr+0x2c>)
 800e86c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800e86e:	b140      	cbz	r0, 800e882 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 800e870:	2400      	movs	r4, #0
    if (r->timer > 0) {
 800e872:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 800e874:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800e876:	b12b      	cbz	r3, 800e884 <ip_reass_tmr+0x1c>
 800e878:	4604      	mov	r4, r0
      r->timer--;
 800e87a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 800e87c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800e87e:	2800      	cmp	r0, #0
 800e880:	d1f7      	bne.n	800e872 <ip_reass_tmr+0xa>
}
 800e882:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 800e884:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800e886:	4621      	mov	r1, r4
 800e888:	f7ff ff16 	bl	800e6b8 <ip_reass_free_complete_datagram>
      r = r->next;
 800e88c:	4628      	mov	r0, r5
  while (r != NULL) {
 800e88e:	2800      	cmp	r0, #0
 800e890:	d1ef      	bne.n	800e872 <ip_reass_tmr+0xa>
 800e892:	e7f6      	b.n	800e882 <ip_reass_tmr+0x1a>
 800e894:	2401094c 	.word	0x2401094c

0800e898 <ip4_reass>:
{
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800e89c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800e8a0:	b085      	sub	sp, #20
 800e8a2:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a8:	f003 030f 	and.w	r3, r3, #15
 800e8ac:	2b05      	cmp	r3, #5
 800e8ae:	f040 8089 	bne.w	800e9c4 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8b2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e8b6:	f7fa f863 	bl	8008980 <lwip_htons>
 800e8ba:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e8bc:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800e8c0:	f7fa f85e 	bl	8008980 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e8cc:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e8d0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e8d4:	d376      	bcc.n	800e9c4 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800e8d6:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e8d8:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800ebc4 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 800e8dc:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 800e8e2:	f7fb f965 	bl	8009bb0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e8e6:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800e8ea:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e8ec:	4403      	add	r3, r0
 800e8ee:	2b0a      	cmp	r3, #10
 800e8f0:	f300 80e5 	bgt.w	800eabe <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e8f4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800ebc8 <ip4_reass+0x330>
 800e8f8:	f8d9 4000 	ldr.w	r4, [r9]
 800e8fc:	2c00      	cmp	r4, #0
 800e8fe:	f000 80ec 	beq.w	800eada <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e902:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e906:	e003      	b.n	800e910 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e908:	6824      	ldr	r4, [r4, #0]
 800e90a:	2c00      	cmp	r4, #0
 800e90c:	f000 80e5 	beq.w	800eada <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e910:	6963      	ldr	r3, [r4, #20]
 800e912:	4293      	cmp	r3, r2
 800e914:	d1f8      	bne.n	800e908 <ip4_reass+0x70>
 800e916:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e91a:	69a1      	ldr	r1, [r4, #24]
 800e91c:	4299      	cmp	r1, r3
 800e91e:	d1f3      	bne.n	800e908 <ip4_reass+0x70>
 800e920:	89a1      	ldrh	r1, [r4, #12]
 800e922:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e926:	4299      	cmp	r1, r3
 800e928:	d1ee      	bne.n	800e908 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e92a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e92e:	f7fa f827 	bl	8008980 <lwip_htons>
 800e932:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e936:	2800      	cmp	r0, #0
 800e938:	f000 80a9 	beq.w	800ea8e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e93c:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e940:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800e944:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e948:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800e94c:	9301      	str	r3, [sp, #4]
 800e94e:	d108      	bne.n	800e962 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800e950:	9b00      	ldr	r3, [sp, #0]
 800e952:	18f3      	adds	r3, r6, r3
 800e954:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e956:	429e      	cmp	r6, r3
 800e958:	d812      	bhi.n	800e980 <ip4_reass+0xe8>
 800e95a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e95e:	4293      	cmp	r3, r2
 800e960:	d80e      	bhi.n	800e980 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e962:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e966:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800e96a:	f7fa f809 	bl	8008980 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e96e:	f89a 3000 	ldrb.w	r3, [sl]
 800e972:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e976:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e97a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e97e:	d229      	bcs.n	800e9d4 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800e980:	6866      	ldr	r6, [r4, #4]
 800e982:	b9fe      	cbnz	r6, 800e9c4 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e984:	f8d9 3000 	ldr.w	r3, [r9]
 800e988:	42a3      	cmp	r3, r4
 800e98a:	d014      	beq.n	800e9b6 <ip4_reass+0x11e>
 800e98c:	4b89      	ldr	r3, [pc, #548]	; (800ebb4 <ip4_reass+0x31c>)
 800e98e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e992:	4989      	ldr	r1, [pc, #548]	; (800ebb8 <ip4_reass+0x320>)
 800e994:	4889      	ldr	r0, [pc, #548]	; (800ebbc <ip4_reass+0x324>)
 800e996:	f000 fe13 	bl	800f5c0 <iprintf>
  if (reassdatagrams == ipr) {
 800e99a:	f8d9 3000 	ldr.w	r3, [r9]
 800e99e:	429c      	cmp	r4, r3
 800e9a0:	d009      	beq.n	800e9b6 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e9a2:	4b84      	ldr	r3, [pc, #528]	; (800ebb4 <ip4_reass+0x31c>)
 800e9a4:	f240 1245 	movw	r2, #325	; 0x145
 800e9a8:	4985      	ldr	r1, [pc, #532]	; (800ebc0 <ip4_reass+0x328>)
 800e9aa:	4884      	ldr	r0, [pc, #528]	; (800ebbc <ip4_reass+0x324>)
 800e9ac:	f000 fe08 	bl	800f5c0 <iprintf>
    prev->next = ipr->next;
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	6033      	str	r3, [r6, #0]
 800e9b4:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 800e9b6:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800e9bc:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800e9c0:	f7fa fbba 	bl	8009138 <memp_free>
  pbuf_free(p);
 800e9c4:	4628      	mov	r0, r5
  return NULL;
 800e9c6:	2600      	movs	r6, #0
  pbuf_free(p);
 800e9c8:	f7fa ff7c 	bl	80098c4 <pbuf_free>
}
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	b005      	add	sp, #20
 800e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800e9d4:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e9d6:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 800e9da:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e9de:	f7f9 ffcf 	bl	8008980 <lwip_htons>
 800e9e2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e9e6:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e9ea:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e9ec:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 800e9f0:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 800e9f4:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 800e9f8:	f8ab 3006 	strh.w	r3, [fp, #6]
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	4619      	mov	r1, r3
 800ea00:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800ea02:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800ea04:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800ea06:	f88b 3000 	strb.w	r3, [fp]
 800ea0a:	f88b 3001 	strb.w	r3, [fp, #1]
 800ea0e:	f88b 3002 	strb.w	r3, [fp, #2]
 800ea12:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 800ea16:	d8b3      	bhi.n	800e980 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800ea18:	6861      	ldr	r1, [r4, #4]
 800ea1a:	2900      	cmp	r1, #0
 800ea1c:	f000 80be 	beq.w	800eb9c <ip4_reass+0x304>
  int valid = 1;
 800ea20:	f04f 0a01 	mov.w	sl, #1
 800ea24:	4694      	mov	ip, r2
 800ea26:	e00e      	b.n	800ea46 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 800ea28:	d0cc      	beq.n	800e9c4 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800ea2a:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800ea2e:	45f4      	cmp	ip, lr
 800ea30:	d3c8      	bcc.n	800e9c4 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800ea32:	b122      	cbz	r2, 800ea3e <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 800ea34:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800ea36:	4282      	cmp	r2, r0
 800ea38:	bf18      	it	ne
 800ea3a:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800ea3e:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800ea40:	2900      	cmp	r1, #0
 800ea42:	f000 8084 	beq.w	800eb4e <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ea46:	461a      	mov	r2, r3
 800ea48:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800ea4a:	8898      	ldrh	r0, [r3, #4]
 800ea4c:	4584      	cmp	ip, r0
 800ea4e:	d2eb      	bcs.n	800ea28 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 800ea50:	4613      	mov	r3, r2
 800ea52:	f8cb 1000 	str.w	r1, [fp]
 800ea56:	4662      	mov	r2, ip
 800ea58:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d060      	beq.n	800eb20 <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ea5e:	88db      	ldrh	r3, [r3, #6]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d3af      	bcc.n	800e9c4 <ip4_reass+0x12c>
 800ea64:	9903      	ldr	r1, [sp, #12]
 800ea66:	4281      	cmp	r1, r0
 800ea68:	d8ac      	bhi.n	800e9c4 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 800ea6a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 800ea6c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800ea70:	d05b      	beq.n	800eb2a <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ea72:	9b01      	ldr	r3, [sp, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 8084 	beq.w	800eb82 <ip4_reass+0x2ea>
 800ea7a:	7fa3      	ldrb	r3, [r4, #30]
 800ea7c:	07db      	lsls	r3, r3, #31
 800ea7e:	d45c      	bmi.n	800eb3a <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea80:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 800ea84:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea86:	443b      	add	r3, r7
 800ea88:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea8c:	e79e      	b.n	800e9cc <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ea8e:	89e0      	ldrh	r0, [r4, #14]
 800ea90:	f7f9 ff76 	bl	8008980 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea94:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	f43f af4f 	beq.w	800e93c <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea9e:	f8da 3000 	ldr.w	r3, [sl]
 800eaa2:	f8da 0004 	ldr.w	r0, [sl, #4]
 800eaa6:	f8da 1008 	ldr.w	r1, [sl, #8]
 800eaaa:	f8da 200c 	ldr.w	r2, [sl, #12]
 800eaae:	60a3      	str	r3, [r4, #8]
 800eab0:	60e0      	str	r0, [r4, #12]
 800eab2:	6121      	str	r1, [r4, #16]
 800eab4:	6162      	str	r2, [r4, #20]
 800eab6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800eaba:	61a3      	str	r3, [r4, #24]
 800eabc:	e73e      	b.n	800e93c <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eabe:	4601      	mov	r1, r0
 800eac0:	4650      	mov	r0, sl
 800eac2:	f7ff fe97 	bl	800e7f4 <ip_reass_remove_oldest_datagram>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	f43f af7c 	beq.w	800e9c4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eacc:	f8b8 3000 	ldrh.w	r3, [r8]
 800ead0:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ead2:	2b0a      	cmp	r3, #10
 800ead4:	f77f af0e 	ble.w	800e8f4 <ip4_reass+0x5c>
 800ead8:	e774      	b.n	800e9c4 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eada:	2004      	movs	r0, #4
 800eadc:	f7fa fae6 	bl	80090ac <memp_malloc>
  if (ipr == NULL) {
 800eae0:	4604      	mov	r4, r0
 800eae2:	b178      	cbz	r0, 800eb04 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800eae4:	2300      	movs	r3, #0
 800eae6:	61e3      	str	r3, [r4, #28]
 800eae8:	60a3      	str	r3, [r4, #8]
 800eaea:	60e3      	str	r3, [r4, #12]
 800eaec:	6123      	str	r3, [r4, #16]
 800eaee:	6163      	str	r3, [r4, #20]
 800eaf0:	61a3      	str	r3, [r4, #24]
 800eaf2:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800eaf4:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 800eaf8:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 800eafc:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800eafe:	230f      	movs	r3, #15
 800eb00:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800eb02:	e7cc      	b.n	800ea9e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800eb04:	4639      	mov	r1, r7
 800eb06:	4650      	mov	r0, sl
 800eb08:	f7ff fe74 	bl	800e7f4 <ip_reass_remove_oldest_datagram>
 800eb0c:	4287      	cmp	r7, r0
 800eb0e:	f73f af59 	bgt.w	800e9c4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eb12:	2004      	movs	r0, #4
 800eb14:	f7fa faca 	bl	80090ac <memp_malloc>
    if (ipr == NULL)
 800eb18:	4604      	mov	r4, r0
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d1e2      	bne.n	800eae4 <ip4_reass+0x24c>
 800eb1e:	e751      	b.n	800e9c4 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 800eb20:	9b03      	ldr	r3, [sp, #12]
 800eb22:	4283      	cmp	r3, r0
 800eb24:	f63f af4e 	bhi.w	800e9c4 <ip4_reass+0x12c>
        ipr->p = new_p;
 800eb28:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800eb2a:	9b01      	ldr	r3, [sp, #4]
 800eb2c:	b19b      	cbz	r3, 800eb56 <ip4_reass+0x2be>
 800eb2e:	7fa3      	ldrb	r3, [r4, #30]
 800eb30:	07d9      	lsls	r1, r3, #31
 800eb32:	d5a5      	bpl.n	800ea80 <ip4_reass+0x1e8>
    if (valid) {
 800eb34:	f1ba 0f00 	cmp.w	sl, #0
 800eb38:	d138      	bne.n	800ebac <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eb3a:	f8b8 3000 	ldrh.w	r3, [r8]
 800eb3e:	443b      	add	r3, r7
 800eb40:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 800eb44:	2600      	movs	r6, #0
}
 800eb46:	4630      	mov	r0, r6
 800eb48:	b005      	add	sp, #20
 800eb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 800eb4e:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800eb50:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800eb52:	d18e      	bne.n	800ea72 <ip4_reass+0x1da>
 800eb54:	e7e9      	b.n	800eb2a <ip4_reass+0x292>
    if (valid) {
 800eb56:	f1ba 0f00 	cmp.w	sl, #0
 800eb5a:	d012      	beq.n	800eb82 <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800eb5c:	6863      	ldr	r3, [r4, #4]
 800eb5e:	b183      	cbz	r3, 800eb82 <ip4_reass+0x2ea>
 800eb60:	6859      	ldr	r1, [r3, #4]
 800eb62:	888b      	ldrh	r3, [r1, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d031      	beq.n	800ebcc <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eb68:	f8b8 3000 	ldrh.w	r3, [r8]
 800eb6c:	443b      	add	r3, r7
 800eb6e:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800eb72:	9b01      	ldr	r3, [sp, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1e5      	bne.n	800eb44 <ip4_reass+0x2ac>
 800eb78:	e008      	b.n	800eb8c <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800eb7a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800eb7e:	4659      	mov	r1, fp
 800eb80:	b323      	cbz	r3, 800ebcc <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eb82:	f8b8 3000 	ldrh.w	r3, [r8]
 800eb86:	443b      	add	r3, r7
 800eb88:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eb8c:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800eb8e:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eb90:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800eb94:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eb96:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800eb98:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800eb9a:	e7d3      	b.n	800eb44 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800eb9c:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 800eb9e:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d0ea      	beq.n	800eb7a <ip4_reass+0x2e2>
 800eba4:	7fa3      	ldrb	r3, [r4, #30]
 800eba6:	07da      	lsls	r2, r3, #31
 800eba8:	f57f af6a 	bpl.w	800ea80 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ebac:	6863      	ldr	r3, [r4, #4]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d0c3      	beq.n	800eb3a <ip4_reass+0x2a2>
 800ebb2:	e7d5      	b.n	800eb60 <ip4_reass+0x2c8>
 800ebb4:	08011f2c 	.word	0x08011f2c
 800ebb8:	08012044 	.word	0x08012044
 800ebbc:	08010440 	.word	0x08010440
 800ebc0:	08011fb4 	.word	0x08011fb4
 800ebc4:	24010948 	.word	0x24010948
 800ebc8:	2401094c 	.word	0x2401094c
        q = iprh->next_pbuf;
 800ebcc:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 800ebd0:	b153      	cbz	r3, 800ebe8 <ip4_reass+0x350>
 800ebd2:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800ebd8:	88c0      	ldrh	r0, [r0, #6]
 800ebda:	8893      	ldrh	r3, [r2, #4]
 800ebdc:	4298      	cmp	r0, r3
 800ebde:	d1c3      	bne.n	800eb68 <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 800ebe0:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1f6      	bne.n	800ebd4 <ip4_reass+0x33c>
 800ebe6:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 800ebe8:	9b02      	ldr	r3, [sp, #8]
 800ebea:	428b      	cmp	r3, r1
 800ebec:	d110      	bne.n	800ec10 <ip4_reass+0x378>
 800ebee:	4b3e      	ldr	r3, [pc, #248]	; (800ece8 <ip4_reass+0x450>)
 800ebf0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ebf4:	493d      	ldr	r1, [pc, #244]	; (800ecec <ip4_reass+0x454>)
 800ebf6:	483e      	ldr	r0, [pc, #248]	; (800ecf0 <ip4_reass+0x458>)
 800ebf8:	f000 fce2 	bl	800f5c0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ebfc:	9b02      	ldr	r3, [sp, #8]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	b133      	cbz	r3, 800ec10 <ip4_reass+0x378>
 800ec02:	4b39      	ldr	r3, [pc, #228]	; (800ece8 <ip4_reass+0x450>)
 800ec04:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ec08:	493a      	ldr	r1, [pc, #232]	; (800ecf4 <ip4_reass+0x45c>)
 800ec0a:	4839      	ldr	r0, [pc, #228]	; (800ecf0 <ip4_reass+0x458>)
 800ec0c:	f000 fcd8 	bl	800f5c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ec10:	f8b8 3000 	ldrh.w	r3, [r8]
 800ec14:	443b      	add	r3, r7
 800ec16:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800ec1a:	9b01      	ldr	r3, [sp, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d156      	bne.n	800ecce <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 800ec20:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ec22:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800ec24:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ec26:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800ec2a:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ec2c:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800ec2e:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ec30:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ec32:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec34:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ec36:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ec38:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec3a:	68a3      	ldr	r3, [r4, #8]
 800ec3c:	6921      	ldr	r1, [r4, #16]
 800ec3e:	6962      	ldr	r2, [r4, #20]
 800ec40:	6075      	str	r5, [r6, #4]
 800ec42:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ec44:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec46:	60f2      	str	r2, [r6, #12]
 800ec48:	6033      	str	r3, [r6, #0]
 800ec4a:	69a3      	ldr	r3, [r4, #24]
 800ec4c:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ec4e:	f7f9 fe97 	bl	8008980 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800ec52:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ec54:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ec56:	71b3      	strb	r3, [r6, #6]
 800ec58:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ec5a:	72b3      	strb	r3, [r6, #10]
 800ec5c:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800ec5e:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800ec60:	b15d      	cbz	r5, 800ec7a <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 800ec62:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800ec64:	4628      	mov	r0, r5
 800ec66:	2114      	movs	r1, #20
 800ec68:	f7fa fdc0 	bl	80097ec <pbuf_remove_header>
      pbuf_cat(p, r);
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f7fa ffc8 	bl	8009c04 <pbuf_cat>
      r = iprh->next_pbuf;
 800ec74:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800ec76:	2d00      	cmp	r5, #0
 800ec78:	d1f3      	bne.n	800ec62 <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 800ec7a:	f8d9 5000 	ldr.w	r5, [r9]
 800ec7e:	42a5      	cmp	r5, r4
 800ec80:	d005      	beq.n	800ec8e <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec82:	b335      	cbz	r5, 800ecd2 <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	42a3      	cmp	r3, r4
 800ec88:	d014      	beq.n	800ecb4 <ip4_reass+0x41c>
 800ec8a:	461d      	mov	r5, r3
 800ec8c:	e7f9      	b.n	800ec82 <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800ec94:	4621      	mov	r1, r4
 800ec96:	2004      	movs	r0, #4
 800ec98:	f7fa fa4e 	bl	8009138 <memp_free>
    clen = pbuf_clen(p);
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f7fa ff87 	bl	8009bb0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eca2:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 800eca6:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eca8:	4283      	cmp	r3, r0
 800ecaa:	d306      	bcc.n	800ecba <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ecac:	1b1b      	subs	r3, r3, r4
 800ecae:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 800ecb2:	e68b      	b.n	800e9cc <ip4_reass+0x134>
    prev->next = ipr->next;
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	602b      	str	r3, [r5, #0]
 800ecb8:	e7ec      	b.n	800ec94 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ecba:	4b0b      	ldr	r3, [pc, #44]	; (800ece8 <ip4_reass+0x450>)
 800ecbc:	f240 229b 	movw	r2, #667	; 0x29b
 800ecc0:	490d      	ldr	r1, [pc, #52]	; (800ecf8 <ip4_reass+0x460>)
 800ecc2:	480b      	ldr	r0, [pc, #44]	; (800ecf0 <ip4_reass+0x458>)
 800ecc4:	f000 fc7c 	bl	800f5c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ecc8:	f8b8 3000 	ldrh.w	r3, [r8]
 800eccc:	e7ee      	b.n	800ecac <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ecce:	8ba0      	ldrh	r0, [r4, #28]
 800ecd0:	e7ae      	b.n	800ec30 <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ecd2:	4b05      	ldr	r3, [pc, #20]	; (800ece8 <ip4_reass+0x450>)
 800ecd4:	f240 1245 	movw	r2, #325	; 0x145
 800ecd8:	4908      	ldr	r1, [pc, #32]	; (800ecfc <ip4_reass+0x464>)
 800ecda:	4805      	ldr	r0, [pc, #20]	; (800ecf0 <ip4_reass+0x458>)
 800ecdc:	f000 fc70 	bl	800f5c0 <iprintf>
    prev->next = ipr->next;
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	602b      	str	r3, [r5, #0]
 800ece4:	deff      	udf	#255	; 0xff
 800ece6:	bf00      	nop
 800ece8:	08011f2c 	.word	0x08011f2c
 800ecec:	08011ff4 	.word	0x08011ff4
 800ecf0:	08010440 	.word	0x08010440
 800ecf4:	08012004 	.word	0x08012004
 800ecf8:	08012028 	.word	0x08012028
 800ecfc:	08011fb4 	.word	0x08011fb4

0800ed00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed04:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 800ed06:	b08f      	sub	sp, #60	; 0x3c
 800ed08:	4606      	mov	r6, r0
 800ed0a:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed0c:	f1b3 0214 	subs.w	r2, r3, #20
{
 800ed10:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed12:	bf48      	it	mi
 800ed14:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ed18:	6843      	ldr	r3, [r0, #4]
 800ed1a:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed1c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ed20:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed22:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ed24:	f003 030f 	and.w	r3, r3, #15
 800ed28:	2b05      	cmp	r3, #5
 800ed2a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800ed2e:	f040 80e5 	bne.w	800eefc <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed32:	8943      	ldrh	r3, [r0, #10]
 800ed34:	2b13      	cmp	r3, #19
 800ed36:	f240 80e4 	bls.w	800ef02 <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed3a:	9b04      	ldr	r3, [sp, #16]
 800ed3c:	88d8      	ldrh	r0, [r3, #6]
 800ed3e:	f7f9 fe1f 	bl	8008980 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed42:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 800ed44:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed48:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 800ed4a:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 800ed4c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	920d      	str	r2, [sp, #52]	; 0x34
 800ed54:	9305      	str	r3, [sp, #20]

  while (left) {
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 8098 	beq.w	800ee8c <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed5c:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 800ed5e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef24 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed64:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed66:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800ef2c <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed72:	2114      	movs	r1, #20
 800ed74:	200e      	movs	r0, #14
 800ed76:	f7fa fe15 	bl	80099a4 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed7c:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 800ed7e:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed80:	4293      	cmp	r3, r2
 800ed82:	bf28      	it	cs
 800ed84:	4613      	movcs	r3, r2
 800ed86:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f000 80b4 	beq.w	800eef6 <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed8e:	8943      	ldrh	r3, [r0, #10]
 800ed90:	2b13      	cmp	r3, #19
 800ed92:	f240 808c 	bls.w	800eeae <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed96:	9904      	ldr	r1, [sp, #16]
 800ed98:	9b03      	ldr	r3, [sp, #12]
 800ed9a:	680a      	ldr	r2, [r1, #0]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	684f      	ldr	r7, [r1, #4]
 800eda0:	6888      	ldr	r0, [r1, #8]
 800eda2:	68c9      	ldr	r1, [r1, #12]
 800eda4:	605f      	str	r7, [r3, #4]
 800eda6:	60d9      	str	r1, [r3, #12]
 800eda8:	9904      	ldr	r1, [sp, #16]
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	6098      	str	r0, [r3, #8]
 800edae:	690a      	ldr	r2, [r1, #16]
 800edb0:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 800edb8:	9b06      	ldr	r3, [sp, #24]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d034      	beq.n	800ee28 <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edbe:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 800edc0:	8973      	ldrh	r3, [r6, #10]
 800edc2:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edc4:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800edc6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800edc8:	d369      	bcc.n	800ee9e <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edca:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800edcc:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edce:	429c      	cmp	r4, r3
 800edd0:	bf28      	it	cs
 800edd2:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edd4:	2c00      	cmp	r4, #0
 800edd6:	d05b      	beq.n	800ee90 <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800edd8:	f7fa f968 	bl	80090ac <memp_malloc>
 800eddc:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edde:	2241      	movs	r2, #65	; 0x41
 800ede0:	4621      	mov	r1, r4
 800ede2:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800ede4:	f1bb 0f00 	cmp.w	fp, #0
 800ede8:	d06c      	beq.n	800eec4 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edea:	9401      	str	r4, [sp, #4]
 800edec:	465b      	mov	r3, fp
 800edee:	6877      	ldr	r7, [r6, #4]
 800edf0:	eb07 0c05 	add.w	ip, r7, r5
 800edf4:	f8cd c000 	str.w	ip, [sp]
 800edf8:	f7fa fca8 	bl	800974c <pbuf_alloced_custom>
 800edfc:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800edfe:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 800ee00:	f1ba 0f00 	cmp.w	sl, #0
 800ee04:	d068      	beq.n	800eed8 <ip4_frag+0x1d8>
      pbuf_ref(p);
 800ee06:	f7fa fedf 	bl	8009bc8 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee0a:	4b43      	ldr	r3, [pc, #268]	; (800ef18 <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee0c:	4651      	mov	r1, sl
 800ee0e:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee10:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 800ee14:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 800ee18:	f7fa fef4 	bl	8009c04 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee1c:	9b02      	ldr	r3, [sp, #8]
 800ee1e:	1b1f      	subs	r7, r3, r4
 800ee20:	b2bb      	uxth	r3, r7
 800ee22:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d133      	bne.n	800ee90 <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800ee2a:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee2c:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 800ee2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800ee30:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 800ee32:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800ee36:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 800ee38:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	dd3f      	ble.n	800eebe <ip4_frag+0x1be>
 800ee3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d13c      	bne.n	800eebe <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ee44:	f7f9 fd9c 	bl	8008980 <lwip_htons>
 800ee48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ee4a:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ee4c:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ee4e:	f103 0014 	add.w	r0, r3, #20
 800ee52:	b280      	uxth	r0, r0
 800ee54:	f7f9 fd94 	bl	8008980 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800ee58:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ee5a:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ee5c:	72bb      	strb	r3, [r7, #10]
 800ee5e:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ee60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee62:	9f03      	ldr	r7, [sp, #12]
 800ee64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee66:	4639      	mov	r1, r7
 800ee68:	6943      	ldr	r3, [r0, #20]
 800ee6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ee6c:	4638      	mov	r0, r7
 800ee6e:	f7fa fd29 	bl	80098c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ee72:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800ee76:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 800ee78:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 800ee7c:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 800ee7e:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 800ee80:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 800ee82:	b292      	uxth	r2, r2
 800ee84:	9207      	str	r2, [sp, #28]
  while (left) {
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f47f af71 	bne.w	800ed6e <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	e020      	b.n	800eed2 <ip4_frag+0x1d2>
        p = p->next;
 800ee90:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 800ee92:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 800ee94:	8973      	ldrh	r3, [r6, #10]
 800ee96:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ee98:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800ee9a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ee9c:	d295      	bcs.n	800edca <ip4_frag+0xca>
 800ee9e:	4643      	mov	r3, r8
 800eea0:	f240 322d 	movw	r2, #813	; 0x32d
 800eea4:	491d      	ldr	r1, [pc, #116]	; (800ef1c <ip4_frag+0x21c>)
 800eea6:	4648      	mov	r0, r9
 800eea8:	f000 fb8a 	bl	800f5c0 <iprintf>
 800eeac:	e78d      	b.n	800edca <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eeae:	4643      	mov	r3, r8
 800eeb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800eeb4:	491a      	ldr	r1, [pc, #104]	; (800ef20 <ip4_frag+0x220>)
 800eeb6:	4648      	mov	r0, r9
 800eeb8:	f000 fb82 	bl	800f5c0 <iprintf>
 800eebc:	e76b      	b.n	800ed96 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 800eebe:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800eec2:	e7bf      	b.n	800ee44 <ip4_frag+0x144>
        pbuf_free(rambuf);
 800eec4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800eec8:	4658      	mov	r0, fp
 800eeca:	f7fa fcfb 	bl	80098c4 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eece:	f04f 30ff 	mov.w	r0, #4294967295
}
 800eed2:	b00f      	add	sp, #60	; 0x3c
 800eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 800eed8:	46da      	mov	sl, fp
 800eeda:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800eede:	2005      	movs	r0, #5
 800eee0:	4651      	mov	r1, sl
 800eee2:	f7fa f929 	bl	8009138 <memp_free>
        pbuf_free(rambuf);
 800eee6:	4658      	mov	r0, fp
 800eee8:	f7fa fcec 	bl	80098c4 <pbuf_free>
  return ERR_MEM;
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295
}
 800eef0:	b00f      	add	sp, #60	; 0x3c
 800eef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800eef6:	f04f 30ff 	mov.w	r0, #4294967295
 800eefa:	e7ea      	b.n	800eed2 <ip4_frag+0x1d2>
    return ERR_VAL;
 800eefc:	f06f 0005 	mvn.w	r0, #5
 800ef00:	e7e7      	b.n	800eed2 <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ef02:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <ip4_frag+0x224>)
 800ef04:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ef08:	4907      	ldr	r1, [pc, #28]	; (800ef28 <ip4_frag+0x228>)
 800ef0a:	4808      	ldr	r0, [pc, #32]	; (800ef2c <ip4_frag+0x22c>)
 800ef0c:	f000 fb58 	bl	800f5c0 <iprintf>
 800ef10:	f06f 0005 	mvn.w	r0, #5
 800ef14:	e7dd      	b.n	800eed2 <ip4_frag+0x1d2>
 800ef16:	bf00      	nop
 800ef18:	0800e681 	.word	0x0800e681
 800ef1c:	080120a0 	.word	0x080120a0
 800ef20:	08012080 	.word	0x08012080
 800ef24:	08011f2c 	.word	0x08011f2c
 800ef28:	08012064 	.word	0x08012064
 800ef2c:	08010440 	.word	0x08010440

0800ef30 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800ef36:	f7f6 ffef 	bl	8005f18 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef3a:	8963      	ldrh	r3, [r4, #10]
 800ef3c:	2b0e      	cmp	r3, #14
 800ef3e:	d91a      	bls.n	800ef76 <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef40:	7be3      	ldrb	r3, [r4, #15]
 800ef42:	b91b      	cbnz	r3, 800ef4c <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 800ef44:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800ef48:	3301      	adds	r3, #1
 800ef4a:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef4c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef4e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800ef50:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800ef52:	07d9      	lsls	r1, r3, #31
 800ef54:	d50a      	bpl.n	800ef6c <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d030      	beq.n	800efbc <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ef5a:	2206      	movs	r2, #6
 800ef5c:	491d      	ldr	r1, [pc, #116]	; (800efd4 <ethernet_input+0xa4>)
 800ef5e:	f000 fb84 	bl	800f66a <memcmp>
 800ef62:	b918      	cbnz	r0, 800ef6c <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ef64:	7b63      	ldrb	r3, [r4, #13]
 800ef66:	f043 0308 	orr.w	r3, r3, #8
 800ef6a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ef6c:	2e08      	cmp	r6, #8
 800ef6e:	d016      	beq.n	800ef9e <ethernet_input+0x6e>
 800ef70:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ef74:	d004      	beq.n	800ef80 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7fa fca4 	bl	80098c4 <pbuf_free>
  return ERR_OK;
}
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ef80:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800ef84:	071b      	lsls	r3, r3, #28
 800ef86:	d5f6      	bpl.n	800ef76 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ef88:	210e      	movs	r1, #14
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7fa fc2e 	bl	80097ec <pbuf_remove_header>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d1f0      	bne.n	800ef76 <ethernet_input+0x46>
        etharp_input(p, netif);
 800ef94:	4629      	mov	r1, r5
 800ef96:	4620      	mov	r0, r4
 800ef98:	f7fe fe72 	bl	800dc80 <etharp_input>
      break;
 800ef9c:	e7ee      	b.n	800ef7c <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ef9e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800efa2:	071a      	lsls	r2, r3, #28
 800efa4:	d5e7      	bpl.n	800ef76 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800efa6:	210e      	movs	r1, #14
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7fa fc1f 	bl	80097ec <pbuf_remove_header>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d1e1      	bne.n	800ef76 <ethernet_input+0x46>
        ip4_input(p, netif);
 800efb2:	4629      	mov	r1, r5
 800efb4:	4620      	mov	r0, r4
 800efb6:	f7ff f9d1 	bl	800e35c <ip4_input>
      break;
 800efba:	e7df      	b.n	800ef7c <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800efbc:	7843      	ldrb	r3, [r0, #1]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1d4      	bne.n	800ef6c <ethernet_input+0x3c>
 800efc2:	7883      	ldrb	r3, [r0, #2]
 800efc4:	2b5e      	cmp	r3, #94	; 0x5e
 800efc6:	d1d1      	bne.n	800ef6c <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800efc8:	7b63      	ldrb	r3, [r4, #13]
 800efca:	f043 0310 	orr.w	r3, r3, #16
 800efce:	7363      	strb	r3, [r4, #13]
 800efd0:	e7cc      	b.n	800ef6c <ethernet_input+0x3c>
 800efd2:	bf00      	nop
 800efd4:	0801211c 	.word	0x0801211c

0800efd8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	460c      	mov	r4, r1
 800efde:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800efe0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800efe4:	4616      	mov	r6, r2
 800efe6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800efe8:	f7f9 fcca 	bl	8008980 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800efec:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800efee:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eff0:	4620      	mov	r0, r4
 800eff2:	f7fa fbc7 	bl	8009784 <pbuf_add_header>
 800eff6:	b9f0      	cbnz	r0, 800f036 <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800eff8:	f7f6 ff8e 	bl	8005f18 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800effc:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800effe:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	600b      	str	r3, [r1, #0]
 800f006:	88bb      	ldrh	r3, [r7, #4]
 800f008:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f00a:	6833      	ldr	r3, [r6, #0]
 800f00c:	f8c1 3006 	str.w	r3, [r1, #6]
 800f010:	88b3      	ldrh	r3, [r6, #4]
 800f012:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f014:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f018:	2b06      	cmp	r3, #6
 800f01a:	d006      	beq.n	800f02a <ethernet_output+0x52>
 800f01c:	4b08      	ldr	r3, [pc, #32]	; (800f040 <ethernet_output+0x68>)
 800f01e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f022:	4908      	ldr	r1, [pc, #32]	; (800f044 <ethernet_output+0x6c>)
 800f024:	4808      	ldr	r0, [pc, #32]	; (800f048 <ethernet_output+0x70>)
 800f026:	f000 facb 	bl	800f5c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f02a:	69ab      	ldr	r3, [r5, #24]
 800f02c:	4621      	mov	r1, r4
 800f02e:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800f030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800f034:	4718      	bx	r3
}
 800f036:	f06f 0001 	mvn.w	r0, #1
 800f03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03e:	bf00      	nop
 800f040:	080120b0 	.word	0x080120b0
 800f044:	080120e8 	.word	0x080120e8
 800f048:	08010440 	.word	0x08010440

0800f04c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f04c:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f04e:	2200      	movs	r2, #0
 800f050:	2104      	movs	r1, #4
{
 800f052:	b510      	push	{r4, lr}
 800f054:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f056:	4618      	mov	r0, r3
 800f058:	f7f7 f96a 	bl	8006330 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f05c:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f060:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 800f062:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 800f064:	4258      	negs	r0, r3
 800f066:	bd10      	pop	{r4, pc}

0800f068 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800f068:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f06a:	2300      	movs	r3, #0
{
 800f06c:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f06e:	6800      	ldr	r0, [r0, #0]
{
 800f070:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f072:	461a      	mov	r2, r3
 800f074:	a901      	add	r1, sp, #4
 800f076:	f7f7 f999 	bl	80063ac <osMessageQueuePut>
 800f07a:	3800      	subs	r0, #0
 800f07c:	bf18      	it	ne
 800f07e:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800f080:	4240      	negs	r0, r0
 800f082:	b003      	add	sp, #12
 800f084:	f85d fb04 	ldr.w	pc, [sp], #4

0800f088 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f088:	b570      	push	{r4, r5, r6, lr}
 800f08a:	4615      	mov	r5, r2
 800f08c:	b082      	sub	sp, #8
 800f08e:	4606      	mov	r6, r0
 800f090:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800f092:	f7f6 ffb3 	bl	8005ffc <osKernelGetTickCount>
#endif
  if(timeout != 0)
 800f096:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 800f098:	4604      	mov	r4, r0
  if(timeout != 0)
 800f09a:	b14d      	cbz	r5, 800f0b0 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800f09c:	462b      	mov	r3, r5
 800f09e:	2200      	movs	r2, #0
 800f0a0:	6830      	ldr	r0, [r6, #0]
 800f0a2:	f7f7 f9c5 	bl	8006430 <osMessageQueueGet>
    if (status == osOK)
 800f0a6:	b148      	cbz	r0, 800f0bc <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f0a8:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f0ac:	b002      	add	sp, #8
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800f0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b4:	462a      	mov	r2, r5
 800f0b6:	6830      	ldr	r0, [r6, #0]
 800f0b8:	f7f7 f9ba 	bl	8006430 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800f0bc:	f7f6 ff9e 	bl	8005ffc <osKernelGetTickCount>
 800f0c0:	1b00      	subs	r0, r0, r4
}
 800f0c2:	b002      	add	sp, #8
 800f0c4:	bd70      	pop	{r4, r5, r6, pc}
 800f0c6:	bf00      	nop

0800f0c8 <sys_mbox_valid>:
 800f0c8:	6800      	ldr	r0, [r0, #0]
 800f0ca:	3800      	subs	r0, #0
 800f0cc:	bf18      	it	ne
 800f0ce:	2001      	movne	r0, #1
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop

0800f0d4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f0d4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	f7f6 fff4 	bl	80060c4 <osMutexNew>
 800f0dc:	4b01      	ldr	r3, [pc, #4]	; (800f0e4 <sys_init+0x10>)
 800f0de:	6018      	str	r0, [r3, #0]
#endif
}
 800f0e0:	bd08      	pop	{r3, pc}
 800f0e2:	bf00      	nop
 800f0e4:	24010950 	.word	0x24010950

0800f0e8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	f7f6 ffe9 	bl	80060c4 <osMutexNew>
#endif

  if(*mutex == NULL)
 800f0f2:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 800f0f6:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 800f0f8:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800f0fa:	4258      	negs	r0, r3
 800f0fc:	bd10      	pop	{r4, pc}
 800f0fe:	bf00      	nop

0800f100 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800f100:	f04f 31ff 	mov.w	r1, #4294967295
 800f104:	6800      	ldr	r0, [r0, #0]
 800f106:	f7f7 b81d 	b.w	8006144 <osMutexAcquire>
 800f10a:	bf00      	nop

0800f10c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800f10c:	6800      	ldr	r0, [r0, #0]
 800f10e:	f7f7 b83d 	b.w	800618c <osMutexRelease>
 800f112:	bf00      	nop

0800f114 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f116:	b08b      	sub	sp, #44	; 0x2c
 800f118:	4617      	mov	r7, r2
 800f11a:	460e      	mov	r6, r1
 800f11c:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800f11e:	2220      	movs	r2, #32
 800f120:	2100      	movs	r1, #0
 800f122:	a802      	add	r0, sp, #8
{
 800f124:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 800f126:	f000 fab0 	bl	800f68a <memset>
 800f12a:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800f12c:	4639      	mov	r1, r7
 800f12e:	aa01      	add	r2, sp, #4
 800f130:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 800f132:	9501      	str	r5, [sp, #4]
 800f134:	9406      	str	r4, [sp, #24]
 800f136:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800f138:	f7f6 ff68 	bl	800600c <osThreadNew>
#endif
}
 800f13c:	b00b      	add	sp, #44	; 0x2c
 800f13e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f140 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f140:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800f142:	4b04      	ldr	r3, [pc, #16]	; (800f154 <sys_arch_protect+0x14>)
 800f144:	f04f 31ff 	mov.w	r1, #4294967295
 800f148:	6818      	ldr	r0, [r3, #0]
 800f14a:	f7f6 fffb 	bl	8006144 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800f14e:	2001      	movs	r0, #1
 800f150:	bd08      	pop	{r3, pc}
 800f152:	bf00      	nop
 800f154:	24010950 	.word	0x24010950

0800f158 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f158:	4b01      	ldr	r3, [pc, #4]	; (800f160 <sys_arch_unprotect+0x8>)
 800f15a:	6818      	ldr	r0, [r3, #0]
 800f15c:	f7f7 b816 	b.w	800618c <osMutexRelease>
 800f160:	24010950 	.word	0x24010950
 800f164:	00000000 	.word	0x00000000

0800f168 <floor>:
 800f168:	ee10 1a90 	vmov	r1, s1
 800f16c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f170:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f174:	2b13      	cmp	r3, #19
 800f176:	b530      	push	{r4, r5, lr}
 800f178:	ee10 0a10 	vmov	r0, s0
 800f17c:	ee10 5a10 	vmov	r5, s0
 800f180:	dc31      	bgt.n	800f1e6 <floor+0x7e>
 800f182:	2b00      	cmp	r3, #0
 800f184:	da15      	bge.n	800f1b2 <floor+0x4a>
 800f186:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f248 <floor+0xe0>
 800f18a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f18e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	dd07      	ble.n	800f1a8 <floor+0x40>
 800f198:	2900      	cmp	r1, #0
 800f19a:	da4e      	bge.n	800f23a <floor+0xd2>
 800f19c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f1a0:	4308      	orrs	r0, r1
 800f1a2:	d04d      	beq.n	800f240 <floor+0xd8>
 800f1a4:	492a      	ldr	r1, [pc, #168]	; (800f250 <floor+0xe8>)
 800f1a6:	2000      	movs	r0, #0
 800f1a8:	460b      	mov	r3, r1
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	ec43 2b10 	vmov	d0, r2, r3
 800f1b0:	e020      	b.n	800f1f4 <floor+0x8c>
 800f1b2:	4a28      	ldr	r2, [pc, #160]	; (800f254 <floor+0xec>)
 800f1b4:	411a      	asrs	r2, r3
 800f1b6:	ea01 0402 	and.w	r4, r1, r2
 800f1ba:	4304      	orrs	r4, r0
 800f1bc:	d01a      	beq.n	800f1f4 <floor+0x8c>
 800f1be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800f248 <floor+0xe0>
 800f1c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f1c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ce:	ddeb      	ble.n	800f1a8 <floor+0x40>
 800f1d0:	2900      	cmp	r1, #0
 800f1d2:	bfbe      	ittt	lt
 800f1d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f1d8:	fa40 f303 	asrlt.w	r3, r0, r3
 800f1dc:	18c9      	addlt	r1, r1, r3
 800f1de:	ea21 0102 	bic.w	r1, r1, r2
 800f1e2:	2000      	movs	r0, #0
 800f1e4:	e7e0      	b.n	800f1a8 <floor+0x40>
 800f1e6:	2b33      	cmp	r3, #51	; 0x33
 800f1e8:	dd05      	ble.n	800f1f6 <floor+0x8e>
 800f1ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1ee:	d101      	bne.n	800f1f4 <floor+0x8c>
 800f1f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f1f4:	bd30      	pop	{r4, r5, pc}
 800f1f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f1fe:	40e2      	lsrs	r2, r4
 800f200:	4210      	tst	r0, r2
 800f202:	d0f7      	beq.n	800f1f4 <floor+0x8c>
 800f204:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f248 <floor+0xe0>
 800f208:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f20c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f214:	ddc8      	ble.n	800f1a8 <floor+0x40>
 800f216:	2900      	cmp	r1, #0
 800f218:	da02      	bge.n	800f220 <floor+0xb8>
 800f21a:	2b14      	cmp	r3, #20
 800f21c:	d103      	bne.n	800f226 <floor+0xbe>
 800f21e:	3101      	adds	r1, #1
 800f220:	ea20 0002 	bic.w	r0, r0, r2
 800f224:	e7c0      	b.n	800f1a8 <floor+0x40>
 800f226:	2401      	movs	r4, #1
 800f228:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f22c:	fa04 f303 	lsl.w	r3, r4, r3
 800f230:	4418      	add	r0, r3
 800f232:	4285      	cmp	r5, r0
 800f234:	bf88      	it	hi
 800f236:	1909      	addhi	r1, r1, r4
 800f238:	e7f2      	b.n	800f220 <floor+0xb8>
 800f23a:	2000      	movs	r0, #0
 800f23c:	4601      	mov	r1, r0
 800f23e:	e7b3      	b.n	800f1a8 <floor+0x40>
 800f240:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f244:	e7b0      	b.n	800f1a8 <floor+0x40>
 800f246:	bf00      	nop
 800f248:	8800759c 	.word	0x8800759c
 800f24c:	7e37e43c 	.word	0x7e37e43c
 800f250:	bff00000 	.word	0xbff00000
 800f254:	000fffff 	.word	0x000fffff

0800f258 <malloc>:
 800f258:	4b02      	ldr	r3, [pc, #8]	; (800f264 <malloc+0xc>)
 800f25a:	4601      	mov	r1, r0
 800f25c:	6818      	ldr	r0, [r3, #0]
 800f25e:	f000 b823 	b.w	800f2a8 <_malloc_r>
 800f262:	bf00      	nop
 800f264:	240000d0 	.word	0x240000d0

0800f268 <sbrk_aligned>:
 800f268:	b570      	push	{r4, r5, r6, lr}
 800f26a:	4e0e      	ldr	r6, [pc, #56]	; (800f2a4 <sbrk_aligned+0x3c>)
 800f26c:	460c      	mov	r4, r1
 800f26e:	6831      	ldr	r1, [r6, #0]
 800f270:	4605      	mov	r5, r0
 800f272:	b911      	cbnz	r1, 800f27a <sbrk_aligned+0x12>
 800f274:	f000 fa9c 	bl	800f7b0 <_sbrk_r>
 800f278:	6030      	str	r0, [r6, #0]
 800f27a:	4621      	mov	r1, r4
 800f27c:	4628      	mov	r0, r5
 800f27e:	f000 fa97 	bl	800f7b0 <_sbrk_r>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	d00a      	beq.n	800f29c <sbrk_aligned+0x34>
 800f286:	1cc4      	adds	r4, r0, #3
 800f288:	f024 0403 	bic.w	r4, r4, #3
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	d007      	beq.n	800f2a0 <sbrk_aligned+0x38>
 800f290:	1a21      	subs	r1, r4, r0
 800f292:	4628      	mov	r0, r5
 800f294:	f000 fa8c 	bl	800f7b0 <_sbrk_r>
 800f298:	3001      	adds	r0, #1
 800f29a:	d101      	bne.n	800f2a0 <sbrk_aligned+0x38>
 800f29c:	f04f 34ff 	mov.w	r4, #4294967295
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	bd70      	pop	{r4, r5, r6, pc}
 800f2a4:	24010958 	.word	0x24010958

0800f2a8 <_malloc_r>:
 800f2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2ac:	1ccd      	adds	r5, r1, #3
 800f2ae:	f025 0503 	bic.w	r5, r5, #3
 800f2b2:	3508      	adds	r5, #8
 800f2b4:	2d0c      	cmp	r5, #12
 800f2b6:	bf38      	it	cc
 800f2b8:	250c      	movcc	r5, #12
 800f2ba:	2d00      	cmp	r5, #0
 800f2bc:	4607      	mov	r7, r0
 800f2be:	db01      	blt.n	800f2c4 <_malloc_r+0x1c>
 800f2c0:	42a9      	cmp	r1, r5
 800f2c2:	d905      	bls.n	800f2d0 <_malloc_r+0x28>
 800f2c4:	230c      	movs	r3, #12
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f3a4 <_malloc_r+0xfc>
 800f2d4:	f000 f868 	bl	800f3a8 <__malloc_lock>
 800f2d8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2dc:	461c      	mov	r4, r3
 800f2de:	bb5c      	cbnz	r4, 800f338 <_malloc_r+0x90>
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	4638      	mov	r0, r7
 800f2e4:	f7ff ffc0 	bl	800f268 <sbrk_aligned>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	d155      	bne.n	800f39a <_malloc_r+0xf2>
 800f2ee:	f8d8 4000 	ldr.w	r4, [r8]
 800f2f2:	4626      	mov	r6, r4
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	d145      	bne.n	800f384 <_malloc_r+0xdc>
 800f2f8:	2c00      	cmp	r4, #0
 800f2fa:	d048      	beq.n	800f38e <_malloc_r+0xe6>
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	4631      	mov	r1, r6
 800f300:	4638      	mov	r0, r7
 800f302:	eb04 0903 	add.w	r9, r4, r3
 800f306:	f000 fa53 	bl	800f7b0 <_sbrk_r>
 800f30a:	4581      	cmp	r9, r0
 800f30c:	d13f      	bne.n	800f38e <_malloc_r+0xe6>
 800f30e:	6821      	ldr	r1, [r4, #0]
 800f310:	1a6d      	subs	r5, r5, r1
 800f312:	4629      	mov	r1, r5
 800f314:	4638      	mov	r0, r7
 800f316:	f7ff ffa7 	bl	800f268 <sbrk_aligned>
 800f31a:	3001      	adds	r0, #1
 800f31c:	d037      	beq.n	800f38e <_malloc_r+0xe6>
 800f31e:	6823      	ldr	r3, [r4, #0]
 800f320:	442b      	add	r3, r5
 800f322:	6023      	str	r3, [r4, #0]
 800f324:	f8d8 3000 	ldr.w	r3, [r8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d038      	beq.n	800f39e <_malloc_r+0xf6>
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	42a2      	cmp	r2, r4
 800f330:	d12b      	bne.n	800f38a <_malloc_r+0xe2>
 800f332:	2200      	movs	r2, #0
 800f334:	605a      	str	r2, [r3, #4]
 800f336:	e00f      	b.n	800f358 <_malloc_r+0xb0>
 800f338:	6822      	ldr	r2, [r4, #0]
 800f33a:	1b52      	subs	r2, r2, r5
 800f33c:	d41f      	bmi.n	800f37e <_malloc_r+0xd6>
 800f33e:	2a0b      	cmp	r2, #11
 800f340:	d917      	bls.n	800f372 <_malloc_r+0xca>
 800f342:	1961      	adds	r1, r4, r5
 800f344:	42a3      	cmp	r3, r4
 800f346:	6025      	str	r5, [r4, #0]
 800f348:	bf18      	it	ne
 800f34a:	6059      	strne	r1, [r3, #4]
 800f34c:	6863      	ldr	r3, [r4, #4]
 800f34e:	bf08      	it	eq
 800f350:	f8c8 1000 	streq.w	r1, [r8]
 800f354:	5162      	str	r2, [r4, r5]
 800f356:	604b      	str	r3, [r1, #4]
 800f358:	4638      	mov	r0, r7
 800f35a:	f104 060b 	add.w	r6, r4, #11
 800f35e:	f000 f829 	bl	800f3b4 <__malloc_unlock>
 800f362:	f026 0607 	bic.w	r6, r6, #7
 800f366:	1d23      	adds	r3, r4, #4
 800f368:	1af2      	subs	r2, r6, r3
 800f36a:	d0ae      	beq.n	800f2ca <_malloc_r+0x22>
 800f36c:	1b9b      	subs	r3, r3, r6
 800f36e:	50a3      	str	r3, [r4, r2]
 800f370:	e7ab      	b.n	800f2ca <_malloc_r+0x22>
 800f372:	42a3      	cmp	r3, r4
 800f374:	6862      	ldr	r2, [r4, #4]
 800f376:	d1dd      	bne.n	800f334 <_malloc_r+0x8c>
 800f378:	f8c8 2000 	str.w	r2, [r8]
 800f37c:	e7ec      	b.n	800f358 <_malloc_r+0xb0>
 800f37e:	4623      	mov	r3, r4
 800f380:	6864      	ldr	r4, [r4, #4]
 800f382:	e7ac      	b.n	800f2de <_malloc_r+0x36>
 800f384:	4634      	mov	r4, r6
 800f386:	6876      	ldr	r6, [r6, #4]
 800f388:	e7b4      	b.n	800f2f4 <_malloc_r+0x4c>
 800f38a:	4613      	mov	r3, r2
 800f38c:	e7cc      	b.n	800f328 <_malloc_r+0x80>
 800f38e:	230c      	movs	r3, #12
 800f390:	603b      	str	r3, [r7, #0]
 800f392:	4638      	mov	r0, r7
 800f394:	f000 f80e 	bl	800f3b4 <__malloc_unlock>
 800f398:	e797      	b.n	800f2ca <_malloc_r+0x22>
 800f39a:	6025      	str	r5, [r4, #0]
 800f39c:	e7dc      	b.n	800f358 <_malloc_r+0xb0>
 800f39e:	605b      	str	r3, [r3, #4]
 800f3a0:	deff      	udf	#255	; 0xff
 800f3a2:	bf00      	nop
 800f3a4:	24010954 	.word	0x24010954

0800f3a8 <__malloc_lock>:
 800f3a8:	4801      	ldr	r0, [pc, #4]	; (800f3b0 <__malloc_lock+0x8>)
 800f3aa:	f000 ba48 	b.w	800f83e <__retarget_lock_acquire_recursive>
 800f3ae:	bf00      	nop
 800f3b0:	24010a9c 	.word	0x24010a9c

0800f3b4 <__malloc_unlock>:
 800f3b4:	4801      	ldr	r0, [pc, #4]	; (800f3bc <__malloc_unlock+0x8>)
 800f3b6:	f000 ba43 	b.w	800f840 <__retarget_lock_release_recursive>
 800f3ba:	bf00      	nop
 800f3bc:	24010a9c 	.word	0x24010a9c

0800f3c0 <rand>:
 800f3c0:	4b16      	ldr	r3, [pc, #88]	; (800f41c <rand+0x5c>)
 800f3c2:	b510      	push	{r4, lr}
 800f3c4:	681c      	ldr	r4, [r3, #0]
 800f3c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f3c8:	b9b3      	cbnz	r3, 800f3f8 <rand+0x38>
 800f3ca:	2018      	movs	r0, #24
 800f3cc:	f7ff ff44 	bl	800f258 <malloc>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	6320      	str	r0, [r4, #48]	; 0x30
 800f3d4:	b920      	cbnz	r0, 800f3e0 <rand+0x20>
 800f3d6:	4b12      	ldr	r3, [pc, #72]	; (800f420 <rand+0x60>)
 800f3d8:	4812      	ldr	r0, [pc, #72]	; (800f424 <rand+0x64>)
 800f3da:	2152      	movs	r1, #82	; 0x52
 800f3dc:	f000 fa40 	bl	800f860 <__assert_func>
 800f3e0:	4911      	ldr	r1, [pc, #68]	; (800f428 <rand+0x68>)
 800f3e2:	4b12      	ldr	r3, [pc, #72]	; (800f42c <rand+0x6c>)
 800f3e4:	e9c0 1300 	strd	r1, r3, [r0]
 800f3e8:	4b11      	ldr	r3, [pc, #68]	; (800f430 <rand+0x70>)
 800f3ea:	6083      	str	r3, [r0, #8]
 800f3ec:	230b      	movs	r3, #11
 800f3ee:	8183      	strh	r3, [r0, #12]
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	2001      	movs	r0, #1
 800f3f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f3f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f3fa:	480e      	ldr	r0, [pc, #56]	; (800f434 <rand+0x74>)
 800f3fc:	690b      	ldr	r3, [r1, #16]
 800f3fe:	694c      	ldr	r4, [r1, #20]
 800f400:	4a0d      	ldr	r2, [pc, #52]	; (800f438 <rand+0x78>)
 800f402:	4358      	muls	r0, r3
 800f404:	fb02 0004 	mla	r0, r2, r4, r0
 800f408:	fba3 3202 	umull	r3, r2, r3, r2
 800f40c:	3301      	adds	r3, #1
 800f40e:	eb40 0002 	adc.w	r0, r0, r2
 800f412:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f416:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f41a:	bd10      	pop	{r4, pc}
 800f41c:	240000d0 	.word	0x240000d0
 800f420:	0801212a 	.word	0x0801212a
 800f424:	08012141 	.word	0x08012141
 800f428:	abcd330e 	.word	0xabcd330e
 800f42c:	e66d1234 	.word	0xe66d1234
 800f430:	0005deec 	.word	0x0005deec
 800f434:	5851f42d 	.word	0x5851f42d
 800f438:	4c957f2d 	.word	0x4c957f2d

0800f43c <std>:
 800f43c:	2300      	movs	r3, #0
 800f43e:	b510      	push	{r4, lr}
 800f440:	4604      	mov	r4, r0
 800f442:	e9c0 3300 	strd	r3, r3, [r0]
 800f446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f44a:	6083      	str	r3, [r0, #8]
 800f44c:	8181      	strh	r1, [r0, #12]
 800f44e:	6643      	str	r3, [r0, #100]	; 0x64
 800f450:	81c2      	strh	r2, [r0, #14]
 800f452:	6183      	str	r3, [r0, #24]
 800f454:	4619      	mov	r1, r3
 800f456:	2208      	movs	r2, #8
 800f458:	305c      	adds	r0, #92	; 0x5c
 800f45a:	f000 f916 	bl	800f68a <memset>
 800f45e:	4b0d      	ldr	r3, [pc, #52]	; (800f494 <std+0x58>)
 800f460:	6263      	str	r3, [r4, #36]	; 0x24
 800f462:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <std+0x5c>)
 800f464:	62a3      	str	r3, [r4, #40]	; 0x28
 800f466:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <std+0x60>)
 800f468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f46a:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <std+0x64>)
 800f46c:	6323      	str	r3, [r4, #48]	; 0x30
 800f46e:	4b0d      	ldr	r3, [pc, #52]	; (800f4a4 <std+0x68>)
 800f470:	6224      	str	r4, [r4, #32]
 800f472:	429c      	cmp	r4, r3
 800f474:	d006      	beq.n	800f484 <std+0x48>
 800f476:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f47a:	4294      	cmp	r4, r2
 800f47c:	d002      	beq.n	800f484 <std+0x48>
 800f47e:	33d0      	adds	r3, #208	; 0xd0
 800f480:	429c      	cmp	r4, r3
 800f482:	d105      	bne.n	800f490 <std+0x54>
 800f484:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f48c:	f000 b9d6 	b.w	800f83c <__retarget_lock_init_recursive>
 800f490:	bd10      	pop	{r4, pc}
 800f492:	bf00      	nop
 800f494:	0800f5e5 	.word	0x0800f5e5
 800f498:	0800f607 	.word	0x0800f607
 800f49c:	0800f63f 	.word	0x0800f63f
 800f4a0:	0800f663 	.word	0x0800f663
 800f4a4:	2401095c 	.word	0x2401095c

0800f4a8 <stdio_exit_handler>:
 800f4a8:	4a02      	ldr	r2, [pc, #8]	; (800f4b4 <stdio_exit_handler+0xc>)
 800f4aa:	4903      	ldr	r1, [pc, #12]	; (800f4b8 <stdio_exit_handler+0x10>)
 800f4ac:	4803      	ldr	r0, [pc, #12]	; (800f4bc <stdio_exit_handler+0x14>)
 800f4ae:	f000 b869 	b.w	800f584 <_fwalk_sglue>
 800f4b2:	bf00      	nop
 800f4b4:	24000078 	.word	0x24000078
 800f4b8:	0800ffe9 	.word	0x0800ffe9
 800f4bc:	24000084 	.word	0x24000084

0800f4c0 <cleanup_stdio>:
 800f4c0:	6841      	ldr	r1, [r0, #4]
 800f4c2:	4b0c      	ldr	r3, [pc, #48]	; (800f4f4 <cleanup_stdio+0x34>)
 800f4c4:	4299      	cmp	r1, r3
 800f4c6:	b510      	push	{r4, lr}
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	d001      	beq.n	800f4d0 <cleanup_stdio+0x10>
 800f4cc:	f000 fd8c 	bl	800ffe8 <_fflush_r>
 800f4d0:	68a1      	ldr	r1, [r4, #8]
 800f4d2:	4b09      	ldr	r3, [pc, #36]	; (800f4f8 <cleanup_stdio+0x38>)
 800f4d4:	4299      	cmp	r1, r3
 800f4d6:	d002      	beq.n	800f4de <cleanup_stdio+0x1e>
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 fd85 	bl	800ffe8 <_fflush_r>
 800f4de:	68e1      	ldr	r1, [r4, #12]
 800f4e0:	4b06      	ldr	r3, [pc, #24]	; (800f4fc <cleanup_stdio+0x3c>)
 800f4e2:	4299      	cmp	r1, r3
 800f4e4:	d004      	beq.n	800f4f0 <cleanup_stdio+0x30>
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ec:	f000 bd7c 	b.w	800ffe8 <_fflush_r>
 800f4f0:	bd10      	pop	{r4, pc}
 800f4f2:	bf00      	nop
 800f4f4:	2401095c 	.word	0x2401095c
 800f4f8:	240109c4 	.word	0x240109c4
 800f4fc:	24010a2c 	.word	0x24010a2c

0800f500 <global_stdio_init.part.0>:
 800f500:	b510      	push	{r4, lr}
 800f502:	4b0b      	ldr	r3, [pc, #44]	; (800f530 <global_stdio_init.part.0+0x30>)
 800f504:	4c0b      	ldr	r4, [pc, #44]	; (800f534 <global_stdio_init.part.0+0x34>)
 800f506:	4a0c      	ldr	r2, [pc, #48]	; (800f538 <global_stdio_init.part.0+0x38>)
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	4620      	mov	r0, r4
 800f50c:	2200      	movs	r2, #0
 800f50e:	2104      	movs	r1, #4
 800f510:	f7ff ff94 	bl	800f43c <std>
 800f514:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f518:	2201      	movs	r2, #1
 800f51a:	2109      	movs	r1, #9
 800f51c:	f7ff ff8e 	bl	800f43c <std>
 800f520:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f524:	2202      	movs	r2, #2
 800f526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f52a:	2112      	movs	r1, #18
 800f52c:	f7ff bf86 	b.w	800f43c <std>
 800f530:	24010a94 	.word	0x24010a94
 800f534:	2401095c 	.word	0x2401095c
 800f538:	0800f4a9 	.word	0x0800f4a9

0800f53c <__sfp_lock_acquire>:
 800f53c:	4801      	ldr	r0, [pc, #4]	; (800f544 <__sfp_lock_acquire+0x8>)
 800f53e:	f000 b97e 	b.w	800f83e <__retarget_lock_acquire_recursive>
 800f542:	bf00      	nop
 800f544:	24010a9d 	.word	0x24010a9d

0800f548 <__sfp_lock_release>:
 800f548:	4801      	ldr	r0, [pc, #4]	; (800f550 <__sfp_lock_release+0x8>)
 800f54a:	f000 b979 	b.w	800f840 <__retarget_lock_release_recursive>
 800f54e:	bf00      	nop
 800f550:	24010a9d 	.word	0x24010a9d

0800f554 <__sinit>:
 800f554:	b510      	push	{r4, lr}
 800f556:	4604      	mov	r4, r0
 800f558:	f7ff fff0 	bl	800f53c <__sfp_lock_acquire>
 800f55c:	6a23      	ldr	r3, [r4, #32]
 800f55e:	b11b      	cbz	r3, 800f568 <__sinit+0x14>
 800f560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f564:	f7ff bff0 	b.w	800f548 <__sfp_lock_release>
 800f568:	4b04      	ldr	r3, [pc, #16]	; (800f57c <__sinit+0x28>)
 800f56a:	6223      	str	r3, [r4, #32]
 800f56c:	4b04      	ldr	r3, [pc, #16]	; (800f580 <__sinit+0x2c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d1f5      	bne.n	800f560 <__sinit+0xc>
 800f574:	f7ff ffc4 	bl	800f500 <global_stdio_init.part.0>
 800f578:	e7f2      	b.n	800f560 <__sinit+0xc>
 800f57a:	bf00      	nop
 800f57c:	0800f4c1 	.word	0x0800f4c1
 800f580:	24010a94 	.word	0x24010a94

0800f584 <_fwalk_sglue>:
 800f584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f588:	4607      	mov	r7, r0
 800f58a:	4688      	mov	r8, r1
 800f58c:	4614      	mov	r4, r2
 800f58e:	2600      	movs	r6, #0
 800f590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f594:	f1b9 0901 	subs.w	r9, r9, #1
 800f598:	d505      	bpl.n	800f5a6 <_fwalk_sglue+0x22>
 800f59a:	6824      	ldr	r4, [r4, #0]
 800f59c:	2c00      	cmp	r4, #0
 800f59e:	d1f7      	bne.n	800f590 <_fwalk_sglue+0xc>
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5a6:	89ab      	ldrh	r3, [r5, #12]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d907      	bls.n	800f5bc <_fwalk_sglue+0x38>
 800f5ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	d003      	beq.n	800f5bc <_fwalk_sglue+0x38>
 800f5b4:	4629      	mov	r1, r5
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	47c0      	blx	r8
 800f5ba:	4306      	orrs	r6, r0
 800f5bc:	3568      	adds	r5, #104	; 0x68
 800f5be:	e7e9      	b.n	800f594 <_fwalk_sglue+0x10>

0800f5c0 <iprintf>:
 800f5c0:	b40f      	push	{r0, r1, r2, r3}
 800f5c2:	b507      	push	{r0, r1, r2, lr}
 800f5c4:	4906      	ldr	r1, [pc, #24]	; (800f5e0 <iprintf+0x20>)
 800f5c6:	ab04      	add	r3, sp, #16
 800f5c8:	6808      	ldr	r0, [r1, #0]
 800f5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ce:	6881      	ldr	r1, [r0, #8]
 800f5d0:	9301      	str	r3, [sp, #4]
 800f5d2:	f000 f9d9 	bl	800f988 <_vfiprintf_r>
 800f5d6:	b003      	add	sp, #12
 800f5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5dc:	b004      	add	sp, #16
 800f5de:	4770      	bx	lr
 800f5e0:	240000d0 	.word	0x240000d0

0800f5e4 <__sread>:
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ec:	f000 f8ce 	bl	800f78c <_read_r>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	bfab      	itete	ge
 800f5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5f8:	181b      	addge	r3, r3, r0
 800f5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5fe:	bfac      	ite	ge
 800f600:	6563      	strge	r3, [r4, #84]	; 0x54
 800f602:	81a3      	strhlt	r3, [r4, #12]
 800f604:	bd10      	pop	{r4, pc}

0800f606 <__swrite>:
 800f606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60a:	461f      	mov	r7, r3
 800f60c:	898b      	ldrh	r3, [r1, #12]
 800f60e:	05db      	lsls	r3, r3, #23
 800f610:	4605      	mov	r5, r0
 800f612:	460c      	mov	r4, r1
 800f614:	4616      	mov	r6, r2
 800f616:	d505      	bpl.n	800f624 <__swrite+0x1e>
 800f618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61c:	2302      	movs	r3, #2
 800f61e:	2200      	movs	r2, #0
 800f620:	f000 f8a2 	bl	800f768 <_lseek_r>
 800f624:	89a3      	ldrh	r3, [r4, #12]
 800f626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f62e:	81a3      	strh	r3, [r4, #12]
 800f630:	4632      	mov	r2, r6
 800f632:	463b      	mov	r3, r7
 800f634:	4628      	mov	r0, r5
 800f636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f63a:	f000 b8c9 	b.w	800f7d0 <_write_r>

0800f63e <__sseek>:
 800f63e:	b510      	push	{r4, lr}
 800f640:	460c      	mov	r4, r1
 800f642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f646:	f000 f88f 	bl	800f768 <_lseek_r>
 800f64a:	1c43      	adds	r3, r0, #1
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	bf15      	itete	ne
 800f650:	6560      	strne	r0, [r4, #84]	; 0x54
 800f652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f65a:	81a3      	strheq	r3, [r4, #12]
 800f65c:	bf18      	it	ne
 800f65e:	81a3      	strhne	r3, [r4, #12]
 800f660:	bd10      	pop	{r4, pc}

0800f662 <__sclose>:
 800f662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f666:	f000 b819 	b.w	800f69c <_close_r>

0800f66a <memcmp>:
 800f66a:	b510      	push	{r4, lr}
 800f66c:	3901      	subs	r1, #1
 800f66e:	4402      	add	r2, r0
 800f670:	4290      	cmp	r0, r2
 800f672:	d101      	bne.n	800f678 <memcmp+0xe>
 800f674:	2000      	movs	r0, #0
 800f676:	e005      	b.n	800f684 <memcmp+0x1a>
 800f678:	7803      	ldrb	r3, [r0, #0]
 800f67a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f67e:	42a3      	cmp	r3, r4
 800f680:	d001      	beq.n	800f686 <memcmp+0x1c>
 800f682:	1b18      	subs	r0, r3, r4
 800f684:	bd10      	pop	{r4, pc}
 800f686:	3001      	adds	r0, #1
 800f688:	e7f2      	b.n	800f670 <memcmp+0x6>

0800f68a <memset>:
 800f68a:	4402      	add	r2, r0
 800f68c:	4603      	mov	r3, r0
 800f68e:	4293      	cmp	r3, r2
 800f690:	d100      	bne.n	800f694 <memset+0xa>
 800f692:	4770      	bx	lr
 800f694:	f803 1b01 	strb.w	r1, [r3], #1
 800f698:	e7f9      	b.n	800f68e <memset+0x4>
	...

0800f69c <_close_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4d06      	ldr	r5, [pc, #24]	; (800f6b8 <_close_r+0x1c>)
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4604      	mov	r4, r0
 800f6a4:	4608      	mov	r0, r1
 800f6a6:	602b      	str	r3, [r5, #0]
 800f6a8:	f7f1 fe70 	bl	800138c <_close>
 800f6ac:	1c43      	adds	r3, r0, #1
 800f6ae:	d102      	bne.n	800f6b6 <_close_r+0x1a>
 800f6b0:	682b      	ldr	r3, [r5, #0]
 800f6b2:	b103      	cbz	r3, 800f6b6 <_close_r+0x1a>
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	bd38      	pop	{r3, r4, r5, pc}
 800f6b8:	24010a98 	.word	0x24010a98

0800f6bc <_reclaim_reent>:
 800f6bc:	4b29      	ldr	r3, [pc, #164]	; (800f764 <_reclaim_reent+0xa8>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4283      	cmp	r3, r0
 800f6c2:	b570      	push	{r4, r5, r6, lr}
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	d04b      	beq.n	800f760 <_reclaim_reent+0xa4>
 800f6c8:	69c3      	ldr	r3, [r0, #28]
 800f6ca:	b143      	cbz	r3, 800f6de <_reclaim_reent+0x22>
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d144      	bne.n	800f75c <_reclaim_reent+0xa0>
 800f6d2:	69e3      	ldr	r3, [r4, #28]
 800f6d4:	6819      	ldr	r1, [r3, #0]
 800f6d6:	b111      	cbz	r1, 800f6de <_reclaim_reent+0x22>
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f000 f8df 	bl	800f89c <_free_r>
 800f6de:	6961      	ldr	r1, [r4, #20]
 800f6e0:	b111      	cbz	r1, 800f6e8 <_reclaim_reent+0x2c>
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f000 f8da 	bl	800f89c <_free_r>
 800f6e8:	69e1      	ldr	r1, [r4, #28]
 800f6ea:	b111      	cbz	r1, 800f6f2 <_reclaim_reent+0x36>
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f000 f8d5 	bl	800f89c <_free_r>
 800f6f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f6f4:	b111      	cbz	r1, 800f6fc <_reclaim_reent+0x40>
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 f8d0 	bl	800f89c <_free_r>
 800f6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6fe:	b111      	cbz	r1, 800f706 <_reclaim_reent+0x4a>
 800f700:	4620      	mov	r0, r4
 800f702:	f000 f8cb 	bl	800f89c <_free_r>
 800f706:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f708:	b111      	cbz	r1, 800f710 <_reclaim_reent+0x54>
 800f70a:	4620      	mov	r0, r4
 800f70c:	f000 f8c6 	bl	800f89c <_free_r>
 800f710:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f712:	b111      	cbz	r1, 800f71a <_reclaim_reent+0x5e>
 800f714:	4620      	mov	r0, r4
 800f716:	f000 f8c1 	bl	800f89c <_free_r>
 800f71a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f71c:	b111      	cbz	r1, 800f724 <_reclaim_reent+0x68>
 800f71e:	4620      	mov	r0, r4
 800f720:	f000 f8bc 	bl	800f89c <_free_r>
 800f724:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f726:	b111      	cbz	r1, 800f72e <_reclaim_reent+0x72>
 800f728:	4620      	mov	r0, r4
 800f72a:	f000 f8b7 	bl	800f89c <_free_r>
 800f72e:	6a23      	ldr	r3, [r4, #32]
 800f730:	b1b3      	cbz	r3, 800f760 <_reclaim_reent+0xa4>
 800f732:	4620      	mov	r0, r4
 800f734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f738:	4718      	bx	r3
 800f73a:	5949      	ldr	r1, [r1, r5]
 800f73c:	b941      	cbnz	r1, 800f750 <_reclaim_reent+0x94>
 800f73e:	3504      	adds	r5, #4
 800f740:	69e3      	ldr	r3, [r4, #28]
 800f742:	2d80      	cmp	r5, #128	; 0x80
 800f744:	68d9      	ldr	r1, [r3, #12]
 800f746:	d1f8      	bne.n	800f73a <_reclaim_reent+0x7e>
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 f8a7 	bl	800f89c <_free_r>
 800f74e:	e7c0      	b.n	800f6d2 <_reclaim_reent+0x16>
 800f750:	680e      	ldr	r6, [r1, #0]
 800f752:	4620      	mov	r0, r4
 800f754:	f000 f8a2 	bl	800f89c <_free_r>
 800f758:	4631      	mov	r1, r6
 800f75a:	e7ef      	b.n	800f73c <_reclaim_reent+0x80>
 800f75c:	2500      	movs	r5, #0
 800f75e:	e7ef      	b.n	800f740 <_reclaim_reent+0x84>
 800f760:	bd70      	pop	{r4, r5, r6, pc}
 800f762:	bf00      	nop
 800f764:	240000d0 	.word	0x240000d0

0800f768 <_lseek_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4d07      	ldr	r5, [pc, #28]	; (800f788 <_lseek_r+0x20>)
 800f76c:	4604      	mov	r4, r0
 800f76e:	4608      	mov	r0, r1
 800f770:	4611      	mov	r1, r2
 800f772:	2200      	movs	r2, #0
 800f774:	602a      	str	r2, [r5, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	f7f1 fe14 	bl	80013a4 <_lseek>
 800f77c:	1c43      	adds	r3, r0, #1
 800f77e:	d102      	bne.n	800f786 <_lseek_r+0x1e>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	b103      	cbz	r3, 800f786 <_lseek_r+0x1e>
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	24010a98 	.word	0x24010a98

0800f78c <_read_r>:
 800f78c:	b538      	push	{r3, r4, r5, lr}
 800f78e:	4d07      	ldr	r5, [pc, #28]	; (800f7ac <_read_r+0x20>)
 800f790:	4604      	mov	r4, r0
 800f792:	4608      	mov	r0, r1
 800f794:	4611      	mov	r1, r2
 800f796:	2200      	movs	r2, #0
 800f798:	602a      	str	r2, [r5, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	f7f1 fdda 	bl	8001354 <_read>
 800f7a0:	1c43      	adds	r3, r0, #1
 800f7a2:	d102      	bne.n	800f7aa <_read_r+0x1e>
 800f7a4:	682b      	ldr	r3, [r5, #0]
 800f7a6:	b103      	cbz	r3, 800f7aa <_read_r+0x1e>
 800f7a8:	6023      	str	r3, [r4, #0]
 800f7aa:	bd38      	pop	{r3, r4, r5, pc}
 800f7ac:	24010a98 	.word	0x24010a98

0800f7b0 <_sbrk_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d06      	ldr	r5, [pc, #24]	; (800f7cc <_sbrk_r+0x1c>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f7f1 fdf4 	bl	80013a8 <_sbrk>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_sbrk_r+0x1a>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_sbrk_r+0x1a>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	24010a98 	.word	0x24010a98

0800f7d0 <_write_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d07      	ldr	r5, [pc, #28]	; (800f7f0 <_write_r+0x20>)
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	4608      	mov	r0, r1
 800f7d8:	4611      	mov	r1, r2
 800f7da:	2200      	movs	r2, #0
 800f7dc:	602a      	str	r2, [r5, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	f7f1 fdc6 	bl	8001370 <_write>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_write_r+0x1e>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_write_r+0x1e>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	24010a98 	.word	0x24010a98

0800f7f4 <__libc_init_array>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	4d0d      	ldr	r5, [pc, #52]	; (800f82c <__libc_init_array+0x38>)
 800f7f8:	4c0d      	ldr	r4, [pc, #52]	; (800f830 <__libc_init_array+0x3c>)
 800f7fa:	1b64      	subs	r4, r4, r5
 800f7fc:	10a4      	asrs	r4, r4, #2
 800f7fe:	2600      	movs	r6, #0
 800f800:	42a6      	cmp	r6, r4
 800f802:	d109      	bne.n	800f818 <__libc_init_array+0x24>
 800f804:	4d0b      	ldr	r5, [pc, #44]	; (800f834 <__libc_init_array+0x40>)
 800f806:	4c0c      	ldr	r4, [pc, #48]	; (800f838 <__libc_init_array+0x44>)
 800f808:	f000 fd8e 	bl	8010328 <_init>
 800f80c:	1b64      	subs	r4, r4, r5
 800f80e:	10a4      	asrs	r4, r4, #2
 800f810:	2600      	movs	r6, #0
 800f812:	42a6      	cmp	r6, r4
 800f814:	d105      	bne.n	800f822 <__libc_init_array+0x2e>
 800f816:	bd70      	pop	{r4, r5, r6, pc}
 800f818:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81c:	4798      	blx	r3
 800f81e:	3601      	adds	r6, #1
 800f820:	e7ee      	b.n	800f800 <__libc_init_array+0xc>
 800f822:	f855 3b04 	ldr.w	r3, [r5], #4
 800f826:	4798      	blx	r3
 800f828:	3601      	adds	r6, #1
 800f82a:	e7f2      	b.n	800f812 <__libc_init_array+0x1e>
 800f82c:	08012208 	.word	0x08012208
 800f830:	08012208 	.word	0x08012208
 800f834:	08012208 	.word	0x08012208
 800f838:	08012214 	.word	0x08012214

0800f83c <__retarget_lock_init_recursive>:
 800f83c:	4770      	bx	lr

0800f83e <__retarget_lock_acquire_recursive>:
 800f83e:	4770      	bx	lr

0800f840 <__retarget_lock_release_recursive>:
 800f840:	4770      	bx	lr

0800f842 <memcpy>:
 800f842:	440a      	add	r2, r1
 800f844:	4291      	cmp	r1, r2
 800f846:	f100 33ff 	add.w	r3, r0, #4294967295
 800f84a:	d100      	bne.n	800f84e <memcpy+0xc>
 800f84c:	4770      	bx	lr
 800f84e:	b510      	push	{r4, lr}
 800f850:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f854:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f858:	4291      	cmp	r1, r2
 800f85a:	d1f9      	bne.n	800f850 <memcpy+0xe>
 800f85c:	bd10      	pop	{r4, pc}
	...

0800f860 <__assert_func>:
 800f860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f862:	4614      	mov	r4, r2
 800f864:	461a      	mov	r2, r3
 800f866:	4b09      	ldr	r3, [pc, #36]	; (800f88c <__assert_func+0x2c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4605      	mov	r5, r0
 800f86c:	68d8      	ldr	r0, [r3, #12]
 800f86e:	b14c      	cbz	r4, 800f884 <__assert_func+0x24>
 800f870:	4b07      	ldr	r3, [pc, #28]	; (800f890 <__assert_func+0x30>)
 800f872:	9100      	str	r1, [sp, #0]
 800f874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f878:	4906      	ldr	r1, [pc, #24]	; (800f894 <__assert_func+0x34>)
 800f87a:	462b      	mov	r3, r5
 800f87c:	f000 fbdc 	bl	8010038 <fiprintf>
 800f880:	f000 fc82 	bl	8010188 <abort>
 800f884:	4b04      	ldr	r3, [pc, #16]	; (800f898 <__assert_func+0x38>)
 800f886:	461c      	mov	r4, r3
 800f888:	e7f3      	b.n	800f872 <__assert_func+0x12>
 800f88a:	bf00      	nop
 800f88c:	240000d0 	.word	0x240000d0
 800f890:	08012199 	.word	0x08012199
 800f894:	080121a6 	.word	0x080121a6
 800f898:	080121d4 	.word	0x080121d4

0800f89c <_free_r>:
 800f89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f89e:	2900      	cmp	r1, #0
 800f8a0:	d044      	beq.n	800f92c <_free_r+0x90>
 800f8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8a6:	9001      	str	r0, [sp, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f8ae:	bfb8      	it	lt
 800f8b0:	18e4      	addlt	r4, r4, r3
 800f8b2:	f7ff fd79 	bl	800f3a8 <__malloc_lock>
 800f8b6:	4a1e      	ldr	r2, [pc, #120]	; (800f930 <_free_r+0x94>)
 800f8b8:	9801      	ldr	r0, [sp, #4]
 800f8ba:	6813      	ldr	r3, [r2, #0]
 800f8bc:	b933      	cbnz	r3, 800f8cc <_free_r+0x30>
 800f8be:	6063      	str	r3, [r4, #4]
 800f8c0:	6014      	str	r4, [r2, #0]
 800f8c2:	b003      	add	sp, #12
 800f8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8c8:	f7ff bd74 	b.w	800f3b4 <__malloc_unlock>
 800f8cc:	42a3      	cmp	r3, r4
 800f8ce:	d908      	bls.n	800f8e2 <_free_r+0x46>
 800f8d0:	6825      	ldr	r5, [r4, #0]
 800f8d2:	1961      	adds	r1, r4, r5
 800f8d4:	428b      	cmp	r3, r1
 800f8d6:	bf01      	itttt	eq
 800f8d8:	6819      	ldreq	r1, [r3, #0]
 800f8da:	685b      	ldreq	r3, [r3, #4]
 800f8dc:	1949      	addeq	r1, r1, r5
 800f8de:	6021      	streq	r1, [r4, #0]
 800f8e0:	e7ed      	b.n	800f8be <_free_r+0x22>
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	b10b      	cbz	r3, 800f8ec <_free_r+0x50>
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	d9fa      	bls.n	800f8e2 <_free_r+0x46>
 800f8ec:	6811      	ldr	r1, [r2, #0]
 800f8ee:	1855      	adds	r5, r2, r1
 800f8f0:	42a5      	cmp	r5, r4
 800f8f2:	d10b      	bne.n	800f90c <_free_r+0x70>
 800f8f4:	6824      	ldr	r4, [r4, #0]
 800f8f6:	4421      	add	r1, r4
 800f8f8:	1854      	adds	r4, r2, r1
 800f8fa:	42a3      	cmp	r3, r4
 800f8fc:	6011      	str	r1, [r2, #0]
 800f8fe:	d1e0      	bne.n	800f8c2 <_free_r+0x26>
 800f900:	681c      	ldr	r4, [r3, #0]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	6053      	str	r3, [r2, #4]
 800f906:	440c      	add	r4, r1
 800f908:	6014      	str	r4, [r2, #0]
 800f90a:	e7da      	b.n	800f8c2 <_free_r+0x26>
 800f90c:	d902      	bls.n	800f914 <_free_r+0x78>
 800f90e:	230c      	movs	r3, #12
 800f910:	6003      	str	r3, [r0, #0]
 800f912:	e7d6      	b.n	800f8c2 <_free_r+0x26>
 800f914:	6825      	ldr	r5, [r4, #0]
 800f916:	1961      	adds	r1, r4, r5
 800f918:	428b      	cmp	r3, r1
 800f91a:	bf04      	itt	eq
 800f91c:	6819      	ldreq	r1, [r3, #0]
 800f91e:	685b      	ldreq	r3, [r3, #4]
 800f920:	6063      	str	r3, [r4, #4]
 800f922:	bf04      	itt	eq
 800f924:	1949      	addeq	r1, r1, r5
 800f926:	6021      	streq	r1, [r4, #0]
 800f928:	6054      	str	r4, [r2, #4]
 800f92a:	e7ca      	b.n	800f8c2 <_free_r+0x26>
 800f92c:	b003      	add	sp, #12
 800f92e:	bd30      	pop	{r4, r5, pc}
 800f930:	24010954 	.word	0x24010954

0800f934 <__sfputc_r>:
 800f934:	6893      	ldr	r3, [r2, #8]
 800f936:	3b01      	subs	r3, #1
 800f938:	2b00      	cmp	r3, #0
 800f93a:	b410      	push	{r4}
 800f93c:	6093      	str	r3, [r2, #8]
 800f93e:	da08      	bge.n	800f952 <__sfputc_r+0x1e>
 800f940:	6994      	ldr	r4, [r2, #24]
 800f942:	42a3      	cmp	r3, r4
 800f944:	db01      	blt.n	800f94a <__sfputc_r+0x16>
 800f946:	290a      	cmp	r1, #10
 800f948:	d103      	bne.n	800f952 <__sfputc_r+0x1e>
 800f94a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f94e:	f000 bb85 	b.w	801005c <__swbuf_r>
 800f952:	6813      	ldr	r3, [r2, #0]
 800f954:	1c58      	adds	r0, r3, #1
 800f956:	6010      	str	r0, [r2, #0]
 800f958:	7019      	strb	r1, [r3, #0]
 800f95a:	4608      	mov	r0, r1
 800f95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f960:	4770      	bx	lr

0800f962 <__sfputs_r>:
 800f962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f964:	4606      	mov	r6, r0
 800f966:	460f      	mov	r7, r1
 800f968:	4614      	mov	r4, r2
 800f96a:	18d5      	adds	r5, r2, r3
 800f96c:	42ac      	cmp	r4, r5
 800f96e:	d101      	bne.n	800f974 <__sfputs_r+0x12>
 800f970:	2000      	movs	r0, #0
 800f972:	e007      	b.n	800f984 <__sfputs_r+0x22>
 800f974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f978:	463a      	mov	r2, r7
 800f97a:	4630      	mov	r0, r6
 800f97c:	f7ff ffda 	bl	800f934 <__sfputc_r>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d1f3      	bne.n	800f96c <__sfputs_r+0xa>
 800f984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f988 <_vfiprintf_r>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	460d      	mov	r5, r1
 800f98e:	b09d      	sub	sp, #116	; 0x74
 800f990:	4614      	mov	r4, r2
 800f992:	4698      	mov	r8, r3
 800f994:	4606      	mov	r6, r0
 800f996:	b118      	cbz	r0, 800f9a0 <_vfiprintf_r+0x18>
 800f998:	6a03      	ldr	r3, [r0, #32]
 800f99a:	b90b      	cbnz	r3, 800f9a0 <_vfiprintf_r+0x18>
 800f99c:	f7ff fdda 	bl	800f554 <__sinit>
 800f9a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9a2:	07d9      	lsls	r1, r3, #31
 800f9a4:	d405      	bmi.n	800f9b2 <_vfiprintf_r+0x2a>
 800f9a6:	89ab      	ldrh	r3, [r5, #12]
 800f9a8:	059a      	lsls	r2, r3, #22
 800f9aa:	d402      	bmi.n	800f9b2 <_vfiprintf_r+0x2a>
 800f9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9ae:	f7ff ff46 	bl	800f83e <__retarget_lock_acquire_recursive>
 800f9b2:	89ab      	ldrh	r3, [r5, #12]
 800f9b4:	071b      	lsls	r3, r3, #28
 800f9b6:	d501      	bpl.n	800f9bc <_vfiprintf_r+0x34>
 800f9b8:	692b      	ldr	r3, [r5, #16]
 800f9ba:	b99b      	cbnz	r3, 800f9e4 <_vfiprintf_r+0x5c>
 800f9bc:	4629      	mov	r1, r5
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f000 fb8a 	bl	80100d8 <__swsetup_r>
 800f9c4:	b170      	cbz	r0, 800f9e4 <_vfiprintf_r+0x5c>
 800f9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9c8:	07dc      	lsls	r4, r3, #31
 800f9ca:	d504      	bpl.n	800f9d6 <_vfiprintf_r+0x4e>
 800f9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d0:	b01d      	add	sp, #116	; 0x74
 800f9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d6:	89ab      	ldrh	r3, [r5, #12]
 800f9d8:	0598      	lsls	r0, r3, #22
 800f9da:	d4f7      	bmi.n	800f9cc <_vfiprintf_r+0x44>
 800f9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9de:	f7ff ff2f 	bl	800f840 <__retarget_lock_release_recursive>
 800f9e2:	e7f3      	b.n	800f9cc <_vfiprintf_r+0x44>
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e8:	2320      	movs	r3, #32
 800f9ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9f2:	2330      	movs	r3, #48	; 0x30
 800f9f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fba8 <_vfiprintf_r+0x220>
 800f9f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9fc:	f04f 0901 	mov.w	r9, #1
 800fa00:	4623      	mov	r3, r4
 800fa02:	469a      	mov	sl, r3
 800fa04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa08:	b10a      	cbz	r2, 800fa0e <_vfiprintf_r+0x86>
 800fa0a:	2a25      	cmp	r2, #37	; 0x25
 800fa0c:	d1f9      	bne.n	800fa02 <_vfiprintf_r+0x7a>
 800fa0e:	ebba 0b04 	subs.w	fp, sl, r4
 800fa12:	d00b      	beq.n	800fa2c <_vfiprintf_r+0xa4>
 800fa14:	465b      	mov	r3, fp
 800fa16:	4622      	mov	r2, r4
 800fa18:	4629      	mov	r1, r5
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7ff ffa1 	bl	800f962 <__sfputs_r>
 800fa20:	3001      	adds	r0, #1
 800fa22:	f000 80a9 	beq.w	800fb78 <_vfiprintf_r+0x1f0>
 800fa26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa28:	445a      	add	r2, fp
 800fa2a:	9209      	str	r2, [sp, #36]	; 0x24
 800fa2c:	f89a 3000 	ldrb.w	r3, [sl]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 80a1 	beq.w	800fb78 <_vfiprintf_r+0x1f0>
 800fa36:	2300      	movs	r3, #0
 800fa38:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa40:	f10a 0a01 	add.w	sl, sl, #1
 800fa44:	9304      	str	r3, [sp, #16]
 800fa46:	9307      	str	r3, [sp, #28]
 800fa48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa4c:	931a      	str	r3, [sp, #104]	; 0x68
 800fa4e:	4654      	mov	r4, sl
 800fa50:	2205      	movs	r2, #5
 800fa52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa56:	4854      	ldr	r0, [pc, #336]	; (800fba8 <_vfiprintf_r+0x220>)
 800fa58:	f7f0 fc42 	bl	80002e0 <memchr>
 800fa5c:	9a04      	ldr	r2, [sp, #16]
 800fa5e:	b9d8      	cbnz	r0, 800fa98 <_vfiprintf_r+0x110>
 800fa60:	06d1      	lsls	r1, r2, #27
 800fa62:	bf44      	itt	mi
 800fa64:	2320      	movmi	r3, #32
 800fa66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa6a:	0713      	lsls	r3, r2, #28
 800fa6c:	bf44      	itt	mi
 800fa6e:	232b      	movmi	r3, #43	; 0x2b
 800fa70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa74:	f89a 3000 	ldrb.w	r3, [sl]
 800fa78:	2b2a      	cmp	r3, #42	; 0x2a
 800fa7a:	d015      	beq.n	800faa8 <_vfiprintf_r+0x120>
 800fa7c:	9a07      	ldr	r2, [sp, #28]
 800fa7e:	4654      	mov	r4, sl
 800fa80:	2000      	movs	r0, #0
 800fa82:	f04f 0c0a 	mov.w	ip, #10
 800fa86:	4621      	mov	r1, r4
 800fa88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa8c:	3b30      	subs	r3, #48	; 0x30
 800fa8e:	2b09      	cmp	r3, #9
 800fa90:	d94d      	bls.n	800fb2e <_vfiprintf_r+0x1a6>
 800fa92:	b1b0      	cbz	r0, 800fac2 <_vfiprintf_r+0x13a>
 800fa94:	9207      	str	r2, [sp, #28]
 800fa96:	e014      	b.n	800fac2 <_vfiprintf_r+0x13a>
 800fa98:	eba0 0308 	sub.w	r3, r0, r8
 800fa9c:	fa09 f303 	lsl.w	r3, r9, r3
 800faa0:	4313      	orrs	r3, r2
 800faa2:	9304      	str	r3, [sp, #16]
 800faa4:	46a2      	mov	sl, r4
 800faa6:	e7d2      	b.n	800fa4e <_vfiprintf_r+0xc6>
 800faa8:	9b03      	ldr	r3, [sp, #12]
 800faaa:	1d19      	adds	r1, r3, #4
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	9103      	str	r1, [sp, #12]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	bfbb      	ittet	lt
 800fab4:	425b      	neglt	r3, r3
 800fab6:	f042 0202 	orrlt.w	r2, r2, #2
 800faba:	9307      	strge	r3, [sp, #28]
 800fabc:	9307      	strlt	r3, [sp, #28]
 800fabe:	bfb8      	it	lt
 800fac0:	9204      	strlt	r2, [sp, #16]
 800fac2:	7823      	ldrb	r3, [r4, #0]
 800fac4:	2b2e      	cmp	r3, #46	; 0x2e
 800fac6:	d10c      	bne.n	800fae2 <_vfiprintf_r+0x15a>
 800fac8:	7863      	ldrb	r3, [r4, #1]
 800faca:	2b2a      	cmp	r3, #42	; 0x2a
 800facc:	d134      	bne.n	800fb38 <_vfiprintf_r+0x1b0>
 800face:	9b03      	ldr	r3, [sp, #12]
 800fad0:	1d1a      	adds	r2, r3, #4
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	9203      	str	r2, [sp, #12]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	bfb8      	it	lt
 800fada:	f04f 33ff 	movlt.w	r3, #4294967295
 800fade:	3402      	adds	r4, #2
 800fae0:	9305      	str	r3, [sp, #20]
 800fae2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fbb8 <_vfiprintf_r+0x230>
 800fae6:	7821      	ldrb	r1, [r4, #0]
 800fae8:	2203      	movs	r2, #3
 800faea:	4650      	mov	r0, sl
 800faec:	f7f0 fbf8 	bl	80002e0 <memchr>
 800faf0:	b138      	cbz	r0, 800fb02 <_vfiprintf_r+0x17a>
 800faf2:	9b04      	ldr	r3, [sp, #16]
 800faf4:	eba0 000a 	sub.w	r0, r0, sl
 800faf8:	2240      	movs	r2, #64	; 0x40
 800fafa:	4082      	lsls	r2, r0
 800fafc:	4313      	orrs	r3, r2
 800fafe:	3401      	adds	r4, #1
 800fb00:	9304      	str	r3, [sp, #16]
 800fb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb06:	4829      	ldr	r0, [pc, #164]	; (800fbac <_vfiprintf_r+0x224>)
 800fb08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb0c:	2206      	movs	r2, #6
 800fb0e:	f7f0 fbe7 	bl	80002e0 <memchr>
 800fb12:	2800      	cmp	r0, #0
 800fb14:	d03f      	beq.n	800fb96 <_vfiprintf_r+0x20e>
 800fb16:	4b26      	ldr	r3, [pc, #152]	; (800fbb0 <_vfiprintf_r+0x228>)
 800fb18:	bb1b      	cbnz	r3, 800fb62 <_vfiprintf_r+0x1da>
 800fb1a:	9b03      	ldr	r3, [sp, #12]
 800fb1c:	3307      	adds	r3, #7
 800fb1e:	f023 0307 	bic.w	r3, r3, #7
 800fb22:	3308      	adds	r3, #8
 800fb24:	9303      	str	r3, [sp, #12]
 800fb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb28:	443b      	add	r3, r7
 800fb2a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb2c:	e768      	b.n	800fa00 <_vfiprintf_r+0x78>
 800fb2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb32:	460c      	mov	r4, r1
 800fb34:	2001      	movs	r0, #1
 800fb36:	e7a6      	b.n	800fa86 <_vfiprintf_r+0xfe>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	3401      	adds	r4, #1
 800fb3c:	9305      	str	r3, [sp, #20]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	f04f 0c0a 	mov.w	ip, #10
 800fb44:	4620      	mov	r0, r4
 800fb46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb4a:	3a30      	subs	r2, #48	; 0x30
 800fb4c:	2a09      	cmp	r2, #9
 800fb4e:	d903      	bls.n	800fb58 <_vfiprintf_r+0x1d0>
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d0c6      	beq.n	800fae2 <_vfiprintf_r+0x15a>
 800fb54:	9105      	str	r1, [sp, #20]
 800fb56:	e7c4      	b.n	800fae2 <_vfiprintf_r+0x15a>
 800fb58:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e7f0      	b.n	800fb44 <_vfiprintf_r+0x1bc>
 800fb62:	ab03      	add	r3, sp, #12
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	462a      	mov	r2, r5
 800fb68:	4b12      	ldr	r3, [pc, #72]	; (800fbb4 <_vfiprintf_r+0x22c>)
 800fb6a:	a904      	add	r1, sp, #16
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	f3af 8000 	nop.w
 800fb72:	4607      	mov	r7, r0
 800fb74:	1c78      	adds	r0, r7, #1
 800fb76:	d1d6      	bne.n	800fb26 <_vfiprintf_r+0x19e>
 800fb78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb7a:	07d9      	lsls	r1, r3, #31
 800fb7c:	d405      	bmi.n	800fb8a <_vfiprintf_r+0x202>
 800fb7e:	89ab      	ldrh	r3, [r5, #12]
 800fb80:	059a      	lsls	r2, r3, #22
 800fb82:	d402      	bmi.n	800fb8a <_vfiprintf_r+0x202>
 800fb84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb86:	f7ff fe5b 	bl	800f840 <__retarget_lock_release_recursive>
 800fb8a:	89ab      	ldrh	r3, [r5, #12]
 800fb8c:	065b      	lsls	r3, r3, #25
 800fb8e:	f53f af1d 	bmi.w	800f9cc <_vfiprintf_r+0x44>
 800fb92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb94:	e71c      	b.n	800f9d0 <_vfiprintf_r+0x48>
 800fb96:	ab03      	add	r3, sp, #12
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	462a      	mov	r2, r5
 800fb9c:	4b05      	ldr	r3, [pc, #20]	; (800fbb4 <_vfiprintf_r+0x22c>)
 800fb9e:	a904      	add	r1, sp, #16
 800fba0:	4630      	mov	r0, r6
 800fba2:	f000 f879 	bl	800fc98 <_printf_i>
 800fba6:	e7e4      	b.n	800fb72 <_vfiprintf_r+0x1ea>
 800fba8:	080121d5 	.word	0x080121d5
 800fbac:	080121df 	.word	0x080121df
 800fbb0:	00000000 	.word	0x00000000
 800fbb4:	0800f963 	.word	0x0800f963
 800fbb8:	080121db 	.word	0x080121db

0800fbbc <_printf_common>:
 800fbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc0:	4616      	mov	r6, r2
 800fbc2:	4699      	mov	r9, r3
 800fbc4:	688a      	ldr	r2, [r1, #8]
 800fbc6:	690b      	ldr	r3, [r1, #16]
 800fbc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	bfb8      	it	lt
 800fbd0:	4613      	movlt	r3, r2
 800fbd2:	6033      	str	r3, [r6, #0]
 800fbd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbd8:	4607      	mov	r7, r0
 800fbda:	460c      	mov	r4, r1
 800fbdc:	b10a      	cbz	r2, 800fbe2 <_printf_common+0x26>
 800fbde:	3301      	adds	r3, #1
 800fbe0:	6033      	str	r3, [r6, #0]
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	0699      	lsls	r1, r3, #26
 800fbe6:	bf42      	ittt	mi
 800fbe8:	6833      	ldrmi	r3, [r6, #0]
 800fbea:	3302      	addmi	r3, #2
 800fbec:	6033      	strmi	r3, [r6, #0]
 800fbee:	6825      	ldr	r5, [r4, #0]
 800fbf0:	f015 0506 	ands.w	r5, r5, #6
 800fbf4:	d106      	bne.n	800fc04 <_printf_common+0x48>
 800fbf6:	f104 0a19 	add.w	sl, r4, #25
 800fbfa:	68e3      	ldr	r3, [r4, #12]
 800fbfc:	6832      	ldr	r2, [r6, #0]
 800fbfe:	1a9b      	subs	r3, r3, r2
 800fc00:	42ab      	cmp	r3, r5
 800fc02:	dc26      	bgt.n	800fc52 <_printf_common+0x96>
 800fc04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc08:	1e13      	subs	r3, r2, #0
 800fc0a:	6822      	ldr	r2, [r4, #0]
 800fc0c:	bf18      	it	ne
 800fc0e:	2301      	movne	r3, #1
 800fc10:	0692      	lsls	r2, r2, #26
 800fc12:	d42b      	bmi.n	800fc6c <_printf_common+0xb0>
 800fc14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc18:	4649      	mov	r1, r9
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	47c0      	blx	r8
 800fc1e:	3001      	adds	r0, #1
 800fc20:	d01e      	beq.n	800fc60 <_printf_common+0xa4>
 800fc22:	6823      	ldr	r3, [r4, #0]
 800fc24:	6922      	ldr	r2, [r4, #16]
 800fc26:	f003 0306 	and.w	r3, r3, #6
 800fc2a:	2b04      	cmp	r3, #4
 800fc2c:	bf02      	ittt	eq
 800fc2e:	68e5      	ldreq	r5, [r4, #12]
 800fc30:	6833      	ldreq	r3, [r6, #0]
 800fc32:	1aed      	subeq	r5, r5, r3
 800fc34:	68a3      	ldr	r3, [r4, #8]
 800fc36:	bf0c      	ite	eq
 800fc38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc3c:	2500      	movne	r5, #0
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	bfc4      	itt	gt
 800fc42:	1a9b      	subgt	r3, r3, r2
 800fc44:	18ed      	addgt	r5, r5, r3
 800fc46:	2600      	movs	r6, #0
 800fc48:	341a      	adds	r4, #26
 800fc4a:	42b5      	cmp	r5, r6
 800fc4c:	d11a      	bne.n	800fc84 <_printf_common+0xc8>
 800fc4e:	2000      	movs	r0, #0
 800fc50:	e008      	b.n	800fc64 <_printf_common+0xa8>
 800fc52:	2301      	movs	r3, #1
 800fc54:	4652      	mov	r2, sl
 800fc56:	4649      	mov	r1, r9
 800fc58:	4638      	mov	r0, r7
 800fc5a:	47c0      	blx	r8
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d103      	bne.n	800fc68 <_printf_common+0xac>
 800fc60:	f04f 30ff 	mov.w	r0, #4294967295
 800fc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc68:	3501      	adds	r5, #1
 800fc6a:	e7c6      	b.n	800fbfa <_printf_common+0x3e>
 800fc6c:	18e1      	adds	r1, r4, r3
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	2030      	movs	r0, #48	; 0x30
 800fc72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc76:	4422      	add	r2, r4
 800fc78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc80:	3302      	adds	r3, #2
 800fc82:	e7c7      	b.n	800fc14 <_printf_common+0x58>
 800fc84:	2301      	movs	r3, #1
 800fc86:	4622      	mov	r2, r4
 800fc88:	4649      	mov	r1, r9
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	47c0      	blx	r8
 800fc8e:	3001      	adds	r0, #1
 800fc90:	d0e6      	beq.n	800fc60 <_printf_common+0xa4>
 800fc92:	3601      	adds	r6, #1
 800fc94:	e7d9      	b.n	800fc4a <_printf_common+0x8e>
	...

0800fc98 <_printf_i>:
 800fc98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc9c:	7e0f      	ldrb	r7, [r1, #24]
 800fc9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fca0:	2f78      	cmp	r7, #120	; 0x78
 800fca2:	4691      	mov	r9, r2
 800fca4:	4680      	mov	r8, r0
 800fca6:	460c      	mov	r4, r1
 800fca8:	469a      	mov	sl, r3
 800fcaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fcae:	d807      	bhi.n	800fcc0 <_printf_i+0x28>
 800fcb0:	2f62      	cmp	r7, #98	; 0x62
 800fcb2:	d80a      	bhi.n	800fcca <_printf_i+0x32>
 800fcb4:	2f00      	cmp	r7, #0
 800fcb6:	f000 80d4 	beq.w	800fe62 <_printf_i+0x1ca>
 800fcba:	2f58      	cmp	r7, #88	; 0x58
 800fcbc:	f000 80c0 	beq.w	800fe40 <_printf_i+0x1a8>
 800fcc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcc8:	e03a      	b.n	800fd40 <_printf_i+0xa8>
 800fcca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcce:	2b15      	cmp	r3, #21
 800fcd0:	d8f6      	bhi.n	800fcc0 <_printf_i+0x28>
 800fcd2:	a101      	add	r1, pc, #4	; (adr r1, 800fcd8 <_printf_i+0x40>)
 800fcd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcd8:	0800fd31 	.word	0x0800fd31
 800fcdc:	0800fd45 	.word	0x0800fd45
 800fce0:	0800fcc1 	.word	0x0800fcc1
 800fce4:	0800fcc1 	.word	0x0800fcc1
 800fce8:	0800fcc1 	.word	0x0800fcc1
 800fcec:	0800fcc1 	.word	0x0800fcc1
 800fcf0:	0800fd45 	.word	0x0800fd45
 800fcf4:	0800fcc1 	.word	0x0800fcc1
 800fcf8:	0800fcc1 	.word	0x0800fcc1
 800fcfc:	0800fcc1 	.word	0x0800fcc1
 800fd00:	0800fcc1 	.word	0x0800fcc1
 800fd04:	0800fe49 	.word	0x0800fe49
 800fd08:	0800fd71 	.word	0x0800fd71
 800fd0c:	0800fe03 	.word	0x0800fe03
 800fd10:	0800fcc1 	.word	0x0800fcc1
 800fd14:	0800fcc1 	.word	0x0800fcc1
 800fd18:	0800fe6b 	.word	0x0800fe6b
 800fd1c:	0800fcc1 	.word	0x0800fcc1
 800fd20:	0800fd71 	.word	0x0800fd71
 800fd24:	0800fcc1 	.word	0x0800fcc1
 800fd28:	0800fcc1 	.word	0x0800fcc1
 800fd2c:	0800fe0b 	.word	0x0800fe0b
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	1d1a      	adds	r2, r3, #4
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	602a      	str	r2, [r5, #0]
 800fd38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd40:	2301      	movs	r3, #1
 800fd42:	e09f      	b.n	800fe84 <_printf_i+0x1ec>
 800fd44:	6820      	ldr	r0, [r4, #0]
 800fd46:	682b      	ldr	r3, [r5, #0]
 800fd48:	0607      	lsls	r7, r0, #24
 800fd4a:	f103 0104 	add.w	r1, r3, #4
 800fd4e:	6029      	str	r1, [r5, #0]
 800fd50:	d501      	bpl.n	800fd56 <_printf_i+0xbe>
 800fd52:	681e      	ldr	r6, [r3, #0]
 800fd54:	e003      	b.n	800fd5e <_printf_i+0xc6>
 800fd56:	0646      	lsls	r6, r0, #25
 800fd58:	d5fb      	bpl.n	800fd52 <_printf_i+0xba>
 800fd5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd5e:	2e00      	cmp	r6, #0
 800fd60:	da03      	bge.n	800fd6a <_printf_i+0xd2>
 800fd62:	232d      	movs	r3, #45	; 0x2d
 800fd64:	4276      	negs	r6, r6
 800fd66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd6a:	485a      	ldr	r0, [pc, #360]	; (800fed4 <_printf_i+0x23c>)
 800fd6c:	230a      	movs	r3, #10
 800fd6e:	e012      	b.n	800fd96 <_printf_i+0xfe>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	6820      	ldr	r0, [r4, #0]
 800fd74:	1d19      	adds	r1, r3, #4
 800fd76:	6029      	str	r1, [r5, #0]
 800fd78:	0605      	lsls	r5, r0, #24
 800fd7a:	d501      	bpl.n	800fd80 <_printf_i+0xe8>
 800fd7c:	681e      	ldr	r6, [r3, #0]
 800fd7e:	e002      	b.n	800fd86 <_printf_i+0xee>
 800fd80:	0641      	lsls	r1, r0, #25
 800fd82:	d5fb      	bpl.n	800fd7c <_printf_i+0xe4>
 800fd84:	881e      	ldrh	r6, [r3, #0]
 800fd86:	4853      	ldr	r0, [pc, #332]	; (800fed4 <_printf_i+0x23c>)
 800fd88:	2f6f      	cmp	r7, #111	; 0x6f
 800fd8a:	bf0c      	ite	eq
 800fd8c:	2308      	moveq	r3, #8
 800fd8e:	230a      	movne	r3, #10
 800fd90:	2100      	movs	r1, #0
 800fd92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd96:	6865      	ldr	r5, [r4, #4]
 800fd98:	60a5      	str	r5, [r4, #8]
 800fd9a:	2d00      	cmp	r5, #0
 800fd9c:	bfa2      	ittt	ge
 800fd9e:	6821      	ldrge	r1, [r4, #0]
 800fda0:	f021 0104 	bicge.w	r1, r1, #4
 800fda4:	6021      	strge	r1, [r4, #0]
 800fda6:	b90e      	cbnz	r6, 800fdac <_printf_i+0x114>
 800fda8:	2d00      	cmp	r5, #0
 800fdaa:	d04b      	beq.n	800fe44 <_printf_i+0x1ac>
 800fdac:	4615      	mov	r5, r2
 800fdae:	fbb6 f1f3 	udiv	r1, r6, r3
 800fdb2:	fb03 6711 	mls	r7, r3, r1, r6
 800fdb6:	5dc7      	ldrb	r7, [r0, r7]
 800fdb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdbc:	4637      	mov	r7, r6
 800fdbe:	42bb      	cmp	r3, r7
 800fdc0:	460e      	mov	r6, r1
 800fdc2:	d9f4      	bls.n	800fdae <_printf_i+0x116>
 800fdc4:	2b08      	cmp	r3, #8
 800fdc6:	d10b      	bne.n	800fde0 <_printf_i+0x148>
 800fdc8:	6823      	ldr	r3, [r4, #0]
 800fdca:	07de      	lsls	r6, r3, #31
 800fdcc:	d508      	bpl.n	800fde0 <_printf_i+0x148>
 800fdce:	6923      	ldr	r3, [r4, #16]
 800fdd0:	6861      	ldr	r1, [r4, #4]
 800fdd2:	4299      	cmp	r1, r3
 800fdd4:	bfde      	ittt	le
 800fdd6:	2330      	movle	r3, #48	; 0x30
 800fdd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fde0:	1b52      	subs	r2, r2, r5
 800fde2:	6122      	str	r2, [r4, #16]
 800fde4:	f8cd a000 	str.w	sl, [sp]
 800fde8:	464b      	mov	r3, r9
 800fdea:	aa03      	add	r2, sp, #12
 800fdec:	4621      	mov	r1, r4
 800fdee:	4640      	mov	r0, r8
 800fdf0:	f7ff fee4 	bl	800fbbc <_printf_common>
 800fdf4:	3001      	adds	r0, #1
 800fdf6:	d14a      	bne.n	800fe8e <_printf_i+0x1f6>
 800fdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdfc:	b004      	add	sp, #16
 800fdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	f043 0320 	orr.w	r3, r3, #32
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	4833      	ldr	r0, [pc, #204]	; (800fed8 <_printf_i+0x240>)
 800fe0c:	2778      	movs	r7, #120	; 0x78
 800fe0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	6829      	ldr	r1, [r5, #0]
 800fe16:	061f      	lsls	r7, r3, #24
 800fe18:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe1c:	d402      	bmi.n	800fe24 <_printf_i+0x18c>
 800fe1e:	065f      	lsls	r7, r3, #25
 800fe20:	bf48      	it	mi
 800fe22:	b2b6      	uxthmi	r6, r6
 800fe24:	07df      	lsls	r7, r3, #31
 800fe26:	bf48      	it	mi
 800fe28:	f043 0320 	orrmi.w	r3, r3, #32
 800fe2c:	6029      	str	r1, [r5, #0]
 800fe2e:	bf48      	it	mi
 800fe30:	6023      	strmi	r3, [r4, #0]
 800fe32:	b91e      	cbnz	r6, 800fe3c <_printf_i+0x1a4>
 800fe34:	6823      	ldr	r3, [r4, #0]
 800fe36:	f023 0320 	bic.w	r3, r3, #32
 800fe3a:	6023      	str	r3, [r4, #0]
 800fe3c:	2310      	movs	r3, #16
 800fe3e:	e7a7      	b.n	800fd90 <_printf_i+0xf8>
 800fe40:	4824      	ldr	r0, [pc, #144]	; (800fed4 <_printf_i+0x23c>)
 800fe42:	e7e4      	b.n	800fe0e <_printf_i+0x176>
 800fe44:	4615      	mov	r5, r2
 800fe46:	e7bd      	b.n	800fdc4 <_printf_i+0x12c>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	6826      	ldr	r6, [r4, #0]
 800fe4c:	6961      	ldr	r1, [r4, #20]
 800fe4e:	1d18      	adds	r0, r3, #4
 800fe50:	6028      	str	r0, [r5, #0]
 800fe52:	0635      	lsls	r5, r6, #24
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	d501      	bpl.n	800fe5c <_printf_i+0x1c4>
 800fe58:	6019      	str	r1, [r3, #0]
 800fe5a:	e002      	b.n	800fe62 <_printf_i+0x1ca>
 800fe5c:	0670      	lsls	r0, r6, #25
 800fe5e:	d5fb      	bpl.n	800fe58 <_printf_i+0x1c0>
 800fe60:	8019      	strh	r1, [r3, #0]
 800fe62:	2300      	movs	r3, #0
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	4615      	mov	r5, r2
 800fe68:	e7bc      	b.n	800fde4 <_printf_i+0x14c>
 800fe6a:	682b      	ldr	r3, [r5, #0]
 800fe6c:	1d1a      	adds	r2, r3, #4
 800fe6e:	602a      	str	r2, [r5, #0]
 800fe70:	681d      	ldr	r5, [r3, #0]
 800fe72:	6862      	ldr	r2, [r4, #4]
 800fe74:	2100      	movs	r1, #0
 800fe76:	4628      	mov	r0, r5
 800fe78:	f7f0 fa32 	bl	80002e0 <memchr>
 800fe7c:	b108      	cbz	r0, 800fe82 <_printf_i+0x1ea>
 800fe7e:	1b40      	subs	r0, r0, r5
 800fe80:	6060      	str	r0, [r4, #4]
 800fe82:	6863      	ldr	r3, [r4, #4]
 800fe84:	6123      	str	r3, [r4, #16]
 800fe86:	2300      	movs	r3, #0
 800fe88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe8c:	e7aa      	b.n	800fde4 <_printf_i+0x14c>
 800fe8e:	6923      	ldr	r3, [r4, #16]
 800fe90:	462a      	mov	r2, r5
 800fe92:	4649      	mov	r1, r9
 800fe94:	4640      	mov	r0, r8
 800fe96:	47d0      	blx	sl
 800fe98:	3001      	adds	r0, #1
 800fe9a:	d0ad      	beq.n	800fdf8 <_printf_i+0x160>
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	079b      	lsls	r3, r3, #30
 800fea0:	d413      	bmi.n	800feca <_printf_i+0x232>
 800fea2:	68e0      	ldr	r0, [r4, #12]
 800fea4:	9b03      	ldr	r3, [sp, #12]
 800fea6:	4298      	cmp	r0, r3
 800fea8:	bfb8      	it	lt
 800feaa:	4618      	movlt	r0, r3
 800feac:	e7a6      	b.n	800fdfc <_printf_i+0x164>
 800feae:	2301      	movs	r3, #1
 800feb0:	4632      	mov	r2, r6
 800feb2:	4649      	mov	r1, r9
 800feb4:	4640      	mov	r0, r8
 800feb6:	47d0      	blx	sl
 800feb8:	3001      	adds	r0, #1
 800feba:	d09d      	beq.n	800fdf8 <_printf_i+0x160>
 800febc:	3501      	adds	r5, #1
 800febe:	68e3      	ldr	r3, [r4, #12]
 800fec0:	9903      	ldr	r1, [sp, #12]
 800fec2:	1a5b      	subs	r3, r3, r1
 800fec4:	42ab      	cmp	r3, r5
 800fec6:	dcf2      	bgt.n	800feae <_printf_i+0x216>
 800fec8:	e7eb      	b.n	800fea2 <_printf_i+0x20a>
 800feca:	2500      	movs	r5, #0
 800fecc:	f104 0619 	add.w	r6, r4, #25
 800fed0:	e7f5      	b.n	800febe <_printf_i+0x226>
 800fed2:	bf00      	nop
 800fed4:	080121e6 	.word	0x080121e6
 800fed8:	080121f7 	.word	0x080121f7

0800fedc <__sflush_r>:
 800fedc:	898a      	ldrh	r2, [r1, #12]
 800fede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee2:	4605      	mov	r5, r0
 800fee4:	0710      	lsls	r0, r2, #28
 800fee6:	460c      	mov	r4, r1
 800fee8:	d458      	bmi.n	800ff9c <__sflush_r+0xc0>
 800feea:	684b      	ldr	r3, [r1, #4]
 800feec:	2b00      	cmp	r3, #0
 800feee:	dc05      	bgt.n	800fefc <__sflush_r+0x20>
 800fef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dc02      	bgt.n	800fefc <__sflush_r+0x20>
 800fef6:	2000      	movs	r0, #0
 800fef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fefc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fefe:	2e00      	cmp	r6, #0
 800ff00:	d0f9      	beq.n	800fef6 <__sflush_r+0x1a>
 800ff02:	2300      	movs	r3, #0
 800ff04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff08:	682f      	ldr	r7, [r5, #0]
 800ff0a:	6a21      	ldr	r1, [r4, #32]
 800ff0c:	602b      	str	r3, [r5, #0]
 800ff0e:	d032      	beq.n	800ff76 <__sflush_r+0x9a>
 800ff10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	075a      	lsls	r2, r3, #29
 800ff16:	d505      	bpl.n	800ff24 <__sflush_r+0x48>
 800ff18:	6863      	ldr	r3, [r4, #4]
 800ff1a:	1ac0      	subs	r0, r0, r3
 800ff1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff1e:	b10b      	cbz	r3, 800ff24 <__sflush_r+0x48>
 800ff20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff22:	1ac0      	subs	r0, r0, r3
 800ff24:	2300      	movs	r3, #0
 800ff26:	4602      	mov	r2, r0
 800ff28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff2a:	6a21      	ldr	r1, [r4, #32]
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	47b0      	blx	r6
 800ff30:	1c43      	adds	r3, r0, #1
 800ff32:	89a3      	ldrh	r3, [r4, #12]
 800ff34:	d106      	bne.n	800ff44 <__sflush_r+0x68>
 800ff36:	6829      	ldr	r1, [r5, #0]
 800ff38:	291d      	cmp	r1, #29
 800ff3a:	d82b      	bhi.n	800ff94 <__sflush_r+0xb8>
 800ff3c:	4a29      	ldr	r2, [pc, #164]	; (800ffe4 <__sflush_r+0x108>)
 800ff3e:	410a      	asrs	r2, r1
 800ff40:	07d6      	lsls	r6, r2, #31
 800ff42:	d427      	bmi.n	800ff94 <__sflush_r+0xb8>
 800ff44:	2200      	movs	r2, #0
 800ff46:	6062      	str	r2, [r4, #4]
 800ff48:	04d9      	lsls	r1, r3, #19
 800ff4a:	6922      	ldr	r2, [r4, #16]
 800ff4c:	6022      	str	r2, [r4, #0]
 800ff4e:	d504      	bpl.n	800ff5a <__sflush_r+0x7e>
 800ff50:	1c42      	adds	r2, r0, #1
 800ff52:	d101      	bne.n	800ff58 <__sflush_r+0x7c>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	b903      	cbnz	r3, 800ff5a <__sflush_r+0x7e>
 800ff58:	6560      	str	r0, [r4, #84]	; 0x54
 800ff5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff5c:	602f      	str	r7, [r5, #0]
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	d0c9      	beq.n	800fef6 <__sflush_r+0x1a>
 800ff62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff66:	4299      	cmp	r1, r3
 800ff68:	d002      	beq.n	800ff70 <__sflush_r+0x94>
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	f7ff fc96 	bl	800f89c <_free_r>
 800ff70:	2000      	movs	r0, #0
 800ff72:	6360      	str	r0, [r4, #52]	; 0x34
 800ff74:	e7c0      	b.n	800fef8 <__sflush_r+0x1c>
 800ff76:	2301      	movs	r3, #1
 800ff78:	4628      	mov	r0, r5
 800ff7a:	47b0      	blx	r6
 800ff7c:	1c41      	adds	r1, r0, #1
 800ff7e:	d1c8      	bne.n	800ff12 <__sflush_r+0x36>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0c5      	beq.n	800ff12 <__sflush_r+0x36>
 800ff86:	2b1d      	cmp	r3, #29
 800ff88:	d001      	beq.n	800ff8e <__sflush_r+0xb2>
 800ff8a:	2b16      	cmp	r3, #22
 800ff8c:	d101      	bne.n	800ff92 <__sflush_r+0xb6>
 800ff8e:	602f      	str	r7, [r5, #0]
 800ff90:	e7b1      	b.n	800fef6 <__sflush_r+0x1a>
 800ff92:	89a3      	ldrh	r3, [r4, #12]
 800ff94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff98:	81a3      	strh	r3, [r4, #12]
 800ff9a:	e7ad      	b.n	800fef8 <__sflush_r+0x1c>
 800ff9c:	690f      	ldr	r7, [r1, #16]
 800ff9e:	2f00      	cmp	r7, #0
 800ffa0:	d0a9      	beq.n	800fef6 <__sflush_r+0x1a>
 800ffa2:	0793      	lsls	r3, r2, #30
 800ffa4:	680e      	ldr	r6, [r1, #0]
 800ffa6:	bf08      	it	eq
 800ffa8:	694b      	ldreq	r3, [r1, #20]
 800ffaa:	600f      	str	r7, [r1, #0]
 800ffac:	bf18      	it	ne
 800ffae:	2300      	movne	r3, #0
 800ffb0:	eba6 0807 	sub.w	r8, r6, r7
 800ffb4:	608b      	str	r3, [r1, #8]
 800ffb6:	f1b8 0f00 	cmp.w	r8, #0
 800ffba:	dd9c      	ble.n	800fef6 <__sflush_r+0x1a>
 800ffbc:	6a21      	ldr	r1, [r4, #32]
 800ffbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ffc0:	4643      	mov	r3, r8
 800ffc2:	463a      	mov	r2, r7
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	47b0      	blx	r6
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	dc06      	bgt.n	800ffda <__sflush_r+0xfe>
 800ffcc:	89a3      	ldrh	r3, [r4, #12]
 800ffce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffd2:	81a3      	strh	r3, [r4, #12]
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd8:	e78e      	b.n	800fef8 <__sflush_r+0x1c>
 800ffda:	4407      	add	r7, r0
 800ffdc:	eba8 0800 	sub.w	r8, r8, r0
 800ffe0:	e7e9      	b.n	800ffb6 <__sflush_r+0xda>
 800ffe2:	bf00      	nop
 800ffe4:	dfbffffe 	.word	0xdfbffffe

0800ffe8 <_fflush_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	690b      	ldr	r3, [r1, #16]
 800ffec:	4605      	mov	r5, r0
 800ffee:	460c      	mov	r4, r1
 800fff0:	b913      	cbnz	r3, 800fff8 <_fflush_r+0x10>
 800fff2:	2500      	movs	r5, #0
 800fff4:	4628      	mov	r0, r5
 800fff6:	bd38      	pop	{r3, r4, r5, pc}
 800fff8:	b118      	cbz	r0, 8010002 <_fflush_r+0x1a>
 800fffa:	6a03      	ldr	r3, [r0, #32]
 800fffc:	b90b      	cbnz	r3, 8010002 <_fflush_r+0x1a>
 800fffe:	f7ff faa9 	bl	800f554 <__sinit>
 8010002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0f3      	beq.n	800fff2 <_fflush_r+0xa>
 801000a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801000c:	07d0      	lsls	r0, r2, #31
 801000e:	d404      	bmi.n	801001a <_fflush_r+0x32>
 8010010:	0599      	lsls	r1, r3, #22
 8010012:	d402      	bmi.n	801001a <_fflush_r+0x32>
 8010014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010016:	f7ff fc12 	bl	800f83e <__retarget_lock_acquire_recursive>
 801001a:	4628      	mov	r0, r5
 801001c:	4621      	mov	r1, r4
 801001e:	f7ff ff5d 	bl	800fedc <__sflush_r>
 8010022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010024:	07da      	lsls	r2, r3, #31
 8010026:	4605      	mov	r5, r0
 8010028:	d4e4      	bmi.n	800fff4 <_fflush_r+0xc>
 801002a:	89a3      	ldrh	r3, [r4, #12]
 801002c:	059b      	lsls	r3, r3, #22
 801002e:	d4e1      	bmi.n	800fff4 <_fflush_r+0xc>
 8010030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010032:	f7ff fc05 	bl	800f840 <__retarget_lock_release_recursive>
 8010036:	e7dd      	b.n	800fff4 <_fflush_r+0xc>

08010038 <fiprintf>:
 8010038:	b40e      	push	{r1, r2, r3}
 801003a:	b503      	push	{r0, r1, lr}
 801003c:	4601      	mov	r1, r0
 801003e:	ab03      	add	r3, sp, #12
 8010040:	4805      	ldr	r0, [pc, #20]	; (8010058 <fiprintf+0x20>)
 8010042:	f853 2b04 	ldr.w	r2, [r3], #4
 8010046:	6800      	ldr	r0, [r0, #0]
 8010048:	9301      	str	r3, [sp, #4]
 801004a:	f7ff fc9d 	bl	800f988 <_vfiprintf_r>
 801004e:	b002      	add	sp, #8
 8010050:	f85d eb04 	ldr.w	lr, [sp], #4
 8010054:	b003      	add	sp, #12
 8010056:	4770      	bx	lr
 8010058:	240000d0 	.word	0x240000d0

0801005c <__swbuf_r>:
 801005c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801005e:	460e      	mov	r6, r1
 8010060:	4614      	mov	r4, r2
 8010062:	4605      	mov	r5, r0
 8010064:	b118      	cbz	r0, 801006e <__swbuf_r+0x12>
 8010066:	6a03      	ldr	r3, [r0, #32]
 8010068:	b90b      	cbnz	r3, 801006e <__swbuf_r+0x12>
 801006a:	f7ff fa73 	bl	800f554 <__sinit>
 801006e:	69a3      	ldr	r3, [r4, #24]
 8010070:	60a3      	str	r3, [r4, #8]
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	071a      	lsls	r2, r3, #28
 8010076:	d525      	bpl.n	80100c4 <__swbuf_r+0x68>
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	b31b      	cbz	r3, 80100c4 <__swbuf_r+0x68>
 801007c:	6823      	ldr	r3, [r4, #0]
 801007e:	6922      	ldr	r2, [r4, #16]
 8010080:	1a98      	subs	r0, r3, r2
 8010082:	6963      	ldr	r3, [r4, #20]
 8010084:	b2f6      	uxtb	r6, r6
 8010086:	4283      	cmp	r3, r0
 8010088:	4637      	mov	r7, r6
 801008a:	dc04      	bgt.n	8010096 <__swbuf_r+0x3a>
 801008c:	4621      	mov	r1, r4
 801008e:	4628      	mov	r0, r5
 8010090:	f7ff ffaa 	bl	800ffe8 <_fflush_r>
 8010094:	b9e0      	cbnz	r0, 80100d0 <__swbuf_r+0x74>
 8010096:	68a3      	ldr	r3, [r4, #8]
 8010098:	3b01      	subs	r3, #1
 801009a:	60a3      	str	r3, [r4, #8]
 801009c:	6823      	ldr	r3, [r4, #0]
 801009e:	1c5a      	adds	r2, r3, #1
 80100a0:	6022      	str	r2, [r4, #0]
 80100a2:	701e      	strb	r6, [r3, #0]
 80100a4:	6962      	ldr	r2, [r4, #20]
 80100a6:	1c43      	adds	r3, r0, #1
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d004      	beq.n	80100b6 <__swbuf_r+0x5a>
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	07db      	lsls	r3, r3, #31
 80100b0:	d506      	bpl.n	80100c0 <__swbuf_r+0x64>
 80100b2:	2e0a      	cmp	r6, #10
 80100b4:	d104      	bne.n	80100c0 <__swbuf_r+0x64>
 80100b6:	4621      	mov	r1, r4
 80100b8:	4628      	mov	r0, r5
 80100ba:	f7ff ff95 	bl	800ffe8 <_fflush_r>
 80100be:	b938      	cbnz	r0, 80100d0 <__swbuf_r+0x74>
 80100c0:	4638      	mov	r0, r7
 80100c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100c4:	4621      	mov	r1, r4
 80100c6:	4628      	mov	r0, r5
 80100c8:	f000 f806 	bl	80100d8 <__swsetup_r>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d0d5      	beq.n	801007c <__swbuf_r+0x20>
 80100d0:	f04f 37ff 	mov.w	r7, #4294967295
 80100d4:	e7f4      	b.n	80100c0 <__swbuf_r+0x64>
	...

080100d8 <__swsetup_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4b2a      	ldr	r3, [pc, #168]	; (8010184 <__swsetup_r+0xac>)
 80100dc:	4605      	mov	r5, r0
 80100de:	6818      	ldr	r0, [r3, #0]
 80100e0:	460c      	mov	r4, r1
 80100e2:	b118      	cbz	r0, 80100ec <__swsetup_r+0x14>
 80100e4:	6a03      	ldr	r3, [r0, #32]
 80100e6:	b90b      	cbnz	r3, 80100ec <__swsetup_r+0x14>
 80100e8:	f7ff fa34 	bl	800f554 <__sinit>
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100f2:	0718      	lsls	r0, r3, #28
 80100f4:	d422      	bmi.n	801013c <__swsetup_r+0x64>
 80100f6:	06d9      	lsls	r1, r3, #27
 80100f8:	d407      	bmi.n	801010a <__swsetup_r+0x32>
 80100fa:	2309      	movs	r3, #9
 80100fc:	602b      	str	r3, [r5, #0]
 80100fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010102:	81a3      	strh	r3, [r4, #12]
 8010104:	f04f 30ff 	mov.w	r0, #4294967295
 8010108:	e034      	b.n	8010174 <__swsetup_r+0x9c>
 801010a:	0758      	lsls	r0, r3, #29
 801010c:	d512      	bpl.n	8010134 <__swsetup_r+0x5c>
 801010e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010110:	b141      	cbz	r1, 8010124 <__swsetup_r+0x4c>
 8010112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010116:	4299      	cmp	r1, r3
 8010118:	d002      	beq.n	8010120 <__swsetup_r+0x48>
 801011a:	4628      	mov	r0, r5
 801011c:	f7ff fbbe 	bl	800f89c <_free_r>
 8010120:	2300      	movs	r3, #0
 8010122:	6363      	str	r3, [r4, #52]	; 0x34
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801012a:	81a3      	strh	r3, [r4, #12]
 801012c:	2300      	movs	r3, #0
 801012e:	6063      	str	r3, [r4, #4]
 8010130:	6923      	ldr	r3, [r4, #16]
 8010132:	6023      	str	r3, [r4, #0]
 8010134:	89a3      	ldrh	r3, [r4, #12]
 8010136:	f043 0308 	orr.w	r3, r3, #8
 801013a:	81a3      	strh	r3, [r4, #12]
 801013c:	6923      	ldr	r3, [r4, #16]
 801013e:	b94b      	cbnz	r3, 8010154 <__swsetup_r+0x7c>
 8010140:	89a3      	ldrh	r3, [r4, #12]
 8010142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801014a:	d003      	beq.n	8010154 <__swsetup_r+0x7c>
 801014c:	4621      	mov	r1, r4
 801014e:	4628      	mov	r0, r5
 8010150:	f000 f847 	bl	80101e2 <__smakebuf_r>
 8010154:	89a0      	ldrh	r0, [r4, #12]
 8010156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801015a:	f010 0301 	ands.w	r3, r0, #1
 801015e:	d00a      	beq.n	8010176 <__swsetup_r+0x9e>
 8010160:	2300      	movs	r3, #0
 8010162:	60a3      	str	r3, [r4, #8]
 8010164:	6963      	ldr	r3, [r4, #20]
 8010166:	425b      	negs	r3, r3
 8010168:	61a3      	str	r3, [r4, #24]
 801016a:	6923      	ldr	r3, [r4, #16]
 801016c:	b943      	cbnz	r3, 8010180 <__swsetup_r+0xa8>
 801016e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010172:	d1c4      	bne.n	80100fe <__swsetup_r+0x26>
 8010174:	bd38      	pop	{r3, r4, r5, pc}
 8010176:	0781      	lsls	r1, r0, #30
 8010178:	bf58      	it	pl
 801017a:	6963      	ldrpl	r3, [r4, #20]
 801017c:	60a3      	str	r3, [r4, #8]
 801017e:	e7f4      	b.n	801016a <__swsetup_r+0x92>
 8010180:	2000      	movs	r0, #0
 8010182:	e7f7      	b.n	8010174 <__swsetup_r+0x9c>
 8010184:	240000d0 	.word	0x240000d0

08010188 <abort>:
 8010188:	b508      	push	{r3, lr}
 801018a:	2006      	movs	r0, #6
 801018c:	f000 f88e 	bl	80102ac <raise>
 8010190:	2001      	movs	r0, #1
 8010192:	f7f1 f8d9 	bl	8001348 <_exit>

08010196 <__swhatbuf_r>:
 8010196:	b570      	push	{r4, r5, r6, lr}
 8010198:	460c      	mov	r4, r1
 801019a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801019e:	2900      	cmp	r1, #0
 80101a0:	b096      	sub	sp, #88	; 0x58
 80101a2:	4615      	mov	r5, r2
 80101a4:	461e      	mov	r6, r3
 80101a6:	da0d      	bge.n	80101c4 <__swhatbuf_r+0x2e>
 80101a8:	89a3      	ldrh	r3, [r4, #12]
 80101aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80101ae:	f04f 0100 	mov.w	r1, #0
 80101b2:	bf0c      	ite	eq
 80101b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80101b8:	2340      	movne	r3, #64	; 0x40
 80101ba:	2000      	movs	r0, #0
 80101bc:	6031      	str	r1, [r6, #0]
 80101be:	602b      	str	r3, [r5, #0]
 80101c0:	b016      	add	sp, #88	; 0x58
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	466a      	mov	r2, sp
 80101c6:	f000 f879 	bl	80102bc <_fstat_r>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	dbec      	blt.n	80101a8 <__swhatbuf_r+0x12>
 80101ce:	9901      	ldr	r1, [sp, #4]
 80101d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80101d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80101d8:	4259      	negs	r1, r3
 80101da:	4159      	adcs	r1, r3
 80101dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101e0:	e7eb      	b.n	80101ba <__swhatbuf_r+0x24>

080101e2 <__smakebuf_r>:
 80101e2:	898b      	ldrh	r3, [r1, #12]
 80101e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101e6:	079d      	lsls	r5, r3, #30
 80101e8:	4606      	mov	r6, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	d507      	bpl.n	80101fe <__smakebuf_r+0x1c>
 80101ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	6123      	str	r3, [r4, #16]
 80101f6:	2301      	movs	r3, #1
 80101f8:	6163      	str	r3, [r4, #20]
 80101fa:	b002      	add	sp, #8
 80101fc:	bd70      	pop	{r4, r5, r6, pc}
 80101fe:	ab01      	add	r3, sp, #4
 8010200:	466a      	mov	r2, sp
 8010202:	f7ff ffc8 	bl	8010196 <__swhatbuf_r>
 8010206:	9900      	ldr	r1, [sp, #0]
 8010208:	4605      	mov	r5, r0
 801020a:	4630      	mov	r0, r6
 801020c:	f7ff f84c 	bl	800f2a8 <_malloc_r>
 8010210:	b948      	cbnz	r0, 8010226 <__smakebuf_r+0x44>
 8010212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010216:	059a      	lsls	r2, r3, #22
 8010218:	d4ef      	bmi.n	80101fa <__smakebuf_r+0x18>
 801021a:	f023 0303 	bic.w	r3, r3, #3
 801021e:	f043 0302 	orr.w	r3, r3, #2
 8010222:	81a3      	strh	r3, [r4, #12]
 8010224:	e7e3      	b.n	80101ee <__smakebuf_r+0xc>
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	6020      	str	r0, [r4, #0]
 801022a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801022e:	81a3      	strh	r3, [r4, #12]
 8010230:	9b00      	ldr	r3, [sp, #0]
 8010232:	6163      	str	r3, [r4, #20]
 8010234:	9b01      	ldr	r3, [sp, #4]
 8010236:	6120      	str	r0, [r4, #16]
 8010238:	b15b      	cbz	r3, 8010252 <__smakebuf_r+0x70>
 801023a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801023e:	4630      	mov	r0, r6
 8010240:	f000 f84e 	bl	80102e0 <_isatty_r>
 8010244:	b128      	cbz	r0, 8010252 <__smakebuf_r+0x70>
 8010246:	89a3      	ldrh	r3, [r4, #12]
 8010248:	f023 0303 	bic.w	r3, r3, #3
 801024c:	f043 0301 	orr.w	r3, r3, #1
 8010250:	81a3      	strh	r3, [r4, #12]
 8010252:	89a3      	ldrh	r3, [r4, #12]
 8010254:	431d      	orrs	r5, r3
 8010256:	81a5      	strh	r5, [r4, #12]
 8010258:	e7cf      	b.n	80101fa <__smakebuf_r+0x18>

0801025a <_raise_r>:
 801025a:	291f      	cmp	r1, #31
 801025c:	b538      	push	{r3, r4, r5, lr}
 801025e:	4604      	mov	r4, r0
 8010260:	460d      	mov	r5, r1
 8010262:	d904      	bls.n	801026e <_raise_r+0x14>
 8010264:	2316      	movs	r3, #22
 8010266:	6003      	str	r3, [r0, #0]
 8010268:	f04f 30ff 	mov.w	r0, #4294967295
 801026c:	bd38      	pop	{r3, r4, r5, pc}
 801026e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010270:	b112      	cbz	r2, 8010278 <_raise_r+0x1e>
 8010272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010276:	b94b      	cbnz	r3, 801028c <_raise_r+0x32>
 8010278:	4620      	mov	r0, r4
 801027a:	f000 f853 	bl	8010324 <_getpid_r>
 801027e:	462a      	mov	r2, r5
 8010280:	4601      	mov	r1, r0
 8010282:	4620      	mov	r0, r4
 8010284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010288:	f000 b83a 	b.w	8010300 <_kill_r>
 801028c:	2b01      	cmp	r3, #1
 801028e:	d00a      	beq.n	80102a6 <_raise_r+0x4c>
 8010290:	1c59      	adds	r1, r3, #1
 8010292:	d103      	bne.n	801029c <_raise_r+0x42>
 8010294:	2316      	movs	r3, #22
 8010296:	6003      	str	r3, [r0, #0]
 8010298:	2001      	movs	r0, #1
 801029a:	e7e7      	b.n	801026c <_raise_r+0x12>
 801029c:	2400      	movs	r4, #0
 801029e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102a2:	4628      	mov	r0, r5
 80102a4:	4798      	blx	r3
 80102a6:	2000      	movs	r0, #0
 80102a8:	e7e0      	b.n	801026c <_raise_r+0x12>
	...

080102ac <raise>:
 80102ac:	4b02      	ldr	r3, [pc, #8]	; (80102b8 <raise+0xc>)
 80102ae:	4601      	mov	r1, r0
 80102b0:	6818      	ldr	r0, [r3, #0]
 80102b2:	f7ff bfd2 	b.w	801025a <_raise_r>
 80102b6:	bf00      	nop
 80102b8:	240000d0 	.word	0x240000d0

080102bc <_fstat_r>:
 80102bc:	b538      	push	{r3, r4, r5, lr}
 80102be:	4d07      	ldr	r5, [pc, #28]	; (80102dc <_fstat_r+0x20>)
 80102c0:	2300      	movs	r3, #0
 80102c2:	4604      	mov	r4, r0
 80102c4:	4608      	mov	r0, r1
 80102c6:	4611      	mov	r1, r2
 80102c8:	602b      	str	r3, [r5, #0]
 80102ca:	f7f1 f863 	bl	8001394 <_fstat>
 80102ce:	1c43      	adds	r3, r0, #1
 80102d0:	d102      	bne.n	80102d8 <_fstat_r+0x1c>
 80102d2:	682b      	ldr	r3, [r5, #0]
 80102d4:	b103      	cbz	r3, 80102d8 <_fstat_r+0x1c>
 80102d6:	6023      	str	r3, [r4, #0]
 80102d8:	bd38      	pop	{r3, r4, r5, pc}
 80102da:	bf00      	nop
 80102dc:	24010a98 	.word	0x24010a98

080102e0 <_isatty_r>:
 80102e0:	b538      	push	{r3, r4, r5, lr}
 80102e2:	4d06      	ldr	r5, [pc, #24]	; (80102fc <_isatty_r+0x1c>)
 80102e4:	2300      	movs	r3, #0
 80102e6:	4604      	mov	r4, r0
 80102e8:	4608      	mov	r0, r1
 80102ea:	602b      	str	r3, [r5, #0]
 80102ec:	f7f1 f858 	bl	80013a0 <_isatty>
 80102f0:	1c43      	adds	r3, r0, #1
 80102f2:	d102      	bne.n	80102fa <_isatty_r+0x1a>
 80102f4:	682b      	ldr	r3, [r5, #0]
 80102f6:	b103      	cbz	r3, 80102fa <_isatty_r+0x1a>
 80102f8:	6023      	str	r3, [r4, #0]
 80102fa:	bd38      	pop	{r3, r4, r5, pc}
 80102fc:	24010a98 	.word	0x24010a98

08010300 <_kill_r>:
 8010300:	b538      	push	{r3, r4, r5, lr}
 8010302:	4d07      	ldr	r5, [pc, #28]	; (8010320 <_kill_r+0x20>)
 8010304:	2300      	movs	r3, #0
 8010306:	4604      	mov	r4, r0
 8010308:	4608      	mov	r0, r1
 801030a:	4611      	mov	r1, r2
 801030c:	602b      	str	r3, [r5, #0]
 801030e:	f7f1 f813 	bl	8001338 <_kill>
 8010312:	1c43      	adds	r3, r0, #1
 8010314:	d102      	bne.n	801031c <_kill_r+0x1c>
 8010316:	682b      	ldr	r3, [r5, #0]
 8010318:	b103      	cbz	r3, 801031c <_kill_r+0x1c>
 801031a:	6023      	str	r3, [r4, #0]
 801031c:	bd38      	pop	{r3, r4, r5, pc}
 801031e:	bf00      	nop
 8010320:	24010a98 	.word	0x24010a98

08010324 <_getpid_r>:
 8010324:	f7f1 b806 	b.w	8001334 <_getpid>

08010328 <_init>:
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	bf00      	nop
 801032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801032e:	bc08      	pop	{r3}
 8010330:	469e      	mov	lr, r3
 8010332:	4770      	bx	lr

08010334 <_fini>:
 8010334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010336:	bf00      	nop
 8010338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801033a:	bc08      	pop	{r3}
 801033c:	469e      	mov	lr, r3
 801033e:	4770      	bx	lr
