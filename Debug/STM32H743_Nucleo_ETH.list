
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f7c  08014ec0  08014ec0  00024ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08017e3c  08017e3c  00027e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08017e40  08017e40  00027e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000020c  24000000  08017e44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00010de0  24000210  08018050  00030210  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24010ff0  08018050  00030ff0  2**0
                  ALLOC
  8 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003023a  2**0
                  CONTENTS, READONLY
 11 .debug_info   000522ef  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000aba1  00000000  00000000  0008256c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00022480  00000000  00000000  0008d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  000af590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003d47  00000000  00000000  000b18d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00046c60  00000000  00000000  000b561f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005195b  00000000  00000000  000fc27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184a1e  00000000  00000000  0014dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00009050  00000000  00000000  002d25f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008c  00000000  00000000  002db648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000210 	.word	0x24000210
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ea4 	.word	0x08014ea4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000214 	.word	0x24000214
 80002dc:	08014ea4 	.word	0x08014ea4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000798:	b530      	push	{r4, r5, lr}
    unsigned int h = 0;
 800079a:	f04f 0c00 	mov.w	ip, #0
 800079e:	1e41      	subs	r1, r0, #1
 80007a0:	f100 0e03 	add.w	lr, r0, #3
    size_t i = 0;

    for (i = 0; i < 4; i++)
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80007a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80007a8:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
        {
            h += (unsigned int) input[i] - '0';
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80007ac:	f1a2 0441 	sub.w	r4, r2, #65	; 0x41
        if ((input[i] >= '0') && (input[i] <= '9'))
 80007b0:	b2c3      	uxtb	r3, r0
            h += (unsigned int) input[i] - '0';
 80007b2:	4460      	add	r0, ip
        if ((input[i] >= '0') && (input[i] <= '9'))
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	d90b      	bls.n	80007d0 <parse_hex4+0x38>
        {
            h += (unsigned int) 10 + input[i] - 'A';
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80007b8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80007bc:	2c05      	cmp	r4, #5
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80007be:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
            h += (unsigned int) 10 + input[i] - 'A';
 80007c2:	f1a2 0237 	sub.w	r2, r2, #55	; 0x37
            h += (unsigned int) 10 + input[i] - 'a';
 80007c6:	eb03 000c 	add.w	r0, r3, ip
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80007ca:	d806      	bhi.n	80007da <parse_hex4+0x42>
            h += (unsigned int) 10 + input[i] - 'A';
 80007cc:	eb02 000c 	add.w	r0, r2, ip
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 80007d0:	458e      	cmp	lr, r1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80007d2:	ea4f 1c00 	mov.w	ip, r0, lsl #4
        if (i < 3)
 80007d6:	d1e5      	bne.n	80007a4 <parse_hex4+0xc>
        }
    }

    return h;
}
 80007d8:	bd30      	pop	{r4, r5, pc}
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80007da:	2d05      	cmp	r5, #5
 80007dc:	d9f8      	bls.n	80007d0 <parse_hex4+0x38>
            return 0;
 80007de:	2000      	movs	r0, #0
}
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	bf00      	nop

080007e4 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007e8:	680a      	ldr	r2, [r1, #0]
{
 80007ea:	460f      	mov	r7, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007ec:	6889      	ldr	r1, [r1, #8]
{
 80007ee:	4680      	mov	r8, r0
 80007f0:	b083      	sub	sp, #12
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80007f2:	5c54      	ldrb	r4, [r2, r1]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007f4:	1c48      	adds	r0, r1, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80007f6:	4411      	add	r1, r2
 80007f8:	2c22      	cmp	r4, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007fa:	eb02 0500 	add.w	r5, r2, r0
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80007fe:	d113      	bne.n	8000828 <parse_string+0x44>

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8000800:	687e      	ldr	r6, [r7, #4]
 8000802:	42b0      	cmp	r0, r6
 8000804:	d210      	bcs.n	8000828 <parse_string+0x44>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8000806:	462c      	mov	r4, r5
        size_t skipped_bytes = 0;
 8000808:	2000      	movs	r0, #0
 800080a:	e003      	b.n	8000814 <parse_string+0x30>
                    goto fail;
                }
                skipped_bytes++;
                input_end++;
            }
            input_end++;
 800080c:	3401      	adds	r4, #1
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800080e:	1aa3      	subs	r3, r4, r2
 8000810:	42b3      	cmp	r3, r6
 8000812:	d209      	bcs.n	8000828 <parse_string+0x44>
 8000814:	7823      	ldrb	r3, [r4, #0]
 8000816:	2b22      	cmp	r3, #34	; 0x22
 8000818:	d012      	beq.n	8000840 <parse_string+0x5c>
            if (input_end[0] == '\\')
 800081a:	2b5c      	cmp	r3, #92	; 0x5c
 800081c:	d1f6      	bne.n	800080c <parse_string+0x28>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800081e:	3401      	adds	r4, #1
                skipped_bytes++;
 8000820:	3001      	adds	r0, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8000822:	1aa3      	subs	r3, r4, r2
 8000824:	42b3      	cmp	r3, r6
 8000826:	d3f1      	bcc.n	800080c <parse_string+0x28>
    {
        input_buffer->hooks.deallocate(output);
        output = NULL;
    }

    if (input_pointer != NULL)
 8000828:	b135      	cbz	r5, 8000838 <parse_string+0x54>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800082a:	683b      	ldr	r3, [r7, #0]
    }

    return false;
 800082c:	2000      	movs	r0, #0
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800082e:	1aeb      	subs	r3, r5, r3
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	b003      	add	sp, #12
 8000834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 8000838:	4628      	mov	r0, r5
}
 800083a:	b003      	add	sp, #12
 800083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8000840:	1a61      	subs	r1, r4, r1
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8000842:	f1c0 0001 	rsb	r0, r0, #1
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4408      	add	r0, r1
 800084a:	4798      	blx	r3
        if (output == NULL)
 800084c:	4606      	mov	r6, r0
 800084e:	2800      	cmp	r0, #0
 8000850:	d0ea      	beq.n	8000828 <parse_string+0x44>
    while (input_pointer < input_end)
 8000852:	42ac      	cmp	r4, r5
 8000854:	4632      	mov	r2, r6
 8000856:	f240 8097 	bls.w	8000988 <parse_string+0x1a4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800085a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80009e8 <parse_string+0x204>
 800085e:	e005      	b.n	800086c <parse_string+0x88>
            *output_pointer++ = *input_pointer++;
 8000860:	3501      	adds	r5, #1
 8000862:	f802 3b01 	strb.w	r3, [r2], #1
    while (input_pointer < input_end)
 8000866:	42ac      	cmp	r4, r5
 8000868:	f240 808e 	bls.w	8000988 <parse_string+0x1a4>
        if (*input_pointer != '\\')
 800086c:	782b      	ldrb	r3, [r5, #0]
 800086e:	2b5c      	cmp	r3, #92	; 0x5c
 8000870:	d1f6      	bne.n	8000860 <parse_string+0x7c>
            if ((input_end - input_pointer) < 1)
 8000872:	1b60      	subs	r0, r4, r5
 8000874:	2800      	cmp	r0, #0
 8000876:	dd1b      	ble.n	80008b0 <parse_string+0xcc>
            switch (input_pointer[1])
 8000878:	786b      	ldrb	r3, [r5, #1]
 800087a:	2b75      	cmp	r3, #117	; 0x75
 800087c:	d818      	bhi.n	80008b0 <parse_string+0xcc>
 800087e:	2b5b      	cmp	r3, #91	; 0x5b
 8000880:	d912      	bls.n	80008a8 <parse_string+0xc4>
 8000882:	f1a3 015c 	sub.w	r1, r3, #92	; 0x5c
 8000886:	2919      	cmp	r1, #25
 8000888:	d812      	bhi.n	80008b0 <parse_string+0xcc>
 800088a:	e8df f001 	tbb	[pc, r1]
 800088e:	1179      	.short	0x1179
 8000890:	11111111 	.word	0x11111111
 8000894:	11111174 	.word	0x11111174
 8000898:	1111116f 	.word	0x1111116f
 800089c:	11111111 	.word	0x11111111
 80008a0:	1111116a 	.word	0x1111116a
 80008a4:	155d1165 	.word	0x155d1165
 80008a8:	2b22      	cmp	r3, #34	; 0x22
 80008aa:	d069      	beq.n	8000980 <parse_string+0x19c>
 80008ac:	2b2f      	cmp	r3, #47	; 0x2f
 80008ae:	d067      	beq.n	8000980 <parse_string+0x19c>
        input_buffer->hooks.deallocate(output);
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4798      	blx	r3
    if (input_pointer != NULL)
 80008b6:	e7b8      	b.n	800082a <parse_string+0x46>
    if ((input_end - first_sequence) < 6)
 80008b8:	2805      	cmp	r0, #5
 80008ba:	9201      	str	r2, [sp, #4]
 80008bc:	ddf8      	ble.n	80008b0 <parse_string+0xcc>
    first_code = parse_hex4(first_sequence + 2);
 80008be:	1ca8      	adds	r0, r5, #2
 80008c0:	f7ff ff6a 	bl	8000798 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80008c4:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
    first_code = parse_hex4(first_sequence + 2);
 80008c8:	4682      	mov	sl, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80008ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ce:	d3ef      	bcc.n	80008b0 <parse_string+0xcc>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80008d0:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 80008d4:	9a01      	ldr	r2, [sp, #4]
 80008d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008da:	d262      	bcs.n	80009a2 <parse_string+0x1be>
        const unsigned char *second_sequence = first_sequence + 6;
 80008dc:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
 80008de:	1ae3      	subs	r3, r4, r3
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	dde5      	ble.n	80008b0 <parse_string+0xcc>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80008e4:	79ab      	ldrb	r3, [r5, #6]
 80008e6:	2b5c      	cmp	r3, #92	; 0x5c
 80008e8:	d1e2      	bne.n	80008b0 <parse_string+0xcc>
 80008ea:	79eb      	ldrb	r3, [r5, #7]
 80008ec:	2b75      	cmp	r3, #117	; 0x75
 80008ee:	d1df      	bne.n	80008b0 <parse_string+0xcc>
        second_code = parse_hex4(second_sequence + 2);
 80008f0:	f105 0008 	add.w	r0, r5, #8
 80008f4:	f7ff ff50 	bl	8000798 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80008f8:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 80008fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000900:	d2d6      	bcs.n	80008b0 <parse_string+0xcc>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8000902:	ea09 2a8a 	and.w	sl, r9, sl, lsl #10
 8000906:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800090a:	f04f 0c0c 	mov.w	ip, #12
 800090e:	9a01      	ldr	r2, [sp, #4]
 8000910:	ea4a 0a00 	orr.w	sl, sl, r0
 8000914:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000918:	2104      	movs	r1, #4
        first_byte_mark = 0xF0; /* 11110000 */
 800091a:	23f0      	movs	r3, #240	; 0xf0
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800091c:	f04f 0e03 	mov.w	lr, #3
 8000920:	eb02 0b0e 	add.w	fp, r2, lr
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8000924:	f00a 003f 	and.w	r0, sl, #63	; 0x3f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000928:	f10e 3eff 	add.w	lr, lr, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800092c:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
 8000930:	f060 007f 	orn	r0, r0, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000934:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8000938:	f80b 0901 	strb.w	r0, [fp], #-1
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800093c:	d1f2      	bne.n	8000924 <parse_string+0x140>
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800093e:	ea43 000a 	orr.w	r0, r3, sl
    *output_pointer += utf8_length;
 8000942:	4411      	add	r1, r2
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8000944:	b2c3      	uxtb	r3, r0
                    if (sequence_length == 0)
 8000946:	e003      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\t';
 8000948:	1c51      	adds	r1, r2, #1
                    break;
 800094a:	2309      	movs	r3, #9
 800094c:	f04f 0c02 	mov.w	ip, #2
                    *output_pointer++ = '\b';
 8000950:	7013      	strb	r3, [r2, #0]
            input_pointer += sequence_length;
 8000952:	4465      	add	r5, ip
 8000954:	460a      	mov	r2, r1
 8000956:	e786      	b.n	8000866 <parse_string+0x82>
                    *output_pointer++ = '\r';
 8000958:	1c51      	adds	r1, r2, #1
                    break;
 800095a:	230d      	movs	r3, #13
 800095c:	f04f 0c02 	mov.w	ip, #2
 8000960:	e7f6      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\n';
 8000962:	1c51      	adds	r1, r2, #1
                    break;
 8000964:	230a      	movs	r3, #10
 8000966:	f04f 0c02 	mov.w	ip, #2
 800096a:	e7f1      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\f';
 800096c:	1c51      	adds	r1, r2, #1
                    break;
 800096e:	230c      	movs	r3, #12
 8000970:	f04f 0c02 	mov.w	ip, #2
 8000974:	e7ec      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\b';
 8000976:	1c51      	adds	r1, r2, #1
                    break;
 8000978:	2308      	movs	r3, #8
 800097a:	f04f 0c02 	mov.w	ip, #2
 800097e:	e7e7      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = input_pointer[1];
 8000980:	1c51      	adds	r1, r2, #1
                    break;
 8000982:	f04f 0c02 	mov.w	ip, #2
 8000986:	e7e3      	b.n	8000950 <parse_string+0x16c>
    *output_pointer = '\0';
 8000988:	2300      	movs	r3, #0
    return true;
 800098a:	2001      	movs	r0, #1
    *output_pointer = '\0';
 800098c:	7013      	strb	r3, [r2, #0]
    item->type = cJSON_String;
 800098e:	2210      	movs	r2, #16
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8000990:	683b      	ldr	r3, [r7, #0]
    item->valuestring = (char*)output;
 8000992:	f8c8 6010 	str.w	r6, [r8, #16]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8000996:	1ae3      	subs	r3, r4, r3
    item->type = cJSON_String;
 8000998:	f8c8 200c 	str.w	r2, [r8, #12]
    input_buffer->offset++;
 800099c:	4403      	add	r3, r0
 800099e:	60bb      	str	r3, [r7, #8]
    return true;
 80009a0:	e747      	b.n	8000832 <parse_string+0x4e>
    if (codepoint < 0x80)
 80009a2:	287f      	cmp	r0, #127	; 0x7f
 80009a4:	d805      	bhi.n	80009b2 <parse_string+0x1ce>
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80009a6:	2101      	movs	r1, #1
 80009a8:	b2c3      	uxtb	r3, r0
 80009aa:	f04f 0c06 	mov.w	ip, #6
    *output_pointer += utf8_length;
 80009ae:	4411      	add	r1, r2
                    if (sequence_length == 0)
 80009b0:	e7ce      	b.n	8000950 <parse_string+0x16c>
    else if (codepoint < 0x800)
 80009b2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80009b6:	d206      	bcs.n	80009c6 <parse_string+0x1e2>
 80009b8:	f04f 0c06 	mov.w	ip, #6
 80009bc:	2102      	movs	r1, #2
        first_byte_mark = 0xC0; /* 11000000 */
 80009be:	23c0      	movs	r3, #192	; 0xc0
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80009c0:	f04f 0e01 	mov.w	lr, #1
 80009c4:	e7ac      	b.n	8000920 <parse_string+0x13c>
    else if (codepoint < 0x10000)
 80009c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80009ca:	d206      	bcs.n	80009da <parse_string+0x1f6>
 80009cc:	f04f 0c06 	mov.w	ip, #6
 80009d0:	2103      	movs	r1, #3
        first_byte_mark = 0xE0; /* 11100000 */
 80009d2:	23e0      	movs	r3, #224	; 0xe0
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80009d4:	f04f 0e02 	mov.w	lr, #2
 80009d8:	e7a2      	b.n	8000920 <parse_string+0x13c>
    else if (codepoint <= 0x10FFFF)
 80009da:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80009de:	f4bf af67 	bcs.w	80008b0 <parse_string+0xcc>
 80009e2:	f04f 0c06 	mov.w	ip, #6
 80009e6:	e797      	b.n	8000918 <parse_string+0x134>
 80009e8:	000ffc00 	.word	0x000ffc00

080009ec <buffer_skip_whitespace>:
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
    if ((buffer == NULL) || (buffer->content == NULL))
 80009ec:	b1d8      	cbz	r0, 8000a26 <buffer_skip_whitespace+0x3a>
 80009ee:	6802      	ldr	r2, [r0, #0]
 80009f0:	b1d2      	cbz	r2, 8000a28 <buffer_skip_whitespace+0x3c>
{
 80009f2:	b410      	push	{r4}
    {
        return NULL;
    }

    if (cannot_access_at_index(buffer, 0))
 80009f4:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80009f8:	42a3      	cmp	r3, r4
 80009fa:	d20c      	bcs.n	8000a16 <buffer_skip_whitespace+0x2a>
    {
        return buffer;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80009fc:	1e59      	subs	r1, r3, #1
 80009fe:	440a      	add	r2, r1
 8000a00:	e003      	b.n	8000a0a <buffer_skip_whitespace+0x1e>
    {
       buffer->offset++;
 8000a02:	3301      	adds	r3, #1
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8000a04:	429c      	cmp	r4, r3
       buffer->offset++;
 8000a06:	6083      	str	r3, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8000a08:	d008      	beq.n	8000a1c <buffer_skip_whitespace+0x30>
 8000a0a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000a0e:	2920      	cmp	r1, #32
 8000a10:	d9f7      	bls.n	8000a02 <buffer_skip_whitespace+0x16>
    }

    if (buffer->offset == buffer->length)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	d002      	beq.n	8000a1c <buffer_skip_whitespace+0x30>
    {
        buffer->offset--;
    }

    return buffer;
}
 8000a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a1a:	4770      	bx	lr
        buffer->offset--;
 8000a1c:	3c01      	subs	r4, #1
 8000a1e:	6084      	str	r4, [r0, #8]
}
 8000a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	4770      	bx	lr
        return NULL;
 8000a28:	4610      	mov	r0, r2
 8000a2a:	4770      	bx	lr

08000a2c <ensure>:
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
 8000a2e:	4604      	mov	r4, r0
 8000a30:	b300      	cbz	r0, 8000a74 <ensure+0x48>
 8000a32:	6806      	ldr	r6, [r0, #0]
 8000a34:	b1ce      	cbz	r6, 8000a6a <ensure+0x3e>
    if ((p->length > 0) && (p->offset >= p->length))
 8000a36:	6843      	ldr	r3, [r0, #4]
 8000a38:	b9cb      	cbnz	r3, 8000a6e <ensure+0x42>
    if (needed > INT_MAX)
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	db1a      	blt.n	8000a74 <ensure+0x48>
    needed += p->offset + 1;
 8000a3e:	68a2      	ldr	r2, [r4, #8]
 8000a40:	3101      	adds	r1, #1
 8000a42:	4411      	add	r1, r2
    if (needed <= p->length)
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d218      	bcs.n	8000a7a <ensure+0x4e>
    if (p->noalloc) {
 8000a48:	6923      	ldr	r3, [r4, #16]
 8000a4a:	b99b      	cbnz	r3, 8000a74 <ensure+0x48>
    if (needed > (INT_MAX / 2))
 8000a4c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000a50:	d216      	bcs.n	8000a80 <ensure+0x54>
    if (p->hooks.reallocate != NULL)
 8000a52:	6a23      	ldr	r3, [r4, #32]
        newsize = needed * 2;
 8000a54:	004d      	lsls	r5, r1, #1
    if (p->hooks.reallocate != NULL)
 8000a56:	b1d3      	cbz	r3, 8000a8e <ensure+0x62>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000a58:	4630      	mov	r0, r6
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	4798      	blx	r3
        if (newbuffer == NULL)
 8000a5e:	4606      	mov	r6, r0
 8000a60:	b318      	cbz	r0, 8000aaa <ensure+0x7e>
    return newbuffer + p->offset;
 8000a62:	68a3      	ldr	r3, [r4, #8]
    p->length = newsize;
 8000a64:	e9c4 6500 	strd	r6, r5, [r4]
    return newbuffer + p->offset;
 8000a68:	441e      	add	r6, r3
}
 8000a6a:	4630      	mov	r0, r6
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p->length > 0) && (p->offset >= p->length))
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d8e2      	bhi.n	8000a3a <ensure+0xe>
        return NULL;
 8000a74:	2600      	movs	r6, #0
}
 8000a76:	4630      	mov	r0, r6
 8000a78:	bd70      	pop	{r4, r5, r6, pc}
        return p->buffer + p->offset;
 8000a7a:	4416      	add	r6, r2
}
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
        if (needed <= INT_MAX)
 8000a80:	2900      	cmp	r1, #0
 8000a82:	dbf7      	blt.n	8000a74 <ensure+0x48>
    if (p->hooks.reallocate != NULL)
 8000a84:	6a23      	ldr	r3, [r4, #32]
            newsize = INT_MAX;
 8000a86:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    if (p->hooks.reallocate != NULL)
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1e4      	bne.n	8000a58 <ensure+0x2c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000a8e:	69a3      	ldr	r3, [r4, #24]
 8000a90:	4628      	mov	r0, r5
 8000a92:	4798      	blx	r3
        if (!newbuffer)
 8000a94:	4606      	mov	r6, r0
 8000a96:	b140      	cbz	r0, 8000aaa <ensure+0x7e>
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000a98:	68a2      	ldr	r2, [r4, #8]
 8000a9a:	6821      	ldr	r1, [r4, #0]
 8000a9c:	3201      	adds	r2, #1
 8000a9e:	f011 fee8 	bl	8012872 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000aa2:	69e3      	ldr	r3, [r4, #28]
 8000aa4:	6820      	ldr	r0, [r4, #0]
 8000aa6:	4798      	blx	r3
 8000aa8:	e7db      	b.n	8000a62 <ensure+0x36>
            p->hooks.deallocate(p->buffer);
 8000aaa:	69e3      	ldr	r3, [r4, #28]
 8000aac:	6820      	ldr	r0, [r4, #0]
 8000aae:	4798      	blx	r3
            p->buffer = NULL;
 8000ab0:	e9c4 6600 	strd	r6, r6, [r4]
            return NULL;
 8000ab4:	e7d9      	b.n	8000a6a <ensure+0x3e>
 8000ab6:	bf00      	nop

08000ab8 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d036      	beq.n	8000b2c <get_object_item+0x74>
 8000abe:	460d      	mov	r5, r1
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	d033      	beq.n	8000b2c <get_object_item+0x74>
    {
        return NULL;
    }

    current_element = object->child;
 8000ac4:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8000ac6:	bb32      	cbnz	r2, 8000b16 <get_object_item+0x5e>
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8000ac8:	b31c      	cbz	r4, 8000b12 <get_object_item+0x5a>
 8000aca:	4f1b      	ldr	r7, [pc, #108]	; (8000b38 <get_object_item+0x80>)
 8000acc:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8000ace:	b1eb      	cbz	r3, 8000b0c <get_object_item+0x54>
    if (string1 == string2)
 8000ad0:	42ab      	cmp	r3, r5
 8000ad2:	d01e      	beq.n	8000b12 <get_object_item+0x5a>
 8000ad4:	1e6e      	subs	r6, r5, #1
 8000ad6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ada:	e000      	b.n	8000ade <get_object_item+0x26>
        if (*string1 == '\0')
 8000adc:	b1cb      	cbz	r3, 8000b12 <get_object_item+0x5a>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ade:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8000ae2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
 8000ae6:	5cfa      	ldrb	r2, [r7, r3]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	4661      	mov	r1, ip
 8000aec:	f002 0203 	and.w	r2, r2, #3
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	f817 200c 	ldrb.w	r2, [r7, ip]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	bf08      	it	eq
 8000afc:	f103 0020 	addeq.w	r0, r3, #32
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	bf08      	it	eq
 8000b04:	f10c 0120 	addeq.w	r1, ip, #32
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	d0e7      	beq.n	8000adc <get_object_item+0x24>
        {
            current_element = current_element->next;
 8000b0c:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d1dc      	bne.n	8000acc <get_object_item+0x14>
    if ((current_element == NULL) || (current_element->string == NULL)) {
        return NULL;
    }

    return current_element;
}
 8000b12:	4620      	mov	r0, r4
 8000b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d0fb      	beq.n	8000b12 <get_object_item+0x5a>
 8000b1a:	6a21      	ldr	r1, [r4, #32]
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	b141      	cbz	r1, 8000b32 <get_object_item+0x7a>
 8000b20:	f7ff fbde 	bl	80002e0 <strcmp>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d0f4      	beq.n	8000b12 <get_object_item+0x5a>
            current_element = current_element->next;
 8000b28:	6824      	ldr	r4, [r4, #0]
 8000b2a:	e7f4      	b.n	8000b16 <get_object_item+0x5e>
        return NULL;
 8000b2c:	2400      	movs	r4, #0
}
 8000b2e:	4620      	mov	r0, r4
 8000b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 8000b32:	460c      	mov	r4, r1
}
 8000b34:	4620      	mov	r0, r4
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b38:	08017ae1 	.word	0x08017ae1

08000b3c <print_string_ptr.part.0>:
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	4605      	mov	r5, r0
 8000b42:	4608      	mov	r0, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b44:	782c      	ldrb	r4, [r5, #0]
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	f000 8085 	beq.w	8000c56 <print_string_ptr.part.0+0x11a>
 8000b4c:	462a      	mov	r2, r5
    size_t escape_characters = 0;
 8000b4e:	2700      	movs	r7, #0
        switch (*input_pointer)
 8000b50:	4e4e      	ldr	r6, [pc, #312]	; (8000c8c <print_string_ptr.part.0+0x150>)
 8000b52:	e005      	b.n	8000b60 <print_string_ptr.part.0+0x24>
                if (*input_pointer < 32)
 8000b54:	2c1f      	cmp	r4, #31
                    escape_characters += 5;
 8000b56:	bf98      	it	ls
 8000b58:	3705      	addls	r7, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b5a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8000b5e:	b17c      	cbz	r4, 8000b80 <print_string_ptr.part.0+0x44>
        switch (*input_pointer)
 8000b60:	2c22      	cmp	r4, #34	; 0x22
 8000b62:	d84a      	bhi.n	8000bfa <print_string_ptr.part.0+0xbe>
 8000b64:	f1a4 0308 	sub.w	r3, r4, #8
 8000b68:	2c07      	cmp	r4, #7
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	d9f2      	bls.n	8000b54 <print_string_ptr.part.0+0x18>
 8000b6e:	fa26 f303 	lsr.w	r3, r6, r3
 8000b72:	07db      	lsls	r3, r3, #31
 8000b74:	d5ee      	bpl.n	8000b54 <print_string_ptr.part.0+0x18>
                escape_characters++;
 8000b76:	3701      	adds	r7, #1
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b78:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8000b7c:	2c00      	cmp	r4, #0
 8000b7e:	d1ef      	bne.n	8000b60 <print_string_ptr.part.0+0x24>
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8000b80:	1b56      	subs	r6, r2, r5
 8000b82:	19f4      	adds	r4, r6, r7
    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000b84:	1ce1      	adds	r1, r4, #3
 8000b86:	f7ff ff51 	bl	8000a2c <ensure>
    if (output == NULL)
 8000b8a:	4680      	mov	r8, r0
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d05f      	beq.n	8000c50 <print_string_ptr.part.0+0x114>
    if (escape_characters == 0)
 8000b90:	2f00      	cmp	r7, #0
 8000b92:	d078      	beq.n	8000c86 <print_string_ptr.part.0+0x14a>
    output[0] = '\"';
 8000b94:	2322      	movs	r3, #34	; 0x22
 8000b96:	4606      	mov	r6, r0
 8000b98:	f806 3b01 	strb.w	r3, [r6], #1
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000b9c:	782b      	ldrb	r3, [r5, #0]
 8000b9e:	b3c3      	cbz	r3, 8000c12 <print_string_ptr.part.0+0xd6>
            *output_pointer++ = '\\';
 8000ba0:	275c      	movs	r7, #92	; 0x5c
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8000ba2:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8000c90 <print_string_ptr.part.0+0x154>
                    *output_pointer = 't';
 8000ba6:	f04f 0974 	mov.w	r9, #116	; 0x74
 8000baa:	e006      	b.n	8000bba <print_string_ptr.part.0+0x7e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bac:	2b5c      	cmp	r3, #92	; 0x5c
 8000bae:	d009      	beq.n	8000bc4 <print_string_ptr.part.0+0x88>
            *output_pointer = *input_pointer;
 8000bb0:	7033      	strb	r3, [r6, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000bb2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000bb6:	1c46      	adds	r6, r0, #1
 8000bb8:	b35b      	cbz	r3, 8000c12 <print_string_ptr.part.0+0xd6>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bba:	2b22      	cmp	r3, #34	; 0x22
 8000bbc:	bf18      	it	ne
 8000bbe:	2b1f      	cmpne	r3, #31
            *output_pointer = *input_pointer;
 8000bc0:	4630      	mov	r0, r6
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bc2:	d8f3      	bhi.n	8000bac <print_string_ptr.part.0+0x70>
            *output_pointer++ = '\\';
 8000bc4:	f800 7b01 	strb.w	r7, [r0], #1
            switch (*input_pointer)
 8000bc8:	782a      	ldrb	r2, [r5, #0]
 8000bca:	2a22      	cmp	r2, #34	; 0x22
 8000bcc:	d819      	bhi.n	8000c02 <print_string_ptr.part.0+0xc6>
 8000bce:	2a07      	cmp	r2, #7
 8000bd0:	d927      	bls.n	8000c22 <print_string_ptr.part.0+0xe6>
 8000bd2:	f1a2 0308 	sub.w	r3, r2, #8
 8000bd6:	2b1a      	cmp	r3, #26
 8000bd8:	d823      	bhi.n	8000c22 <print_string_ptr.part.0+0xe6>
 8000bda:	e8df f003 	tbb	[pc, r3]
 8000bde:	3336      	.short	0x3336
 8000be0:	2a2d2230 	.word	0x2a2d2230
 8000be4:	22222222 	.word	0x22222222
 8000be8:	22222222 	.word	0x22222222
 8000bec:	22222222 	.word	0x22222222
 8000bf0:	22222222 	.word	0x22222222
 8000bf4:	22222222 	.word	0x22222222
 8000bf8:	27          	.byte	0x27
 8000bf9:	00          	.byte	0x00
        switch (*input_pointer)
 8000bfa:	2c5c      	cmp	r4, #92	; 0x5c
 8000bfc:	d1ad      	bne.n	8000b5a <print_string_ptr.part.0+0x1e>
                escape_characters++;
 8000bfe:	3701      	adds	r7, #1
                break;
 8000c00:	e7ba      	b.n	8000b78 <print_string_ptr.part.0+0x3c>
            switch (*input_pointer)
 8000c02:	2a5c      	cmp	r2, #92	; 0x5c
 8000c04:	d10d      	bne.n	8000c22 <print_string_ptr.part.0+0xe6>
                    *output_pointer = '\\';
 8000c06:	7072      	strb	r2, [r6, #1]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000c08:	1c46      	adds	r6, r0, #1
 8000c0a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1d3      	bne.n	8000bba <print_string_ptr.part.0+0x7e>
    output[output_length + 1] = '\"';
 8000c12:	4444      	add	r4, r8
 8000c14:	2222      	movs	r2, #34	; 0x22
    output[output_length + 2] = '\0';
 8000c16:	2300      	movs	r3, #0
    return true;
 8000c18:	2001      	movs	r0, #1
    output[output_length + 1] = '\"';
 8000c1a:	7062      	strb	r2, [r4, #1]
    output[output_length + 2] = '\0';
 8000c1c:	70a3      	strb	r3, [r4, #2]
}
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8000c22:	4651      	mov	r1, sl
 8000c24:	f011 fc76 	bl	8012514 <siprintf>
                    output_pointer += 4;
 8000c28:	1d70      	adds	r0, r6, #5
                    break;
 8000c2a:	e7c2      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = '\"';
 8000c2c:	2322      	movs	r3, #34	; 0x22
 8000c2e:	7073      	strb	r3, [r6, #1]
                    break;
 8000c30:	e7bf      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'r';
 8000c32:	2372      	movs	r3, #114	; 0x72
 8000c34:	7073      	strb	r3, [r6, #1]
                    break;
 8000c36:	e7bc      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'f';
 8000c38:	2366      	movs	r3, #102	; 0x66
 8000c3a:	7073      	strb	r3, [r6, #1]
                    break;
 8000c3c:	e7b9      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'n';
 8000c3e:	236e      	movs	r3, #110	; 0x6e
 8000c40:	7073      	strb	r3, [r6, #1]
                    break;
 8000c42:	e7b6      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 't';
 8000c44:	f886 9001 	strb.w	r9, [r6, #1]
                    break;
 8000c48:	e7b3      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'b';
 8000c4a:	2362      	movs	r3, #98	; 0x62
 8000c4c:	7073      	strb	r3, [r6, #1]
                    break;
 8000c4e:	e7b0      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
        return false;
 8000c50:	2000      	movs	r0, #0
}
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000c56:	2103      	movs	r1, #3
 8000c58:	f7ff fee8 	bl	8000a2c <ensure>
    if (output == NULL)
 8000c5c:	4680      	mov	r8, r0
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d0f6      	beq.n	8000c50 <print_string_ptr.part.0+0x114>
 8000c62:	2602      	movs	r6, #2
 8000c64:	2701      	movs	r7, #1
        memcpy(output + 1, input, output_length);
 8000c66:	4622      	mov	r2, r4
        output[0] = '\"';
 8000c68:	4640      	mov	r0, r8
 8000c6a:	2422      	movs	r4, #34	; 0x22
        memcpy(output + 1, input, output_length);
 8000c6c:	4629      	mov	r1, r5
        output[0] = '\"';
 8000c6e:	f800 4b01 	strb.w	r4, [r0], #1
        memcpy(output + 1, input, output_length);
 8000c72:	f011 fdfe 	bl	8012872 <memcpy>
        output[output_length + 2] = '\0';
 8000c76:	2300      	movs	r3, #0
        output[output_length + 1] = '\"';
 8000c78:	f808 4007 	strb.w	r4, [r8, r7]
        return true;
 8000c7c:	2001      	movs	r0, #1
        output[output_length + 2] = '\0';
 8000c7e:	f808 3006 	strb.w	r3, [r8, r6]
}
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    output[output_length + 1] = '\"';
 8000c86:	1c77      	adds	r7, r6, #1
    output[output_length + 2] = '\0';
 8000c88:	3602      	adds	r6, #2
 8000c8a:	e7ec      	b.n	8000c66 <print_string_ptr.part.0+0x12a>
 8000c8c:	04000037 	.word	0x04000037
 8000c90:	08014ecc 	.word	0x08014ecc
 8000c94:	00000000 	.word	0x00000000

08000c98 <print_value.part.0>:
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch ((item->type) & 0xFF)
 8000c9c:	7b05      	ldrb	r5, [r0, #12]
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460c      	mov	r4, r1
    switch ((item->type) & 0xFF)
 8000ca2:	2d20      	cmp	r5, #32
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
 8000ca4:	ed2d 8b04 	vpush	{d8-d9}
 8000ca8:	b08d      	sub	sp, #52	; 0x34
    switch ((item->type) & 0xFF)
 8000caa:	dc50      	bgt.n	8000d4e <print_value.part.0+0xb6>
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d048      	beq.n	8000d42 <print_value.part.0+0xaa>
 8000cb0:	1e6b      	subs	r3, r5, #1
 8000cb2:	2b1f      	cmp	r3, #31
 8000cb4:	d844      	bhi.n	8000d40 <print_value.part.0+0xa8>
 8000cb6:	e8df f003 	tbb	[pc, r3]
 8000cba:	7063      	.short	0x7063
 8000cbc:	43438343 	.word	0x43438343
 8000cc0:	43431043 	.word	0x43431043
 8000cc4:	43434343 	.word	0x43434343
 8000cc8:	43438c43 	.word	0x43438c43
 8000ccc:	43434343 	.word	0x43434343
 8000cd0:	43434343 	.word	0x43434343
 8000cd4:	43434343 	.word	0x43434343
 8000cd8:	9943      	.short	0x9943
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000cda:	2300      	movs	r3, #0
    double test = 0.0;
 8000cdc:	2200      	movs	r2, #0
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000cde:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000ce2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000ce6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8000cea:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    double test = 0.0;
 8000cee:	2300      	movs	r3, #0
    double d = item->valuedouble;
 8000cf0:	ed90 8b06 	vldr	d8, [r0, #24]
    double test = 0.0;
 8000cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (output_buffer == NULL)
 8000cf8:	b311      	cbz	r1, 8000d40 <print_value.part.0+0xa8>
    if (isnan(d) || isinf(d))
 8000cfa:	eeb4 8b48 	vcmp.f64	d8, d8
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	f180 8178 	bvs.w	8000ff6 <print_value.part.0+0x35e>
 8000d06:	eeb0 9bc8 	vabs.f64	d9, d8
 8000d0a:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8000ea0 <print_value.part.0+0x208>
 8000d0e:	eeb4 9b47 	vcmp.f64	d9, d7
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	f300 816e 	bgt.w	8000ff6 <print_value.part.0+0x35e>
    else if(d == (double)item->valueint)
 8000d1a:	6942      	ldr	r2, [r0, #20]
 8000d1c:	ee07 2a90 	vmov	s15, r2
 8000d20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d24:	eeb4 8b47 	vcmp.f64	d8, d7
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	f040 81b1 	bne.w	8001092 <print_value.part.0+0x3fa>
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8000d30:	495d      	ldr	r1, [pc, #372]	; (8000ea8 <print_value.part.0+0x210>)
 8000d32:	a805      	add	r0, sp, #20
 8000d34:	f011 fbee 	bl	8012514 <siprintf>
 8000d38:	4606      	mov	r6, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000d3a:	2e19      	cmp	r6, #25
 8000d3c:	f240 8162 	bls.w	8001004 <print_value.part.0+0x36c>
    switch ((item->type) & 0xFF)
 8000d40:	2500      	movs	r5, #0
}
 8000d42:	4628      	mov	r0, r5
 8000d44:	b00d      	add	sp, #52	; 0x34
 8000d46:	ecbd 8b04 	vpop	{d8-d9}
 8000d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
 8000d4e:	2d40      	cmp	r5, #64	; 0x40
 8000d50:	f000 80b2 	beq.w	8000eb8 <print_value.part.0+0x220>
 8000d54:	2d80      	cmp	r5, #128	; 0x80
 8000d56:	d1f3      	bne.n	8000d40 <print_value.part.0+0xa8>
            if (item->valuestring == NULL)
 8000d58:	6900      	ldr	r0, [r0, #16]
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d0f0      	beq.n	8000d40 <print_value.part.0+0xa8>
            raw_length = strlen(item->valuestring) + sizeof("");
 8000d5e:	f7ff fac9 	bl	80002f4 <strlen>
 8000d62:	4602      	mov	r2, r0
            output = ensure(output_buffer, raw_length);
 8000d64:	4620      	mov	r0, r4
            raw_length = strlen(item->valuestring) + sizeof("");
 8000d66:	3201      	adds	r2, #1
            output = ensure(output_buffer, raw_length);
 8000d68:	4611      	mov	r1, r2
 8000d6a:	9201      	str	r2, [sp, #4]
 8000d6c:	f7ff fe5e 	bl	8000a2c <ensure>
            if (output == NULL)
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d0e5      	beq.n	8000d40 <print_value.part.0+0xa8>
            memcpy(output, item->valuestring, raw_length);
 8000d74:	9a01      	ldr	r2, [sp, #4]
            return true;
 8000d76:	2501      	movs	r5, #1
            memcpy(output, item->valuestring, raw_length);
 8000d78:	6931      	ldr	r1, [r6, #16]
 8000d7a:	f011 fd7a 	bl	8012872 <memcpy>
            return true;
 8000d7e:	e7e0      	b.n	8000d42 <print_value.part.0+0xaa>
            output = ensure(output_buffer, 6);
 8000d80:	2106      	movs	r1, #6
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff fe52 	bl	8000a2c <ensure>
            if (output == NULL)
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d0d8      	beq.n	8000d40 <print_value.part.0+0xa8>
            strcpy((char*)output, "false");
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <print_value.part.0+0x214>)
 8000d90:	6810      	ldr	r0, [r2, #0]
 8000d92:	8892      	ldrh	r2, [r2, #4]
 8000d94:	6018      	str	r0, [r3, #0]
 8000d96:	809a      	strh	r2, [r3, #4]
            return true;
 8000d98:	e7d3      	b.n	8000d42 <print_value.part.0+0xaa>
            output = ensure(output_buffer, 5);
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff fe45 	bl	8000a2c <ensure>
            if (output == NULL)
 8000da2:	4603      	mov	r3, r0
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d0cb      	beq.n	8000d40 <print_value.part.0+0xa8>
            strcpy((char*)output, "true");
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <print_value.part.0+0x218>)
 8000daa:	6810      	ldr	r0, [r2, #0]
            return true;
 8000dac:	2501      	movs	r5, #1
            strcpy((char*)output, "true");
 8000dae:	7912      	ldrb	r2, [r2, #4]
 8000db0:	6018      	str	r0, [r3, #0]
}
 8000db2:	4628      	mov	r0, r5
            strcpy((char*)output, "true");
 8000db4:	711a      	strb	r2, [r3, #4]
}
 8000db6:	b00d      	add	sp, #52	; 0x34
 8000db8:	ecbd 8b04 	vpop	{d8-d9}
 8000dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f7ff fe32 	bl	8000a2c <ensure>
            if (output == NULL)
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d0b8      	beq.n	8000d40 <print_value.part.0+0xa8>
            strcpy((char*)output, "null");
 8000dce:	4a39      	ldr	r2, [pc, #228]	; (8000eb4 <print_value.part.0+0x21c>)
 8000dd0:	e7eb      	b.n	8000daa <print_value.part.0+0x112>
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8000dd2:	6900      	ldr	r0, [r0, #16]
    if (output_buffer == NULL)
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d0b3      	beq.n	8000d40 <print_value.part.0+0xa8>
    if (input == NULL)
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	f000 8189 	beq.w	80010f0 <print_value.part.0+0x458>
}
 8000dde:	b00d      	add	sp, #52	; 0x34
 8000de0:	ecbd 8b04 	vpop	{d8-d9}
 8000de4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de8:	f7ff bea8 	b.w	8000b3c <print_string_ptr.part.0>
            return print_array(item, output_buffer);
 8000dec:	6885      	ldr	r5, [r0, #8]
    if (output_buffer == NULL)
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d0a6      	beq.n	8000d40 <print_value.part.0+0xa8>
    output_pointer = ensure(output_buffer, 1);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff fe19 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d0a0      	beq.n	8000d40 <print_value.part.0+0xa8>
    *output_pointer = '[';
 8000dfe:	235b      	movs	r3, #91	; 0x5b
 8000e00:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
 8000e02:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    output_buffer->offset++;
 8000e06:	3201      	adds	r2, #1
    output_buffer->depth++;
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    while (current_element != NULL)
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d033      	beq.n	8000e7a <print_value.part.0+0x1e2>
            *output_pointer++ = ',';
 8000e12:	272c      	movs	r7, #44	; 0x2c
                *output_pointer++ = ' ';
 8000e14:	f04f 0820 	mov.w	r8, #32
            *output_pointer = '\0';
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e006      	b.n	8000e2a <print_value.part.0+0x192>
            *output_pointer++ = ',';
 8000e1c:	3001      	adds	r0, #1
            *output_pointer = '\0';
 8000e1e:	7006      	strb	r6, [r0, #0]
            output_buffer->offset += length;
 8000e20:	68a3      	ldr	r3, [r4, #8]
        current_element = current_element->next;
 8000e22:	682d      	ldr	r5, [r5, #0]
            output_buffer->offset += length;
 8000e24:	444b      	add	r3, r9
 8000e26:	60a3      	str	r3, [r4, #8]
    while (current_element != NULL)
 8000e28:	b33d      	cbz	r5, 8000e7a <print_value.part.0+0x1e2>
    if ((item == NULL) || (output_buffer == NULL))
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f7ff ff33 	bl	8000c98 <print_value.part.0>
        if (!print_value(current_element, output_buffer))
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d084      	beq.n	8000d40 <print_value.part.0+0xa8>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000e36:	6820      	ldr	r0, [r4, #0]
 8000e38:	b130      	cbz	r0, 8000e48 <print_value.part.0+0x1b0>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000e3a:	f8d4 9008 	ldr.w	r9, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000e3e:	4448      	add	r0, r9
 8000e40:	f7ff fa58 	bl	80002f4 <strlen>
 8000e44:	4448      	add	r0, r9
 8000e46:	60a0      	str	r0, [r4, #8]
        if (current_element->next)
 8000e48:	682b      	ldr	r3, [r5, #0]
            output_pointer = ensure(output_buffer, length + 1);
 8000e4a:	4620      	mov	r0, r4
        if (current_element->next)
 8000e4c:	b1ab      	cbz	r3, 8000e7a <print_value.part.0+0x1e2>
            length = (size_t) (output_buffer->format ? 2 : 1);
 8000e4e:	6963      	ldr	r3, [r4, #20]
 8000e50:	2b00      	cmp	r3, #0
            output_pointer = ensure(output_buffer, length + 1);
 8000e52:	bf15      	itete	ne
 8000e54:	2103      	movne	r1, #3
 8000e56:	2102      	moveq	r1, #2
            length = (size_t) (output_buffer->format ? 2 : 1);
 8000e58:	f04f 0902 	movne.w	r9, #2
 8000e5c:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
 8000e60:	f7ff fde4 	bl	8000a2c <ensure>
            if (output_pointer == NULL)
 8000e64:	2800      	cmp	r0, #0
 8000e66:	f43f af6b 	beq.w	8000d40 <print_value.part.0+0xa8>
            *output_pointer++ = ',';
 8000e6a:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
 8000e6c:	6963      	ldr	r3, [r4, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0d4      	beq.n	8000e1c <print_value.part.0+0x184>
                *output_pointer++ = ' ';
 8000e72:	f880 8001 	strb.w	r8, [r0, #1]
 8000e76:	3002      	adds	r0, #2
 8000e78:	e7d1      	b.n	8000e1e <print_value.part.0+0x186>
    output_pointer = ensure(output_buffer, 2);
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff fdd5 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000e82:	2800      	cmp	r0, #0
 8000e84:	f43f af5c 	beq.w	8000d40 <print_value.part.0+0xa8>
    *output_pointer++ = ']';
 8000e88:	225d      	movs	r2, #93	; 0x5d
    *output_pointer = '\0';
 8000e8a:	2300      	movs	r3, #0
    *output_pointer++ = '}';
 8000e8c:	7002      	strb	r2, [r0, #0]
    return true;
 8000e8e:	2501      	movs	r5, #1
    *output_pointer = '\0';
 8000e90:	7043      	strb	r3, [r0, #1]
    output_buffer->depth--;
 8000e92:	68e3      	ldr	r3, [r4, #12]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60e3      	str	r3, [r4, #12]
    return true;
 8000e98:	e753      	b.n	8000d42 <print_value.part.0+0xaa>
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	ffffffff 	.word	0xffffffff
 8000ea4:	7fefffff 	.word	0x7fefffff
 8000ea8:	08014eec 	.word	0x08014eec
 8000eac:	08014edc 	.word	0x08014edc
 8000eb0:	08014ee4 	.word	0x08014ee4
 8000eb4:	08014ed4 	.word	0x08014ed4
            return print_object(item, output_buffer);
 8000eb8:	6885      	ldr	r5, [r0, #8]
    if (output_buffer == NULL)
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	f43f af40 	beq.w	8000d40 <print_value.part.0+0xa8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8000ec0:	694b      	ldr	r3, [r1, #20]
    output_pointer = ensure(output_buffer, length + 1);
 8000ec2:	4608      	mov	r0, r1
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8000ec4:	2b00      	cmp	r3, #0
    output_pointer = ensure(output_buffer, length + 1);
 8000ec6:	bf15      	itete	ne
 8000ec8:	2103      	movne	r1, #3
 8000eca:	2102      	moveq	r1, #2
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8000ecc:	2602      	movne	r6, #2
 8000ece:	2601      	moveq	r6, #1
    output_pointer = ensure(output_buffer, length + 1);
 8000ed0:	f7ff fdac 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f43f af33 	beq.w	8000d40 <print_value.part.0+0xa8>
    *output_pointer++ = '{';
 8000eda:	237b      	movs	r3, #123	; 0x7b
 8000edc:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
 8000ede:	68e3      	ldr	r3, [r4, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60e3      	str	r3, [r4, #12]
    if (output_buffer->format)
 8000ee4:	6963      	ldr	r3, [r4, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 80a6 	bne.w	8001038 <print_value.part.0+0x3a0>
    output_buffer->offset += length;
 8000eec:	68a2      	ldr	r2, [r4, #8]
 8000eee:	4432      	add	r2, r6
 8000ef0:	60a2      	str	r2, [r4, #8]
    while (current_item)
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	f000 810a 	beq.w	800110c <print_value.part.0+0x474>
                *output_pointer++ = '\t';
 8000ef8:	2609      	movs	r6, #9
        strcpy((char*)output, "\"\"");
 8000efa:	4f87      	ldr	r7, [pc, #540]	; (8001118 <print_value.part.0+0x480>)
        if (output_buffer->format)
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 80a5 	bne.w	800104c <print_value.part.0+0x3b4>
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8000f02:	6a28      	ldr	r0, [r5, #32]
    if (input == NULL)
 8000f04:	2800      	cmp	r0, #0
 8000f06:	f000 80b8 	beq.w	800107a <print_value.part.0+0x3e2>
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	f7ff fe16 	bl	8000b3c <print_string_ptr.part.0>
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8000f10:	2800      	cmp	r0, #0
 8000f12:	f43f af15 	beq.w	8000d40 <print_value.part.0+0xa8>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000f16:	6820      	ldr	r0, [r4, #0]
 8000f18:	b130      	cbz	r0, 8000f28 <print_value.part.0+0x290>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000f1a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000f1e:	4440      	add	r0, r8
 8000f20:	f7ff f9e8 	bl	80002f4 <strlen>
 8000f24:	4440      	add	r0, r8
 8000f26:	60a0      	str	r0, [r4, #8]
        length = (size_t) (output_buffer->format ? 2 : 1);
 8000f28:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
 8000f2a:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	f04f 0802 	movne.w	r8, #2
 8000f34:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
 8000f38:	4641      	mov	r1, r8
 8000f3a:	f7ff fd77 	bl	8000a2c <ensure>
        if (output_pointer == NULL)
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	f43f aefe 	beq.w	8000d40 <print_value.part.0+0xa8>
        *output_pointer++ = ':';
 8000f44:	233a      	movs	r3, #58	; 0x3a
 8000f46:	7003      	strb	r3, [r0, #0]
        if (output_buffer->format)
 8000f48:	6963      	ldr	r3, [r4, #20]
 8000f4a:	b103      	cbz	r3, 8000f4e <print_value.part.0+0x2b6>
            *output_pointer++ = '\t';
 8000f4c:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
 8000f4e:	68a3      	ldr	r3, [r4, #8]
 8000f50:	4621      	mov	r1, r4
 8000f52:	4628      	mov	r0, r5
 8000f54:	4443      	add	r3, r8
 8000f56:	60a3      	str	r3, [r4, #8]
    if ((item == NULL) || (output_buffer == NULL))
 8000f58:	f7ff fe9e 	bl	8000c98 <print_value.part.0>
        if (!print_value(current_item, output_buffer))
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	f43f aeef 	beq.w	8000d40 <print_value.part.0+0xa8>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000f62:	6820      	ldr	r0, [r4, #0]
 8000f64:	b130      	cbz	r0, 8000f74 <print_value.part.0+0x2dc>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000f66:	f8d4 8008 	ldr.w	r8, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000f6a:	4440      	add	r0, r8
 8000f6c:	f7ff f9c2 	bl	80002f4 <strlen>
 8000f70:	4440      	add	r0, r8
 8000f72:	60a0      	str	r0, [r4, #8]
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8000f74:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length + 1);
 8000f76:	4620      	mov	r0, r4
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8000f78:	682a      	ldr	r2, [r5, #0]
 8000f7a:	f1b3 0800 	subs.w	r8, r3, #0
 8000f7e:	bf18      	it	ne
 8000f80:	f04f 0801 	movne.w	r8, #1
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	bf18      	it	ne
 8000f88:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
 8000f8c:	f108 0101 	add.w	r1, r8, #1
 8000f90:	f7ff fd4c 	bl	8000a2c <ensure>
        if (output_pointer == NULL)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f43f aed3 	beq.w	8000d40 <print_value.part.0+0xa8>
        if (current_item->next)
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	b113      	cbz	r3, 8000fa4 <print_value.part.0+0x30c>
            *output_pointer++ = ',';
 8000f9e:	232c      	movs	r3, #44	; 0x2c
 8000fa0:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
 8000fa4:	6963      	ldr	r3, [r4, #20]
 8000fa6:	b113      	cbz	r3, 8000fae <print_value.part.0+0x316>
            *output_pointer++ = '\n';
 8000fa8:	230a      	movs	r3, #10
 8000faa:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
 8000fae:	2300      	movs	r3, #0
 8000fb0:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
 8000fb2:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
 8000fb4:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
 8000fb6:	4443      	add	r3, r8
 8000fb8:	60a3      	str	r3, [r4, #8]
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8000fba:	6963      	ldr	r3, [r4, #20]
    while (current_item)
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d19d      	bne.n	8000efc <print_value.part.0+0x264>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a3 	beq.w	800110c <print_value.part.0+0x474>
 8000fc6:	68e1      	ldr	r1, [r4, #12]
 8000fc8:	3101      	adds	r1, #1
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff fd2e 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	f43f aeb5 	beq.w	8000d40 <print_value.part.0+0xa8>
    if (output_buffer->format)
 8000fd6:	6963      	ldr	r3, [r4, #20]
 8000fd8:	b15b      	cbz	r3, 8000ff2 <print_value.part.0+0x35a>
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d008      	beq.n	8000ff2 <print_value.part.0+0x35a>
 8000fe0:	2200      	movs	r2, #0
            *output_pointer++ = '\t';
 8000fe2:	2109      	movs	r1, #9
 8000fe4:	f800 1b01 	strb.w	r1, [r0], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8000fe8:	3201      	adds	r2, #1
 8000fea:	68e3      	ldr	r3, [r4, #12]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3f8      	bcc.n	8000fe4 <print_value.part.0+0x34c>
    *output_pointer++ = '}';
 8000ff2:	227d      	movs	r2, #125	; 0x7d
 8000ff4:	e749      	b.n	8000e8a <print_value.part.0+0x1f2>
        length = sprintf((char*)number_buffer, "null");
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <print_value.part.0+0x484>)
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000ff8:	2604      	movs	r6, #4
        length = sprintf((char*)number_buffer, "null");
 8000ffa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ffe:	9005      	str	r0, [sp, #20]
 8001000:	f88d 1018 	strb.w	r1, [sp, #24]
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001004:	1c71      	adds	r1, r6, #1
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff fd10 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 800100c:	2800      	cmp	r0, #0
 800100e:	f43f ae97 	beq.w	8000d40 <print_value.part.0+0xa8>
    for (i = 0; i < ((size_t)length); i++)
 8001012:	b156      	cbz	r6, 800102a <print_value.part.0+0x392>
 8001014:	4603      	mov	r3, r0
 8001016:	ad05      	add	r5, sp, #20
 8001018:	1981      	adds	r1, r0, r6
        if (number_buffer[i] == decimal_point)
 800101a:	f815 2b01 	ldrb.w	r2, [r5], #1
    for (i = 0; i < ((size_t)length); i++)
 800101e:	3301      	adds	r3, #1
            output_pointer[i] = '.';
 8001020:	f803 2c01 	strb.w	r2, [r3, #-1]
    for (i = 0; i < ((size_t)length); i++)
 8001024:	4299      	cmp	r1, r3
 8001026:	d1f8      	bne.n	800101a <print_value.part.0+0x382>
    output_pointer[i] = '\0';
 8001028:	4608      	mov	r0, r1
 800102a:	2300      	movs	r3, #0
    return true;
 800102c:	2501      	movs	r5, #1
    output_pointer[i] = '\0';
 800102e:	7003      	strb	r3, [r0, #0]
    output_buffer->offset += (size_t)length;
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	4433      	add	r3, r6
 8001034:	60a3      	str	r3, [r4, #8]
            return print_number(item, output_buffer);
 8001036:	e684      	b.n	8000d42 <print_value.part.0+0xaa>
        *output_pointer++ = '\n';
 8001038:	230a      	movs	r3, #10
 800103a:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
 800103c:	68a2      	ldr	r2, [r4, #8]
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800103e:	6963      	ldr	r3, [r4, #20]
    output_buffer->offset += length;
 8001040:	4432      	add	r2, r6
 8001042:	60a2      	str	r2, [r4, #8]
    while (current_item)
 8001044:	2d00      	cmp	r5, #0
 8001046:	f47f af57 	bne.w	8000ef8 <print_value.part.0+0x260>
 800104a:	e7b9      	b.n	8000fc0 <print_value.part.0+0x328>
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800104c:	68e1      	ldr	r1, [r4, #12]
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff fcec 	bl	8000a2c <ensure>
            if (output_pointer == NULL)
 8001054:	2800      	cmp	r0, #0
 8001056:	f43f ae73 	beq.w	8000d40 <print_value.part.0+0xa8>
            for (i = 0; i < output_buffer->depth; i++)
 800105a:	68e2      	ldr	r2, [r4, #12]
 800105c:	b132      	cbz	r2, 800106c <print_value.part.0+0x3d4>
 800105e:	2300      	movs	r3, #0
 8001060:	3301      	adds	r3, #1
                *output_pointer++ = '\t';
 8001062:	f800 6b01 	strb.w	r6, [r0], #1
            for (i = 0; i < output_buffer->depth; i++)
 8001066:	68e2      	ldr	r2, [r4, #12]
 8001068:	4293      	cmp	r3, r2
 800106a:	d3f9      	bcc.n	8001060 <print_value.part.0+0x3c8>
            output_buffer->offset += output_buffer->depth;
 800106c:	68a3      	ldr	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800106e:	6a28      	ldr	r0, [r5, #32]
            output_buffer->offset += output_buffer->depth;
 8001070:	4413      	add	r3, r2
 8001072:	60a3      	str	r3, [r4, #8]
    if (input == NULL)
 8001074:	2800      	cmp	r0, #0
 8001076:	f47f af48 	bne.w	8000f0a <print_value.part.0+0x272>
        output = ensure(output_buffer, sizeof("\"\""));
 800107a:	2103      	movs	r1, #3
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fcd5 	bl	8000a2c <ensure>
        if (output == NULL)
 8001082:	2800      	cmp	r0, #0
 8001084:	f43f ae5c 	beq.w	8000d40 <print_value.part.0+0xa8>
        strcpy((char*)output, "\"\"");
 8001088:	883b      	ldrh	r3, [r7, #0]
 800108a:	8003      	strh	r3, [r0, #0]
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	7083      	strb	r3, [r0, #2]
        return true;
 8001090:	e741      	b.n	8000f16 <print_value.part.0+0x27e>
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001092:	ec53 2b18 	vmov	r2, r3, d8
 8001096:	4922      	ldr	r1, [pc, #136]	; (8001120 <print_value.part.0+0x488>)
 8001098:	a805      	add	r0, sp, #20
 800109a:	f011 fa3b 	bl	8012514 <siprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800109e:	aa02      	add	r2, sp, #8
 80010a0:	4920      	ldr	r1, [pc, #128]	; (8001124 <print_value.part.0+0x48c>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80010a2:	4606      	mov	r6, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80010a4:	a805      	add	r0, sp, #20
 80010a6:	f011 fa55 	bl	8012554 <siscanf>
 80010aa:	2801      	cmp	r0, #1
 80010ac:	d118      	bne.n	80010e0 <print_value.part.0+0x448>
 80010ae:	ed9d 6b02 	vldr	d6, [sp, #8]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010b2:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8001110 <print_value.part.0+0x478>
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80010b6:	eeb0 7bc6 	vabs.f64	d7, d6
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010ba:	ee36 6b48 	vsub.f64	d6, d6, d8
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80010be:	eeb4 9bc7 	vcmpe.f64	d9, d7
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010c2:	eeb0 6bc6 	vabs.f64	d6, d6
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	bf58      	it	pl
 80010cc:	eeb0 7b49 	vmovpl.f64	d7, d9
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010d0:	ee27 7b05 	vmul.f64	d7, d7, d5
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80010d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	f67f ae2d 	bls.w	8000d3a <print_value.part.0+0xa2>
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80010e0:	4911      	ldr	r1, [pc, #68]	; (8001128 <print_value.part.0+0x490>)
 80010e2:	a805      	add	r0, sp, #20
 80010e4:	ec53 2b18 	vmov	r2, r3, d8
 80010e8:	f011 fa14 	bl	8012514 <siprintf>
 80010ec:	4606      	mov	r6, r0
 80010ee:	e624      	b.n	8000d3a <print_value.part.0+0xa2>
        output = ensure(output_buffer, sizeof("\"\""));
 80010f0:	2103      	movs	r1, #3
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff fc9a 	bl	8000a2c <ensure>
        if (output == NULL)
 80010f8:	2800      	cmp	r0, #0
 80010fa:	f43f ae21 	beq.w	8000d40 <print_value.part.0+0xa8>
        strcpy((char*)output, "\"\"");
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <print_value.part.0+0x480>)
        return true;
 8001100:	2501      	movs	r5, #1
        strcpy((char*)output, "\"\"");
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	789b      	ldrb	r3, [r3, #2]
 8001106:	8002      	strh	r2, [r0, #0]
 8001108:	7083      	strb	r3, [r0, #2]
        return true;
 800110a:	e61a      	b.n	8000d42 <print_value.part.0+0xaa>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800110c:	2102      	movs	r1, #2
 800110e:	e75c      	b.n	8000fca <print_value.part.0+0x332>
 8001110:	00000000 	.word	0x00000000
 8001114:	3cb00000 	.word	0x3cb00000
 8001118:	08014f04 	.word	0x08014f04
 800111c:	08014ed4 	.word	0x08014ed4
 8001120:	08014ef0 	.word	0x08014ef0
 8001124:	08014ef8 	.word	0x08014ef8
 8001128:	08014efc 	.word	0x08014efc

0800112c <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b08b      	sub	sp, #44	; 0x2c
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001130:	4f28      	ldr	r7, [pc, #160]	; (80011d4 <print.constprop.0+0xa8>)
    memset(buffer, 0, sizeof(buffer));
 8001132:	2224      	movs	r2, #36	; 0x24
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 8001134:	460e      	mov	r6, r1
 8001136:	4605      	mov	r5, r0
    memset(buffer, 0, sizeof(buffer));
 8001138:	2100      	movs	r1, #0
 800113a:	a801      	add	r0, sp, #4
 800113c:	f011 faa5 	bl	801268a <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	4798      	blx	r3
    buffer->length = default_buffer_size;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800114c:	4604      	mov	r4, r0
 800114e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
 8001150:	9302      	str	r3, [sp, #8]
    buffer->hooks = *hooks;
 8001152:	ab0a      	add	r3, sp, #40	; 0x28
    buffer->format = format;
 8001154:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
 8001156:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800115a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if ((item == NULL) || (output_buffer == NULL))
 800115e:	b1ac      	cbz	r4, 800118c <print.constprop.0+0x60>
 8001160:	b1c5      	cbz	r5, 8001194 <print.constprop.0+0x68>
 8001162:	a901      	add	r1, sp, #4
 8001164:	4628      	mov	r0, r5
 8001166:	f7ff fd97 	bl	8000c98 <print_value.part.0>
    if (!print_value(item, buffer))
 800116a:	b190      	cbz	r0, 8001192 <print.constprop.0+0x66>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800116c:	9d01      	ldr	r5, [sp, #4]
 800116e:	2d00      	cmp	r5, #0
 8001170:	d02e      	beq.n	80011d0 <print.constprop.0+0xa4>
    buffer_pointer = buffer->buffer + buffer->offset;
 8001172:	9c03      	ldr	r4, [sp, #12]
    buffer->offset += strlen((const char*)buffer_pointer);
 8001174:	1928      	adds	r0, r5, r4
 8001176:	f7ff f8bd 	bl	80002f4 <strlen>
 800117a:	4420      	add	r0, r4
 800117c:	9003      	str	r0, [sp, #12]
    if (hooks->reallocate != NULL)
 800117e:	68be      	ldr	r6, [r7, #8]
 8001180:	b18e      	cbz	r6, 80011a6 <print.constprop.0+0x7a>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001182:	1c41      	adds	r1, r0, #1
 8001184:	4628      	mov	r0, r5
 8001186:	47b0      	blx	r6
        if (printed == NULL) {
 8001188:	4604      	mov	r4, r0
 800118a:	b110      	cbz	r0, 8001192 <print.constprop.0+0x66>
}
 800118c:	4620      	mov	r0, r4
 800118e:	b00b      	add	sp, #44	; 0x2c
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001192:	9c01      	ldr	r4, [sp, #4]
    if (buffer->buffer != NULL)
 8001194:	2c00      	cmp	r4, #0
 8001196:	d0f9      	beq.n	800118c <print.constprop.0+0x60>
        hooks->deallocate(buffer->buffer);
 8001198:	4620      	mov	r0, r4
    return NULL;
 800119a:	2400      	movs	r4, #0
        hooks->deallocate(buffer->buffer);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4798      	blx	r3
}
 80011a0:	4620      	mov	r0, r4
 80011a2:	b00b      	add	sp, #44	; 0x2c
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3001      	adds	r0, #1
 80011aa:	4798      	blx	r3
        if (printed == NULL)
 80011ac:	4604      	mov	r4, r0
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d0ef      	beq.n	8001192 <print.constprop.0+0x66>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80011b2:	9a03      	ldr	r2, [sp, #12]
 80011b4:	9b02      	ldr	r3, [sp, #8]
 80011b6:	3201      	adds	r2, #1
 80011b8:	9901      	ldr	r1, [sp, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	bf28      	it	cs
 80011be:	461a      	movcs	r2, r3
 80011c0:	f011 fb57 	bl	8012872 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80011c4:	9b03      	ldr	r3, [sp, #12]
 80011c6:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	9801      	ldr	r0, [sp, #4]
 80011cc:	4798      	blx	r3
        buffer->buffer = NULL;
 80011ce:	e7dd      	b.n	800118c <print.constprop.0+0x60>
    buffer_pointer = buffer->buffer + buffer->offset;
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	e7d4      	b.n	800117e <print.constprop.0+0x52>
 80011d4:	24000000 	.word	0x24000000

080011d8 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80011d8:	2800      	cmp	r0, #0
 80011da:	d03c      	beq.n	8001256 <add_item_to_object.constprop.0+0x7e>
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	460d      	mov	r5, r1
 80011e0:	b083      	sub	sp, #12
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80011e2:	b1d9      	cbz	r1, 800121c <add_item_to_object.constprop.0+0x44>
 80011e4:	4614      	mov	r4, r2
 80011e6:	b1ca      	cbz	r2, 800121c <add_item_to_object.constprop.0+0x44>
 80011e8:	4290      	cmp	r0, r2
 80011ea:	4606      	mov	r6, r0
 80011ec:	d016      	beq.n	800121c <add_item_to_object.constprop.0+0x44>
    {
        return false;
    }

    if (constant_key)
 80011ee:	b1eb      	cbz	r3, 800122c <add_item_to_object.constprop.0+0x54>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
 80011f0:	68d3      	ldr	r3, [r2, #12]
 80011f2:	f443 7700 	orr.w	r7, r3, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011f6:	059b      	lsls	r3, r3, #22
 80011f8:	d404      	bmi.n	8001204 <add_item_to_object.constprop.0+0x2c>
 80011fa:	6a20      	ldr	r0, [r4, #32]
 80011fc:	b110      	cbz	r0, 8001204 <add_item_to_object.constprop.0+0x2c>
    {
        hooks->deallocate(item->string);
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <add_item_to_object.constprop.0+0x88>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4798      	blx	r3
    child = array->child;
 8001204:	68b3      	ldr	r3, [r6, #8]
    }

    item->string = new_key;
 8001206:	6225      	str	r5, [r4, #32]
    item->type = new_type;
 8001208:	60e7      	str	r7, [r4, #12]
    if (child == NULL)
 800120a:	b153      	cbz	r3, 8001222 <add_item_to_object.constprop.0+0x4a>
        if (child->prev)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	b322      	cbz	r2, 800125a <add_item_to_object.constprop.0+0x82>
            array->child->prev = item;
 8001210:	2001      	movs	r0, #1
    prev->next = item;
 8001212:	6014      	str	r4, [r2, #0]
    item->prev = prev;
 8001214:	6062      	str	r2, [r4, #4]
            array->child->prev = item;
 8001216:	605c      	str	r4, [r3, #4]

    return add_item_to_array(object, item);
}
 8001218:	b003      	add	sp, #12
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
 800121c:	2000      	movs	r0, #0
}
 800121e:	b003      	add	sp, #12
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        array->child = item;
 8001222:	60b4      	str	r4, [r6, #8]
        item->prev = item;
 8001224:	2001      	movs	r0, #1
        item->next = NULL;
 8001226:	e9c4 3400 	strd	r3, r4, [r4]
 800122a:	e7f8      	b.n	800121e <add_item_to_object.constprop.0+0x46>
    length = strlen((const char*)string) + sizeof("");
 800122c:	4608      	mov	r0, r1
 800122e:	f7ff f861 	bl	80002f4 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <add_item_to_object.constprop.0+0x88>)
    length = strlen((const char*)string) + sizeof("");
 8001234:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4610      	mov	r0, r2
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	4798      	blx	r3
    if (copy == NULL)
 800123e:	4607      	mov	r7, r0
 8001240:	2800      	cmp	r0, #0
 8001242:	d0eb      	beq.n	800121c <add_item_to_object.constprop.0+0x44>
    memcpy(copy, string, length);
 8001244:	4629      	mov	r1, r5
 8001246:	9a01      	ldr	r2, [sp, #4]
 8001248:	f011 fb13 	bl	8012872 <memcpy>
        new_type = item->type & ~cJSON_StringIsConst;
 800124c:	68e3      	ldr	r3, [r4, #12]
 800124e:	463d      	mov	r5, r7
 8001250:	f423 7700 	bic.w	r7, r3, #512	; 0x200
 8001254:	e7cf      	b.n	80011f6 <add_item_to_object.constprop.0+0x1e>
        return false;
 8001256:	2000      	movs	r0, #0
}
 8001258:	4770      	bx	lr
 800125a:	2001      	movs	r0, #1
 800125c:	e7df      	b.n	800121e <add_item_to_object.constprop.0+0x46>
 800125e:	bf00      	nop
 8001260:	24000000 	.word	0x24000000

08001264 <cJSON_Delete>:
    while (item != NULL)
 8001264:	b358      	cbz	r0, 80012be <cJSON_Delete+0x5a>
{
 8001266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	4605      	mov	r5, r0
 800126c:	4f14      	ldr	r7, [pc, #80]	; (80012c0 <cJSON_Delete+0x5c>)
            item->valuestring = NULL;
 800126e:	f04f 0800 	mov.w	r8, #0
        next = item->next;
 8001272:	462c      	mov	r4, r5
 8001274:	682d      	ldr	r5, [r5, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001276:	68e2      	ldr	r2, [r4, #12]
 8001278:	05d1      	lsls	r1, r2, #23
 800127a:	4616      	mov	r6, r2
 800127c:	d40e      	bmi.n	800129c <cJSON_Delete+0x38>
 800127e:	68a0      	ldr	r0, [r4, #8]
 8001280:	b128      	cbz	r0, 800128e <cJSON_Delete+0x2a>
            cJSON_Delete(item->child);
 8001282:	f7ff ffef 	bl	8001264 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001286:	68e2      	ldr	r2, [r4, #12]
 8001288:	05d3      	lsls	r3, r2, #23
 800128a:	4616      	mov	r6, r2
 800128c:	d406      	bmi.n	800129c <cJSON_Delete+0x38>
 800128e:	6920      	ldr	r0, [r4, #16]
 8001290:	b198      	cbz	r0, 80012ba <cJSON_Delete+0x56>
            global_hooks.deallocate(item->valuestring);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4798      	blx	r3
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001296:	68e6      	ldr	r6, [r4, #12]
            item->valuestring = NULL;
 8001298:	f8c4 8010 	str.w	r8, [r4, #16]
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800129c:	f416 7600 	ands.w	r6, r6, #512	; 0x200
 80012a0:	d104      	bne.n	80012ac <cJSON_Delete+0x48>
 80012a2:	6a20      	ldr	r0, [r4, #32]
 80012a4:	b110      	cbz	r0, 80012ac <cJSON_Delete+0x48>
            global_hooks.deallocate(item->string);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4798      	blx	r3
            item->string = NULL;
 80012aa:	6226      	str	r6, [r4, #32]
        global_hooks.deallocate(item);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4620      	mov	r0, r4
 80012b0:	4798      	blx	r3
    while (item != NULL)
 80012b2:	2d00      	cmp	r5, #0
 80012b4:	d1dd      	bne.n	8001272 <cJSON_Delete+0xe>
}
 80012b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80012ba:	4616      	mov	r6, r2
 80012bc:	e7ee      	b.n	800129c <cJSON_Delete+0x38>
 80012be:	4770      	bx	lr
 80012c0:	24000000 	.word	0x24000000
 80012c4:	00000000 	.word	0x00000000

080012c8 <parse_value>:
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d065      	beq.n	8001398 <parse_value+0xd0>
{
 80012cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80012d0:	f8d1 8000 	ldr.w	r8, [r1]
{
 80012d4:	b093      	sub	sp, #76	; 0x4c
 80012d6:	460c      	mov	r4, r1
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80012d8:	f1b8 0f00 	cmp.w	r8, #0
 80012dc:	d033      	beq.n	8001346 <parse_value+0x7e>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80012de:	688e      	ldr	r6, [r1, #8]
 80012e0:	4605      	mov	r5, r0
 80012e2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80012e6:	1d37      	adds	r7, r6, #4
 80012e8:	454f      	cmp	r7, r9
 80012ea:	d830      	bhi.n	800134e <parse_value+0x86>
 80012ec:	eb08 0b06 	add.w	fp, r8, r6
 80012f0:	2204      	movs	r2, #4
 80012f2:	49a5      	ldr	r1, [pc, #660]	; (8001588 <parse_value+0x2c0>)
 80012f4:	4658      	mov	r0, fp
 80012f6:	f011 f9d0 	bl	801269a <strncmp>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d04e      	beq.n	800139c <parse_value+0xd4>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80012fe:	f106 0a05 	add.w	sl, r6, #5
 8001302:	45d1      	cmp	r9, sl
 8001304:	d234      	bcs.n	8001370 <parse_value+0xa8>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001306:	4658      	mov	r0, fp
 8001308:	2204      	movs	r2, #4
 800130a:	49a0      	ldr	r1, [pc, #640]	; (800158c <parse_value+0x2c4>)
 800130c:	f011 f9c5 	bl	801269a <strncmp>
 8001310:	2800      	cmp	r0, #0
 8001312:	d03b      	beq.n	800138c <parse_value+0xc4>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001314:	454e      	cmp	r6, r9
 8001316:	d216      	bcs.n	8001346 <parse_value+0x7e>
 8001318:	f818 3006 	ldrb.w	r3, [r8, r6]
 800131c:	2b22      	cmp	r3, #34	; 0x22
 800131e:	f000 8104 	beq.w	800152a <parse_value+0x262>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001322:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001326:	2a09      	cmp	r2, #9
 8001328:	f240 80ab 	bls.w	8001482 <parse_value+0x1ba>
 800132c:	f1a3 072d 	sub.w	r7, r3, #45	; 0x2d
 8001330:	fab7 f787 	clz	r7, r7
 8001334:	097f      	lsrs	r7, r7, #5
 8001336:	2f00      	cmp	r7, #0
 8001338:	f040 80a3 	bne.w	8001482 <parse_value+0x1ba>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800133c:	2b5b      	cmp	r3, #91	; 0x5b
 800133e:	f000 80fb 	beq.w	8001538 <parse_value+0x270>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001342:	2b7b      	cmp	r3, #123	; 0x7b
 8001344:	d031      	beq.n	80013aa <parse_value+0xe2>
    return false;
 8001346:	2000      	movs	r0, #0
}
 8001348:	b013      	add	sp, #76	; 0x4c
 800134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800134e:	f106 0a05 	add.w	sl, r6, #5
 8001352:	45d1      	cmp	r9, sl
 8001354:	d3de      	bcc.n	8001314 <parse_value+0x4c>
 8001356:	2205      	movs	r2, #5
 8001358:	498d      	ldr	r1, [pc, #564]	; (8001590 <parse_value+0x2c8>)
 800135a:	eb08 0006 	add.w	r0, r8, r6
 800135e:	f011 f99c 	bl	801269a <strncmp>
 8001362:	2800      	cmp	r0, #0
 8001364:	d1d6      	bne.n	8001314 <parse_value+0x4c>
        item->type = cJSON_False;
 8001366:	2001      	movs	r0, #1
 8001368:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
 800136a:	f8c4 a008 	str.w	sl, [r4, #8]
        return true;
 800136e:	e7eb      	b.n	8001348 <parse_value+0x80>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001370:	2205      	movs	r2, #5
 8001372:	4987      	ldr	r1, [pc, #540]	; (8001590 <parse_value+0x2c8>)
 8001374:	4658      	mov	r0, fp
 8001376:	f011 f990 	bl	801269a <strncmp>
 800137a:	2800      	cmp	r0, #0
 800137c:	d0f3      	beq.n	8001366 <parse_value+0x9e>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800137e:	4658      	mov	r0, fp
 8001380:	2204      	movs	r2, #4
 8001382:	4982      	ldr	r1, [pc, #520]	; (800158c <parse_value+0x2c4>)
 8001384:	f011 f989 	bl	801269a <strncmp>
 8001388:	2800      	cmp	r0, #0
 800138a:	d1c3      	bne.n	8001314 <parse_value+0x4c>
        item->valueint = 1;
 800138c:	2001      	movs	r0, #1
        item->type = cJSON_True;
 800138e:	2302      	movs	r3, #2
        item->valueint = 1;
 8001390:	6168      	str	r0, [r5, #20]
        item->type = cJSON_True;
 8001392:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 8001394:	60a7      	str	r7, [r4, #8]
        return true;
 8001396:	e7d7      	b.n	8001348 <parse_value+0x80>
        return false; /* no input */
 8001398:	2000      	movs	r0, #0
}
 800139a:	4770      	bx	lr
        item->type = cJSON_NULL;
 800139c:	2304      	movs	r3, #4
        return true;
 800139e:	2001      	movs	r0, #1
        item->type = cJSON_NULL;
 80013a0:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 80013a2:	60a7      	str	r7, [r4, #8]
}
 80013a4:	b013      	add	sp, #76	; 0x4c
 80013a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80013aa:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80013ae:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 80013b2:	d2c8      	bcs.n	8001346 <parse_value+0x7e>
    input_buffer->depth++;
 80013b4:	f10a 0301 	add.w	r3, sl, #1
 80013b8:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80013ba:	f818 3006 	ldrb.w	r3, [r8, r6]
 80013be:	2b7b      	cmp	r3, #123	; 0x7b
 80013c0:	d1c1      	bne.n	8001346 <parse_value+0x7e>
    input_buffer->offset++;
 80013c2:	3601      	adds	r6, #1
    buffer_skip_whitespace(input_buffer);
 80013c4:	4620      	mov	r0, r4
    input_buffer->offset++;
 80013c6:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 80013c8:	f7ff fb10 	bl	80009ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80013cc:	68a3      	ldr	r3, [r4, #8]
 80013ce:	4599      	cmp	r9, r3
 80013d0:	f240 811c 	bls.w	800160c <parse_value+0x344>
 80013d4:	f818 2003 	ldrb.w	r2, [r8, r3]
 80013d8:	2a7d      	cmp	r2, #125	; 0x7d
 80013da:	f000 813c 	beq.w	8001656 <parse_value+0x38e>
    cJSON *current_item = NULL;
 80013de:	2600      	movs	r6, #0
    input_buffer->offset--;
 80013e0:	3b01      	subs	r3, #1
    cJSON *head = NULL; /* linked list head */
 80013e2:	4637      	mov	r7, r6
        memset(node, '\0', sizeof(cJSON));
 80013e4:	46b0      	mov	r8, r6
    input_buffer->offset--;
 80013e6:	60a3      	str	r3, [r4, #8]
 80013e8:	e03d      	b.n	8001466 <parse_value+0x19e>
        memset(node, '\0', sizeof(cJSON));
 80013ea:	2228      	movs	r2, #40	; 0x28
 80013ec:	2100      	movs	r1, #0
 80013ee:	f011 f94c 	bl	801268a <memset>
        if (head == NULL)
 80013f2:	2f00      	cmp	r7, #0
 80013f4:	f000 8108 	beq.w	8001608 <parse_value+0x340>
            current_item->next = new_item;
 80013f8:	f8c9 6000 	str.w	r6, [r9]
            new_item->prev = current_item;
 80013fc:	f8c6 9004 	str.w	r9, [r6, #4]
        if (cannot_access_at_index(input_buffer, 1))
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	6862      	ldr	r2, [r4, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	4293      	cmp	r3, r2
 8001408:	d237      	bcs.n	800147a <parse_value+0x1b2>
        buffer_skip_whitespace(input_buffer);
 800140a:	4620      	mov	r0, r4
        input_buffer->offset++;
 800140c:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 800140e:	f7ff faed 	bl	80009ec <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001412:	4621      	mov	r1, r4
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff f9e5 	bl	80007e4 <parse_string>
 800141a:	b370      	cbz	r0, 800147a <parse_value+0x1b2>
        buffer_skip_whitespace(input_buffer);
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff fae5 	bl	80009ec <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 8001422:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
 8001424:	f8c6 8010 	str.w	r8, [r6, #16]
        current_item->string = current_item->valuestring;
 8001428:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800142a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800142e:	4293      	cmp	r3, r2
 8001430:	d223      	bcs.n	800147a <parse_value+0x1b2>
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	5cd2      	ldrb	r2, [r2, r3]
 8001436:	2a3a      	cmp	r2, #58	; 0x3a
 8001438:	d11f      	bne.n	800147a <parse_value+0x1b2>
        input_buffer->offset++;
 800143a:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
 800143c:	4620      	mov	r0, r4
        input_buffer->offset++;
 800143e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8001440:	f7ff fad4 	bl	80009ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001444:	4621      	mov	r1, r4
 8001446:	4630      	mov	r0, r6
 8001448:	f7ff ff3e 	bl	80012c8 <parse_value>
 800144c:	b1a8      	cbz	r0, 800147a <parse_value+0x1b2>
        buffer_skip_whitespace(input_buffer);
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff facc 	bl	80009ec <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001454:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001458:	4293      	cmp	r3, r2
 800145a:	d20e      	bcs.n	800147a <parse_value+0x1b2>
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	5cd2      	ldrb	r2, [r2, r3]
 8001460:	2a2c      	cmp	r2, #44	; 0x2c
 8001462:	f040 80ea 	bne.w	800163a <parse_value+0x372>
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001466:	6923      	ldr	r3, [r4, #16]
 8001468:	2028      	movs	r0, #40	; 0x28
 800146a:	46b1      	mov	r9, r6
 800146c:	4798      	blx	r3
    if (node)
 800146e:	4606      	mov	r6, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	d1ba      	bne.n	80013ea <parse_value+0x122>
    if (head != NULL)
 8001474:	2f00      	cmp	r7, #0
 8001476:	f43f af66 	beq.w	8001346 <parse_value+0x7e>
        cJSON_Delete(head);
 800147a:	4638      	mov	r0, r7
 800147c:	f7ff fef2 	bl	8001264 <cJSON_Delete>
 8001480:	e761      	b.n	8001346 <parse_value+0x7e>
    unsigned char *after_end = NULL;
 8001482:	eba9 0906 	sub.w	r9, r9, r6
 8001486:	af02      	add	r7, sp, #8
 8001488:	3e01      	subs	r6, #1
 800148a:	2100      	movs	r1, #0
 800148c:	4638      	mov	r0, r7
        switch (buffer_at_offset(input_buffer)[i])
 800148e:	f04f 0e01 	mov.w	lr, #1
 8001492:	4446      	add	r6, r8
 8001494:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8001594 <parse_value+0x2cc>
    unsigned char *after_end = NULL;
 8001498:	9101      	str	r1, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
 800149a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800149e:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
 80014a2:	2b45      	cmp	r3, #69	; 0x45
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	d836      	bhi.n	8001516 <parse_value+0x24e>
 80014a8:	2b2a      	cmp	r3, #42	; 0x2a
 80014aa:	fa0e f202 	lsl.w	r2, lr, r2
 80014ae:	d904      	bls.n	80014ba <parse_value+0x1f2>
 80014b0:	ea12 0f0c 	tst.w	r2, ip
 80014b4:	d131      	bne.n	800151a <parse_value+0x252>
 80014b6:	2b2e      	cmp	r3, #46	; 0x2e
 80014b8:	d02f      	beq.n	800151a <parse_value+0x252>
    number_c_string[i] = '\0';
 80014ba:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80014be:	2600      	movs	r6, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80014c0:	4638      	mov	r0, r7
    number_c_string[i] = '\0';
 80014c2:	eb0d 0103 	add.w	r1, sp, r3
 80014c6:	f801 6c40 	strb.w	r6, [r1, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80014ca:	a901      	add	r1, sp, #4
 80014cc:	f010 febe 	bl	801224c <strtod>
    if (number_c_string == after_end)
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	42bb      	cmp	r3, r7
 80014d4:	f43f af37 	beq.w	8001346 <parse_value+0x7e>
    if (number >= INT_MAX)
 80014d8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8001578 <parse_value+0x2b0>
 80014dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	f280 8088 	bge.w	80015f8 <parse_value+0x330>
    else if (number <= (double)INT_MIN)
 80014e8:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8001580 <parse_value+0x2b8>
 80014ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	f240 8085 	bls.w	8001602 <parse_value+0x33a>
        item->valueint = (int)number;
 80014f8:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80014fc:	ee17 1a90 	vmov	r1, s15
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001500:	68a2      	ldr	r2, [r4, #8]
 8001502:	1bdb      	subs	r3, r3, r7
        item->valueint = INT_MAX;
 8001504:	6169      	str	r1, [r5, #20]
    item->type = cJSON_Number;
 8001506:	2108      	movs	r1, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001508:	4413      	add	r3, r2
    return true;
 800150a:	2001      	movs	r0, #1
    item->type = cJSON_Number;
 800150c:	60e9      	str	r1, [r5, #12]
    item->valuedouble = number;
 800150e:	ed85 0b06 	vstr	d0, [r5, #24]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001512:	60a3      	str	r3, [r4, #8]
    return true;
 8001514:	e718      	b.n	8001348 <parse_value+0x80>
        switch (buffer_at_offset(input_buffer)[i])
 8001516:	2b65      	cmp	r3, #101	; 0x65
 8001518:	d1cf      	bne.n	80014ba <parse_value+0x1f2>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800151a:	3101      	adds	r1, #1
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800151c:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001520:	293f      	cmp	r1, #63	; 0x3f
 8001522:	d0ca      	beq.n	80014ba <parse_value+0x1f2>
 8001524:	4549      	cmp	r1, r9
 8001526:	d1b8      	bne.n	800149a <parse_value+0x1d2>
loop_end:
 8001528:	e7c7      	b.n	80014ba <parse_value+0x1f2>
        return parse_string(item, input_buffer);
 800152a:	4621      	mov	r1, r4
 800152c:	4628      	mov	r0, r5
}
 800152e:	b013      	add	sp, #76	; 0x4c
 8001530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return parse_string(item, input_buffer);
 8001534:	f7ff b956 	b.w	80007e4 <parse_string>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001538:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800153c:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 8001540:	f4bf af01 	bcs.w	8001346 <parse_value+0x7e>
    input_buffer->depth++;
 8001544:	f10a 0301 	add.w	r3, sl, #1
 8001548:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 800154a:	f818 3006 	ldrb.w	r3, [r8, r6]
 800154e:	2b5b      	cmp	r3, #91	; 0x5b
 8001550:	f47f aef9 	bne.w	8001346 <parse_value+0x7e>
    input_buffer->offset++;
 8001554:	3601      	adds	r6, #1
    buffer_skip_whitespace(input_buffer);
 8001556:	4620      	mov	r0, r4
    input_buffer->offset++;
 8001558:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 800155a:	f7ff fa47 	bl	80009ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800155e:	68a3      	ldr	r3, [r4, #8]
 8001560:	4599      	cmp	r9, r3
 8001562:	d953      	bls.n	800160c <parse_value+0x344>
 8001564:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001568:	2a5d      	cmp	r2, #93	; 0x5d
 800156a:	d062      	beq.n	8001632 <parse_value+0x36a>
    input_buffer->offset--;
 800156c:	3b01      	subs	r3, #1
    cJSON *head = NULL; /* head of the linked list */
 800156e:	46b8      	mov	r8, r7
    input_buffer->offset--;
 8001570:	60a3      	str	r3, [r4, #8]
 8001572:	e02f      	b.n	80015d4 <parse_value+0x30c>
 8001574:	f3af 8000 	nop.w
 8001578:	ffc00000 	.word	0xffc00000
 800157c:	41dfffff 	.word	0x41dfffff
 8001580:	00000000 	.word	0x00000000
 8001584:	c1e00000 	.word	0xc1e00000
 8001588:	08014ed4 	.word	0x08014ed4
 800158c:	08014ee4 	.word	0x08014ee4
 8001590:	08014edc 	.word	0x08014edc
 8001594:	04007fe5 	.word	0x04007fe5
        memset(node, '\0', sizeof(cJSON));
 8001598:	f011 f877 	bl	801268a <memset>
        if (head == NULL)
 800159c:	f1b8 0f00 	cmp.w	r8, #0
 80015a0:	d02d      	beq.n	80015fe <parse_value+0x336>
            current_item->next = new_item;
 80015a2:	6037      	str	r7, [r6, #0]
            new_item->prev = current_item;
 80015a4:	607e      	str	r6, [r7, #4]
        input_buffer->offset++;
 80015a6:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 80015a8:	4620      	mov	r0, r4
        input_buffer->offset++;
 80015aa:	3301      	adds	r3, #1
 80015ac:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 80015ae:	f7ff fa1d 	bl	80009ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80015b2:	4621      	mov	r1, r4
 80015b4:	4638      	mov	r0, r7
 80015b6:	f7ff fe87 	bl	80012c8 <parse_value>
 80015ba:	4603      	mov	r3, r0
        buffer_skip_whitespace(input_buffer);
 80015bc:	4620      	mov	r0, r4
        if (!parse_value(current_item, input_buffer))
 80015be:	b1b3      	cbz	r3, 80015ee <parse_value+0x326>
        buffer_skip_whitespace(input_buffer);
 80015c0:	f7ff fa14 	bl	80009ec <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80015c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d210      	bcs.n	80015ee <parse_value+0x326>
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	5cd2      	ldrb	r2, [r2, r3]
 80015d0:	2a2c      	cmp	r2, #44	; 0x2c
 80015d2:	d11f      	bne.n	8001614 <parse_value+0x34c>
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80015d4:	6923      	ldr	r3, [r4, #16]
 80015d6:	2028      	movs	r0, #40	; 0x28
 80015d8:	4798      	blx	r3
    if (node)
 80015da:	463e      	mov	r6, r7
        memset(node, '\0', sizeof(cJSON));
 80015dc:	2228      	movs	r2, #40	; 0x28
 80015de:	2100      	movs	r1, #0
    if (node)
 80015e0:	4607      	mov	r7, r0
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d1d8      	bne.n	8001598 <parse_value+0x2d0>
    if (head != NULL)
 80015e6:	f1b8 0f00 	cmp.w	r8, #0
 80015ea:	f43f aeac 	beq.w	8001346 <parse_value+0x7e>
        cJSON_Delete(head);
 80015ee:	4640      	mov	r0, r8
 80015f0:	f7ff fe38 	bl	8001264 <cJSON_Delete>
    return false;
 80015f4:	2000      	movs	r0, #0
 80015f6:	e6a7      	b.n	8001348 <parse_value+0x80>
 80015f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015fc:	e780      	b.n	8001500 <parse_value+0x238>
 80015fe:	46b8      	mov	r8, r7
 8001600:	e7d1      	b.n	80015a6 <parse_value+0x2de>
 8001602:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001606:	e77b      	b.n	8001500 <parse_value+0x238>
 8001608:	4637      	mov	r7, r6
 800160a:	e6f9      	b.n	8001400 <parse_value+0x138>
        input_buffer->offset--;
 800160c:	3b01      	subs	r3, #1
    return false;
 800160e:	4638      	mov	r0, r7
        input_buffer->offset--;
 8001610:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
 8001612:	e699      	b.n	8001348 <parse_value+0x80>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001614:	2a5d      	cmp	r2, #93	; 0x5d
 8001616:	d1ea      	bne.n	80015ee <parse_value+0x326>
    input_buffer->depth--;
 8001618:	68e2      	ldr	r2, [r4, #12]
 800161a:	3a01      	subs	r2, #1
 800161c:	60e2      	str	r2, [r4, #12]
        head->prev = current_item;
 800161e:	f8c8 7004 	str.w	r7, [r8, #4]
    item->type = cJSON_Array;
 8001622:	2220      	movs	r2, #32
    input_buffer->offset++;
 8001624:	3301      	adds	r3, #1
    item->child = head;
 8001626:	f8c5 8008 	str.w	r8, [r5, #8]
    return true;
 800162a:	2001      	movs	r0, #1
    item->type = cJSON_Array;
 800162c:	60ea      	str	r2, [r5, #12]
    input_buffer->offset++;
 800162e:	60a3      	str	r3, [r4, #8]
    return true;
 8001630:	e68a      	b.n	8001348 <parse_value+0x80>
    cJSON *head = NULL; /* head of the linked list */
 8001632:	46b8      	mov	r8, r7
    input_buffer->depth--;
 8001634:	f8c4 a00c 	str.w	sl, [r4, #12]
    if (head != NULL) {
 8001638:	e7f3      	b.n	8001622 <parse_value+0x35a>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800163a:	2a7d      	cmp	r2, #125	; 0x7d
 800163c:	f47f af1d 	bne.w	800147a <parse_value+0x1b2>
    input_buffer->depth--;
 8001640:	68e2      	ldr	r2, [r4, #12]
 8001642:	3a01      	subs	r2, #1
 8001644:	60e2      	str	r2, [r4, #12]
        head->prev = current_item;
 8001646:	607e      	str	r6, [r7, #4]
    item->type = cJSON_Object;
 8001648:	2240      	movs	r2, #64	; 0x40
    input_buffer->offset++;
 800164a:	3301      	adds	r3, #1
    item->child = head;
 800164c:	60af      	str	r7, [r5, #8]
    return true;
 800164e:	2001      	movs	r0, #1
    item->type = cJSON_Object;
 8001650:	60ea      	str	r2, [r5, #12]
    input_buffer->offset++;
 8001652:	60a3      	str	r3, [r4, #8]
    return true;
 8001654:	e678      	b.n	8001348 <parse_value+0x80>
    cJSON *head = NULL; /* linked list head */
 8001656:	2700      	movs	r7, #0
    input_buffer->depth--;
 8001658:	f8c4 a00c 	str.w	sl, [r4, #12]
    if (head != NULL) {
 800165c:	e7f4      	b.n	8001648 <parse_value+0x380>
 800165e:	bf00      	nop

08001660 <cJSON_ParseWithLengthOpts>:
{
 8001660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001664:	2500      	movs	r5, #0
{
 8001666:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
 8001668:	4f3a      	ldr	r7, [pc, #232]	; (8001754 <cJSON_ParseWithLengthOpts+0xf4>)
{
 800166a:	4616      	mov	r6, r2
    if (value == NULL || 0 == buffer_length)
 800166c:	4604      	mov	r4, r0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800166e:	e9cd 5503 	strd	r5, r5, [sp, #12]
    global_error.position = 0;
 8001672:	e9c7 5500 	strd	r5, r5, [r7]
    if (value == NULL || 0 == buffer_length)
 8001676:	2800      	cmp	r0, #0
 8001678:	d03f      	beq.n	80016fa <cJSON_ParseWithLengthOpts+0x9a>
 800167a:	fab1 f981 	clz	r9, r1
 800167e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001682:	2900      	cmp	r1, #0
 8001684:	d039      	beq.n	80016fa <cJSON_ParseWithLengthOpts+0x9a>
    buffer.content = (const unsigned char*)value;
 8001686:	4698      	mov	r8, r3
    buffer.hooks = global_hooks;
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <cJSON_ParseWithLengthOpts+0xf8>)
    buffer.content = (const unsigned char*)value;
 800168a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    buffer.hooks = global_hooks;
 800168e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001692:	ab08      	add	r3, sp, #32
 8001694:	e903 0007 	stmdb	r3, {r0, r1, r2}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001698:	4603      	mov	r3, r0
 800169a:	2028      	movs	r0, #40	; 0x28
 800169c:	4798      	blx	r3
    if (node)
 800169e:	4605      	mov	r5, r0
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d045      	beq.n	8001730 <cJSON_ParseWithLengthOpts+0xd0>
        memset(node, '\0', sizeof(cJSON));
 80016a4:	2228      	movs	r2, #40	; 0x28
 80016a6:	4649      	mov	r1, r9
 80016a8:	f010 ffef 	bl	801268a <memset>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80016ac:	9801      	ldr	r0, [sp, #4]
 80016ae:	b188      	cbz	r0, 80016d4 <cJSON_ParseWithLengthOpts+0x74>
 80016b0:	9b03      	ldr	r3, [sp, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d145      	bne.n	8001742 <cJSON_ParseWithLengthOpts+0xe2>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80016b6:	9b02      	ldr	r3, [sp, #8]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d940      	bls.n	800173e <cJSON_ParseWithLengthOpts+0xde>
 80016bc:	7803      	ldrb	r3, [r0, #0]
 80016be:	2bef      	cmp	r3, #239	; 0xef
 80016c0:	d13d      	bne.n	800173e <cJSON_ParseWithLengthOpts+0xde>
 80016c2:	7843      	ldrb	r3, [r0, #1]
 80016c4:	2bbb      	cmp	r3, #187	; 0xbb
 80016c6:	d13a      	bne.n	800173e <cJSON_ParseWithLengthOpts+0xde>
 80016c8:	7883      	ldrb	r3, [r0, #2]
 80016ca:	2bbf      	cmp	r3, #191	; 0xbf
 80016cc:	d137      	bne.n	800173e <cJSON_ParseWithLengthOpts+0xde>
        buffer->offset += 3;
 80016ce:	2303      	movs	r3, #3
    return buffer;
 80016d0:	a801      	add	r0, sp, #4
        buffer->offset += 3;
 80016d2:	9303      	str	r3, [sp, #12]
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80016d4:	f7ff f98a 	bl	80009ec <buffer_skip_whitespace>
 80016d8:	4601      	mov	r1, r0
 80016da:	4628      	mov	r0, r5
 80016dc:	f7ff fdf4 	bl	80012c8 <parse_value>
 80016e0:	b318      	cbz	r0, 800172a <cJSON_ParseWithLengthOpts+0xca>
    if (require_null_terminated)
 80016e2:	f1b8 0f00 	cmp.w	r8, #0
 80016e6:	d119      	bne.n	800171c <cJSON_ParseWithLengthOpts+0xbc>
    if (return_parse_end)
 80016e8:	b17e      	cbz	r6, 800170a <cJSON_ParseWithLengthOpts+0xaa>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016ea:	9b01      	ldr	r3, [sp, #4]
}
 80016ec:	4628      	mov	r0, r5
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016ee:	9a03      	ldr	r2, [sp, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	6033      	str	r3, [r6, #0]
}
 80016f4:	b009      	add	sp, #36	; 0x24
 80016f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value != NULL)
 80016fa:	b154      	cbz	r4, 8001712 <cJSON_ParseWithLengthOpts+0xb2>
        local_error.position = 0;
 80016fc:	2300      	movs	r3, #0
        if (return_parse_end != NULL)
 80016fe:	b10e      	cbz	r6, 8001704 <cJSON_ParseWithLengthOpts+0xa4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001700:	18e2      	adds	r2, r4, r3
 8001702:	6032      	str	r2, [r6, #0]
    return NULL;
 8001704:	2500      	movs	r5, #0
        global_error = local_error;
 8001706:	e9c7 4300 	strd	r4, r3, [r7]
}
 800170a:	4628      	mov	r0, r5
 800170c:	b009      	add	sp, #36	; 0x24
 800170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8001712:	4625      	mov	r5, r4
}
 8001714:	4628      	mov	r0, r5
 8001716:	b009      	add	sp, #36	; 0x24
 8001718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
 800171c:	a801      	add	r0, sp, #4
 800171e:	f7ff f965 	bl	80009ec <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001726:	4293      	cmp	r3, r2
 8001728:	d30d      	bcc.n	8001746 <cJSON_ParseWithLengthOpts+0xe6>
        cJSON_Delete(item);
 800172a:	4628      	mov	r0, r5
 800172c:	f7ff fd9a 	bl	8001264 <cJSON_Delete>
        if (buffer.offset < buffer.length)
 8001730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8e2      	bhi.n	80016fe <cJSON_ParseWithLengthOpts+0x9e>
        else if (buffer.length > 0)
 8001738:	b152      	cbz	r2, 8001750 <cJSON_ParseWithLengthOpts+0xf0>
            local_error.position = buffer.length - 1;
 800173a:	1e53      	subs	r3, r2, #1
 800173c:	e7df      	b.n	80016fe <cJSON_ParseWithLengthOpts+0x9e>
    return buffer;
 800173e:	a801      	add	r0, sp, #4
 8001740:	e7c8      	b.n	80016d4 <cJSON_ParseWithLengthOpts+0x74>
        return NULL;
 8001742:	4648      	mov	r0, r9
 8001744:	e7c6      	b.n	80016d4 <cJSON_ParseWithLengthOpts+0x74>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001746:	9a01      	ldr	r2, [sp, #4]
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0cc      	beq.n	80016e8 <cJSON_ParseWithLengthOpts+0x88>
 800174e:	e7ec      	b.n	800172a <cJSON_ParseWithLengthOpts+0xca>
        local_error.position = 0;
 8001750:	4613      	mov	r3, r2
 8001752:	e7d4      	b.n	80016fe <cJSON_ParseWithLengthOpts+0x9e>
 8001754:	2400022c 	.word	0x2400022c
 8001758:	24000000 	.word	0x24000000

0800175c <cJSON_Parse>:
    if (NULL == value)
 800175c:	b160      	cbz	r0, 8001778 <cJSON_Parse+0x1c>
{
 800175e:	b510      	push	{r4, lr}
 8001760:	4604      	mov	r4, r0
    buffer_length = strlen(value) + sizeof("");
 8001762:	f7fe fdc7 	bl	80002f4 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001766:	2300      	movs	r3, #0
    buffer_length = strlen(value) + sizeof("");
 8001768:	4601      	mov	r1, r0
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800176a:	4620      	mov	r0, r4
 800176c:	3101      	adds	r1, #1
 800176e:	461a      	mov	r2, r3
}
 8001770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001774:	f7ff bf74 	b.w	8001660 <cJSON_ParseWithLengthOpts>
}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
 800177c:	2101      	movs	r1, #1
 800177e:	f7ff bcd5 	b.w	800112c <print.constprop.0>
 8001782:	bf00      	nop

08001784 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
 8001784:	2201      	movs	r2, #1
 8001786:	f7ff b997 	b.w	8000ab8 <get_object_item>
 800178a:	bf00      	nop

0800178c <cJSON_AddItemToArray>:
    if ((item == NULL) || (array == NULL) || (array == item))
 800178c:	4288      	cmp	r0, r1
 800178e:	bf18      	it	ne
 8001790:	2800      	cmpne	r0, #0
 8001792:	d009      	beq.n	80017a8 <cJSON_AddItemToArray+0x1c>
 8001794:	b141      	cbz	r1, 80017a8 <cJSON_AddItemToArray+0x1c>
    child = array->child;
 8001796:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
 8001798:	b143      	cbz	r3, 80017ac <cJSON_AddItemToArray+0x20>
        if (child->prev)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	b15a      	cbz	r2, 80017b6 <cJSON_AddItemToArray+0x2a>
    prev->next = item;
 800179e:	6011      	str	r1, [r2, #0]
            array->child->prev = item;
 80017a0:	2001      	movs	r0, #1
    item->prev = prev;
 80017a2:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
 80017a4:	6059      	str	r1, [r3, #4]
 80017a6:	4770      	bx	lr
        return false;
 80017a8:	2000      	movs	r0, #0
 80017aa:	4770      	bx	lr
        array->child = item;
 80017ac:	6081      	str	r1, [r0, #8]
        item->prev = item;
 80017ae:	2001      	movs	r0, #1
        item->next = NULL;
 80017b0:	e9c1 3100 	strd	r3, r1, [r1]
 80017b4:	4770      	bx	lr
 80017b6:	2001      	movs	r0, #1
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
    return add_item_to_object(object, string, item, &global_hooks, false);
 80017bc:	2300      	movs	r3, #0
 80017be:	f7ff bd0b 	b.w	80011d8 <add_item_to_object.constprop.0>
 80017c2:	bf00      	nop
 80017c4:	0000      	movs	r0, r0
	...

080017c8 <cJSON_CreateNumber>:
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <cJSON_CreateNumber+0x80>)
 80017ca:	2028      	movs	r0, #40	; 0x28

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80017cc:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80017ce:	681b      	ldr	r3, [r3, #0]
{
 80017d0:	ed2d 8b02 	vpush	{d8}
 80017d4:	eeb0 8b40 	vmov.f64	d8, d0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80017d8:	4798      	blx	r3
    if (node)
 80017da:	4604      	mov	r4, r0
 80017dc:	b188      	cbz	r0, 8001802 <cJSON_CreateNumber+0x3a>
        memset(node, '\0', sizeof(cJSON));
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	f010 ff52 	bl	801268a <memset>
    cJSON *item = cJSON_New_Item(&global_hooks);
    if(item)
    {
        item->type = cJSON_Number;
 80017e6:	2308      	movs	r3, #8
        item->valuedouble = num;

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80017e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001838 <cJSON_CreateNumber+0x70>
        item->valuedouble = num;
 80017ec:	ed84 8b06 	vstr	d8, [r4, #24]
        item->type = cJSON_Number;
 80017f0:	60e3      	str	r3, [r4, #12]
        if (num >= INT_MAX)
 80017f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	db06      	blt.n	800180a <cJSON_CreateNumber+0x42>
        {
            item->valueint = INT_MAX;
 80017fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001800:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
 8001802:	4620      	mov	r0, r4
 8001804:	ecbd 8b02 	vpop	{d8}
 8001808:	bd10      	pop	{r4, pc}
        else if (num <= (double)INT_MIN)
 800180a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001840 <cJSON_CreateNumber+0x78>
 800180e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d806      	bhi.n	8001826 <cJSON_CreateNumber+0x5e>
            item->valueint = INT_MIN;
 8001818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800181c:	4620      	mov	r0, r4
 800181e:	ecbd 8b02 	vpop	{d8}
            item->valueint = INT_MIN;
 8001822:	6163      	str	r3, [r4, #20]
}
 8001824:	bd10      	pop	{r4, pc}
            item->valueint = (int)num;
 8001826:	eebd 8bc8 	vcvt.s32.f64	s16, d8
}
 800182a:	4620      	mov	r0, r4
            item->valueint = (int)num;
 800182c:	ed84 8a05 	vstr	s16, [r4, #20]
}
 8001830:	ecbd 8b02 	vpop	{d8}
 8001834:	bd10      	pop	{r4, pc}
 8001836:	bf00      	nop
 8001838:	ffc00000 	.word	0xffc00000
 800183c:	41dfffff 	.word	0x41dfffff
 8001840:	00000000 	.word	0x00000000
 8001844:	c1e00000 	.word	0xc1e00000
 8001848:	24000000 	.word	0x24000000

0800184c <cJSON_CreateArray>:
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <cJSON_CreateArray+0x20>)
 800184e:	2028      	movs	r0, #40	; 0x28

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8001850:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4798      	blx	r3
    if (node)
 8001856:	4604      	mov	r4, r0
 8001858:	b128      	cbz	r0, 8001866 <cJSON_CreateArray+0x1a>
        memset(node, '\0', sizeof(cJSON));
 800185a:	2228      	movs	r2, #40	; 0x28
 800185c:	2100      	movs	r1, #0
 800185e:	f010 ff14 	bl	801268a <memset>
    cJSON *item = cJSON_New_Item(&global_hooks);
    if(item)
    {
        item->type=cJSON_Array;
 8001862:	2320      	movs	r3, #32
 8001864:	60e3      	str	r3, [r4, #12]
    }

    return item;
}
 8001866:	4620      	mov	r0, r4
 8001868:	bd10      	pop	{r4, pc}
 800186a:	bf00      	nop
 800186c:	24000000 	.word	0x24000000

08001870 <cJSON_CreateObject>:
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <cJSON_CreateObject+0x20>)
 8001872:	2028      	movs	r0, #40	; 0x28

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001874:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4798      	blx	r3
    if (node)
 800187a:	4604      	mov	r4, r0
 800187c:	b128      	cbz	r0, 800188a <cJSON_CreateObject+0x1a>
        memset(node, '\0', sizeof(cJSON));
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	f010 ff02 	bl	801268a <memset>
    cJSON *item = cJSON_New_Item(&global_hooks);
    if (item)
    {
        item->type = cJSON_Object;
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	60e3      	str	r3, [r4, #12]
    }

    return item;
}
 800188a:	4620      	mov	r0, r4
 800188c:	bd10      	pop	{r4, pc}
 800188e:	bf00      	nop
 8001890:	24000000 	.word	0x24000000

08001894 <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
 8001894:	b128      	cbz	r0, 80018a2 <cJSON_IsNumber+0xe>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
 8001896:	7b00      	ldrb	r0, [r0, #12]
 8001898:	f1a0 0008 	sub.w	r0, r0, #8
 800189c:	fab0 f080 	clz	r0, r0
 80018a0:	0940      	lsrs	r0, r0, #5
}
 80018a2:	4770      	bx	lr

080018a4 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
    * Useful for debugging issues.
    */
   __BKPT(0);
 80018a4:	be00      	bkpt	0x0000
}
 80018a6:	4770      	bx	lr

080018a8 <StartDefaultTask>:
////  }
////  /* USER CODE END 5 */
//}

void StartDefaultTask(void * argument)
{
 80018a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ac:	ed2d 8b0a 	vpush	{d8-d12}
  /* init code for LWIP */
  MX_LWIP_Init();
 80018b0:	f002 feb2 	bl	8004618 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 80018b4:	4a30      	ldr	r2, [pc, #192]	; (8001978 <StartDefaultTask+0xd0>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	4830      	ldr	r0, [pc, #192]	; (800197c <StartDefaultTask+0xd4>)
 80018ba:	f003 fae5 	bl	8004e88 <osThreadNew>
 80018be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001994 <StartDefaultTask+0xec>
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <StartDefaultTask+0xd8>)
 80018c4:	4c2f      	ldr	r4, [pc, #188]	; (8001984 <StartDefaultTask+0xdc>)
 80018c6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001998 <StartDefaultTask+0xf0>
 80018ca:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800199c <StartDefaultTask+0xf4>
 80018ce:	4e2e      	ldr	r6, [pc, #184]	; (8001988 <StartDefaultTask+0xe0>)
 80018d0:	4d2e      	ldr	r5, [pc, #184]	; (800198c <StartDefaultTask+0xe4>)
		  push(&dataA, sinValue);
		  push(&dataB, cosValue);
	  }

	  testValue += 0.1;
      osDelay(osKernelGetTickFreq() / 10);
 80018d2:	4f2f      	ldr	r7, [pc, #188]	; (8001990 <StartDefaultTask+0xe8>)
  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 80018d4:	6018      	str	r0, [r3, #0]
	  double sinValue = amplitudeA*sin(M_PI * testValue);
 80018d6:	ed9f ab24 	vldr	d10, [pc, #144]	; 8001968 <StartDefaultTask+0xc0>
	  testValue += 0.1;
 80018da:	ed9f 9b25 	vldr	d9, [pc, #148]	; 8001970 <StartDefaultTask+0xc8>
	  if (isFetching == 1) {
 80018de:	f8d8 3000 	ldr.w	r3, [r8]
	  double sinValue = amplitudeA*sin(M_PI * testValue);
 80018e2:	edda ba00 	vldr	s23, [sl]
	  if (isFetching == 1) {
 80018e6:	2b01      	cmp	r3, #1
	  double cosValue = amplitudeB*cos(M_PI * testValue);
 80018e8:	ed99 ba00 	vldr	s22, [r9]
	  double sinValue = amplitudeA*sin(M_PI * testValue);
 80018ec:	ed94 8b00 	vldr	d8, [r4]
	  if (isFetching == 1) {
 80018f0:	d12b      	bne.n	800194a <StartDefaultTask+0xa2>
	if (data->position < ARRAY_SIZE) {
 80018f2:	f8d6 b320 	ldr.w	fp, [r6, #800]	; 0x320
	  double sinValue = amplitudeA*sin(M_PI * testValue);
 80018f6:	ee28 cb0a 	vmul.f64	d12, d8, d10
	if (data->position < ARRAY_SIZE) {
 80018fa:	f1bb 0f63 	cmp.w	fp, #99	; 0x63
 80018fe:	dc0f      	bgt.n	8001920 <StartDefaultTask+0x78>
	  double sinValue = amplitudeA*sin(M_PI * testValue);
 8001900:	eeb0 0b4c 	vmov.f64	d0, d12
 8001904:	f00e ffb8 	bl	8010878 <sin>
 8001908:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
		data->array[data->position] = value;
 800190c:	eb06 02cb 	add.w	r2, r6, fp, lsl #3
		data->position++;
 8001910:	f10b 0301 	add.w	r3, fp, #1
	  double sinValue = amplitudeA*sin(M_PI * testValue);
 8001914:	ee27 0b00 	vmul.f64	d0, d7, d0
		data->position++;
 8001918:	f8c6 3320 	str.w	r3, [r6, #800]	; 0x320
		data->array[data->position] = value;
 800191c:	ed82 0b00 	vstr	d0, [r2]
	if (data->position < ARRAY_SIZE) {
 8001920:	f8d5 b320 	ldr.w	fp, [r5, #800]	; 0x320
	  double cosValue = amplitudeB*cos(M_PI * testValue);
 8001924:	eeb0 0b4c 	vmov.f64	d0, d12
	if (data->position < ARRAY_SIZE) {
 8001928:	f1bb 0f63 	cmp.w	fp, #99	; 0x63
 800192c:	dc0d      	bgt.n	800194a <StartDefaultTask+0xa2>
	  double cosValue = amplitudeB*cos(M_PI * testValue);
 800192e:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8001932:	f00e ff55 	bl	80107e0 <cos>
		data->array[data->position] = value;
 8001936:	eb05 02cb 	add.w	r2, r5, fp, lsl #3
		data->position++;
 800193a:	f10b 0301 	add.w	r3, fp, #1
	  double cosValue = amplitudeB*cos(M_PI * testValue);
 800193e:	ee2b 0b00 	vmul.f64	d0, d11, d0
		data->position++;
 8001942:	f8c5 3320 	str.w	r3, [r5, #800]	; 0x320
		data->array[data->position] = value;
 8001946:	ed82 0b00 	vstr	d0, [r2]
	  testValue += 0.1;
 800194a:	ee38 8b09 	vadd.f64	d8, d8, d9
 800194e:	ed84 8b00 	vstr	d8, [r4]
      osDelay(osKernelGetTickFreq() / 10);
 8001952:	f003 fa95 	bl	8004e80 <osKernelGetTickFreq>
 8001956:	fba7 3000 	umull	r3, r0, r7, r0
 800195a:	08c0      	lsrs	r0, r0, #3
 800195c:	f003 fae2 	bl	8004f24 <osDelay>
  {
 8001960:	e7bd      	b.n	80018de <StartDefaultTask+0x36>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	54442d18 	.word	0x54442d18
 800196c:	400921fb 	.word	0x400921fb
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fb99999 	.word	0x3fb99999
 8001978:	08014f78 	.word	0x08014f78
 800197c:	080019a1 	.word	0x080019a1
 8001980:	2400088c 	.word	0x2400088c
 8001984:	24000898 	.word	0x24000898
 8001988:	24000238 	.word	0x24000238
 800198c:	24000560 	.word	0x24000560
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	2400000c 	.word	0x2400000c
 8001998:	24000010 	.word	0x24000010
 800199c:	24000890 	.word	0x24000890

080019a0 <StartEchoTask>:
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_TCP);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2010      	movs	r0, #16
{
 80019a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  conn = netconn_new(NETCONN_TCP);
 80019a8:	4611      	mov	r1, r2
{
 80019aa:	ed2d 8b04 	vpush	{d8-d9}
 80019ae:	b087      	sub	sp, #28
  conn = netconn_new(NETCONN_TCP);
 80019b0:	f005 ff72 	bl	8007898 <netconn_new_with_proto_and_callback>

  if (conn != NULL) {
 80019b4:	2800      	cmp	r0, #0
 80019b6:	f000 80da 	beq.w	8001b6e <StartEchoTask+0x1ce>
    err = netconn_bind(conn, NULL, LWIPERF_TCP_PORT_DEFAULT);
 80019ba:	f241 3289 	movw	r2, #5001	; 0x1389
 80019be:	2100      	movs	r1, #0
 80019c0:	4604      	mov	r4, r0
 80019c2:	ee09 0a10 	vmov	s18, r0
 80019c6:	f005 ffeb 	bl	80079a0 <netconn_bind>

    if (err == ERR_OK) {
 80019ca:	2800      	cmp	r0, #0
 80019cc:	f040 80cc 	bne.w	8001b68 <StartEchoTask+0x1c8>
      netconn_listen(conn);
 80019d0:	21ff      	movs	r1, #255	; 0xff
 80019d2:	4620      	mov	r0, r4
 80019d4:	4f6a      	ldr	r7, [pc, #424]	; (8001b80 <StartEchoTask+0x1e0>)
 80019d6:	4e6b      	ldr	r6, [pc, #428]	; (8001b84 <StartEchoTask+0x1e4>)
          while (netconn_recv(newconn, &buf) == ERR_OK) {
            do {
              netbuf_data(buf, &data, &len);
              cJSON *jsonReceived = cJSON_Parse(data);
              if (jsonReceived != NULL) {
			  cJSON *isFetchingItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "isFetching");
 80019d8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8001ba0 <StartEchoTask+0x200>
				if (cJSON_IsNumber(isFetchingItem)) {
				  isFetching = isFetchingItem->valueint;
				}

              cJSON *amplitudeAItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "amplitudeA");
 80019dc:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8001ba4 <StartEchoTask+0x204>
              }

              cJSON *jsonObject = cJSON_CreateObject();
              cJSON *jsonArrayA = cJSON_CreateArray();
              for (int i = 0; i < dataA.position; i++) {
                     cJSON_AddItemToArray(jsonArrayA, cJSON_CreateNumber((long long int)(dataA.array[i]*1000)));
 80019e0:	ed9f 8b65 	vldr	d8, [pc, #404]	; 8001b78 <StartEchoTask+0x1d8>
      netconn_listen(conn);
 80019e4:	f006 f808 	bl	80079f8 <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 80019e8:	a903      	add	r1, sp, #12
 80019ea:	ee19 0a10 	vmov	r0, s18
 80019ee:	f006 f827 	bl	8007a40 <netconn_accept>
        if (accept_err == ERR_OK) {
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d1f8      	bne.n	80019e8 <StartEchoTask+0x48>
          while (netconn_recv(newconn, &buf) == ERR_OK) {
 80019f6:	a904      	add	r1, sp, #16
 80019f8:	9803      	ldr	r0, [sp, #12]
 80019fa:	f006 f889 	bl	8007b10 <netconn_recv>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	f040 80ab 	bne.w	8001b5a <StartEchoTask+0x1ba>
              netbuf_data(buf, &data, &len);
 8001a04:	f10d 020a 	add.w	r2, sp, #10
 8001a08:	a905      	add	r1, sp, #20
 8001a0a:	9804      	ldr	r0, [sp, #16]
 8001a0c:	f007 fa84 	bl	8008f18 <netbuf_data>
              cJSON *jsonReceived = cJSON_Parse(data);
 8001a10:	9805      	ldr	r0, [sp, #20]
 8001a12:	f7ff fea3 	bl	800175c <cJSON_Parse>
              if (jsonReceived != NULL) {
 8001a16:	4604      	mov	r4, r0
 8001a18:	b350      	cbz	r0, 8001a70 <StartEchoTask+0xd0>
			  cJSON *isFetchingItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "isFetching");
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	f7ff feb2 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8001a20:	4605      	mov	r5, r0
				if (cJSON_IsNumber(isFetchingItem)) {
 8001a22:	f7ff ff37 	bl	8001894 <cJSON_IsNumber>
 8001a26:	b110      	cbz	r0, 8001a2e <StartEchoTask+0x8e>
				  isFetching = isFetchingItem->valueint;
 8001a28:	696b      	ldr	r3, [r5, #20]
 8001a2a:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <StartEchoTask+0x1e8>)
 8001a2c:	6013      	str	r3, [r2, #0]
              cJSON *amplitudeAItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "amplitudeA");
 8001a2e:	4651      	mov	r1, sl
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fea7 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8001a36:	4605      	mov	r5, r0
              if (cJSON_IsNumber(amplitudeAItem)) {
 8001a38:	f7ff ff2c 	bl	8001894 <cJSON_IsNumber>
 8001a3c:	b130      	cbz	r0, 8001a4c <StartEchoTask+0xac>
            	  amplitudeA = amplitudeAItem->valuedouble;
 8001a3e:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <StartEchoTask+0x1ec>)
 8001a40:	ed95 7b06 	vldr	d7, [r5, #24]
 8001a44:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001a48:	ed83 7a00 	vstr	s14, [r3]
              cJSON *amplitudeBItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "amplitudeB");
 8001a4c:	4950      	ldr	r1, [pc, #320]	; (8001b90 <StartEchoTask+0x1f0>)
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff fe98 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8001a54:	4605      	mov	r5, r0
				if (cJSON_IsNumber(amplitudeBItem)) {
 8001a56:	f7ff ff1d 	bl	8001894 <cJSON_IsNumber>
 8001a5a:	b130      	cbz	r0, 8001a6a <StartEchoTask+0xca>
				amplitudeB = amplitudeBItem->valuedouble;
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <StartEchoTask+0x1f4>)
 8001a5e:	ed95 7b06 	vldr	d7, [r5, #24]
 8001a62:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8001a66:	ed83 7a00 	vstr	s14, [r3]
              cJSON_Delete(jsonReceived);
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff fbfa 	bl	8001264 <cJSON_Delete>
              cJSON *jsonObject = cJSON_CreateObject();
 8001a70:	f7ff fefe 	bl	8001870 <cJSON_CreateObject>
 8001a74:	4680      	mov	r8, r0
              cJSON *jsonArrayA = cJSON_CreateArray();
 8001a76:	f7ff fee9 	bl	800184c <cJSON_CreateArray>
              for (int i = 0; i < dataA.position; i++) {
 8001a7a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
              cJSON *jsonArrayA = cJSON_CreateArray();
 8001a7e:	4681      	mov	r9, r0
              for (int i = 0; i < dataA.position; i++) {
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	dd18      	ble.n	8001ab6 <StartEchoTask+0x116>
 8001a84:	4d3e      	ldr	r5, [pc, #248]	; (8001b80 <StartEchoTask+0x1e0>)
 8001a86:	2400      	movs	r4, #0
 8001a88:	3401      	adds	r4, #1
                     cJSON_AddItemToArray(jsonArrayA, cJSON_CreateNumber((long long int)(dataA.array[i]*1000)));
 8001a8a:	ecb5 7b02 	vldmia	r5!, {d7}
 8001a8e:	ee27 7b08 	vmul.f64	d7, d7, d8
 8001a92:	ec51 0b17 	vmov	r0, r1, d7
 8001a96:	f7fe fe47 	bl	8000728 <__aeabi_d2lz>
 8001a9a:	f7fe fe17 	bl	80006cc <__aeabi_l2d>
 8001a9e:	ec41 0b10 	vmov	d0, r0, r1
 8001aa2:	f7ff fe91 	bl	80017c8 <cJSON_CreateNumber>
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	4648      	mov	r0, r9
 8001aaa:	f7ff fe6f 	bl	800178c <cJSON_AddItemToArray>
              for (int i = 0; i < dataA.position; i++) {
 8001aae:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001ab2:	42a3      	cmp	r3, r4
 8001ab4:	dce8      	bgt.n	8001a88 <StartEchoTask+0xe8>
	data->position = 0;
 8001ab6:	2400      	movs	r4, #0
              }
              cJSON_AddItemToObject(jsonObject, "dataA", jsonArrayA);
 8001ab8:	464a      	mov	r2, r9
 8001aba:	4937      	ldr	r1, [pc, #220]	; (8001b98 <StartEchoTask+0x1f8>)
 8001abc:	4640      	mov	r0, r8
 8001abe:	f7ff fe7d 	bl	80017bc <cJSON_AddItemToObject>
	data->position = 0;
 8001ac2:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
              clear(&dataA);

              cJSON *jsonArrayB = cJSON_CreateArray();
 8001ac6:	f7ff fec1 	bl	800184c <cJSON_CreateArray>
              for (int i = 0; i < dataB.position; i++) {
 8001aca:	f8d6 3320 	ldr.w	r3, [r6, #800]	; 0x320
              cJSON *jsonArrayB = cJSON_CreateArray();
 8001ace:	4681      	mov	r9, r0
              for (int i = 0; i < dataB.position; i++) {
 8001ad0:	42a3      	cmp	r3, r4
 8001ad2:	dd17      	ble.n	8001b04 <StartEchoTask+0x164>
 8001ad4:	4d2b      	ldr	r5, [pc, #172]	; (8001b84 <StartEchoTask+0x1e4>)
 8001ad6:	3401      	adds	r4, #1
                      cJSON_AddItemToArray(jsonArrayB, cJSON_CreateNumber((long long int)(dataB.array[i]*1000)));
 8001ad8:	ecb5 7b02 	vldmia	r5!, {d7}
 8001adc:	ee27 7b08 	vmul.f64	d7, d7, d8
 8001ae0:	ec51 0b17 	vmov	r0, r1, d7
 8001ae4:	f7fe fe20 	bl	8000728 <__aeabi_d2lz>
 8001ae8:	f7fe fdf0 	bl	80006cc <__aeabi_l2d>
 8001aec:	ec41 0b10 	vmov	d0, r0, r1
 8001af0:	f7ff fe6a 	bl	80017c8 <cJSON_CreateNumber>
 8001af4:	4601      	mov	r1, r0
 8001af6:	4648      	mov	r0, r9
 8001af8:	f7ff fe48 	bl	800178c <cJSON_AddItemToArray>
              for (int i = 0; i < dataB.position; i++) {
 8001afc:	f8d6 3320 	ldr.w	r3, [r6, #800]	; 0x320
 8001b00:	42a3      	cmp	r3, r4
 8001b02:	dce8      	bgt.n	8001ad6 <StartEchoTask+0x136>
              }
              cJSON_AddItemToObject(jsonObject, "dataB", jsonArrayB);
 8001b04:	464a      	mov	r2, r9
 8001b06:	4925      	ldr	r1, [pc, #148]	; (8001b9c <StartEchoTask+0x1fc>)
	data->position = 0;
 8001b08:	2500      	movs	r5, #0
              cJSON_AddItemToObject(jsonObject, "dataB", jsonArrayB);
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	f7ff fe56 	bl	80017bc <cJSON_AddItemToObject>
              clear(&dataB);

              char *jsonStringifiedSend = cJSON_Print(jsonObject);
 8001b10:	4640      	mov	r0, r8
	data->position = 0;
 8001b12:	f8c6 5320 	str.w	r5, [r6, #800]	; 0x320
              char *jsonStringifiedSend = cJSON_Print(jsonObject);
 8001b16:	f7ff fe31 	bl	800177c <cJSON_Print>
 8001b1a:	4604      	mov	r4, r0
              netconn_write(newconn, jsonStringifiedSend, strlen(jsonStringifiedSend), NETCONN_COPY);
 8001b1c:	f7fe fbea 	bl	80002f4 <strlen>
 8001b20:	2301      	movs	r3, #1
 8001b22:	4602      	mov	r2, r0
 8001b24:	4621      	mov	r1, r4
 8001b26:	9803      	ldr	r0, [sp, #12]
 8001b28:	9500      	str	r5, [sp, #0]
 8001b2a:	f006 f8d1 	bl	8007cd0 <netconn_write_partly>
              cJSON_Delete(jsonObject);
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f7ff fb98 	bl	8001264 <cJSON_Delete>
			  free(jsonStringifiedSend);
 8001b34:	4620      	mov	r0, r4
 8001b36:	f00f fc93 	bl	8011460 <free>
            }
            while (netbuf_next(buf) >= 0);
 8001b3a:	9804      	ldr	r0, [sp, #16]
 8001b3c:	f007 fa22 	bl	8008f84 <netbuf_next>
 8001b40:	42a8      	cmp	r0, r5
 8001b42:	f6bf af5f 	bge.w	8001a04 <StartEchoTask+0x64>
            netbuf_delete(buf);
 8001b46:	9804      	ldr	r0, [sp, #16]
 8001b48:	f007 f9d4 	bl	8008ef4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) {
 8001b4c:	a904      	add	r1, sp, #16
 8001b4e:	9803      	ldr	r0, [sp, #12]
 8001b50:	f005 ffde 	bl	8007b10 <netconn_recv>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	f43f af55 	beq.w	8001a04 <StartEchoTask+0x64>
          }

          netconn_close(newconn);
 8001b5a:	9803      	ldr	r0, [sp, #12]
 8001b5c:	f006 f8c6 	bl	8007cec <netconn_close>
          netconn_delete(newconn);
 8001b60:	9803      	ldr	r0, [sp, #12]
 8001b62:	f005 fef9 	bl	8007958 <netconn_delete>
 8001b66:	e73f      	b.n	80019e8 <StartEchoTask+0x48>
        }
      }
    }
    else {
      netconn_delete(newconn);
 8001b68:	9803      	ldr	r0, [sp, #12]
 8001b6a:	f005 fef5 	bl	8007958 <netconn_delete>
    }
  }
}
 8001b6e:	b007      	add	sp, #28
 8001b70:	ecbd 8b04 	vpop	{d8-d9}
 8001b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	408f4000 	.word	0x408f4000
 8001b80:	24000238 	.word	0x24000238
 8001b84:	24000560 	.word	0x24000560
 8001b88:	24000890 	.word	0x24000890
 8001b8c:	2400000c 	.word	0x2400000c
 8001b90:	08014f20 	.word	0x08014f20
 8001b94:	24000010 	.word	0x24000010
 8001b98:	08014f2c 	.word	0x08014f2c
 8001b9c:	08014f34 	.word	0x08014f34
 8001ba0:	08014f08 	.word	0x08014f08
 8001ba4:	08014f14 	.word	0x08014f14

08001ba8 <SystemClock_Config>:
{
 8001ba8:	b530      	push	{r4, r5, lr}
 8001baa:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bac:	224c      	movs	r2, #76	; 0x4c
 8001bae:	2100      	movs	r1, #0
 8001bb0:	a809      	add	r0, sp, #36	; 0x24
 8001bb2:	f010 fd6a 	bl	801268a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	2100      	movs	r1, #0
 8001bba:	a801      	add	r0, sp, #4
 8001bbc:	f010 fd65 	bl	801268a <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f001 fe01 	bl	80037c8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0); // #CLOCKCHANGE
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <SystemClock_Config+0xb8>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <SystemClock_Config+0xbc>)
 8001bcc:	9100      	str	r1, [sp, #0]
 8001bce:	6991      	ldr	r1, [r2, #24]
 8001bd0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001bd4:	6191      	str	r1, [r2, #24]
 8001bd6:	6991      	ldr	r1, [r2, #24]
 8001bd8:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8001bdc:	9100      	str	r1, [sp, #0]
 8001bde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be0:	f041 0101 	orr.w	r1, r1, #1
 8001be4:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bf0:	6993      	ldr	r3, [r2, #24]
 8001bf2:	0499      	lsls	r1, r3, #18
 8001bf4:	d5fc      	bpl.n	8001bf0 <SystemClock_Config+0x48>
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
   RCC_OscInitStruct.PLL.PLLM = 4;
 8001bf8:	2404      	movs	r4, #4
   RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001bfa:	2200      	movs	r2, #0
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE; // #CLOCKCHANGE
 8001bfc:	2101      	movs	r1, #1
   RCC_OscInitStruct.PLL.PLLP = 2;
 8001bfe:	9316      	str	r3, [sp, #88]	; 0x58
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001c00:	2508      	movs	r5, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c02:	a809      	add	r0, sp, #36	; 0x24
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE; // #CLOCKCHANGE
 8001c04:	9109      	str	r1, [sp, #36]	; 0x24
   RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001c06:	920c      	str	r2, [sp, #48]	; 0x30
   RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001c08:	9210      	str	r2, [sp, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLM = 4;
 8001c0a:	9414      	str	r4, [sp, #80]	; 0x50
   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001c0c:	9519      	str	r5, [sp, #100]	; 0x64
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c12:	e9cd 4317 	strd	r4, r3, [sp, #92]	; 0x5c
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c1a:	930a      	str	r3, [sp, #40]	; 0x28
   RCC_OscInitStruct.PLL.PLLN = 480;
 8001c1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c20:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
   RCC_OscInitStruct.PLL.PLLN = 480;
 8001c24:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c26:	f001 fe77 	bl	8003918 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b108      	cbz	r0, 8001c32 <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c32:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c36:	2340      	movs	r3, #64	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) // FLASH_LATENCY_2 // #CLOCKCHANGE
 8001c38:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3a:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3c:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c3e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) // FLASH_LATENCY_2 // #CLOCKCHANGE
 8001c40:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c42:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c44:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c46:	e9cd 5304 	strd	r5, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) // FLASH_LATENCY_2 // #CLOCKCHANGE
 8001c50:	f002 f958 	bl	8003f04 <HAL_RCC_ClockConfig>
 8001c54:	b108      	cbz	r0, 8001c5a <SystemClock_Config+0xb2>
 8001c56:	b672      	cpsid	i
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <SystemClock_Config+0xb0>
}
 8001c5a:	b01d      	add	sp, #116	; 0x74
 8001c5c:	bd30      	pop	{r4, r5, pc}
 8001c5e:	bf00      	nop
 8001c60:	58024800 	.word	0x58024800
 8001c64:	58000400 	.word	0x58000400

08001c68 <main>:
{
 8001c68:	b500      	push	{lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c6a:	2400      	movs	r4, #0
{
 8001c6c:	b08d      	sub	sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c6e:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c70:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001c74:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 8001c78:	f000 fc5a 	bl	8002530 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c7c:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c80:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c84:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c86:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c8a:	930a      	str	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c8c:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c90:	f000 fc6c 	bl	800256c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001c94:	4a93      	ldr	r2, [pc, #588]	; (8001ee4 <main+0x27c>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001c96:	4b94      	ldr	r3, [pc, #592]	; (8001ee8 <main+0x280>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c98:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001c9a:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001c9c:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001c9e:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001ca2:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ca6:	f000 fc61 	bl	800256c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001caa:	4b90      	ldr	r3, [pc, #576]	; (8001eec <main+0x284>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001cac:	2202      	movs	r2, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cae:	a807      	add	r0, sp, #28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cb0:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001cb4:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001cb6:	2308      	movs	r3, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001cb8:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001cbc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cc0:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001cc4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cc8:	f000 fc50 	bl	800256c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ccc:	2004      	movs	r0, #4
 8001cce:	f000 fc3d 	bl	800254c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001cd2:	4a87      	ldr	r2, [pc, #540]	; (8001ef0 <main+0x288>)
 8001cd4:	6953      	ldr	r3, [r2, #20]
 8001cd6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8001cda:	d111      	bne.n	8001d00 <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ce0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf0:	6953      	ldr	r3, [r2, #20]
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cfc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001d00:	487b      	ldr	r0, [pc, #492]	; (8001ef0 <main+0x288>)
 8001d02:	6943      	ldr	r3, [r0, #20]
 8001d04:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8001d08:	d126      	bne.n	8001d58 <main+0xf0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001d0a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d12:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d16:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d1a:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d1e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8001d22:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d26:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d2a:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d2c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001d30:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d32:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	d1f8      	bne.n	8001d2c <main+0xc4>
    } while(sets-- != 0U);
 8001d3a:	f1ac 0c20 	sub.w	ip, ip, #32
 8001d3e:	f11c 0f20 	cmn.w	ip, #32
 8001d42:	d1f0      	bne.n	8001d26 <main+0xbe>
 8001d44:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001d48:	6943      	ldr	r3, [r0, #20]
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4e:	6143      	str	r3, [r0, #20]
 8001d50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d54:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	2400      	movs	r4, #0
  HAL_Init();
 8001d5a:	f000 fb39 	bl	80023d0 <HAL_Init>
  SystemClock_Config();
 8001d5e:	f7ff ff23 	bl	8001ba8 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <main+0x28c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001d66:	f244 0101 	movw	r1, #16385	; 0x4001
 8001d6a:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001d74:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001d7c:	f040 0004 	orr.w	r0, r0, #4
 8001d80:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001d84:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001d88:	f000 0004 	and.w	r0, r0, #4
 8001d8c:	9000      	str	r0, [sp, #0]
 8001d8e:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d90:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001d94:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001d98:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001d9c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001da0:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8001da4:	9001      	str	r0, [sp, #4]
 8001da6:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001dac:	f040 0001 	orr.w	r0, r0, #1
 8001db0:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001db4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001db8:	f000 0001 	and.w	r0, r0, #1
 8001dbc:	9002      	str	r0, [sp, #8]
 8001dbe:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001dc4:	f040 0002 	orr.w	r0, r0, #2
 8001dc8:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001dcc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001dd0:	f000 0002 	and.w	r0, r0, #2
 8001dd4:	9003      	str	r0, [sp, #12]
 8001dd6:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001ddc:	f040 0008 	orr.w	r0, r0, #8
 8001de0:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001de4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001de8:	f000 0008 	and.w	r0, r0, #8
 8001dec:	9004      	str	r0, [sp, #16]
 8001dee:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001df4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8001df8:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001dfc:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001e00:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8001e04:	9005      	str	r0, [sp, #20]
 8001e06:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e08:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8001e0c:	f040 0010 	orr.w	r0, r0, #16
 8001e10:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001e18:	4837      	ldr	r0, [pc, #220]	; (8001ef8 <main+0x290>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	9306      	str	r3, [sp, #24]
 8001e20:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001e22:	f001 fccd 	bl	80037c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001e26:	4622      	mov	r2, r4
 8001e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e2c:	4833      	ldr	r0, [pc, #204]	; (8001efc <main+0x294>)
 8001e2e:	f001 fcc7 	bl	80037c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e32:	4622      	mov	r2, r4
 8001e34:	2102      	movs	r1, #2
 8001e36:	4832      	ldr	r0, [pc, #200]	; (8001f00 <main+0x298>)
 8001e38:	f001 fcc2 	bl	80037c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e40:	a907      	add	r1, sp, #28
 8001e42:	4830      	ldr	r0, [pc, #192]	; (8001f04 <main+0x29c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f001 fb87 	bl	800355c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001e4e:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	a907      	add	r1, sp, #28
 8001e54:	4828      	ldr	r0, [pc, #160]	; (8001ef8 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f001 fb7d 	bl	800355c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e62:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e66:	a907      	add	r1, sp, #28
 8001e68:	4824      	ldr	r0, [pc, #144]	; (8001efc <main+0x294>)
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e6a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e6c:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e70:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e76:	f001 fb71 	bl	800355c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	a907      	add	r1, sp, #28
 8001e80:	481e      	ldr	r0, [pc, #120]	; (8001efc <main+0x294>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001e82:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f001 fb67 	bl	800355c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001e8e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001e90:	a907      	add	r1, sp, #28
 8001e92:	481d      	ldr	r0, [pc, #116]	; (8001f08 <main+0x2a0>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001e94:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e9c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f001 fb5d 	bl	800355c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ea2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	a907      	add	r1, sp, #28
 8001ea8:	4818      	ldr	r0, [pc, #96]	; (8001f0c <main+0x2a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001eaa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001eac:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	e9cd 6408 	strd	r6, r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001eb2:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f001 fb51 	bl	800355c <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eba:	a907      	add	r1, sp, #28
 8001ebc:	4810      	ldr	r0, [pc, #64]	; (8001f00 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	e9cd 6507 	strd	r6, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f001 fb49 	bl	800355c <HAL_GPIO_Init>
  osKernelInitialize();
 8001eca:	f002 ffa5 	bl	8004e18 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <main+0x2a8>)
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	4810      	ldr	r0, [pc, #64]	; (8001f14 <main+0x2ac>)
 8001ed4:	f002 ffd8 	bl	8004e88 <osThreadNew>
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <main+0x2b0>)
 8001eda:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001edc:	f002 ffae 	bl	8004e3c <osKernelStart>
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0x278>
 8001ee2:	bf00      	nop
 8001ee4:	30020000 	.word	0x30020000
 8001ee8:	03010010 	.word	0x03010010
 8001eec:	30040000 	.word	0x30040000
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020400 	.word	0x58020400
 8001efc:	58020c00 	.word	0x58020c00
 8001f00:	58021000 	.word	0x58021000
 8001f04:	58020800 	.word	0x58020800
 8001f08:	58021800 	.word	0x58021800
 8001f0c:	58020000 	.word	0x58020000
 8001f10:	08014f54 	.word	0x08014f54
 8001f14:	080018a9 	.word	0x080018a9
 8001f18:	24000888 	.word	0x24000888

08001f1c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001f1e:	6802      	ldr	r2, [r0, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d000      	beq.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001f24:	4770      	bx	lr
    HAL_IncTick();
 8001f26:	f000 ba83 	b.w	8002430 <HAL_IncTick>
 8001f2a:	bf00      	nop
 8001f2c:	40001000 	.word	0x40001000

08001f30 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <Error_Handler+0x2>

08001f34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
{
 8001f3e:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f40:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 8001f44:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	f044 0402 	orr.w	r4, r4, #2
 8001f4a:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 8001f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f5a:	f000 fa9d 	bl	8002498 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5e:	4906      	ldr	r1, [pc, #24]	; (8001f78 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f60:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f66:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f68:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 8001f6a:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8001f6c:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
 8001f78:	e000ed00 	.word	0xe000ed00
 8001f7c:	05fa0000 	.word	0x05fa0000

08001f80 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f80:	280f      	cmp	r0, #15
 8001f82:	d901      	bls.n	8001f88 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001f84:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001f86:	4770      	bx	lr
{
 8001f88:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001f8a:	4601      	mov	r1, r0
{
 8001f8c:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4604      	mov	r4, r0
 8001f92:	2036      	movs	r0, #54	; 0x36
 8001f94:	f000 fa80 	bl	8002498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f98:	2036      	movs	r0, #54	; 0x36
 8001f9a:	f000 fabb 	bl	8002514 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa2:	4669      	mov	r1, sp
 8001fa4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001fa6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001fac:	f042 0210 	orr.w	r2, r2, #16
 8001fb0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc0:	f002 f91a 	bl	80041f8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fc4:	9b07      	ldr	r3, [sp, #28]
 8001fc6:	b9bb      	cbnz	r3, 8001ff8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fc8:	f002 f904 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 8001fce:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 8001fd0:	4c10      	ldr	r4, [pc, #64]	; (8002014 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd2:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 8001fd6:	4d10      	ldr	r5, [pc, #64]	; (8002018 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fd8:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fdc:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fde:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8001fe0:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fe4:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fe6:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fea:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fec:	f002 fada 	bl	80045a4 <HAL_TIM_Base_Init>
 8001ff0:	b130      	cbz	r0, 8002000 <HAL_InitTick+0x80>
    return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
}
 8001ff4:	b00b      	add	sp, #44	; 0x2c
 8001ff6:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ff8:	f002 f8ec 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	0040      	lsls	r0, r0, #1
 8001ffe:	e7e5      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 8002000:	4620      	mov	r0, r4
 8002002:	f002 f927 	bl	8004254 <HAL_TIM_Base_Start_IT>
 8002006:	e7f5      	b.n	8001ff4 <HAL_InitTick+0x74>
 8002008:	58024400 	.word	0x58024400
 800200c:	24000020 	.word	0x24000020
 8002010:	431bde83 	.word	0x431bde83
 8002014:	240008a0 	.word	0x240008a0
 8002018:	40001000 	.word	0x40001000

0800201c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800201c:	e7fe      	b.n	800201c <NMI_Handler>
 800201e:	bf00      	nop

08002020 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <HardFault_Handler>
 8002022:	bf00      	nop

08002024 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <MemManage_Handler>
 8002026:	bf00      	nop

08002028 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <BusFault_Handler>
 800202a:	bf00      	nop

0800202c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler>
 800202e:	bf00      	nop

08002030 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002034:	4801      	ldr	r0, [pc, #4]	; (800203c <TIM6_DAC_IRQHandler+0x8>)
 8002036:	f002 b971 	b.w	800431c <HAL_TIM_IRQHandler>
 800203a:	bf00      	nop
 800203c:	240008a0 	.word	0x240008a0

08002040 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002040:	4801      	ldr	r0, [pc, #4]	; (8002048 <ETH_IRQHandler+0x8>)
 8002042:	f000 bf3d 	b.w	8002ec0 <HAL_ETH_IRQHandler>
 8002046:	bf00      	nop
 8002048:	240009c8 	.word	0x240009c8

0800204c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800204c:	2001      	movs	r0, #1
 800204e:	4770      	bx	lr

08002050 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <_kill+0xc>)
 8002052:	2216      	movs	r2, #22
	return -1;
}
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	4770      	bx	lr
 800205c:	24010fe8 	.word	0x24010fe8

08002060 <_exit>:
	errno = EINVAL;
 8002060:	4b01      	ldr	r3, [pc, #4]	; (8002068 <_exit+0x8>)
 8002062:	2216      	movs	r2, #22
 8002064:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002066:	e7fe      	b.n	8002066 <_exit+0x6>
 8002068:	24010fe8 	.word	0x24010fe8

0800206c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800206c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	1e16      	subs	r6, r2, #0
 8002070:	dd07      	ble.n	8002082 <_read+0x16>
 8002072:	460c      	mov	r4, r1
 8002074:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002076:	f3af 8000 	nop.w
 800207a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	42a5      	cmp	r5, r4
 8002080:	d1f9      	bne.n	8002076 <_read+0xa>
	}

return len;
}
 8002082:	4630      	mov	r0, r6
 8002084:	bd70      	pop	{r4, r5, r6, pc}
 8002086:	bf00      	nop

08002088 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002088:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	1e16      	subs	r6, r2, #0
 800208c:	dd07      	ble.n	800209e <_write+0x16>
 800208e:	460c      	mov	r4, r1
 8002090:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8002092:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002096:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	42a5      	cmp	r5, r4
 800209c:	d1f9      	bne.n	8002092 <_write+0xa>
	}
	return len;
}
 800209e:	4630      	mov	r0, r6
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	bf00      	nop

080020a4 <_close>:

int _close(int file)
{
	return -1;
}
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop

080020ac <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80020b0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80020b2:	604b      	str	r3, [r1, #4]
}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80020b8:	2001      	movs	r0, #1
 80020ba:	4770      	bx	lr

080020bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80020bc:	2000      	movs	r0, #0
 80020be:	4770      	bx	lr

080020c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	490d      	ldr	r1, [pc, #52]	; (80020f8 <_sbrk+0x38>)
{
 80020c2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80020c6:	6808      	ldr	r0, [r1, #0]
{
 80020c8:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ca:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <_sbrk+0x40>)
 80020cc:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80020ce:	b170      	cbz	r0, 80020ee <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d0:	4403      	add	r3, r0
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d803      	bhi.n	80020de <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80020d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 80020da:	600b      	str	r3, [r1, #0]
}
 80020dc:	4770      	bx	lr
    errno = ENOMEM;
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <_sbrk+0x44>)
 80020e0:	220c      	movs	r2, #12
    return (void *)-1;
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 80020ee:	4c06      	ldr	r4, [pc, #24]	; (8002108 <_sbrk+0x48>)
 80020f0:	4620      	mov	r0, r4
 80020f2:	600c      	str	r4, [r1, #0]
 80020f4:	e7ec      	b.n	80020d0 <_sbrk+0x10>
 80020f6:	bf00      	nop
 80020f8:	240008ec 	.word	0x240008ec
 80020fc:	24080000 	.word	0x24080000
 8002100:	00000400 	.word	0x00000400
 8002104:	24010fe8 	.word	0x24010fe8
 8002108:	24010ff0 	.word	0x24010ff0

0800210c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800210c:	4927      	ldr	r1, [pc, #156]	; (80021ac <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002110:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002118:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	2b06      	cmp	r3, #6
 8002126:	d805      	bhi.n	8002134 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f023 030f 	bic.w	r3, r3, #15
 800212e:	f043 0307 	orr.w	r3, r3, #7
 8002132:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002136:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800213a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800213c:	481c      	ldr	r0, [pc, #112]	; (80021b0 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800213e:	f041 0101 	orr.w	r1, r1, #1
 8002142:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002144:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800214c:	6803      	ldr	r3, [r0, #0]
 800214e:	071b      	lsls	r3, r3, #28
 8002150:	d505      	bpl.n	800215e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002152:	6803      	ldr	r3, [r0, #0]
 8002154:	f023 030f 	bic.w	r3, r3, #15
 8002158:	f043 0307 	orr.w	r3, r3, #7
 800215c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <SystemInit+0xa8>)
 8002160:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002162:	4916      	ldr	r1, [pc, #88]	; (80021bc <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8002164:	4c16      	ldr	r4, [pc, #88]	; (80021c0 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8002166:	4817      	ldr	r0, [pc, #92]	; (80021c4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8002168:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800216a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800216c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800216e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8002170:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8002172:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002176:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002178:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800217a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800217c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800217e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002180:	4c11      	ldr	r4, [pc, #68]	; (80021c8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8002182:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002186:	4911      	ldr	r1, [pc, #68]	; (80021cc <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8002188:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800218a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	4019      	ands	r1, r3
 8002190:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002194:	d203      	bcs.n	800219e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <SystemInit+0xc4>)
 8002198:	2201      	movs	r2, #1
 800219a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <SystemInit+0xc8>)
 80021a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	52002000 	.word	0x52002000
 80021b4:	58024400 	.word	0x58024400
 80021b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80021bc:	01010280 	.word	0x01010280
 80021c0:	02020200 	.word	0x02020200
 80021c4:	01ff0000 	.word	0x01ff0000
 80021c8:	5c001000 	.word	0x5c001000
 80021cc:	ffff0000 	.word	0xffff0000
 80021d0:	51008000 	.word	0x51008000
 80021d4:	52004000 	.word	0x52004000

080021d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002210 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021dc:	f7ff ff96 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e8:	e002      	b.n	80021f0 <LoopCopyDataInit>

080021ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ee:	3304      	adds	r3, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f4:	d3f9      	bcc.n	80021ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021f8:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021fc:	e001      	b.n	8002202 <LoopFillZerobss>

080021fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002200:	3204      	adds	r2, #4

08002202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002204:	d3fb      	bcc.n	80021fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002206:	f010 fb0d 	bl	8012824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800220a:	f7ff fd2d 	bl	8001c68 <main>
  bx  lr
 800220e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002210:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002214:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002218:	2400020c 	.word	0x2400020c
  ldr r2, =_sidata
 800221c:	08017e44 	.word	0x08017e44
  ldr r2, =_sbss
 8002220:	24000210 	.word	0x24000210
  ldr r4, =_ebss
 8002224:	24010ff0 	.word	0x24010ff0

08002228 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002228:	e7fe      	b.n	8002228 <ADC3_IRQHandler>
	...

0800222c <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800222c:	b188      	cbz	r0, 8002252 <LAN8742_RegisterBusIO+0x26>
 800222e:	68ca      	ldr	r2, [r1, #12]
 8002230:	b17a      	cbz	r2, 8002252 <LAN8742_RegisterBusIO+0x26>
{
 8002232:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002234:	688c      	ldr	r4, [r1, #8]
 8002236:	b17c      	cbz	r4, 8002258 <LAN8742_RegisterBusIO+0x2c>
 8002238:	690d      	ldr	r5, [r1, #16]
 800223a:	b16d      	cbz	r5, 8002258 <LAN8742_RegisterBusIO+0x2c>
 800223c:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 800223e:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8002240:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8002242:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8002244:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002246:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 8002248:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800224a:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 800224e:	bc30      	pop	{r4, r5}
 8002250:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8002252:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002256:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	e7f7      	b.n	800224e <LAN8742_RegisterBusIO+0x22>
 800225e:	bf00      	nop

08002260 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002260:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002262:	2300      	movs	r3, #0
 {
 8002264:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8002266:	6844      	ldr	r4, [r0, #4]
 {
 8002268:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800226a:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 800226c:	2c00      	cmp	r4, #0
 800226e:	d146      	bne.n	80022fe <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8002270:	6883      	ldr	r3, [r0, #8]
 8002272:	b103      	cbz	r3, 8002276 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002274:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002276:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8002278:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800227a:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800227c:	e007      	b.n	800228e <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	42a3      	cmp	r3, r4
 8002286:	d016      	beq.n	80022b6 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002288:	3401      	adds	r4, #1
 800228a:	2c20      	cmp	r4, #32
 800228c:	d00b      	beq.n	80022a6 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800228e:	4620      	mov	r0, r4
 8002290:	696b      	ldr	r3, [r5, #20]
 8002292:	aa01      	add	r2, sp, #4
 8002294:	2112      	movs	r1, #18
 8002296:	4798      	blx	r3
 8002298:	2800      	cmp	r0, #0
 800229a:	daf0      	bge.n	800227e <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800229c:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 800229e:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022a2:	2c20      	cmp	r4, #32
 80022a4:	d1f3      	bne.n	800228e <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80022a6:	682c      	ldr	r4, [r5, #0]
 80022a8:	2c1f      	cmp	r4, #31
 80022aa:	d937      	bls.n	800231c <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022ac:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 80022b0:	4630      	mov	r0, r6
 80022b2:	b002      	add	sp, #8
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 80022b6:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80022b8:	692b      	ldr	r3, [r5, #16]
 80022ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022be:	4620      	mov	r0, r4
 80022c0:	2100      	movs	r1, #0
 80022c2:	4798      	blx	r3
 80022c4:	2800      	cmp	r0, #0
 80022c6:	db2c      	blt.n	8002322 <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80022c8:	696b      	ldr	r3, [r5, #20]
 80022ca:	aa01      	add	r2, sp, #4
 80022cc:	2100      	movs	r1, #0
 80022ce:	6828      	ldr	r0, [r5, #0]
 80022d0:	4798      	blx	r3
 80022d2:	2800      	cmp	r0, #0
 80022d4:	db2b      	blt.n	800232e <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 80022d6:	69ab      	ldr	r3, [r5, #24]
 80022d8:	4798      	blx	r3
 80022da:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80022dc:	e00c      	b.n	80022f8 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80022de:	69ab      	ldr	r3, [r5, #24]
 80022e0:	4798      	blx	r3
 80022e2:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80022e4:	aa01      	add	r2, sp, #4
 80022e6:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80022e8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80022ec:	d81c      	bhi.n	8002328 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80022ee:	696b      	ldr	r3, [r5, #20]
 80022f0:	6828      	ldr	r0, [r5, #0]
 80022f2:	4798      	blx	r3
 80022f4:	2800      	cmp	r0, #0
 80022f6:	db1a      	blt.n	800232e <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80022f8:	9b01      	ldr	r3, [sp, #4]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	d4ef      	bmi.n	80022de <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 80022fe:	69ab      	ldr	r3, [r5, #24]
 8002300:	4798      	blx	r3
 8002302:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002304:	69ab      	ldr	r3, [r5, #24]
 8002306:	4798      	blx	r3
 8002308:	1b03      	subs	r3, r0, r4
 800230a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800230e:	d9f9      	bls.n	8002304 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	2600      	movs	r6, #0
 8002314:	606b      	str	r3, [r5, #4]
 }
 8002316:	4630      	mov	r0, r6
 8002318:	b002      	add	sp, #8
 800231a:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 800231c:	2e00      	cmp	r6, #0
 800231e:	d1fa      	bne.n	8002316 <LAN8742_Init+0xb6>
 8002320:	e7ca      	b.n	80022b8 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 8002322:	f06f 0603 	mvn.w	r6, #3
 8002326:	e7f6      	b.n	8002316 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002328:	f06f 0601 	mvn.w	r6, #1
   return status;
 800232c:	e7f3      	b.n	8002316 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 800232e:	f06f 0604 	mvn.w	r6, #4
 8002332:	e7f0      	b.n	8002316 <LAN8742_Init+0xb6>

08002334 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002334:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8002336:	2500      	movs	r5, #0
{
 8002338:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800233a:	6943      	ldr	r3, [r0, #20]
{
 800233c:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800233e:	aa01      	add	r2, sp, #4
 8002340:	2101      	movs	r1, #1
 8002342:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8002344:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002346:	4798      	blx	r3
 8002348:	42a8      	cmp	r0, r5
 800234a:	db3d      	blt.n	80023c8 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800234c:	6963      	ldr	r3, [r4, #20]
 800234e:	aa01      	add	r2, sp, #4
 8002350:	2101      	movs	r1, #1
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	4798      	blx	r3
 8002356:	2800      	cmp	r0, #0
 8002358:	db36      	blt.n	80023c8 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800235a:	9b01      	ldr	r3, [sp, #4]
 800235c:	075b      	lsls	r3, r3, #29
 800235e:	d52a      	bpl.n	80023b6 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002360:	6963      	ldr	r3, [r4, #20]
 8002362:	aa01      	add	r2, sp, #4
 8002364:	4629      	mov	r1, r5
 8002366:	6820      	ldr	r0, [r4, #0]
 8002368:	4798      	blx	r3
 800236a:	2800      	cmp	r0, #0
 800236c:	db2c      	blt.n	80023c8 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800236e:	9b01      	ldr	r3, [sp, #4]
 8002370:	04dd      	lsls	r5, r3, #19
 8002372:	d514      	bpl.n	800239e <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002374:	6963      	ldr	r3, [r4, #20]
 8002376:	aa01      	add	r2, sp, #4
 8002378:	211f      	movs	r1, #31
 800237a:	6820      	ldr	r0, [r4, #0]
 800237c:	4798      	blx	r3
 800237e:	2800      	cmp	r0, #0
 8002380:	db22      	blt.n	80023c8 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002382:	9b01      	ldr	r3, [sp, #4]
 8002384:	04da      	lsls	r2, r3, #19
 8002386:	d51d      	bpl.n	80023c4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002388:	f003 031c 	and.w	r3, r3, #28
 800238c:	2b18      	cmp	r3, #24
 800238e:	d017      	beq.n	80023c0 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002390:	2b08      	cmp	r3, #8
 8002392:	d013      	beq.n	80023bc <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002394:	2b14      	cmp	r3, #20
 8002396:	d10b      	bne.n	80023b0 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002398:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 800239a:	b003      	add	sp, #12
 800239c:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800239e:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 80023a2:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 80023a6:	d00b      	beq.n	80023c0 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80023a8:	0498      	lsls	r0, r3, #18
 80023aa:	d407      	bmi.n	80023bc <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80023ac:	05d9      	lsls	r1, r3, #23
 80023ae:	d4f3      	bmi.n	8002398 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023b0:	2005      	movs	r0, #5
}
 80023b2:	b003      	add	sp, #12
 80023b4:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 80023b6:	2001      	movs	r0, #1
}
 80023b8:	b003      	add	sp, #12
 80023ba:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023bc:	2003      	movs	r0, #3
 80023be:	e7f8      	b.n	80023b2 <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023c0:	2002      	movs	r0, #2
 80023c2:	e7f6      	b.n	80023b2 <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80023c4:	2006      	movs	r0, #6
 80023c6:	e7f4      	b.n	80023b2 <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 80023c8:	f06f 0004 	mvn.w	r0, #4
 80023cc:	e7f1      	b.n	80023b2 <LAN8742_GetLinkState+0x7e>
 80023ce:	bf00      	nop

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d2:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023d4:	4c12      	ldr	r4, [pc, #72]	; (8002420 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d6:	f000 f84d 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023da:	f001 fd71 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_Init+0x54>)
 80023e0:	4911      	ldr	r1, [pc, #68]	; (8002428 <HAL_Init+0x58>)
 80023e2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023e4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023e6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ea:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023ee:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023f2:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023f6:	490d      	ldr	r1, [pc, #52]	; (800242c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023fc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fe:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8002402:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002404:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002406:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002408:	f7ff fdba 	bl	8001f80 <HAL_InitTick>
 800240c:	b110      	cbz	r0, 8002414 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800240e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8002410:	4620      	mov	r0, r4
 8002412:	bd10      	pop	{r4, pc}
 8002414:	4604      	mov	r4, r0
  HAL_MspInit();
 8002416:	f7ff fd8d 	bl	8001f34 <HAL_MspInit>
}
 800241a:	4620      	mov	r0, r4
 800241c:	bd10      	pop	{r4, pc}
 800241e:	bf00      	nop
 8002420:	24000018 	.word	0x24000018
 8002424:	58024400 	.word	0x58024400
 8002428:	08014f9c 	.word	0x08014f9c
 800242c:	24000014 	.word	0x24000014

08002430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <HAL_IncTick+0x10>)
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_IncTick+0x14>)
 8002434:	6811      	ldr	r1, [r2, #0]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	440b      	add	r3, r1
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	240008f0 	.word	0x240008f0
 8002444:	2400001c 	.word	0x2400001c

08002448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002448:	4b01      	ldr	r3, [pc, #4]	; (8002450 <HAL_GetTick+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	240008f0 	.word	0x240008f0

08002454 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002454:	4b01      	ldr	r3, [pc, #4]	; (800245c <HAL_GetREVID+0x8>)
 8002456:	6818      	ldr	r0, [r3, #0]
}
 8002458:	0c00      	lsrs	r0, r0, #16
 800245a:	4770      	bx	lr
 800245c:	5c001000 	.word	0x5c001000

08002460 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002460:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8002462:	6853      	ldr	r3, [r2, #4]
 8002464:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002468:	4318      	orrs	r0, r3
 800246a:	6050      	str	r0, [r2, #4]
}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	58000400 	.word	0x58000400

08002474 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4906      	ldr	r1, [pc, #24]	; (8002490 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002484:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800248a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800248c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00
 8002494:	05fa0000 	.word	0x05fa0000

08002498 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_NVIC_SetPriority+0x70>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024aa:	f1be 0f04 	cmp.w	lr, #4
 80024ae:	bf28      	it	cs
 80024b0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b4:	f1bc 0f06 	cmp.w	ip, #6
 80024b8:	d91a      	bls.n	80024f0 <HAL_NVIC_SetPriority+0x58>
 80024ba:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 3cff 	mov.w	ip, #4294967295
 80024c0:	fa0c fc03 	lsl.w	ip, ip, r3
 80024c4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80024cc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ce:	fa0c fc0e 	lsl.w	ip, ip, lr
 80024d2:	ea21 010c 	bic.w	r1, r1, ip
 80024d6:	fa01 f103 	lsl.w	r1, r1, r3
 80024da:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80024de:	db0a      	blt.n	80024f6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	0109      	lsls	r1, r1, #4
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_NVIC_SetPriority+0x74>)
 80024e4:	b2c9      	uxtb	r1, r1
 80024e6:	4403      	add	r3, r0
 80024e8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80024f0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	4613      	mov	r3, r2
 80024f4:	e7e8      	b.n	80024c8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	f000 000f 	and.w	r0, r0, #15
 80024fa:	0109      	lsls	r1, r1, #4
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_NVIC_SetPriority+0x78>)
 80024fe:	b2c9      	uxtb	r1, r1
 8002500:	4403      	add	r3, r0
 8002502:	7619      	strb	r1, [r3, #24]
 8002504:	f85d fb04 	ldr.w	pc, [sp], #4
 8002508:	e000ed00 	.word	0xe000ed00
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ecfc 	.word	0xe000ecfc

08002514 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002514:	2800      	cmp	r0, #0
 8002516:	db07      	blt.n	8002528 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002518:	2301      	movs	r3, #1
 800251a:	f000 011f 	and.w	r1, r0, #31
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_NVIC_EnableIRQ+0x18>)
 8002520:	0940      	lsrs	r0, r0, #5
 8002522:	408b      	lsls	r3, r1
 8002524:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002530:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002536:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8002540:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_MPU_Enable+0x1c>)
 800254e:	f040 0001 	orr.w	r0, r0, #1
 8002552:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002558:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800255e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002562:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800256c:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_MPU_ConfigRegion+0x60>)
 800256e:	7843      	ldrb	r3, [r0, #1]
 8002570:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002574:	7801      	ldrb	r1, [r0, #0]
 8002576:	b321      	cbz	r1, 80025c2 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002578:	6843      	ldr	r3, [r0, #4]
{
 800257a:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 800257c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002580:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002582:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002586:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002588:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800258c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002590:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002594:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002596:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002598:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800259c:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a0:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025a4:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80025ac:	7a01      	ldrb	r1, [r0, #8]
 80025ae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80025b2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80025b6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80025be:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 80025c2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80025c6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025d0:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025d2:	688b      	ldr	r3, [r1, #8]
 80025d4:	680d      	ldr	r5, [r1, #0]
 80025d6:	694c      	ldr	r4, [r1, #20]
 80025d8:	432b      	orrs	r3, r5
 80025da:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025dc:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025e0:	4323      	orrs	r3, r4
 80025e2:	698c      	ldr	r4, [r1, #24]
 80025e4:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025e6:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025ea:	4323      	orrs	r3, r4
 80025ec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025ee:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025f2:	4d52      	ldr	r5, [pc, #328]	; (800273c <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025f4:	4323      	orrs	r3, r4
 80025f6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80025f8:	4323      	orrs	r3, r4
 80025fa:	4c51      	ldr	r4, [pc, #324]	; (8002740 <ETH_SetMACConfig+0x170>)
 80025fc:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025fe:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002600:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002602:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002604:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002608:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800260a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800260e:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002610:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002614:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002616:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 800261a:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800261c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002620:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002622:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002626:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002628:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800262c:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800262e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002632:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002636:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800263a:	7c08      	ldrb	r0, [r1, #16]
 800263c:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002640:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002644:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002646:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002648:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800264c:	7f88      	ldrb	r0, [r1, #30]
 800264e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002652:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002656:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002658:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800265c:	f891 0020 	ldrb.w	r0, [r1, #32]
 8002660:	fab0 f080 	clz	r0, r0
 8002664:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002666:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800266a:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800266c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800266e:	6853      	ldr	r3, [r2, #4]
 8002670:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002672:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002676:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800267a:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800267e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002680:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002684:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002688:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800268c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002690:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8002694:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002698:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800269c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800269e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026a2:	4828      	ldr	r0, [pc, #160]	; (8002744 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026a4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026a6:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 80026a8:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026aa:	4018      	ands	r0, r3
 80026ac:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80026ae:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026b0:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026b4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80026b8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80026bc:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80026be:	402b      	ands	r3, r5
 80026c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026c4:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026c8:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026ca:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 80026ce:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026d2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026d6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026d8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026dc:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026e2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026e6:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026ea:	f020 0003 	bic.w	r0, r0, #3
 80026ee:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026f0:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026f4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026fc:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8002700:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8002704:	432b      	orrs	r3, r5
 8002706:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800270a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800270e:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002712:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002716:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800271a:	4323      	orrs	r3, r4
 800271c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002720:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8002724:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002728:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800272c:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800272e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8002732:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002734:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	c0f88000 	.word	0xc0f88000
 8002740:	00048083 	.word	0x00048083
 8002744:	fffffef0 	.word	0xfffffef0

08002748 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002748:	6803      	ldr	r3, [r0, #0]
 800274a:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <ETH_SetDMAConfig+0x7c>)
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	6808      	ldr	r0, [r1, #0]
{
 8002752:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002754:	681c      	ldr	r4, [r3, #0]
 8002756:	4022      	ands	r2, r4
 8002758:	4302      	orrs	r2, r0
 800275a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800275c:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800275e:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002760:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002762:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002764:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8002768:	688c      	ldr	r4, [r1, #8]
 800276a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800276c:	4c16      	ldr	r4, [pc, #88]	; (80027c8 <ETH_SetDMAConfig+0x80>)
 800276e:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002770:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002772:	4322      	orrs	r2, r4
 8002774:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002776:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002778:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800277c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <ETH_SetDMAConfig+0x84>)
 8002782:	4020      	ands	r0, r4
 8002784:	4302      	orrs	r2, r0
 8002786:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800278a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800278c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800278e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002790:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8002794:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002798:	690c      	ldr	r4, [r1, #16]
 800279a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800279c:	4c0c      	ldr	r4, [pc, #48]	; (80027d0 <ETH_SetDMAConfig+0x88>)
 800279e:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027a0:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027a2:	4322      	orrs	r2, r4
 80027a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027a8:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027ac:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027ae:	4909      	ldr	r1, [pc, #36]	; (80027d4 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027b0:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027b4:	4021      	ands	r1, r4
}
 80027b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027ba:	430a      	orrs	r2, r1
 80027bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	ffff87fd 	.word	0xffff87fd
 80027c8:	ffff2ffe 	.word	0xffff2ffe
 80027cc:	fffec000 	.word	0xfffec000
 80027d0:	ffc0efef 	.word	0xffc0efef
 80027d4:	7fc0ffff 	.word	0x7fc0ffff

080027d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80027de:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027e0:	688e      	ldr	r6, [r1, #8]
 80027e2:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 80027e6:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027e8:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	f2c0 8124 	blt.w	8002a3c <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027f4:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	f040 811f 	bne.w	8002a3c <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80027fe:	f8d1 c000 	ldr.w	ip, [r1]
 8002802:	f01c 0704 	ands.w	r7, ip, #4
 8002806:	d02d      	beq.n	8002864 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002808:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800280a:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800280e:	4dae      	ldr	r5, [pc, #696]	; (8002ac8 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 8002810:	ea05 0502 	and.w	r5, r5, r2
 8002814:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002816:	ea45 0502 	orr.w	r5, r5, r2
 800281a:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800281c:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800281e:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002820:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002824:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002826:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002828:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800282c:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800282e:	d019      	beq.n	8002864 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	fa1f fe82 	uxth.w	lr, r2
 8002836:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002838:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 800283c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002844:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 800284c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800284e:	ea4e 0202 	orr.w	r2, lr, r2
 8002852:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002854:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002856:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800285a:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800285c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800285e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002862:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002864:	f01c 0810 	ands.w	r8, ip, #16
 8002868:	d009      	beq.n	800287e <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4d97      	ldr	r5, [pc, #604]	; (8002acc <ETH_Prepare_Tx_Descriptors+0x2f4>)
 800286e:	4015      	ands	r5, r2
 8002870:	698a      	ldr	r2, [r1, #24]
 8002872:	4315      	orrs	r5, r2
 8002874:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800287c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800287e:	f01c 0f14 	tst.w	ip, #20
 8002882:	f040 80df 	bne.w	8002a44 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002886:	4622      	mov	r2, r4
 8002888:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800288c:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800288e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8002acc <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002892:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002894:	689d      	ldr	r5, [r3, #8]
 8002896:	ea05 0a0a 	and.w	sl, r5, sl
 800289a:	6875      	ldr	r5, [r6, #4]
 800289c:	ea4a 0505 	orr.w	r5, sl, r5
 80028a0:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 80028a2:	68b5      	ldr	r5, [r6, #8]
 80028a4:	2d00      	cmp	r5, #0
 80028a6:	f000 8133 	beq.w	8002b10 <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80028aa:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80028ac:	f8df a220 	ldr.w	sl, [pc, #544]	; 8002ad0 <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80028b0:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80028b2:	689e      	ldr	r6, [r3, #8]
 80028b4:	ea06 0a0a 	and.w	sl, r6, sl
 80028b8:	686e      	ldr	r6, [r5, #4]
 80028ba:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 80028be:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80028c0:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80028c2:	f1b8 0f00 	cmp.w	r8, #0
 80028c6:	f000 80e0 	beq.w	8002a8a <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80028ca:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 80028ce:	6a0e      	ldr	r6, [r1, #32]
 80028d0:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80028d4:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8002ad4 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80028d8:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80028da:	68de      	ldr	r6, [r3, #12]
 80028dc:	ea06 0c0c 	and.w	ip, r6, ip
 80028e0:	69ce      	ldr	r6, [r1, #28]
 80028e2:	ea4c 0606 	orr.w	r6, ip, r6
 80028e6:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80028e8:	68de      	ldr	r6, [r3, #12]
 80028ea:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80028ee:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028f0:	b12f      	cbz	r7, 80028fe <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80028f2:	689f      	ldr	r7, [r3, #8]
 80028f4:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80028f6:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 80028fa:	433e      	orrs	r6, r7
 80028fc:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80028fe:	68de      	ldr	r6, [r3, #12]
 8002900:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002904:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002906:	68de      	ldr	r6, [r3, #12]
 8002908:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 800290c:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800290e:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002912:	68de      	ldr	r6, [r3, #12]
 8002914:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8002918:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800291a:	680e      	ldr	r6, [r1, #0]
 800291c:	07b6      	lsls	r6, r6, #30
 800291e:	d505      	bpl.n	800292c <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002920:	68df      	ldr	r7, [r3, #12]
 8002922:	68ce      	ldr	r6, [r1, #12]
 8002924:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8002928:	433e      	orrs	r6, r7
 800292a:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800292c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002930:	f1b8 0f00 	cmp.w	r8, #0
 8002934:	f000 80d2 	beq.w	8002adc <ETH_Prepare_Tx_Descriptors+0x304>
 8002938:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800293c:	4d63      	ldr	r5, [pc, #396]	; (8002acc <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800293e:	4e64      	ldr	r6, [pc, #400]	; (8002ad0 <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002940:	46a2      	mov	sl, r4
 8002942:	e01d      	b.n	8002980 <ETH_Prepare_Tx_Descriptors+0x1a8>
 8002944:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8002ad4 <ETH_Prepare_Tx_Descriptors+0x2fc>
 8002948:	ea04 0808 	and.w	r8, r4, r8
 800294c:	69cc      	ldr	r4, [r1, #28]
 800294e:	ea48 0404 	orr.w	r4, r8, r4
 8002952:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002954:	68dc      	ldr	r4, [r3, #12]
 8002956:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 800295a:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 800295c:	f10c 0c01 	add.w	ip, ip, #1
 8002960:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002964:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002966:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800296a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800296e:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002970:	68dc      	ldr	r4, [r3, #12]
 8002972:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8002976:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002978:	f1b8 0f00 	cmp.w	r8, #0
 800297c:	f000 80af 	beq.w	8002ade <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002980:	68dc      	ldr	r4, [r3, #12]
 8002982:	eb0e 0b0c 	add.w	fp, lr, ip
 8002986:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 800298a:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800298c:	1c53      	adds	r3, r2, #1
 800298e:	2b03      	cmp	r3, #3
 8002990:	bf94      	ite	ls
 8002992:	461a      	movls	r2, r3
 8002994:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002996:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800299a:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800299c:	68dc      	ldr	r4, [r3, #12]
 800299e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80029a2:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80029a4:	68dc      	ldr	r4, [r3, #12]
 80029a6:	2c00      	cmp	r4, #0
 80029a8:	db30      	blt.n	8002a0c <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80029ac:	bb74      	cbnz	r4, 8002a0c <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80029ae:	f8d8 4000 	ldr.w	r4, [r8]
 80029b2:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80029b4:	689f      	ldr	r7, [r3, #8]
 80029b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80029ba:	402f      	ands	r7, r5
 80029bc:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 80029be:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80029c2:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 80029c4:	2f00      	cmp	r7, #0
 80029c6:	d05a      	beq.n	8002a7e <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80029c8:	683c      	ldr	r4, [r7, #0]
 80029ca:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80029cc:	689c      	ldr	r4, [r3, #8]
 80029ce:	ea04 0806 	and.w	r8, r4, r6
 80029d2:	687c      	ldr	r4, [r7, #4]
 80029d4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80029d8:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80029da:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80029de:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80029e0:	f018 0f10 	tst.w	r8, #16
 80029e4:	d1ae      	bne.n	8002944 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80029e6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8002ad8 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80029ea:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80029ee:	ea04 0b0b 	and.w	fp, r4, fp
 80029f2:	684c      	ldr	r4, [r1, #4]
 80029f4:	ea4b 0404 	orr.w	r4, fp, r4
 80029f8:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80029fa:	d0af      	beq.n	800295c <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80029fc:	68dc      	ldr	r4, [r3, #12]
 80029fe:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8002a02:	694c      	ldr	r4, [r1, #20]
 8002a04:	ea48 0404 	orr.w	r4, r8, r4
 8002a08:	60dc      	str	r4, [r3, #12]
 8002a0a:	e7a7      	b.n	800295c <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a0c:	4654      	mov	r4, sl
 8002a0e:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002a12:	f1bb 0f00 	cmp.w	fp, #0
 8002a16:	d011      	beq.n	8002a3c <ETH_Prepare_Tx_Descriptors+0x264>
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a1e:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002a20:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a22:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8002a24:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a26:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a2c:	bf98      	it	ls
 8002a2e:	462c      	movls	r4, r5
 8002a30:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8002a32:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a34:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002a38:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002a3a:	d1ee      	bne.n	8002a1a <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 8002a3c:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8002a3e:	b003      	add	sp, #12
 8002a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a56:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a58:	1c62      	adds	r2, r4, #1
 8002a5a:	2a03      	cmp	r2, #3
 8002a5c:	bf88      	it	hi
 8002a5e:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a60:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002a64:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a66:	68dd      	ldr	r5, [r3, #12]
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	db5f      	blt.n	8002b2c <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a6c:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a70:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a74:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a78:	f00c 0704 	and.w	r7, ip, #4
 8002a7c:	e706      	b.n	800288c <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a7e:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002a80:	4647      	mov	r7, r8
 8002a82:	689c      	ldr	r4, [r3, #8]
 8002a84:	4034      	ands	r4, r6
 8002a86:	609c      	str	r4, [r3, #8]
 8002a88:	e7a7      	b.n	80029da <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002a8a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8002ad8 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002a8e:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002a92:	ea06 0808 	and.w	r8, r6, r8
 8002a96:	684e      	ldr	r6, [r1, #4]
 8002a98:	ea48 0606 	orr.w	r6, r8, r6
 8002a9c:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002a9e:	d006      	beq.n	8002aae <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002aa0:	68de      	ldr	r6, [r3, #12]
 8002aa2:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 8002aa6:	694e      	ldr	r6, [r1, #20]
 8002aa8:	ea48 0606 	orr.w	r6, r8, r6
 8002aac:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002aae:	f01c 0f20 	tst.w	ip, #32
 8002ab2:	f43f af1d 	beq.w	80028f0 <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ab6:	68de      	ldr	r6, [r3, #12]
 8002ab8:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 8002abc:	690e      	ldr	r6, [r1, #16]
 8002abe:	ea4c 0606 	orr.w	r6, ip, r6
 8002ac2:	60de      	str	r6, [r3, #12]
 8002ac4:	e714      	b.n	80028f0 <ETH_Prepare_Tx_Descriptors+0x118>
 8002ac6:	bf00      	nop
 8002ac8:	ffff0000 	.word	0xffff0000
 8002acc:	ffffc000 	.word	0xffffc000
 8002ad0:	c000ffff 	.word	0xc000ffff
 8002ad4:	fffc0000 	.word	0xfffc0000
 8002ad8:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 8002adc:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 8002ade:	9901      	ldr	r1, [sp, #4]
 8002ae0:	b1f9      	cbz	r1, 8002b22 <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002ae8:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002aea:	68d9      	ldr	r1, [r3, #12]
 8002aec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002af0:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002af2:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002af6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002af8:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8002afa:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002afe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b00:	3301      	adds	r3, #1
 8002b02:	4463      	add	r3, ip
 8002b04:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b06:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8002b08:	2000      	movs	r0, #0
}
 8002b0a:	b003      	add	sp, #12
 8002b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b10:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002b12:	4635      	mov	r5, r6
 8002b14:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8002b18:	4e09      	ldr	r6, [pc, #36]	; (8002b40 <ETH_Prepare_Tx_Descriptors+0x368>)
 8002b1a:	ea0a 0606 	and.w	r6, sl, r6
 8002b1e:	609e      	str	r6, [r3, #8]
 8002b20:	e6ce      	b.n	80028c0 <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002b28:	6099      	str	r1, [r3, #8]
 8002b2a:	e7de      	b.n	8002aea <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b2c:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b30:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b34:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002b36:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b3c:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002b3e:	e77e      	b.n	8002a3e <ETH_Prepare_Tx_Descriptors+0x266>
 8002b40:	c000ffff 	.word	0xc000ffff

08002b44 <ETH_UpdateDescriptor>:
{
 8002b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8002b48:	2300      	movs	r3, #0
{
 8002b4a:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002b4c:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 8002b50:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b52:	f104 0312 	add.w	r3, r4, #18
 8002b56:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b5a:	b37e      	cbz	r6, 8002bbc <ETH_UpdateDescriptor+0x78>
 8002b5c:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002b5e:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002b62:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 8002b66:	e00c      	b.n	8002b82 <ETH_UpdateDescriptor+0x3e>
 8002b68:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b6c:	1c63      	adds	r3, r4, #1
 8002b6e:	3c03      	subs	r4, #3
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	bf98      	it	ls
 8002b74:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b76:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b78:	f104 0312 	add.w	r3, r4, #18
 8002b7c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b80:	d011      	beq.n	8002ba6 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002b82:	692b      	ldr	r3, [r5, #16]
 8002b84:	b13b      	cbz	r3, 8002b96 <ETH_UpdateDescriptor+0x52>
 8002b86:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8002b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1eb      	bne.n	8002b68 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002b90:	f8c5 900c 	str.w	r9, [r5, #12]
 8002b94:	e7ea      	b.n	8002b6c <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 8002b96:	a801      	add	r0, sp, #4
 8002b98:	f002 f81a 	bl	8004bd0 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	b113      	cbz	r3, 8002ba6 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002ba0:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002ba2:	602b      	str	r3, [r5, #0]
 8002ba4:	e7ef      	b.n	8002b86 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba8:	42b3      	cmp	r3, r6
 8002baa:	d007      	beq.n	8002bbc <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002bb8:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 8002bbc:	b003      	add	sp, #12
 8002bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bc2:	bf00      	nop

08002bc4 <HAL_ETH_Start_IT>:
{
 8002bc4:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002bc6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d001      	beq.n	8002bd2 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8002bce:	2001      	movs	r0, #1
}
 8002bd0:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002bd2:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bd4:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bda:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 8002bde:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002be0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_ETH_Start_IT+0x98>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_ETH_Start_IT+0x9c>)
 8002bee:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8002bfc:	f7ff ffa2 	bl	8002b44 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c00:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8002c02:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c04:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c06:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c0a:	f041 0102 	orr.w	r1, r1, #2
 8002c0e:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002c10:	6811      	ldr	r1, [r2, #0]
 8002c12:	f041 0101 	orr.w	r1, r1, #1
 8002c16:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002c18:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 8002c1c:	f041 0101 	orr.w	r1, r1, #1
 8002c20:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c24:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c28:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8002c2c:	f041 0101 	orr.w	r1, r1, #1
 8002c30:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c34:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8002c38:	f041 0101 	orr.w	r1, r1, #1
 8002c3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002c40:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8002c44:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8002c48:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c4c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002c50:	430a      	orrs	r2, r1
 8002c52:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8002c56:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	0c020060 	.word	0x0c020060
 8002c60:	0c20c000 	.word	0x0c20c000

08002c64 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002c64:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002c68:	2a23      	cmp	r2, #35	; 0x23
 8002c6a:	d001      	beq.n	8002c70 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
}
 8002c6e:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c70:	4601      	mov	r1, r0
 8002c72:	4603      	mov	r3, r0
{
 8002c74:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c76:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c7a:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8002c7e:	f851 2b44 	ldr.w	r2, [r1], #68
 8002c82:	4c19      	ldr	r4, [pc, #100]	; (8002ce8 <HAL_ETH_Stop_IT+0x84>)
 8002c84:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8002c88:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 8002c8c:	402c      	ands	r4, r5
 8002c8e:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c92:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8002c96:	f024 0401 	bic.w	r4, r4, #1
 8002c9a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c9e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8002ca2:	f024 0401 	bic.w	r4, r4, #1
 8002ca6:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002caa:	6810      	ldr	r0, [r2, #0]
 8002cac:	f020 0001 	bic.w	r0, r0, #1
 8002cb0:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002cb2:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 8002cb6:	f040 0001 	orr.w	r0, r0, #1
 8002cba:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cbe:	6810      	ldr	r0, [r2, #0]
 8002cc0:	f020 0002 	bic.w	r0, r0, #2
 8002cc4:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002cc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002cca:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002ccc:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002cce:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002cd2:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002cd4:	d1f7      	bne.n	8002cc6 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8002cd6:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8002cd8:	2110      	movs	r1, #16
    return HAL_OK;
 8002cda:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8002cdc:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8002cde:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8002ce2:	bc30      	pop	{r4, r5}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	ffff2f3e 	.word	0xffff2f3e

08002cec <HAL_ETH_Transmit_IT>:
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8002cf0:	b329      	cbz	r1, 8002d3e <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002cf2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002cf6:	2a23      	cmp	r2, #35	; 0x23
 8002cf8:	d001      	beq.n	8002cfe <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8002cfa:	2001      	movs	r0, #1
}
 8002cfc:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002cfe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002d00:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002d02:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002d04:	f7ff fd68 	bl	80027d8 <ETH_Prepare_Tx_Descriptors>
 8002d08:	b138      	cbz	r0, 8002d1a <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002d0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8002d0e:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002d18:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1a:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 8002d20:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d22:	1c53      	adds	r3, r2, #1
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	bf88      	it	hi
 8002d28:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d2a:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002d2c:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002d2e:	3306      	adds	r3, #6
 8002d30:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002d34:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002d38:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 8002d3c:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d3e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8002d42:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d44:	4303      	orrs	r3, r0
 8002d46:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <HAL_ETH_ReadData>:
{
 8002d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d50:	b085      	sub	sp, #20
 8002d52:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 8002d54:	9103      	str	r1, [sp, #12]
 8002d56:	2900      	cmp	r1, #0
 8002d58:	d06d      	beq.n	8002e36 <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002d5a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002d5e:	2b23      	cmp	r3, #35	; 0x23
 8002d60:	d15e      	bne.n	8002e20 <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 8002d62:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d66:	f108 0312 	add.w	r3, r8, #18
 8002d6a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002d6e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d70:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002d72:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8002d76:	2a00      	cmp	r2, #0
 8002d78:	db6a      	blt.n	8002e50 <HAL_ETH_ReadData+0x104>
 8002d7a:	f1bb 0f00 	cmp.w	fp, #0
 8002d7e:	d069      	beq.n	8002e54 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8002d80:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002d84:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8002d88:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8002d8a:	46ca      	mov	sl, r9
 8002d8c:	e003      	b.n	8002d96 <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 8002d8e:	45cb      	cmp	fp, r9
 8002d90:	d93f      	bls.n	8002e12 <HAL_ETH_ReadData+0xc6>
 8002d92:	2e00      	cmp	r6, #0
 8002d94:	d13d      	bne.n	8002e12 <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002d96:	68eb      	ldr	r3, [r5, #12]
 8002d98:	005e      	lsls	r6, r3, #1
 8002d9a:	d503      	bpl.n	8002da4 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002d9c:	686b      	ldr	r3, [r5, #4]
 8002d9e:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002da4:	68eb      	ldr	r3, [r5, #12]
 8002da6:	009a      	lsls	r2, r3, #2
 8002da8:	d401      	bmi.n	8002dae <HAL_ETH_ReadData+0x62>
 8002daa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8002dac:	b30e      	cbz	r6, 8002df2 <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002dae:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002db0:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002db2:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 8002db4:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 8002db6:	bf48      	it	mi
 8002db8:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002dbc:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 8002dc0:	d007      	beq.n	8002dd2 <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002dc2:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8002dc4:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dc8:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8002dcc:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002dce:	68eb      	ldr	r3, [r5, #12]
 8002dd0:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002dd2:	b2bb      	uxth	r3, r7
 8002dd4:	692a      	ldr	r2, [r5, #16]
 8002dd6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002dda:	f001 ff1d 	bl	8004c18 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8002dde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002de0:	3301      	adds	r3, #1
 8002de2:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002de6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 8002dea:	443b      	add	r3, r7
 8002dec:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8002dee:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002df2:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8002df6:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	bf8c      	ite	hi
 8002dfe:	f1a8 0803 	subhi.w	r8, r8, #3
 8002e02:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e04:	f108 0312 	add.w	r3, r8, #18
 8002e08:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002e0c:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	dabd      	bge.n	8002d8e <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002e12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002e14:	444b      	add	r3, r9
 8002e16:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002e18:	b9b3      	cbnz	r3, 8002e48 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8002e1a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8002e1e:	b91e      	cbnz	r6, 8002e28 <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 8002e20:	2001      	movs	r0, #1
}
 8002e22:	b005      	add	sp, #20
 8002e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e28:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8002e2a:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e2c:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 8002e2e:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e30:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 8002e32:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002e34:	e7f5      	b.n	8002e22 <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e36:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8002e3a:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e3c:	4303      	orrs	r3, r0
 8002e3e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002e42:	b005      	add	sp, #20
 8002e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff fe7b 	bl	8002b44 <ETH_UpdateDescriptor>
 8002e4e:	e7e4      	b.n	8002e1a <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0e5      	beq.n	8002e20 <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 8002e54:	f7ff fe76 	bl	8002b44 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002e58:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8002e5c:	e7e0      	b.n	8002e20 <HAL_ETH_ReadData+0xd4>
 8002e5e:	bf00      	nop

08002e60 <HAL_ETH_ReleaseTxPacket>:
{
 8002e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002e64:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002e68:	b17d      	cbz	r5, 8002e8a <HAL_ETH_ReleaseTxPacket+0x2a>
 8002e6a:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002e6c:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002e6e:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 8002e72:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002e74:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002e78:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002e7c:	b140      	cbz	r0, 8002e90 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002e7e:	68f3      	ldr	r3, [r6, #12]
 8002e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da08      	bge.n	8002e9c <HAL_ETH_ReleaseTxPacket+0x3c>
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002e90:	3401      	adds	r4, #1
 8002e92:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002e96:	2d00      	cmp	r5, #0
 8002e98:	d1e9      	bne.n	8002e6e <HAL_ETH_ReleaseTxPacket+0xe>
 8002e9a:	e7f6      	b.n	8002e8a <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002e9c:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002e9e:	f001 feeb 	bl	8004c78 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002ea2:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ea6:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002eaa:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8002eac:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d1dd      	bne.n	8002e6e <HAL_ETH_ReleaseTxPacket+0xe>
 8002eb2:	e7ea      	b.n	8002e8a <HAL_ETH_ReleaseTxPacket+0x2a>

08002eb4 <HAL_ETH_PMTCallback>:
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop

08002eb8 <HAL_ETH_EEECallback>:
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <HAL_ETH_WakeUpCallback>:
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002ec6:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8002eca:	0649      	lsls	r1, r1, #25
{
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002ed0:	d504      	bpl.n	8002edc <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002ed2:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8002ed6:	0649      	lsls	r1, r1, #25
 8002ed8:	f100 808a 	bmi.w	8002ff0 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002edc:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8002ee0:	07c8      	lsls	r0, r1, #31
 8002ee2:	d503      	bpl.n	8002eec <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002ee4:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8002ee8:	07c9      	lsls	r1, r1, #31
 8002eea:	d476      	bmi.n	8002fda <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002eec:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8002ef0:	0448      	lsls	r0, r1, #17
 8002ef2:	d503      	bpl.n	8002efc <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002ef4:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8002ef8:	0449      	lsls	r1, r1, #17
 8002efa:	d41b      	bmi.n	8002f34 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 8002efc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002f00:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002f04:	d133      	bne.n	8002f6e <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002f06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f0a:	06d0      	lsls	r0, r2, #27
 8002f0c:	d447      	bmi.n	8002f9e <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002f0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f12:	0691      	lsls	r1, r2, #26
 8002f14:	d454      	bmi.n	8002fc0 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002f1e:	0252      	lsls	r2, r2, #9
 8002f20:	d400      	bmi.n	8002f24 <HAL_ETH_IRQHandler+0x64>
}
 8002f22:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002f28:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f2a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8002f2e:	f7ff ffc5 	bl	8002ebc <HAL_ETH_WakeUpCallback>
}
 8002f32:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002f34:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002f40:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 8002f44:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002f48:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002f4c:	d15a      	bne.n	8003004 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002f4e:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002f52:	400b      	ands	r3, r1
 8002f54:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002f58:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f001 fc95 	bl	800488c <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002f68:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002f6c:	d0cb      	beq.n	8002f06 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002f6e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002f72:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002f74:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002f76:	f042 0210 	orr.w	r2, r2, #16
 8002f7a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002f7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f82:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002f86:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8002f8a:	f001 fc7f 	bl	800488c <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002f8e:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002f90:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002f92:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f9a:	06d0      	lsls	r0, r2, #27
 8002f9c:	d5b7      	bpl.n	8002f0e <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002f9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 8002fa2:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002fa8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8002fac:	f7ff ff82 	bl	8002eb4 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002fb0:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002fb2:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002fb4:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002fb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fbc:	0691      	lsls	r1, r2, #26
 8002fbe:	d5aa      	bpl.n	8002f16 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002fc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 8002fc4:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 8002fce:	f7ff ff73 	bl	8002eb8 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8002fd8:	e79d      	b.n	8002f16 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002fda:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 8002fde:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002fe0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 8002fe4:	f001 fc4c 	bl	8004880 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002fee:	e77d      	b.n	8002eec <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002ff0:	f248 0340 	movw	r3, #32832	; 0x8040
 8002ff4:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 8002ff8:	f001 fc3c 	bl	8004874 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003002:	e76b      	b.n	8002edc <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003004:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8003008:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800300a:	4003      	ands	r3, r0
 800300c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003010:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8003014:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003018:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 800301c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8003020:	e79c      	b.n	8002f5c <HAL_ETH_IRQHandler+0x9c>
 8003022:	bf00      	nop

08003024 <HAL_ETH_ReadPHYRegister>:
{
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003028:	6800      	ldr	r0, [r0, #0]
{
 800302a:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800302c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8003030:	07db      	lsls	r3, r3, #31
 8003032:	d501      	bpl.n	8003038 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8003034:	2001      	movs	r0, #1
}
 8003036:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003038:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800303c:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8003040:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003044:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 8003048:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800304c:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003050:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8003054:	f7ff f9f8 	bl	8002448 <HAL_GetTick>
 8003058:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800305a:	e005      	b.n	8003068 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800305c:	f7ff f9f4 	bl	8002448 <HAL_GetTick>
 8003060:	1b82      	subs	r2, r0, r6
 8003062:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8003066:	d8e5      	bhi.n	8003034 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003068:	6821      	ldr	r1, [r4, #0]
 800306a:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 800306e:	f012 0201 	ands.w	r2, r2, #1
 8003072:	d1f3      	bne.n	800305c <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003074:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8003078:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800307a:	b29b      	uxth	r3, r3
 800307c:	602b      	str	r3, [r5, #0]
}
 800307e:	bd70      	pop	{r4, r5, r6, pc}

08003080 <HAL_ETH_WritePHYRegister>:
{
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003084:	6800      	ldr	r0, [r0, #0]
 8003086:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 800308a:	07ed      	lsls	r5, r5, #31
 800308c:	d501      	bpl.n	8003092 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800308e:	2001      	movs	r0, #1
}
 8003090:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003092:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003096:	b29b      	uxth	r3, r3
 8003098:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 800309c:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80030a0:	480f      	ldr	r0, [pc, #60]	; (80030e0 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80030a2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80030a6:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80030aa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80030ae:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80030b2:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80030b6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 80030ba:	f7ff f9c5 	bl	8002448 <HAL_GetTick>
 80030be:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80030c0:	e005      	b.n	80030ce <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80030c2:	f7ff f9c1 	bl	8002448 <HAL_GetTick>
 80030c6:	1b43      	subs	r3, r0, r5
 80030c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030cc:	d8df      	bhi.n	800308e <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030d4:	f013 0301 	ands.w	r3, r3, #1
 80030d8:	d1f3      	bne.n	80030c2 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 80030da:	4618      	mov	r0, r3
}
 80030dc:	bd38      	pop	{r3, r4, r5, pc}
 80030de:	bf00      	nop
 80030e0:	40028000 	.word	0x40028000

080030e4 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80030e4:	2900      	cmp	r1, #0
 80030e6:	f000 80c4 	beq.w	8003272 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80030ea:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80030ec:	2000      	movs	r0, #0
{
 80030ee:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80030f0:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80030f2:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80030f4:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80030f8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80030fc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003100:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003102:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003104:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003108:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8003110:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8003114:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003118:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 800311a:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800311e:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8003126:	f3c2 2280 	ubfx	r2, r2, #10, #1
 800312a:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800312c:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800312e:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003132:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800313a:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800313c:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800313e:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003140:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003144:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003148:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8003152:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 800315a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800315e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003166:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 800316a:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8003172:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800317a:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8003182:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003184:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003186:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800318a:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800318c:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800318e:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003190:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003194:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003198:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800319a:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800319c:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800319e:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80031a0:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80031a4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80031a8:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80031aa:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 80031b2:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80031b6:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80031c0:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80031c4:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80031c6:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80031ca:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80031ce:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 80031d0:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80031d4:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80031d8:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80031da:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80031dc:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80031e0:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80031e4:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80031e6:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80031ea:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80031ee:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031f2:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80031f6:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031f8:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80031fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031fe:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8003202:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003206:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800320a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800320c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800320e:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003212:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003214:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003216:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003218:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800321c:	f002 0201 	and.w	r2, r2, #1
 8003220:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003224:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 8003228:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800322c:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003230:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003234:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003238:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800323c:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8003240:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003244:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 8003248:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800324c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003250:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003254:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8003258:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800325c:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003260:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003264:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003268:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800326c:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 8003270:	4770      	bx	lr
    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop

08003278 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8003278:	b131      	cbz	r1, 8003288 <HAL_ETH_SetMACConfig+0x10>
{
 800327a:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 800327c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003280:	2b10      	cmp	r3, #16
 8003282:	d003      	beq.n	800328c <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8003284:	2001      	movs	r0, #1
}
 8003286:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8003288:	2001      	movs	r0, #1
}
 800328a:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 800328c:	f7ff f9a0 	bl	80025d0 <ETH_SetMACConfig>
    return HAL_OK;
 8003290:	2000      	movs	r0, #0
}
 8003292:	bd08      	pop	{r3, pc}

08003294 <HAL_ETH_SetMDIOClockRange>:
{
 8003294:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003296:	6803      	ldr	r3, [r0, #0]
{
 8003298:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 800329a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 800329e:	f000 ff59 	bl	8004154 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_ETH_SetMDIOClockRange+0x64>)
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80032a6:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80032aa:	4403      	add	r3, r0
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d205      	bcs.n	80032bc <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80032b0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80032be:	4a11      	ldr	r2, [pc, #68]	; (8003304 <HAL_ETH_SetMDIOClockRange+0x70>)
 80032c0:	4403      	add	r3, r0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d805      	bhi.n	80032d2 <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80032c6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032ca:	682b      	ldr	r3, [r5, #0]
 80032cc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80032d0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_ETH_SetMDIOClockRange+0x74>)
 80032d4:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_ETH_SetMDIOClockRange+0x78>)
 80032d6:	4403      	add	r3, r0
 80032d8:	4293      	cmp	r3, r2
 80032da:	d3eb      	bcc.n	80032b4 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <HAL_ETH_SetMDIOClockRange+0x80>)
 80032e0:	4403      	add	r3, r0
 80032e2:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032e4:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80032e6:	bf94      	ite	ls
 80032e8:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80032ec:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80032f0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80032f4:	bd38      	pop	{r3, r4, r5, pc}
 80032f6:	bf00      	nop
 80032f8:	feced300 	.word	0xfeced300
 80032fc:	00e4e1c0 	.word	0x00e4e1c0
 8003300:	fde9f140 	.word	0xfde9f140
 8003304:	017d783f 	.word	0x017d783f
 8003308:	fc6c7900 	.word	0xfc6c7900
 800330c:	02625a00 	.word	0x02625a00
 8003310:	fa0a1f00 	.word	0xfa0a1f00
 8003314:	02faf07f 	.word	0x02faf07f

08003318 <HAL_ETH_Init>:
  if (heth == NULL)
 8003318:	2800      	cmp	r0, #0
 800331a:	f000 810e 	beq.w	800353a <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 800331e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003324:	4605      	mov	r5, r0
 8003326:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80b2 	beq.w	8003492 <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_ETH_Init+0x228>)
 8003330:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003334:	f042 0202 	orr.w	r2, r2, #2
 8003338:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800333c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003340:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800334a:	2800      	cmp	r0, #0
 800334c:	f040 8095 	bne.w	800347a <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003350:	f7ff f886 	bl	8002460 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003354:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8003356:	4a7b      	ldr	r2, [pc, #492]	; (8003544 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 800335c:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003366:	f7ff f86f 	bl	8002448 <HAL_GetTick>
 800336a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800336c:	e006      	b.n	800337c <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800336e:	f7ff f86b 	bl	8002448 <HAL_GetTick>
 8003372:	1b83      	subs	r3, r0, r6
 8003374:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003378:	f200 8082 	bhi.w	8003480 <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800337c:	682b      	ldr	r3, [r5, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	681c      	ldr	r4, [r3, #0]
 8003384:	f014 0401 	ands.w	r4, r4, #1
 8003388:	d1f1      	bne.n	800336e <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 800338a:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 800338c:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800338e:	f7ff ff81 	bl	8003294 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003392:	f000 fedf 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 8003396:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_ETH_Init+0x230>)
 8003398:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800339a:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800339e:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033a6:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033a8:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033aa:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 80033ac:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80033b0:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033b4:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80033b6:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 80033b8:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80033ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80033be:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80033c2:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80033c6:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80033c8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 80033cc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80033d0:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 80033d6:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80033da:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80033de:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80033e2:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033e4:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033e8:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80033ec:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80033ee:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80033f2:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80033f6:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 80033f8:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80033fc:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80033fe:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003402:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8003406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 800340a:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 800340c:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800340e:	2320      	movs	r3, #32
 8003410:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003414:	4b4d      	ldr	r3, [pc, #308]	; (800354c <HAL_ETH_Init+0x234>)
 8003416:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8003418:	f240 1301 	movw	r3, #257	; 0x101
 800341c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003420:	f7ff f8d6 	bl	80025d0 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003424:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003428:	a902      	add	r1, sp, #8
 800342a:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800342c:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003430:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003432:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003434:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003438:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800343a:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800343c:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800343e:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003442:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003446:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800344a:	f7ff f97d 	bl	8002748 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800344e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8003452:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8003456:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800345a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800345e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003462:	696b      	ldr	r3, [r5, #20]
 8003464:	f013 0203 	ands.w	r2, r3, #3
 8003468:	d019      	beq.n	800349e <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 800346a:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 800346c:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800346e:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8003472:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8003476:	b025      	add	sp, #148	; 0x94
 8003478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800347a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800347e:	e767      	b.n	8003350 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003480:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8003482:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8003484:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003486:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 800348a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800348e:	b025      	add	sp, #148	; 0x94
 8003490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8003492:	2323      	movs	r3, #35	; 0x23
 8003494:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8003498:	f001 faf6 	bl	8004a88 <HAL_ETH_MspInit>
 800349c:	e747      	b.n	800332e <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800349e:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 80034a2:	482b      	ldr	r0, [pc, #172]	; (8003550 <HAL_ETH_Init+0x238>)
 80034a4:	68ee      	ldr	r6, [r5, #12]
 80034a6:	4020      	ands	r0, r4
 80034a8:	f106 0460 	add.w	r4, r6, #96	; 0x60
 80034ac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 80034b0:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80034b2:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034b6:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80034ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034c2:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034c6:	3318      	adds	r3, #24
 80034c8:	42a3      	cmp	r3, r4
 80034ca:	d1f6      	bne.n	80034ba <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 80034cc:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80034ce:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 80034d0:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80034d2:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80034d6:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034da:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80034dc:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 80034e0:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80034e2:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034e6:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80034ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80034f0:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80034f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80034f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034f6:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034fa:	42b0      	cmp	r0, r6
 80034fc:	f103 0318 	add.w	r3, r3, #24
 8003500:	d1f3      	bne.n	80034ea <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003502:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003504:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003506:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003508:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800350c:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003510:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 8003514:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003516:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800351a:	3448      	adds	r4, #72	; 0x48
 800351c:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003520:	8899      	ldrh	r1, [r3, #4]
 8003522:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8003526:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003528:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800352a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800352e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003532:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8003536:	b025      	add	sp, #148	; 0x94
 8003538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
 8003544:	58000400 	.word	0x58000400
 8003548:	431bde83 	.word	0x431bde83
 800354c:	01010000 	.word	0x01010000
 8003550:	ffff8001 	.word	0xffff8001

08003554 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8003554:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003560:	680c      	ldr	r4, [r1, #0]
{
 8003562:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003564:	2c00      	cmp	r4, #0
 8003566:	f000 80a7 	beq.w	80036b8 <HAL_GPIO_Init+0x15c>
 800356a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	4f8a      	ldr	r7, [pc, #552]	; (8003798 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8003570:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8003576:	ea12 0e04 	ands.w	lr, r2, r4
 800357a:	f000 8096 	beq.w	80036aa <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800357e:	684d      	ldr	r5, [r1, #4]
 8003580:	f005 0903 	and.w	r9, r5, #3
 8003584:	f109 36ff 	add.w	r6, r9, #4294967295
 8003588:	2e01      	cmp	r6, #1
 800358a:	f240 8098 	bls.w	80036be <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800358e:	f1b9 0f03 	cmp.w	r9, #3
 8003592:	f040 80d2 	bne.w	800373a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003596:	fa09 f20c 	lsl.w	r2, r9, ip
 800359a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800359e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035a4:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a8:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80035ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ae:	d07c      	beq.n	80036aa <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80035b4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035b8:	f003 0903 	and.w	r9, r3, #3
 80035bc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035be:	f042 0202 	orr.w	r2, r2, #2
 80035c2:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035c6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80035ce:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 80035d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035d6:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035da:	f002 0202 	and.w	r2, r2, #2
 80035de:	9201      	str	r2, [sp, #4]
 80035e0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80035e2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035e6:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035ea:	4e6c      	ldr	r6, [pc, #432]	; (800379c <HAL_GPIO_Init+0x240>)
 80035ec:	42b0      	cmp	r0, r6
 80035ee:	d028      	beq.n	8003642 <HAL_GPIO_Init+0xe6>
 80035f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035f4:	42b0      	cmp	r0, r6
 80035f6:	f000 80ac 	beq.w	8003752 <HAL_GPIO_Init+0x1f6>
 80035fa:	4e69      	ldr	r6, [pc, #420]	; (80037a0 <HAL_GPIO_Init+0x244>)
 80035fc:	42b0      	cmp	r0, r6
 80035fe:	f000 80ad 	beq.w	800375c <HAL_GPIO_Init+0x200>
 8003602:	4e68      	ldr	r6, [pc, #416]	; (80037a4 <HAL_GPIO_Init+0x248>)
 8003604:	42b0      	cmp	r0, r6
 8003606:	f000 809f 	beq.w	8003748 <HAL_GPIO_Init+0x1ec>
 800360a:	4e67      	ldr	r6, [pc, #412]	; (80037a8 <HAL_GPIO_Init+0x24c>)
 800360c:	42b0      	cmp	r0, r6
 800360e:	f000 80af 	beq.w	8003770 <HAL_GPIO_Init+0x214>
 8003612:	4e66      	ldr	r6, [pc, #408]	; (80037ac <HAL_GPIO_Init+0x250>)
 8003614:	42b0      	cmp	r0, r6
 8003616:	f000 80b0 	beq.w	800377a <HAL_GPIO_Init+0x21e>
 800361a:	4e65      	ldr	r6, [pc, #404]	; (80037b0 <HAL_GPIO_Init+0x254>)
 800361c:	42b0      	cmp	r0, r6
 800361e:	f000 80a2 	beq.w	8003766 <HAL_GPIO_Init+0x20a>
 8003622:	4e64      	ldr	r6, [pc, #400]	; (80037b4 <HAL_GPIO_Init+0x258>)
 8003624:	42b0      	cmp	r0, r6
 8003626:	f000 80ad 	beq.w	8003784 <HAL_GPIO_Init+0x228>
 800362a:	4e63      	ldr	r6, [pc, #396]	; (80037b8 <HAL_GPIO_Init+0x25c>)
 800362c:	42b0      	cmp	r0, r6
 800362e:	f000 80ae 	beq.w	800378e <HAL_GPIO_Init+0x232>
 8003632:	4e62      	ldr	r6, [pc, #392]	; (80037bc <HAL_GPIO_Init+0x260>)
 8003634:	42b0      	cmp	r0, r6
 8003636:	bf0c      	ite	eq
 8003638:	2609      	moveq	r6, #9
 800363a:	260a      	movne	r6, #10
 800363c:	fa06 f609 	lsl.w	r6, r6, r9
 8003640:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003642:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800364e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8003652:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003654:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003658:	bf0c      	ite	eq
 800365a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800365c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003660:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8003664:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8003668:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800366c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003670:	bf0c      	ite	eq
 8003672:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8003674:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003678:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800367c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003680:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003684:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003688:	bf0c      	ite	eq
 800368a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800368c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003690:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003692:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8003696:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800369a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 800369e:	bf54      	ite	pl
 80036a0:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80036a2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80036a6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80036aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036ac:	f10c 0c02 	add.w	ip, ip, #2
 80036b0:	fa34 f203 	lsrs.w	r2, r4, r3
 80036b4:	f47f af5d 	bne.w	8003572 <HAL_GPIO_Init+0x16>
  }
}
 80036b8:	b003      	add	sp, #12
 80036ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036be:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80036c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036c4:	fa08 f80c 	lsl.w	r8, r8, ip
 80036c8:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036cc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036ce:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d2:	fa06 f60c 	lsl.w	r6, r6, ip
 80036d6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80036da:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036dc:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80036e0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036e6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ea:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80036ec:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80036ee:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f4:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f6:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fa:	fa06 f60c 	lsl.w	r6, r6, ip
 80036fe:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8003702:	fa09 f20c 	lsl.w	r2, r9, ip
 8003706:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	f47f af49 	bne.w	800359e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800370c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003710:	f003 0b07 	and.w	fp, r3, #7
 8003714:	260f      	movs	r6, #15
 8003716:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800371a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800371e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003722:	fa06 f60b 	lsl.w	r6, r6, fp
 8003726:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800372a:	690e      	ldr	r6, [r1, #16]
 800372c:	fa06 f60b 	lsl.w	r6, r6, fp
 8003730:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003734:	f8c9 6020 	str.w	r6, [r9, #32]
 8003738:	e731      	b.n	800359e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800373a:	f04f 0803 	mov.w	r8, #3
 800373e:	fa08 f80c 	lsl.w	r8, r8, ip
 8003742:	ea6f 0808 	mvn.w	r8, r8
 8003746:	e7d2      	b.n	80036ee <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003748:	2603      	movs	r6, #3
 800374a:	fa06 f609 	lsl.w	r6, r6, r9
 800374e:	4332      	orrs	r2, r6
 8003750:	e777      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 8003752:	2601      	movs	r6, #1
 8003754:	fa06 f609 	lsl.w	r6, r6, r9
 8003758:	4332      	orrs	r2, r6
 800375a:	e772      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 800375c:	2602      	movs	r6, #2
 800375e:	fa06 f609 	lsl.w	r6, r6, r9
 8003762:	4332      	orrs	r2, r6
 8003764:	e76d      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 8003766:	2606      	movs	r6, #6
 8003768:	fa06 f609 	lsl.w	r6, r6, r9
 800376c:	4332      	orrs	r2, r6
 800376e:	e768      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 8003770:	2604      	movs	r6, #4
 8003772:	fa06 f609 	lsl.w	r6, r6, r9
 8003776:	4332      	orrs	r2, r6
 8003778:	e763      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 800377a:	2605      	movs	r6, #5
 800377c:	fa06 f609 	lsl.w	r6, r6, r9
 8003780:	4332      	orrs	r2, r6
 8003782:	e75e      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 8003784:	2607      	movs	r6, #7
 8003786:	fa06 f609 	lsl.w	r6, r6, r9
 800378a:	4332      	orrs	r2, r6
 800378c:	e759      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 800378e:	2608      	movs	r6, #8
 8003790:	fa06 f609 	lsl.w	r6, r6, r9
 8003794:	4332      	orrs	r2, r6
 8003796:	e754      	b.n	8003642 <HAL_GPIO_Init+0xe6>
 8003798:	58024400 	.word	0x58024400
 800379c:	58020000 	.word	0x58020000
 80037a0:	58020800 	.word	0x58020800
 80037a4:	58020c00 	.word	0x58020c00
 80037a8:	58021000 	.word	0x58021000
 80037ac:	58021400 	.word	0x58021400
 80037b0:	58021800 	.word	0x58021800
 80037b4:	58021c00 	.word	0x58021c00
 80037b8:	58022000 	.word	0x58022000
 80037bc:	58022400 	.word	0x58022400

080037c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037c0:	b902      	cbnz	r2, 80037c4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80037c2:	0409      	lsls	r1, r1, #16
 80037c4:	6181      	str	r1, [r0, #24]
  }
}
 80037c6:	4770      	bx	lr

080037c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037c8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037ca:	4c10      	ldr	r4, [pc, #64]	; (800380c <HAL_PWREx_ConfigSupply+0x44>)
 80037cc:	68e3      	ldr	r3, [r4, #12]
 80037ce:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037d2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037d4:	d105      	bne.n	80037e2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037d6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037da:	1a18      	subs	r0, r3, r0
 80037dc:	bf18      	it	ne
 80037de:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	4303      	orrs	r3, r0
 80037e8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80037ea:	f7fe fe2d 	bl	8002448 <HAL_GetTick>
 80037ee:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037f0:	e005      	b.n	80037fe <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037f2:	f7fe fe29 	bl	8002448 <HAL_GetTick>
 80037f6:	1b40      	subs	r0, r0, r5
 80037f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037fc:	d804      	bhi.n	8003808 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	049b      	lsls	r3, r3, #18
 8003802:	d5f6      	bpl.n	80037f2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8003804:	2000      	movs	r0, #0
}
 8003806:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003808:	2001      	movs	r0, #1
}
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	58024800 	.word	0x58024800

08003810 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003810:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003812:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003816:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003818:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800381a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800381e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003820:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8003824:	d038      	beq.n	8003898 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003826:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800382a:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800382e:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003832:	fb05 f101 	mul.w	r1, r5, r1
 8003836:	2a01      	cmp	r2, #1
 8003838:	ee07 1a90 	vmov	s15, r1
 800383c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8003842:	2a02      	cmp	r2, #2
 8003844:	d04e      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003846:	b34a      	cbz	r2, 800389c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003848:	ee07 0a90 	vmov	s15, r0
 800384c:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8003904 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8003850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800385a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003908 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800386a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003872:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003876:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003882:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003884:	ee07 3a90 	vmov	s15, r3
 8003888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003894:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003898:	bc30      	pop	{r4, r5}
 800389a:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	0692      	lsls	r2, r2, #26
 80038a0:	d527      	bpl.n	80038f2 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038a2:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038a4:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038a8:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038aa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038b0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003908 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038c0:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038c2:	ee06 3a90 	vmov	s13, r3
 80038c6:	ee06 2a10 	vmov	s12, r2
 80038ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80038ce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80038d2:	eee7 6a05 	vfma.f32	s13, s14, s10
 80038d6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80038da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80038de:	ee66 6a87 	vmul.f32	s13, s13, s14
 80038e2:	e7ca      	b.n	800387a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038e4:	ee07 0a90 	vmov	s15, r0
 80038e8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003910 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80038ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f0:	e7b0      	b.n	8003854 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038f2:	ee07 0a90 	vmov	s15, r0
 80038f6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8003914 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80038fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fe:	e7a9      	b.n	8003854 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003900:	58024400 	.word	0x58024400
 8003904:	4a742400 	.word	0x4a742400
 8003908:	39000000 	.word	0x39000000
 800390c:	03d09000 	.word	0x03d09000
 8003910:	4bbebc20 	.word	0x4bbebc20
 8003914:	4c742400 	.word	0x4c742400

08003918 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003918:	2800      	cmp	r0, #0
 800391a:	f000 81e8 	beq.w	8003cee <HAL_RCC_OscConfig+0x3d6>
{
 800391e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	4604      	mov	r4, r0
 8003924:	07d9      	lsls	r1, r3, #31
 8003926:	d52e      	bpl.n	8003986 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003928:	49a4      	ldr	r1, [pc, #656]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 800392a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800392c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003932:	2a10      	cmp	r2, #16
 8003934:	f000 8107 	beq.w	8003b46 <HAL_RCC_OscConfig+0x22e>
 8003938:	2a18      	cmp	r2, #24
 800393a:	f000 80ff 	beq.w	8003b3c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	f000 812a 	beq.w	8003b9c <HAL_RCC_OscConfig+0x284>
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8168 	beq.w	8003c1e <HAL_RCC_OscConfig+0x306>
 800394e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003952:	4b9a      	ldr	r3, [pc, #616]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f000 8269 	beq.w	8003e2c <HAL_RCC_OscConfig+0x514>
 800395a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003968:	f7fe fd6e 	bl	8002448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800396c:	4e93      	ldr	r6, [pc, #588]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800396e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003970:	e005      	b.n	800397e <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003972:	f7fe fd69 	bl	8002448 <HAL_GetTick>
 8003976:	1b40      	subs	r0, r0, r5
 8003978:	2864      	cmp	r0, #100	; 0x64
 800397a:	f200 814e 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800397e:	6833      	ldr	r3, [r6, #0]
 8003980:	039b      	lsls	r3, r3, #14
 8003982:	d5f6      	bpl.n	8003972 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	079d      	lsls	r5, r3, #30
 8003988:	f100 808a 	bmi.w	8003aa0 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800398c:	06d9      	lsls	r1, r3, #27
 800398e:	d533      	bpl.n	80039f8 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003990:	4a8a      	ldr	r2, [pc, #552]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003992:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003994:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800399a:	2b08      	cmp	r3, #8
 800399c:	f000 80e3 	beq.w	8003b66 <HAL_RCC_OscConfig+0x24e>
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	f000 80db 	beq.w	8003b5c <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039a6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80039a8:	4d84      	ldr	r5, [pc, #528]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 816f 	beq.w	8003c8e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039b8:	f7fe fd46 	bl	8002448 <HAL_GetTick>
 80039bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039be:	e005      	b.n	80039cc <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039c0:	f7fe fd42 	bl	8002448 <HAL_GetTick>
 80039c4:	1b80      	subs	r0, r0, r6
 80039c6:	2802      	cmp	r0, #2
 80039c8:	f200 8127 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	05db      	lsls	r3, r3, #23
 80039d0:	d5f6      	bpl.n	80039c0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d2:	f7fe fd3f 	bl	8002454 <HAL_GetREVID>
 80039d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80039da:	4298      	cmp	r0, r3
 80039dc:	f200 8247 	bhi.w	8003e6e <HAL_RCC_OscConfig+0x556>
 80039e0:	6a22      	ldr	r2, [r4, #32]
 80039e2:	686b      	ldr	r3, [r5, #4]
 80039e4:	2a20      	cmp	r2, #32
 80039e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039ea:	bf0c      	ite	eq
 80039ec:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80039f0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80039f4:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	071d      	lsls	r5, r3, #28
 80039fa:	d516      	bpl.n	8003a2a <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4d6f      	ldr	r5, [pc, #444]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8122 	beq.w	8003c4a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8003a06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fd1b 	bl	8002448 <HAL_GetTick>
 8003a12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a14:	e005      	b.n	8003a22 <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a16:	f7fe fd17 	bl	8002448 <HAL_GetTick>
 8003a1a:	1b80      	subs	r0, r0, r6
 8003a1c:	2802      	cmp	r0, #2
 8003a1e:	f200 80fc 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a22:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a24:	0798      	lsls	r0, r3, #30
 8003a26:	d5f6      	bpl.n	8003a16 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	069a      	lsls	r2, r3, #26
 8003a2c:	d516      	bpl.n	8003a5c <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a2e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003a30:	4d62      	ldr	r5, [pc, #392]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 811a 	beq.w	8003c6c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a3e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a40:	f7fe fd02 	bl	8002448 <HAL_GetTick>
 8003a44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a46:	e005      	b.n	8003a54 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a48:	f7fe fcfe 	bl	8002448 <HAL_GetTick>
 8003a4c:	1b80      	subs	r0, r0, r6
 8003a4e:	2802      	cmp	r0, #2
 8003a50:	f200 80e3 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	049f      	lsls	r7, r3, #18
 8003a58:	d5f6      	bpl.n	8003a48 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	0759      	lsls	r1, r3, #29
 8003a5e:	f100 80a3 	bmi.w	8003ba8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003a64:	b1d0      	cbz	r0, 8003a9c <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a66:	4d55      	ldr	r5, [pc, #340]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003a68:	692b      	ldr	r3, [r5, #16]
 8003a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a6e:	2b18      	cmp	r3, #24
 8003a70:	f000 81ae 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003a74:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a76:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7e:	f000 8142 	beq.w	8003d06 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8003a82:	f7fe fce1 	bl	8002448 <HAL_GetTick>
 8003a86:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a88:	e005      	b.n	8003a96 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fe fcdd 	bl	8002448 <HAL_GetTick>
 8003a8e:	1b00      	subs	r0, r0, r4
 8003a90:	2802      	cmp	r0, #2
 8003a92:	f200 80c2 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	d4f6      	bmi.n	8003a8a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8003a9c:	2000      	movs	r0, #0
}
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa0:	4a46      	ldr	r2, [pc, #280]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003aa2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003aa6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8003aaa:	d12d      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aac:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003aae:	68e2      	ldr	r2, [r4, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	0759      	lsls	r1, r3, #29
 8003ab4:	d501      	bpl.n	8003aba <HAL_RCC_OscConfig+0x1a2>
 8003ab6:	2a00      	cmp	r2, #0
 8003ab8:	d04e      	beq.n	8003b58 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aba:	4d40      	ldr	r5, [pc, #256]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	f023 0319 	bic.w	r3, r3, #25
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8003ac6:	f7fe fcbf 	bl	8002448 <HAL_GetTick>
 8003aca:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003acc:	e005      	b.n	8003ada <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fe fcbb 	bl	8002448 <HAL_GetTick>
 8003ad2:	1b80      	subs	r0, r0, r6
 8003ad4:	2802      	cmp	r0, #2
 8003ad6:	f200 80a0 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	075b      	lsls	r3, r3, #29
 8003ade:	d5f6      	bpl.n	8003ace <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	f7fe fcb8 	bl	8002454 <HAL_GetREVID>
 8003ae4:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	f200 80f7 	bhi.w	8003cdc <HAL_RCC_OscConfig+0x3c4>
 8003aee:	6922      	ldr	r2, [r4, #16]
 8003af0:	686b      	ldr	r3, [r5, #4]
 8003af2:	2a40      	cmp	r2, #64	; 0x40
 8003af4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003af8:	bf0c      	ite	eq
 8003afa:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8003afe:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003b02:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	e741      	b.n	800398c <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b08:	2b18      	cmp	r3, #24
 8003b0a:	f000 80e3 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b0e:	4d2b      	ldr	r5, [pc, #172]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b10:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b12:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	f000 80cc 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b1a:	f023 0319 	bic.w	r3, r3, #25
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003b22:	f7fe fc91 	bl	8002448 <HAL_GetTick>
 8003b26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b28:	e004      	b.n	8003b34 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fe fc8d 	bl	8002448 <HAL_GetTick>
 8003b2e:	1b80      	subs	r0, r0, r6
 8003b30:	2802      	cmp	r0, #2
 8003b32:	d872      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	075f      	lsls	r7, r3, #29
 8003b38:	d5f7      	bpl.n	8003b2a <HAL_RCC_OscConfig+0x212>
 8003b3a:	e7d1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b3c:	f001 0103 	and.w	r1, r1, #3
 8003b40:	2902      	cmp	r1, #2
 8003b42:	f47f aefc 	bne.w	800393e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	0392      	lsls	r2, r2, #14
 8003b4c:	f57f af1b 	bpl.w	8003986 <HAL_RCC_OscConfig+0x6e>
 8003b50:	6862      	ldr	r2, [r4, #4]
 8003b52:	2a00      	cmp	r2, #0
 8003b54:	f47f af17 	bne.w	8003986 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8003b58:	2001      	movs	r0, #1
}
 8003b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b5c:	f002 0203 	and.w	r2, r2, #3
 8003b60:	2a01      	cmp	r2, #1
 8003b62:	f47f af20 	bne.w	80039a6 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	05da      	lsls	r2, r3, #23
 8003b6c:	d502      	bpl.n	8003b74 <HAL_RCC_OscConfig+0x25c>
 8003b6e:	69e3      	ldr	r3, [r4, #28]
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d1f1      	bne.n	8003b58 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b74:	f7fe fc6e 	bl	8002454 <HAL_GetREVID>
 8003b78:	f241 0303 	movw	r3, #4099	; 0x1003
 8003b7c:	4298      	cmp	r0, r3
 8003b7e:	f200 80b8 	bhi.w	8003cf2 <HAL_RCC_OscConfig+0x3da>
 8003b82:	6a22      	ldr	r2, [r4, #32]
 8003b84:	2a20      	cmp	r2, #32
 8003b86:	f000 8187 	beq.w	8003e98 <HAL_RCC_OscConfig+0x580>
 8003b8a:	490c      	ldr	r1, [pc, #48]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003b8c:	684b      	ldr	r3, [r1, #4]
 8003b8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b92:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003b96:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	e72d      	b.n	80039f8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <HAL_RCC_OscConfig+0x2a4>)
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba6:	e6df      	b.n	8003968 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003ba8:	4d05      	ldr	r5, [pc, #20]	; (8003bc0 <HAL_RCC_OscConfig+0x2a8>)
 8003baa:	682b      	ldr	r3, [r5, #0]
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003bb2:	f7fe fc49 	bl	8002448 <HAL_GetTick>
 8003bb6:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb8:	e009      	b.n	8003bce <HAL_RCC_OscConfig+0x2b6>
 8003bba:	bf00      	nop
 8003bbc:	58024400 	.word	0x58024400
 8003bc0:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bc4:	f7fe fc40 	bl	8002448 <HAL_GetTick>
 8003bc8:	1b80      	subs	r0, r0, r6
 8003bca:	2864      	cmp	r0, #100	; 0x64
 8003bcc:	d825      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	05da      	lsls	r2, r3, #23
 8003bd2:	d5f7      	bpl.n	8003bc4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f000 8158 	beq.w	8003e8c <HAL_RCC_OscConfig+0x574>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 812d 	beq.w	8003e3c <HAL_RCC_OscConfig+0x524>
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	4ba6      	ldr	r3, [pc, #664]	; (8003e80 <HAL_RCC_OscConfig+0x568>)
 8003be6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be8:	f000 815f 	beq.w	8003eaa <HAL_RCC_OscConfig+0x592>
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	671a      	str	r2, [r3, #112]	; 0x70
 8003bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf4:	f022 0204 	bic.w	r2, r2, #4
 8003bf8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fc25 	bl	8002448 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfe:	4ea0      	ldr	r6, [pc, #640]	; (8003e80 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c04:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c06:	e004      	b.n	8003c12 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fe fc1e 	bl	8002448 <HAL_GetTick>
 8003c0c:	1b40      	subs	r0, r0, r5
 8003c0e:	42b8      	cmp	r0, r7
 8003c10:	d803      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c12:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003c14:	079b      	lsls	r3, r3, #30
 8003c16:	d5f7      	bpl.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
 8003c18:	e723      	b.n	8003a62 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8003c1a:	2003      	movs	r0, #3
}
 8003c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1e:	4d98      	ldr	r5, [pc, #608]	; (8003e80 <HAL_RCC_OscConfig+0x568>)
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c30:	f7fe fc0a 	bl	8002448 <HAL_GetTick>
 8003c34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c36:	e004      	b.n	8003c42 <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe fc06 	bl	8002448 <HAL_GetTick>
 8003c3c:	1b80      	subs	r0, r0, r6
 8003c3e:	2864      	cmp	r0, #100	; 0x64
 8003c40:	d8eb      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	039f      	lsls	r7, r3, #14
 8003c46:	d4f7      	bmi.n	8003c38 <HAL_RCC_OscConfig+0x320>
 8003c48:	e69c      	b.n	8003984 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003c4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003c52:	f7fe fbf9 	bl	8002448 <HAL_GetTick>
 8003c56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c58:	e004      	b.n	8003c64 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fbf5 	bl	8002448 <HAL_GetTick>
 8003c5e:	1b80      	subs	r0, r0, r6
 8003c60:	2802      	cmp	r0, #2
 8003c62:	d8da      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003c66:	0799      	lsls	r1, r3, #30
 8003c68:	d4f7      	bmi.n	8003c5a <HAL_RCC_OscConfig+0x342>
 8003c6a:	e6dd      	b.n	8003a28 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003c74:	f7fe fbe8 	bl	8002448 <HAL_GetTick>
 8003c78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c7a:	e004      	b.n	8003c86 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c7c:	f7fe fbe4 	bl	8002448 <HAL_GetTick>
 8003c80:	1b80      	subs	r0, r0, r6
 8003c82:	2802      	cmp	r0, #2
 8003c84:	d8c9      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	0498      	lsls	r0, r3, #18
 8003c8a:	d4f7      	bmi.n	8003c7c <HAL_RCC_OscConfig+0x364>
 8003c8c:	e6e5      	b.n	8003a5a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8003c8e:	682b      	ldr	r3, [r5, #0]
 8003c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c96:	f7fe fbd7 	bl	8002448 <HAL_GetTick>
 8003c9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fbd3 	bl	8002448 <HAL_GetTick>
 8003ca2:	1b80      	subs	r0, r0, r6
 8003ca4:	2802      	cmp	r0, #2
 8003ca6:	d8b8      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	05df      	lsls	r7, r3, #23
 8003cac:	d4f7      	bmi.n	8003c9e <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	e6a2      	b.n	80039f8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fbc6 	bl	8002448 <HAL_GetTick>
 8003cbc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cbe:	e004      	b.n	8003cca <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fe fbc2 	bl	8002448 <HAL_GetTick>
 8003cc4:	1b80      	subs	r0, r0, r6
 8003cc6:	2802      	cmp	r0, #2
 8003cc8:	d8a7      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cca:	682b      	ldr	r3, [r5, #0]
 8003ccc:	0758      	lsls	r0, r3, #29
 8003cce:	d4f7      	bmi.n	8003cc0 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	e65b      	b.n	800398c <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cd4:	0790      	lsls	r0, r2, #30
 8003cd6:	f47f af1a 	bne.w	8003b0e <HAL_RCC_OscConfig+0x1f6>
 8003cda:	e6e7      	b.n	8003aac <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	686b      	ldr	r3, [r5, #4]
 8003cde:	6922      	ldr	r2, [r4, #16]
 8003ce0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ce4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ce8:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	e64e      	b.n	800398c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8003cee:	2001      	movs	r0, #1
}
 8003cf0:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cf2:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x568>)
 8003cf4:	6a21      	ldr	r1, [r4, #32]
 8003cf6:	68d3      	ldr	r3, [r2, #12]
 8003cf8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003cfc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d00:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	e678      	b.n	80039f8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8003d06:	f7fe fb9f 	bl	8002448 <HAL_GetTick>
 8003d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d0c:	e004      	b.n	8003d18 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fe fb9b 	bl	8002448 <HAL_GetTick>
 8003d12:	1b80      	subs	r0, r0, r6
 8003d14:	2802      	cmp	r0, #2
 8003d16:	d880      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	0199      	lsls	r1, r3, #6
 8003d1c:	d4f7      	bmi.n	8003d0e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003d20:	4b58      	ldr	r3, [pc, #352]	; (8003e84 <HAL_RCC_OscConfig+0x56c>)
 8003d22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d24:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d26:	4958      	ldr	r1, [pc, #352]	; (8003e88 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d28:	4e55      	ldr	r6, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d2e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003d32:	62ab      	str	r3, [r5, #40]	; 0x28
 8003d34:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	3a01      	subs	r2, #1
 8003d3c:	025b      	lsls	r3, r3, #9
 8003d3e:	0412      	lsls	r2, r2, #16
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003d46:	4313      	orrs	r3, r2
 8003d48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d4a:	3a01      	subs	r2, #1
 8003d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d50:	4313      	orrs	r3, r2
 8003d52:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0612      	lsls	r2, r2, #24
 8003d58:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003d6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d6c:	4011      	ands	r1, r2
 8003d6e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003d72:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d78:	f023 030c 	bic.w	r3, r3, #12
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d80:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d82:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d84:	f023 0302 	bic.w	r3, r3, #2
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d9c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003da4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003db4:	f7fe fb48 	bl	8002448 <HAL_GetTick>
 8003db8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dba:	e005      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe fb44 	bl	8002448 <HAL_GetTick>
 8003dc0:	1b00      	subs	r0, r0, r4
 8003dc2:	2802      	cmp	r0, #2
 8003dc4:	f63f af29 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dc8:	6833      	ldr	r3, [r6, #0]
 8003dca:	019a      	lsls	r2, r3, #6
 8003dcc:	d5f6      	bpl.n	8003dbc <HAL_RCC_OscConfig+0x4a4>
 8003dce:	e665      	b.n	8003a9c <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dd2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dd4:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	f43f ae62 	beq.w	8003a9e <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dde:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003de0:	428b      	cmp	r3, r1
 8003de2:	f47f aeb9 	bne.w	8003b58 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de6:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	f47f aeb3 	bne.w	8003b58 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003df4:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8003df8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	f47f aeac 	bne.w	8003b58 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e02:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8003e06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f47f aea5 	bne.w	8003b58 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e10:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8003e14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	f47f ae9e 	bne.w	8003b58 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003e1e:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8003e22:	3801      	subs	r0, #1
    return HAL_ERROR;
 8003e24:	1a28      	subs	r0, r5, r0
 8003e26:	bf18      	it	ne
 8003e28:	2001      	movne	r0, #1
}
 8003e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e595      	b.n	8003968 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	4d10      	ldr	r5, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	672b      	str	r3, [r5, #112]	; 0x70
 8003e4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003e52:	f7fe faf9 	bl	8002448 <HAL_GetTick>
 8003e56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e58:	e005      	b.n	8003e66 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe faf5 	bl	8002448 <HAL_GetTick>
 8003e5e:	1b80      	subs	r0, r0, r6
 8003e60:	42b8      	cmp	r0, r7
 8003e62:	f63f aeda 	bhi.w	8003c1a <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e66:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e68:	0798      	lsls	r0, r3, #30
 8003e6a:	d4f6      	bmi.n	8003e5a <HAL_RCC_OscConfig+0x542>
 8003e6c:	e5f9      	b.n	8003a62 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e6e:	68eb      	ldr	r3, [r5, #12]
 8003e70:	6a22      	ldr	r2, [r4, #32]
 8003e72:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003e76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e7a:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	e5bb      	b.n	80039f8 <HAL_RCC_OscConfig+0xe0>
 8003e80:	58024400 	.word	0x58024400
 8003e84:	fffffc0c 	.word	0xfffffc0c
 8003e88:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <HAL_RCC_OscConfig+0x5a4>)
 8003e8e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e96:	e6b0      	b.n	8003bfa <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e98:	4a08      	ldr	r2, [pc, #32]	; (8003ebc <HAL_RCC_OscConfig+0x5a4>)
 8003e9a:	6853      	ldr	r3, [r2, #4]
 8003e9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	e5a6      	b.n	80039f8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eaa:	f042 0204 	orr.w	r2, r2, #4
 8003eae:	671a      	str	r2, [r3, #112]	; 0x70
 8003eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	671a      	str	r2, [r3, #112]	; 0x70
 8003eb8:	e69f      	b.n	8003bfa <HAL_RCC_OscConfig+0x2e2>
 8003eba:	bf00      	nop
 8003ebc:	58024400 	.word	0x58024400

08003ec0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x34>)
 8003ec2:	6913      	ldr	r3, [r2, #16]
 8003ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d004      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x16>
 8003ecc:	2b18      	cmp	r3, #24
 8003ece:	d00d      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x2c>
 8003ed0:	b11b      	cbz	r3, 8003eda <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8003ed2:	4809      	ldr	r0, [pc, #36]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x38>)
 8003ed4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed6:	4809      	ldr	r0, [pc, #36]	; (8003efc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ed8:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	069b      	lsls	r3, r3, #26
 8003ede:	d507      	bpl.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ee0:	6813      	ldr	r3, [r2, #0]
 8003ee2:	4807      	ldr	r0, [pc, #28]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x40>)
 8003ee4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003ee8:	40d8      	lsrs	r0, r3
 8003eea:	4770      	bx	lr
 8003eec:	f7ff bc90 	b.w	8003810 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ef0:	4803      	ldr	r0, [pc, #12]	; (8003f00 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003ef2:	4770      	bx	lr
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	003d0900 	.word	0x003d0900
 8003efc:	017d7840 	.word	0x017d7840
 8003f00:	03d09000 	.word	0x03d09000

08003f04 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003f04:	2800      	cmp	r0, #0
 8003f06:	f000 810c 	beq.w	8004122 <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0a:	4a8c      	ldr	r2, [pc, #560]	; (800413c <HAL_RCC_ClockConfig+0x238>)
 8003f0c:	6813      	ldr	r3, [r2, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	428b      	cmp	r3, r1
{
 8003f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f18:	4604      	mov	r4, r0
 8003f1a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1c:	d20c      	bcs.n	8003f38 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	f023 030f 	bic.w	r3, r3, #15
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	428b      	cmp	r3, r1
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003f32:	2001      	movs	r0, #1
}
 8003f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	075f      	lsls	r7, r3, #29
 8003f3c:	d50b      	bpl.n	8003f56 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f3e:	4980      	ldr	r1, [pc, #512]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8003f40:	6920      	ldr	r0, [r4, #16]
 8003f42:	698a      	ldr	r2, [r1, #24]
 8003f44:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003f48:	4290      	cmp	r0, r2
 8003f4a:	d904      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f4c:	698a      	ldr	r2, [r1, #24]
 8003f4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f52:	4302      	orrs	r2, r0
 8003f54:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f56:	071e      	lsls	r6, r3, #28
 8003f58:	d50b      	bpl.n	8003f72 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f5a:	4979      	ldr	r1, [pc, #484]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8003f5c:	6960      	ldr	r0, [r4, #20]
 8003f5e:	69ca      	ldr	r2, [r1, #28]
 8003f60:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003f64:	4290      	cmp	r0, r2
 8003f66:	d904      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f68:	69ca      	ldr	r2, [r1, #28]
 8003f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f6e:	4302      	orrs	r2, r0
 8003f70:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f72:	06d8      	lsls	r0, r3, #27
 8003f74:	d50b      	bpl.n	8003f8e <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f76:	4972      	ldr	r1, [pc, #456]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8003f78:	69a0      	ldr	r0, [r4, #24]
 8003f7a:	69ca      	ldr	r2, [r1, #28]
 8003f7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f80:	4290      	cmp	r0, r2
 8003f82:	d904      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f84:	69ca      	ldr	r2, [r1, #28]
 8003f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f8a:	4302      	orrs	r2, r0
 8003f8c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f8e:	0699      	lsls	r1, r3, #26
 8003f90:	d50b      	bpl.n	8003faa <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f92:	496b      	ldr	r1, [pc, #428]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8003f94:	69e0      	ldr	r0, [r4, #28]
 8003f96:	6a0a      	ldr	r2, [r1, #32]
 8003f98:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003f9c:	4290      	cmp	r0, r2
 8003f9e:	d904      	bls.n	8003faa <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fa0:	6a0a      	ldr	r2, [r1, #32]
 8003fa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fa6:	4302      	orrs	r2, r0
 8003fa8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003faa:	079a      	lsls	r2, r3, #30
 8003fac:	f140 80ab 	bpl.w	8004106 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fb0:	4863      	ldr	r0, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8003fb2:	68e1      	ldr	r1, [r4, #12]
 8003fb4:	6982      	ldr	r2, [r0, #24]
 8003fb6:	f002 020f 	and.w	r2, r2, #15
 8003fba:	4291      	cmp	r1, r2
 8003fbc:	d904      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbe:	6982      	ldr	r2, [r0, #24]
 8003fc0:	f022 020f 	bic.w	r2, r2, #15
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc8:	07d8      	lsls	r0, r3, #31
 8003fca:	d530      	bpl.n	800402e <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fcc:	4a5c      	ldr	r2, [pc, #368]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8003fce:	68a1      	ldr	r1, [r4, #8]
 8003fd0:	6993      	ldr	r3, [r2, #24]
 8003fd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fdc:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fde:	2902      	cmp	r1, #2
 8003fe0:	f000 80a1 	beq.w	8004126 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fe4:	2903      	cmp	r1, #3
 8003fe6:	f000 8098 	beq.w	800411a <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fea:	2901      	cmp	r1, #1
 8003fec:	f000 80a1 	beq.w	8004132 <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff0:	0758      	lsls	r0, r3, #29
 8003ff2:	d59e      	bpl.n	8003f32 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ff4:	4e52      	ldr	r6, [pc, #328]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff6:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	6933      	ldr	r3, [r6, #16]
 8003ffc:	f023 0307 	bic.w	r3, r3, #7
 8004000:	430b      	orrs	r3, r1
 8004002:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8004004:	f7fe fa20 	bl	8002448 <HAL_GetTick>
 8004008:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	e005      	b.n	8004018 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400c:	f7fe fa1c 	bl	8002448 <HAL_GetTick>
 8004010:	1bc0      	subs	r0, r0, r7
 8004012:	4540      	cmp	r0, r8
 8004014:	f200 808b 	bhi.w	800412e <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004018:	6933      	ldr	r3, [r6, #16]
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004020:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004024:	d1f2      	bne.n	800400c <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	0799      	lsls	r1, r3, #30
 800402a:	d506      	bpl.n	800403a <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800402c:	68e1      	ldr	r1, [r4, #12]
 800402e:	4844      	ldr	r0, [pc, #272]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8004030:	6982      	ldr	r2, [r0, #24]
 8004032:	f002 020f 	and.w	r2, r2, #15
 8004036:	428a      	cmp	r2, r1
 8004038:	d869      	bhi.n	800410e <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403a:	4940      	ldr	r1, [pc, #256]	; (800413c <HAL_RCC_ClockConfig+0x238>)
 800403c:	680a      	ldr	r2, [r1, #0]
 800403e:	f002 020f 	and.w	r2, r2, #15
 8004042:	42aa      	cmp	r2, r5
 8004044:	d90a      	bls.n	800405c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	680a      	ldr	r2, [r1, #0]
 8004048:	f022 020f 	bic.w	r2, r2, #15
 800404c:	432a      	orrs	r2, r5
 800404e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004050:	680a      	ldr	r2, [r1, #0]
 8004052:	f002 020f 	and.w	r2, r2, #15
 8004056:	42aa      	cmp	r2, r5
 8004058:	f47f af6b 	bne.w	8003f32 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800405c:	075a      	lsls	r2, r3, #29
 800405e:	d50b      	bpl.n	8004078 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004060:	4937      	ldr	r1, [pc, #220]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 8004062:	6920      	ldr	r0, [r4, #16]
 8004064:	698a      	ldr	r2, [r1, #24]
 8004066:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800406a:	4290      	cmp	r0, r2
 800406c:	d204      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800406e:	698a      	ldr	r2, [r1, #24]
 8004070:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004074:	4302      	orrs	r2, r0
 8004076:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	071f      	lsls	r7, r3, #28
 800407a:	d50b      	bpl.n	8004094 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800407c:	4930      	ldr	r1, [pc, #192]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 800407e:	6960      	ldr	r0, [r4, #20]
 8004080:	69ca      	ldr	r2, [r1, #28]
 8004082:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004086:	4290      	cmp	r0, r2
 8004088:	d204      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800408a:	69ca      	ldr	r2, [r1, #28]
 800408c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004090:	4302      	orrs	r2, r0
 8004092:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	06de      	lsls	r6, r3, #27
 8004096:	d50b      	bpl.n	80040b0 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004098:	4929      	ldr	r1, [pc, #164]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 800409a:	69a0      	ldr	r0, [r4, #24]
 800409c:	69ca      	ldr	r2, [r1, #28]
 800409e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80040a2:	4290      	cmp	r0, r2
 80040a4:	d204      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040a6:	69ca      	ldr	r2, [r1, #28]
 80040a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ac:	4302      	orrs	r2, r0
 80040ae:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040b0:	069d      	lsls	r5, r3, #26
 80040b2:	d50b      	bpl.n	80040cc <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 80040b6:	69e1      	ldr	r1, [r4, #28]
 80040b8:	6a13      	ldr	r3, [r2, #32]
 80040ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040be:	4299      	cmp	r1, r3
 80040c0:	d204      	bcs.n	80040cc <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80040c2:	6a13      	ldr	r3, [r2, #32]
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040cc:	f7ff fef8 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <HAL_RCC_ClockConfig+0x23c>)
 80040d2:	4603      	mov	r3, r0
 80040d4:	481b      	ldr	r0, [pc, #108]	; (8004144 <HAL_RCC_ClockConfig+0x240>)
 80040d6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040d8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040da:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80040de:	4d1a      	ldr	r5, [pc, #104]	; (8004148 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e0:	f002 020f 	and.w	r2, r2, #15
 80040e4:	4c19      	ldr	r4, [pc, #100]	; (800414c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040e6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040e8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040ea:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80040ee:	4818      	ldr	r0, [pc, #96]	; (8004150 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040f0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040f4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 80040f6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80040f8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040fa:	40d3      	lsrs	r3, r2
 80040fc:	6023      	str	r3, [r4, #0]
}
 80040fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8004102:	f7fd bf3d 	b.w	8001f80 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	07da      	lsls	r2, r3, #31
 8004108:	f53f af60 	bmi.w	8003fcc <HAL_RCC_ClockConfig+0xc8>
 800410c:	e795      	b.n	800403a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410e:	6982      	ldr	r2, [r0, #24]
 8004110:	f022 020f 	bic.w	r2, r2, #15
 8004114:	430a      	orrs	r2, r1
 8004116:	6182      	str	r2, [r0, #24]
 8004118:	e78f      	b.n	800403a <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800411a:	019f      	lsls	r7, r3, #6
 800411c:	f53f af6a 	bmi.w	8003ff4 <HAL_RCC_ClockConfig+0xf0>
 8004120:	e707      	b.n	8003f32 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004122:	2001      	movs	r0, #1
}
 8004124:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004126:	039b      	lsls	r3, r3, #14
 8004128:	f53f af64 	bmi.w	8003ff4 <HAL_RCC_ClockConfig+0xf0>
 800412c:	e701      	b.n	8003f32 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 800412e:	2003      	movs	r0, #3
 8004130:	e700      	b.n	8003f34 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004132:	05de      	lsls	r6, r3, #23
 8004134:	f53f af5e 	bmi.w	8003ff4 <HAL_RCC_ClockConfig+0xf0>
 8004138:	e6fb      	b.n	8003f32 <HAL_RCC_ClockConfig+0x2e>
 800413a:	bf00      	nop
 800413c:	52002000 	.word	0x52002000
 8004140:	58024400 	.word	0x58024400
 8004144:	08014f9c 	.word	0x08014f9c
 8004148:	24000014 	.word	0x24000014
 800414c:	24000018 	.word	0x24000018
 8004150:	24000020 	.word	0x24000020

08004154 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004154:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004156:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004158:	6913      	ldr	r3, [r2, #16]
 800415a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800415e:	2b10      	cmp	r3, #16
 8004160:	d01a      	beq.n	8004198 <HAL_RCC_GetHCLKFreq+0x44>
 8004162:	2b18      	cmp	r3, #24
 8004164:	d023      	beq.n	80041ae <HAL_RCC_GetHCLKFreq+0x5a>
 8004166:	b1cb      	cbz	r3, 800419c <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8004168:	4814      	ldr	r0, [pc, #80]	; (80041bc <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x64>)
 800416c:	4914      	ldr	r1, [pc, #80]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x6c>)
 800416e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004170:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004172:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004176:	4c13      	ldr	r4, [pc, #76]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x70>)
 8004178:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800417c:	4d12      	ldr	r5, [pc, #72]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800417e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004180:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004182:	f002 021f 	and.w	r2, r2, #31
 8004186:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800418a:	f003 001f 	and.w	r0, r3, #31
 800418e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004192:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004194:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004196:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004198:	480c      	ldr	r0, [pc, #48]	; (80041cc <HAL_RCC_GetHCLKFreq+0x78>)
 800419a:	e7e6      	b.n	800416a <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800419c:	6813      	ldr	r3, [r2, #0]
 800419e:	069b      	lsls	r3, r3, #26
 80041a0:	d508      	bpl.n	80041b4 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	480a      	ldr	r0, [pc, #40]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x7c>)
 80041a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80041aa:	40d8      	lsrs	r0, r3
 80041ac:	e7dd      	b.n	800416a <HAL_RCC_GetHCLKFreq+0x16>
 80041ae:	f7ff fb2f 	bl	8003810 <HAL_RCC_GetSysClockFreq.part.0>
 80041b2:	e7da      	b.n	800416a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041b4:	4806      	ldr	r0, [pc, #24]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x7c>)
 80041b6:	e7d8      	b.n	800416a <HAL_RCC_GetHCLKFreq+0x16>
 80041b8:	58024400 	.word	0x58024400
 80041bc:	003d0900 	.word	0x003d0900
 80041c0:	08014f9c 	.word	0x08014f9c
 80041c4:	24000018 	.word	0x24000018
 80041c8:	24000014 	.word	0x24000014
 80041cc:	017d7840 	.word	0x017d7840
 80041d0:	03d09000 	.word	0x03d09000

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041d6:	f7ff ffbd 	bl	8004154 <HAL_RCC_GetHCLKFreq>
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041dc:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041ea:	40d8      	lsrs	r0, r3
 80041ec:	bd08      	pop	{r3, pc}
 80041ee:	bf00      	nop
 80041f0:	58024400 	.word	0x58024400
 80041f4:	08014f9c 	.word	0x08014f9c

080041f8 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80041fa:	223f      	movs	r2, #63	; 0x3f
 80041fc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	f002 0207 	and.w	r2, r2, #7
 8004204:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004206:	699a      	ldr	r2, [r3, #24]
 8004208:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800420c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	f002 020f 	and.w	r2, r2, #15
 8004214:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800421c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004224:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800422c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800422e:	6a1b      	ldr	r3, [r3, #32]
{
 8004230:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004232:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004236:	4c05      	ldr	r4, [pc, #20]	; (800424c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004238:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800423a:	6823      	ldr	r3, [r4, #0]
}
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	600b      	str	r3, [r1, #0]
}
 8004246:	4770      	bx	lr
 8004248:	58024400 	.word	0x58024400
 800424c:	52002000 	.word	0x52002000

08004250 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop

08004254 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004254:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004258:	2b01      	cmp	r3, #1
 800425a:	d141      	bne.n	80042e0 <HAL_TIM_Base_Start_IT+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004262:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004266:	bf18      	it	ne
 8004268:	429a      	cmpne	r2, r3
{
 800426a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	4d21      	ldr	r5, [pc, #132]	; (80042f8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004274:	4c21      	ldr	r4, [pc, #132]	; (80042fc <HAL_TIM_Base_Start_IT+0xa8>)
 8004276:	42aa      	cmp	r2, r5
 8004278:	bf08      	it	eq
 800427a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800427e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004282:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004284:	42a2      	cmp	r2, r4
 8004286:	bf08      	it	eq
 8004288:	f043 0301 	orreq.w	r3, r3, #1
 800428c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	481a      	ldr	r0, [pc, #104]	; (8004300 <HAL_TIM_Base_Start_IT+0xac>)
 8004296:	42a2      	cmp	r2, r4
 8004298:	bf08      	it	eq
 800429a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800429e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	4282      	cmp	r2, r0
 80042a2:	bf08      	it	eq
 80042a4:	f043 0301 	orreq.w	r3, r3, #1
 80042a8:	4916      	ldr	r1, [pc, #88]	; (8004304 <HAL_TIM_Base_Start_IT+0xb0>)
 80042aa:	428a      	cmp	r2, r1
 80042ac:	bf08      	it	eq
 80042ae:	f043 0301 	orreq.w	r3, r3, #1
 80042b2:	b933      	cbnz	r3, 80042c2 <HAL_TIM_Base_Start_IT+0x6e>
 80042b4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 80042b8:	1a10      	subs	r0, r2, r0
 80042ba:	fab0 f080 	clz	r0, r0
 80042be:	0940      	lsrs	r0, r0, #5
 80042c0:	b198      	cbz	r0, 80042ea <HAL_TIM_Base_Start_IT+0x96>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c2:	6891      	ldr	r1, [r2, #8]
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_TIM_Base_Start_IT+0xb4>)
 80042c6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d00b      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x90>
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d008      	beq.n	80042e4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80042d2:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80042d4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bc30      	pop	{r4, r5}
 80042de:	4770      	bx	lr
    return HAL_ERROR;
 80042e0:	2001      	movs	r0, #1
}
 80042e2:	4770      	bx	lr
  return HAL_OK;
 80042e4:	2000      	movs	r0, #0
}
 80042e6:	bc30      	pop	{r4, r5}
 80042e8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e7f3      	b.n	80042dc <HAL_TIM_Base_Start_IT+0x88>
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40010400 	.word	0x40010400
 8004304:	40001800 	.word	0x40001800
 8004308:	00010007 	.word	0x00010007

0800430c <HAL_TIM_OC_DelayElapsedCallback>:
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <HAL_TIM_IC_CaptureCallback>:
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <HAL_TIM_TriggerCallback>:
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop

0800431c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800431c:	6803      	ldr	r3, [r0, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	0791      	lsls	r1, r2, #30
{
 8004322:	b510      	push	{r4, lr}
 8004324:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004326:	d502      	bpl.n	800432e <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	0792      	lsls	r2, r2, #30
 800432c:	d468      	bmi.n	8004400 <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	0752      	lsls	r2, r2, #29
 8004332:	d502      	bpl.n	800433a <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	0750      	lsls	r0, r2, #29
 8004338:	d44f      	bmi.n	80043da <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	0711      	lsls	r1, r2, #28
 800433e:	d502      	bpl.n	8004346 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	0712      	lsls	r2, r2, #28
 8004344:	d437      	bmi.n	80043b6 <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	06d0      	lsls	r0, r2, #27
 800434a:	d502      	bpl.n	8004352 <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	06d1      	lsls	r1, r2, #27
 8004350:	d41e      	bmi.n	8004390 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	07d2      	lsls	r2, r2, #31
 8004356:	d502      	bpl.n	800435e <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	07d0      	lsls	r0, r2, #31
 800435c:	d469      	bmi.n	8004432 <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	0611      	lsls	r1, r2, #24
 8004362:	d502      	bpl.n	800436a <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	0612      	lsls	r2, r2, #24
 8004368:	d46b      	bmi.n	8004442 <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	05d0      	lsls	r0, r2, #23
 800436e:	d502      	bpl.n	8004376 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	0611      	lsls	r1, r2, #24
 8004374:	d46d      	bmi.n	8004452 <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	0652      	lsls	r2, r2, #25
 800437a:	d502      	bpl.n	8004382 <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	0650      	lsls	r0, r2, #25
 8004380:	d46f      	bmi.n	8004462 <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	0691      	lsls	r1, r2, #26
 8004386:	d502      	bpl.n	800438e <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	0692      	lsls	r2, r2, #26
 800438c:	d449      	bmi.n	8004422 <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800438e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004390:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004394:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004398:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043a2:	d16f      	bne.n	8004484 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a4:	f7ff ffb2 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff ffb3 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043b0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	7722      	strb	r2, [r4, #28]
 80043b4:	e7cd      	b.n	8004352 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ba:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80043bc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043be:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	079b      	lsls	r3, r3, #30
 80043c6:	d15a      	bne.n	800447e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c8:	f7ff ffa0 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	4620      	mov	r0, r4
 80043ce:	f7ff ffa1 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	7722      	strb	r2, [r4, #28]
 80043d8:	e7b5      	b.n	8004346 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043da:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043de:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043ec:	d144      	bne.n	8004478 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	f7ff ff8d 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f2:	4620      	mov	r0, r4
 80043f4:	f7ff ff8e 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043fa:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fc:	7722      	strb	r2, [r4, #28]
 80043fe:	e79c      	b.n	800433a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004400:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004404:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004406:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004408:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	0799      	lsls	r1, r3, #30
 800440e:	d130      	bne.n	8004472 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004410:	f7ff ff7c 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	4620      	mov	r0, r4
 8004416:	f7ff ff7d 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800441c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	7722      	strb	r2, [r4, #28]
 8004420:	e785      	b.n	800432e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004422:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004426:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004428:	611a      	str	r2, [r3, #16]
}
 800442a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800442e:	f000 b8eb 	b.w	8004608 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004432:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004436:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004438:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800443a:	f7fd fd6f 	bl	8001f1c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	e78d      	b.n	800435e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004442:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004446:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004448:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800444a:	f000 f8df 	bl	800460c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	e78b      	b.n	800436a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004452:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004456:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004458:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800445a:	f000 f8d9 	bl	8004610 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	e789      	b.n	8004376 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004462:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004466:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004468:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800446a:	f7ff ff55 	bl	8004318 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	e787      	b.n	8004382 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004472:	f7ff ff4d 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8004476:	e7d0      	b.n	800441a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004478:	f7ff ff4a 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 800447c:	e7bc      	b.n	80043f8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	f7ff ff47 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8004482:	e7a6      	b.n	80043d2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004484:	f7ff ff44 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8004488:	e791      	b.n	80043ae <HAL_TIM_IRQHandler+0x92>
 800448a:	bf00      	nop

0800448c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <TIM_Base_SetConfig+0x100>)
 800448e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8004492:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004494:	eba0 0202 	sub.w	r2, r0, r2
 8004498:	fab2 f282 	clz	r2, r2
{
 800449c:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80044a2:	d023      	beq.n	80044ec <TIM_Base_SetConfig+0x60>
 80044a4:	bb12      	cbnz	r2, 80044ec <TIM_Base_SetConfig+0x60>
 80044a6:	4c3a      	ldr	r4, [pc, #232]	; (8004590 <TIM_Base_SetConfig+0x104>)
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d047      	beq.n	800453c <TIM_Base_SetConfig+0xb0>
 80044ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d043      	beq.n	800453c <TIM_Base_SetConfig+0xb0>
 80044b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80044b8:	42a0      	cmp	r0, r4
 80044ba:	d049      	beq.n	8004550 <TIM_Base_SetConfig+0xc4>
 80044bc:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80044c0:	42a0      	cmp	r0, r4
 80044c2:	d045      	beq.n	8004550 <TIM_Base_SetConfig+0xc4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c4:	4c33      	ldr	r4, [pc, #204]	; (8004594 <TIM_Base_SetConfig+0x108>)
 80044c6:	4a34      	ldr	r2, [pc, #208]	; (8004598 <TIM_Base_SetConfig+0x10c>)
 80044c8:	4290      	cmp	r0, r2
 80044ca:	bf18      	it	ne
 80044cc:	42a0      	cmpne	r0, r4
 80044ce:	d04f      	beq.n	8004570 <TIM_Base_SetConfig+0xe4>
 80044d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044d4:	4290      	cmp	r0, r2
 80044d6:	d04b      	beq.n	8004570 <TIM_Base_SetConfig+0xe4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	694d      	ldr	r5, [r1, #20]
 80044da:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044de:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e0:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80044e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044e8:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ea:	e023      	b.n	8004534 <TIM_Base_SetConfig+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80044ec:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80044f2:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f4:	4c29      	ldr	r4, [pc, #164]	; (800459c <TIM_Base_SetConfig+0x110>)
 80044f6:	1b04      	subs	r4, r0, r4
 80044f8:	fab4 f484 	clz	r4, r4
 80044fc:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004504:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004506:	694d      	ldr	r5, [r1, #20]
 8004508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800450e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	688b      	ldr	r3, [r1, #8]
 8004512:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004514:	680b      	ldr	r3, [r1, #0]
 8004516:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	b952      	cbnz	r2, 8004530 <TIM_Base_SetConfig+0xa4>
 800451a:	b94c      	cbnz	r4, 8004530 <TIM_Base_SetConfig+0xa4>
 800451c:	4a1d      	ldr	r2, [pc, #116]	; (8004594 <TIM_Base_SetConfig+0x108>)
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <TIM_Base_SetConfig+0x10c>)
 8004520:	4298      	cmp	r0, r3
 8004522:	bf18      	it	ne
 8004524:	4290      	cmpne	r0, r2
 8004526:	d003      	beq.n	8004530 <TIM_Base_SetConfig+0xa4>
 8004528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800452c:	4298      	cmp	r0, r3
 800452e:	d101      	bne.n	8004534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	690b      	ldr	r3, [r1, #16]
 8004532:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	2301      	movs	r3, #1
}
 8004536:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004538:	6143      	str	r3, [r0, #20]
}
 800453a:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	4c17      	ldr	r4, [pc, #92]	; (800459c <TIM_Base_SetConfig+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004542:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004544:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8004546:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004548:	fab4 f484 	clz	r4, r4
 800454c:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	e7d6      	b.n	80044fe <TIM_Base_SetConfig+0x72>
    tmpcr1 |= Structure->CounterMode;
 8004550:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004556:	4c11      	ldr	r4, [pc, #68]	; (800459c <TIM_Base_SetConfig+0x110>)
    tmpcr1 |= Structure->CounterMode;
 8004558:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800455a:	4d11      	ldr	r5, [pc, #68]	; (80045a0 <TIM_Base_SetConfig+0x114>)
 800455c:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455e:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004560:	fab4 f484 	clz	r4, r4
 8004564:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004568:	d0c9      	beq.n	80044fe <TIM_Base_SetConfig+0x72>
 800456a:	2c00      	cmp	r4, #0
 800456c:	d1c7      	bne.n	80044fe <TIM_Base_SetConfig+0x72>
 800456e:	e7a9      	b.n	80044c4 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004570:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004576:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004578:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004580:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004582:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004584:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004586:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004588:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458a:	e7c7      	b.n	800451c <TIM_Base_SetConfig+0x90>
 800458c:	40010000 	.word	0x40010000
 8004590:	40000400 	.word	0x40000400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40010400 	.word	0x40010400
 80045a0:	40000c00 	.word	0x40000c00

080045a4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80045a4:	b370      	cbz	r0, 8004604 <HAL_TIM_Base_Init+0x60>
{
 80045a6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80045a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045ac:	4604      	mov	r4, r0
 80045ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045b2:	b313      	cbz	r3, 80045fa <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80045c0:	f7ff ff64 	bl	800448c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	2301      	movs	r3, #1
  return HAL_OK;
 80045c6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80045d0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80045d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80045d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80045dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80045e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045ec:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80045f0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80045f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80045fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045fe:	f7ff fe27 	bl	8004250 <HAL_TIM_Base_MspInit>
 8004602:	e7d7      	b.n	80045b4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004604:	2001      	movs	r0, #1
}
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_CommutCallback>:
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop

0800460c <HAL_TIMEx_BreakCallback>:
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <HAL_TIMEx_Break2Callback>:
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop

08004614 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <MX_LWIP_Init>:
{
 8004618:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 800461a:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 800461c:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 800461e:	4f25      	ldr	r7, [pc, #148]	; (80046b4 <MX_LWIP_Init+0x9c>)
{
 8004620:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 8004622:	4e25      	ldr	r6, [pc, #148]	; (80046b8 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 8004624:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 8004626:	4d25      	ldr	r5, [pc, #148]	; (80046bc <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 8004628:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 800462a:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 800462c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8004630:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 8004632:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 8004634:	f004 fdb0 	bl	8009198 <tcpip_init>
	LOCK_TCPIP_CORE();
 8004638:	f000 fb20 	bl	8004c7c <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800463c:	4920      	ldr	r1, [pc, #128]	; (80046c0 <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800463e:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004640:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004642:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004644:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004646:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004648:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800464a:	6828      	ldr	r0, [r5, #0]
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800464e:	4c1f      	ldr	r4, [pc, #124]	; (80046cc <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004650:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004652:	481f      	ldr	r0, [pc, #124]	; (80046d0 <MX_LWIP_Init+0xb8>)
 8004654:	9002      	str	r0, [sp, #8]
 8004656:	481f      	ldr	r0, [pc, #124]	; (80046d4 <MX_LWIP_Init+0xbc>)
 8004658:	9001      	str	r0, [sp, #4]
 800465a:	4620      	mov	r0, r4
 800465c:	f005 fa76 	bl	8009b4c <netif_add>
  netif_set_default(&gnetif);
 8004660:	4620      	mov	r0, r4
 8004662:	f005 fb29 	bl	8009cb8 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8004666:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 800466a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800466c:	075b      	lsls	r3, r3, #29
 800466e:	d51c      	bpl.n	80046aa <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 8004670:	f005 fb2c 	bl	8009ccc <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004674:	4c18      	ldr	r4, [pc, #96]	; (80046d8 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004676:	4919      	ldr	r1, [pc, #100]	; (80046dc <MX_LWIP_Init+0xc4>)
 8004678:	4814      	ldr	r0, [pc, #80]	; (80046cc <MX_LWIP_Init+0xb4>)
 800467a:	f005 fbbb 	bl	8009df4 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800467e:	2220      	movs	r2, #32
 8004680:	2100      	movs	r1, #0
 8004682:	1d20      	adds	r0, r4, #4
 8004684:	f00e f801 	bl	801268a <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004688:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 800468c:	4814      	ldr	r0, [pc, #80]	; (80046e0 <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 800468e:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004690:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004692:	4622      	mov	r2, r4
 8004694:	490d      	ldr	r1, [pc, #52]	; (80046cc <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 8004696:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004698:	4812      	ldr	r0, [pc, #72]	; (80046e4 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 800469a:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800469c:	f000 fbf4 	bl	8004e88 <osThreadNew>
}
 80046a0:	b005      	add	sp, #20
 80046a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 80046a6:	f000 bb67 	b.w	8004d78 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 80046aa:	f005 fb33 	bl	8009d14 <netif_set_down>
 80046ae:	e7e1      	b.n	8004674 <MX_LWIP_Init+0x5c>
 80046b0:	0a01a8c0 	.word	0x0a01a8c0
 80046b4:	240008f8 	.word	0x240008f8
 80046b8:	240008fc 	.word	0x240008fc
 80046bc:	240008f4 	.word	0x240008f4
 80046c0:	2400095c 	.word	0x2400095c
 80046c4:	24000960 	.word	0x24000960
 80046c8:	24000958 	.word	0x24000958
 80046cc:	24000924 	.word	0x24000924
 80046d0:	080090fd 	.word	0x080090fd
 80046d4:	080048a9 	.word	0x080048a9
 80046d8:	24000900 	.word	0x24000900
 80046dc:	08004615 	.word	0x08004615
 80046e0:	08014fac 	.word	0x08014fac
 80046e4:	08004c99 	.word	0x08004c99

080046e8 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80046e8:	2000      	movs	r0, #0
 80046ea:	4770      	bx	lr

080046ec <low_level_output>:
{
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	b08c      	sub	sp, #48	; 0x30
 80046f0:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80046f2:	2230      	movs	r2, #48	; 0x30
 80046f4:	2100      	movs	r1, #0
 80046f6:	4668      	mov	r0, sp
 80046f8:	f00d ffc7 	bl	801268a <memset>
  for(q = p; q != NULL; q = q->next)
 80046fc:	b1fc      	cbz	r4, 800473e <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 80046fe:	8962      	ldrh	r2, [r4, #10]
 8004700:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 8004702:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 8004704:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 8004708:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 800470a:	e9cd 1200 	strd	r1, r2, [sp]
 800470e:	4622      	mov	r2, r4
    if(q->next == NULL)
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	b16a      	cbz	r2, 8004730 <low_level_output+0x44>
    i++;
 8004714:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8004718:	f1bc 0f04 	cmp.w	ip, #4
 800471c:	d02b      	beq.n	8004776 <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 800471e:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 8004720:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 8004722:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8004724:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 8004726:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 800472a:	330c      	adds	r3, #12
    if(q->next == NULL)
 800472c:	2a00      	cmp	r2, #0
 800472e:	d1f1      	bne.n	8004714 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 8004730:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8004734:	ab0c      	add	r3, sp, #48	; 0x30
 8004736:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800473a:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 800473e:	4e10      	ldr	r6, [pc, #64]	; (8004780 <low_level_output+0x94>)
  pbuf_ref(p);
 8004740:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8004742:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 8004744:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 8004748:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 800474a:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 800474c:	f005 fe8e 	bl	800a46c <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004750:	4631      	mov	r1, r6
 8004752:	480c      	ldr	r0, [pc, #48]	; (8004784 <low_level_output+0x98>)
 8004754:	4d0c      	ldr	r5, [pc, #48]	; (8004788 <low_level_output+0x9c>)
 8004756:	f7fe fac9 	bl	8002cec <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800475a:	f04f 31ff 	mov.w	r1, #4294967295
 800475e:	6828      	ldr	r0, [r5, #0]
 8004760:	f000 fcc4 	bl	80050ec <osSemaphoreAcquire>
 8004764:	4604      	mov	r4, r0
 8004766:	2800      	cmp	r0, #0
 8004768:	d1f7      	bne.n	800475a <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 800476a:	4806      	ldr	r0, [pc, #24]	; (8004784 <low_level_output+0x98>)
 800476c:	f7fe fb78 	bl	8002e60 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8004770:	4620      	mov	r0, r4
}
 8004772:	b00c      	add	sp, #48	; 0x30
 8004774:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8004776:	f06f 000b 	mvn.w	r0, #11
}
 800477a:	b00c      	add	sp, #48	; 0x30
 800477c:	bd70      	pop	{r4, r5, r6, pc}
 800477e:	bf00      	nop
 8004780:	2400098c 	.word	0x2400098c
 8004784:	240009c8 	.word	0x240009c8
 8004788:	240009c4 	.word	0x240009c4

0800478c <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 800478c:	f7fd be5c 	b.w	8002448 <HAL_GetTick>

08004790 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <ETH_PHY_IO_Init+0xc>)
{
 8004792:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8004794:	f7fe fd7e 	bl	8003294 <HAL_ETH_SetMDIOClockRange>
}
 8004798:	2000      	movs	r0, #0
 800479a:	bd08      	pop	{r3, pc}
 800479c:	240009c8 	.word	0x240009c8

080047a0 <ETH_PHY_IO_ReadReg>:
{
 80047a0:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <ETH_PHY_IO_ReadReg+0x1c>)
{
 80047a4:	b508      	push	{r3, lr}
 80047a6:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80047a8:	460a      	mov	r2, r1
 80047aa:	4661      	mov	r1, ip
 80047ac:	f7fe fc3a 	bl	8003024 <HAL_ETH_ReadPHYRegister>
 80047b0:	3800      	subs	r0, #0
 80047b2:	bf18      	it	ne
 80047b4:	2001      	movne	r0, #1
}
 80047b6:	4240      	negs	r0, r0
 80047b8:	bd08      	pop	{r3, pc}
 80047ba:	bf00      	nop
 80047bc:	240009c8 	.word	0x240009c8

080047c0 <ETH_PHY_IO_WriteReg>:
{
 80047c0:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80047c2:	4806      	ldr	r0, [pc, #24]	; (80047dc <ETH_PHY_IO_WriteReg+0x1c>)
{
 80047c4:	b508      	push	{r3, lr}
 80047c6:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80047c8:	460a      	mov	r2, r1
 80047ca:	4661      	mov	r1, ip
 80047cc:	f7fe fc58 	bl	8003080 <HAL_ETH_WritePHYRegister>
 80047d0:	3800      	subs	r0, #0
 80047d2:	bf18      	it	ne
 80047d4:	2001      	movne	r0, #1
}
 80047d6:	4240      	negs	r0, r0
 80047d8:	bd08      	pop	{r3, pc}
 80047da:	bf00      	nop
 80047dc:	240009c8 	.word	0x240009c8

080047e0 <pbuf_free_custom>:
{
 80047e0:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80047e2:	4808      	ldr	r0, [pc, #32]	; (8004804 <pbuf_free_custom+0x24>)
{
 80047e4:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80047e6:	f005 f8cf 	bl	8009988 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <pbuf_free_custom+0x28>)
 80047ec:	781a      	ldrb	r2, [r3, #0]
 80047ee:	2a01      	cmp	r2, #1
 80047f0:	d000      	beq.n	80047f4 <pbuf_free_custom+0x14>
}
 80047f2:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 80047f4:	4905      	ldr	r1, [pc, #20]	; (800480c <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 80047f6:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 80047f8:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 80047fa:	701a      	strb	r2, [r3, #0]
}
 80047fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8004800:	f000 bca8 	b.w	8005154 <osSemaphoreRelease>
 8004804:	08015094 	.word	0x08015094
 8004808:	24000984 	.word	0x24000984
 800480c:	24000988 	.word	0x24000988

08004810 <ethernetif_input>:
{
 8004810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004814:	4c14      	ldr	r4, [pc, #80]	; (8004868 <ethernetif_input+0x58>)
 8004816:	b083      	sub	sp, #12
 8004818:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800486c <ethernetif_input+0x5c>
 800481c:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 800481e:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004820:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8004870 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004824:	f04f 31ff 	mov.w	r1, #4294967295
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	f000 fc5f 	bl	80050ec <osSemaphoreAcquire>
 800482e:	2800      	cmp	r0, #0
 8004830:	d1f8      	bne.n	8004824 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8004832:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8004836:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f3      	bne.n	8004824 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 800483c:	a901      	add	r1, sp, #4
 800483e:	4648      	mov	r0, r9
 8004840:	f7fe fa84 	bl	8002d4c <HAL_ETH_ReadData>
  return p;
 8004844:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
        if (p != NULL)
 800484a:	2d00      	cmp	r5, #0
 800484c:	d0ea      	beq.n	8004824 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 800484e:	6933      	ldr	r3, [r6, #16]
 8004850:	4798      	blx	r3
 8004852:	2800      	cmp	r0, #0
 8004854:	d0ed      	beq.n	8004832 <ethernetif_input+0x22>
            pbuf_free(p);
 8004856:	4628      	mov	r0, r5
 8004858:	f005 fc86 	bl	800a168 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 800485c:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8004860:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1de      	bne.n	8004824 <ethernetif_input+0x14>
 8004866:	e7e9      	b.n	800483c <ethernetif_input+0x2c>
 8004868:	24000988 	.word	0x24000988
 800486c:	24000984 	.word	0x24000984
 8004870:	240009c8 	.word	0x240009c8

08004874 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8004874:	4b01      	ldr	r3, [pc, #4]	; (800487c <HAL_ETH_RxCpltCallback+0x8>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	f000 bc6c 	b.w	8005154 <osSemaphoreRelease>
 800487c:	24000988 	.word	0x24000988

08004880 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8004880:	4b01      	ldr	r3, [pc, #4]	; (8004888 <HAL_ETH_TxCpltCallback+0x8>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	f000 bc66 	b.w	8005154 <osSemaphoreRelease>
 8004888:	240009c4 	.word	0x240009c4

0800488c <HAL_ETH_ErrorCallback>:
{
 800488c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800488e:	f7fe fe61 	bl	8003554 <HAL_ETH_GetDMAError>
 8004892:	0603      	lsls	r3, r0, #24
 8004894:	d400      	bmi.n	8004898 <HAL_ETH_ErrorCallback+0xc>
}
 8004896:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8004898:	4b02      	ldr	r3, [pc, #8]	; (80048a4 <HAL_ETH_ErrorCallback+0x18>)
 800489a:	6818      	ldr	r0, [r3, #0]
}
 800489c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80048a0:	f000 bc58 	b.w	8005154 <osSemaphoreRelease>
 80048a4:	24000988 	.word	0x24000988

080048a8 <ethernetif_init>:
{
 80048a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048ac:	4604      	mov	r4, r0
{
 80048ae:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80048b0:	2800      	cmp	r0, #0
 80048b2:	f000 80b7 	beq.w	8004a24 <ethernetif_init+0x17c>
  netif->linkoutput = low_level_output;
 80048b6:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 80048b8:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 80048bc:	4a5e      	ldr	r2, [pc, #376]	; (8004a38 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 80048be:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 80048c0:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 80048c2:	2100      	movs	r1, #0
  netif->output = etharp_output;
 80048c4:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 80048c6:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 80048c8:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 80048ca:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 80048cc:	f00d fedd 	bl	801268a <memset>
  heth.Instance = ETH;
 80048d0:	4d5a      	ldr	r5, [pc, #360]	; (8004a3c <ethernetif_init+0x194>)
 80048d2:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80048d4:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80048d6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8004a80 <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048da:	4628      	mov	r0, r5
  heth.Instance = ETH;
 80048dc:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 80048de:	4b59      	ldr	r3, [pc, #356]	; (8004a44 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 80048e0:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 80048e4:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 80048e6:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 80048e8:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 80048ec:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80048ee:	4b57      	ldr	r3, [pc, #348]	; (8004a4c <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80048f0:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 80048f2:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 80048f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80048f8:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048fa:	f7fe fd0d 	bl	8003318 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80048fe:	2234      	movs	r2, #52	; 0x34
 8004900:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004902:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004904:	f109 0004 	add.w	r0, r9, #4
 8004908:	f00d febf 	bl	801268a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800490c:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 800490e:	4850      	ldr	r0, [pc, #320]	; (8004a50 <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004910:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004914:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004918:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800491c:	f004 ffbc 	bl	8009898 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004920:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004922:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004924:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004926:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004930:	785a      	ldrb	r2, [r3, #1]
 8004932:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004936:	789a      	ldrb	r2, [r3, #2]
 8004938:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800493c:	78da      	ldrb	r2, [r3, #3]
 800493e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004942:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004944:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004948:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800494c:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800494e:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004950:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004954:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8004958:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800495c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004960:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8004962:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004964:	f000 fb72 	bl	800504c <osSemaphoreNew>
 8004968:	4b3a      	ldr	r3, [pc, #232]	; (8004a54 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800496a:	4632      	mov	r2, r6
 800496c:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800496e:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004970:	4638      	mov	r0, r7
 8004972:	f000 fb6b 	bl	800504c <osSemaphoreNew>
 8004976:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004978:	4631      	mov	r1, r6
 800497a:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800497c:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800497e:	a803      	add	r0, sp, #12
 8004980:	f00d fe83 	bl	801268a <memset>
  attributes.name = "EthIf";
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8004986:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 800498a:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 800498c:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 800498e:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8004990:	4833      	ldr	r0, [pc, #204]	; (8004a60 <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8004992:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8004996:	4621      	mov	r1, r4
 8004998:	f000 fa76 	bl	8004e88 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800499c:	4931      	ldr	r1, [pc, #196]	; (8004a64 <ethernetif_init+0x1bc>)
 800499e:	4832      	ldr	r0, [pc, #200]	; (8004a68 <ethernetif_init+0x1c0>)
 80049a0:	f7fd fc44 	bl	800222c <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 80049a4:	4830      	ldr	r0, [pc, #192]	; (8004a68 <ethernetif_init+0x1c0>)
 80049a6:	f7fd fc5b 	bl	8002260 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 80049aa:	f1b8 0f00 	cmp.w	r8, #0
 80049ae:	d124      	bne.n	80049fa <ethernetif_init+0x152>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80049b0:	482d      	ldr	r0, [pc, #180]	; (8004a68 <ethernetif_init+0x1c0>)
 80049b2:	f7fd fcbf 	bl	8002334 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80049b6:	42b8      	cmp	r0, r7
 80049b8:	dd2a      	ble.n	8004a10 <ethernetif_init+0x168>
      switch (PHYLinkState)
 80049ba:	3803      	subs	r0, #3
 80049bc:	2802      	cmp	r0, #2
 80049be:	d822      	bhi.n	8004a06 <ethernetif_init+0x15e>
 80049c0:	4a2a      	ldr	r2, [pc, #168]	; (8004a6c <ethernetif_init+0x1c4>)
 80049c2:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <ethernetif_init+0x1c8>)
 80049c4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80049c8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80049cc:	a90b      	add	r1, sp, #44	; 0x2c
 80049ce:	481b      	ldr	r0, [pc, #108]	; (8004a3c <ethernetif_init+0x194>)
 80049d0:	f7fe fb88 	bl	80030e4 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80049d4:	a90b      	add	r1, sp, #44	; 0x2c
 80049d6:	4819      	ldr	r0, [pc, #100]	; (8004a3c <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 80049d8:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80049dc:	f7fe fc4c 	bl	8003278 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80049e0:	4816      	ldr	r0, [pc, #88]	; (8004a3c <ethernetif_init+0x194>)
 80049e2:	f7fe f8ef 	bl	8002bc4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80049e6:	4620      	mov	r0, r4
 80049e8:	f005 f970 	bl	8009ccc <netif_set_up>
    netif_set_link_up(netif);
 80049ec:	4620      	mov	r0, r4
 80049ee:	f005 f9b5 	bl	8009d5c <netif_set_link_up>
}
 80049f2:	2000      	movs	r0, #0
 80049f4:	b025      	add	sp, #148	; 0x94
 80049f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 80049fa:	f7fd fa99 	bl	8001f30 <Error_Handler>
}
 80049fe:	2000      	movs	r0, #0
 8004a00:	b025      	add	sp, #148	; 0x94
 8004a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8004a06:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8004a0a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8004a0e:	e7dd      	b.n	80049cc <ethernetif_init+0x124>
      netif_set_link_down(netif);
 8004a10:	4620      	mov	r0, r4
 8004a12:	f005 f9cb 	bl	8009dac <netif_set_link_down>
      netif_set_down(netif);
 8004a16:	4620      	mov	r0, r4
 8004a18:	f005 f97c 	bl	8009d14 <netif_set_down>
}
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	b025      	add	sp, #148	; 0x94
 8004a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <ethernetif_init+0x1cc>)
 8004a26:	f44f 7206 	mov.w	r2, #536	; 0x218
 8004a2a:	4913      	ldr	r1, [pc, #76]	; (8004a78 <ethernetif_init+0x1d0>)
 8004a2c:	4813      	ldr	r0, [pc, #76]	; (8004a7c <ethernetif_init+0x1d4>)
 8004a2e:	f00d fd5f 	bl	80124f0 <iprintf>
 8004a32:	e740      	b.n	80048b6 <ethernetif_init+0xe>
 8004a34:	080046ed 	.word	0x080046ed
 8004a38:	0800f525 	.word	0x0800f525
 8004a3c:	240009c8 	.word	0x240009c8
 8004a40:	40028000 	.word	0x40028000
 8004a44:	00e18000 	.word	0x00e18000
 8004a48:	30040060 	.word	0x30040060
 8004a4c:	30040000 	.word	0x30040000
 8004a50:	08015094 	.word	0x08015094
 8004a54:	24000988 	.word	0x24000988
 8004a58:	240009c4 	.word	0x240009c4
 8004a5c:	08015008 	.word	0x08015008
 8004a60:	08004811 	.word	0x08004811
 8004a64:	24000024 	.word	0x24000024
 8004a68:	24000964 	.word	0x24000964
 8004a6c:	0801505c 	.word	0x0801505c
 8004a70:	08015068 	.word	0x08015068
 8004a74:	08014fb4 	.word	0x08014fb4
 8004a78:	08014fd0 	.word	0x08014fd0
 8004a7c:	08014fe0 	.word	0x08014fe0
 8004a80:	2400098c 	.word	0x2400098c

08004a84 <sys_now>:
  return HAL_GetTick();
 8004a84:	f7fd bce0 	b.w	8002448 <HAL_GetTick>

08004a88 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8004a88:	4b4b      	ldr	r3, [pc, #300]	; (8004bb8 <HAL_ETH_MspInit+0x130>)
 8004a8a:	6802      	ldr	r2, [r0, #0]
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8004a8e:	429a      	cmp	r2, r3
{
 8004a90:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a92:	f04f 0400 	mov.w	r4, #0
 8004a96:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004a9a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004a9e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8004aa0:	d001      	beq.n	8004aa6 <HAL_ETH_MspInit+0x1e>
}
 8004aa2:	b00d      	add	sp, #52	; 0x34
 8004aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004aa6:	4b45      	ldr	r3, [pc, #276]	; (8004bbc <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004aaa:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aac:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004aae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ab2:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab4:	4842      	ldr	r0, [pc, #264]	; (8004bc0 <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004abe:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004ac2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004ac6:	9200      	str	r2, [sp, #0]
 8004ac8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004aca:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004ace:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ad2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004ad6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004ada:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004ade:	9201      	str	r2, [sp, #4]
 8004ae0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004ae2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004ae6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004aea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004aee:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004af2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004af6:	9202      	str	r2, [sp, #8]
 8004af8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004afe:	f042 0204 	orr.w	r2, r2, #4
 8004b02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b0a:	f002 0204 	and.w	r2, r2, #4
 8004b0e:	9203      	str	r2, [sp, #12]
 8004b10:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b22:	f002 0201 	and.w	r2, r2, #1
 8004b26:	9204      	str	r2, [sp, #16]
 8004b28:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b2e:	433a      	orrs	r2, r7
 8004b30:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b38:	403a      	ands	r2, r7
 8004b3a:	9205      	str	r2, [sp, #20]
 8004b3c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4e:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b54:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b56:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b5a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b5c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b5e:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b60:	f7fe fcfc 	bl	800355c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004b64:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b66:	a907      	add	r1, sp, #28
 8004b68:	4816      	ldr	r0, [pc, #88]	; (8004bc4 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004b6a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6c:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b70:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b74:	f7fe fcf2 	bl	800355c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7c:	a907      	add	r1, sp, #28
 8004b7e:	4812      	ldr	r0, [pc, #72]	; (8004bc8 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b80:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b82:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b86:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b8a:	f7fe fce7 	bl	800355c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004b8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b92:	a907      	add	r1, sp, #28
 8004b94:	480d      	ldr	r0, [pc, #52]	; (8004bcc <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004b96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b9a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9c:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ba0:	f7fe fcdc 	bl	800355c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	2105      	movs	r1, #5
 8004ba8:	203d      	movs	r0, #61	; 0x3d
 8004baa:	f7fd fc75 	bl	8002498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004bae:	203d      	movs	r0, #61	; 0x3d
 8004bb0:	f7fd fcb0 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 8004bb4:	b00d      	add	sp, #52	; 0x34
 8004bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb8:	40028000 	.word	0x40028000
 8004bbc:	58024400 	.word	0x58024400
 8004bc0:	58020800 	.word	0x58020800
 8004bc4:	58020000 	.word	0x58020000
 8004bc8:	58020400 	.word	0x58020400
 8004bcc:	58021800 	.word	0x58021800

08004bd0 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004bd0:	b530      	push	{r4, r5, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004bd6:	480d      	ldr	r0, [pc, #52]	; (8004c0c <HAL_ETH_RxAllocateCallback+0x3c>)
 8004bd8:	f004 fea6 	bl	8009928 <memp_malloc_pool>
  if (p)
 8004bdc:	4603      	mov	r3, r0
 8004bde:	b178      	cbz	r0, 8004c00 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004be0:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004be6:	2100      	movs	r1, #0
 8004be8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004bec:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8004bee:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004bf0:	2241      	movs	r2, #65	; 0x41
 8004bf2:	9001      	str	r0, [sp, #4]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	9500      	str	r5, [sp, #0]
 8004bf8:	f005 f9fa 	bl	8009ff0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004bfc:	b003      	add	sp, #12
 8004bfe:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8004c00:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <HAL_ETH_RxAllocateCallback+0x44>)
 8004c02:	2101      	movs	r1, #1
    *buff = NULL;
 8004c04:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8004c06:	7011      	strb	r1, [r2, #0]
}
 8004c08:	b003      	add	sp, #12
 8004c0a:	bd30      	pop	{r4, r5, pc}
 8004c0c:	08015094 	.word	0x08015094
 8004c10:	080047e1 	.word	0x080047e1
 8004c14:	24000984 	.word	0x24000984

08004c18 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004c18:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8004c1a:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004c1c:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8004c20:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8004c24:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8004c28:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8004c2c:	6805      	ldr	r5, [r0, #0]
 8004c2e:	b1f5      	cbz	r5, 8004c6e <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004c30:	680d      	ldr	r5, [r1, #0]
 8004c32:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8004c34:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004c36:	6801      	ldr	r1, [r0, #0]
 8004c38:	b129      	cbz	r1, 8004c46 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8004c3a:	8908      	ldrh	r0, [r1, #8]
 8004c3c:	4418      	add	r0, r3
 8004c3e:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c40:	6809      	ldr	r1, [r1, #0]
 8004c42:	2900      	cmp	r1, #0
 8004c44:	d1f9      	bne.n	8004c3a <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004c46:	b183      	cbz	r3, 8004c6a <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004c48:	f002 011f 	and.w	r1, r2, #31
 8004c4c:	4419      	add	r1, r3
 8004c4e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004c52:	4808      	ldr	r0, [pc, #32]	; (8004c74 <HAL_ETH_RxLinkCallback+0x5c>)
 8004c54:	4411      	add	r1, r2
 8004c56:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004c5a:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8004c5c:	1a8b      	subs	r3, r1, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	dcf9      	bgt.n	8004c56 <HAL_ETH_RxLinkCallback+0x3e>
 8004c62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c66:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c6a:	bc30      	pop	{r4, r5}
 8004c6c:	4770      	bx	lr
    *ppStart = p;
 8004c6e:	6004      	str	r4, [r0, #0]
 8004c70:	e7e0      	b.n	8004c34 <HAL_ETH_RxLinkCallback+0x1c>
 8004c72:	bf00      	nop
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004c78:	f005 ba76 	b.w	800a168 <pbuf_free>

08004c7c <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8004c7c:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8004c7e:	4804      	ldr	r0, [pc, #16]	; (8004c90 <sys_lock_tcpip_core+0x14>)
 8004c80:	f00b fd7c 	bl	801077c <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8004c84:	f000 f94c 	bl	8004f20 <osThreadGetId>
 8004c88:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <sys_lock_tcpip_core+0x18>)
 8004c8a:	6018      	str	r0, [r3, #0]
}
 8004c8c:	bd08      	pop	{r3, pc}
 8004c8e:	bf00      	nop
 8004c90:	2400a268 	.word	0x2400a268
 8004c94:	24000a78 	.word	0x24000a78

08004c98 <ethernet_link_thread>:
{
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004c9e:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8004ca2:	2264      	movs	r2, #100	; 0x64
 8004ca4:	2100      	movs	r1, #0
{
 8004ca6:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8004ca8:	a801      	add	r0, sp, #4
 8004caa:	f00d fcee 	bl	801268a <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004cae:	46cb      	mov	fp, r9
 8004cb0:	46ca      	mov	sl, r9
 8004cb2:	4d2b      	ldr	r5, [pc, #172]	; (8004d60 <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004cb4:	4f2b      	ldr	r7, [pc, #172]	; (8004d64 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8004cb6:	f7ff ffe1 	bl	8004c7c <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004cba:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004d74 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8004cbe:	4c2a      	ldr	r4, [pc, #168]	; (8004d68 <ethernet_link_thread+0xd0>)
 8004cc0:	e018      	b.n	8004cf4 <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004cc2:	2801      	cmp	r0, #1
 8004cc4:	dc42      	bgt.n	8004d4c <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7fd ffcc 	bl	8002c64 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f005 f821 	bl	8009d14 <netif_set_down>
    netif_set_link_down(netif);
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f005 f86a 	bl	8009dac <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 8004cd8:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8004cda:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8004cdc:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8004cde:	f00b fd53 	bl	8010788 <sys_mutex_unlock>
  osDelay(100);
 8004ce2:	2064      	movs	r0, #100	; 0x64
 8004ce4:	f000 f91e 	bl	8004f24 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f00b fd47 	bl	801077c <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8004cee:	f000 f917 	bl	8004f20 <osThreadGetId>
 8004cf2:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7fd fb1d 	bl	8002334 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004cfa:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8004cfe:	0759      	lsls	r1, r3, #29
 8004d00:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8004d04:	d4dd      	bmi.n	8004cc2 <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004d06:	07d2      	lsls	r2, r2, #31
 8004d08:	d4e6      	bmi.n	8004cd8 <ethernet_link_thread+0x40>
 8004d0a:	2801      	cmp	r0, #1
 8004d0c:	dde4      	ble.n	8004cd8 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8004d0e:	3802      	subs	r0, #2
 8004d10:	2803      	cmp	r0, #3
 8004d12:	d820      	bhi.n	8004d56 <ethernet_link_thread+0xbe>
 8004d14:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <ethernet_link_thread+0xd4>)
 8004d16:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <ethernet_link_thread+0xd8>)
 8004d1c:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004d20:	a901      	add	r1, sp, #4
 8004d22:	4640      	mov	r0, r8
 8004d24:	f7fe f9de 	bl	80030e4 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004d28:	a901      	add	r1, sp, #4
 8004d2a:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8004d2c:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8004d30:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004d34:	f7fe faa0 	bl	8003278 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004d38:	4640      	mov	r0, r8
 8004d3a:	f7fd ff43 	bl	8002bc4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f004 ffc4 	bl	8009ccc <netif_set_up>
      netif_set_link_up(netif);
 8004d44:	4630      	mov	r0, r6
 8004d46:	f005 f809 	bl	8009d5c <netif_set_link_up>
 8004d4a:	e7c5      	b.n	8004cd8 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004d4c:	075b      	lsls	r3, r3, #29
 8004d4e:	d4c3      	bmi.n	8004cd8 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8004d50:	3802      	subs	r0, #2
 8004d52:	2803      	cmp	r0, #3
 8004d54:	d9de      	bls.n	8004d14 <ethernet_link_thread+0x7c>
    if(linkchanged)
 8004d56:	f1ba 0f00 	cmp.w	sl, #0
 8004d5a:	d0bd      	beq.n	8004cd8 <ethernet_link_thread+0x40>
 8004d5c:	e7e0      	b.n	8004d20 <ethernet_link_thread+0x88>
 8004d5e:	bf00      	nop
 8004d60:	24000a78 	.word	0x24000a78
 8004d64:	24000964 	.word	0x24000964
 8004d68:	2400a268 	.word	0x2400a268
 8004d6c:	08015074 	.word	0x08015074
 8004d70:	08015084 	.word	0x08015084
 8004d74:	240009c8 	.word	0x240009c8

08004d78 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8004d78:	4b02      	ldr	r3, [pc, #8]	; (8004d84 <sys_unlock_tcpip_core+0xc>)
 8004d7a:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8004d7c:	4802      	ldr	r0, [pc, #8]	; (8004d88 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8004d7e:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8004d80:	f00b bd02 	b.w	8010788 <sys_mutex_unlock>
 8004d84:	24000a78 	.word	0x24000a78
 8004d88:	2400a268 	.word	0x2400a268

08004d8c <sys_check_core_locking>:
}

void sys_check_core_locking(void){
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8004d8c:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <sys_check_core_locking+0x44>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
void sys_check_core_locking(void){
 8004d94:	b510      	push	{r4, lr}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8004d96:	b993      	cbnz	r3, 8004dbe <sys_check_core_locking+0x32>

  if (lwip_tcpip_thread_id != 0) {
 8004d98:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <sys_check_core_locking+0x48>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b173      	cbz	r3, 8004dbc <sys_check_core_locking+0x30>
	  osThreadId_t current_thread_id = osThreadGetId();
 8004d9e:	f000 f8bf 	bl	8004f20 <osThreadGetId>

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8004da2:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <sys_check_core_locking+0x4c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4283      	cmp	r3, r0
 8004da8:	d008      	beq.n	8004dbc <sys_check_core_locking+0x30>
 8004daa:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <sys_check_core_locking+0x50>)
 8004dac:	f240 32d2 	movw	r2, #978	; 0x3d2
 8004db0:	490b      	ldr	r1, [pc, #44]	; (8004de0 <sys_check_core_locking+0x54>)
 8004db2:	480c      	ldr	r0, [pc, #48]	; (8004de4 <sys_check_core_locking+0x58>)
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8004db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8004db8:	f00d bb9a 	b.w	80124f0 <iprintf>
}
 8004dbc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <sys_check_core_locking+0x50>)
 8004dc0:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8004dc4:	4908      	ldr	r1, [pc, #32]	; (8004de8 <sys_check_core_locking+0x5c>)
 8004dc6:	4807      	ldr	r0, [pc, #28]	; (8004de4 <sys_check_core_locking+0x58>)
 8004dc8:	f00d fb92 	bl	80124f0 <iprintf>
 8004dcc:	e7e4      	b.n	8004d98 <sys_check_core_locking+0xc>
 8004dce:	bf00      	nop
 8004dd0:	e000ed00 	.word	0xe000ed00
 8004dd4:	24000a7c 	.word	0x24000a7c
 8004dd8:	24000a78 	.word	0x24000a78
 8004ddc:	08014fb4 	.word	0x08014fb4
 8004de0:	08015038 	.word	0x08015038
 8004de4:	08014fe0 	.word	0x08014fe0
 8004de8:	08015010 	.word	0x08015010

08004dec <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8004dec:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8004dee:	f000 f897 	bl	8004f20 <osThreadGetId>
 8004df2:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <sys_mark_tcpip_thread+0xc>)
 8004df4:	6018      	str	r0, [r3, #0]
}
 8004df6:	bd08      	pop	{r3, pc}
 8004df8:	24000a7c 	.word	0x24000a7c

08004dfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004dfc:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8004dfe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e02:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e04:	f001 fe72 	bl	8006aec <xTaskGetSchedulerState>
 8004e08:	2801      	cmp	r0, #1
 8004e0a:	d100      	bne.n	8004e0e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8004e0c:	bd08      	pop	{r3, pc}
 8004e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004e12:	f002 ba4f 	b.w	80072b4 <xPortSysTickHandler>
 8004e16:	bf00      	nop

08004e18 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e18:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e1c:	b92b      	cbnz	r3, 8004e2a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <osKernelInitialize+0x20>)
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	b928      	cbnz	r0, 8004e30 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e28:	4770      	bx	lr
    stat = osErrorISR;
 8004e2a:	f06f 0005 	mvn.w	r0, #5
 8004e2e:	4770      	bx	lr
    } else {
      stat = osError;
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	2400132c 	.word	0x2400132c

08004e3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e42:	b974      	cbnz	r4, 8004e62 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <osKernelStart+0x2c>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2a01      	cmp	r2, #1
 8004e4a:	d107      	bne.n	8004e5c <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	4907      	ldr	r1, [pc, #28]	; (8004e6c <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e4e:	2202      	movs	r2, #2
 8004e50:	77cc      	strb	r4, [r1, #31]
 8004e52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e54:	f001 fb2e 	bl	80064b4 <vTaskStartScheduler>
      stat = osOK;
 8004e58:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8004e5a:	bd10      	pop	{r4, pc}
      stat = osError;
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004e60:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004e62:	f06f 0005 	mvn.w	r0, #5
}
 8004e66:	bd10      	pop	{r4, pc}
 8004e68:	2400132c 	.word	0x2400132c
 8004e6c:	e000ed00 	.word	0xe000ed00

08004e70 <osKernelGetTickCount>:
 8004e70:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8004e74:	b10b      	cbz	r3, 8004e7a <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8004e76:	f001 bb7b 	b.w	8006570 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8004e7a:	f001 bb73 	b.w	8006564 <xTaskGetTickCount>
 8004e7e:	bf00      	nop

08004e80 <osKernelGetTickFreq>:
  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 8004e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop

08004e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e88:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e8a:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	4614      	mov	r4, r2
  hTask = NULL;
 8004e90:	9505      	str	r5, [sp, #20]
 8004e92:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004e96:	bb62      	cbnz	r2, 8004ef2 <osThreadNew+0x6a>
 8004e98:	4606      	mov	r6, r0
 8004e9a:	b350      	cbz	r0, 8004ef2 <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004e9c:	b1e4      	cbz	r4, 8004ed8 <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004e9e:	69a7      	ldr	r7, [r4, #24]
 8004ea0:	bb57      	cbnz	r7, 8004ef8 <osThreadNew+0x70>
 8004ea2:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	07db      	lsls	r3, r3, #31
 8004ea8:	d423      	bmi.n	8004ef2 <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004eaa:	6963      	ldr	r3, [r4, #20]
 8004eac:	b343      	cbz	r3, 8004f00 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004eae:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eb2:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
 8004eb4:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eb6:	b340      	cbz	r0, 8004f0a <osThreadNew+0x82>
 8004eb8:	68e2      	ldr	r2, [r4, #12]
 8004eba:	2aa7      	cmp	r2, #167	; 0xa7
 8004ebc:	d919      	bls.n	8004ef2 <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ebe:	6924      	ldr	r4, [r4, #16]
 8004ec0:	b1bb      	cbz	r3, 8004ef2 <osThreadNew+0x6a>
 8004ec2:	b1b4      	cbz	r4, 8004ef2 <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4662      	mov	r2, ip
 8004ec8:	4629      	mov	r1, r5
 8004eca:	9700      	str	r7, [sp, #0]
 8004ecc:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f001 fa83 	bl	80063dc <xTaskCreateStatic>
 8004ed6:	e00d      	b.n	8004ef4 <osThreadNew+0x6c>
 8004ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 8004edc:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	ac05      	add	r4, sp, #20
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	9700      	str	r7, [sp, #0]
 8004ee8:	9401      	str	r4, [sp, #4]
 8004eea:	f001 fab1 	bl	8006450 <xTaskCreate>
 8004eee:	2801      	cmp	r0, #1
 8004ef0:	d009      	beq.n	8004f06 <osThreadNew+0x7e>
        return (NULL);
 8004ef2:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004ef4:	b007      	add	sp, #28
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ef8:	1e7a      	subs	r2, r7, #1
 8004efa:	2a37      	cmp	r2, #55	; 0x37
 8004efc:	d9d2      	bls.n	8004ea4 <osThreadNew+0x1c>
 8004efe:	e7f8      	b.n	8004ef2 <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
 8004f00:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8004f04:	e7d5      	b.n	8004eb2 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
 8004f06:	9805      	ldr	r0, [sp, #20]
 8004f08:	e7f4      	b.n	8004ef4 <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f1      	bne.n	8004ef4 <osThreadNew+0x6c>
 8004f10:	6923      	ldr	r3, [r4, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ee      	bne.n	8004ef4 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f16:	fa1f f28c 	uxth.w	r2, ip
 8004f1a:	462c      	mov	r4, r5
 8004f1c:	e7df      	b.n	8004ede <osThreadNew+0x56>
 8004f1e:	bf00      	nop

08004f20 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004f20:	f001 bdde 	b.w	8006ae0 <xTaskGetCurrentTaskHandle>

08004f24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f24:	b510      	push	{r4, lr}
 8004f26:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f2a:	b92c      	cbnz	r4, 8004f38 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004f2c:	b900      	cbnz	r0, 8004f30 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004f2e:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8004f30:	f001 fc74 	bl	800681c <vTaskDelay>
    stat = osOK;
 8004f34:	4620      	mov	r0, r4
}
 8004f36:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004f38:	f06f 0005 	mvn.w	r0, #5
}
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	bf00      	nop

08004f40 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8004f46:	b9db      	cbnz	r3, 8004f80 <osMutexNew+0x40>
    if (attr != NULL) {
 8004f48:	4604      	mov	r4, r0
 8004f4a:	b1e0      	cbz	r0, 8004f86 <osMutexNew+0x46>
      type = attr->attr_bits;
 8004f4c:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004f4e:	0733      	lsls	r3, r6, #28
 8004f50:	d416      	bmi.n	8004f80 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f52:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004f54:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f58:	68c3      	ldr	r3, [r0, #12]
 8004f5a:	b181      	cbz	r1, 8004f7e <osMutexNew+0x3e>
 8004f5c:	2b4f      	cmp	r3, #79	; 0x4f
 8004f5e:	d90f      	bls.n	8004f80 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004f60:	b31e      	cbz	r6, 8004faa <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004f62:	2004      	movs	r0, #4
 8004f64:	f000 fccc 	bl	8005900 <xQueueCreateMutexStatic>
 8004f68:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004f6a:	b14d      	cbz	r5, 8004f80 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f001 f866 	bl	8006040 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004f74:	b12e      	cbz	r6, 8004f82 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004f76:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f7e:	b163      	cbz	r3, 8004f9a <osMutexNew+0x5a>
  hMutex = NULL;
 8004f80:	2500      	movs	r5, #0
}
 8004f82:	4628      	mov	r0, r5
 8004f84:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
 8004f86:	2001      	movs	r0, #1
 8004f88:	f000 fd10 	bl	80059ac <xQueueCreateMutex>
      if (hMutex != NULL) {
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d0f6      	beq.n	8004f80 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
 8004f92:	4621      	mov	r1, r4
 8004f94:	f001 f854 	bl	8006040 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004f98:	e7f3      	b.n	8004f82 <osMutexNew+0x42>
            if (rmtx != 0U) {
 8004f9a:	b15e      	cbz	r6, 8004fb4 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004f9c:	2004      	movs	r0, #4
 8004f9e:	f000 fd05 	bl	80059ac <xQueueCreateMutex>
      if (hMutex != NULL) {
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d1e1      	bne.n	8004f6c <osMutexNew+0x2c>
 8004fa8:	e7ea      	b.n	8004f80 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004faa:	2001      	movs	r0, #1
 8004fac:	f000 fca8 	bl	8005900 <xQueueCreateMutexStatic>
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	e7da      	b.n	8004f6a <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f000 fcf9 	bl	80059ac <xQueueCreateMutex>
      if (hMutex != NULL) {
 8004fba:	4605      	mov	r5, r0
 8004fbc:	e7d5      	b.n	8004f6a <osMutexNew+0x2a>
 8004fbe:	bf00      	nop

08004fc0 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004fc0:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8004fc4:	f000 0301 	and.w	r3, r0, #1
 8004fc8:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8004fcc:	b9a8      	cbnz	r0, 8004ffa <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004fce:	b1ba      	cbz	r2, 8005000 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004fd0:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 8004fd6:	b953      	cbnz	r3, 8004fee <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004fd8:	f000 fe8a 	bl	8005cf0 <xQueueSemaphoreTake>
 8004fdc:	2801      	cmp	r0, #1
 8004fde:	d00a      	beq.n	8004ff6 <osMutexAcquire+0x36>
          stat = osErrorResource;
 8004fe0:	2c00      	cmp	r4, #0
 8004fe2:	bf14      	ite	ne
 8004fe4:	f06f 0001 	mvnne.w	r0, #1
 8004fe8:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004fec:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004fee:	f000 ff5b 	bl	8005ea8 <xQueueTakeMutexRecursive>
 8004ff2:	2801      	cmp	r0, #1
 8004ff4:	d1f4      	bne.n	8004fe0 <osMutexAcquire+0x20>
  stat = osOK;
 8004ff6:	2000      	movs	r0, #0
}
 8004ff8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004ffa:	f06f 0005 	mvn.w	r0, #5
 8004ffe:	4770      	bx	lr
    stat = osErrorParameter;
 8005000:	f06f 0003 	mvn.w	r0, #3
}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop

08005008 <osMutexRelease>:
 8005008:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800500c:	b9ba      	cbnz	r2, 800503e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800500e:	b510      	push	{r4, lr}
 8005010:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005014:	b1b4      	cbz	r4, 8005044 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005016:	f000 0301 	and.w	r3, r0, #1
 800501a:	b943      	cbnz	r3, 800502e <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800501c:	461a      	mov	r2, r3
 800501e:	4619      	mov	r1, r3
 8005020:	4620      	mov	r0, r4
 8005022:	f000 fba9 	bl	8005778 <xQueueGenericSend>
 8005026:	2801      	cmp	r0, #1
 8005028:	d106      	bne.n	8005038 <osMutexRelease+0x30>
  stat = osOK;
 800502a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800502c:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800502e:	4620      	mov	r0, r4
 8005030:	f000 fc9c 	bl	800596c <xQueueGiveMutexRecursive>
 8005034:	2801      	cmp	r0, #1
 8005036:	d0f8      	beq.n	800502a <osMutexRelease+0x22>
        stat = osErrorResource;
 8005038:	f06f 0002 	mvn.w	r0, #2
}
 800503c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800503e:	f06f 0005 	mvn.w	r0, #5
}
 8005042:	4770      	bx	lr
    stat = osErrorParameter;
 8005044:	f06f 0003 	mvn.w	r0, #3
}
 8005048:	bd10      	pop	{r4, pc}
 800504a:	bf00      	nop

0800504c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800504c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504e:	b083      	sub	sp, #12
 8005050:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005054:	b98e      	cbnz	r6, 800507a <osSemaphoreNew+0x2e>
 8005056:	4605      	mov	r5, r0
 8005058:	b178      	cbz	r0, 800507a <osSemaphoreNew+0x2e>
 800505a:	4288      	cmp	r0, r1
 800505c:	460f      	mov	r7, r1
 800505e:	d30c      	bcc.n	800507a <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8005060:	4614      	mov	r4, r2
 8005062:	b182      	cbz	r2, 8005086 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005064:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8005068:	b15a      	cbz	r2, 8005082 <osSemaphoreNew+0x36>
 800506a:	2b4f      	cmp	r3, #79	; 0x4f
 800506c:	d905      	bls.n	800507a <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800506e:	2801      	cmp	r0, #1
 8005070:	d032      	beq.n	80050d8 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005072:	f000 fb3f 	bl	80056f4 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005076:	4605      	mov	r5, r0
 8005078:	b978      	cbnz	r0, 800509a <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 800507a:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800507c:	4628      	mov	r0, r5
 800507e:	b003      	add	sp, #12
 8005080:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f9      	bne.n	800507a <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 8005086:	2d01      	cmp	r5, #1
 8005088:	d00f      	beq.n	80050aa <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800508a:	4628      	mov	r0, r5
 800508c:	4639      	mov	r1, r7
 800508e:	f000 fb55 	bl	800573c <xQueueCreateCountingSemaphore>
 8005092:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8005094:	2d00      	cmp	r5, #0
 8005096:	d0f0      	beq.n	800507a <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8005098:	b104      	cbz	r4, 800509c <osSemaphoreNew+0x50>
          name = attr->name;
 800509a:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 800509c:	4628      	mov	r0, r5
 800509e:	4621      	mov	r1, r4
 80050a0:	f000 ffce 	bl	8006040 <vQueueAddToRegistry>
}
 80050a4:	4628      	mov	r0, r5
 80050a6:	b003      	add	sp, #12
 80050a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 80050aa:	4628      	mov	r0, r5
 80050ac:	2203      	movs	r2, #3
 80050ae:	2100      	movs	r1, #0
 80050b0:	f000 faf8 	bl	80056a4 <xQueueGenericCreate>
 80050b4:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	d0df      	beq.n	800507a <osSemaphoreNew+0x2e>
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	d0ea      	beq.n	8005094 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80050be:	2300      	movs	r3, #0
 80050c0:	4628      	mov	r0, r5
 80050c2:	461a      	mov	r2, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	f000 fb57 	bl	8005778 <xQueueGenericSend>
 80050ca:	2801      	cmp	r0, #1
 80050cc:	d0e4      	beq.n	8005098 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80050ce:	4628      	mov	r0, r5
            hSemaphore = NULL;
 80050d0:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 80050d2:	f000 ff8b 	bl	8005fec <vQueueDelete>
      if (hSemaphore != NULL) {
 80050d6:	e7d1      	b.n	800507c <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80050d8:	4613      	mov	r3, r2
 80050da:	2203      	movs	r2, #3
 80050dc:	4631      	mov	r1, r6
 80050de:	9200      	str	r2, [sp, #0]
 80050e0:	4632      	mov	r2, r6
 80050e2:	f000 fa8d 	bl	8005600 <xQueueGenericCreateStatic>
 80050e6:	4605      	mov	r5, r0
 80050e8:	e7e5      	b.n	80050b6 <osSemaphoreNew+0x6a>
 80050ea:	bf00      	nop

080050ec <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80050ec:	b370      	cbz	r0, 800514c <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80050ee:	b510      	push	{r4, lr}
 80050f0:	460c      	mov	r4, r1
 80050f2:	b082      	sub	sp, #8
 80050f4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80050f8:	b1c3      	cbz	r3, 800512c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 80050fa:	bb21      	cbnz	r1, 8005146 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80050fc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80050fe:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005100:	f000 fef2 	bl	8005ee8 <xQueueReceiveFromISR>
 8005104:	2801      	cmp	r0, #1
 8005106:	d11a      	bne.n	800513e <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	b913      	cbnz	r3, 8005112 <osSemaphoreAcquire+0x26>
  stat = osOK;
 800510c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800510e:	b002      	add	sp, #8
 8005110:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8005112:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005126:	4620      	mov	r0, r4
}
 8005128:	b002      	add	sp, #8
 800512a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800512c:	f000 fde0 	bl	8005cf0 <xQueueSemaphoreTake>
 8005130:	2801      	cmp	r0, #1
 8005132:	d0eb      	beq.n	800510c <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8005134:	b11c      	cbz	r4, 800513e <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 8005136:	f06f 0001 	mvn.w	r0, #1
}
 800513a:	b002      	add	sp, #8
 800513c:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 800513e:	f06f 0002 	mvn.w	r0, #2
}
 8005142:	b002      	add	sp, #8
 8005144:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8005146:	f06f 0003 	mvn.w	r0, #3
 800514a:	e7e0      	b.n	800510e <osSemaphoreAcquire+0x22>
 800514c:	f06f 0003 	mvn.w	r0, #3
}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop

08005154 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005154:	b330      	cbz	r0, 80051a4 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005156:	b510      	push	{r4, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800515e:	b1ab      	cbz	r3, 800518c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8005160:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005162:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8005164:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005166:	f000 fca9 	bl	8005abc <xQueueGiveFromISR>
 800516a:	2801      	cmp	r0, #1
 800516c:	d117      	bne.n	800519e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	b193      	cbz	r3, 8005198 <osSemaphoreRelease+0x44>
 8005172:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005186:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8005188:	b002      	add	sp, #8
 800518a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800518c:	461a      	mov	r2, r3
 800518e:	4619      	mov	r1, r3
 8005190:	f000 faf2 	bl	8005778 <xQueueGenericSend>
 8005194:	2801      	cmp	r0, #1
 8005196:	d102      	bne.n	800519e <osSemaphoreRelease+0x4a>
  stat = osOK;
 8005198:	2000      	movs	r0, #0
}
 800519a:	b002      	add	sp, #8
 800519c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 800519e:	f06f 0002 	mvn.w	r0, #2
 80051a2:	e7fa      	b.n	800519a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80051a4:	f06f 0003 	mvn.w	r0, #3
}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop

080051ac <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	f3ef 8405 	mrs	r4, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80051b2:	b944      	cbnz	r4, 80051c6 <osSemaphoreDelete+0x1a>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 80051b4:	4605      	mov	r5, r0
 80051b6:	b148      	cbz	r0, 80051cc <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80051b8:	f000 ff58 	bl	800606c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 ff15 	bl	8005fec <vQueueDelete>
    stat = osOK;
 80051c2:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 80051c6:	f06f 0005 	mvn.w	r0, #5
}
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 80051cc:	f06f 0003 	mvn.w	r0, #3
}
 80051d0:	bd38      	pop	{r3, r4, r5, pc}
 80051d2:	bf00      	nop

080051d4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d6:	b083      	sub	sp, #12
 80051d8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80051dc:	b987      	cbnz	r7, 8005200 <osMessageQueueNew+0x2c>
 80051de:	4605      	mov	r5, r0
 80051e0:	b170      	cbz	r0, 8005200 <osMessageQueueNew+0x2c>
 80051e2:	b169      	cbz	r1, 8005200 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 80051e4:	4614      	mov	r4, r2
 80051e6:	b17a      	cbz	r2, 8005208 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051e8:	6893      	ldr	r3, [r2, #8]
 80051ea:	b1cb      	cbz	r3, 8005220 <osMessageQueueNew+0x4c>
 80051ec:	68d2      	ldr	r2, [r2, #12]
 80051ee:	2a4f      	cmp	r2, #79	; 0x4f
 80051f0:	d906      	bls.n	8005200 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051f2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051f4:	b122      	cbz	r2, 8005200 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051f6:	fb01 f505 	mul.w	r5, r1, r5
 80051fa:	6966      	ldr	r6, [r4, #20]
 80051fc:	42ae      	cmp	r6, r5
 80051fe:	d21f      	bcs.n	8005240 <osMessageQueueNew+0x6c>
  hQueue = NULL;
 8005200:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005202:	4628      	mov	r0, r5
 8005204:	b003      	add	sp, #12
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8005208:	f000 fa4c 	bl	80056a4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800520c:	4605      	mov	r5, r0
 800520e:	2800      	cmp	r0, #0
 8005210:	d0f6      	beq.n	8005200 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8005212:	4628      	mov	r0, r5
 8005214:	4621      	mov	r1, r4
 8005216:	f000 ff13 	bl	8006040 <vQueueAddToRegistry>
}
 800521a:	4628      	mov	r0, r5
 800521c:	b003      	add	sp, #12
 800521e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005220:	68d3      	ldr	r3, [r2, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1ec      	bne.n	8005200 <osMessageQueueNew+0x2c>
 8005226:	6913      	ldr	r3, [r2, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e9      	bne.n	8005200 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800522c:	6952      	ldr	r2, [r2, #20]
 800522e:	2a00      	cmp	r2, #0
 8005230:	d1e6      	bne.n	8005200 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8005232:	f000 fa37 	bl	80056a4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005236:	4605      	mov	r5, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	d0e1      	beq.n	8005200 <osMessageQueueNew+0x2c>
        name = attr->name;
 800523c:	6824      	ldr	r4, [r4, #0]
 800523e:	e7e8      	b.n	8005212 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005240:	9700      	str	r7, [sp, #0]
 8005242:	f000 f9dd 	bl	8005600 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8005246:	4605      	mov	r5, r0
 8005248:	2800      	cmp	r0, #0
 800524a:	d1f7      	bne.n	800523c <osMessageQueueNew+0x68>
 800524c:	e7d8      	b.n	8005200 <osMessageQueueNew+0x2c>
 800524e:	bf00      	nop

08005250 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005250:	b530      	push	{r4, r5, lr}
 8005252:	461c      	mov	r4, r3
 8005254:	b083      	sub	sp, #12
 8005256:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800525a:	b30b      	cbz	r3, 80052a0 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800525c:	3c00      	subs	r4, #0
 800525e:	bf18      	it	ne
 8005260:	2401      	movne	r4, #1
 8005262:	2900      	cmp	r1, #0
 8005264:	bf08      	it	eq
 8005266:	f044 0401 	orreq.w	r4, r4, #1
 800526a:	bb7c      	cbnz	r4, 80052cc <osMessageQueuePut+0x7c>
 800526c:	fab0 f480 	clz	r4, r0
 8005270:	0964      	lsrs	r4, r4, #5
 8005272:	b358      	cbz	r0, 80052cc <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005274:	4623      	mov	r3, r4
 8005276:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8005278:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800527a:	f000 fbb5 	bl	80059e8 <xQueueGenericSendFromISR>
 800527e:	2801      	cmp	r0, #1
 8005280:	d120      	bne.n	80052c4 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005282:	9b01      	ldr	r3, [sp, #4]
 8005284:	b1db      	cbz	r3, 80052be <osMessageQueuePut+0x6e>
 8005286:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800528a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800529a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 800529c:	b003      	add	sp, #12
 800529e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052a0:	b1a0      	cbz	r0, 80052cc <osMessageQueuePut+0x7c>
 80052a2:	fab1 f381 	clz	r3, r1
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	b181      	cbz	r1, 80052cc <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80052aa:	4622      	mov	r2, r4
 80052ac:	f000 fa64 	bl	8005778 <xQueueGenericSend>
 80052b0:	2801      	cmp	r0, #1
 80052b2:	d004      	beq.n	80052be <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 80052b4:	b134      	cbz	r4, 80052c4 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 80052b6:	f06f 0001 	mvn.w	r0, #1
}
 80052ba:	b003      	add	sp, #12
 80052bc:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 80052be:	2000      	movs	r0, #0
}
 80052c0:	b003      	add	sp, #12
 80052c2:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 80052c4:	f06f 0002 	mvn.w	r0, #2
}
 80052c8:	b003      	add	sp, #12
 80052ca:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 80052cc:	f06f 0003 	mvn.w	r0, #3
 80052d0:	e7e4      	b.n	800529c <osMessageQueuePut+0x4c>
 80052d2:	bf00      	nop

080052d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80052d4:	b530      	push	{r4, r5, lr}
 80052d6:	461c      	mov	r4, r3
 80052d8:	b083      	sub	sp, #12
 80052da:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80052de:	b303      	cbz	r3, 8005322 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052e0:	3c00      	subs	r4, #0
 80052e2:	bf18      	it	ne
 80052e4:	2401      	movne	r4, #1
 80052e6:	2900      	cmp	r1, #0
 80052e8:	bf08      	it	eq
 80052ea:	f044 0401 	orreq.w	r4, r4, #1
 80052ee:	bb5c      	cbnz	r4, 8005348 <osMessageQueueGet+0x74>
 80052f0:	fab0 f480 	clz	r4, r0
 80052f4:	0964      	lsrs	r4, r4, #5
 80052f6:	b338      	cbz	r0, 8005348 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80052f8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80052fa:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80052fc:	f000 fdf4 	bl	8005ee8 <xQueueReceiveFromISR>
 8005300:	2801      	cmp	r0, #1
 8005302:	d11d      	bne.n	8005340 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	b1c3      	cbz	r3, 800533a <osMessageQueueGet+0x66>
 8005308:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800530c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005310:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800531c:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 800531e:	b003      	add	sp, #12
 8005320:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005322:	b188      	cbz	r0, 8005348 <osMessageQueueGet+0x74>
 8005324:	b181      	cbz	r1, 8005348 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005326:	4622      	mov	r2, r4
 8005328:	f000 fc20 	bl	8005b6c <xQueueReceive>
 800532c:	2801      	cmp	r0, #1
 800532e:	d004      	beq.n	800533a <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 8005330:	b134      	cbz	r4, 8005340 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 8005332:	f06f 0001 	mvn.w	r0, #1
}
 8005336:	b003      	add	sp, #12
 8005338:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 800533a:	2000      	movs	r0, #0
}
 800533c:	b003      	add	sp, #12
 800533e:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8005340:	f06f 0002 	mvn.w	r0, #2
}
 8005344:	b003      	add	sp, #12
 8005346:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 8005348:	f06f 0003 	mvn.w	r0, #3
 800534c:	e7e7      	b.n	800531e <osMessageQueueGet+0x4a>
 800534e:	bf00      	nop

08005350 <osMessageQueueGetCount>:
 8005350:	b130      	cbz	r0, 8005360 <osMessageQueueGetCount+0x10>
 8005352:	f3ef 8305 	mrs	r3, IPSR
 8005356:	b10b      	cbz	r3, 800535c <osMessageQueueGetCount+0xc>
 8005358:	f000 be3c 	b.w	8005fd4 <uxQueueMessagesWaitingFromISR>
 800535c:	f000 be24 	b.w	8005fa8 <uxQueueMessagesWaiting>
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop

08005364 <osMessageQueueDelete>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	f3ef 8405 	mrs	r4, IPSR
 800536a:	b944      	cbnz	r4, 800537e <osMessageQueueDelete+0x1a>
 800536c:	4605      	mov	r5, r0
 800536e:	b148      	cbz	r0, 8005384 <osMessageQueueDelete+0x20>
 8005370:	f000 fe7c 	bl	800606c <vQueueUnregisterQueue>
 8005374:	4628      	mov	r0, r5
 8005376:	f000 fe39 	bl	8005fec <vQueueDelete>
 800537a:	4620      	mov	r0, r4
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	f06f 0005 	mvn.w	r0, #5
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	f06f 0003 	mvn.w	r0, #3
 8005388:	bd38      	pop	{r3, r4, r5, pc}
 800538a:	bf00      	nop

0800538c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800538e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005390:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005392:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005396:	4c04      	ldr	r4, [pc, #16]	; (80053a8 <vApplicationGetIdleTaskMemory+0x1c>)
 8005398:	600c      	str	r4, [r1, #0]
}
 800539a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	24001284 	.word	0x24001284
 80053a8:	24000a84 	.word	0x24000a84

080053ac <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053ae:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053b0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053b6:	4c04      	ldr	r4, [pc, #16]	; (80053c8 <vApplicationGetTimerTaskMemory+0x1c>)
 80053b8:	600c      	str	r4, [r1, #0]
}
 80053ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053be:	6013      	str	r3, [r2, #0]
}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	24002330 	.word	0x24002330
 80053c8:	24001330 	.word	0x24001330

080053cc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053cc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053d0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053d4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053d6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053d8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053da:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053dc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop

080053e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80053ec:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80053ee:	6802      	ldr	r2, [r0, #0]
{
 80053f0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053f2:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80053f4:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80053f6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053f8:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053fa:	689c      	ldr	r4, [r3, #8]
 80053fc:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053fe:	6099      	str	r1, [r3, #8]
}
 8005400:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8005404:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005406:	6002      	str	r2, [r0, #0]
}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop

0800540c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800540c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800540e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005410:	1c6b      	adds	r3, r5, #1
 8005412:	d010      	beq.n	8005436 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005414:	f100 0308 	add.w	r3, r0, #8
 8005418:	461c      	mov	r4, r3
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	42aa      	cmp	r2, r5
 8005420:	d9fa      	bls.n	8005418 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005422:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005424:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005426:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005428:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800542a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800542c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800542e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005430:	6002      	str	r2, [r0, #0]
}
 8005432:	bc30      	pop	{r4, r5}
 8005434:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005436:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005438:	6863      	ldr	r3, [r4, #4]
 800543a:	e7f2      	b.n	8005422 <vListInsert+0x16>

0800543c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800543c:	6903      	ldr	r3, [r0, #16]
{
 800543e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005440:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005442:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8005446:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005448:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800544c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800544e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8005450:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005454:	bf08      	it	eq
 8005456:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8005458:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800545a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800545c:	3a01      	subs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005460:	6818      	ldr	r0, [r3, #0]
}
 8005462:	4770      	bx	lr

08005464 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005468:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800546a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800546c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800546e:	b92a      	cbnz	r2, 800547c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005470:	6805      	ldr	r5, [r0, #0]
 8005472:	b365      	cbz	r5, 80054ce <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005474:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8005476:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005478:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800547a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800547c:	b97d      	cbnz	r5, 800549e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800547e:	6840      	ldr	r0, [r0, #4]
 8005480:	f00d f9f7 	bl	8012872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005484:	6863      	ldr	r3, [r4, #4]
 8005486:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005488:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800548a:	68a2      	ldr	r2, [r4, #8]
 800548c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800548e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005490:	d319      	bcc.n	80054c6 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005492:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005494:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8005496:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005498:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800549a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800549c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800549e:	68c0      	ldr	r0, [r0, #12]
 80054a0:	f00d f9e7 	bl	8012872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	4251      	negs	r1, r2
 80054aa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054b0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054b2:	d202      	bcs.n	80054ba <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	440b      	add	r3, r1
 80054b8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80054ba:	2d02      	cmp	r5, #2
 80054bc:	d00d      	beq.n	80054da <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054be:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80054c0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054c2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054c6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80054c8:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054ca:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054ce:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054d0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054d2:	f001 fb61 	bl	8006b98 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054d6:	60a5      	str	r5, [r4, #8]
 80054d8:	e7ce      	b.n	8005478 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054da:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80054dc:	f04f 0000 	mov.w	r0, #0
 80054e0:	bf38      	it	cc
 80054e2:	2601      	movcc	r6, #1
 80054e4:	e7c8      	b.n	8005478 <prvCopyDataToQueue+0x14>
 80054e6:	bf00      	nop

080054e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054ec:	f001 fe7a 	bl	80071e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054f0:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80054f4:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f6:	2c00      	cmp	r4, #0
 80054f8:	dd14      	ble.n	8005524 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054fa:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80054fe:	e003      	b.n	8005508 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005500:	1e63      	subs	r3, r4, #1
 8005502:	b2da      	uxtb	r2, r3
 8005504:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005506:	b16a      	cbz	r2, 8005524 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005508:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800550a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800550c:	b153      	cbz	r3, 8005524 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800550e:	f001 fa43 	bl	8006998 <xTaskRemoveFromEventList>
 8005512:	2800      	cmp	r0, #0
 8005514:	d0f4      	beq.n	8005500 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005516:	f001 fadd 	bl	8006ad4 <vTaskMissedYield>
			--cTxLock;
 800551a:	1e63      	subs	r3, r4, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005520:	2a00      	cmp	r2, #0
 8005522:	d1f1      	bne.n	8005508 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005524:	23ff      	movs	r3, #255	; 0xff
 8005526:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800552a:	f001 fe7d 	bl	8007228 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800552e:	f001 fe59 	bl	80071e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005532:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8005536:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005538:	2c00      	cmp	r4, #0
 800553a:	dd14      	ble.n	8005566 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800553c:	f105 0610 	add.w	r6, r5, #16
 8005540:	e003      	b.n	800554a <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005542:	1e63      	subs	r3, r4, #1
 8005544:	b2da      	uxtb	r2, r3
 8005546:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005548:	b16a      	cbz	r2, 8005566 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800554a:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800554e:	b153      	cbz	r3, 8005566 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005550:	f001 fa22 	bl	8006998 <xTaskRemoveFromEventList>
 8005554:	2800      	cmp	r0, #0
 8005556:	d0f4      	beq.n	8005542 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8005558:	f001 fabc 	bl	8006ad4 <vTaskMissedYield>
				--cRxLock;
 800555c:	1e63      	subs	r3, r4, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005562:	2a00      	cmp	r2, #0
 8005564:	d1f1      	bne.n	800554a <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005566:	23ff      	movs	r3, #255	; 0xff
 8005568:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 800556c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005570:	f001 be5a 	b.w	8007228 <vPortExitCritical>

08005574 <xQueueGenericReset>:
{
 8005574:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005576:	b1e0      	cbz	r0, 80055b2 <xQueueGenericReset+0x3e>
 8005578:	4604      	mov	r4, r0
 800557a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800557c:	f001 fe32 	bl	80071e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005586:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005588:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800558c:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800558e:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005590:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005592:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005594:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005596:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005598:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800559a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800559c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80055a4:	b975      	cbnz	r5, 80055c4 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	b9c3      	cbnz	r3, 80055dc <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 80055aa:	f001 fe3d 	bl	8007228 <vPortExitCritical>
}
 80055ae:	2001      	movs	r0, #1
 80055b0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80055c2:	e7fe      	b.n	80055c2 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055c4:	f104 0010 	add.w	r0, r4, #16
 80055c8:	f7ff ff00 	bl	80053cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055d0:	f7ff fefc 	bl	80053cc <vListInitialise>
	taskEXIT_CRITICAL();
 80055d4:	f001 fe28 	bl	8007228 <vPortExitCritical>
}
 80055d8:	2001      	movs	r0, #1
 80055da:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055dc:	f104 0010 	add.w	r0, r4, #16
 80055e0:	f001 f9da 	bl	8006998 <xTaskRemoveFromEventList>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d0e0      	beq.n	80055aa <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80055e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80055ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	e7d5      	b.n	80055aa <xQueueGenericReset+0x36>
 80055fe:	bf00      	nop

08005600 <xQueueGenericCreateStatic>:
	{
 8005600:	b530      	push	{r4, r5, lr}
 8005602:	b085      	sub	sp, #20
 8005604:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005608:	b940      	cbnz	r0, 800561c <xQueueGenericCreateStatic+0x1c>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	e7fe      	b.n	800561a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800561c:	b153      	cbz	r3, 8005634 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800561e:	b30a      	cbz	r2, 8005664 <xQueueGenericCreateStatic+0x64>
 8005620:	b989      	cbnz	r1, 8005646 <xQueueGenericCreateStatic+0x46>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	e7fe      	b.n	8005632 <xQueueGenericCreateStatic+0x32>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005644:	e7fe      	b.n	8005644 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005646:	b16a      	cbz	r2, 8005664 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005648:	2550      	movs	r5, #80	; 0x50
 800564a:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800564c:	9d03      	ldr	r5, [sp, #12]
 800564e:	2d50      	cmp	r5, #80	; 0x50
 8005650:	d013      	beq.n	800567a <xQueueGenericCreateStatic+0x7a>
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	e7fe      	b.n	8005662 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005664:	2900      	cmp	r1, #0
 8005666:	d0ef      	beq.n	8005648 <xQueueGenericCreateStatic+0x48>
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	e7fe      	b.n	8005678 <xQueueGenericCreateStatic+0x78>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800567a:	2900      	cmp	r1, #0
 800567c:	bf08      	it	eq
 800567e:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8005680:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005682:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8005684:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005686:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005688:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800568a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 800568e:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005690:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005692:	f7ff ff6f 	bl	8005574 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005696:	9b01      	ldr	r3, [sp, #4]
	}
 8005698:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 800569a:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 800569e:	b005      	add	sp, #20
 80056a0:	bd30      	pop	{r4, r5, pc}
 80056a2:	bf00      	nop

080056a4 <xQueueGenericCreate>:
	{
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056a6:	b940      	cbnz	r0, 80056ba <xQueueGenericCreate+0x16>
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericCreate+0x14>
 80056ba:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056bc:	fb01 f000 	mul.w	r0, r1, r0
 80056c0:	460d      	mov	r5, r1
 80056c2:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056c4:	3050      	adds	r0, #80	; 0x50
 80056c6:	f001 ff09 	bl	80074dc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80056ca:	4607      	mov	r7, r0
 80056cc:	b170      	cbz	r0, 80056ec <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80056d4:	b165      	cbz	r5, 80056f0 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056d6:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056da:	2101      	movs	r1, #1
 80056dc:	4638      	mov	r0, r7
 80056de:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80056e0:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056e4:	f7ff ff46 	bl	8005574 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80056e8:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 80056ec:	4638      	mov	r0, r7
 80056ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f0:	4603      	mov	r3, r0
 80056f2:	e7f2      	b.n	80056da <xQueueGenericCreate+0x36>

080056f4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80056f4:	b940      	cbnz	r0, 8005708 <xQueueCreateCountingSemaphoreStatic+0x14>
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	e7fe      	b.n	8005706 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005708:	4288      	cmp	r0, r1
	{
 800570a:	b510      	push	{r4, lr}
 800570c:	460c      	mov	r4, r1
 800570e:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8005710:	d208      	bcs.n	8005724 <xQueueCreateCountingSemaphoreStatic+0x30>
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	e7fe      	b.n	8005722 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005724:	2102      	movs	r1, #2
 8005726:	4613      	mov	r3, r2
 8005728:	2200      	movs	r2, #0
 800572a:	9100      	str	r1, [sp, #0]
 800572c:	4611      	mov	r1, r2
 800572e:	f7ff ff67 	bl	8005600 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005732:	b100      	cbz	r0, 8005736 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005734:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005736:	b002      	add	sp, #8
 8005738:	bd10      	pop	{r4, pc}
 800573a:	bf00      	nop

0800573c <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800573c:	b940      	cbnz	r0, 8005750 <xQueueCreateCountingSemaphore+0x14>
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	e7fe      	b.n	800574e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005750:	4288      	cmp	r0, r1
	{
 8005752:	b510      	push	{r4, lr}
 8005754:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005756:	d208      	bcs.n	800576a <xQueueCreateCountingSemaphore+0x2e>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	e7fe      	b.n	8005768 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800576a:	2202      	movs	r2, #2
 800576c:	2100      	movs	r1, #0
 800576e:	f7ff ff99 	bl	80056a4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8005772:	b100      	cbz	r0, 8005776 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005774:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005776:	bd10      	pop	{r4, pc}

08005778 <xQueueGenericSend>:
{
 8005778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800577c:	b085      	sub	sp, #20
 800577e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005780:	2800      	cmp	r0, #0
 8005782:	d07e      	beq.n	8005882 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005784:	460f      	mov	r7, r1
 8005786:	4604      	mov	r4, r0
 8005788:	461e      	mov	r6, r3
 800578a:	2900      	cmp	r1, #0
 800578c:	d069      	beq.n	8005862 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800578e:	2e02      	cmp	r6, #2
 8005790:	d10b      	bne.n	80057aa <xQueueGenericSend+0x32>
 8005792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d008      	beq.n	80057aa <xQueueGenericSend+0x32>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057aa:	f001 f99f 	bl	8006aec <xTaskGetSchedulerState>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d070      	beq.n	8005894 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057b2:	f1a6 0802 	sub.w	r8, r6, #2
 80057b6:	2500      	movs	r5, #0
 80057b8:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80057bc:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057be:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80057c2:	e007      	b.n	80057d4 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80057c4:	f001 fd30 	bl	8007228 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fe8d 	bl	80054e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ce:	f001 f815 	bl	80067fc <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057d2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80057d4:	f001 fd06 	bl	80071e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057dc:	4290      	cmp	r0, r2
 80057de:	d365      	bcc.n	80058ac <xQueueGenericSend+0x134>
 80057e0:	f1b8 0f00 	cmp.w	r8, #0
 80057e4:	d162      	bne.n	80058ac <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 80057e6:	9b01      	ldr	r3, [sp, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d077      	beq.n	80058dc <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	d044      	beq.n	800587a <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 80057f0:	f001 fd1a 	bl	8007228 <vPortExitCritical>
		vTaskSuspendAll();
 80057f4:	f000 feae 	bl	8006554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057f8:	f001 fcf4 	bl	80071e4 <vPortEnterCritical>
 80057fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005800:	2bff      	cmp	r3, #255	; 0xff
 8005802:	d101      	bne.n	8005808 <xQueueGenericSend+0x90>
 8005804:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8005808:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800580c:	2bff      	cmp	r3, #255	; 0xff
 800580e:	d101      	bne.n	8005814 <xQueueGenericSend+0x9c>
 8005810:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8005814:	f001 fd08 	bl	8007228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005818:	a901      	add	r1, sp, #4
 800581a:	a802      	add	r0, sp, #8
 800581c:	f001 f912 	bl	8006a44 <xTaskCheckForTimeOut>
 8005820:	2800      	cmp	r0, #0
 8005822:	d15f      	bne.n	80058e4 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8005824:	f001 fcde 	bl	80071e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005828:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800582a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800582c:	429a      	cmp	r2, r3
 800582e:	d1c9      	bne.n	80057c4 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8005830:	f001 fcfa 	bl	8007228 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005834:	9901      	ldr	r1, [sp, #4]
 8005836:	f104 0010 	add.w	r0, r4, #16
 800583a:	f001 f875 	bl	8006928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff fe52 	bl	80054e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005844:	f000 ffda 	bl	80067fc <xTaskResumeAll>
 8005848:	2800      	cmp	r0, #0
 800584a:	d1c2      	bne.n	80057d2 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 800584c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005854:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	e7b7      	b.n	80057d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005862:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d092      	beq.n	800578e <xQueueGenericSend+0x16>
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	e7fe      	b.n	8005878 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800587a:	a802      	add	r0, sp, #8
 800587c:	f001 f8d6 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005880:	e7b6      	b.n	80057f0 <xQueueGenericSend+0x78>
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005892:	e7fe      	b.n	8005892 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005894:	9b01      	ldr	r3, [sp, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d08b      	beq.n	80057b2 <xQueueGenericSend+0x3a>
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ac:	4632      	mov	r2, r6
 80058ae:	4639      	mov	r1, r7
 80058b0:	4620      	mov	r0, r4
 80058b2:	f7ff fdd7 	bl	8005464 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058b8:	b9db      	cbnz	r3, 80058f2 <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 80058ba:	b148      	cbz	r0, 80058d0 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 80058bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80058d0:	f001 fcaa 	bl	8007228 <vPortExitCritical>
				return pdPASS;
 80058d4:	2001      	movs	r0, #1
}
 80058d6:	b005      	add	sp, #20
 80058d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80058dc:	f001 fca4 	bl	8007228 <vPortExitCritical>
					return errQUEUE_FULL;
 80058e0:	4640      	mov	r0, r8
 80058e2:	e7f8      	b.n	80058d6 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7ff fdff 	bl	80054e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ea:	f000 ff87 	bl	80067fc <xTaskResumeAll>
			return errQUEUE_FULL;
 80058ee:	2000      	movs	r0, #0
 80058f0:	e7f1      	b.n	80058d6 <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80058f6:	f001 f84f 	bl	8006998 <xTaskRemoveFromEventList>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0e8      	beq.n	80058d0 <xQueueGenericSend+0x158>
 80058fe:	e7dd      	b.n	80058bc <xQueueGenericSend+0x144>

08005900 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8005900:	b179      	cbz	r1, 8005922 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005902:	2350      	movs	r3, #80	; 0x50
	{
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005908:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	2b50      	cmp	r3, #80	; 0x50
 800590e:	d011      	beq.n	8005934 <xQueueCreateMutexStatic+0x34>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	e7fe      	b.n	8005920 <xQueueCreateMutexStatic+0x20>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005932:	e7fe      	b.n	8005932 <xQueueCreateMutexStatic+0x32>
 8005934:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 8005936:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005938:	2101      	movs	r1, #1
 800593a:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800593c:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800593e:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005940:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005944:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 8005946:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800594a:	f7ff fe13 	bl	8005574 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800594e:	4633      	mov	r3, r6
 8005950:	4632      	mov	r2, r6
 8005952:	4631      	mov	r1, r6
 8005954:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8005956:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800595a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800595c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800595e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005960:	f7ff ff0a 	bl	8005778 <xQueueGenericSend>
	}
 8005964:	4620      	mov	r0, r4
 8005966:	b002      	add	sp, #8
 8005968:	bd70      	pop	{r4, r5, r6, pc}
 800596a:	bf00      	nop

0800596c <xQueueGiveMutexRecursive>:
	{
 800596c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800596e:	b138      	cbz	r0, 8005980 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005970:	6885      	ldr	r5, [r0, #8]
 8005972:	4604      	mov	r4, r0
 8005974:	f001 f8b4 	bl	8006ae0 <xTaskGetCurrentTaskHandle>
 8005978:	4285      	cmp	r5, r0
 800597a:	d00a      	beq.n	8005992 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800597c:	2000      	movs	r0, #0
	}
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8005990:	e7fe      	b.n	8005990 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	3b01      	subs	r3, #1
 8005996:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005998:	b10b      	cbz	r3, 800599e <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800599a:	2001      	movs	r0, #1
	}
 800599c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800599e:	461a      	mov	r2, r3
 80059a0:	4619      	mov	r1, r3
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff fee8 	bl	8005778 <xQueueGenericSend>
			xReturn = pdPASS;
 80059a8:	2001      	movs	r0, #1
	}
 80059aa:	bd38      	pop	{r3, r4, r5, pc}

080059ac <xQueueCreateMutex>:
	{
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059b0:	2050      	movs	r0, #80	; 0x50
 80059b2:	f001 fd93 	bl	80074dc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80059b6:	4604      	mov	r4, r0
 80059b8:	b198      	cbz	r0, 80059e2 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059ba:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 80059bc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059be:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059c0:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80059c4:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059c8:	f7ff fdd4 	bl	8005574 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80059cc:	4633      	mov	r3, r6
 80059ce:	4632      	mov	r2, r6
 80059d0:	4631      	mov	r1, r6
 80059d2:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80059d4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80059d8:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80059da:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80059dc:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80059de:	f7ff fecb 	bl	8005778 <xQueueGenericSend>
	}
 80059e2:	4620      	mov	r0, r4
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	bf00      	nop

080059e8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d04e      	beq.n	8005a8a <xQueueGenericSendFromISR+0xa2>
{
 80059ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f0:	460e      	mov	r6, r1
 80059f2:	4604      	mov	r4, r0
 80059f4:	4617      	mov	r7, r2
 80059f6:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059f8:	b339      	cbz	r1, 8005a4a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059fa:	2d02      	cmp	r5, #2
 80059fc:	d10b      	bne.n	8005a16 <xQueueGenericSendFromISR+0x2e>
 80059fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d008      	beq.n	8005a16 <xQueueGenericSendFromISR+0x2e>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a16:	f001 fd01 	bl	800741c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a1a:	f3ef 8811 	mrs	r8, BASEPRI
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d315      	bcc.n	8005a62 <xQueueGenericSendFromISR+0x7a>
 8005a36:	f1a5 0002 	sub.w	r0, r5, #2
 8005a3a:	fab0 f080 	clz	r0, r0
 8005a3e:	0940      	lsrs	r0, r0, #5
 8005a40:	b978      	cbnz	r0, 8005a62 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a42:	f388 8811 	msr	BASEPRI, r8
}
 8005a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0d4      	beq.n	80059fa <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a62:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a64:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a6c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a70:	f7ff fcf8 	bl	8005464 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005a74:	1c6b      	adds	r3, r5, #1
 8005a76:	d011      	beq.n	8005a9c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a78:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8005a7a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a7c:	b25b      	sxtb	r3, r3
 8005a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8005a82:	f388 8811 	msr	BASEPRI, r8
}
 8005a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005a9a:	e7fe      	b.n	8005a9a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a9e:	b90b      	cbnz	r3, 8005aa4 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	e7ce      	b.n	8005a42 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005aa8:	f000 ff76 	bl	8006998 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d0f7      	beq.n	8005aa0 <xQueueGenericSendFromISR+0xb8>
 8005ab0:	2f00      	cmp	r7, #0
 8005ab2:	d0f5      	beq.n	8005aa0 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8005ab6:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	e7c2      	b.n	8005a42 <xQueueGenericSendFromISR+0x5a>

08005abc <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8005abc:	b360      	cbz	r0, 8005b18 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005abe:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ac4:	b143      	cbz	r3, 8005ad8 <xQueueGiveFromISR+0x1c>
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005ad8:	6803      	ldr	r3, [r0, #0]
 8005ada:	460d      	mov	r5, r1
 8005adc:	b32b      	cbz	r3, 8005b2a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ade:	f001 fc9d 	bl	800741c <vPortValidateInterruptPriority>
	__asm volatile
 8005ae2:	f3ef 8611 	mrs	r6, BASEPRI
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005af6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005af8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d921      	bls.n	8005b42 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005afe:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b02:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8005b04:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b06:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b08:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8005b0a:	d01e      	beq.n	8005b4a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b0c:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8005b0e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b16:	e015      	b.n	8005b44 <xQueueGiveFromISR+0x88>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b28:	e7fe      	b.n	8005b28 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b2a:	6883      	ldr	r3, [r0, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0d6      	beq.n	8005ade <xQueueGiveFromISR+0x22>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	e7fe      	b.n	8005b40 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005b42:	2000      	movs	r0, #0
	__asm volatile
 8005b44:	f386 8811 	msr	BASEPRI, r6
}
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b4c:	b90b      	cbnz	r3, 8005b52 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 8005b4e:	2001      	movs	r0, #1
 8005b50:	e7f8      	b.n	8005b44 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b56:	f000 ff1f 	bl	8006998 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	d0f7      	beq.n	8005b4e <xQueueGiveFromISR+0x92>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0f5      	beq.n	8005b4e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b62:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8005b64:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b66:	602b      	str	r3, [r5, #0]
 8005b68:	e7ec      	b.n	8005b44 <xQueueGiveFromISR+0x88>
 8005b6a:	bf00      	nop

08005b6c <xQueueReceive>:
{
 8005b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b70:	b085      	sub	sp, #20
 8005b72:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f000 80a0 	beq.w	8005cba <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b7a:	460d      	mov	r5, r1
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	d047      	beq.n	8005c12 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b82:	f000 ffb3 	bl	8006aec <xTaskGetSchedulerState>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d04f      	beq.n	8005c2a <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8005b8a:	f001 fb2b 	bl	80071e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b90:	2e00      	cmp	r6, #0
 8005b92:	d17d      	bne.n	8005c90 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d035      	beq.n	8005c06 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8005b9a:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b9c:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8005ba0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba4:	a802      	add	r0, sp, #8
 8005ba6:	f000 ff41 	bl	8006a2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005baa:	f001 fb3d 	bl	8007228 <vPortExitCritical>
		vTaskSuspendAll();
 8005bae:	f000 fcd1 	bl	8006554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb2:	f001 fb17 	bl	80071e4 <vPortEnterCritical>
 8005bb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005bba:	2bff      	cmp	r3, #255	; 0xff
 8005bbc:	d101      	bne.n	8005bc2 <xQueueReceive+0x56>
 8005bbe:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8005bc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005bc6:	2bff      	cmp	r3, #255	; 0xff
 8005bc8:	d101      	bne.n	8005bce <xQueueReceive+0x62>
 8005bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bce:	f001 fb2b 	bl	8007228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bd2:	a901      	add	r1, sp, #4
 8005bd4:	a802      	add	r0, sp, #8
 8005bd6:	f000 ff35 	bl	8006a44 <xTaskCheckForTimeOut>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d131      	bne.n	8005c42 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8005bde:	f001 fb01 	bl	80071e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d039      	beq.n	8005c5c <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8005be8:	f001 fb1e 	bl	8007228 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005bec:	4620      	mov	r0, r4
 8005bee:	f7ff fc7b 	bl	80054e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bf2:	f000 fe03 	bl	80067fc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005bf6:	f001 faf5 	bl	80071e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bfa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bfc:	2e00      	cmp	r6, #0
 8005bfe:	d147      	bne.n	8005c90 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1d1      	bne.n	8005baa <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8005c06:	f001 fb0f 	bl	8007228 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005c0a:	2000      	movs	r0, #0
}
 8005c0c:	b005      	add	sp, #20
 8005c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0b4      	beq.n	8005b82 <xQueueReceive+0x16>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	e7fe      	b.n	8005c28 <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c2a:	9b01      	ldr	r3, [sp, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ac      	beq.n	8005b8a <xQueueReceive+0x1e>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	e7fe      	b.n	8005c40 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff fc50 	bl	80054e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c48:	f000 fdd8 	bl	80067fc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005c4c:	f001 faca 	bl	80071e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0d7      	beq.n	8005c06 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8005c56:	f001 fae7 	bl	8007228 <vPortExitCritical>
 8005c5a:	e7cc      	b.n	8005bf6 <xQueueReceive+0x8a>
 8005c5c:	f001 fae4 	bl	8007228 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c60:	9901      	ldr	r1, [sp, #4]
 8005c62:	4640      	mov	r0, r8
 8005c64:	f000 fe60 	bl	8006928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff fc3d 	bl	80054e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c6e:	f000 fdc5 	bl	80067fc <xTaskResumeAll>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d1bf      	bne.n	8005bf6 <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 8005c76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c7a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8005c86:	f001 faad 	bl	80071e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c8a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8c:	2e00      	cmp	r6, #0
 8005c8e:	d0b7      	beq.n	8005c00 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c92:	b152      	cbz	r2, 8005caa <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c94:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c96:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c98:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c9a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c9c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c9e:	d301      	bcc.n	8005ca4 <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f00c fde4 	bl	8012872 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005caa:	3e01      	subs	r6, #1
 8005cac:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	b963      	cbnz	r3, 8005ccc <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8005cb2:	f001 fab9 	bl	8007228 <vPortExitCritical>
				return pdPASS;
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	e7a8      	b.n	8005c0c <xQueueReceive+0xa0>
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005cca:	e7fe      	b.n	8005cca <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ccc:	f104 0010 	add.w	r0, r4, #16
 8005cd0:	f000 fe62 	bl	8006998 <xTaskRemoveFromEventList>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d0ec      	beq.n	8005cb2 <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8005cd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	e7e1      	b.n	8005cb2 <xQueueReceive+0x146>
 8005cee:	bf00      	nop

08005cf0 <xQueueSemaphoreTake>:
{
 8005cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d055      	beq.n	8005da6 <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cfa:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	b146      	cbz	r6, 8005d12 <xQueueSemaphoreTake+0x22>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	e7fe      	b.n	8005d10 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d12:	f000 feeb 	bl	8006aec <xTaskGetSchedulerState>
 8005d16:	4605      	mov	r5, r0
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d04d      	beq.n	8005db8 <xQueueSemaphoreTake+0xc8>
 8005d1c:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8005d1e:	f001 fa61 	bl	80071e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8005d24:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d26:	bb8b      	cbnz	r3, 8005d8c <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 809b 	beq.w	8005e66 <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8005d30:	2d00      	cmp	r5, #0
 8005d32:	d059      	beq.n	8005de8 <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8005d34:	f001 fa78 	bl	8007228 <vPortExitCritical>
		vTaskSuspendAll();
 8005d38:	f000 fc0c 	bl	8006554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d3c:	f001 fa52 	bl	80071e4 <vPortEnterCritical>
 8005d40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d44:	2bff      	cmp	r3, #255	; 0xff
 8005d46:	d101      	bne.n	8005d4c <xQueueSemaphoreTake+0x5c>
 8005d48:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8005d4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d50:	2bff      	cmp	r3, #255	; 0xff
 8005d52:	d101      	bne.n	8005d58 <xQueueSemaphoreTake+0x68>
 8005d54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d58:	f001 fa66 	bl	8007228 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d5c:	a901      	add	r1, sp, #4
 8005d5e:	a802      	add	r0, sp, #8
 8005d60:	f000 fe70 	bl	8006a44 <xTaskCheckForTimeOut>
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d133      	bne.n	8005dd0 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 8005d68:	f001 fa3c 	bl	80071e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d03e      	beq.n	8005df0 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8005d72:	f001 fa59 	bl	8007228 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff fbb6 	bl	80054e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d7c:	f000 fd3e 	bl	80067fc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005d80:	f001 fa30 	bl	80071e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d86:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0cd      	beq.n	8005d28 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d8c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d8e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d90:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f000 8083 	beq.w	8005e9e <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d16e      	bne.n	8005e7c <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 8005d9e:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8005da0:	f001 fa42 	bl	8007228 <vPortExitCritical>
				return pdPASS;
 8005da4:	e042      	b.n	8005e2c <xQueueSemaphoreTake+0x13c>
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005db6:	e7fe      	b.n	8005db6 <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d039      	beq.n	8005e32 <xQueueSemaphoreTake+0x142>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	e7fe      	b.n	8005dce <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff fb89 	bl	80054e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dd6:	f000 fd11 	bl	80067fc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005dda:	f001 fa03 	bl	80071e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005de0:	b30b      	cbz	r3, 8005e26 <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8005de2:	f001 fa21 	bl	8007228 <vPortExitCritical>
	return xReturn;
 8005de6:	e7cb      	b.n	8005d80 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005de8:	a802      	add	r0, sp, #8
 8005dea:	f000 fe1f 	bl	8006a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dee:	e7a1      	b.n	8005d34 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8005df0:	f001 fa1a 	bl	8007228 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	b36b      	cbz	r3, 8005e54 <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df8:	9901      	ldr	r1, [sp, #4]
 8005dfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005dfe:	f000 fd93 	bl	8006928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff fb70 	bl	80054e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e08:	f000 fcf8 	bl	80067fc <xTaskResumeAll>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1b7      	bne.n	8005d80 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8005e10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e7ac      	b.n	8005d80 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8005e26:	f001 f9ff 	bl	8007228 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8005e2a:	b926      	cbnz	r6, 8005e36 <xQueueSemaphoreTake+0x146>
}
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	b005      	add	sp, #20
 8005e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e32:	4606      	mov	r6, r0
 8005e34:	e773      	b.n	8005d1e <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8005e36:	f001 f9d5 	bl	80071e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e3c:	b119      	cbz	r1, 8005e46 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e40:	6819      	ldr	r1, [r3, #0]
 8005e42:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e46:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8005e48:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e4a:	f000 feeb 	bl	8006c24 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005e4e:	f001 f9eb 	bl	8007228 <vPortExitCritical>
 8005e52:	e7eb      	b.n	8005e2c <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8005e54:	f001 f9c6 	bl	80071e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e58:	68a0      	ldr	r0, [r4, #8]
 8005e5a:	f000 fe57 	bl	8006b0c <xTaskPriorityInherit>
 8005e5e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8005e60:	f001 f9e2 	bl	8007228 <vPortExitCritical>
 8005e64:	e7c8      	b.n	8005df8 <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e66:	2e00      	cmp	r6, #0
 8005e68:	d0f1      	beq.n	8005e4e <xQueueSemaphoreTake+0x15e>
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	e7fe      	b.n	8005e7a <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e7c:	f104 0010 	add.w	r0, r4, #16
 8005e80:	f000 fd8a 	bl	8006998 <xTaskRemoveFromEventList>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d08a      	beq.n	8005d9e <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8005e88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	e77f      	b.n	8005d9e <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e9e:	f000 ff15 	bl	8006ccc <pvTaskIncrementMutexHeldCount>
 8005ea2:	60a0      	str	r0, [r4, #8]
 8005ea4:	e778      	b.n	8005d98 <xQueueSemaphoreTake+0xa8>
 8005ea6:	bf00      	nop

08005ea8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8005ea8:	b1a8      	cbz	r0, 8005ed6 <xQueueTakeMutexRecursive+0x2e>
	{
 8005eaa:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005eac:	6886      	ldr	r6, [r0, #8]
 8005eae:	4604      	mov	r4, r0
 8005eb0:	460d      	mov	r5, r1
 8005eb2:	f000 fe15 	bl	8006ae0 <xTaskGetCurrentTaskHandle>
 8005eb6:	4286      	cmp	r6, r0
 8005eb8:	d008      	beq.n	8005ecc <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff17 	bl	8005cf0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8005ec2:	b110      	cbz	r0, 8005eca <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	60e3      	str	r3, [r4, #12]
	}
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ecc:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8005ece:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ed0:	4403      	add	r3, r0
 8005ed2:	60e3      	str	r3, [r4, #12]
	}
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8005ee6:	e7fe      	b.n	8005ee6 <xQueueTakeMutexRecursive+0x3e>

08005ee8 <xQueueReceiveFromISR>:
{
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005eec:	b310      	cbz	r0, 8005f34 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eee:	460e      	mov	r6, r1
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4617      	mov	r7, r2
 8005ef4:	b191      	cbz	r1, 8005f1c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ef6:	f001 fa91 	bl	800741c <vPortValidateInterruptPriority>
	__asm volatile
 8005efa:	f3ef 8911 	mrs	r9, BASEPRI
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f10:	b9cd      	cbnz	r5, 8005f46 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005f12:	4628      	mov	r0, r5
	__asm volatile
 8005f14:	f389 8811 	msr	BASEPRI, r9
}
 8005f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0e9      	beq.n	8005ef6 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	e7fe      	b.n	8005f32 <xQueueReceiveFromISR+0x4a>
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005f44:	e7fe      	b.n	8005f44 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f46:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f4c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f50:	b142      	cbz	r2, 8005f64 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f52:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f54:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f56:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f58:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f5a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f5c:	d215      	bcs.n	8005f8a <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f00c fc87 	bl	8012872 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f64:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8005f66:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f6a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005f6c:	d009      	beq.n	8005f82 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f6e:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8005f72:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8005f7a:	f389 8811 	msr	BASEPRI, r9
}
 8005f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	b923      	cbnz	r3, 8005f90 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7c4      	b.n	8005f14 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f8a:	6821      	ldr	r1, [r4, #0]
 8005f8c:	60e1      	str	r1, [r4, #12]
 8005f8e:	e7e6      	b.n	8005f5e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f90:	f104 0010 	add.w	r0, r4, #16
 8005f94:	f000 fd00 	bl	8006998 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	d0f4      	beq.n	8005f86 <xQueueReceiveFromISR+0x9e>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d0f2      	beq.n	8005f86 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8005fa2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	e7b5      	b.n	8005f14 <xQueueReceiveFromISR+0x2c>

08005fa8 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8005fa8:	b158      	cbz	r0, 8005fc2 <uxQueueMessagesWaiting+0x1a>
{
 8005faa:	b510      	push	{r4, lr}
 8005fac:	4604      	mov	r4, r0
 8005fae:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 8005fb0:	f001 f918 	bl	80071e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005fb4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005fb6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005fb8:	f001 f936 	bl	8007228 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fbc:	9801      	ldr	r0, [sp, #4]
 8005fbe:	b002      	add	sp, #8
 8005fc0:	bd10      	pop	{r4, pc}
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8005fd2:	e7fe      	b.n	8005fd2 <uxQueueMessagesWaiting+0x2a>

08005fd4 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8005fd4:	b108      	cbz	r0, 8005fda <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005fd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fd8:	4770      	bx	lr
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005fea:	e7fe      	b.n	8005fea <uxQueueMessagesWaitingFromISR+0x16>

08005fec <vQueueDelete>:
	configASSERT( pxQueue );
 8005fec:	b180      	cbz	r0, 8006010 <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fee:	2300      	movs	r3, #0
{
 8005ff0:	b410      	push	{r4}
 8005ff2:	4c12      	ldr	r4, [pc, #72]	; (800603c <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ff4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8005ff8:	6851      	ldr	r1, [r2, #4]
 8005ffa:	4288      	cmp	r0, r1
 8005ffc:	d015      	beq.n	800602a <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ffe:	3301      	adds	r3, #1
 8006000:	2b08      	cmp	r3, #8
 8006002:	d1f7      	bne.n	8005ff4 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006004:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8006008:	b15b      	cbz	r3, 8006022 <vQueueDelete+0x36>
}
 800600a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006020:	e7fe      	b.n	8006020 <vQueueDelete+0x34>
}
 8006022:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 8006026:	f001 baef 	b.w	8007608 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800602a:	2100      	movs	r1, #0
 800602c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006030:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006034:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e7      	bne.n	800600a <vQueueDelete+0x1e>
 800603a:	e7f2      	b.n	8006022 <vQueueDelete+0x36>
 800603c:	240023d8 	.word	0x240023d8

08006040 <vQueueAddToRegistry>:
	{
 8006040:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006042:	2300      	movs	r3, #0
 8006044:	4c08      	ldr	r4, [pc, #32]	; (8006068 <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006046:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800604a:	b12a      	cbz	r2, 8006058 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800604c:	3301      	adds	r3, #1
 800604e:	2b08      	cmp	r3, #8
 8006050:	d1f9      	bne.n	8006046 <vQueueAddToRegistry+0x6>
	}
 8006052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006056:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006058:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800605c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8006060:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006064:	6050      	str	r0, [r2, #4]
	}
 8006066:	4770      	bx	lr
 8006068:	240023d8 	.word	0x240023d8

0800606c <vQueueUnregisterQueue>:
	{
 800606c:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800606e:	2300      	movs	r3, #0
 8006070:	4c09      	ldr	r4, [pc, #36]	; (8006098 <vQueueUnregisterQueue+0x2c>)
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006072:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8006076:	6851      	ldr	r1, [r2, #4]
 8006078:	4281      	cmp	r1, r0
 800607a:	d005      	beq.n	8006088 <vQueueUnregisterQueue+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800607c:	3301      	adds	r3, #1
 800607e:	2b08      	cmp	r3, #8
 8006080:	d1f7      	bne.n	8006072 <vQueueUnregisterQueue+0x6>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006086:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006088:	2100      	movs	r1, #0
 800608a:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800608e:	6051      	str	r1, [r2, #4]
	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	240023d8 	.word	0x240023d8

0800609c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4604      	mov	r4, r0
 80060a0:	460e      	mov	r6, r1
 80060a2:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060a4:	f001 f89e 	bl	80071e4 <vPortEnterCritical>
 80060a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80060ac:	2bff      	cmp	r3, #255	; 0xff
 80060ae:	d102      	bne.n	80060b6 <vQueueWaitForMessageRestricted+0x1a>
 80060b0:	2300      	movs	r3, #0
 80060b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80060b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80060ba:	2bff      	cmp	r3, #255	; 0xff
 80060bc:	d102      	bne.n	80060c4 <vQueueWaitForMessageRestricted+0x28>
 80060be:	2300      	movs	r3, #0
 80060c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060c4:	f001 f8b0 	bl	8007228 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060ca:	b123      	cbz	r3, 80060d6 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060cc:	4620      	mov	r0, r4
	}
 80060ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80060d2:	f7ff ba09 	b.w	80054e8 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80060da:	462a      	mov	r2, r5
 80060dc:	4631      	mov	r1, r6
 80060de:	f000 fc3d 	bl	800695c <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80060e2:	4620      	mov	r0, r4
	}
 80060e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80060e8:	f7ff b9fe 	b.w	80054e8 <prvUnlockQueue>

080060ec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060f2:	f001 f877 	bl	80071e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80060f8:	4e34      	ldr	r6, [pc, #208]	; (80061cc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80060fa:	6813      	ldr	r3, [r2, #0]
 80060fc:	3301      	adds	r3, #1
 80060fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006100:	6833      	ldr	r3, [r6, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d032      	beq.n	800616c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006106:	4c32      	ldr	r4, [pc, #200]	; (80061d0 <prvAddNewTaskToReadyList+0xe4>)
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	b33b      	cbz	r3, 800615c <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800610c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800610e:	4f31      	ldr	r7, [pc, #196]	; (80061d4 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006110:	4a31      	ldr	r2, [pc, #196]	; (80061d8 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006112:	4932      	ldr	r1, [pc, #200]	; (80061dc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8006114:	6813      	ldr	r3, [r2, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800611a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800611c:	680b      	ldr	r3, [r1, #0]
 800611e:	4283      	cmp	r3, r0
 8006120:	d200      	bcs.n	8006124 <prvAddNewTaskToReadyList+0x38>
 8006122:	6008      	str	r0, [r1, #0]
 8006124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006128:	1d29      	adds	r1, r5, #4
 800612a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800612e:	f7ff f95d 	bl	80053ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006132:	f001 f879 	bl	8007228 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	b173      	cbz	r3, 8006158 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800613a:	6832      	ldr	r2, [r6, #0]
 800613c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800613e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006140:	429a      	cmp	r2, r3
 8006142:	d209      	bcs.n	8006158 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006144:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800615c:	6833      	ldr	r3, [r6, #0]
 800615e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	4f1c      	ldr	r7, [pc, #112]	; (80061d4 <prvAddNewTaskToReadyList+0xe8>)
 8006164:	4283      	cmp	r3, r0
 8006166:	d8d3      	bhi.n	8006110 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8006168:	6035      	str	r5, [r6, #0]
 800616a:	e7d1      	b.n	8006110 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800616c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d003      	beq.n	800617c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006174:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006176:	4f17      	ldr	r7, [pc, #92]	; (80061d4 <prvAddNewTaskToReadyList+0xe8>)
 8006178:	4c15      	ldr	r4, [pc, #84]	; (80061d0 <prvAddNewTaskToReadyList+0xe4>)
 800617a:	e7c9      	b.n	8006110 <prvAddNewTaskToReadyList+0x24>
 800617c:	4f15      	ldr	r7, [pc, #84]	; (80061d4 <prvAddNewTaskToReadyList+0xe8>)
 800617e:	463c      	mov	r4, r7
 8006180:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006184:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006186:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006188:	f7ff f920 	bl	80053cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618c:	45a0      	cmp	r8, r4
 800618e:	d1f9      	bne.n	8006184 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006190:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80061f4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8006194:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80061f8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8006198:	4648      	mov	r0, r9
 800619a:	4c0d      	ldr	r4, [pc, #52]	; (80061d0 <prvAddNewTaskToReadyList+0xe4>)
 800619c:	f7ff f916 	bl	80053cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061a0:	4640      	mov	r0, r8
 80061a2:	f7ff f913 	bl	80053cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061a6:	480e      	ldr	r0, [pc, #56]	; (80061e0 <prvAddNewTaskToReadyList+0xf4>)
 80061a8:	f7ff f910 	bl	80053cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061ac:	480d      	ldr	r0, [pc, #52]	; (80061e4 <prvAddNewTaskToReadyList+0xf8>)
 80061ae:	f7ff f90d 	bl	80053cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <prvAddNewTaskToReadyList+0xfc>)
 80061b4:	f7ff f90a 	bl	80053cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80061ba:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80061bc:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <prvAddNewTaskToReadyList+0x104>)
 80061c2:	f8c3 8000 	str.w	r8, [r3]
}
 80061c6:	e7a3      	b.n	8006110 <prvAddNewTaskToReadyList+0x24>
 80061c8:	24002884 	.word	0x24002884
 80061cc:	24002418 	.word	0x24002418
 80061d0:	240028e0 	.word	0x240028e0
 80061d4:	24002424 	.word	0x24002424
 80061d8:	24002890 	.word	0x24002890
 80061dc:	24002894 	.word	0x24002894
 80061e0:	240028cc 	.word	0x240028cc
 80061e4:	240028f8 	.word	0x240028f8
 80061e8:	240028e4 	.word	0x240028e4
 80061ec:	2400241c 	.word	0x2400241c
 80061f0:	24002420 	.word	0x24002420
 80061f4:	24002898 	.word	0x24002898
 80061f8:	240028ac 	.word	0x240028ac

080061fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061fe:	4b15      	ldr	r3, [pc, #84]	; (8006254 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8006200:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006202:	4e15      	ldr	r6, [pc, #84]	; (8006258 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8006204:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8006206:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006208:	6833      	ldr	r3, [r6, #0]
 800620a:	1d18      	adds	r0, r3, #4
 800620c:	f7ff f916 	bl	800543c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006210:	1c63      	adds	r3, r4, #1
 8006212:	d100      	bne.n	8006216 <prvAddCurrentTaskToDelayedList+0x1a>
 8006214:	b9bf      	cbnz	r7, 8006246 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006216:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006218:	6833      	ldr	r3, [r6, #0]
 800621a:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800621c:	d307      	bcc.n	800622e <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <prvAddCurrentTaskToDelayedList+0x60>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006228:	3104      	adds	r1, #4
 800622a:	f7ff b8ef 	b.w	800540c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <prvAddCurrentTaskToDelayedList+0x64>)
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	6831      	ldr	r1, [r6, #0]
 8006234:	3104      	adds	r1, #4
 8006236:	f7ff f8e9 	bl	800540c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <prvAddCurrentTaskToDelayedList+0x68>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	42aa      	cmp	r2, r5
 8006240:	d900      	bls.n	8006244 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8006242:	601d      	str	r5, [r3, #0]
}
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006246:	6831      	ldr	r1, [r6, #0]
 8006248:	4807      	ldr	r0, [pc, #28]	; (8006268 <prvAddCurrentTaskToDelayedList+0x6c>)
 800624a:	3104      	adds	r1, #4
}
 800624c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006250:	f7ff b8cc 	b.w	80053ec <vListInsertEnd>
 8006254:	2400290c 	.word	0x2400290c
 8006258:	24002418 	.word	0x24002418
 800625c:	24002420 	.word	0x24002420
 8006260:	2400241c 	.word	0x2400241c
 8006264:	240028c0 	.word	0x240028c0
 8006268:	240028e4 	.word	0x240028e4

0800626c <prvDeleteTCB>:
	{
 800626c:	b510      	push	{r4, lr}
 800626e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006270:	3054      	adds	r0, #84	; 0x54
 8006272:	f00c fa35 	bl	80126e0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006276:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800627a:	b163      	cbz	r3, 8006296 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800627c:	2b01      	cmp	r3, #1
 800627e:	d013      	beq.n	80062a8 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006280:	2b02      	cmp	r3, #2
 8006282:	d010      	beq.n	80062a6 <prvDeleteTCB+0x3a>
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	e7fe      	b.n	8006294 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8006296:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006298:	f001 f9b6 	bl	8007608 <vPortFree>
				vPortFree( pxTCB );
 800629c:	4620      	mov	r0, r4
	}
 800629e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80062a2:	f001 b9b1 	b.w	8007608 <vPortFree>
	}
 80062a6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80062a8:	4620      	mov	r0, r4
	}
 80062aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80062ae:	f001 b9ab 	b.w	8007608 <vPortFree>
 80062b2:	bf00      	nop

080062b4 <prvIdleTask>:
{
 80062b4:	4c15      	ldr	r4, [pc, #84]	; (800630c <prvIdleTask+0x58>)
				taskYIELD();
 80062b6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80062ba:	4e15      	ldr	r6, [pc, #84]	; (8006310 <prvIdleTask+0x5c>)
 80062bc:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80062c0:	4d14      	ldr	r5, [pc, #80]	; (8006314 <prvIdleTask+0x60>)
 80062c2:	f8df a054 	ldr.w	sl, [pc, #84]	; 8006318 <prvIdleTask+0x64>
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	e011      	b.n	80062ee <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80062ca:	f000 ff8b 	bl	80071e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ce:	68f3      	ldr	r3, [r6, #12]
 80062d0:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d2:	1d38      	adds	r0, r7, #4
 80062d4:	f7ff f8b2 	bl	800543c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	3b01      	subs	r3, #1
 80062dc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80062e4:	f000 ffa0 	bl	8007228 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ffbf 	bl	800626c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1ea      	bne.n	80062ca <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062f4:	f8da 3000 	ldr.w	r3, [sl]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d9f8      	bls.n	80062ee <prvIdleTask+0x3a>
				taskYIELD();
 80062fc:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	e7f1      	b.n	80062ee <prvIdleTask+0x3a>
 800630a:	bf00      	nop
 800630c:	24002888 	.word	0x24002888
 8006310:	240028f8 	.word	0x240028f8
 8006314:	24002884 	.word	0x24002884
 8006318:	24002424 	.word	0x24002424

0800631c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800631c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006320:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006322:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006326:	4606      	mov	r6, r0
 8006328:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800632a:	464a      	mov	r2, r9
 800632c:	21a5      	movs	r1, #165	; 0xa5
 800632e:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006330:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006332:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006336:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800633a:	f00c f9a6 	bl	801268a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800633e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006340:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006342:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 8006346:	2d00      	cmp	r5, #0
 8006348:	d043      	beq.n	80063d2 <prvInitialiseNewTask.constprop.0+0xb6>
 800634a:	f105 3cff 	add.w	ip, r5, #4294967295
 800634e:	f105 030f 	add.w	r3, r5, #15
 8006352:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006356:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800635a:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800635e:	b10d      	cbz	r5, 8006364 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006360:	459c      	cmp	ip, r3
 8006362:	d1f8      	bne.n	8006356 <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006364:	2300      	movs	r3, #0
 8006366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800636a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800636c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006370:	1d20      	adds	r0, r4, #4
 8006372:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8006374:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8006378:	bf28      	it	cs
 800637a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800637c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800637e:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006380:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006384:	f7ff f82e 	bl	80053e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006388:	f104 0018 	add.w	r0, r4, #24
 800638c:	f7ff f82a 	bl	80053e4 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006390:	4651      	mov	r1, sl
 8006392:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006394:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8006396:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800639a:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800639e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063a0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063a2:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063a6:	f00c f970 	bl	801268a <memset>
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063ac:	463a      	mov	r2, r7
 80063ae:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063b0:	f103 0568 	add.w	r5, r3, #104	; 0x68
 80063b4:	65a3      	str	r3, [r4, #88]	; 0x58
 80063b6:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063b8:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063ba:	65e5      	str	r5, [r4, #92]	; 0x5c
 80063bc:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063be:	f000 fee5 	bl	800718c <pxPortInitialiseStack>
 80063c2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80063c4:	f1b8 0f00 	cmp.w	r8, #0
 80063c8:	d001      	beq.n	80063ce <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063ca:	f8c8 4000 	str.w	r4, [r8]
}
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063d2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80063d6:	e7c8      	b.n	800636a <prvInitialiseNewTask.constprop.0+0x4e>
 80063d8:	24010eac 	.word	0x24010eac

080063dc <xTaskCreateStatic>:
	{
 80063dc:	b530      	push	{r4, r5, lr}
 80063de:	b087      	sub	sp, #28
 80063e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80063e2:	b1c4      	cbz	r4, 8006416 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80063e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063e6:	b16d      	cbz	r5, 8006404 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80063e8:	25a8      	movs	r5, #168	; 0xa8
 80063ea:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ec:	9d05      	ldr	r5, [sp, #20]
 80063ee:	2da8      	cmp	r5, #168	; 0xa8
 80063f0:	d01a      	beq.n	8006428 <xTaskCreateStatic+0x4c>
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	e7fe      	b.n	8006402 <xTaskCreateStatic+0x26>
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006414:	e7fe      	b.n	8006414 <xTaskCreateStatic+0x38>
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006426:	e7fe      	b.n	8006426 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006428:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800642a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800642c:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800642e:	9502      	str	r5, [sp, #8]
 8006430:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006432:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006434:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006436:	f885 40a5 	strb.w	r4, [r5, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800643a:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800643c:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800643e:	9401      	str	r4, [sp, #4]
 8006440:	f7ff ff6c 	bl	800631c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006444:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006446:	f7ff fe51 	bl	80060ec <prvAddNewTaskToReadyList>
	}
 800644a:	9804      	ldr	r0, [sp, #16]
 800644c:	b007      	add	sp, #28
 800644e:	bd30      	pop	{r4, r5, pc}

08006450 <xTaskCreate>:
	{
 8006450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006454:	4607      	mov	r7, r0
 8006456:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006458:	0090      	lsls	r0, r2, #2
	{
 800645a:	4615      	mov	r5, r2
 800645c:	4688      	mov	r8, r1
 800645e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006460:	f001 f83c 	bl	80074dc <pvPortMalloc>
			if( pxStack != NULL )
 8006464:	b1d8      	cbz	r0, 800649e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006466:	4604      	mov	r4, r0
 8006468:	20a8      	movs	r0, #168	; 0xa8
 800646a:	f001 f837 	bl	80074dc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800646e:	4606      	mov	r6, r0
 8006470:	b1d0      	cbz	r0, 80064a8 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8006472:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006474:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006476:	464b      	mov	r3, r9
 8006478:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800647a:	f886 40a5 	strb.w	r4, [r6, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800647e:	4641      	mov	r1, r8
 8006480:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006482:	4638      	mov	r0, r7
 8006484:	9602      	str	r6, [sp, #8]
 8006486:	9401      	str	r4, [sp, #4]
 8006488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800648a:	9400      	str	r4, [sp, #0]
 800648c:	f7ff ff46 	bl	800631c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff fe2b 	bl	80060ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006496:	2001      	movs	r0, #1
	}
 8006498:	b005      	add	sp, #20
 800649a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80064a2:	b005      	add	sp, #20
 80064a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80064a8:	4620      	mov	r0, r4
 80064aa:	f001 f8ad 	bl	8007608 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064ae:	f04f 30ff 	mov.w	r0, #4294967295
 80064b2:	e7f1      	b.n	8006498 <xTaskCreate+0x48>

080064b4 <vTaskStartScheduler>:
{
 80064b4:	b510      	push	{r4, lr}
 80064b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064b8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064ba:	aa07      	add	r2, sp, #28
 80064bc:	a906      	add	r1, sp, #24
 80064be:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064c0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064c4:	f7fe ff62 	bl	800538c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064c8:	4623      	mov	r3, r4
 80064ca:	9a07      	ldr	r2, [sp, #28]
 80064cc:	9400      	str	r4, [sp, #0]
 80064ce:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80064d2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80064d6:	4918      	ldr	r1, [pc, #96]	; (8006538 <vTaskStartScheduler+0x84>)
 80064d8:	4818      	ldr	r0, [pc, #96]	; (800653c <vTaskStartScheduler+0x88>)
 80064da:	f7ff ff7f 	bl	80063dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80064de:	b1e8      	cbz	r0, 800651c <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 80064e0:	f000 fc36 	bl	8006d50 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80064e4:	2801      	cmp	r0, #1
 80064e6:	d11b      	bne.n	8006520 <vTaskStartScheduler+0x6c>
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064f8:	4b11      	ldr	r3, [pc, #68]	; (8006540 <vTaskStartScheduler+0x8c>)
 80064fa:	4a12      	ldr	r2, [pc, #72]	; (8006544 <vTaskStartScheduler+0x90>)
 80064fc:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80064fe:	4912      	ldr	r1, [pc, #72]	; (8006548 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006500:	3354      	adds	r3, #84	; 0x54
 8006502:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8006508:	4a10      	ldr	r2, [pc, #64]	; (800654c <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800650a:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 800650e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006510:	601c      	str	r4, [r3, #0]
}
 8006512:	b008      	add	sp, #32
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006518:	f000 bef6 	b.w	8007308 <xPortStartScheduler>
}
 800651c:	b008      	add	sp, #32
 800651e:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006520:	3001      	adds	r0, #1
 8006522:	d1fb      	bne.n	800651c <vTaskStartScheduler+0x68>
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	e7fe      	b.n	8006534 <vTaskStartScheduler+0x80>
 8006536:	bf00      	nop
 8006538:	080150a0 	.word	0x080150a0
 800653c:	080062b5 	.word	0x080062b5
 8006540:	24002418 	.word	0x24002418
 8006544:	24000208 	.word	0x24000208
 8006548:	240028c0 	.word	0x240028c0
 800654c:	240028e0 	.word	0x240028e0
 8006550:	2400290c 	.word	0x2400290c

08006554 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006554:	4a02      	ldr	r2, [pc, #8]	; (8006560 <vTaskSuspendAll+0xc>)
 8006556:	6813      	ldr	r3, [r2, #0]
 8006558:	3301      	adds	r3, #1
 800655a:	6013      	str	r3, [r2, #0]
}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	2400288c 	.word	0x2400288c

08006564 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006564:	4b01      	ldr	r3, [pc, #4]	; (800656c <xTaskGetTickCount+0x8>)
 8006566:	6818      	ldr	r0, [r3, #0]
}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	2400290c 	.word	0x2400290c

08006570 <xTaskGetTickCountFromISR>:
{
 8006570:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006572:	f000 ff53 	bl	800741c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8006576:	4b01      	ldr	r3, [pc, #4]	; (800657c <xTaskGetTickCountFromISR+0xc>)
 8006578:	6818      	ldr	r0, [r3, #0]
}
 800657a:	bd08      	pop	{r3, pc}
 800657c:	2400290c 	.word	0x2400290c

08006580 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006580:	4b50      	ldr	r3, [pc, #320]	; (80066c4 <xTaskIncrementTick+0x144>)
 8006582:	681b      	ldr	r3, [r3, #0]
{
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658a:	2b00      	cmp	r3, #0
 800658c:	d146      	bne.n	800661c <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800658e:	4b4e      	ldr	r3, [pc, #312]	; (80066c8 <xTaskIncrementTick+0x148>)
 8006590:	681e      	ldr	r6, [r3, #0]
 8006592:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006594:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006596:	2e00      	cmp	r6, #0
 8006598:	d049      	beq.n	800662e <xTaskIncrementTick+0xae>
 800659a:	f8df b144 	ldr.w	fp, [pc, #324]	; 80066e0 <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800659e:	f8db 3000 	ldr.w	r3, [fp]
 80065a2:	429e      	cmp	r6, r3
 80065a4:	d350      	bcc.n	8006648 <xTaskIncrementTick+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a6:	4f49      	ldr	r7, [pc, #292]	; (80066cc <xTaskIncrementTick+0x14c>)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681d      	ldr	r5, [r3, #0]
 80065ac:	2d00      	cmp	r5, #0
 80065ae:	d077      	beq.n	80066a0 <xTaskIncrementTick+0x120>
BaseType_t xSwitchRequired = pdFALSE;
 80065b0:	2500      	movs	r5, #0
 80065b2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80066e4 <xTaskIncrementTick+0x164>
 80065b6:	f8df a130 	ldr.w	sl, [pc, #304]	; 80066e8 <xTaskIncrementTick+0x168>
					prvAddTaskToReadyList( pxTCB );
 80065ba:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80066ec <xTaskIncrementTick+0x16c>
 80065be:	e022      	b.n	8006606 <xTaskIncrementTick+0x86>
 80065c0:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c2:	f7fe ff3b 	bl	800543c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065c8:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065cc:	9901      	ldr	r1, [sp, #4]
 80065ce:	b113      	cbz	r3, 80065d6 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d0:	f7fe ff34 	bl	800543c <uxListRemove>
 80065d4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80065d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80065d8:	f8d8 3000 	ldr.w	r3, [r8]
 80065dc:	4298      	cmp	r0, r3
 80065de:	d901      	bls.n	80065e4 <xTaskIncrementTick+0x64>
 80065e0:	f8c8 0000 	str.w	r0, [r8]
 80065e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065e8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80065ec:	f7fe fefe 	bl	80053ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065f0:	f8da 3000 	ldr.w	r3, [sl]
 80065f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80065f8:	429a      	cmp	r2, r3
 80065fa:	bf28      	it	cs
 80065fc:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d050      	beq.n	80066a8 <xTaskIncrementTick+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800660c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800660e:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8006610:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006612:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8006614:	d2d4      	bcs.n	80065c0 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8006616:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800661a:	e01a      	b.n	8006652 <xTaskIncrementTick+0xd2>
		++xPendedTicks;
 800661c:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 800661e:	2500      	movs	r5, #0
		++xPendedTicks;
 8006620:	6813      	ldr	r3, [r2, #0]
}
 8006622:	4628      	mov	r0, r5
		++xPendedTicks;
 8006624:	3301      	adds	r3, #1
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	b003      	add	sp, #12
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800662e:	4b27      	ldr	r3, [pc, #156]	; (80066cc <xTaskIncrementTick+0x14c>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	b30a      	cbz	r2, 800667a <xTaskIncrementTick+0xfa>
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	e7fe      	b.n	8006646 <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 8006648:	2500      	movs	r5, #0
 800664a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80066e4 <xTaskIncrementTick+0x164>
 800664e:	f8df a098 	ldr.w	sl, [pc, #152]	; 80066e8 <xTaskIncrementTick+0x168>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006652:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8006656:	491f      	ldr	r1, [pc, #124]	; (80066d4 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8006664:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8006666:	2a02      	cmp	r2, #2
 8006668:	bf28      	it	cs
 800666a:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800666c:	2b00      	cmp	r3, #0
 800666e:	bf18      	it	ne
 8006670:	2501      	movne	r5, #1
}
 8006672:	4628      	mov	r0, r5
 8006674:	b003      	add	sp, #12
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800667a:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <xTaskIncrementTick+0x158>)
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	6811      	ldr	r1, [r2, #0]
 8006680:	6019      	str	r1, [r3, #0]
 8006682:	4916      	ldr	r1, [pc, #88]	; (80066dc <xTaskIncrementTick+0x15c>)
 8006684:	6010      	str	r0, [r2, #0]
 8006686:	680a      	ldr	r2, [r1, #0]
 8006688:	3201      	adds	r2, #1
 800668a:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	6812      	ldr	r2, [r2, #0]
 8006690:	b97a      	cbnz	r2, 80066b2 <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006692:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80066e0 <xTaskIncrementTick+0x160>
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	f8cb 3000 	str.w	r3, [fp]
 800669e:	e77e      	b.n	800659e <xTaskIncrementTick+0x1e>
 80066a0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80066e4 <xTaskIncrementTick+0x164>
 80066a4:	f8df a040 	ldr.w	sl, [pc, #64]	; 80066e8 <xTaskIncrementTick+0x168>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ac:	f8cb 3000 	str.w	r3, [fp]
					break;
 80066b0:	e7cf      	b.n	8006652 <xTaskIncrementTick+0xd2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066b4:	f8df b028 	ldr.w	fp, [pc, #40]	; 80066e0 <xTaskIncrementTick+0x160>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f8cb 3000 	str.w	r3, [fp]
}
 80066c2:	e76c      	b.n	800659e <xTaskIncrementTick+0x1e>
 80066c4:	2400288c 	.word	0x2400288c
 80066c8:	2400290c 	.word	0x2400290c
 80066cc:	2400241c 	.word	0x2400241c
 80066d0:	240028c8 	.word	0x240028c8
 80066d4:	24002910 	.word	0x24002910
 80066d8:	24002420 	.word	0x24002420
 80066dc:	240028c4 	.word	0x240028c4
 80066e0:	240028c0 	.word	0x240028c0
 80066e4:	24002424 	.word	0x24002424
 80066e8:	24002418 	.word	0x24002418
 80066ec:	24002894 	.word	0x24002894

080066f0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80066f6:	f000 fd75 	bl	80071e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80066fa:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <xTaskResumeAll.part.0+0xe4>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	3a01      	subs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d155      	bne.n	80067b4 <xTaskResumeAll.part.0+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006708:	4b33      	ldr	r3, [pc, #204]	; (80067d8 <xTaskResumeAll.part.0+0xe8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d051      	beq.n	80067b4 <xTaskResumeAll.part.0+0xc4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006710:	4d32      	ldr	r5, [pc, #200]	; (80067dc <xTaskResumeAll.part.0+0xec>)
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05a      	beq.n	80067ce <xTaskResumeAll.part.0+0xde>
 8006718:	4e31      	ldr	r6, [pc, #196]	; (80067e0 <xTaskResumeAll.part.0+0xf0>)
						xYieldPending = pdTRUE;
 800671a:	f04f 0a01 	mov.w	sl, #1
 800671e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80067f4 <xTaskResumeAll.part.0+0x104>
 8006722:	4f30      	ldr	r7, [pc, #192]	; (80067e4 <xTaskResumeAll.part.0+0xf4>)
 8006724:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80067f8 <xTaskResumeAll.part.0+0x108>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	68eb      	ldr	r3, [r5, #12]
 800672a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800672c:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006730:	f104 0018 	add.w	r0, r4, #24
 8006734:	f7fe fe82 	bl	800543c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006738:	4658      	mov	r0, fp
 800673a:	f7fe fe7f 	bl	800543c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800673e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006740:	6832      	ldr	r2, [r6, #0]
 8006742:	4659      	mov	r1, fp
 8006744:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006748:	4293      	cmp	r3, r2
 800674a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800674e:	d900      	bls.n	8006752 <xTaskResumeAll.part.0+0x62>
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	f7fe fe4b 	bl	80053ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d301      	bcc.n	8006764 <xTaskResumeAll.part.0+0x74>
						xYieldPending = pdTRUE;
 8006760:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1de      	bne.n	8006728 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <xTaskResumeAll.part.0+0xf8>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	b342      	cbz	r2, 80067c4 <xTaskResumeAll.part.0+0xd4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006772:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <xTaskResumeAll.part.0+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006778:	68d2      	ldr	r2, [r2, #12]
 800677a:	6852      	ldr	r2, [r2, #4]
 800677c:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800677e:	4e1c      	ldr	r6, [pc, #112]	; (80067f0 <xTaskResumeAll.part.0+0x100>)
 8006780:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006782:	b144      	cbz	r4, 8006796 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8006784:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006786:	f7ff fefb 	bl	8006580 <xTaskIncrementTick>
 800678a:	b108      	cbz	r0, 8006790 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 800678c:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006790:	3c01      	subs	r4, #1
 8006792:	d1f8      	bne.n	8006786 <xTaskResumeAll.part.0+0x96>
						xPendedTicks = 0;
 8006794:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006796:	f8d9 3000 	ldr.w	r3, [r9]
 800679a:	b15b      	cbz	r3, 80067b4 <xTaskResumeAll.part.0+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 800679c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80067b0:	2001      	movs	r0, #1
 80067b2:	e000      	b.n	80067b6 <xTaskResumeAll.part.0+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 80067b4:	2000      	movs	r0, #0
 80067b6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80067b8:	f000 fd36 	bl	8007228 <vPortExitCritical>
}
 80067bc:	9801      	ldr	r0, [sp, #4]
 80067be:	b003      	add	sp, #12
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <xTaskResumeAll.part.0+0xfc>)
 80067c6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e7d7      	b.n	800677e <xTaskResumeAll.part.0+0x8e>
 80067ce:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80067f8 <xTaskResumeAll.part.0+0x108>
 80067d2:	e7d4      	b.n	800677e <xTaskResumeAll.part.0+0x8e>
 80067d4:	2400288c 	.word	0x2400288c
 80067d8:	24002884 	.word	0x24002884
 80067dc:	240028cc 	.word	0x240028cc
 80067e0:	24002894 	.word	0x24002894
 80067e4:	24002418 	.word	0x24002418
 80067e8:	2400241c 	.word	0x2400241c
 80067ec:	240028c0 	.word	0x240028c0
 80067f0:	240028c8 	.word	0x240028c8
 80067f4:	24002424 	.word	0x24002424
 80067f8:	24002910 	.word	0x24002910

080067fc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <xTaskResumeAll+0x1c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	b943      	cbnz	r3, 8006814 <xTaskResumeAll+0x18>
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	e7fe      	b.n	8006812 <xTaskResumeAll+0x16>
 8006814:	f7ff bf6c 	b.w	80066f0 <xTaskResumeAll.part.0>
 8006818:	2400288c 	.word	0x2400288c

0800681c <vTaskDelay>:
	{
 800681c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800681e:	b950      	cbnz	r0, 8006836 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006820:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006828:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
	}
 8006834:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006836:	4c10      	ldr	r4, [pc, #64]	; (8006878 <vTaskDelay+0x5c>)
 8006838:	6821      	ldr	r1, [r4, #0]
 800683a:	b141      	cbz	r1, 800684e <vTaskDelay+0x32>
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	e7fe      	b.n	800684c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006854:	f7ff fcd2 	bl	80061fc <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	b943      	cbnz	r3, 800686e <vTaskDelay+0x52>
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	e7fe      	b.n	800686c <vTaskDelay+0x50>
 800686e:	f7ff ff3f 	bl	80066f0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8006872:	2800      	cmp	r0, #0
 8006874:	d0d4      	beq.n	8006820 <vTaskDelay+0x4>
	}
 8006876:	bd10      	pop	{r4, pc}
 8006878:	2400288c 	.word	0x2400288c

0800687c <vTaskSwitchContext>:
{
 800687c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <vTaskSwitchContext+0x94>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	b11b      	cbz	r3, 800688c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <vTaskSwitchContext+0x98>)
 8006886:	2201      	movs	r2, #1
 8006888:	601a      	str	r2, [r3, #0]
}
 800688a:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800688c:	4c22      	ldr	r4, [pc, #136]	; (8006918 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800688e:	4a21      	ldr	r2, [pc, #132]	; (8006914 <vTaskSwitchContext+0x98>)
 8006890:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	429a      	cmp	r2, r3
 800689c:	d92e      	bls.n	80068fc <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800689e:	4d1f      	ldr	r5, [pc, #124]	; (800691c <vTaskSwitchContext+0xa0>)
 80068a0:	491f      	ldr	r1, [pc, #124]	; (8006920 <vTaskSwitchContext+0xa4>)
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80068a8:	0098      	lsls	r0, r3, #2
 80068aa:	0092      	lsls	r2, r2, #2
 80068ac:	588a      	ldr	r2, [r1, r2]
 80068ae:	b942      	cbnz	r2, 80068c2 <vTaskSwitchContext+0x46>
 80068b0:	b1db      	cbz	r3, 80068ea <vTaskSwitchContext+0x6e>
 80068b2:	3b01      	subs	r3, #1
 80068b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80068b8:	0098      	lsls	r0, r3, #2
 80068ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80068be:	2a00      	cmp	r2, #0
 80068c0:	d0f6      	beq.n	80068b0 <vTaskSwitchContext+0x34>
 80068c2:	4418      	add	r0, r3
 80068c4:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 80068c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80068cc:	4662      	mov	r2, ip
 80068ce:	6849      	ldr	r1, [r1, #4]
 80068d0:	3208      	adds	r2, #8
 80068d2:	4291      	cmp	r1, r2
 80068d4:	f8cc 1004 	str.w	r1, [ip, #4]
 80068d8:	d016      	beq.n	8006908 <vTaskSwitchContext+0x8c>
 80068da:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068dc:	4a11      	ldr	r2, [pc, #68]	; (8006924 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068de:	6021      	str	r1, [r4, #0]
 80068e0:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	3354      	adds	r3, #84	; 0x54
 80068e6:	6013      	str	r3, [r2, #0]
}
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fa:	e7fe      	b.n	80068fa <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	6821      	ldr	r1, [r4, #0]
 8006900:	3134      	adds	r1, #52	; 0x34
 8006902:	f7fa ffcf 	bl	80018a4 <vApplicationStackOverflowHook>
 8006906:	e7ca      	b.n	800689e <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006908:	6849      	ldr	r1, [r1, #4]
 800690a:	f8cc 1004 	str.w	r1, [ip, #4]
 800690e:	e7e4      	b.n	80068da <vTaskSwitchContext+0x5e>
 8006910:	2400288c 	.word	0x2400288c
 8006914:	24002910 	.word	0x24002910
 8006918:	24002418 	.word	0x24002418
 800691c:	24002894 	.word	0x24002894
 8006920:	24002424 	.word	0x24002424
 8006924:	24000208 	.word	0x24000208

08006928 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006928:	b160      	cbz	r0, 8006944 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <vTaskPlaceOnEventList+0x30>)
{
 800692c:	b510      	push	{r4, lr}
 800692e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	3118      	adds	r1, #24
 8006934:	f7fe fd6a 	bl	800540c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006938:	4620      	mov	r0, r4
 800693a:	2101      	movs	r1, #1
}
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006940:	f7ff bc5c 	b.w	80061fc <prvAddCurrentTaskToDelayedList>
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006954:	e7fe      	b.n	8006954 <vTaskPlaceOnEventList+0x2c>
 8006956:	bf00      	nop
 8006958:	24002418 	.word	0x24002418

0800695c <vTaskPlaceOnEventListRestricted>:
	{
 800695c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800695e:	b180      	cbz	r0, 8006982 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <vTaskPlaceOnEventListRestricted+0x38>)
 8006962:	460d      	mov	r5, r1
 8006964:	4614      	mov	r4, r2
 8006966:	6819      	ldr	r1, [r3, #0]
 8006968:	3118      	adds	r1, #24
 800696a:	f7fe fd3f 	bl	80053ec <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800696e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006970:	4621      	mov	r1, r4
 8006972:	bf0c      	ite	eq
 8006974:	4628      	moveq	r0, r5
 8006976:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800697a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800697e:	f7ff bc3d 	b.w	80061fc <prvAddCurrentTaskToDelayedList>
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006992:	e7fe      	b.n	8006992 <vTaskPlaceOnEventListRestricted+0x36>
 8006994:	24002418 	.word	0x24002418

08006998 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006998:	68c3      	ldr	r3, [r0, #12]
{
 800699a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800699c:	68dc      	ldr	r4, [r3, #12]
{
 800699e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80069a0:	b35c      	cbz	r4, 80069fa <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069a2:	f104 0518 	add.w	r5, r4, #24
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7fe fd48 	bl	800543c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <xTaskRemoveFromEventList+0x7c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	b17b      	cbz	r3, 80069d2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069b2:	4629      	mov	r1, r5
 80069b4:	4818      	ldr	r0, [pc, #96]	; (8006a18 <xTaskRemoveFromEventList+0x80>)
 80069b6:	f7fe fd19 	bl	80053ec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069ba:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <xTaskRemoveFromEventList+0x84>)
 80069bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d922      	bls.n	8006a0c <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80069c6:	2301      	movs	r3, #1
 80069c8:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 80069ca:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80069cc:	6013      	str	r3, [r2, #0]
}
 80069ce:	b003      	add	sp, #12
 80069d0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069d2:	1d21      	adds	r1, r4, #4
 80069d4:	4608      	mov	r0, r1
 80069d6:	9101      	str	r1, [sp, #4]
 80069d8:	f7fe fd30 	bl	800543c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069dc:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <xTaskRemoveFromEventList+0x8c>)
 80069de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069e0:	6810      	ldr	r0, [r2, #0]
 80069e2:	9901      	ldr	r1, [sp, #4]
 80069e4:	4283      	cmp	r3, r0
 80069e6:	d900      	bls.n	80069ea <xTaskRemoveFromEventList+0x52>
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069ee:	480e      	ldr	r0, [pc, #56]	; (8006a28 <xTaskRemoveFromEventList+0x90>)
 80069f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80069f4:	f7fe fcfa 	bl	80053ec <vListInsertEnd>
 80069f8:	e7df      	b.n	80069ba <xTaskRemoveFromEventList+0x22>
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006a0a:	e7fe      	b.n	8006a0a <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8006a0c:	2000      	movs	r0, #0
}
 8006a0e:	b003      	add	sp, #12
 8006a10:	bd30      	pop	{r4, r5, pc}
 8006a12:	bf00      	nop
 8006a14:	2400288c 	.word	0x2400288c
 8006a18:	240028cc 	.word	0x240028cc
 8006a1c:	24002418 	.word	0x24002418
 8006a20:	24002910 	.word	0x24002910
 8006a24:	24002894 	.word	0x24002894
 8006a28:	24002424 	.word	0x24002424

08006a2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a2c:	4a03      	ldr	r2, [pc, #12]	; (8006a3c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a30:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	240028c4 	.word	0x240028c4
 8006a40:	2400290c 	.word	0x2400290c

08006a44 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8006a44:	b328      	cbz	r0, 8006a92 <xTaskCheckForTimeOut+0x4e>
{
 8006a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a48:	460d      	mov	r5, r1
 8006a4a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8006a4c:	b1c1      	cbz	r1, 8006a80 <xTaskCheckForTimeOut+0x3c>
 8006a4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006a50:	f000 fbc8 	bl	80071e4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8006a54:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006a56:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8006a58:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8006a5a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006a5c:	d030      	beq.n	8006ac0 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a5e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8006ad0 <xTaskCheckForTimeOut+0x8c>
 8006a62:	6826      	ldr	r6, [r4, #0]
 8006a64:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a68:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a6a:	42be      	cmp	r6, r7
 8006a6c:	d01a      	beq.n	8006aa4 <xTaskCheckForTimeOut+0x60>
 8006a6e:	4288      	cmp	r0, r1
 8006a70:	d818      	bhi.n	8006aa4 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8006a72:	2001      	movs	r0, #1
 8006a74:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006a76:	f000 fbd7 	bl	8007228 <vPortExitCritical>
}
 8006a7a:	9801      	ldr	r0, [sp, #4]
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006a90:	e7fe      	b.n	8006a90 <xTaskCheckForTimeOut+0x4c>
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006aa2:	e7fe      	b.n	8006aa2 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006aa4:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aa8:	4573      	cmp	r3, lr
 8006aaa:	d90b      	bls.n	8006ac4 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8006aac:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aae:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ab2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8006ab4:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8006ab6:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8006ab8:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aba:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8006abe:	e7d9      	b.n	8006a74 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e7d7      	b.n	8006a74 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8006ac4:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8006ac6:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8006ac8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006aca:	e7d3      	b.n	8006a74 <xTaskCheckForTimeOut+0x30>
 8006acc:	2400290c 	.word	0x2400290c
 8006ad0:	240028c4 	.word	0x240028c4

08006ad4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006ad4:	4b01      	ldr	r3, [pc, #4]	; (8006adc <vTaskMissedYield+0x8>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	4770      	bx	lr
 8006adc:	24002910 	.word	0x24002910

08006ae0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8006ae0:	4b01      	ldr	r3, [pc, #4]	; (8006ae8 <xTaskGetCurrentTaskHandle+0x8>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
	}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	24002418 	.word	0x24002418

08006aec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <xTaskGetSchedulerState+0x18>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	b133      	cbz	r3, 8006b00 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <xTaskGetSchedulerState+0x1c>)
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	fab0 f080 	clz	r0, r0
 8006afa:	0940      	lsrs	r0, r0, #5
 8006afc:	0040      	lsls	r0, r0, #1
 8006afe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b00:	2001      	movs	r0, #1
	}
 8006b02:	4770      	bx	lr
 8006b04:	240028e0 	.word	0x240028e0
 8006b08:	2400288c 	.word	0x2400288c

08006b0c <xTaskPriorityInherit>:
	{
 8006b0c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8006b0e:	4604      	mov	r4, r0
	{
 8006b10:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8006b12:	b1c8      	cbz	r0, 8006b48 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b14:	4d1d      	ldr	r5, [pc, #116]	; (8006b8c <xTaskPriorityInherit+0x80>)
 8006b16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006b18:	682a      	ldr	r2, [r5, #0]
 8006b1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d215      	bcs.n	8006b4c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b20:	6982      	ldr	r2, [r0, #24]
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	db04      	blt.n	8006b30 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b26:	682a      	ldr	r2, [r5, #0]
 8006b28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b2a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006b2e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b30:	4e17      	ldr	r6, [pc, #92]	; (8006b90 <xTaskPriorityInherit+0x84>)
 8006b32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b36:	6962      	ldr	r2, [r4, #20]
 8006b38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d00e      	beq.n	8006b5e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b40:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8006b42:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	4298      	cmp	r0, r3
 8006b54:	bf2c      	ite	cs
 8006b56:	2000      	movcs	r0, #0
 8006b58:	2001      	movcc	r0, #1
	}
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b5e:	1d21      	adds	r1, r4, #4
 8006b60:	4608      	mov	r0, r1
 8006b62:	9101      	str	r1, [sp, #4]
 8006b64:	f7fe fc6a 	bl	800543c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b68:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b6c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	9901      	ldr	r1, [sp, #4]
 8006b72:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b74:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b76:	d900      	bls.n	8006b7a <xTaskPriorityInherit+0x6e>
 8006b78:	6018      	str	r0, [r3, #0]
 8006b7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006b7e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8006b82:	f7fe fc33 	bl	80053ec <vListInsertEnd>
				xReturn = pdTRUE;
 8006b86:	2001      	movs	r0, #1
 8006b88:	e7de      	b.n	8006b48 <xTaskPriorityInherit+0x3c>
 8006b8a:	bf00      	nop
 8006b8c:	24002418 	.word	0x24002418
 8006b90:	24002424 	.word	0x24002424
 8006b94:	24002894 	.word	0x24002894

08006b98 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006b98:	b318      	cbz	r0, 8006be2 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 8006b9a:	4b1f      	ldr	r3, [pc, #124]	; (8006c18 <xTaskPriorityDisinherit+0x80>)
	{
 8006b9c:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006b9e:	681c      	ldr	r4, [r3, #0]
	{
 8006ba0:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8006ba2:	4284      	cmp	r4, r0
 8006ba4:	d008      	beq.n	8006bb8 <xTaskPriorityDisinherit+0x20>
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	e7fe      	b.n	8006bb6 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006bba:	b14b      	cbz	r3, 8006bd0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8006bbe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bc0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006bc2:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bc4:	4291      	cmp	r1, r2
 8006bc6:	d000      	beq.n	8006bca <xTaskPriorityDisinherit+0x32>
 8006bc8:	b16b      	cbz	r3, 8006be6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8006bca:	2000      	movs	r0, #0
	}
 8006bcc:	b002      	add	sp, #8
 8006bce:	bd10      	pop	{r4, pc}
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006be0:	e7fe      	b.n	8006be0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8006be2:	2000      	movs	r0, #0
	}
 8006be4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006be6:	1d21      	adds	r1, r4, #4
 8006be8:	4608      	mov	r0, r1
 8006bea:	9101      	str	r1, [sp, #4]
 8006bec:	f7fe fc26 	bl	800543c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bf0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8006bf8:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bfa:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4290      	cmp	r0, r2
 8006c02:	d900      	bls.n	8006c06 <xTaskPriorityDisinherit+0x6e>
 8006c04:	6018      	str	r0, [r3, #0]
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <xTaskPriorityDisinherit+0x88>)
 8006c08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006c10:	f7fe fbec 	bl	80053ec <vListInsertEnd>
					xReturn = pdTRUE;
 8006c14:	2001      	movs	r0, #1
		return xReturn;
 8006c16:	e7d9      	b.n	8006bcc <xTaskPriorityDisinherit+0x34>
 8006c18:	24002418 	.word	0x24002418
 8006c1c:	24002894 	.word	0x24002894
 8006c20:	24002424 	.word	0x24002424

08006c24 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d040      	beq.n	8006caa <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c28:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8006c2a:	b530      	push	{r4, r5, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8006c30:	b153      	cbz	r3, 8006c48 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c32:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c36:	4281      	cmp	r1, r0
 8006c38:	bf38      	it	cc
 8006c3a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8006c40:	428a      	cmp	r2, r1
 8006c42:	d10a      	bne.n	8006c5a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8006c44:	b003      	add	sp, #12
 8006c46:	bd30      	pop	{r4, r5, pc}
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006c58:	e7fe      	b.n	8006c58 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	d024      	beq.n	8006cac <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c62:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c64:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	db02      	blt.n	8006c70 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c6a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8006c6e:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c70:	4d14      	ldr	r5, [pc, #80]	; (8006cc4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8006c72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006c76:	6961      	ldr	r1, [r4, #20]
 8006c78:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d1e1      	bne.n	8006c44 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c80:	1d21      	adds	r1, r4, #4
 8006c82:	4608      	mov	r0, r1
 8006c84:	9101      	str	r1, [sp, #4]
 8006c86:	f7fe fbd9 	bl	800543c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8006c8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	9901      	ldr	r1, [sp, #4]
 8006c92:	4290      	cmp	r0, r2
 8006c94:	d900      	bls.n	8006c98 <vTaskPriorityDisinheritAfterTimeout+0x74>
 8006c96:	6018      	str	r0, [r3, #0]
 8006c98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c9c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8006ca0:	b003      	add	sp, #12
 8006ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8006ca6:	f7fe bba1 	b.w	80053ec <vListInsertEnd>
 8006caa:	4770      	bx	lr
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8006cbc:	e7fe      	b.n	8006cbc <vTaskPriorityDisinheritAfterTimeout+0x98>
 8006cbe:	bf00      	nop
 8006cc0:	24002418 	.word	0x24002418
 8006cc4:	24002424 	.word	0x24002424
 8006cc8:	24002894 	.word	0x24002894

08006ccc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006ccc:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <pvTaskIncrementMutexHeldCount+0x14>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	b11a      	cbz	r2, 8006cda <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8006cda:	6818      	ldr	r0, [r3, #0]
	}
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	24002418 	.word	0x24002418

08006ce4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006ce6:	4c12      	ldr	r4, [pc, #72]	; (8006d30 <prvCheckForValidListAndQueue+0x4c>)
{
 8006ce8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8006cea:	f000 fa7b 	bl	80071e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	b125      	cbz	r5, 8006cfc <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8006cf2:	b003      	add	sp, #12
 8006cf4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8006cf8:	f000 ba96 	b.w	8007228 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8006cfc:	4f0d      	ldr	r7, [pc, #52]	; (8006d34 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8006cfe:	4e0e      	ldr	r6, [pc, #56]	; (8006d38 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8006d00:	4638      	mov	r0, r7
 8006d02:	f7fe fb63 	bl	80053cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7fe fb60 	bl	80053cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d0c:	4a0b      	ldr	r2, [pc, #44]	; (8006d3c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d0e:	9500      	str	r5, [sp, #0]
 8006d10:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8006d12:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d14:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8006d16:	4a0a      	ldr	r2, [pc, #40]	; (8006d40 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006d1a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <prvCheckForValidListAndQueue+0x64>)
 8006d1e:	f7fe fc6f 	bl	8005600 <xQueueGenericCreateStatic>
 8006d22:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d0e4      	beq.n	8006cf2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d28:	4908      	ldr	r1, [pc, #32]	; (8006d4c <prvCheckForValidListAndQueue+0x68>)
 8006d2a:	f7ff f989 	bl	8006040 <vQueueAddToRegistry>
 8006d2e:	e7e0      	b.n	8006cf2 <prvCheckForValidListAndQueue+0xe>
 8006d30:	24002a38 	.word	0x24002a38
 8006d34:	240029bc 	.word	0x240029bc
 8006d38:	240029d0 	.word	0x240029d0
 8006d3c:	24002914 	.word	0x24002914
 8006d40:	24002918 	.word	0x24002918
 8006d44:	240029e8 	.word	0x240029e8
 8006d48:	2400291c 	.word	0x2400291c
 8006d4c:	080150a8 	.word	0x080150a8

08006d50 <xTimerCreateTimerTask>:
{
 8006d50:	b530      	push	{r4, r5, lr}
 8006d52:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8006d54:	f7ff ffc6 	bl	8006ce4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006d58:	4b12      	ldr	r3, [pc, #72]	; (8006da4 <xTimerCreateTimerTask+0x54>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b1cb      	cbz	r3, 8006d92 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d5e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d60:	aa07      	add	r2, sp, #28
 8006d62:	a906      	add	r1, sp, #24
 8006d64:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d66:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d68:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d6c:	f7fe fb1e 	bl	80053ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d70:	4623      	mov	r3, r4
 8006d72:	9a07      	ldr	r2, [sp, #28]
 8006d74:	9500      	str	r5, [sp, #0]
 8006d76:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006d7a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006d7e:	490a      	ldr	r1, [pc, #40]	; (8006da8 <xTimerCreateTimerTask+0x58>)
 8006d80:	480a      	ldr	r0, [pc, #40]	; (8006dac <xTimerCreateTimerTask+0x5c>)
 8006d82:	f7ff fb2b 	bl	80063dc <xTaskCreateStatic>
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <xTimerCreateTimerTask+0x60>)
 8006d88:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006d8a:	b110      	cbz	r0, 8006d92 <xTimerCreateTimerTask+0x42>
}
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	b009      	add	sp, #36	; 0x24
 8006d90:	bd30      	pop	{r4, r5, pc}
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006da2:	e7fe      	b.n	8006da2 <xTimerCreateTimerTask+0x52>
 8006da4:	24002a38 	.word	0x24002a38
 8006da8:	080150b0 	.word	0x080150b0
 8006dac:	08006ea1 	.word	0x08006ea1
 8006db0:	24002a3c 	.word	0x24002a3c

08006db4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006db4:	b1c8      	cbz	r0, 8006dea <xTimerGenericCommand+0x36>
{
 8006db6:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8006db8:	4e17      	ldr	r6, [pc, #92]	; (8006e18 <xTimerGenericCommand+0x64>)
{
 8006dba:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8006dbc:	6834      	ldr	r4, [r6, #0]
 8006dbe:	b18c      	cbz	r4, 8006de4 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dc0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dc2:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8006dc4:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dc8:	dc18      	bgt.n	8006dfc <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dca:	f7ff fe8f 	bl	8006aec <xTaskGetSchedulerState>
 8006dce:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dd0:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dd4:	d01a      	beq.n	8006e0c <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dd6:	4669      	mov	r1, sp
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6830      	ldr	r0, [r6, #0]
 8006ddc:	f7fe fccc 	bl	8005778 <xQueueGenericSend>
}
 8006de0:	b004      	add	sp, #16
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8006de4:	4620      	mov	r0, r4
}
 8006de6:	b004      	add	sp, #16
 8006de8:	bd70      	pop	{r4, r5, r6, pc}
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006dfa:	e7fe      	b.n	8006dfa <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4669      	mov	r1, sp
 8006e00:	2300      	movs	r3, #0
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7fe fdf0 	bl	80059e8 <xQueueGenericSendFromISR>
}
 8006e08:	b004      	add	sp, #16
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e0c:	9a08      	ldr	r2, [sp, #32]
 8006e0e:	4669      	mov	r1, sp
 8006e10:	6830      	ldr	r0, [r6, #0]
 8006e12:	f7fe fcb1 	bl	8005778 <xQueueGenericSend>
 8006e16:	e7e6      	b.n	8006de6 <xTimerGenericCommand+0x32>
 8006e18:	24002a38 	.word	0x24002a38

08006e1c <prvSwitchTimerLists>:
{
 8006e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e20:	4e1d      	ldr	r6, [pc, #116]	; (8006e98 <prvSwitchTimerLists+0x7c>)
 8006e22:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e24:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e28:	e00d      	b.n	8006e46 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e2a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e2c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e2e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e30:	1d25      	adds	r5, r4, #4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f7fe fb02 	bl	800543c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e38:	6a23      	ldr	r3, [r4, #32]
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e3e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006e42:	075b      	lsls	r3, r3, #29
 8006e44:	d40a      	bmi.n	8006e5c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e46:	6833      	ldr	r3, [r6, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d1ed      	bne.n	8006e2a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <prvSwitchTimerLists+0x80>)
 8006e50:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e52:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e54:	6031      	str	r1, [r6, #0]
}
 8006e56:	b002      	add	sp, #8
 8006e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e5c:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e5e:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e60:	2300      	movs	r3, #0
 8006e62:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e64:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e66:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8006e68:	42af      	cmp	r7, r5
 8006e6a:	d205      	bcs.n	8006e78 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e6c:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e6e:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e70:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e72:	f7fe facb 	bl	800540c <vListInsert>
 8006e76:	e7e6      	b.n	8006e46 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f8cd 8000 	str.w	r8, [sp]
 8006e7e:	f7ff ff99 	bl	8006db4 <xTimerGenericCommand>
				configASSERT( xResult );
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d1df      	bne.n	8006e46 <prvSwitchTimerLists+0x2a>
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	e7fe      	b.n	8006e96 <prvSwitchTimerLists+0x7a>
 8006e98:	24002914 	.word	0x24002914
 8006e9c:	24002918 	.word	0x24002918

08006ea0 <prvTimerTask>:
{
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	4e96      	ldr	r6, [pc, #600]	; (8007100 <prvTimerTask+0x260>)
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	4d96      	ldr	r5, [pc, #600]	; (8007104 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8006eaa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8006eae:	4c96      	ldr	r4, [pc, #600]	; (8007108 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eb0:	6833      	ldr	r3, [r6, #0]
 8006eb2:	681f      	ldr	r7, [r3, #0]
 8006eb4:	2f00      	cmp	r7, #0
 8006eb6:	f000 80a9 	beq.w	800700c <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8006ebe:	f7ff fb49 	bl	8006554 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006ec2:	f7ff fb4f 	bl	8006564 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006ec6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006ec8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006eca:	4290      	cmp	r0, r2
 8006ecc:	f0c0 80a6 	bcc.w	800701c <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ed0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8006ed2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ed4:	f200 80c7 	bhi.w	8007066 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8006ed8:	f7ff fc90 	bl	80067fc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006edc:	6832      	ldr	r2, [r6, #0]
 8006ede:	68d2      	ldr	r2, [r2, #12]
 8006ee0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee4:	f10b 0804 	add.w	r8, fp, #4
 8006ee8:	4640      	mov	r0, r8
 8006eea:	f7fe faa7 	bl	800543c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eee:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8006ef2:	0743      	lsls	r3, r0, #29
 8006ef4:	f100 80c6 	bmi.w	8007084 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ef8:	f020 0001 	bic.w	r0, r0, #1
 8006efc:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f00:	f8db 3020 	ldr.w	r3, [fp, #32]
 8006f04:	4658      	mov	r0, fp
 8006f06:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f08:	2200      	movs	r2, #0
 8006f0a:	a902      	add	r1, sp, #8
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	f7fe fe2d 	bl	8005b6c <xQueueReceive>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d0cc      	beq.n	8006eb0 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db6e      	blt.n	8006ffa <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f1c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	b113      	cbz	r3, 8006f28 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f22:	1d38      	adds	r0, r7, #4
 8006f24:	f7fe fa8a 	bl	800543c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006f28:	f7ff fb1c 	bl	8006564 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006f2c:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006f2e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8006f30:	4298      	cmp	r0, r3
 8006f32:	d37a      	bcc.n	800702a <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8006f34:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8006f36:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8006f3a:	2b09      	cmp	r3, #9
 8006f3c:	d8e4      	bhi.n	8006f08 <prvTimerTask+0x68>
 8006f3e:	e8df f003 	tbb	[pc, r3]
 8006f42:	0505      	.short	0x0505
 8006f44:	53364c05 	.word	0x53364c05
 8006f48:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f50:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f52:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f56:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f58:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f5a:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f5e:	185a      	adds	r2, r3, r1
 8006f60:	bf2c      	ite	cs
 8006f62:	2001      	movcs	r0, #1
 8006f64:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006f66:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f68:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006f6a:	d87e      	bhi.n	800706a <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6c:	eba8 0303 	sub.w	r3, r8, r3
 8006f70:	4299      	cmp	r1, r3
 8006f72:	f200 80b0 	bhi.w	80070d6 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	4638      	mov	r0, r7
 8006f7a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f80:	0759      	lsls	r1, r3, #29
 8006f82:	d5c1      	bpl.n	8006f08 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f84:	2200      	movs	r2, #0
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	9200      	str	r2, [sp, #0]
 8006f8c:	9a03      	ldr	r2, [sp, #12]
 8006f8e:	441a      	add	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	4619      	mov	r1, r3
 8006f94:	f7ff ff0e 	bl	8006db4 <xTimerGenericCommand>
							configASSERT( xResult );
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d1b5      	bne.n	8006f08 <prvTimerTask+0x68>
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	e7fe      	b.n	8006fac <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fb2:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fb8:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fba:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 8095 	beq.w	80070ee <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fc4:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fc6:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fc8:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006fca:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fcc:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006fce:	d855      	bhi.n	800707c <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fd0:	4b4e      	ldr	r3, [pc, #312]	; (800710c <prvTimerTask+0x26c>)
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	f7fe fa1a 	bl	800540c <vListInsert>
	return xProcessTimerNow;
 8006fd8:	e796      	b.n	8006f08 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fde:	f023 0301 	bic.w	r3, r3, #1
 8006fe2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8006fe6:	e78f      	b.n	8006f08 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fe8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006fec:	079a      	lsls	r2, r3, #30
 8006fee:	d569      	bpl.n	80070c4 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006ff8:	e786      	b.n	8006f08 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ffa:	9b03      	ldr	r3, [sp, #12]
 8006ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007000:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f6ff af7f 	blt.w	8006f08 <prvTimerTask+0x68>
 800700a:	e787      	b.n	8006f1c <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800700c:	f7ff faa2 	bl	8006554 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007010:	f7ff faa8 	bl	8006564 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007014:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8007016:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007018:	4290      	cmp	r0, r2
 800701a:	d209      	bcs.n	8007030 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 800701c:	f7ff fefe 	bl	8006e1c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007020:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8007024:	f7ff fbea 	bl	80067fc <xTaskResumeAll>
 8007028:	e76e      	b.n	8006f08 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 800702a:	f7ff fef7 	bl	8006e1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800702e:	e781      	b.n	8006f34 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007030:	4b36      	ldr	r3, [pc, #216]	; (800710c <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8007032:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	fab2 f282 	clz	r2, r2
 800703e:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007040:	eba7 010a 	sub.w	r1, r7, sl
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	f7ff f829 	bl	800609c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800704a:	f7ff fbd7 	bl	80067fc <xTaskResumeAll>
 800704e:	2800      	cmp	r0, #0
 8007050:	f47f af5a 	bne.w	8006f08 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8007054:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007058:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	e750      	b.n	8006f08 <prvTimerTask+0x68>
 8007066:	2200      	movs	r2, #0
 8007068:	e7ea      	b.n	8007040 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800706a:	4543      	cmp	r3, r8
 800706c:	d901      	bls.n	8007072 <prvTimerTask+0x1d2>
 800706e:	2800      	cmp	r0, #0
 8007070:	d081      	beq.n	8006f76 <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007072:	1d39      	adds	r1, r7, #4
 8007074:	6830      	ldr	r0, [r6, #0]
 8007076:	f7fe f9c9 	bl	800540c <vListInsert>
	return xProcessTimerNow;
 800707a:	e745      	b.n	8006f08 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800707c:	6830      	ldr	r0, [r6, #0]
 800707e:	f7fe f9c5 	bl	800540c <vListInsert>
 8007082:	e741      	b.n	8006f08 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007084:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007088:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800708c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800708e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007090:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007094:	d31a      	bcc.n	80070cc <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007096:	ebaa 0307 	sub.w	r3, sl, r7
 800709a:	429a      	cmp	r2, r3
 800709c:	d821      	bhi.n	80070e2 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800709e:	2300      	movs	r3, #0
 80070a0:	463a      	mov	r2, r7
 80070a2:	4658      	mov	r0, fp
 80070a4:	4619      	mov	r1, r3
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	f7ff fe84 	bl	8006db4 <xTimerGenericCommand>
			configASSERT( xResult );
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f47f af27 	bne.w	8006f00 <prvTimerTask+0x60>
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	e7fe      	b.n	80070c2 <prvTimerTask+0x222>
							vPortFree( pxTimer );
 80070c4:	4638      	mov	r0, r7
 80070c6:	f000 fa9f 	bl	8007608 <vPortFree>
 80070ca:	e71d      	b.n	8006f08 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070cc:	4641      	mov	r1, r8
 80070ce:	6830      	ldr	r0, [r6, #0]
 80070d0:	f7fe f99c 	bl	800540c <vListInsert>
	return xProcessTimerNow;
 80070d4:	e714      	b.n	8006f00 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070d6:	4b0d      	ldr	r3, [pc, #52]	; (800710c <prvTimerTask+0x26c>)
 80070d8:	1d39      	adds	r1, r7, #4
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	f7fe f996 	bl	800540c <vListInsert>
	return xProcessTimerNow;
 80070e0:	e712      	b.n	8006f08 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070e2:	4b0a      	ldr	r3, [pc, #40]	; (800710c <prvTimerTask+0x26c>)
 80070e4:	4641      	mov	r1, r8
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	f7fe f990 	bl	800540c <vListInsert>
	return xProcessTimerNow;
 80070ec:	e708      	b.n	8006f00 <prvTimerTask+0x60>
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070fe:	e7fe      	b.n	80070fe <prvTimerTask+0x25e>
 8007100:	24002914 	.word	0x24002914
 8007104:	240029e4 	.word	0x240029e4
 8007108:	24002a38 	.word	0x24002a38
 800710c:	24002918 	.word	0x24002918

08007110 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007110:	4808      	ldr	r0, [pc, #32]	; (8007134 <prvPortStartFirstTask+0x24>)
 8007112:	6800      	ldr	r0, [r0, #0]
 8007114:	6800      	ldr	r0, [r0, #0]
 8007116:	f380 8808 	msr	MSP, r0
 800711a:	f04f 0000 	mov.w	r0, #0
 800711e:	f380 8814 	msr	CONTROL, r0
 8007122:	b662      	cpsie	i
 8007124:	b661      	cpsie	f
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	df00      	svc	0
 8007130:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007132:	0000      	.short	0x0000
 8007134:	e000ed08 	.word	0xe000ed08

08007138 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007138:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007148 <vPortEnableVFP+0x10>
 800713c:	6801      	ldr	r1, [r0, #0]
 800713e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007142:	6001      	str	r1, [r0, #0]
 8007144:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007146:	0000      	.short	0x0000
 8007148:	e000ed88 	.word	0xe000ed88

0800714c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800714c:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <prvTaskExitError+0x3c>)
{
 800714e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007150:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8007152:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8007154:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007156:	3301      	adds	r3, #1
 8007158:	d008      	beq.n	800716c <prvTaskExitError+0x20>
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	e7fe      	b.n	800716a <prvTaskExitError+0x1e>
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0fc      	beq.n	800717c <prvTaskExitError+0x30>
}
 8007182:	b002      	add	sp, #8
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	24000038 	.word	0x24000038

0800718c <pxPortInitialiseStack>:
{
 800718c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800718e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007192:	4809      	ldr	r0, [pc, #36]	; (80071b8 <pxPortInitialiseStack+0x2c>)
{
 8007194:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007196:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800719a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800719e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80071a2:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071a6:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071aa:	f06f 0102 	mvn.w	r1, #2
}
 80071ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071b2:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80071b6:	4770      	bx	lr
 80071b8:	0800714d 	.word	0x0800714d
 80071bc:	00000000 	.word	0x00000000

080071c0 <SVC_Handler>:
	__asm volatile (
 80071c0:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <pxCurrentTCBConst2>)
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	6808      	ldr	r0, [r1, #0]
 80071c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	f380 8809 	msr	PSP, r0
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	4770      	bx	lr
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst2>:
 80071e0:	24002418 	.word	0x24002418

080071e4 <vPortEnterCritical>:
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80071f4:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <vPortEnterCritical+0x40>)
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80071fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80071fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80071fe:	d000      	beq.n	8007202 <vPortEnterCritical+0x1e>
}
 8007200:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007202:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007206:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f7      	beq.n	8007200 <vPortEnterCritical+0x1c>
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	e7fe      	b.n	8007220 <vPortEnterCritical+0x3c>
 8007222:	bf00      	nop
 8007224:	24000038 	.word	0x24000038

08007228 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007228:	4a08      	ldr	r2, [pc, #32]	; (800724c <vPortExitCritical+0x24>)
 800722a:	6813      	ldr	r3, [r2, #0]
 800722c:	b943      	cbnz	r3, 8007240 <vPortExitCritical+0x18>
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	e7fe      	b.n	800723e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007240:	3b01      	subs	r3, #1
 8007242:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007244:	b90b      	cbnz	r3, 800724a <vPortExitCritical+0x22>
	__asm volatile
 8007246:	f383 8811 	msr	BASEPRI, r3
}
 800724a:	4770      	bx	lr
 800724c:	24000038 	.word	0x24000038

08007250 <PendSV_Handler>:
	__asm volatile
 8007250:	f3ef 8009 	mrs	r0, PSP
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <pxCurrentTCBConst>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f01e 0f10 	tst.w	lr, #16
 8007260:	bf08      	it	eq
 8007262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	6010      	str	r0, [r2, #0]
 800726c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007274:	f380 8811 	msr	BASEPRI, r0
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f7ff fafc 	bl	800687c <vTaskSwitchContext>
 8007284:	f04f 0000 	mov.w	r0, #0
 8007288:	f380 8811 	msr	BASEPRI, r0
 800728c:	bc09      	pop	{r0, r3}
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	6808      	ldr	r0, [r1, #0]
 8007292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007296:	f01e 0f10 	tst.w	lr, #16
 800729a:	bf08      	it	eq
 800729c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072a0:	f380 8809 	msr	PSP, r0
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w

080072b0 <pxCurrentTCBConst>:
 80072b0:	24002418 	.word	0x24002418

080072b4 <xPortSysTickHandler>:
{
 80072b4:	b508      	push	{r3, lr}
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80072c6:	f7ff f95b 	bl	8006580 <xTaskIncrementTick>
 80072ca:	b128      	cbz	r0, 80072d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80072d8:	2300      	movs	r3, #0
 80072da:	f383 8811 	msr	BASEPRI, r3
}
 80072de:	bd08      	pop	{r3, pc}

080072e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80072e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072e6:	4806      	ldr	r0, [pc, #24]	; (8007300 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072e8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072ea:	4906      	ldr	r1, [pc, #24]	; (8007304 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072ee:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072f0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072f2:	fba1 1303 	umull	r1, r3, r1, r3
 80072f6:	099b      	lsrs	r3, r3, #6
 80072f8:	3b01      	subs	r3, #1
 80072fa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072fc:	6110      	str	r0, [r2, #16]
}
 80072fe:	4770      	bx	lr
 8007300:	24000014 	.word	0x24000014
 8007304:	10624dd3 	.word	0x10624dd3

08007308 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007308:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800730c:	4a3d      	ldr	r2, [pc, #244]	; (8007404 <xPortStartScheduler+0xfc>)
 800730e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8007312:	4291      	cmp	r1, r2
 8007314:	d041      	beq.n	800739a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007316:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800731a:	4b3b      	ldr	r3, [pc, #236]	; (8007408 <xPortStartScheduler+0x100>)
 800731c:	429a      	cmp	r2, r3
 800731e:	d033      	beq.n	8007388 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007320:	4b3a      	ldr	r3, [pc, #232]	; (800740c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007322:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007324:	493a      	ldr	r1, [pc, #232]	; (8007410 <xPortStartScheduler+0x108>)
{
 8007326:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007328:	781a      	ldrb	r2, [r3, #0]
{
 800732a:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800732c:	4c39      	ldr	r4, [pc, #228]	; (8007414 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007332:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007334:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007336:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007338:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007340:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007344:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007348:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800734c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800734e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007350:	d511      	bpl.n	8007376 <xPortStartScheduler+0x6e>
 8007352:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007354:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007358:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800735a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007364:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8007368:	0609      	lsls	r1, r1, #24
 800736a:	d4f3      	bmi.n	8007354 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800736c:	2803      	cmp	r0, #3
 800736e:	6020      	str	r0, [r4, #0]
 8007370:	f88d 3003 	strb.w	r3, [sp, #3]
 8007374:	d01a      	beq.n	80073ac <xPortStartScheduler+0xa4>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	e7fe      	b.n	8007386 <xPortStartScheduler+0x7e>
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007398:	e7fe      	b.n	8007398 <xPortStartScheduler+0x90>
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073aa:	e7fe      	b.n	80073aa <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073ac:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b4:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073b8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073ba:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 80073bc:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073c0:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80073c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073c8:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073cc:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80073d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073d4:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80073d8:	f7ff ff82 	bl	80072e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <xPortStartScheduler+0x110>)
 80073de:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80073e0:	f7ff feaa 	bl	8007138 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073e4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 80073e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073ec:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 80073f0:	f7ff fe8e 	bl	8007110 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80073f4:	f7ff fa42 	bl	800687c <vTaskSwitchContext>
}
 80073f8:	4620      	mov	r0, r4
	prvTaskExitError();
 80073fa:	f7ff fea7 	bl	800714c <prvTaskExitError>
}
 80073fe:	b003      	add	sp, #12
 8007400:	bd30      	pop	{r4, r5, pc}
 8007402:	bf00      	nop
 8007404:	410fc271 	.word	0x410fc271
 8007408:	410fc270 	.word	0x410fc270
 800740c:	e000e400 	.word	0xe000e400
 8007410:	24002a40 	.word	0x24002a40
 8007414:	24002a44 	.word	0x24002a44
 8007418:	24000038 	.word	0x24000038

0800741c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800741c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007420:	2b0f      	cmp	r3, #15
 8007422:	d90e      	bls.n	8007442 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007424:	4911      	ldr	r1, [pc, #68]	; (800746c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007428:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800742a:	7812      	ldrb	r2, [r2, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d908      	bls.n	8007442 <vPortValidateInterruptPriority+0x26>
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	e7fe      	b.n	8007440 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007442:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007446:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <vPortValidateInterruptPriority+0x58>)
 8007448:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007452:	4293      	cmp	r3, r2
 8007454:	d908      	bls.n	8007468 <vPortValidateInterruptPriority+0x4c>
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	e7fe      	b.n	8007466 <vPortValidateInterruptPriority+0x4a>
	}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e000e3f0 	.word	0xe000e3f0
 8007470:	24002a40 	.word	0x24002a40
 8007474:	24002a44 	.word	0x24002a44

08007478 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007478:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <prvInsertBlockIntoFreeList+0x5c>)
 800747a:	461a      	mov	r2, r3
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4283      	cmp	r3, r0
 8007480:	d3fb      	bcc.n	800747a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007482:	6851      	ldr	r1, [r2, #4]
 8007484:	eb02 0c01 	add.w	ip, r2, r1
 8007488:	4560      	cmp	r0, ip
 800748a:	d01a      	beq.n	80074c2 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800748c:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748e:	eb00 0c01 	add.w	ip, r0, r1
 8007492:	4563      	cmp	r3, ip
 8007494:	d005      	beq.n	80074a2 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007496:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007498:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800749a:	bf18      	it	ne
 800749c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800749e:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074a0:	4610      	mov	r0, r2
{
 80074a2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074a4:	4c0c      	ldr	r4, [pc, #48]	; (80074d8 <prvInsertBlockIntoFreeList+0x60>)
 80074a6:	6824      	ldr	r4, [r4, #0]
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d003      	beq.n	80074b4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ac:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074b0:	4421      	add	r1, r4
 80074b2:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 80074b4:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074b6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80074b8:	d000      	beq.n	80074bc <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074ba:	6010      	str	r0, [r2, #0]
	}
}
 80074bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074c0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c2:	6840      	ldr	r0, [r0, #4]
 80074c4:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074c6:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074ca:	4283      	cmp	r3, r0
 80074cc:	d0e8      	beq.n	80074a0 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074ce:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	2400a260 	.word	0x2400a260
 80074d8:	24002a48 	.word	0x24002a48

080074dc <pvPortMalloc>:
{
 80074dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80074e0:	4e42      	ldr	r6, [pc, #264]	; (80075ec <pvPortMalloc+0x110>)
{
 80074e2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80074e4:	f7ff f836 	bl	8006554 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80074e8:	6833      	ldr	r3, [r6, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d05a      	beq.n	80075a4 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074ee:	4b40      	ldr	r3, [pc, #256]	; (80075f0 <pvPortMalloc+0x114>)
 80074f0:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 80074f2:	422c      	tst	r4, r5
 80074f4:	d12e      	bne.n	8007554 <pvPortMalloc+0x78>
 80074f6:	b36c      	cbz	r4, 8007554 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074f8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80074fa:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074fe:	d002      	beq.n	8007506 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007500:	f021 0107 	bic.w	r1, r1, #7
 8007504:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007506:	b329      	cbz	r1, 8007554 <pvPortMalloc+0x78>
 8007508:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8007604 <pvPortMalloc+0x128>
 800750c:	f8d8 7000 	ldr.w	r7, [r8]
 8007510:	428f      	cmp	r7, r1
 8007512:	d31f      	bcc.n	8007554 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8007514:	4837      	ldr	r0, [pc, #220]	; (80075f4 <pvPortMalloc+0x118>)
 8007516:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007518:	e003      	b.n	8007522 <pvPortMalloc+0x46>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	b123      	cbz	r3, 8007528 <pvPortMalloc+0x4c>
 800751e:	4620      	mov	r0, r4
 8007520:	461c      	mov	r4, r3
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	428a      	cmp	r2, r1
 8007526:	d3f8      	bcc.n	800751a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8007528:	6833      	ldr	r3, [r6, #0]
 800752a:	42a3      	cmp	r3, r4
 800752c:	d012      	beq.n	8007554 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800752e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007530:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007532:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007534:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007536:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007538:	2b10      	cmp	r3, #16
 800753a:	d916      	bls.n	800756a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800753c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800753e:	0742      	lsls	r2, r0, #29
 8007540:	d00e      	beq.n	8007560 <pvPortMalloc+0x84>
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	e7fe      	b.n	8007552 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8007554:	2600      	movs	r6, #0
 8007556:	f7ff f951 	bl	80067fc <xTaskResumeAll>
}
 800755a:	4630      	mov	r0, r6
 800755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007560:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007562:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007564:	f7ff ff88 	bl	8007478 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007568:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800756a:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800756c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 800756e:	4923      	ldr	r1, [pc, #140]	; (80075fc <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007570:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007572:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007574:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007576:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800757a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800757c:	bf38      	it	cc
 800757e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007580:	680b      	ldr	r3, [r1, #0]
 8007582:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 8007584:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 8007588:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800758a:	f7ff f937 	bl	80067fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800758e:	0773      	lsls	r3, r6, #29
 8007590:	d0e3      	beq.n	800755a <pvPortMalloc+0x7e>
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	e7fe      	b.n	80075a2 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 80075a4:	4b16      	ldr	r3, [pc, #88]	; (8007600 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075a6:	075d      	lsls	r5, r3, #29
 80075a8:	d119      	bne.n	80075de <pvPortMalloc+0x102>
 80075aa:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
 80075ae:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 80075b0:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 80075b2:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075b4:	4d0f      	ldr	r5, [pc, #60]	; (80075f4 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075b6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075ba:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075be:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 80075c0:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075c2:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 80075c6:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ca:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ce:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <pvPortMalloc+0x11c>)
}
 80075d0:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <pvPortMalloc+0x128>)
 80075d6:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <pvPortMalloc+0x114>)
 80075da:	601f      	str	r7, [r3, #0]
}
 80075dc:	e789      	b.n	80074f2 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075de:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e0:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e4:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e8:	460b      	mov	r3, r1
 80075ea:	e7e1      	b.n	80075b0 <pvPortMalloc+0xd4>
 80075ec:	24002a48 	.word	0x24002a48
 80075f0:	2400a24c 	.word	0x2400a24c
 80075f4:	2400a260 	.word	0x2400a260
 80075f8:	2400a254 	.word	0x2400a254
 80075fc:	2400a258 	.word	0x2400a258
 8007600:	24002a4c 	.word	0x24002a4c
 8007604:	2400a250 	.word	0x2400a250

08007608 <vPortFree>:
	if( pv != NULL )
 8007608:	b1d0      	cbz	r0, 8007640 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800760a:	4a1c      	ldr	r2, [pc, #112]	; (800767c <vPortFree+0x74>)
 800760c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	4213      	tst	r3, r2
 8007614:	d00b      	beq.n	800762e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007616:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800761a:	b191      	cbz	r1, 8007642 <vPortFree+0x3a>
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	e7fe      	b.n	800762c <vPortFree+0x24>
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800763e:	e7fe      	b.n	800763e <vPortFree+0x36>
 8007640:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007642:	ea23 0302 	bic.w	r3, r3, r2
{
 8007646:	b500      	push	{lr}
 8007648:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800764a:	f840 3c04 	str.w	r3, [r0, #-4]
 800764e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8007650:	f7fe ff80 	bl	8006554 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007654:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <vPortFree+0x78>)
 8007656:	9801      	ldr	r0, [sp, #4]
 8007658:	6811      	ldr	r1, [r2, #0]
 800765a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800765e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007660:	440b      	add	r3, r1
 8007662:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007664:	f7ff ff08 	bl	8007478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007668:	4a06      	ldr	r2, [pc, #24]	; (8007684 <vPortFree+0x7c>)
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	6013      	str	r3, [r2, #0]
}
 8007670:	b003      	add	sp, #12
 8007672:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8007676:	f7ff b8c1 	b.w	80067fc <xTaskResumeAll>
 800767a:	bf00      	nop
 800767c:	2400a24c 	.word	0x2400a24c
 8007680:	2400a250 	.word	0x2400a250
 8007684:	2400a25c 	.word	0x2400a25c

08007688 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 800768c:	2300      	movs	r3, #0
{
 800768e:	b082      	sub	sp, #8
  void *buf = NULL;
 8007690:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007692:	2900      	cmp	r1, #0
 8007694:	d075      	beq.n	8007782 <netconn_recv_data+0xfa>
  *new_buf = NULL;
 8007696:	4604      	mov	r4, r0
 8007698:	460d      	mov	r5, r1
 800769a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800769c:	2800      	cmp	r0, #0
 800769e:	d066      	beq.n	800776e <netconn_recv_data+0xe6>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80076a0:	f100 0810 	add.w	r8, r0, #16
 80076a4:	4616      	mov	r6, r2
 80076a6:	4640      	mov	r0, r8
 80076a8:	f009 f804 	bl	80106b4 <sys_mbox_valid>
 80076ac:	4607      	mov	r7, r0
 80076ae:	b310      	cbz	r0, 80076f6 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80076b0:	7f23      	ldrb	r3, [r4, #28]
 80076b2:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80076b6:	a901      	add	r1, sp, #4
 80076b8:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	4313      	orrs	r3, r2
 80076c0:	d025      	beq.n	800770e <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80076c2:	f008 ffeb 	bl	801069c <sys_arch_mbox_tryfetch>
 80076c6:	3001      	adds	r0, #1
 80076c8:	d035      	beq.n	8007736 <netconn_recv_data+0xae>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80076ca:	7823      	ldrb	r3, [r4, #0]
 80076cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d023      	beq.n	800771c <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d03d      	beq.n	8007756 <netconn_recv_data+0xce>
    len = netbuf_len((struct netbuf *)buf);
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	8912      	ldrh	r2, [r2, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80076de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076e0:	b11e      	cbz	r6, 80076ea <netconn_recv_data+0x62>
 80076e2:	2101      	movs	r1, #1
 80076e4:	4620      	mov	r0, r4
 80076e6:	47b0      	blx	r6
 80076e8:	9b01      	ldr	r3, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80076ea:	2600      	movs	r6, #0
  *new_buf = buf;
 80076ec:	602b      	str	r3, [r5, #0]
}
 80076ee:	4630      	mov	r0, r6
 80076f0:	b002      	add	sp, #8
 80076f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80076f6:	f009 f861 	bl	80107bc <sys_arch_protect>
  err = conn->pending_err;
 80076fa:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 80076fe:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007700:	f009 f868 	bl	80107d4 <sys_arch_unprotect>
    if (err != ERR_OK) {
 8007704:	2e00      	cmp	r6, #0
 8007706:	d1f2      	bne.n	80076ee <netconn_recv_data+0x66>
    return ERR_CONN;
 8007708:	f06f 060a 	mvn.w	r6, #10
 800770c:	e7ef      	b.n	80076ee <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800770e:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8007712:	2a00      	cmp	r2, #0
 8007714:	d1d5      	bne.n	80076c2 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007716:	f008 ffa1 	bl	801065c <sys_arch_mbox_fetch>
 800771a:	e7d6      	b.n	80076ca <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800771c:	f10d 0103 	add.w	r1, sp, #3
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	f001 f81d 	bl	8008760 <lwip_netconn_is_err_msg>
 8007726:	b1f8      	cbz	r0, 8007768 <netconn_recv_data+0xe0>
      if (err == ERR_CLSD) {
 8007728:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 800772c:	f116 0f0f 	cmn.w	r6, #15
 8007730:	bf08      	it	eq
 8007732:	2600      	moveq	r6, #0
 8007734:	e7db      	b.n	80076ee <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 8007736:	f009 f841 	bl	80107bc <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800773a:	2300      	movs	r3, #0
  err = conn->pending_err;
 800773c:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8007740:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007742:	f009 f847 	bl	80107d4 <sys_arch_unprotect>
      if (err != ERR_OK) {
 8007746:	2e00      	cmp	r6, #0
 8007748:	d1d1      	bne.n	80076ee <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800774a:	7f23      	ldrb	r3, [r4, #28]
 800774c:	07db      	lsls	r3, r3, #31
 800774e:	d4db      	bmi.n	8007708 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 8007750:	f06f 0606 	mvn.w	r6, #6
 8007754:	e7cb      	b.n	80076ee <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <netconn_recv_data+0x110>)
 8007758:	f240 2291 	movw	r2, #657	; 0x291
 800775c:	490f      	ldr	r1, [pc, #60]	; (800779c <netconn_recv_data+0x114>)
 800775e:	4810      	ldr	r0, [pc, #64]	; (80077a0 <netconn_recv_data+0x118>)
 8007760:	f00a fec6 	bl	80124f0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	e7b8      	b.n	80076da <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	891a      	ldrh	r2, [r3, #8]
 800776c:	e7b7      	b.n	80076de <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800776e:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <netconn_recv_data+0x110>)
 8007770:	f240 224a 	movw	r2, #586	; 0x24a
 8007774:	490b      	ldr	r1, [pc, #44]	; (80077a4 <netconn_recv_data+0x11c>)
 8007776:	f06f 060f 	mvn.w	r6, #15
 800777a:	4809      	ldr	r0, [pc, #36]	; (80077a0 <netconn_recv_data+0x118>)
 800777c:	f00a feb8 	bl	80124f0 <iprintf>
 8007780:	e7b5      	b.n	80076ee <netconn_recv_data+0x66>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <netconn_recv_data+0x110>)
 8007784:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007788:	4907      	ldr	r1, [pc, #28]	; (80077a8 <netconn_recv_data+0x120>)
 800778a:	f06f 060f 	mvn.w	r6, #15
 800778e:	4804      	ldr	r0, [pc, #16]	; (80077a0 <netconn_recv_data+0x118>)
 8007790:	f00a feae 	bl	80124f0 <iprintf>
 8007794:	e7ab      	b.n	80076ee <netconn_recv_data+0x66>
 8007796:	bf00      	nop
 8007798:	080150b8 	.word	0x080150b8
 800779c:	08015128 	.word	0x08015128
 80077a0:	08014fe0 	.word	0x08014fe0
 80077a4:	0801510c 	.word	0x0801510c
 80077a8:	080150ec 	.word	0x080150ec

080077ac <netconn_recv_data_tcp>:
{
 80077ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	b091      	sub	sp, #68	; 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80077b2:	3010      	adds	r0, #16
{
 80077b4:	460e      	mov	r6, r1
 80077b6:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80077b8:	f008 ff7c 	bl	80106b4 <sys_mbox_valid>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d053      	beq.n	8007868 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80077c0:	f994 201c 	ldrsb.w	r2, [r4, #28]
 80077c4:	7f23      	ldrb	r3, [r4, #28]
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	db1c      	blt.n	8007804 <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80077ca:	463a      	mov	r2, r7
 80077cc:	4631      	mov	r1, r6
 80077ce:	4620      	mov	r0, r4
 80077d0:	f7ff ff5a 	bl	8007688 <netconn_recv_data>
  if (err != ERR_OK) {
 80077d4:	4605      	mov	r5, r0
 80077d6:	b990      	cbnz	r0, 80077fe <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80077d8:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 80077da:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80077dc:	d40e      	bmi.n	80077fc <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 80077de:	b39e      	cbz	r6, 8007848 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80077e0:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80077e2:	7823      	ldrb	r3, [r4, #0]
 80077e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077e8:	2b10      	cmp	r3, #16
 80077ea:	d140      	bne.n	800786e <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 80077ec:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80077ee:	4669      	mov	r1, sp
 80077f0:	f104 020c 	add.w	r2, r4, #12
 80077f4:	4823      	ldr	r0, [pc, #140]	; (8007884 <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 80077f6:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80077f8:	f001 fcc0 	bl	800917c <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 80077fc:	b1de      	cbz	r6, 8007836 <netconn_recv_data_tcp+0x8a>
}
 80077fe:	4628      	mov	r0, r5
 8007800:	b011      	add	sp, #68	; 0x44
 8007802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007808:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800780a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800780c:	b11b      	cbz	r3, 8007816 <netconn_recv_data_tcp+0x6a>
 800780e:	2200      	movs	r2, #0
 8007810:	2101      	movs	r1, #1
 8007812:	4620      	mov	r0, r4
 8007814:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007816:	6866      	ldr	r6, [r4, #4]
 8007818:	b9c6      	cbnz	r6, 800784c <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 800781a:	f008 ffcf 	bl	80107bc <sys_arch_protect>
  err = conn->pending_err;
 800781e:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8007822:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007824:	f008 ffd6 	bl	80107d4 <sys_arch_unprotect>
        return ERR_RST;
 8007828:	2d00      	cmp	r5, #0
 800782a:	bf08      	it	eq
 800782c:	f06f 050d 	mvneq.w	r5, #13
}
 8007830:	4628      	mov	r0, r5
 8007832:	b011      	add	sp, #68	; 0x44
 8007834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 8007836:	06fb      	lsls	r3, r7, #27
 8007838:	d5e7      	bpl.n	800780a <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800783a:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800783c:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007844:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8007846:	e7da      	b.n	80077fe <netconn_recv_data_tcp+0x52>
 8007848:	2201      	movs	r2, #1
 800784a:	e7ca      	b.n	80077e2 <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800784c:	f642 1301 	movw	r3, #10497	; 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007850:	f104 020c 	add.w	r2, r4, #12
 8007854:	a908      	add	r1, sp, #32
 8007856:	480c      	ldr	r0, [pc, #48]	; (8007888 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 8007858:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 800785c:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800785e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007862:	f001 fc8b 	bl	800917c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007866:	e7ca      	b.n	80077fe <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 8007868:	f06f 050a 	mvn.w	r5, #10
 800786c:	e7c7      	b.n	80077fe <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <netconn_recv_data_tcp+0xe0>)
 8007870:	f240 22a7 	movw	r2, #679	; 0x2a7
 8007874:	4906      	ldr	r1, [pc, #24]	; (8007890 <netconn_recv_data_tcp+0xe4>)
 8007876:	4807      	ldr	r0, [pc, #28]	; (8007894 <netconn_recv_data_tcp+0xe8>)
 8007878:	f00a fe3a 	bl	80124f0 <iprintf>
  if (buf == NULL) {
 800787c:	2e00      	cmp	r6, #0
 800787e:	d1be      	bne.n	80077fe <netconn_recv_data_tcp+0x52>
 8007880:	e7d9      	b.n	8007836 <netconn_recv_data_tcp+0x8a>
 8007882:	bf00      	nop
 8007884:	08008d35 	.word	0x08008d35
 8007888:	08008e3d 	.word	0x08008e3d
 800788c:	080150b8 	.word	0x080150b8
 8007890:	08015134 	.word	0x08015134
 8007894:	08014fe0 	.word	0x08014fe0

08007898 <netconn_new_with_proto_and_callback>:
{
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	460d      	mov	r5, r1
 800789c:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 800789e:	4611      	mov	r1, r2
 80078a0:	f000 ffc0 	bl	8008824 <netconn_alloc>
  if (conn != NULL) {
 80078a4:	4604      	mov	r4, r0
 80078a6:	b170      	cbz	r0, 80078c6 <netconn_new_with_proto_and_callback+0x2e>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80078a8:	f100 060c 	add.w	r6, r0, #12
 80078ac:	4669      	mov	r1, sp
 80078ae:	4823      	ldr	r0, [pc, #140]	; (800793c <netconn_new_with_proto_and_callback+0xa4>)
 80078b0:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80078b2:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 80078b6:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80078b8:	f001 fc60 	bl	800917c <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 80078bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80078c0:	4318      	orrs	r0, r3
 80078c2:	b240      	sxtb	r0, r0
 80078c4:	b910      	cbnz	r0, 80078cc <netconn_new_with_proto_and_callback+0x34>
}
 80078c6:	4620      	mov	r0, r4
 80078c8:	b008      	add	sp, #32
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80078cc:	6863      	ldr	r3, [r4, #4]
 80078ce:	b12b      	cbz	r3, 80078dc <netconn_new_with_proto_and_callback+0x44>
 80078d0:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <netconn_new_with_proto_and_callback+0xa8>)
 80078d2:	22a3      	movs	r2, #163	; 0xa3
 80078d4:	491b      	ldr	r1, [pc, #108]	; (8007944 <netconn_new_with_proto_and_callback+0xac>)
 80078d6:	481c      	ldr	r0, [pc, #112]	; (8007948 <netconn_new_with_proto_and_callback+0xb0>)
 80078d8:	f00a fe0a 	bl	80124f0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80078dc:	f104 0510 	add.w	r5, r4, #16
 80078e0:	4628      	mov	r0, r5
 80078e2:	f008 fee7 	bl	80106b4 <sys_mbox_valid>
 80078e6:	b310      	cbz	r0, 800792e <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80078e8:	f104 0014 	add.w	r0, r4, #20
 80078ec:	f008 fee2 	bl	80106b4 <sys_mbox_valid>
 80078f0:	b9b0      	cbnz	r0, 8007920 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80078f2:	4630      	mov	r0, r6
 80078f4:	f008 ff22 	bl	801073c <sys_sem_valid>
 80078f8:	b158      	cbz	r0, 8007912 <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 80078fa:	4630      	mov	r0, r6
 80078fc:	f008 ff1a 	bl	8010734 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8007900:	4628      	mov	r0, r5
 8007902:	f008 fe91 	bl	8010628 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007906:	4621      	mov	r1, r4
 8007908:	2007      	movs	r0, #7
      return NULL;
 800790a:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 800790c:	f002 f866 	bl	80099dc <memp_free>
      return NULL;
 8007910:	e7d9      	b.n	80078c6 <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007912:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <netconn_new_with_proto_and_callback+0xa8>)
 8007914:	22a9      	movs	r2, #169	; 0xa9
 8007916:	490d      	ldr	r1, [pc, #52]	; (800794c <netconn_new_with_proto_and_callback+0xb4>)
 8007918:	480b      	ldr	r0, [pc, #44]	; (8007948 <netconn_new_with_proto_and_callback+0xb0>)
 800791a:	f00a fde9 	bl	80124f0 <iprintf>
 800791e:	e7ec      	b.n	80078fa <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <netconn_new_with_proto_and_callback+0xa8>)
 8007922:	22a6      	movs	r2, #166	; 0xa6
 8007924:	490a      	ldr	r1, [pc, #40]	; (8007950 <netconn_new_with_proto_and_callback+0xb8>)
 8007926:	4808      	ldr	r0, [pc, #32]	; (8007948 <netconn_new_with_proto_and_callback+0xb0>)
 8007928:	f00a fde2 	bl	80124f0 <iprintf>
 800792c:	e7e1      	b.n	80078f2 <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800792e:	4b04      	ldr	r3, [pc, #16]	; (8007940 <netconn_new_with_proto_and_callback+0xa8>)
 8007930:	22a4      	movs	r2, #164	; 0xa4
 8007932:	4908      	ldr	r1, [pc, #32]	; (8007954 <netconn_new_with_proto_and_callback+0xbc>)
 8007934:	4804      	ldr	r0, [pc, #16]	; (8007948 <netconn_new_with_proto_and_callback+0xb0>)
 8007936:	f00a fddb 	bl	80124f0 <iprintf>
 800793a:	e7d5      	b.n	80078e8 <netconn_new_with_proto_and_callback+0x50>
 800793c:	080087bd 	.word	0x080087bd
 8007940:	080150b8 	.word	0x080150b8
 8007944:	08015158 	.word	0x08015158
 8007948:	08014fe0 	.word	0x08014fe0
 800794c:	080151b8 	.word	0x080151b8
 8007950:	08015194 	.word	0x08015194
 8007954:	0801517c 	.word	0x0801517c

08007958 <netconn_delete>:
{
 8007958:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 800795a:	4604      	mov	r4, r0
{
 800795c:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 800795e:	b1c0      	cbz	r0, 8007992 <netconn_delete+0x3a>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007960:	2329      	movs	r3, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007962:	f100 020c 	add.w	r2, r0, #12
 8007966:	4669      	mov	r1, sp
 8007968:	480c      	ldr	r0, [pc, #48]	; (800799c <netconn_delete+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 800796a:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800796c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007970:	f001 fc04 	bl	800917c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007974:	4605      	mov	r5, r0
 8007976:	b110      	cbz	r0, 800797e <netconn_delete+0x26>
}
 8007978:	4628      	mov	r0, r5
 800797a:	b009      	add	sp, #36	; 0x24
 800797c:	bd30      	pop	{r4, r5, pc}
    return apimsg->err;
 800797e:	f99d 5004 	ldrsb.w	r5, [sp, #4]
  if (err != ERR_OK) {
 8007982:	2d00      	cmp	r5, #0
 8007984:	d1f8      	bne.n	8007978 <netconn_delete+0x20>
    netconn_free(conn);
 8007986:	4620      	mov	r0, r4
 8007988:	f000 ff92 	bl	80088b0 <netconn_free>
}
 800798c:	4628      	mov	r0, r5
 800798e:	b009      	add	sp, #36	; 0x24
 8007990:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 8007992:	4605      	mov	r5, r0
}
 8007994:	4628      	mov	r0, r5
 8007996:	b009      	add	sp, #36	; 0x24
 8007998:	bd30      	pop	{r4, r5, pc}
 800799a:	bf00      	nop
 800799c:	08008b1d 	.word	0x08008b1d

080079a0 <netconn_bind>:
{
 80079a0:	b500      	push	{lr}
 80079a2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80079a4:	b1a0      	cbz	r0, 80079d0 <netconn_bind+0x30>
  if (addr == NULL) {
 80079a6:	460b      	mov	r3, r1
 80079a8:	4694      	mov	ip, r2
 80079aa:	b179      	cbz	r1, 80079cc <netconn_bind+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80079ac:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 80079b0:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80079b2:	4669      	mov	r1, sp
 80079b4:	480b      	ldr	r0, [pc, #44]	; (80079e4 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80079b6:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80079b8:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80079bc:	f001 fbde 	bl	800917c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80079c0:	b908      	cbnz	r0, 80079c6 <netconn_bind+0x26>
    return apimsg->err;
 80079c2:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 80079c6:	b009      	add	sp, #36	; 0x24
 80079c8:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <netconn_bind+0x48>)
 80079ce:	e7ed      	b.n	80079ac <netconn_bind+0xc>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80079d0:	4b06      	ldr	r3, [pc, #24]	; (80079ec <netconn_bind+0x4c>)
 80079d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80079d6:	4906      	ldr	r1, [pc, #24]	; (80079f0 <netconn_bind+0x50>)
 80079d8:	4806      	ldr	r0, [pc, #24]	; (80079f4 <netconn_bind+0x54>)
 80079da:	f00a fd89 	bl	80124f0 <iprintf>
 80079de:	f06f 000f 	mvn.w	r0, #15
 80079e2:	e7f0      	b.n	80079c6 <netconn_bind+0x26>
 80079e4:	08008c31 	.word	0x08008c31
 80079e8:	08017634 	.word	0x08017634
 80079ec:	080150b8 	.word	0x080150b8
 80079f0:	080151d4 	.word	0x080151d4
 80079f4:	08014fe0 	.word	0x08014fe0

080079f8 <netconn_listen_with_backlog>:
{
 80079f8:	b500      	push	{lr}
 80079fa:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80079fc:	b168      	cbz	r0, 8007a1a <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 80079fe:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007a00:	f100 020c 	add.w	r2, r0, #12
 8007a04:	4669      	mov	r1, sp
 8007a06:	480a      	ldr	r0, [pc, #40]	; (8007a30 <netconn_listen_with_backlog+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 8007a08:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007a0a:	f001 fbb7 	bl	800917c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007a0e:	b908      	cbnz	r0, 8007a14 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 8007a10:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8007a14:	b009      	add	sp, #36	; 0x24
 8007a16:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <netconn_listen_with_backlog+0x3c>)
 8007a1c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007a20:	4905      	ldr	r1, [pc, #20]	; (8007a38 <netconn_listen_with_backlog+0x40>)
 8007a22:	4806      	ldr	r0, [pc, #24]	; (8007a3c <netconn_listen_with_backlog+0x44>)
 8007a24:	f00a fd64 	bl	80124f0 <iprintf>
 8007a28:	f06f 000f 	mvn.w	r0, #15
 8007a2c:	e7f2      	b.n	8007a14 <netconn_listen_with_backlog+0x1c>
 8007a2e:	bf00      	nop
 8007a30:	08008c69 	.word	0x08008c69
 8007a34:	080150b8 	.word	0x080150b8
 8007a38:	080151f0 	.word	0x080151f0
 8007a3c:	08014fe0 	.word	0x08014fe0

08007a40 <netconn_accept>:
{
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a42:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d04d      	beq.n	8007ae4 <netconn_accept+0xa4>
  *new_conn = NULL;
 8007a48:	2500      	movs	r5, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	460e      	mov	r6, r1
 8007a4e:	600d      	str	r5, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d03d      	beq.n	8007ad0 <netconn_accept+0x90>
  SYS_ARCH_PROTECT(lev);
 8007a54:	f008 feb2 	bl	80107bc <sys_arch_protect>
  err = conn->pending_err;
 8007a58:	f994 7008 	ldrsb.w	r7, [r4, #8]
  conn->pending_err = ERR_OK;
 8007a5c:	7225      	strb	r5, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007a5e:	f008 feb9 	bl	80107d4 <sys_arch_unprotect>
  err = netconn_err(conn);
 8007a62:	f88d 7003 	strb.w	r7, [sp, #3]
  if (err != ERR_OK) {
 8007a66:	b117      	cbz	r7, 8007a6e <netconn_accept+0x2e>
}
 8007a68:	4638      	mov	r0, r7
 8007a6a:	b003      	add	sp, #12
 8007a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007a6e:	f104 0514 	add.w	r5, r4, #20
 8007a72:	4628      	mov	r0, r5
 8007a74:	f008 fe1e 	bl	80106b4 <sys_mbox_valid>
 8007a78:	b338      	cbz	r0, 8007aca <netconn_accept+0x8a>
 8007a7a:	7f23      	ldrb	r3, [r4, #28]
 8007a7c:	07da      	lsls	r2, r3, #31
 8007a7e:	d424      	bmi.n	8007aca <netconn_accept+0x8a>
  if (netconn_is_nonblocking(conn)) {
 8007a80:	079b      	lsls	r3, r3, #30
 8007a82:	d517      	bpl.n	8007ab4 <netconn_accept+0x74>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007a84:	a901      	add	r1, sp, #4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f008 fe08 	bl	801069c <sys_arch_mbox_tryfetch>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d033      	beq.n	8007af8 <netconn_accept+0xb8>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a92:	b11b      	cbz	r3, 8007a9c <netconn_accept+0x5c>
 8007a94:	2200      	movs	r2, #0
 8007a96:	4620      	mov	r0, r4
 8007a98:	2101      	movs	r1, #1
 8007a9a:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007a9c:	f10d 0103 	add.w	r1, sp, #3
 8007aa0:	9801      	ldr	r0, [sp, #4]
 8007aa2:	f000 fe5d 	bl	8008760 <lwip_netconn_is_err_msg>
 8007aa6:	b958      	cbnz	r0, 8007ac0 <netconn_accept+0x80>
  if (accept_ptr == NULL) {
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	b173      	cbz	r3, 8007aca <netconn_accept+0x8a>
}
 8007aac:	4638      	mov	r0, r7
  *new_conn = newconn;
 8007aae:	6033      	str	r3, [r6, #0]
}
 8007ab0:	b003      	add	sp, #12
 8007ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	a901      	add	r1, sp, #4
 8007aba:	f008 fdcf 	bl	801065c <sys_arch_mbox_fetch>
 8007abe:	e7e7      	b.n	8007a90 <netconn_accept+0x50>
    return err;
 8007ac0:	f99d 7003 	ldrsb.w	r7, [sp, #3]
}
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	b003      	add	sp, #12
 8007ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_CLSD;
 8007aca:	f06f 070e 	mvn.w	r7, #14
 8007ace:	e7cb      	b.n	8007a68 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <netconn_accept+0xc0>)
 8007ad2:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007ad6:	490b      	ldr	r1, [pc, #44]	; (8007b04 <netconn_accept+0xc4>)
 8007ad8:	f06f 070f 	mvn.w	r7, #15
 8007adc:	480a      	ldr	r0, [pc, #40]	; (8007b08 <netconn_accept+0xc8>)
 8007ade:	f00a fd07 	bl	80124f0 <iprintf>
 8007ae2:	e7c1      	b.n	8007a68 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <netconn_accept+0xc0>)
 8007ae6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007aea:	4908      	ldr	r1, [pc, #32]	; (8007b0c <netconn_accept+0xcc>)
 8007aec:	f06f 070f 	mvn.w	r7, #15
 8007af0:	4805      	ldr	r0, [pc, #20]	; (8007b08 <netconn_accept+0xc8>)
 8007af2:	f00a fcfd 	bl	80124f0 <iprintf>
 8007af6:	e7b7      	b.n	8007a68 <netconn_accept+0x28>
      return ERR_WOULDBLOCK;
 8007af8:	f06f 0706 	mvn.w	r7, #6
 8007afc:	e7b4      	b.n	8007a68 <netconn_accept+0x28>
 8007afe:	bf00      	nop
 8007b00:	080150b8 	.word	0x080150b8
 8007b04:	08015230 	.word	0x08015230
 8007b08:	08014fe0 	.word	0x08014fe0
 8007b0c:	08015210 	.word	0x08015210

08007b10 <netconn_recv>:
{
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d046      	beq.n	8007ba6 <netconn_recv+0x96>
  *new_buf = NULL;
 8007b18:	2600      	movs	r6, #0
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d036      	beq.n	8007b92 <netconn_recv+0x82>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007b24:	7803      	ldrb	r3, [r0, #0]
 8007b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b2a:	2b10      	cmp	r3, #16
 8007b2c:	d117      	bne.n	8007b5e <netconn_recv+0x4e>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007b2e:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8007b30:	9601      	str	r6, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007b32:	f001 ff0d 	bl	8009950 <memp_malloc>
    if (buf == NULL) {
 8007b36:	4607      	mov	r7, r0
 8007b38:	b1b8      	cbz	r0, 8007b6a <netconn_recv+0x5a>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4632      	mov	r2, r6
 8007b3e:	a901      	add	r1, sp, #4
 8007b40:	f7ff fe34 	bl	80077ac <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8007b44:	4604      	mov	r4, r0
 8007b46:	b9a8      	cbnz	r0, 8007b74 <netconn_recv+0x64>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b48:	9e01      	ldr	r6, [sp, #4]
 8007b4a:	b1d6      	cbz	r6, 8007b82 <netconn_recv+0x72>
    buf->port = 0;
 8007b4c:	2300      	movs	r3, #0
    buf->ptr = p;
 8007b4e:	e9c7 6600 	strd	r6, r6, [r7]
    buf->port = 0;
 8007b52:	81bb      	strh	r3, [r7, #12]
    ip_addr_set_zero(&buf->addr);
 8007b54:	60bb      	str	r3, [r7, #8]
    *new_buf = buf;
 8007b56:	602f      	str	r7, [r5, #0]
}
 8007b58:	4620      	mov	r0, r4
 8007b5a:	b003      	add	sp, #12
 8007b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007b5e:	4632      	mov	r2, r6
}
 8007b60:	b003      	add	sp, #12
 8007b62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007b66:	f7ff bd8f 	b.w	8007688 <netconn_recv_data>
      return ERR_MEM;
 8007b6a:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007b6e:	4620      	mov	r0, r4
 8007b70:	b003      	add	sp, #12
 8007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memp_free(MEMP_NETBUF, buf);
 8007b74:	4639      	mov	r1, r7
 8007b76:	2006      	movs	r0, #6
 8007b78:	f001 ff30 	bl	80099dc <memp_free>
}
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	b003      	add	sp, #12
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b82:	4b0e      	ldr	r3, [pc, #56]	; (8007bbc <netconn_recv+0xac>)
 8007b84:	f240 3279 	movw	r2, #889	; 0x379
 8007b88:	490d      	ldr	r1, [pc, #52]	; (8007bc0 <netconn_recv+0xb0>)
 8007b8a:	480e      	ldr	r0, [pc, #56]	; (8007bc4 <netconn_recv+0xb4>)
 8007b8c:	f00a fcb0 	bl	80124f0 <iprintf>
 8007b90:	e7dc      	b.n	8007b4c <netconn_recv+0x3c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007b92:	4b0a      	ldr	r3, [pc, #40]	; (8007bbc <netconn_recv+0xac>)
 8007b94:	f240 3265 	movw	r2, #869	; 0x365
 8007b98:	490b      	ldr	r1, [pc, #44]	; (8007bc8 <netconn_recv+0xb8>)
 8007b9a:	f06f 040f 	mvn.w	r4, #15
 8007b9e:	4809      	ldr	r0, [pc, #36]	; (8007bc4 <netconn_recv+0xb4>)
 8007ba0:	f00a fca6 	bl	80124f0 <iprintf>
 8007ba4:	e7d8      	b.n	8007b58 <netconn_recv+0x48>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007ba6:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <netconn_recv+0xac>)
 8007ba8:	f240 3263 	movw	r2, #867	; 0x363
 8007bac:	4907      	ldr	r1, [pc, #28]	; (8007bcc <netconn_recv+0xbc>)
 8007bae:	f06f 040f 	mvn.w	r4, #15
 8007bb2:	4804      	ldr	r0, [pc, #16]	; (8007bc4 <netconn_recv+0xb4>)
 8007bb4:	f00a fc9c 	bl	80124f0 <iprintf>
 8007bb8:	e7ce      	b.n	8007b58 <netconn_recv+0x48>
 8007bba:	bf00      	nop
 8007bbc:	080150b8 	.word	0x080150b8
 8007bc0:	080153c0 	.word	0x080153c0
 8007bc4:	08014fe0 	.word	0x08014fe0
 8007bc8:	0801510c 	.word	0x0801510c
 8007bcc:	080150ec 	.word	0x080150ec

08007bd0 <netconn_write_vectors_partly>:
{
 8007bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d064      	beq.n	8007ca2 <netconn_write_vectors_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007bd8:	7805      	ldrb	r5, [r0, #0]
 8007bda:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8007bde:	2d10      	cmp	r5, #16
 8007be0:	d155      	bne.n	8007c8e <netconn_write_vectors_partly+0xbe>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007be2:	7f05      	ldrb	r5, [r0, #28]
 8007be4:	f003 0604 	and.w	r6, r3, #4
 8007be8:	f005 0502 	and.w	r5, r5, #2
 8007bec:	4335      	orrs	r5, r6
 8007bee:	d018      	beq.n	8007c22 <netconn_write_vectors_partly+0x52>
  if (dontblock && !bytes_written) {
 8007bf0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007bf2:	b18c      	cbz	r4, 8007c18 <netconn_write_vectors_partly+0x48>
 8007bf4:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d03d      	beq.n	8007c76 <netconn_write_vectors_partly+0xa6>
    size += vectors[i].len;
 8007bfa:	460e      	mov	r6, r1
 8007bfc:	f04f 0e00 	mov.w	lr, #0
 8007c00:	f856 5f04 	ldr.w	r5, [r6, #4]!
  for (i = 0; i < vectorcnt; i++) {
 8007c04:	f10e 0e01 	add.w	lr, lr, #1
 8007c08:	4572      	cmp	r2, lr
 8007c0a:	d00c      	beq.n	8007c26 <netconn_write_vectors_partly+0x56>
 8007c0c:	f856 403e 	ldr.w	r4, [r6, lr, lsl #3]
 8007c10:	eb14 0c05 	adds.w	ip, r4, r5
    size += vectors[i].len;
 8007c14:	4665      	mov	r5, ip
    if (size < vectors[i].len) {
 8007c16:	d3f5      	bcc.n	8007c04 <netconn_write_vectors_partly+0x34>
    return ERR_VAL;
 8007c18:	f06f 0605 	mvn.w	r6, #5
}
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	b009      	add	sp, #36	; 0x24
 8007c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007c22:	462f      	mov	r7, r5
 8007c24:	e7e7      	b.n	8007bf6 <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	d025      	beq.n	8007c76 <netconn_write_vectors_partly+0xa6>
  } else if (size > SSIZE_MAX) {
 8007c2a:	da04      	bge.n	8007c36 <netconn_write_vectors_partly+0x66>
    if (!bytes_written) {
 8007c2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d0f2      	beq.n	8007c18 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 8007c32:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007c36:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007c3a:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8007c3c:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c3e:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8007c40:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c44:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8007c48:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c4a:	481b      	ldr	r0, [pc, #108]	; (8007cb8 <netconn_write_vectors_partly+0xe8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007c4c:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007c4e:	e9cd 3504 	strd	r3, r5, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c52:	f001 fa93 	bl	800917c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007c56:	4606      	mov	r6, r0
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d1df      	bne.n	8007c1c <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 8007c5c:	f99d 6004 	ldrsb.w	r6, [sp, #4]
  if (err == ERR_OK) {
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	d1db      	bne.n	8007c1c <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 8007c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c66:	b113      	cbz	r3, 8007c6e <netconn_write_vectors_partly+0x9e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007c68:	9b06      	ldr	r3, [sp, #24]
 8007c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c6c:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 8007c6e:	b917      	cbnz	r7, 8007c76 <netconn_write_vectors_partly+0xa6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	42ab      	cmp	r3, r5
 8007c74:	d103      	bne.n	8007c7e <netconn_write_vectors_partly+0xae>
    return ERR_OK;
 8007c76:	2600      	movs	r6, #0
}
 8007c78:	4630      	mov	r0, r6
 8007c7a:	b009      	add	sp, #36	; 0x24
 8007c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007c7e:	4b0f      	ldr	r3, [pc, #60]	; (8007cbc <netconn_write_vectors_partly+0xec>)
 8007c80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007c84:	490e      	ldr	r1, [pc, #56]	; (8007cc0 <netconn_write_vectors_partly+0xf0>)
 8007c86:	480f      	ldr	r0, [pc, #60]	; (8007cc4 <netconn_write_vectors_partly+0xf4>)
 8007c88:	f00a fc32 	bl	80124f0 <iprintf>
 8007c8c:	e7c6      	b.n	8007c1c <netconn_write_vectors_partly+0x4c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <netconn_write_vectors_partly+0xec>)
 8007c90:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007c94:	490c      	ldr	r1, [pc, #48]	; (8007cc8 <netconn_write_vectors_partly+0xf8>)
 8007c96:	f06f 0605 	mvn.w	r6, #5
 8007c9a:	480a      	ldr	r0, [pc, #40]	; (8007cc4 <netconn_write_vectors_partly+0xf4>)
 8007c9c:	f00a fc28 	bl	80124f0 <iprintf>
 8007ca0:	e7bc      	b.n	8007c1c <netconn_write_vectors_partly+0x4c>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007ca2:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <netconn_write_vectors_partly+0xec>)
 8007ca4:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007ca8:	4908      	ldr	r1, [pc, #32]	; (8007ccc <netconn_write_vectors_partly+0xfc>)
 8007caa:	f06f 060f 	mvn.w	r6, #15
 8007cae:	4805      	ldr	r0, [pc, #20]	; (8007cc4 <netconn_write_vectors_partly+0xf4>)
 8007cb0:	f00a fc1e 	bl	80124f0 <iprintf>
 8007cb4:	e7b2      	b.n	8007c1c <netconn_write_vectors_partly+0x4c>
 8007cb6:	bf00      	nop
 8007cb8:	08008d71 	.word	0x08008d71
 8007cbc:	080150b8 	.word	0x080150b8
 8007cc0:	08015290 	.word	0x08015290
 8007cc4:	08014fe0 	.word	0x08014fe0
 8007cc8:	0801526c 	.word	0x0801526c
 8007ccc:	08015250 	.word	0x08015250

08007cd0 <netconn_write_partly>:
{
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007cd6:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 8007cd8:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007cdc:	9200      	str	r2, [sp, #0]
 8007cde:	a902      	add	r1, sp, #8
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f7ff ff75 	bl	8007bd0 <netconn_write_vectors_partly>
}
 8007ce6:	b004      	add	sp, #16
 8007ce8:	bd10      	pop	{r4, pc}
 8007cea:	bf00      	nop

08007cec <netconn_close>:
{
 8007cec:	b500      	push	{lr}
 8007cee:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007cf0:	b188      	cbz	r0, 8007d16 <netconn_close+0x2a>
  API_MSG_VAR_REF(msg).conn = conn;
 8007cf2:	4603      	mov	r3, r0
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007cf4:	f642 1c03 	movw	ip, #10499	; 0x2903
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007cf8:	f100 020c 	add.w	r2, r0, #12
 8007cfc:	4669      	mov	r1, sp
 8007cfe:	480b      	ldr	r0, [pc, #44]	; (8007d2c <netconn_close+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 8007d00:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007d02:	f8ad c008 	strh.w	ip, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007d06:	f001 fa39 	bl	800917c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007d0a:	b908      	cbnz	r0, 8007d10 <netconn_close+0x24>
    return apimsg->err;
 8007d0c:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8007d10:	b009      	add	sp, #36	; 0x24
 8007d12:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <netconn_close+0x44>)
 8007d18:	f240 4247 	movw	r2, #1095	; 0x447
 8007d1c:	4905      	ldr	r1, [pc, #20]	; (8007d34 <netconn_close+0x48>)
 8007d1e:	4806      	ldr	r0, [pc, #24]	; (8007d38 <netconn_close+0x4c>)
 8007d20:	f00a fbe6 	bl	80124f0 <iprintf>
 8007d24:	f06f 000f 	mvn.w	r0, #15
 8007d28:	e7f2      	b.n	8007d10 <netconn_close+0x24>
 8007d2a:	bf00      	nop
 8007d2c:	08008e3d 	.word	0x08008e3d
 8007d30:	080150b8 	.word	0x080150b8
 8007d34:	080152b4 	.word	0x080152b4
 8007d38:	08014fe0 	.word	0x08014fe0

08007d3c <netconn_err>:
{
 8007d3c:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8007d3e:	4604      	mov	r4, r0
 8007d40:	b148      	cbz	r0, 8007d56 <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 8007d42:	f008 fd3b 	bl	80107bc <sys_arch_protect>
  conn->pending_err = ERR_OK;
 8007d46:	2300      	movs	r3, #0
  err = conn->pending_err;
 8007d48:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8007d4c:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007d4e:	f008 fd41 	bl	80107d4 <sys_arch_unprotect>
  return err;
}
 8007d52:	4628      	mov	r0, r5
 8007d54:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8007d56:	4605      	mov	r5, r0
}
 8007d58:	4628      	mov	r0, r5
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}

08007d5c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	4604      	mov	r4, r0
 8007d62:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8007d66:	4616      	mov	r6, r2
 8007d68:	461f      	mov	r7, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	b379      	cbz	r1, 8007dce <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	d035      	beq.n	8007dde <recv_udp+0x82>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007d72:	6863      	ldr	r3, [r4, #4]
 8007d74:	42ab      	cmp	r3, r5
 8007d76:	d005      	beq.n	8007d84 <recv_udp+0x28>
 8007d78:	4b22      	ldr	r3, [pc, #136]	; (8007e04 <recv_udp+0xa8>)
 8007d7a:	22ee      	movs	r2, #238	; 0xee
 8007d7c:	4922      	ldr	r1, [pc, #136]	; (8007e08 <recv_udp+0xac>)
 8007d7e:	4823      	ldr	r0, [pc, #140]	; (8007e0c <recv_udp+0xb0>)
 8007d80:	f00a fbb6 	bl	80124f0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007d84:	f104 0910 	add.w	r9, r4, #16
 8007d88:	4648      	mov	r0, r9
 8007d8a:	f008 fc93 	bl	80106b4 <sys_mbox_valid>
 8007d8e:	b1c8      	cbz	r0, 8007dc4 <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007d90:	2006      	movs	r0, #6
 8007d92:	f001 fddd 	bl	8009950 <memp_malloc>
  if (buf == NULL) {
 8007d96:	4605      	mov	r5, r0
 8007d98:	b1a0      	cbz	r0, 8007dc4 <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 8007d9a:	e9c0 6600 	strd	r6, r6, [r0]
    ip_addr_set(&buf->addr, addr);
 8007d9e:	b107      	cbz	r7, 8007da2 <recv_udp+0x46>
 8007da0:	683f      	ldr	r7, [r7, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007da2:	4629      	mov	r1, r5
 8007da4:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 8007da6:	60af      	str	r7, [r5, #8]
    buf->port = port;
 8007da8:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 8007dac:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007dae:	f008 fc45 	bl	801063c <sys_mbox_trypost>
 8007db2:	4601      	mov	r1, r0
 8007db4:	b9f0      	cbnz	r0, 8007df4 <recv_udp+0x98>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db8:	b30b      	cbz	r3, 8007dfe <recv_udp+0xa2>
 8007dba:	4632      	mov	r2, r6
 8007dbc:	4620      	mov	r0, r4
  }
}
 8007dbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007dc2:	4718      	bx	r3
    pbuf_free(p);
 8007dc4:	4630      	mov	r0, r6
}
 8007dc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007dca:	f002 b9cd 	b.w	800a168 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007dce:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <recv_udp+0xa8>)
 8007dd0:	22e5      	movs	r2, #229	; 0xe5
 8007dd2:	490f      	ldr	r1, [pc, #60]	; (8007e10 <recv_udp+0xb4>)
 8007dd4:	480d      	ldr	r0, [pc, #52]	; (8007e0c <recv_udp+0xb0>)
 8007dd6:	f00a fb8b 	bl	80124f0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d1c9      	bne.n	8007d72 <recv_udp+0x16>
 8007dde:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <recv_udp+0xa8>)
 8007de0:	22e6      	movs	r2, #230	; 0xe6
 8007de2:	490c      	ldr	r1, [pc, #48]	; (8007e14 <recv_udp+0xb8>)
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <recv_udp+0xb0>)
 8007de6:	f00a fb83 	bl	80124f0 <iprintf>
    pbuf_free(p);
 8007dea:	4630      	mov	r0, r6
}
 8007dec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007df0:	f002 b9ba 	b.w	800a168 <pbuf_free>
    netbuf_delete(buf);
 8007df4:	4628      	mov	r0, r5
}
 8007df6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8007dfa:	f001 b87b 	b.w	8008ef4 <netbuf_delete>
}
 8007dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e02:	bf00      	nop
 8007e04:	080152d0 	.word	0x080152d0
 8007e08:	08015348 	.word	0x08015348
 8007e0c:	08014fe0 	.word	0x08014fe0
 8007e10:	08015304 	.word	0x08015304
 8007e14:	08015328 	.word	0x08015328

08007e18 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007e18:	b500      	push	{lr}
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	b083      	sub	sp, #12
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007e1e:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8007e20:	9001      	str	r0, [sp, #4]
 8007e22:	f002 fe4f 	bl	800aac4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007e26:	9801      	ldr	r0, [sp, #4]
 8007e28:	4909      	ldr	r1, [pc, #36]	; (8007e50 <setup_tcp+0x38>)
 8007e2a:	f002 fe53 	bl	800aad4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007e2e:	9801      	ldr	r0, [sp, #4]
 8007e30:	4908      	ldr	r1, [pc, #32]	; (8007e54 <setup_tcp+0x3c>)
 8007e32:	f002 fe69 	bl	800ab08 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007e36:	9801      	ldr	r0, [sp, #4]
 8007e38:	4907      	ldr	r1, [pc, #28]	; (8007e58 <setup_tcp+0x40>)
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f002 fea4 	bl	800ab88 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8007e40:	4906      	ldr	r1, [pc, #24]	; (8007e5c <setup_tcp+0x44>)
 8007e42:	9801      	ldr	r0, [sp, #4]
}
 8007e44:	b003      	add	sp, #12
 8007e46:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8007e4a:	f002 be77 	b.w	800ab3c <tcp_err>
 8007e4e:	bf00      	nop
 8007e50:	08008509 	.word	0x08008509
 8007e54:	0800848d 	.word	0x0800848d
 8007e58:	0800840d 	.word	0x0800840d
 8007e5c:	080085f9 	.word	0x080085f9

08007e60 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	b083      	sub	sp, #12
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007e66:	4680      	mov	r8, r0
{
 8007e68:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f000 811b 	beq.w	80080a6 <lwip_netconn_do_writemore+0x246>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007e70:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d006      	beq.n	8007e86 <lwip_netconn_do_writemore+0x26>
 8007e78:	4ba4      	ldr	r3, [pc, #656]	; (800810c <lwip_netconn_do_writemore+0x2ac>)
 8007e7a:	f240 6274 	movw	r2, #1652	; 0x674
 8007e7e:	49a4      	ldr	r1, [pc, #656]	; (8008110 <lwip_netconn_do_writemore+0x2b0>)
 8007e80:	48a4      	ldr	r0, [pc, #656]	; (8008114 <lwip_netconn_do_writemore+0x2b4>)
 8007e82:	f00a fb35 	bl	80124f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007e86:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 8113 	beq.w	80080b6 <lwip_netconn_do_writemore+0x256>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007e90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 811a 	beq.w	80080ce <lwip_netconn_do_writemore+0x26e>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8007e9a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007e9e:	e9d2 3105 	ldrd	r3, r1, [r2, #20]
 8007ea2:	4299      	cmp	r1, r3
 8007ea4:	f080 80cf 	bcs.w	8008046 <lwip_netconn_do_writemore+0x1e6>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007ea8:	8993      	ldrh	r3, [r2, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 80c1 	beq.w	8008032 <lwip_netconn_do_writemore+0x1d2>

  apiflags = conn->current_msg->msg.w.apiflags;
 8007eb0:	7f17      	ldrb	r7, [r2, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007eb2:	f898 301c 	ldrb.w	r3, [r8, #28]
 8007eb6:	f007 0104 	and.w	r1, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007eba:	f8df b250 	ldr.w	fp, [pc, #592]	; 800810c <lwip_netconn_do_writemore+0x2ac>
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	f8df a268 	ldr.w	sl, [pc, #616]	; 800812c <lwip_netconn_do_writemore+0x2cc>
 8007ec6:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008114 <lwip_netconn_do_writemore+0x2b4>
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	9300      	str	r3, [sp, #0]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8007ece:	6891      	ldr	r1, [r2, #8]
 8007ed0:	6913      	ldr	r3, [r2, #16]
 8007ed2:	e9d1 6c00 	ldrd	r6, ip, [r1]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8007ed6:	ebac 0503 	sub.w	r5, ip, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8007eda:	441e      	add	r6, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8007edc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007ee0:	d338      	bcc.n	8007f54 <lwip_netconn_do_writemore+0xf4>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007ee2:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 8007ee6:	f64f 74ff 	movw	r4, #65535	; 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 8007eea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007eee:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
      if (available < len) {
 8007ef2:	428c      	cmp	r4, r1
 8007ef4:	d906      	bls.n	8007f04 <lwip_netconn_do_writemore+0xa4>
        if (dontblock) {
 8007ef6:	9c00      	ldr	r4, [sp, #0]
 8007ef8:	2c00      	cmp	r4, #0
 8007efa:	d058      	beq.n	8007fae <lwip_netconn_do_writemore+0x14e>
          if (!len) {
 8007efc:	2900      	cmp	r1, #0
 8007efe:	f000 8086 	beq.w	800800e <lwip_netconn_do_writemore+0x1ae>
 8007f02:	460c      	mov	r4, r1
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007f04:	4423      	add	r3, r4
 8007f06:	459c      	cmp	ip, r3
 8007f08:	d347      	bcc.n	8007f9a <lwip_netconn_do_writemore+0x13a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f0e:	429c      	cmp	r4, r3
 8007f10:	d13e      	bne.n	8007f90 <lwip_netconn_do_writemore+0x130>
 8007f12:	429d      	cmp	r5, r3
 8007f14:	d93c      	bls.n	8007f90 <lwip_netconn_do_writemore+0x130>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007f16:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8007f1a:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4631      	mov	r1, r6
 8007f22:	f005 fbad 	bl	800d680 <tcp_write>
      if (err == ERR_OK) {
 8007f26:	b1b8      	cbz	r0, 8007f58 <lwip_netconn_do_writemore+0xf8>
          }
        }
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d947      	bls.n	8007fc2 <lwip_netconn_do_writemore+0x162>
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007f32:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007f36:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8007f38:	2400      	movs	r4, #0
    conn->current_msg->err = err;
 8007f3a:	711e      	strb	r6, [r3, #4]
    conn->state = NETCONN_NONE;
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007f3c:	9b01      	ldr	r3, [sp, #4]
    conn->current_msg = NULL;
 8007f3e:	f8c8 4020 	str.w	r4, [r8, #32]
    conn->state = NETCONN_NONE;
 8007f42:	f888 4001 	strb.w	r4, [r8, #1]
    if (delayed)
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f040 8087 	bne.w	800805a <lwip_netconn_do_writemore+0x1fa>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8007f4c:	9801      	ldr	r0, [sp, #4]
}
 8007f4e:	b003      	add	sp, #12
 8007f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        len = (u16_t)diff;
 8007f54:	b2ac      	uxth	r4, r5
 8007f56:	e7c8      	b.n	8007eea <lwip_netconn_do_writemore+0x8a>
        conn->current_msg->msg.w.offset += len;
 8007f58:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007f5c:	6993      	ldr	r3, [r2, #24]
 8007f5e:	4423      	add	r3, r4
 8007f60:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 8007f62:	6913      	ldr	r3, [r2, #16]
 8007f64:	441c      	add	r4, r3
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8007f66:	6893      	ldr	r3, [r2, #8]
 8007f68:	6859      	ldr	r1, [r3, #4]
        conn->current_msg->msg.w.vector_off += len;
 8007f6a:	6114      	str	r4, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8007f6c:	428c      	cmp	r4, r1
 8007f6e:	d003      	beq.n	8007f78 <lwip_netconn_do_writemore+0x118>
    } while (write_more && err == ERR_OK);
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	d1ac      	bne.n	8007ece <lwip_netconn_do_writemore+0x6e>
 8007f74:	4606      	mov	r6, r0
 8007f76:	e026      	b.n	8007fc6 <lwip_netconn_do_writemore+0x166>
          conn->current_msg->msg.w.vector_cnt--;
 8007f78:	8991      	ldrh	r1, [r2, #12]
 8007f7a:	3901      	subs	r1, #1
 8007f7c:	b289      	uxth	r1, r1
 8007f7e:	8191      	strh	r1, [r2, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8007f80:	2900      	cmp	r1, #0
 8007f82:	d0f5      	beq.n	8007f70 <lwip_netconn_do_writemore+0x110>
            conn->current_msg->msg.w.vector++;
 8007f84:	3308      	adds	r3, #8
            conn->current_msg->msg.w.vector_off = 0;
 8007f86:	6110      	str	r0, [r2, #16]
            conn->current_msg->msg.w.vector++;
 8007f88:	6093      	str	r3, [r2, #8]
    } while (write_more && err == ERR_OK);
 8007f8a:	2d00      	cmp	r5, #0
 8007f8c:	d19f      	bne.n	8007ece <lwip_netconn_do_writemore+0x6e>
 8007f8e:	e7f1      	b.n	8007f74 <lwip_netconn_do_writemore+0x114>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007f90:	b2ad      	uxth	r5, r5
 8007f92:	42a5      	cmp	r5, r4
 8007f94:	d00f      	beq.n	8007fb6 <lwip_netconn_do_writemore+0x156>
        write_more = 0;
 8007f96:	2500      	movs	r5, #0
 8007f98:	e7c0      	b.n	8007f1c <lwip_netconn_do_writemore+0xbc>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8007fa0:	4651      	mov	r1, sl
 8007fa2:	4648      	mov	r0, r9
 8007fa4:	f00a faa4 	bl	80124f0 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007fa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007fac:	e7ad      	b.n	8007f0a <lwip_netconn_do_writemore+0xaa>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8007fae:	f047 0702 	orr.w	r7, r7, #2
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	e7a6      	b.n	8007f04 <lwip_netconn_do_writemore+0xa4>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007fb6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007fba:	899b      	ldrh	r3, [r3, #12]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d8aa      	bhi.n	8007f16 <lwip_netconn_do_writemore+0xb6>
 8007fc0:	e7e9      	b.n	8007f96 <lwip_netconn_do_writemore+0x136>
err_mem:
 8007fc2:	f04f 36ff 	mov.w	r6, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8007fc6:	9b00      	ldr	r3, [sp, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d158      	bne.n	800807e <lwip_netconn_do_writemore+0x21e>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007fcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007fd0:	f640 3269 	movw	r2, #2921	; 0xb69
 8007fd4:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8007fd8:	4291      	cmp	r1, r2
 8007fda:	d921      	bls.n	8008020 <lwip_netconn_do_writemore+0x1c0>
 8007fdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007fe0:	2b07      	cmp	r3, #7
 8007fe2:	d81d      	bhi.n	8008020 <lwip_netconn_do_writemore+0x1c0>
    if (err == ERR_OK) {
 8007fe4:	2e00      	cmp	r6, #0
 8007fe6:	d17a      	bne.n	80080de <lwip_netconn_do_writemore+0x27e>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8007fe8:	f8d8 3020 	ldr.w	r3, [r8, #32]
      out_err = tcp_output(conn->pcb.tcp);
 8007fec:	f8d8 0004 	ldr.w	r0, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8007ff0:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d002      	beq.n	8007ffe <lwip_netconn_do_writemore+0x19e>
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d034      	beq.n	8008068 <lwip_netconn_do_writemore+0x208>
      out_err = tcp_output(conn->pcb.tcp);
 8007ffe:	f006 f95d 	bl	800e2bc <tcp_output>
      if (out_err == ERR_RTE) {
 8008002:	1d01      	adds	r1, r0, #4
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008004:	f8d8 3020 	ldr.w	r3, [r8, #32]
      if (out_err == ERR_RTE) {
 8008008:	d195      	bne.n	8007f36 <lwip_netconn_do_writemore+0xd6>
        err = out_err;
 800800a:	4606      	mov	r6, r0
 800800c:	e793      	b.n	8007f36 <lwip_netconn_do_writemore+0xd6>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800800e:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008012:	2b00      	cmp	r3, #0
 8008014:	bf0c      	ite	eq
 8008016:	f06f 0606 	mvneq.w	r6, #6
 800801a:	2600      	movne	r6, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800801c:	4293      	cmp	r3, r2
 800801e:	d334      	bcc.n	800808a <lwip_netconn_do_writemore+0x22a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008020:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0dd      	beq.n	8007fe4 <lwip_netconn_do_writemore+0x184>
 8008028:	2200      	movs	r2, #0
 800802a:	2103      	movs	r1, #3
 800802c:	4640      	mov	r0, r8
 800802e:	4798      	blx	r3
 8008030:	e7d8      	b.n	8007fe4 <lwip_netconn_do_writemore+0x184>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8008032:	f240 6279 	movw	r2, #1657	; 0x679
 8008036:	4b35      	ldr	r3, [pc, #212]	; (800810c <lwip_netconn_do_writemore+0x2ac>)
 8008038:	4937      	ldr	r1, [pc, #220]	; (8008118 <lwip_netconn_do_writemore+0x2b8>)
 800803a:	4836      	ldr	r0, [pc, #216]	; (8008114 <lwip_netconn_do_writemore+0x2b4>)
 800803c:	f00a fa58 	bl	80124f0 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 8008040:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8008044:	e734      	b.n	8007eb0 <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8008046:	f240 6277 	movw	r2, #1655	; 0x677
 800804a:	4b30      	ldr	r3, [pc, #192]	; (800810c <lwip_netconn_do_writemore+0x2ac>)
 800804c:	4933      	ldr	r1, [pc, #204]	; (800811c <lwip_netconn_do_writemore+0x2bc>)
 800804e:	4831      	ldr	r0, [pc, #196]	; (8008114 <lwip_netconn_do_writemore+0x2b4>)
 8008050:	f00a fa4e 	bl	80124f0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8008054:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8008058:	e726      	b.n	8007ea8 <lwip_netconn_do_writemore+0x48>
      sys_sem_signal(op_completed_sem);
 800805a:	300c      	adds	r0, #12
 800805c:	f008 fb66 	bl	801072c <sys_sem_signal>
  return ERR_OK;
 8008060:	4620      	mov	r0, r4
}
 8008062:	b003      	add	sp, #12
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      out_err = tcp_output(conn->pcb.tcp);
 8008068:	f006 f928 	bl	800e2bc <tcp_output>
 800806c:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800806e:	1d30      	adds	r0, r6, #4
 8008070:	f43f af5f 	beq.w	8007f32 <lwip_netconn_do_writemore+0xd2>
    return ERR_MEM;
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800807e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8008082:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8008086:	429a      	cmp	r2, r3
 8008088:	d2a0      	bcs.n	8007fcc <lwip_netconn_do_writemore+0x16c>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800808a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800808e:	b11b      	cbz	r3, 8008098 <lwip_netconn_do_writemore+0x238>
 8008090:	2200      	movs	r2, #0
 8008092:	2103      	movs	r1, #3
 8008094:	4640      	mov	r0, r8
 8008096:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008098:	f898 301c 	ldrb.w	r3, [r8, #28]
 800809c:	f043 0310 	orr.w	r3, r3, #16
 80080a0:	f888 301c 	strb.w	r3, [r8, #28]
 80080a4:	e79e      	b.n	8007fe4 <lwip_netconn_do_writemore+0x184>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80080a6:	4b19      	ldr	r3, [pc, #100]	; (800810c <lwip_netconn_do_writemore+0x2ac>)
 80080a8:	f240 6273 	movw	r2, #1651	; 0x673
 80080ac:	491c      	ldr	r1, [pc, #112]	; (8008120 <lwip_netconn_do_writemore+0x2c0>)
 80080ae:	4819      	ldr	r0, [pc, #100]	; (8008114 <lwip_netconn_do_writemore+0x2b4>)
 80080b0:	f00a fa1e 	bl	80124f0 <iprintf>
 80080b4:	e6dc      	b.n	8007e70 <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80080b6:	4b15      	ldr	r3, [pc, #84]	; (800810c <lwip_netconn_do_writemore+0x2ac>)
 80080b8:	f240 6275 	movw	r2, #1653	; 0x675
 80080bc:	4919      	ldr	r1, [pc, #100]	; (8008124 <lwip_netconn_do_writemore+0x2c4>)
 80080be:	4815      	ldr	r0, [pc, #84]	; (8008114 <lwip_netconn_do_writemore+0x2b4>)
 80080c0:	f00a fa16 	bl	80124f0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80080c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f47f aee6 	bne.w	8007e9a <lwip_netconn_do_writemore+0x3a>
 80080ce:	4b0f      	ldr	r3, [pc, #60]	; (800810c <lwip_netconn_do_writemore+0x2ac>)
 80080d0:	f240 6276 	movw	r2, #1654	; 0x676
 80080d4:	4914      	ldr	r1, [pc, #80]	; (8008128 <lwip_netconn_do_writemore+0x2c8>)
 80080d6:	480f      	ldr	r0, [pc, #60]	; (8008114 <lwip_netconn_do_writemore+0x2b4>)
 80080d8:	f00a fa0a 	bl	80124f0 <iprintf>
 80080dc:	e6dd      	b.n	8007e9a <lwip_netconn_do_writemore+0x3a>
    } else if (err == ERR_MEM) {
 80080de:	1c72      	adds	r2, r6, #1
 80080e0:	f47f af27 	bne.w	8007f32 <lwip_netconn_do_writemore+0xd2>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80080e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80080e8:	f006 f8e8 	bl	800e2bc <tcp_output>
      if (out_err == ERR_RTE) {
 80080ec:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 80080ee:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 80080f0:	f43f af1f 	beq.w	8007f32 <lwip_netconn_do_writemore+0xd2>
      } else if (dontblock) {
 80080f4:	9b00      	ldr	r3, [sp, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0bc      	beq.n	8008074 <lwip_netconn_do_writemore+0x214>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80080fa:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	2a00      	cmp	r2, #0
 8008102:	bf0c      	ite	eq
 8008104:	f06f 0606 	mvneq.w	r6, #6
 8008108:	2600      	movne	r6, #0
 800810a:	e714      	b.n	8007f36 <lwip_netconn_do_writemore+0xd6>
 800810c:	080152d0 	.word	0x080152d0
 8008110:	08015378 	.word	0x08015378
 8008114:	08014fe0 	.word	0x08014fe0
 8008118:	0801540c 	.word	0x0801540c
 800811c:	080153cc 	.word	0x080153cc
 8008120:	08015368 	.word	0x08015368
 8008124:	08015398 	.word	0x08015398
 8008128:	080153b4 	.word	0x080153b4
 800812c:	08015434 	.word	0x08015434

08008130 <lwip_netconn_do_close_internal>:
{
 8008130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008134:	4604      	mov	r4, r0
{
 8008136:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008138:	2800      	cmp	r0, #0
 800813a:	f000 80e5 	beq.w	8008308 <lwip_netconn_do_close_internal+0x1d8>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800813e:	7823      	ldrb	r3, [r4, #0]
 8008140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008144:	2b10      	cmp	r3, #16
 8008146:	d006      	beq.n	8008156 <lwip_netconn_do_close_internal+0x26>
 8008148:	4ba5      	ldr	r3, [pc, #660]	; (80083e0 <lwip_netconn_do_close_internal+0x2b0>)
 800814a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800814e:	49a5      	ldr	r1, [pc, #660]	; (80083e4 <lwip_netconn_do_close_internal+0x2b4>)
 8008150:	48a5      	ldr	r0, [pc, #660]	; (80083e8 <lwip_netconn_do_close_internal+0x2b8>)
 8008152:	f00a f9cd 	bl	80124f0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008156:	7863      	ldrb	r3, [r4, #1]
 8008158:	2b04      	cmp	r3, #4
 800815a:	d006      	beq.n	800816a <lwip_netconn_do_close_internal+0x3a>
 800815c:	4ba0      	ldr	r3, [pc, #640]	; (80083e0 <lwip_netconn_do_close_internal+0x2b0>)
 800815e:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008162:	49a2      	ldr	r1, [pc, #648]	; (80083ec <lwip_netconn_do_close_internal+0x2bc>)
 8008164:	48a0      	ldr	r0, [pc, #640]	; (80083e8 <lwip_netconn_do_close_internal+0x2b8>)
 8008166:	f00a f9c3 	bl	80124f0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800816a:	6863      	ldr	r3, [r4, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80d3 	beq.w	8008318 <lwip_netconn_do_close_internal+0x1e8>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008172:	6a23      	ldr	r3, [r4, #32]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 80da 	beq.w	800832e <lwip_netconn_do_close_internal+0x1fe>
  shut = conn->current_msg->msg.sd.shut;
 800817a:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 800817c:	6866      	ldr	r6, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 800817e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8008180:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8008184:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8008188:	d04f      	beq.n	800822a <lwip_netconn_do_close_internal+0xfa>
  } else if (shut_rx &&
 800818a:	b12f      	cbz	r7, 8008198 <lwip_netconn_do_close_internal+0x68>
             ((tpcb->state == FIN_WAIT_1) ||
 800818c:	7d33      	ldrb	r3, [r6, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800818e:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 8008190:	2a01      	cmp	r2, #1
 8008192:	d94a      	bls.n	800822a <lwip_netconn_do_close_internal+0xfa>
 8008194:	2b08      	cmp	r3, #8
 8008196:	d048      	beq.n	800822a <lwip_netconn_do_close_internal+0xfa>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008198:	f1b8 0f00 	cmp.w	r8, #0
 800819c:	d120      	bne.n	80081e0 <lwip_netconn_do_close_internal+0xb0>
  if (tpcb->state == LISTEN) {
 800819e:	7d33      	ldrb	r3, [r6, #20]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	f000 809d 	beq.w	80082e0 <lwip_netconn_do_close_internal+0x1b0>
    if (shut_rx) {
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	f040 8096 	bne.w	80082d8 <lwip_netconn_do_close_internal+0x1a8>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80081ac:	4642      	mov	r2, r8
 80081ae:	4639      	mov	r1, r7
 80081b0:	4630      	mov	r0, r6
 80081b2:	f003 fb5d 	bl	800b870 <tcp_shutdown>
 80081b6:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 80081b8:	2800      	cmp	r0, #0
 80081ba:	f000 809e 	beq.w	80082fa <lwip_netconn_do_close_internal+0x1ca>
    if (err == ERR_MEM) {
 80081be:	1c42      	adds	r2, r0, #1
 80081c0:	d147      	bne.n	8008252 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80081c2:	6a22      	ldr	r2, [r4, #32]
 80081c4:	7a53      	ldrb	r3, [r2, #9]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 80dd 	bne.w	8008386 <lwip_netconn_do_close_internal+0x256>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80081cc:	6816      	ldr	r6, [r2, #0]
    conn->current_msg->err = err;
 80081ce:	7110      	strb	r0, [r2, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80081d0:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 80081d2:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80081d4:	7063      	strb	r3, [r4, #1]
    if (delayed)
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	d144      	bne.n	8008264 <lwip_netconn_do_close_internal+0x134>
    return ERR_OK;
 80081da:	2000      	movs	r0, #0
}
 80081dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80081e0:	8b71      	ldrh	r1, [r6, #26]
 80081e2:	f011 0910 	ands.w	r9, r1, #16
 80081e6:	d06d      	beq.n	80082c4 <lwip_netconn_do_close_internal+0x194>
    tcp_arg(tpcb, NULL);
 80081e8:	2100      	movs	r1, #0
 80081ea:	4630      	mov	r0, r6
 80081ec:	f002 fc6a 	bl	800aac4 <tcp_arg>
  if (tpcb->state == LISTEN) {
 80081f0:	7d33      	ldrb	r3, [r6, #20]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d021      	beq.n	800823a <lwip_netconn_do_close_internal+0x10a>
    if (shut_rx) {
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	f040 80e8 	bne.w	80083cc <lwip_netconn_do_close_internal+0x29c>
      tcp_sent(tpcb, NULL);
 80081fc:	2100      	movs	r1, #0
 80081fe:	4630      	mov	r0, r6
 8008200:	f002 fc82 	bl	800ab08 <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 8008204:	2200      	movs	r2, #0
 8008206:	4630      	mov	r0, r6
 8008208:	4611      	mov	r1, r2
 800820a:	f002 fcbd 	bl	800ab88 <tcp_poll>
      tcp_err(tpcb, NULL);
 800820e:	2100      	movs	r1, #0
 8008210:	4630      	mov	r0, r6
 8008212:	f002 fc93 	bl	800ab3c <tcp_err>
      err = tcp_close(tpcb);
 8008216:	4630      	mov	r0, r6
 8008218:	f003 fb08 	bl	800b82c <tcp_close>
 800821c:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 800821e:	b9b0      	cbnz	r0, 800824e <lwip_netconn_do_close_internal+0x11e>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008220:	6a23      	ldr	r3, [r4, #32]
 8008222:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 8008224:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008226:	360c      	adds	r6, #12
      if (shut_close) {
 8008228:	e02f      	b.n	800828a <lwip_netconn_do_close_internal+0x15a>
    tcp_arg(tpcb, NULL);
 800822a:	2100      	movs	r1, #0
 800822c:	4630      	mov	r0, r6
 800822e:	f002 fc49 	bl	800aac4 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8008232:	7d33      	ldrb	r3, [r6, #20]
 8008234:	2b01      	cmp	r3, #1
 8008236:	f040 8083 	bne.w	8008340 <lwip_netconn_do_close_internal+0x210>
    tcp_accept(tpcb, NULL);
 800823a:	2100      	movs	r1, #0
 800823c:	4630      	mov	r0, r6
 800823e:	f002 fc97 	bl	800ab70 <tcp_accept>
      err = tcp_close(tpcb);
 8008242:	4630      	mov	r0, r6
 8008244:	f003 faf2 	bl	800b82c <tcp_close>
 8008248:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 800824a:	2800      	cmp	r0, #0
 800824c:	d0e8      	beq.n	8008220 <lwip_netconn_do_close_internal+0xf0>
    if (err == ERR_MEM) {
 800824e:	3001      	adds	r0, #1
 8008250:	d00c      	beq.n	800826c <lwip_netconn_do_close_internal+0x13c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008252:	6a22      	ldr	r2, [r4, #32]
 8008254:	6816      	ldr	r6, [r2, #0]
    conn->current_msg->err = err;
 8008256:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 8008258:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800825a:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 800825c:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800825e:	7063      	strb	r3, [r4, #1]
    if (delayed)
 8008260:	2d00      	cmp	r5, #0
 8008262:	d0ba      	beq.n	80081da <lwip_netconn_do_close_internal+0xaa>
      sys_sem_signal(op_completed_sem);
 8008264:	4630      	mov	r0, r6
 8008266:	f008 fa61 	bl	801072c <sys_sem_signal>
 800826a:	e7b6      	b.n	80081da <lwip_netconn_do_close_internal+0xaa>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800826c:	6a23      	ldr	r3, [r4, #32]
 800826e:	f893 9009 	ldrb.w	r9, [r3, #9]
 8008272:	f1b9 0f00 	cmp.w	r9, #0
 8008276:	f040 8086 	bne.w	8008386 <lwip_netconn_do_close_internal+0x256>
          tcp_abort(tpcb);
 800827a:	4630      	mov	r0, r6
 800827c:	f003 f8f0 	bl	800b460 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008280:	6a23      	ldr	r3, [r4, #32]
 8008282:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 8008284:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008288:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 800828a:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800828c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    conn->current_msg = NULL;
 800828e:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 8008290:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 8008292:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008294:	2b00      	cmp	r3, #0
 8008296:	d060      	beq.n	800835a <lwip_netconn_do_close_internal+0x22a>
 8008298:	2104      	movs	r1, #4
 800829a:	4620      	mov	r0, r4
 800829c:	4798      	blx	r3
      if (shut_rx) {
 800829e:	b137      	cbz	r7, 80082ae <lwip_netconn_do_close_internal+0x17e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80082a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d097      	beq.n	80081d6 <lwip_netconn_do_close_internal+0xa6>
 80082a6:	2200      	movs	r2, #0
 80082a8:	4620      	mov	r0, r4
 80082aa:	4611      	mov	r1, r2
 80082ac:	4798      	blx	r3
      if (shut_tx) {
 80082ae:	f1b8 0f00 	cmp.w	r8, #0
 80082b2:	d090      	beq.n	80081d6 <lwip_netconn_do_close_internal+0xa6>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80082b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d08d      	beq.n	80081d6 <lwip_netconn_do_close_internal+0xa6>
 80082ba:	2200      	movs	r2, #0
 80082bc:	4620      	mov	r0, r4
 80082be:	2102      	movs	r1, #2
 80082c0:	4798      	blx	r3
 80082c2:	e788      	b.n	80081d6 <lwip_netconn_do_close_internal+0xa6>
  if (tpcb->state == LISTEN) {
 80082c4:	7d33      	ldrb	r3, [r6, #20]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d058      	beq.n	800837c <lwip_netconn_do_close_internal+0x24c>
    if (shut_rx) {
 80082ca:	2f00      	cmp	r7, #0
 80082cc:	d149      	bne.n	8008362 <lwip_netconn_do_close_internal+0x232>
      tcp_sent(tpcb, NULL);
 80082ce:	4639      	mov	r1, r7
 80082d0:	4630      	mov	r0, r6
 80082d2:	f002 fc19 	bl	800ab08 <tcp_sent>
    if (shut_close) {
 80082d6:	e769      	b.n	80081ac <lwip_netconn_do_close_internal+0x7c>
      tcp_recv(tpcb, NULL);
 80082d8:	4641      	mov	r1, r8
 80082da:	4630      	mov	r0, r6
 80082dc:	f002 fbfa 	bl	800aad4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80082e0:	4641      	mov	r1, r8
 80082e2:	4630      	mov	r0, r6
 80082e4:	f002 fc44 	bl	800ab70 <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80082e8:	4642      	mov	r2, r8
 80082ea:	4639      	mov	r1, r7
 80082ec:	4630      	mov	r0, r6
 80082ee:	f003 fabf 	bl	800b870 <tcp_shutdown>
 80082f2:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 80082f4:	2800      	cmp	r0, #0
 80082f6:	f47f af62 	bne.w	80081be <lwip_netconn_do_close_internal+0x8e>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80082fa:	6a23      	ldr	r3, [r4, #32]
 80082fc:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 80082fe:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008300:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 8008302:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 8008304:	7060      	strb	r0, [r4, #1]
 8008306:	e7ca      	b.n	800829e <lwip_netconn_do_close_internal+0x16e>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008308:	4b35      	ldr	r3, [pc, #212]	; (80083e0 <lwip_netconn_do_close_internal+0x2b0>)
 800830a:	f240 32a2 	movw	r2, #930	; 0x3a2
 800830e:	4938      	ldr	r1, [pc, #224]	; (80083f0 <lwip_netconn_do_close_internal+0x2c0>)
 8008310:	4835      	ldr	r0, [pc, #212]	; (80083e8 <lwip_netconn_do_close_internal+0x2b8>)
 8008312:	f00a f8ed 	bl	80124f0 <iprintf>
 8008316:	e712      	b.n	800813e <lwip_netconn_do_close_internal+0xe>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008318:	4b31      	ldr	r3, [pc, #196]	; (80083e0 <lwip_netconn_do_close_internal+0x2b0>)
 800831a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800831e:	4935      	ldr	r1, [pc, #212]	; (80083f4 <lwip_netconn_do_close_internal+0x2c4>)
 8008320:	4831      	ldr	r0, [pc, #196]	; (80083e8 <lwip_netconn_do_close_internal+0x2b8>)
 8008322:	f00a f8e5 	bl	80124f0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008326:	6a23      	ldr	r3, [r4, #32]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f47f af26 	bne.w	800817a <lwip_netconn_do_close_internal+0x4a>
 800832e:	4b2c      	ldr	r3, [pc, #176]	; (80083e0 <lwip_netconn_do_close_internal+0x2b0>)
 8008330:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008334:	4930      	ldr	r1, [pc, #192]	; (80083f8 <lwip_netconn_do_close_internal+0x2c8>)
 8008336:	482c      	ldr	r0, [pc, #176]	; (80083e8 <lwip_netconn_do_close_internal+0x2b8>)
 8008338:	f00a f8da 	bl	80124f0 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800833c:	6a23      	ldr	r3, [r4, #32]
 800833e:	e71c      	b.n	800817a <lwip_netconn_do_close_internal+0x4a>
      tcp_recv(tpcb, NULL);
 8008340:	2100      	movs	r1, #0
 8008342:	4630      	mov	r0, r6
 8008344:	f002 fbc6 	bl	800aad4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008348:	2100      	movs	r1, #0
 800834a:	4630      	mov	r0, r6
 800834c:	f002 fc10 	bl	800ab70 <tcp_accept>
    if (shut_tx) {
 8008350:	f1b8 0f00 	cmp.w	r8, #0
 8008354:	f47f af52 	bne.w	80081fc <lwip_netconn_do_close_internal+0xcc>
 8008358:	e754      	b.n	8008204 <lwip_netconn_do_close_internal+0xd4>
      if (shut_rx) {
 800835a:	2f00      	cmp	r7, #0
 800835c:	f47f af3b 	bne.w	80081d6 <lwip_netconn_do_close_internal+0xa6>
 8008360:	e7a5      	b.n	80082ae <lwip_netconn_do_close_internal+0x17e>
      tcp_recv(tpcb, NULL);
 8008362:	4649      	mov	r1, r9
 8008364:	4630      	mov	r0, r6
 8008366:	f002 fbb5 	bl	800aad4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800836a:	4649      	mov	r1, r9
 800836c:	4630      	mov	r0, r6
 800836e:	f002 fbff 	bl	800ab70 <tcp_accept>
      tcp_sent(tpcb, NULL);
 8008372:	4649      	mov	r1, r9
 8008374:	4630      	mov	r0, r6
 8008376:	f002 fbc7 	bl	800ab08 <tcp_sent>
    if (shut_close) {
 800837a:	e717      	b.n	80081ac <lwip_netconn_do_close_internal+0x7c>
    tcp_accept(tpcb, NULL);
 800837c:	4649      	mov	r1, r9
 800837e:	4630      	mov	r0, r6
 8008380:	f002 fbf6 	bl	800ab70 <tcp_accept>
  if (shut_close) {
 8008384:	e712      	b.n	80081ac <lwip_netconn_do_close_internal+0x7c>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008386:	7d33      	ldrb	r3, [r6, #20]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d012      	beq.n	80083b2 <lwip_netconn_do_close_internal+0x282>
    if (shut_tx) {
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	d117      	bne.n	80083c2 <lwip_netconn_do_close_internal+0x292>
    tcp_poll(tpcb, poll_tcp, 1);
 8008392:	2201      	movs	r2, #1
 8008394:	4919      	ldr	r1, [pc, #100]	; (80083fc <lwip_netconn_do_close_internal+0x2cc>)
 8008396:	4630      	mov	r0, r6
 8008398:	f002 fbf6 	bl	800ab88 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800839c:	4918      	ldr	r1, [pc, #96]	; (8008400 <lwip_netconn_do_close_internal+0x2d0>)
 800839e:	4630      	mov	r0, r6
 80083a0:	f002 fbcc 	bl	800ab3c <tcp_err>
    tcp_arg(tpcb, conn);
 80083a4:	4630      	mov	r0, r6
 80083a6:	4621      	mov	r1, r4
 80083a8:	f002 fb8c 	bl	800aac4 <tcp_arg>
  return err;
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e714      	b.n	80081dc <lwip_netconn_do_close_internal+0xac>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <lwip_netconn_do_close_internal+0x2b0>)
 80083b4:	f240 4241 	movw	r2, #1089	; 0x441
 80083b8:	4912      	ldr	r1, [pc, #72]	; (8008404 <lwip_netconn_do_close_internal+0x2d4>)
 80083ba:	480b      	ldr	r0, [pc, #44]	; (80083e8 <lwip_netconn_do_close_internal+0x2b8>)
 80083bc:	f00a f898 	bl	80124f0 <iprintf>
 80083c0:	e7e4      	b.n	800838c <lwip_netconn_do_close_internal+0x25c>
      tcp_sent(tpcb, sent_tcp);
 80083c2:	4911      	ldr	r1, [pc, #68]	; (8008408 <lwip_netconn_do_close_internal+0x2d8>)
 80083c4:	4630      	mov	r0, r6
 80083c6:	f002 fb9f 	bl	800ab08 <tcp_sent>
 80083ca:	e7e2      	b.n	8008392 <lwip_netconn_do_close_internal+0x262>
      tcp_recv(tpcb, NULL);
 80083cc:	4630      	mov	r0, r6
 80083ce:	2100      	movs	r1, #0
 80083d0:	f002 fb80 	bl	800aad4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80083d4:	2100      	movs	r1, #0
 80083d6:	4630      	mov	r0, r6
 80083d8:	f002 fbca 	bl	800ab70 <tcp_accept>
    if (shut_tx) {
 80083dc:	e70e      	b.n	80081fc <lwip_netconn_do_close_internal+0xcc>
 80083de:	bf00      	nop
 80083e0:	080152d0 	.word	0x080152d0
 80083e4:	08015460 	.word	0x08015460
 80083e8:	08014fe0 	.word	0x08014fe0
 80083ec:	08015480 	.word	0x08015480
 80083f0:	08015200 	.word	0x08015200
 80083f4:	080154a4 	.word	0x080154a4
 80083f8:	08015398 	.word	0x08015398
 80083fc:	0800840d 	.word	0x0800840d
 8008400:	080085f9 	.word	0x080085f9
 8008404:	080154b8 	.word	0x080154b8
 8008408:	0800848d 	.word	0x0800848d

0800840c <poll_tcp>:
{
 800840c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800840e:	4604      	mov	r4, r0
 8008410:	b368      	cbz	r0, 800846e <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 8008412:	7861      	ldrb	r1, [r4, #1]
 8008414:	2901      	cmp	r1, #1
 8008416:	d026      	beq.n	8008466 <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 8008418:	2904      	cmp	r1, #4
 800841a:	d019      	beq.n	8008450 <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800841c:	7f23      	ldrb	r3, [r4, #28]
 800841e:	06da      	lsls	r2, r3, #27
 8008420:	d514      	bpl.n	800844c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008422:	6862      	ldr	r2, [r4, #4]
 8008424:	b192      	cbz	r2, 800844c <poll_tcp+0x40>
 8008426:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 800842a:	f640 3169 	movw	r1, #2921	; 0xb69
 800842e:	4288      	cmp	r0, r1
 8008430:	d90c      	bls.n	800844c <poll_tcp+0x40>
 8008432:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8008436:	2a07      	cmp	r2, #7
 8008438:	d808      	bhi.n	800844c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800843a:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800843e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008440:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008442:	b11d      	cbz	r5, 800844c <poll_tcp+0x40>
 8008444:	2200      	movs	r2, #0
 8008446:	2102      	movs	r1, #2
 8008448:	4620      	mov	r0, r4
 800844a:	47a8      	blx	r5
}
 800844c:	2000      	movs	r0, #0
 800844e:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008450:	6a23      	ldr	r3, [r4, #32]
 8008452:	b11b      	cbz	r3, 800845c <poll_tcp+0x50>
 8008454:	7a5a      	ldrb	r2, [r3, #9]
 8008456:	b10a      	cbz	r2, 800845c <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 8008458:	3a01      	subs	r2, #1
 800845a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800845c:	2101      	movs	r1, #1
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff fe66 	bl	8008130 <lwip_netconn_do_close_internal>
 8008464:	e7da      	b.n	800841c <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008466:	4620      	mov	r0, r4
 8008468:	f7ff fcfa 	bl	8007e60 <lwip_netconn_do_writemore>
 800846c:	e7d6      	b.n	800841c <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800846e:	4b04      	ldr	r3, [pc, #16]	; (8008480 <poll_tcp+0x74>)
 8008470:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008474:	4903      	ldr	r1, [pc, #12]	; (8008484 <poll_tcp+0x78>)
 8008476:	4804      	ldr	r0, [pc, #16]	; (8008488 <poll_tcp+0x7c>)
 8008478:	f00a f83a 	bl	80124f0 <iprintf>
 800847c:	e7c9      	b.n	8008412 <poll_tcp+0x6>
 800847e:	bf00      	nop
 8008480:	080152d0 	.word	0x080152d0
 8008484:	08015368 	.word	0x08015368
 8008488:	08014fe0 	.word	0x08014fe0

0800848c <sent_tcp>:
{
 800848c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800848e:	b328      	cbz	r0, 80084dc <sent_tcp+0x50>
    if (conn->state == NETCONN_WRITE) {
 8008490:	7841      	ldrb	r1, [r0, #1]
 8008492:	4604      	mov	r4, r0
 8008494:	4615      	mov	r5, r2
 8008496:	2901      	cmp	r1, #1
 8008498:	d029      	beq.n	80084ee <sent_tcp+0x62>
    } else if (conn->state == NETCONN_CLOSE) {
 800849a:	2904      	cmp	r1, #4
 800849c:	d017      	beq.n	80084ce <sent_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800849e:	6863      	ldr	r3, [r4, #4]
 80084a0:	b19b      	cbz	r3, 80084ca <sent_tcp+0x3e>
 80084a2:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 80084a6:	f640 3269 	movw	r2, #2921	; 0xb69
 80084aa:	4291      	cmp	r1, r2
 80084ac:	d90d      	bls.n	80084ca <sent_tcp+0x3e>
 80084ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80084b2:	2b07      	cmp	r3, #7
 80084b4:	d809      	bhi.n	80084ca <sent_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80084b6:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80084b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80084c0:	b11e      	cbz	r6, 80084ca <sent_tcp+0x3e>
 80084c2:	462a      	mov	r2, r5
 80084c4:	2102      	movs	r1, #2
 80084c6:	4620      	mov	r0, r4
 80084c8:	47b0      	blx	r6
}
 80084ca:	2000      	movs	r0, #0
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80084ce:	2101      	movs	r1, #1
 80084d0:	f7ff fe2e 	bl	8008130 <lwip_netconn_do_close_internal>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80084d4:	6863      	ldr	r3, [r4, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e3      	bne.n	80084a2 <sent_tcp+0x16>
 80084da:	e7f6      	b.n	80084ca <sent_tcp+0x3e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80084dc:	4b07      	ldr	r3, [pc, #28]	; (80084fc <sent_tcp+0x70>)
 80084de:	f240 1293 	movw	r2, #403	; 0x193
 80084e2:	4907      	ldr	r1, [pc, #28]	; (8008500 <sent_tcp+0x74>)
 80084e4:	4807      	ldr	r0, [pc, #28]	; (8008504 <sent_tcp+0x78>)
 80084e6:	f00a f803 	bl	80124f0 <iprintf>
}
 80084ea:	2000      	movs	r0, #0
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80084ee:	f7ff fcb7 	bl	8007e60 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80084f2:	6863      	ldr	r3, [r4, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1d4      	bne.n	80084a2 <sent_tcp+0x16>
 80084f8:	e7e7      	b.n	80084ca <sent_tcp+0x3e>
 80084fa:	bf00      	nop
 80084fc:	080152d0 	.word	0x080152d0
 8008500:	08015368 	.word	0x08015368
 8008504:	08014fe0 	.word	0x08014fe0

08008508 <recv_tcp>:
{
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	4605      	mov	r5, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800850e:	460f      	mov	r7, r1
{
 8008510:	4616      	mov	r6, r2
 8008512:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008514:	2900      	cmp	r1, #0
 8008516:	d038      	beq.n	800858a <recv_tcp+0x82>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008518:	2d00      	cmp	r5, #0
 800851a:	d03f      	beq.n	800859c <recv_tcp+0x94>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800851c:	2c00      	cmp	r4, #0
 800851e:	d14f      	bne.n	80085c0 <recv_tcp+0xb8>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008520:	686b      	ldr	r3, [r5, #4]
 8008522:	42bb      	cmp	r3, r7
 8008524:	d006      	beq.n	8008534 <recv_tcp+0x2c>
 8008526:	4b2d      	ldr	r3, [pc, #180]	; (80085dc <recv_tcp+0xd4>)
 8008528:	f240 1235 	movw	r2, #309	; 0x135
 800852c:	492c      	ldr	r1, [pc, #176]	; (80085e0 <recv_tcp+0xd8>)
 800852e:	482d      	ldr	r0, [pc, #180]	; (80085e4 <recv_tcp+0xdc>)
 8008530:	f009 ffde 	bl	80124f0 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008534:	f105 0810 	add.w	r8, r5, #16
 8008538:	4640      	mov	r0, r8
 800853a:	f008 f8bb 	bl	80106b4 <sys_mbox_valid>
 800853e:	4604      	mov	r4, r0
 8008540:	b188      	cbz	r0, 8008566 <recv_tcp+0x5e>
  if (p != NULL) {
 8008542:	b1ae      	cbz	r6, 8008570 <recv_tcp+0x68>
    len = p->tot_len;
 8008544:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008546:	4631      	mov	r1, r6
 8008548:	4640      	mov	r0, r8
 800854a:	f008 f877 	bl	801063c <sys_mbox_trypost>
 800854e:	4604      	mov	r4, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	d13d      	bne.n	80085d0 <recv_tcp+0xc8>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008554:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008556:	b13b      	cbz	r3, 8008568 <recv_tcp+0x60>
 8008558:	4601      	mov	r1, r0
 800855a:	463a      	mov	r2, r7
 800855c:	4628      	mov	r0, r5
 800855e:	4798      	blx	r3
}
 8008560:	4620      	mov	r0, r4
 8008562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (p != NULL) {
 8008566:	b936      	cbnz	r6, 8008576 <recv_tcp+0x6e>
    return ERR_OK;
 8008568:	2400      	movs	r4, #0
}
 800856a:	4620      	mov	r0, r4
 800856c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008570:	4e1d      	ldr	r6, [pc, #116]	; (80085e8 <recv_tcp+0xe0>)
    len = 0;
 8008572:	2700      	movs	r7, #0
 8008574:	e7e7      	b.n	8008546 <recv_tcp+0x3e>
      tcp_recved(pcb, p->tot_len);
 8008576:	8931      	ldrh	r1, [r6, #8]
 8008578:	4638      	mov	r0, r7
 800857a:	f002 fa1f 	bl	800a9bc <tcp_recved>
      pbuf_free(p);
 800857e:	4630      	mov	r0, r6
 8008580:	f001 fdf2 	bl	800a168 <pbuf_free>
}
 8008584:	4620      	mov	r0, r4
 8008586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800858a:	4b14      	ldr	r3, [pc, #80]	; (80085dc <recv_tcp+0xd4>)
 800858c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008590:	4916      	ldr	r1, [pc, #88]	; (80085ec <recv_tcp+0xe4>)
 8008592:	4814      	ldr	r0, [pc, #80]	; (80085e4 <recv_tcp+0xdc>)
 8008594:	f009 ffac 	bl	80124f0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008598:	2d00      	cmp	r5, #0
 800859a:	d1bf      	bne.n	800851c <recv_tcp+0x14>
 800859c:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <recv_tcp+0xd4>)
 800859e:	f240 122d 	movw	r2, #301	; 0x12d
 80085a2:	4913      	ldr	r1, [pc, #76]	; (80085f0 <recv_tcp+0xe8>)
 80085a4:	480f      	ldr	r0, [pc, #60]	; (80085e4 <recv_tcp+0xdc>)
 80085a6:	f009 ffa3 	bl	80124f0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80085aa:	b1a4      	cbz	r4, 80085d6 <recv_tcp+0xce>
 80085ac:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <recv_tcp+0xd4>)
 80085ae:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80085b2:	4910      	ldr	r1, [pc, #64]	; (80085f4 <recv_tcp+0xec>)
    return ERR_VAL;
 80085b4:	f06f 0405 	mvn.w	r4, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80085b8:	480a      	ldr	r0, [pc, #40]	; (80085e4 <recv_tcp+0xdc>)
 80085ba:	f009 ff99 	bl	80124f0 <iprintf>
  if (conn == NULL) {
 80085be:	e7cf      	b.n	8008560 <recv_tcp+0x58>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80085c0:	4b06      	ldr	r3, [pc, #24]	; (80085dc <recv_tcp+0xd4>)
 80085c2:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80085c6:	490b      	ldr	r1, [pc, #44]	; (80085f4 <recv_tcp+0xec>)
 80085c8:	4806      	ldr	r0, [pc, #24]	; (80085e4 <recv_tcp+0xdc>)
 80085ca:	f009 ff91 	bl	80124f0 <iprintf>
  if (conn == NULL) {
 80085ce:	e7a7      	b.n	8008520 <recv_tcp+0x18>
    return ERR_MEM;
 80085d0:	f04f 34ff 	mov.w	r4, #4294967295
 80085d4:	e7c4      	b.n	8008560 <recv_tcp+0x58>
    return ERR_VAL;
 80085d6:	f06f 0405 	mvn.w	r4, #5
 80085da:	e7c1      	b.n	8008560 <recv_tcp+0x58>
 80085dc:	080152d0 	.word	0x080152d0
 80085e0:	08015520 	.word	0x08015520
 80085e4:	08014fe0 	.word	0x08014fe0
 80085e8:	080156fd 	.word	0x080156fd
 80085ec:	080154dc 	.word	0x080154dc
 80085f0:	08015500 	.word	0x08015500
 80085f4:	08015540 	.word	0x08015540

080085f8 <err_tcp>:
{
 80085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80085fc:	4604      	mov	r4, r0
{
 80085fe:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008600:	2800      	cmp	r0, #0
 8008602:	d07a      	beq.n	80086fa <err_tcp+0x102>
  SYS_ARCH_PROTECT(lev);
 8008604:	f008 f8da 	bl	80107bc <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008608:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 800860a:	2600      	movs	r6, #0
  old_state = conn->state;
 800860c:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800860e:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8008612:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8008614:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008616:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 8008618:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800861a:	f008 f8db 	bl	80107d4 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008620:	b17b      	cbz	r3, 8008642 <err_tcp+0x4a>
 8008622:	4632      	mov	r2, r6
 8008624:	2104      	movs	r1, #4
 8008626:	4620      	mov	r0, r4
 8008628:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800862a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800862c:	b14b      	cbz	r3, 8008642 <err_tcp+0x4a>
 800862e:	4632      	mov	r2, r6
 8008630:	4631      	mov	r1, r6
 8008632:	4620      	mov	r0, r4
 8008634:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008638:	b11b      	cbz	r3, 8008642 <err_tcp+0x4a>
 800863a:	4632      	mov	r2, r6
 800863c:	2102      	movs	r1, #2
 800863e:	4620      	mov	r0, r4
 8008640:	4798      	blx	r3
  switch (err) {
 8008642:	f105 030f 	add.w	r3, r5, #15
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d834      	bhi.n	80086b6 <err_tcp+0xbe>
 800864c:	4a3c      	ldr	r2, [pc, #240]	; (8008740 <err_tcp+0x148>)
 800864e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008652:	f104 0610 	add.w	r6, r4, #16
 8008656:	4630      	mov	r0, r6
 8008658:	f008 f82c 	bl	80106b4 <sys_mbox_valid>
 800865c:	2800      	cmp	r0, #0
 800865e:	d133      	bne.n	80086c8 <err_tcp+0xd0>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008660:	f104 0614 	add.w	r6, r4, #20
 8008664:	4630      	mov	r0, r6
 8008666:	f008 f825 	bl	80106b4 <sys_mbox_valid>
 800866a:	2800      	cmp	r0, #0
 800866c:	d137      	bne.n	80086de <err_tcp+0xe6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800866e:	1efb      	subs	r3, r7, #3
 8008670:	2b01      	cmp	r3, #1
 8008672:	d901      	bls.n	8008678 <err_tcp+0x80>
 8008674:	2f01      	cmp	r7, #1
 8008676:	d11a      	bne.n	80086ae <err_tcp+0xb6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008678:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800867a:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800867e:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008680:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8008682:	d416      	bmi.n	80086b2 <err_tcp+0xba>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008684:	6a23      	ldr	r3, [r4, #32]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d050      	beq.n	800872c <err_tcp+0x134>
      if (old_state == NETCONN_CLOSE) {
 800868a:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800868c:	681e      	ldr	r6, [r3, #0]
      if (old_state == NETCONN_CLOSE) {
 800868e:	bf08      	it	eq
 8008690:	2500      	moveq	r5, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008692:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 8008694:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008696:	4630      	mov	r0, r6
 8008698:	f008 f850 	bl	801073c <sys_sem_valid>
 800869c:	2800      	cmp	r0, #0
 800869e:	d03d      	beq.n	800871c <err_tcp+0x124>
      conn->current_msg = NULL;
 80086a0:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 80086a2:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 80086a4:	6223      	str	r3, [r4, #32]
}
 80086a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 80086aa:	f008 b83f 	b.w	801072c <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80086ae:	6a23      	ldr	r3, [r4, #32]
 80086b0:	b9d3      	cbnz	r3, 80086e8 <err_tcp+0xf0>
}
 80086b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80086b6:	bb45      	cbnz	r5, 800870a <err_tcp+0x112>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80086b8:	f104 0610 	add.w	r6, r4, #16
      return NULL;
 80086bc:	46a8      	mov	r8, r5
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80086be:	4630      	mov	r0, r6
 80086c0:	f007 fff8 	bl	80106b4 <sys_mbox_valid>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d0cb      	beq.n	8008660 <err_tcp+0x68>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80086c8:	4630      	mov	r0, r6
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80086ca:	f104 0614 	add.w	r6, r4, #20
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80086ce:	4641      	mov	r1, r8
 80086d0:	f007 ffb4 	bl	801063c <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80086d4:	4630      	mov	r0, r6
 80086d6:	f007 ffed 	bl	80106b4 <sys_mbox_valid>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0c7      	beq.n	800866e <err_tcp+0x76>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80086de:	4641      	mov	r1, r8
 80086e0:	4630      	mov	r0, r6
 80086e2:	f007 ffab 	bl	801063c <sys_mbox_trypost>
 80086e6:	e7c2      	b.n	800866e <err_tcp+0x76>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80086e8:	4b16      	ldr	r3, [pc, #88]	; (8008744 <err_tcp+0x14c>)
 80086ea:	f240 12f7 	movw	r2, #503	; 0x1f7
 80086ee:	4916      	ldr	r1, [pc, #88]	; (8008748 <err_tcp+0x150>)
 80086f0:	4816      	ldr	r0, [pc, #88]	; (800874c <err_tcp+0x154>)
}
 80086f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80086f6:	f009 befb 	b.w	80124f0 <iprintf>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <err_tcp+0x14c>)
 80086fc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008700:	4913      	ldr	r1, [pc, #76]	; (8008750 <err_tcp+0x158>)
 8008702:	4812      	ldr	r0, [pc, #72]	; (800874c <err_tcp+0x154>)
 8008704:	f009 fef4 	bl	80124f0 <iprintf>
 8008708:	e77c      	b.n	8008604 <err_tcp+0xc>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <err_tcp+0x14c>)
 800870c:	227d      	movs	r2, #125	; 0x7d
 800870e:	4911      	ldr	r1, [pc, #68]	; (8008754 <err_tcp+0x15c>)
 8008710:	f04f 0800 	mov.w	r8, #0
 8008714:	480d      	ldr	r0, [pc, #52]	; (800874c <err_tcp+0x154>)
 8008716:	f009 feeb 	bl	80124f0 <iprintf>
 800871a:	e79a      	b.n	8008652 <err_tcp+0x5a>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <err_tcp+0x14c>)
 800871e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008722:	490d      	ldr	r1, [pc, #52]	; (8008758 <err_tcp+0x160>)
 8008724:	4809      	ldr	r0, [pc, #36]	; (800874c <err_tcp+0x154>)
 8008726:	f009 fee3 	bl	80124f0 <iprintf>
 800872a:	e7b9      	b.n	80086a0 <err_tcp+0xa8>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <err_tcp+0x14c>)
 800872e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008732:	490a      	ldr	r1, [pc, #40]	; (800875c <err_tcp+0x164>)
 8008734:	4805      	ldr	r0, [pc, #20]	; (800874c <err_tcp+0x154>)
 8008736:	f009 fedb 	bl	80124f0 <iprintf>
        conn->current_msg->err = ERR_OK;
 800873a:	6a23      	ldr	r3, [r4, #32]
 800873c:	e7a5      	b.n	800868a <err_tcp+0x92>
 800873e:	bf00      	nop
 8008740:	080156f0 	.word	0x080156f0
 8008744:	080152d0 	.word	0x080152d0
 8008748:	08015584 	.word	0x08015584
 800874c:	08014fe0 	.word	0x08014fe0
 8008750:	08015368 	.word	0x08015368
 8008754:	08015558 	.word	0x08015558
 8008758:	08015568 	.word	0x08015568
 800875c:	08015398 	.word	0x08015398

08008760 <lwip_netconn_is_err_msg>:
{
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8008764:	460d      	mov	r5, r1
 8008766:	b171      	cbz	r1, 8008786 <lwip_netconn_is_err_msg+0x26>
  if (msg == &netconn_aborted) {
 8008768:	4b0e      	ldr	r3, [pc, #56]	; (80087a4 <lwip_netconn_is_err_msg+0x44>)
 800876a:	429c      	cmp	r4, r3
 800876c:	d007      	beq.n	800877e <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 800876e:	4b0e      	ldr	r3, [pc, #56]	; (80087a8 <lwip_netconn_is_err_msg+0x48>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d00f      	beq.n	8008794 <lwip_netconn_is_err_msg+0x34>
  } else if (msg == &netconn_closed) {
 8008774:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <lwip_netconn_is_err_msg+0x4c>)
 8008776:	429c      	cmp	r4, r3
 8008778:	d010      	beq.n	800879c <lwip_netconn_is_err_msg+0x3c>
  return 0;
 800877a:	2000      	movs	r0, #0
}
 800877c:	bd38      	pop	{r3, r4, r5, pc}
    *err = ERR_ABRT;
 800877e:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8008780:	2001      	movs	r0, #1
    *err = ERR_ABRT;
 8008782:	702b      	strb	r3, [r5, #0]
}
 8008784:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8008786:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <lwip_netconn_is_err_msg+0x50>)
 8008788:	2285      	movs	r2, #133	; 0x85
 800878a:	490a      	ldr	r1, [pc, #40]	; (80087b4 <lwip_netconn_is_err_msg+0x54>)
 800878c:	480a      	ldr	r0, [pc, #40]	; (80087b8 <lwip_netconn_is_err_msg+0x58>)
 800878e:	f009 feaf 	bl	80124f0 <iprintf>
 8008792:	e7e9      	b.n	8008768 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_RST;
 8008794:	23f2      	movs	r3, #242	; 0xf2
    return 1;
 8008796:	2001      	movs	r0, #1
    *err = ERR_RST;
 8008798:	702b      	strb	r3, [r5, #0]
}
 800879a:	bd38      	pop	{r3, r4, r5, pc}
    *err = ERR_CLSD;
 800879c:	23f1      	movs	r3, #241	; 0xf1
    return 1;
 800879e:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 80087a0:	702b      	strb	r3, [r5, #0]
}
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	080156fc 	.word	0x080156fc
 80087a8:	080156fe 	.word	0x080156fe
 80087ac:	080156fd 	.word	0x080156fd
 80087b0:	080152d0 	.word	0x080152d0
 80087b4:	080155a0 	.word	0x080155a0
 80087b8:	08014fe0 	.word	0x08014fe0

080087bc <lwip_netconn_do_newconn>:
{
 80087bc:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 80087be:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 80087c0:	6805      	ldr	r5, [r0, #0]
{
 80087c2:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80087c4:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80087c6:	6868      	ldr	r0, [r5, #4]
 80087c8:	b100      	cbz	r0, 80087cc <lwip_netconn_do_newconn+0x10>
}
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80087cc:	782b      	ldrb	r3, [r5, #0]
 80087ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d016      	beq.n	8008804 <lwip_netconn_do_newconn+0x48>
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d11f      	bne.n	800881a <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80087da:	f006 faf3 	bl	800edc4 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 80087de:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80087e0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 80087e2:	6850      	ldr	r0, [r2, #4]
 80087e4:	b158      	cbz	r0, 80087fe <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80087e6:	7813      	ldrb	r3, [r2, #0]
 80087e8:	2b22      	cmp	r3, #34	; 0x22
 80087ea:	d101      	bne.n	80087f0 <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80087ec:	2301      	movs	r3, #1
 80087ee:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80087f0:	490b      	ldr	r1, [pc, #44]	; (8008820 <lwip_netconn_do_newconn+0x64>)
 80087f2:	f006 fa9b 	bl	800ed2c <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 80087fe:	23ff      	movs	r3, #255	; 0xff
 8008800:	7123      	strb	r3, [r4, #4]
}
 8008802:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008804:	f002 ff3e 	bl	800b684 <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 8008808:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800880a:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	2a00      	cmp	r2, #0
 8008810:	d0f5      	beq.n	80087fe <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fb00 	bl	8007e18 <setup_tcp>
 8008818:	e7ed      	b.n	80087f6 <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 800881a:	23fa      	movs	r3, #250	; 0xfa
 800881c:	7123      	strb	r3, [r4, #4]
}
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	08007d5d 	.word	0x08007d5d

08008824 <netconn_alloc>:
{
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008828:	2007      	movs	r0, #7
{
 800882a:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800882c:	f001 f890 	bl	8009950 <memp_malloc>
  if (conn == NULL) {
 8008830:	4604      	mov	r4, r0
 8008832:	b310      	cbz	r0, 800887a <netconn_alloc+0x56>
  conn->pending_err = ERR_OK;
 8008834:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 8008838:	2200      	movs	r2, #0
  conn->type = t;
 800883a:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 800883c:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 800883e:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 8008840:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8008842:	d001      	beq.n	8008848 <netconn_alloc+0x24>
 8008844:	2b20      	cmp	r3, #32
 8008846:	d11a      	bne.n	800887e <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008848:	f104 0710 	add.w	r7, r4, #16
 800884c:	2106      	movs	r1, #6
 800884e:	4638      	mov	r0, r7
 8008850:	f007 fedc 	bl	801060c <sys_mbox_new>
 8008854:	4601      	mov	r1, r0
 8008856:	b9c8      	cbnz	r0, 800888c <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008858:	f104 000c 	add.w	r0, r4, #12
 800885c:	f007 ff34 	bl	80106c8 <sys_sem_new>
 8008860:	4605      	mov	r5, r0
 8008862:	b9d0      	cbnz	r0, 800889a <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008864:	f104 0014 	add.w	r0, r4, #20
 8008868:	f007 ff2a 	bl	80106c0 <sys_mbox_set_invalid>
  conn->socket       = -1;
 800886c:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 8008870:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 8008872:	6266      	str	r6, [r4, #36]	; 0x24
  conn->socket       = -1;
 8008874:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 8008876:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 8008878:	7725      	strb	r5, [r4, #28]
}
 800887a:	4620      	mov	r0, r4
 800887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800887e:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <netconn_alloc+0x80>)
 8008880:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008884:	4908      	ldr	r1, [pc, #32]	; (80088a8 <netconn_alloc+0x84>)
 8008886:	4809      	ldr	r0, [pc, #36]	; (80088ac <netconn_alloc+0x88>)
 8008888:	f009 fe32 	bl	80124f0 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800888c:	4621      	mov	r1, r4
  return NULL;
 800888e:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8008890:	2007      	movs	r0, #7
 8008892:	f001 f8a3 	bl	80099dc <memp_free>
}
 8008896:	4620      	mov	r0, r4
 8008898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 800889a:	4638      	mov	r0, r7
 800889c:	f007 fec4 	bl	8010628 <sys_mbox_free>
    goto free_and_return;
 80088a0:	e7f4      	b.n	800888c <netconn_alloc+0x68>
 80088a2:	bf00      	nop
 80088a4:	080152d0 	.word	0x080152d0
 80088a8:	080155ac 	.word	0x080155ac
 80088ac:	08014fe0 	.word	0x08014fe0

080088b0 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80088b0:	6843      	ldr	r3, [r0, #4]
{
 80088b2:	b510      	push	{r4, lr}
 80088b4:	4604      	mov	r4, r0
 80088b6:	b082      	sub	sp, #8
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80088b8:	b133      	cbz	r3, 80088c8 <netconn_free+0x18>
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <netconn_free+0x74>)
 80088bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80088c0:	4919      	ldr	r1, [pc, #100]	; (8008928 <netconn_free+0x78>)
 80088c2:	481a      	ldr	r0, [pc, #104]	; (800892c <netconn_free+0x7c>)
 80088c4:	f009 fe14 	bl	80124f0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80088c8:	f104 0010 	add.w	r0, r4, #16
 80088cc:	f007 fef2 	bl	80106b4 <sys_mbox_valid>
 80088d0:	b998      	cbnz	r0, 80088fa <netconn_free+0x4a>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80088d2:	f104 0014 	add.w	r0, r4, #20
 80088d6:	f007 feed 	bl	80106b4 <sys_mbox_valid>
 80088da:	b9d8      	cbnz	r0, 8008914 <netconn_free+0x64>
  sys_sem_free(&conn->op_completed);
 80088dc:	f104 000c 	add.w	r0, r4, #12
 80088e0:	9001      	str	r0, [sp, #4]
 80088e2:	f007 ff27 	bl	8010734 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80088e6:	9801      	ldr	r0, [sp, #4]
 80088e8:	f007 ff2e 	bl	8010748 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80088ec:	4621      	mov	r1, r4
 80088ee:	2007      	movs	r0, #7
}
 80088f0:	b002      	add	sp, #8
 80088f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 80088f6:	f001 b871 	b.w	80099dc <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80088fa:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <netconn_free+0x74>)
 80088fc:	f240 3223 	movw	r2, #803	; 0x323
 8008900:	490b      	ldr	r1, [pc, #44]	; (8008930 <netconn_free+0x80>)
 8008902:	480a      	ldr	r0, [pc, #40]	; (800892c <netconn_free+0x7c>)
 8008904:	f009 fdf4 	bl	80124f0 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008908:	f104 0014 	add.w	r0, r4, #20
 800890c:	f007 fed2 	bl	80106b4 <sys_mbox_valid>
 8008910:	2800      	cmp	r0, #0
 8008912:	d0e3      	beq.n	80088dc <netconn_free+0x2c>
 8008914:	4b03      	ldr	r3, [pc, #12]	; (8008924 <netconn_free+0x74>)
 8008916:	f240 3226 	movw	r2, #806	; 0x326
 800891a:	4906      	ldr	r1, [pc, #24]	; (8008934 <netconn_free+0x84>)
 800891c:	4803      	ldr	r0, [pc, #12]	; (800892c <netconn_free+0x7c>)
 800891e:	f009 fde7 	bl	80124f0 <iprintf>
 8008922:	e7db      	b.n	80088dc <netconn_free+0x2c>
 8008924:	080152d0 	.word	0x080152d0
 8008928:	080155d4 	.word	0x080155d4
 800892c:	08014fe0 	.word	0x08014fe0
 8008930:	08015604 	.word	0x08015604
 8008934:	08015640 	.word	0x08015640

08008938 <netconn_drain>:
{
 8008938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800893c:	f100 0510 	add.w	r5, r0, #16
{
 8008940:	b082      	sub	sp, #8
 8008942:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008944:	4628      	mov	r0, r5
 8008946:	f007 feb5 	bl	80106b4 <sys_mbox_valid>
 800894a:	b1f8      	cbz	r0, 800898c <netconn_drain+0x54>
 800894c:	ae01      	add	r6, sp, #4
  } else if (msg == &netconn_reset) {
 800894e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8008a18 <netconn_drain+0xe0>
  if (msg == &netconn_aborted) {
 8008952:	4f30      	ldr	r7, [pc, #192]	; (8008a14 <netconn_drain+0xdc>)
  } else if (msg == &netconn_closed) {
 8008954:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8008a1c <netconn_drain+0xe4>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	f007 fe9e 	bl	801069c <sys_arch_mbox_tryfetch>
 8008960:	3001      	adds	r0, #1
 8008962:	d00d      	beq.n	8008980 <netconn_drain+0x48>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008964:	7823      	ldrb	r3, [r4, #0]
 8008966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800896a:	2b10      	cmp	r3, #16
 800896c:	d046      	beq.n	80089fc <netconn_drain+0xc4>
          netbuf_delete((struct netbuf *)mem);
 800896e:	9801      	ldr	r0, [sp, #4]
 8008970:	f000 fac0 	bl	8008ef4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008974:	4631      	mov	r1, r6
 8008976:	4628      	mov	r0, r5
 8008978:	f007 fe90 	bl	801069c <sys_arch_mbox_tryfetch>
 800897c:	3001      	adds	r0, #1
 800897e:	d1f1      	bne.n	8008964 <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 8008980:	4628      	mov	r0, r5
 8008982:	f007 fe51 	bl	8010628 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008986:	4628      	mov	r0, r5
 8008988:	f007 fe9a 	bl	80106c0 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800898c:	3414      	adds	r4, #20
 800898e:	4620      	mov	r0, r4
 8008990:	f007 fe90 	bl	80106b4 <sys_mbox_valid>
 8008994:	b378      	cbz	r0, 80089f6 <netconn_drain+0xbe>
 8008996:	ae01      	add	r6, sp, #4
  if (msg == &netconn_aborted) {
 8008998:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008a14 <netconn_drain+0xdc>
  } else if (msg == &netconn_reset) {
 800899c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008a18 <netconn_drain+0xe0>
  } else if (msg == &netconn_closed) {
 80089a0:	f8df a078 	ldr.w	sl, [pc, #120]	; 8008a1c <netconn_drain+0xe4>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80089a4:	4631      	mov	r1, r6
 80089a6:	4620      	mov	r0, r4
 80089a8:	f007 fe78 	bl	801069c <sys_arch_mbox_tryfetch>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d01c      	beq.n	80089ea <netconn_drain+0xb2>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80089b0:	9d01      	ldr	r5, [sp, #4]
  } else if (msg == &netconn_closed) {
 80089b2:	4545      	cmp	r5, r8
 80089b4:	bf18      	it	ne
 80089b6:	454d      	cmpne	r5, r9
          netconn_drain(newconn);
 80089b8:	4628      	mov	r0, r5
  } else if (msg == &netconn_closed) {
 80089ba:	d0f3      	beq.n	80089a4 <netconn_drain+0x6c>
 80089bc:	eba5 070a 	sub.w	r7, r5, sl
 80089c0:	fab7 f787 	clz	r7, r7
 80089c4:	097f      	lsrs	r7, r7, #5
 80089c6:	2f00      	cmp	r7, #0
 80089c8:	d1ec      	bne.n	80089a4 <netconn_drain+0x6c>
          netconn_drain(newconn);
 80089ca:	f7ff ffb5 	bl	8008938 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80089ce:	6868      	ldr	r0, [r5, #4]
 80089d0:	b110      	cbz	r0, 80089d8 <netconn_drain+0xa0>
            tcp_abort(newconn->pcb.tcp);
 80089d2:	f002 fd45 	bl	800b460 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80089d6:	606f      	str	r7, [r5, #4]
          netconn_free(newconn);
 80089d8:	4628      	mov	r0, r5
 80089da:	f7ff ff69 	bl	80088b0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80089de:	4631      	mov	r1, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f007 fe5b 	bl	801069c <sys_arch_mbox_tryfetch>
 80089e6:	3001      	adds	r0, #1
 80089e8:	d1e2      	bne.n	80089b0 <netconn_drain+0x78>
    sys_mbox_free(&conn->acceptmbox);
 80089ea:	4620      	mov	r0, r4
 80089ec:	f007 fe1c 	bl	8010628 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80089f0:	4620      	mov	r0, r4
 80089f2:	f007 fe65 	bl	80106c0 <sys_mbox_set_invalid>
}
 80089f6:	b002      	add	sp, #8
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80089fc:	9b01      	ldr	r3, [sp, #4]
  } else if (msg == &netconn_closed) {
 80089fe:	42bb      	cmp	r3, r7
 8008a00:	bf18      	it	ne
 8008a02:	4543      	cmpne	r3, r8
            pbuf_free((struct pbuf *)mem);
 8008a04:	4618      	mov	r0, r3
  } else if (msg == &netconn_closed) {
 8008a06:	d0a7      	beq.n	8008958 <netconn_drain+0x20>
 8008a08:	454b      	cmp	r3, r9
 8008a0a:	d0a5      	beq.n	8008958 <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 8008a0c:	f001 fbac 	bl	800a168 <pbuf_free>
 8008a10:	e7a2      	b.n	8008958 <netconn_drain+0x20>
 8008a12:	bf00      	nop
 8008a14:	080156fc 	.word	0x080156fc
 8008a18:	080156fe 	.word	0x080156fe
 8008a1c:	080156fd 	.word	0x080156fd

08008a20 <accept_function>:
{
 8008a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a22:	b083      	sub	sp, #12
  if (conn == NULL) {
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d036      	beq.n	8008a96 <accept_function+0x76>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008a28:	f100 0714 	add.w	r7, r0, #20
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	460d      	mov	r5, r1
 8008a30:	4616      	mov	r6, r2
 8008a32:	4638      	mov	r0, r7
 8008a34:	f007 fe3e 	bl	80106b4 <sys_mbox_valid>
 8008a38:	b368      	cbz	r0, 8008a96 <accept_function+0x76>
  if (newpcb == NULL) {
 8008a3a:	b30d      	cbz	r5, 8008a80 <accept_function+0x60>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008a3c:	b9c6      	cbnz	r6, 8008a70 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8008a3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a40:	7820      	ldrb	r0, [r4, #0]
 8008a42:	f7ff feef 	bl	8008824 <netconn_alloc>
  if (newconn == NULL) {
 8008a46:	4606      	mov	r6, r0
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d04d      	beq.n	8008ae8 <accept_function+0xc8>
  newconn->pcb.tcp = newpcb;
 8008a4c:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8008a4e:	f7ff f9e3 	bl	8007e18 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008a52:	4631      	mov	r1, r6
 8008a54:	4638      	mov	r0, r7
 8008a56:	f007 fdf1 	bl	801063c <sys_mbox_trypost>
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	b9f0      	cbnz	r0, 8008a9c <accept_function+0x7c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a60:	b11b      	cbz	r3, 8008a6a <accept_function+0x4a>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4601      	mov	r1, r0
 8008a66:	4620      	mov	r0, r4
 8008a68:	4798      	blx	r3
}
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	b003      	add	sp, #12
 8008a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008a70:	4b26      	ldr	r3, [pc, #152]	; (8008b0c <accept_function+0xec>)
 8008a72:	f240 222a 	movw	r2, #554	; 0x22a
 8008a76:	4926      	ldr	r1, [pc, #152]	; (8008b10 <accept_function+0xf0>)
 8008a78:	4826      	ldr	r0, [pc, #152]	; (8008b14 <accept_function+0xf4>)
 8008a7a:	f009 fd39 	bl	80124f0 <iprintf>
 8008a7e:	e7de      	b.n	8008a3e <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008a80:	4925      	ldr	r1, [pc, #148]	; (8008b18 <accept_function+0xf8>)
 8008a82:	4638      	mov	r0, r7
 8008a84:	f007 fdda 	bl	801063c <sys_mbox_trypost>
 8008a88:	b928      	cbnz	r0, 8008a96 <accept_function+0x76>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a8c:	b11b      	cbz	r3, 8008a96 <accept_function+0x76>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	4601      	mov	r1, r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	4798      	blx	r3
    return ERR_VAL;
 8008a96:	f06f 0505 	mvn.w	r5, #5
 8008a9a:	e7e6      	b.n	8008a6a <accept_function+0x4a>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008a9c:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8008a9e:	2100      	movs	r1, #0
    sys_mbox_free(&newconn->recvmbox);
 8008aa0:	f106 0410 	add.w	r4, r6, #16
    return ERR_MEM;
 8008aa4:	f04f 35ff 	mov.w	r5, #4294967295
    tcp_arg(pcb, NULL);
 8008aa8:	9001      	str	r0, [sp, #4]
 8008aaa:	f002 f80b 	bl	800aac4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008aae:	9801      	ldr	r0, [sp, #4]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	f002 f80f 	bl	800aad4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008ab6:	9801      	ldr	r0, [sp, #4]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	f002 f825 	bl	800ab08 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	9801      	ldr	r0, [sp, #4]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	f002 f860 	bl	800ab88 <tcp_poll>
    tcp_err(pcb, NULL);
 8008ac8:	2100      	movs	r1, #0
 8008aca:	9801      	ldr	r0, [sp, #4]
 8008acc:	f002 f836 	bl	800ab3c <tcp_err>
    newconn->pcb.tcp = NULL;
 8008ad0:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8008ad2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 8008ad4:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8008ad6:	f007 fda7 	bl	8010628 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008ada:	4620      	mov	r0, r4
 8008adc:	f007 fdf0 	bl	80106c0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff fee5 	bl	80088b0 <netconn_free>
    return ERR_MEM;
 8008ae6:	e7c0      	b.n	8008a6a <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008ae8:	490b      	ldr	r1, [pc, #44]	; (8008b18 <accept_function+0xf8>)
 8008aea:	4638      	mov	r0, r7
 8008aec:	f007 fda6 	bl	801063c <sys_mbox_trypost>
 8008af0:	b940      	cbnz	r0, 8008b04 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af4:	b133      	cbz	r3, 8008b04 <accept_function+0xe4>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4601      	mov	r1, r0
 8008afa:	4620      	mov	r0, r4
    return ERR_MEM;
 8008afc:	f04f 35ff 	mov.w	r5, #4294967295
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b00:	4798      	blx	r3
 8008b02:	e7b2      	b.n	8008a6a <accept_function+0x4a>
    return ERR_MEM;
 8008b04:	f04f 35ff 	mov.w	r5, #4294967295
 8008b08:	e7af      	b.n	8008a6a <accept_function+0x4a>
 8008b0a:	bf00      	nop
 8008b0c:	080152d0 	.word	0x080152d0
 8008b10:	0801567c 	.word	0x0801567c
 8008b14:	08014fe0 	.word	0x08014fe0
 8008b18:	080156fc 	.word	0x080156fc

08008b1c <lwip_netconn_do_delconn>:
{
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8008b20:	6800      	ldr	r0, [r0, #0]
 8008b22:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008b24:	b19d      	cbz	r5, 8008b4e <lwip_netconn_do_delconn+0x32>
 8008b26:	7803      	ldrb	r3, [r0, #0]
 8008b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d131      	bne.n	8008b94 <lwip_netconn_do_delconn+0x78>
       (state != NETCONN_LISTEN) &&
 8008b30:	1eab      	subs	r3, r5, #2
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d906      	bls.n	8008b44 <lwip_netconn_do_delconn+0x28>
    msg->err = ERR_INPROGRESS;
 8008b36:	23fb      	movs	r3, #251	; 0xfb
 8008b38:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008b3a:	300c      	adds	r0, #12
}
 8008b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008b40:	f007 bdfc 	b.w	801073c <sys_sem_valid>
       (state != NETCONN_CONNECT)) ||
 8008b44:	2d03      	cmp	r5, #3
 8008b46:	d102      	bne.n	8008b4e <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008b48:	7f03      	ldrb	r3, [r0, #28]
 8008b4a:	075b      	lsls	r3, r3, #29
 8008b4c:	d5f3      	bpl.n	8008b36 <lwip_netconn_do_delconn+0x1a>
    msg->err = ERR_OK;
 8008b4e:	2500      	movs	r5, #0
 8008b50:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8008b52:	f7ff fef1 	bl	8008938 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	6842      	ldr	r2, [r0, #4]
 8008b5a:	b142      	cbz	r2, 8008b6e <lwip_netconn_do_delconn+0x52>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008b5c:	7803      	ldrb	r3, [r0, #0]
 8008b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b62:	2b10      	cmp	r3, #16
 8008b64:	d025      	beq.n	8008bb2 <lwip_netconn_do_delconn+0x96>
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d01d      	beq.n	8008ba6 <lwip_netconn_do_delconn+0x8a>
      msg->conn->pcb.tcp = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008b6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0e2      	beq.n	8008b3a <lwip_netconn_do_delconn+0x1e>
 8008b74:	2200      	movs	r2, #0
 8008b76:	4611      	mov	r1, r2
 8008b78:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008b7a:	6820      	ldr	r0, [r4, #0]
 8008b7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0db      	beq.n	8008b3a <lwip_netconn_do_delconn+0x1e>
 8008b82:	2200      	movs	r2, #0
 8008b84:	2102      	movs	r1, #2
 8008b86:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008b88:	6820      	ldr	r0, [r4, #0]
}
 8008b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008b8e:	300c      	adds	r0, #12
 8008b90:	f007 bdd4 	b.w	801073c <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008b94:	4b21      	ldr	r3, [pc, #132]	; (8008c1c <lwip_netconn_do_delconn+0x100>)
 8008b96:	f240 425e 	movw	r2, #1118	; 0x45e
 8008b9a:	4921      	ldr	r1, [pc, #132]	; (8008c20 <lwip_netconn_do_delconn+0x104>)
 8008b9c:	4821      	ldr	r0, [pc, #132]	; (8008c24 <lwip_netconn_do_delconn+0x108>)
 8008b9e:	f009 fca7 	bl	80124f0 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008ba2:	6820      	ldr	r0, [r4, #0]
 8008ba4:	e7c4      	b.n	8008b30 <lwip_netconn_do_delconn+0x14>
          udp_remove(msg->conn->pcb.udp);
 8008ba6:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 8008ba8:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 8008baa:	f006 f8d9 	bl	800ed60 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8008bae:	6820      	ldr	r0, [r4, #0]
          break;
 8008bb0:	e7db      	b.n	8008b6a <lwip_netconn_do_delconn+0x4e>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008bb2:	6a03      	ldr	r3, [r0, #32]
 8008bb4:	b13b      	cbz	r3, 8008bc6 <lwip_netconn_do_delconn+0xaa>
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <lwip_netconn_do_delconn+0x100>)
 8008bb8:	f240 4294 	movw	r2, #1172	; 0x494
 8008bbc:	491a      	ldr	r1, [pc, #104]	; (8008c28 <lwip_netconn_do_delconn+0x10c>)
 8008bbe:	4819      	ldr	r0, [pc, #100]	; (8008c24 <lwip_netconn_do_delconn+0x108>)
 8008bc0:	f009 fc96 	bl	80124f0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008bc8:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008bca:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8008bcc:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008bce:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8008bd0:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008bd2:	f7ff faad 	bl	8008130 <lwip_netconn_do_close_internal>
 8008bd6:	b178      	cbz	r0, 8008bf8 <lwip_netconn_do_delconn+0xdc>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d10c      	bne.n	8008bfa <lwip_netconn_do_delconn+0xde>
            UNLOCK_TCPIP_CORE();
 8008be0:	f7fc f8ca 	bl	8004d78 <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	2100      	movs	r1, #0
 8008be8:	300c      	adds	r0, #12
 8008bea:	f007 fd83 	bl	80106f4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008bee:	f7fc f845 	bl	8004c7c <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	b943      	cbnz	r3, 8008c0a <lwip_netconn_do_delconn+0xee>
}
 8008bf8:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008bfa:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <lwip_netconn_do_delconn+0x100>)
 8008bfc:	f240 429a 	movw	r2, #1178	; 0x49a
 8008c00:	490a      	ldr	r1, [pc, #40]	; (8008c2c <lwip_netconn_do_delconn+0x110>)
 8008c02:	4808      	ldr	r0, [pc, #32]	; (8008c24 <lwip_netconn_do_delconn+0x108>)
 8008c04:	f009 fc74 	bl	80124f0 <iprintf>
 8008c08:	e7ea      	b.n	8008be0 <lwip_netconn_do_delconn+0xc4>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008c0a:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <lwip_netconn_do_delconn+0x100>)
 8008c0c:	f240 429e 	movw	r2, #1182	; 0x49e
 8008c10:	4906      	ldr	r1, [pc, #24]	; (8008c2c <lwip_netconn_do_delconn+0x110>)
 8008c12:	4804      	ldr	r0, [pc, #16]	; (8008c24 <lwip_netconn_do_delconn+0x108>)
}
 8008c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008c18:	f009 bc6a 	b.w	80124f0 <iprintf>
 8008c1c:	080152d0 	.word	0x080152d0
 8008c20:	080156a4 	.word	0x080156a4
 8008c24:	08014fe0 	.word	0x08014fe0
 8008c28:	080156b8 	.word	0x080156b8
 8008c2c:	080156d4 	.word	0x080156d4

08008c30 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8008c30:	6803      	ldr	r3, [r0, #0]
{
 8008c32:	b510      	push	{r4, lr}
 8008c34:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8008c36:	6858      	ldr	r0, [r3, #4]
 8008c38:	b130      	cbz	r0, 8008c48 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d00b      	beq.n	8008c5c <lwip_netconn_do_bind+0x2c>
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d003      	beq.n	8008c50 <lwip_netconn_do_bind+0x20>
 8008c48:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8008c4c:	7120      	strb	r0, [r4, #4]
}
 8008c4e:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008c50:	89a2      	ldrh	r2, [r4, #12]
 8008c52:	68a1      	ldr	r1, [r4, #8]
 8008c54:	f005 ffe2 	bl	800ec1c <udp_bind>
  msg->err = err;
 8008c58:	7120      	strb	r0, [r4, #4]
}
 8008c5a:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008c5c:	89a2      	ldrh	r2, [r4, #12]
 8008c5e:	68a1      	ldr	r1, [r4, #8]
 8008c60:	f001 fd84 	bl	800a76c <tcp_bind>
  msg->err = err;
 8008c64:	7120      	strb	r0, [r4, #4]
}
 8008c66:	bd10      	pop	{r4, pc}

08008c68 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8008c68:	6803      	ldr	r3, [r0, #0]
{
 8008c6a:	b530      	push	{r4, r5, lr}
 8008c6c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8008c6e:	6858      	ldr	r0, [r3, #4]
{
 8008c70:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 8008c72:	b180      	cbz	r0, 8008c96 <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008c74:	781a      	ldrb	r2, [r3, #0]
 8008c76:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008c7a:	2a10      	cmp	r2, #16
 8008c7c:	d004      	beq.n	8008c88 <lwip_netconn_do_listen+0x20>
 8008c7e:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 8008c82:	7123      	strb	r3, [r4, #4]
}
 8008c84:	b003      	add	sp, #12
 8008c86:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	b94b      	cbnz	r3, 8008ca0 <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8008c8c:	7d03      	ldrb	r3, [r0, #20]
 8008c8e:	b17b      	cbz	r3, 8008cb0 <lwip_netconn_do_listen+0x48>
 8008c90:	f06f 0305 	mvn.w	r3, #5
 8008c94:	e7f5      	b.n	8008c82 <lwip_netconn_do_listen+0x1a>
 8008c96:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 8008c9a:	7123      	strb	r3, [r4, #4]
}
 8008c9c:	b003      	add	sp, #12
 8008c9e:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	bf14      	ite	ne
 8008ca4:	f06f 030a 	mvnne.w	r3, #10
 8008ca8:	2300      	moveq	r3, #0
  msg->err = err;
 8008caa:	7123      	strb	r3, [r4, #4]
}
 8008cac:	b003      	add	sp, #12
 8008cae:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8008cb0:	f10d 0207 	add.w	r2, sp, #7
 8008cb4:	21ff      	movs	r1, #255	; 0xff
 8008cb6:	f001 fdc3 	bl	800a840 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8008cba:	4605      	mov	r5, r0
 8008cbc:	b1d8      	cbz	r0, 8008cf6 <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8008cbe:	6820      	ldr	r0, [r4, #0]
 8008cc0:	3010      	adds	r0, #16
 8008cc2:	f007 fcf7 	bl	80106b4 <sys_mbox_valid>
 8008cc6:	bb50      	cbnz	r0, 8008d1e <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008cc8:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8008cca:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008ccc:	3014      	adds	r0, #20
            err = ERR_OK;
 8008cce:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008cd2:	f007 fcef 	bl	80106b4 <sys_mbox_valid>
 8008cd6:	b1d0      	cbz	r0, 8008d0e <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 8008cd8:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8008cdc:	b970      	cbnz	r0, 8008cfc <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 8008cde:	6821      	ldr	r1, [r4, #0]
 8008ce0:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008ce2:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8008ce4:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8008ce6:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008ce8:	f001 feec 	bl	800aac4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	4910      	ldr	r1, [pc, #64]	; (8008d30 <lwip_netconn_do_listen+0xc8>)
 8008cf0:	6858      	ldr	r0, [r3, #4]
 8008cf2:	f001 ff3d 	bl	800ab70 <tcp_accept>
  msg->err = err;
 8008cf6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8008cfa:	e7c2      	b.n	8008c82 <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f002 fd95 	bl	800b82c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	2100      	movs	r1, #0
  msg->err = err;
 8008d06:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 8008d0a:	6051      	str	r1, [r2, #4]
 8008d0c:	e7b9      	b.n	8008c82 <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	2106      	movs	r1, #6
 8008d12:	3014      	adds	r0, #20
 8008d14:	f007 fc7a 	bl	801060c <sys_mbox_new>
 8008d18:	f88d 0007 	strb.w	r0, [sp, #7]
 8008d1c:	e7de      	b.n	8008cdc <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	3010      	adds	r0, #16
 8008d22:	f007 fc81 	bl	8010628 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8008d26:	6820      	ldr	r0, [r4, #0]
 8008d28:	3010      	adds	r0, #16
 8008d2a:	f007 fcc9 	bl	80106c0 <sys_mbox_set_invalid>
 8008d2e:	e7cb      	b.n	8008cc8 <lwip_netconn_do_listen+0x60>
 8008d30:	08008a21 	.word	0x08008a21

08008d34 <lwip_netconn_do_recv>:
{
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8008d36:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 8008d38:	6803      	ldr	r3, [r0, #0]
{
 8008d3a:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8008d3c:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008d3e:	6858      	ldr	r0, [r3, #4]
 8008d40:	b120      	cbz	r0, 8008d4c <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d000      	beq.n	8008d4e <lwip_netconn_do_recv+0x1a>
}
 8008d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 8008d4e:	68b4      	ldr	r4, [r6, #8]
 8008d50:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8008d54:	e001      	b.n	8008d5a <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008d56:	6833      	ldr	r3, [r6, #0]
 8008d58:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8008d5a:	42bc      	cmp	r4, r7
 8008d5c:	4625      	mov	r5, r4
 8008d5e:	bf28      	it	cs
 8008d60:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008d62:	b2a9      	uxth	r1, r5
 8008d64:	f001 fe2a 	bl	800a9bc <tcp_recved>
      } while (remaining != 0);
 8008d68:	1b64      	subs	r4, r4, r5
 8008d6a:	d1f4      	bne.n	8008d56 <lwip_netconn_do_recv+0x22>
}
 8008d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d6e:	bf00      	nop

08008d70 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8008d74:	6800      	ldr	r0, [r0, #0]
 8008d76:	f7fe ffe1 	bl	8007d3c <netconn_err>
  if (err == ERR_OK) {
 8008d7a:	b938      	cbnz	r0, 8008d8c <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	7813      	ldrb	r3, [r2, #0]
 8008d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d003      	beq.n	8008d90 <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8008d88:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8008d8c:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008d8e:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 8008d90:	7853      	ldrb	r3, [r2, #1]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d137      	bne.n	8008e06 <lwip_netconn_do_write+0x96>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008d96:	6853      	ldr	r3, [r2, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d038      	beq.n	8008e0e <lwip_netconn_do_write+0x9e>
        msg->conn->state = NETCONN_WRITE;
 8008d9c:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008d9e:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 8008da0:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008da2:	b133      	cbz	r3, 8008db2 <lwip_netconn_do_write+0x42>
 8008da4:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <lwip_netconn_do_write+0xb8>)
 8008da6:	f240 7223 	movw	r2, #1827	; 0x723
 8008daa:	4920      	ldr	r1, [pc, #128]	; (8008e2c <lwip_netconn_do_write+0xbc>)
 8008dac:	4820      	ldr	r0, [pc, #128]	; (8008e30 <lwip_netconn_do_write+0xc0>)
 8008dae:	f009 fb9f 	bl	80124f0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	b37b      	cbz	r3, 8008e16 <lwip_netconn_do_write+0xa6>
        msg->conn->current_msg = msg;
 8008db6:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008db8:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8008dba:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008dbc:	f7ff f850 	bl	8007e60 <lwip_netconn_do_writemore>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d0e4      	beq.n	8008d8e <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d006      	beq.n	8008dda <lwip_netconn_do_write+0x6a>
 8008dcc:	4b16      	ldr	r3, [pc, #88]	; (8008e28 <lwip_netconn_do_write+0xb8>)
 8008dce:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8008dd2:	4918      	ldr	r1, [pc, #96]	; (8008e34 <lwip_netconn_do_write+0xc4>)
 8008dd4:	4816      	ldr	r0, [pc, #88]	; (8008e30 <lwip_netconn_do_write+0xc0>)
 8008dd6:	f009 fb8b 	bl	80124f0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008dda:	f7fb ffcd 	bl	8004d78 <sys_unlock_tcpip_core>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008dde:	6820      	ldr	r0, [r4, #0]
 8008de0:	2100      	movs	r1, #0
 8008de2:	300c      	adds	r0, #12
 8008de4:	f007 fc86 	bl	80106f4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008de8:	f7fb ff48 	bl	8004c7c <sys_lock_tcpip_core>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	785b      	ldrb	r3, [r3, #1]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d1cc      	bne.n	8008d8e <lwip_netconn_do_write+0x1e>
 8008df4:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <lwip_netconn_do_write+0xb8>)
 8008df6:	f240 722c 	movw	r2, #1836	; 0x72c
 8008dfa:	490e      	ldr	r1, [pc, #56]	; (8008e34 <lwip_netconn_do_write+0xc4>)
 8008dfc:	480c      	ldr	r0, [pc, #48]	; (8008e30 <lwip_netconn_do_write+0xc0>)
}
 8008dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008e02:	f009 bb75 	b.w	80124f0 <iprintf>
        err = ERR_INPROGRESS;
 8008e06:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 8008e0a:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8008e0c:	e7bf      	b.n	8008d8e <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 8008e0e:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 8008e12:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8008e14:	e7bb      	b.n	8008d8e <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008e16:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <lwip_netconn_do_write+0xb8>)
 8008e18:	f240 7224 	movw	r2, #1828	; 0x724
 8008e1c:	4906      	ldr	r1, [pc, #24]	; (8008e38 <lwip_netconn_do_write+0xc8>)
 8008e1e:	4804      	ldr	r0, [pc, #16]	; (8008e30 <lwip_netconn_do_write+0xc0>)
 8008e20:	f009 fb66 	bl	80124f0 <iprintf>
 8008e24:	e7c7      	b.n	8008db6 <lwip_netconn_do_write+0x46>
 8008e26:	bf00      	nop
 8008e28:	080152d0 	.word	0x080152d0
 8008e2c:	080156b8 	.word	0x080156b8
 8008e30:	08014fe0 	.word	0x08014fe0
 8008e34:	080156d4 	.word	0x080156d4
 8008e38:	080156dc 	.word	0x080156dc

08008e3c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008e40:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008e42:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 8008e44:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 8008e46:	b123      	cbz	r3, 8008e52 <lwip_netconn_do_close+0x16>
 8008e48:	7803      	ldrb	r3, [r0, #0]
 8008e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e4e:	2b10      	cmp	r3, #16
 8008e50:	d002      	beq.n	8008e58 <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008e52:	23f5      	movs	r3, #245	; 0xf5
 8008e54:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008e56:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008e58:	2a02      	cmp	r2, #2
 8008e5a:	7a23      	ldrb	r3, [r4, #8]
 8008e5c:	d101      	bne.n	8008e62 <lwip_netconn_do_close+0x26>
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d1f7      	bne.n	8008e52 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8008e62:	2a03      	cmp	r2, #3
 8008e64:	d0f5      	beq.n	8008e52 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 8008e66:	2a01      	cmp	r2, #1
 8008e68:	d102      	bne.n	8008e70 <lwip_netconn_do_close+0x34>
      msg->err = ERR_INPROGRESS;
 8008e6a:	23fb      	movs	r3, #251	; 0xfb
 8008e6c:	7123      	strb	r3, [r4, #4]
}
 8008e6e:	bd10      	pop	{r4, pc}
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008e70:	07db      	lsls	r3, r3, #31
 8008e72:	d432      	bmi.n	8008eda <lwip_netconn_do_close+0x9e>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008e74:	6a03      	ldr	r3, [r0, #32]
 8008e76:	b13b      	cbz	r3, 8008e88 <lwip_netconn_do_close+0x4c>
 8008e78:	4b1a      	ldr	r3, [pc, #104]	; (8008ee4 <lwip_netconn_do_close+0xa8>)
 8008e7a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8008e7e:	491a      	ldr	r1, [pc, #104]	; (8008ee8 <lwip_netconn_do_close+0xac>)
 8008e80:	481a      	ldr	r0, [pc, #104]	; (8008eec <lwip_netconn_do_close+0xb0>)
 8008e82:	f009 fb35 	bl	80124f0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008e8a:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 8008e8c:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 8008e8e:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008e90:	f7ff f94e 	bl	8008130 <lwip_netconn_do_close_internal>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d0de      	beq.n	8008e56 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	785b      	ldrb	r3, [r3, #1]
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d006      	beq.n	8008eae <lwip_netconn_do_close+0x72>
 8008ea0:	4b10      	ldr	r3, [pc, #64]	; (8008ee4 <lwip_netconn_do_close+0xa8>)
 8008ea2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8008ea6:	4912      	ldr	r1, [pc, #72]	; (8008ef0 <lwip_netconn_do_close+0xb4>)
 8008ea8:	4810      	ldr	r0, [pc, #64]	; (8008eec <lwip_netconn_do_close+0xb0>)
 8008eaa:	f009 fb21 	bl	80124f0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008eae:	f7fb ff63 	bl	8004d78 <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	300c      	adds	r0, #12
 8008eb8:	f007 fc1c 	bl	80106f4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008ebc:	f7fb fede 	bl	8004c7c <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c6      	beq.n	8008e56 <lwip_netconn_do_close+0x1a>
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <lwip_netconn_do_close+0xa8>)
 8008eca:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8008ece:	4908      	ldr	r1, [pc, #32]	; (8008ef0 <lwip_netconn_do_close+0xb4>)
 8008ed0:	4806      	ldr	r0, [pc, #24]	; (8008eec <lwip_netconn_do_close+0xb0>)
}
 8008ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008ed6:	f009 bb0b 	b.w	80124f0 <iprintf>
        netconn_drain(msg->conn);
 8008eda:	f7ff fd2d 	bl	8008938 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008ede:	6820      	ldr	r0, [r4, #0]
 8008ee0:	e7c8      	b.n	8008e74 <lwip_netconn_do_close+0x38>
 8008ee2:	bf00      	nop
 8008ee4:	080152d0 	.word	0x080152d0
 8008ee8:	080156b8 	.word	0x080156b8
 8008eec:	08014fe0 	.word	0x08014fe0
 8008ef0:	080156d4 	.word	0x080156d4

08008ef4 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8008ef4:	b170      	cbz	r0, 8008f14 <netbuf_delete+0x20>
{
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	b120      	cbz	r0, 8008f08 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8008efe:	f001 f933 	bl	800a168 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8008f08:	4621      	mov	r1, r4
 8008f0a:	2006      	movs	r0, #6
  }
}
 8008f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8008f10:	f000 bd64 	b.w	80099dc <memp_free>
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop

08008f18 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8008f18:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8008f1a:	b300      	cbz	r0, 8008f5e <netbuf_data+0x46>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008f1c:	b1b1      	cbz	r1, 8008f4c <netbuf_data+0x34>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8008f1e:	b162      	cbz	r2, 8008f3a <netbuf_data+0x22>

  if (buf->ptr == NULL) {
 8008f20:	4603      	mov	r3, r0
 8008f22:	6840      	ldr	r0, [r0, #4]
 8008f24:	b130      	cbz	r0, 8008f34 <netbuf_data+0x1c>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 8008f26:	6840      	ldr	r0, [r0, #4]
 8008f28:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
  return ERR_OK;
 8008f2a:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	895b      	ldrh	r3, [r3, #10]
 8008f30:	8013      	strh	r3, [r2, #0]
}
 8008f32:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 8008f34:	f06f 0001 	mvn.w	r0, #1
}
 8008f38:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8008f3a:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <netbuf_data+0x58>)
 8008f3c:	22c8      	movs	r2, #200	; 0xc8
 8008f3e:	490d      	ldr	r1, [pc, #52]	; (8008f74 <netbuf_data+0x5c>)
 8008f40:	480d      	ldr	r0, [pc, #52]	; (8008f78 <netbuf_data+0x60>)
 8008f42:	f009 fad5 	bl	80124f0 <iprintf>
 8008f46:	f06f 000f 	mvn.w	r0, #15
}
 8008f4a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008f4c:	4b08      	ldr	r3, [pc, #32]	; (8008f70 <netbuf_data+0x58>)
 8008f4e:	22c7      	movs	r2, #199	; 0xc7
 8008f50:	490a      	ldr	r1, [pc, #40]	; (8008f7c <netbuf_data+0x64>)
 8008f52:	4809      	ldr	r0, [pc, #36]	; (8008f78 <netbuf_data+0x60>)
 8008f54:	f009 facc 	bl	80124f0 <iprintf>
 8008f58:	f06f 000f 	mvn.w	r0, #15
}
 8008f5c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8008f5e:	4b04      	ldr	r3, [pc, #16]	; (8008f70 <netbuf_data+0x58>)
 8008f60:	22c6      	movs	r2, #198	; 0xc6
 8008f62:	4907      	ldr	r1, [pc, #28]	; (8008f80 <netbuf_data+0x68>)
 8008f64:	4804      	ldr	r0, [pc, #16]	; (8008f78 <netbuf_data+0x60>)
 8008f66:	f009 fac3 	bl	80124f0 <iprintf>
 8008f6a:	f06f 000f 	mvn.w	r0, #15
}
 8008f6e:	bd08      	pop	{r3, pc}
 8008f70:	08015700 	.word	0x08015700
 8008f74:	080157b0 	.word	0x080157b0
 8008f78:	08014fe0 	.word	0x08014fe0
 8008f7c:	08015790 	.word	0x08015790
 8008f80:	08015774 	.word	0x08015774

08008f84 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8008f84:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8008f86:	b158      	cbz	r0, 8008fa0 <netbuf_next+0x1c>
  if (buf->ptr->next == NULL) {
 8008f88:	6843      	ldr	r3, [r0, #4]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	b12a      	cbz	r2, 8008f9a <netbuf_next+0x16>
    return -1;
  }
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
 8008f8e:	6813      	ldr	r3, [r2, #0]
  buf->ptr = buf->ptr->next;
 8008f90:	6042      	str	r2, [r0, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8008f92:	fab3 f083 	clz	r0, r3
 8008f96:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 8008f98:	bd08      	pop	{r3, pc}
    return -1;
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f9e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <netbuf_next+0x30>)
 8008fa2:	22e0      	movs	r2, #224	; 0xe0
 8008fa4:	4904      	ldr	r1, [pc, #16]	; (8008fb8 <netbuf_next+0x34>)
 8008fa6:	4805      	ldr	r0, [pc, #20]	; (8008fbc <netbuf_next+0x38>)
 8008fa8:	f009 faa2 	bl	80124f0 <iprintf>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008fb0:	bd08      	pop	{r3, pc}
 8008fb2:	bf00      	nop
 8008fb4:	08015700 	.word	0x08015700
 8008fb8:	080157cc 	.word	0x080157cc
 8008fbc:	08014fe0 	.word	0x08014fe0

08008fc0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8008fc4:	f7fb ff12 	bl	8004dec <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8008fc8:	f7fb fe58 	bl	8004c7c <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8008fcc:	4b2c      	ldr	r3, [pc, #176]	; (8009080 <tcpip_thread+0xc0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	b113      	cbz	r3, 8008fd8 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 8008fd2:	4a2c      	ldr	r2, [pc, #176]	; (8009084 <tcpip_thread+0xc4>)
 8008fd4:	6810      	ldr	r0, [r2, #0]
 8008fd6:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008fd8:	4d2b      	ldr	r5, [pc, #172]	; (8009088 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008fda:	4f2c      	ldr	r7, [pc, #176]	; (800908c <tcpip_thread+0xcc>)
 8008fdc:	4e2c      	ldr	r6, [pc, #176]	; (8009090 <tcpip_thread+0xd0>)
 8008fde:	e00e      	b.n	8008ffe <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 8008fe0:	b158      	cbz	r0, 8008ffa <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 8008fe2:	f7fb fec9 	bl	8004d78 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	a901      	add	r1, sp, #4
 8008fea:	4628      	mov	r0, r5
 8008fec:	f007 fb36 	bl	801065c <sys_arch_mbox_fetch>
 8008ff0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8008ff2:	f7fb fe43 	bl	8004c7c <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8008ff6:	3401      	adds	r4, #1
 8008ff8:	d111      	bne.n	800901e <tcpip_thread+0x5e>
    sys_check_timeouts();
 8008ffa:	f005 fcc5 	bl	800e988 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 8008ffe:	f7fb fec5 	bl	8004d8c <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 8009002:	f005 fceb 	bl	800e9dc <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009006:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8009008:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800900a:	d1e9      	bne.n	8008fe0 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 800900c:	f7fb feb4 	bl	8004d78 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009010:	2200      	movs	r2, #0
 8009012:	a901      	add	r1, sp, #4
 8009014:	4628      	mov	r0, r5
 8009016:	f007 fb21 	bl	801065c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800901a:	f7fb fe2f 	bl	8004c7c <sys_lock_tcpip_core>
    if (msg == NULL) {
 800901e:	9c01      	ldr	r4, [sp, #4]
 8009020:	b164      	cbz	r4, 800903c <tcpip_thread+0x7c>
  switch (msg->type) {
 8009022:	7823      	ldrb	r3, [r4, #0]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d01e      	beq.n	8009066 <tcpip_thread+0xa6>
 8009028:	2b02      	cmp	r3, #2
 800902a:	d018      	beq.n	800905e <tcpip_thread+0x9e>
 800902c:	b16b      	cbz	r3, 800904a <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800902e:	463b      	mov	r3, r7
 8009030:	22cf      	movs	r2, #207	; 0xcf
 8009032:	4631      	mov	r1, r6
 8009034:	4817      	ldr	r0, [pc, #92]	; (8009094 <tcpip_thread+0xd4>)
 8009036:	f009 fa5b 	bl	80124f0 <iprintf>
      break;
 800903a:	e7e0      	b.n	8008ffe <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800903c:	463b      	mov	r3, r7
 800903e:	2291      	movs	r2, #145	; 0x91
 8009040:	4631      	mov	r1, r6
 8009042:	4814      	ldr	r0, [pc, #80]	; (8009094 <tcpip_thread+0xd4>)
 8009044:	f009 fa54 	bl	80124f0 <iprintf>
      continue;
 8009048:	e7d9      	b.n	8008ffe <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800904a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800904e:	6860      	ldr	r0, [r4, #4]
 8009050:	4798      	blx	r3
 8009052:	b980      	cbnz	r0, 8009076 <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009054:	4621      	mov	r1, r4
 8009056:	2009      	movs	r0, #9
 8009058:	f000 fcc0 	bl	80099dc <memp_free>
      break;
 800905c:	e7cf      	b.n	8008ffe <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800905e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8009062:	4798      	blx	r3
      break;
 8009064:	e7cb      	b.n	8008ffe <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009066:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800906a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800906c:	4621      	mov	r1, r4
 800906e:	2008      	movs	r0, #8
 8009070:	f000 fcb4 	bl	80099dc <memp_free>
      break;
 8009074:	e7c3      	b.n	8008ffe <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009076:	6860      	ldr	r0, [r4, #4]
 8009078:	f001 f876 	bl	800a168 <pbuf_free>
 800907c:	e7ea      	b.n	8009054 <tcpip_thread+0x94>
 800907e:	bf00      	nop
 8009080:	2400a26c 	.word	0x2400a26c
 8009084:	2400a270 	.word	0x2400a270
 8009088:	2400a274 	.word	0x2400a274
 800908c:	080157e8 	.word	0x080157e8
 8009090:	08015818 	.word	0x08015818
 8009094:	08014fe0 	.word	0x08014fe0

08009098 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800909c:	4813      	ldr	r0, [pc, #76]	; (80090ec <tcpip_inpkt+0x54>)
{
 800909e:	460e      	mov	r6, r1
 80090a0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80090a2:	f007 fb07 	bl	80106b4 <sys_mbox_valid>
 80090a6:	b178      	cbz	r0, 80090c8 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80090a8:	2009      	movs	r0, #9
 80090aa:	f000 fc51 	bl	8009950 <memp_malloc>
  if (msg == NULL) {
 80090ae:	4604      	mov	r4, r0
 80090b0:	b1c0      	cbz	r0, 80090e4 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80090b2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80090b4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80090b6:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80090b8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80090ba:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80090bc:	480b      	ldr	r0, [pc, #44]	; (80090ec <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 80090be:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80090c0:	f007 fabc 	bl	801063c <sys_mbox_trypost>
 80090c4:	b938      	cbnz	r0, 80090d6 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <tcpip_inpkt+0x58>)
 80090ca:	22fc      	movs	r2, #252	; 0xfc
 80090cc:	4909      	ldr	r1, [pc, #36]	; (80090f4 <tcpip_inpkt+0x5c>)
 80090ce:	480a      	ldr	r0, [pc, #40]	; (80090f8 <tcpip_inpkt+0x60>)
 80090d0:	f009 fa0e 	bl	80124f0 <iprintf>
 80090d4:	e7e8      	b.n	80090a8 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80090d6:	4621      	mov	r1, r4
 80090d8:	2009      	movs	r0, #9
 80090da:	f000 fc7f 	bl	80099dc <memp_free>
    return ERR_MEM;
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80090e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ea:	bf00      	nop
 80090ec:	2400a274 	.word	0x2400a274
 80090f0:	080157e8 	.word	0x080157e8
 80090f4:	08015838 	.word	0x08015838
 80090f8:	08014fe0 	.word	0x08014fe0

080090fc <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80090fc:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8009100:	f013 0f18 	tst.w	r3, #24
 8009104:	d002      	beq.n	800910c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009106:	4a03      	ldr	r2, [pc, #12]	; (8009114 <tcpip_input+0x18>)
 8009108:	f7ff bfc6 	b.w	8009098 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800910c:	4a02      	ldr	r2, [pc, #8]	; (8009118 <tcpip_input+0x1c>)
 800910e:	f7ff bfc3 	b.w	8009098 <tcpip_inpkt>
 8009112:	bf00      	nop
 8009114:	080104f1 	.word	0x080104f1
 8009118:	0800f91d 	.word	0x0800f91d

0800911c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009120:	4812      	ldr	r0, [pc, #72]	; (800916c <tcpip_try_callback+0x50>)
{
 8009122:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009124:	f007 fac6 	bl	80106b4 <sys_mbox_valid>
 8009128:	b170      	cbz	r0, 8009148 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800912a:	2008      	movs	r0, #8
 800912c:	f000 fc10 	bl	8009950 <memp_malloc>
  if (msg == NULL) {
 8009130:	4604      	mov	r4, r0
 8009132:	b1c0      	cbz	r0, 8009166 <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009134:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009136:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8009138:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800913c:	480b      	ldr	r0, [pc, #44]	; (800916c <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 800913e:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009140:	f007 fa7c 	bl	801063c <sys_mbox_trypost>
 8009144:	b940      	cbnz	r0, 8009158 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 8009146:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009148:	4b09      	ldr	r3, [pc, #36]	; (8009170 <tcpip_try_callback+0x54>)
 800914a:	f240 125d 	movw	r2, #349	; 0x15d
 800914e:	4909      	ldr	r1, [pc, #36]	; (8009174 <tcpip_try_callback+0x58>)
 8009150:	4809      	ldr	r0, [pc, #36]	; (8009178 <tcpip_try_callback+0x5c>)
 8009152:	f009 f9cd 	bl	80124f0 <iprintf>
 8009156:	e7e8      	b.n	800912a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009158:	4621      	mov	r1, r4
 800915a:	2008      	movs	r0, #8
 800915c:	f000 fc3e 	bl	80099dc <memp_free>
    return ERR_MEM;
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009164:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8009166:	f04f 30ff 	mov.w	r0, #4294967295
}
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	2400a274 	.word	0x2400a274
 8009170:	080157e8 	.word	0x080157e8
 8009174:	08015838 	.word	0x08015838
 8009178:	08014fe0 	.word	0x08014fe0

0800917c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800917c:	b510      	push	{r4, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	4604      	mov	r4, r0
 8009182:	9101      	str	r1, [sp, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009184:	f7fb fd7a 	bl	8004c7c <sys_lock_tcpip_core>
  fn(apimsg);
 8009188:	9801      	ldr	r0, [sp, #4]
 800918a:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800918c:	f7fb fdf4 	bl	8004d78 <sys_unlock_tcpip_core>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009190:	2000      	movs	r0, #0
 8009192:	b002      	add	sp, #8
 8009194:	bd10      	pop	{r4, pc}
 8009196:	bf00      	nop

08009198 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009198:	b530      	push	{r4, r5, lr}
 800919a:	b083      	sub	sp, #12
 800919c:	4605      	mov	r5, r0
 800919e:	460c      	mov	r4, r1
  lwip_init();
 80091a0:	f000 f8b2 	bl	8009308 <lwip_init>

  tcpip_init_done = initfunc;
 80091a4:	4a15      	ldr	r2, [pc, #84]	; (80091fc <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80091a6:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80091aa:	4816      	ldr	r0, [pc, #88]	; (8009204 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 80091ac:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80091ae:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80091b0:	f007 fa2c 	bl	801060c <sys_mbox_new>
 80091b4:	b970      	cbnz	r0, 80091d4 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80091b6:	4814      	ldr	r0, [pc, #80]	; (8009208 <tcpip_init+0x70>)
 80091b8:	f007 fad4 	bl	8010764 <sys_mutex_new>
 80091bc:	b9b0      	cbnz	r0, 80091ec <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80091be:	2418      	movs	r4, #24
 80091c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091c4:	2200      	movs	r2, #0
 80091c6:	4911      	ldr	r1, [pc, #68]	; (800920c <tcpip_init+0x74>)
 80091c8:	9400      	str	r4, [sp, #0]
 80091ca:	4811      	ldr	r0, [pc, #68]	; (8009210 <tcpip_init+0x78>)
 80091cc:	f007 fae0 	bl	8010790 <sys_thread_new>
}
 80091d0:	b003      	add	sp, #12
 80091d2:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80091d4:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <tcpip_init+0x7c>)
 80091d6:	f240 2261 	movw	r2, #609	; 0x261
 80091da:	490f      	ldr	r1, [pc, #60]	; (8009218 <tcpip_init+0x80>)
 80091dc:	480f      	ldr	r0, [pc, #60]	; (800921c <tcpip_init+0x84>)
 80091de:	f009 f987 	bl	80124f0 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80091e2:	4809      	ldr	r0, [pc, #36]	; (8009208 <tcpip_init+0x70>)
 80091e4:	f007 fabe 	bl	8010764 <sys_mutex_new>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d0e8      	beq.n	80091be <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <tcpip_init+0x7c>)
 80091ee:	f240 2265 	movw	r2, #613	; 0x265
 80091f2:	490b      	ldr	r1, [pc, #44]	; (8009220 <tcpip_init+0x88>)
 80091f4:	4809      	ldr	r0, [pc, #36]	; (800921c <tcpip_init+0x84>)
 80091f6:	f009 f97b 	bl	80124f0 <iprintf>
 80091fa:	e7e0      	b.n	80091be <tcpip_init+0x26>
 80091fc:	2400a26c 	.word	0x2400a26c
 8009200:	2400a270 	.word	0x2400a270
 8009204:	2400a274 	.word	0x2400a274
 8009208:	2400a268 	.word	0x2400a268
 800920c:	08008fc1 	.word	0x08008fc1
 8009210:	08015890 	.word	0x08015890
 8009214:	080157e8 	.word	0x080157e8
 8009218:	08015848 	.word	0x08015848
 800921c:	08014fe0 	.word	0x08014fe0
 8009220:	0801586c 	.word	0x0801586c

08009224 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009224:	ba40      	rev16	r0, r0
}
 8009226:	b280      	uxth	r0, r0
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800922c:	ba00      	rev	r0, r0
 800922e:	4770      	bx	lr

08009230 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009230:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009232:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 8009236:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800923a:	4571      	cmp	r1, lr
 800923c:	dd05      	ble.n	800924a <lwip_standard_chksum+0x1a>
 800923e:	b125      	cbz	r5, 800924a <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 8009240:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8009244:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8009246:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800924a:	2901      	cmp	r1, #1
 800924c:	dd27      	ble.n	800929e <lwip_standard_chksum+0x6e>
 800924e:	3902      	subs	r1, #2
  u32_t sum = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	084c      	lsrs	r4, r1, #1
 8009254:	f104 0c01 	add.w	ip, r4, #1
 8009258:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 800925c:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8009260:	4584      	cmp	ip, r0
    sum += *ps++;
 8009262:	4413      	add	r3, r2
  while (len > 1) {
 8009264:	d1fa      	bne.n	800925c <lwip_standard_chksum+0x2c>
    len -= 2;
 8009266:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 800926a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800926e:	2901      	cmp	r1, #1
 8009270:	d105      	bne.n	800927e <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009272:	f89c 2000 	ldrb.w	r2, [ip]
 8009276:	f362 0e07 	bfi	lr, r2, #0, #8
 800927a:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800927e:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009280:	fa1f f38e 	uxth.w	r3, lr
 8009284:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8009288:	b298      	uxth	r0, r3
 800928a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800928e:	b125      	cbz	r5, 800929a <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009290:	0203      	lsls	r3, r0, #8
 8009292:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009296:	b29b      	uxth	r3, r3
 8009298:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800929a:	b280      	uxth	r0, r0
 800929c:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800929e:	4684      	mov	ip, r0
  u32_t sum = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	e7e4      	b.n	800926e <lwip_standard_chksum+0x3e>

080092a4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80092a4:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80092a6:	f7ff ffc3 	bl	8009230 <lwip_standard_chksum>
 80092aa:	43c0      	mvns	r0, r0
}
 80092ac:	b280      	uxth	r0, r0
 80092ae:	bd08      	pop	{r3, pc}

080092b0 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 80092b0:	b338      	cbz	r0, 8009302 <inet_chksum_pbuf+0x52>
{
 80092b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 80092b4:	2700      	movs	r7, #0
 80092b6:	4605      	mov	r5, r0
  acc = 0;
 80092b8:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 80092ba:	896e      	ldrh	r6, [r5, #10]
 80092bc:	6868      	ldr	r0, [r5, #4]
 80092be:	4631      	mov	r1, r6
 80092c0:	f7ff ffb6 	bl	8009230 <lwip_standard_chksum>
 80092c4:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80092c6:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 80092ca:	b2a3      	uxth	r3, r4
 80092cc:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80092d0:	ea4f 2304 	mov.w	r3, r4, lsl #8
 80092d4:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 80092d8:	d004      	beq.n	80092e4 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f087 0701 	eor.w	r7, r7, #1
 80092e0:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 80092e4:	682d      	ldr	r5, [r5, #0]
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	d1e7      	bne.n	80092ba <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80092ea:	b13f      	cbz	r7, 80092fc <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 80092ec:	0220      	lsls	r0, r4, #8
 80092ee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80092f2:	b280      	uxth	r0, r0
 80092f4:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 80092f6:	43c0      	mvns	r0, r0
 80092f8:	b280      	uxth	r0, r0
}
 80092fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 80092fc:	43e0      	mvns	r0, r4
 80092fe:	b280      	uxth	r0, r0
}
 8009300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8009302:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8009306:	4770      	bx	lr

08009308 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009308:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800930a:	f007 fa21 	bl	8010750 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800930e:	f000 f80d 	bl	800932c <mem_init>
  memp_init();
 8009312:	f000 fadb 	bl	80098cc <memp_init>
  pbuf_init();
  netif_init();
 8009316:	f000 fbe1 	bl	8009adc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800931a:	f005 fb73 	bl	800ea04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800931e:	f001 f9fb 	bl	800a718 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8009322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8009326:	f005 bb11 	b.w	800e94c <sys_timeouts_init>
 800932a:	bf00      	nop

0800932c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800932c:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800932e:	4b11      	ldr	r3, [pc, #68]	; (8009374 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8009330:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009332:	4c11      	ldr	r4, [pc, #68]	; (8009378 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 8009334:	4911      	ldr	r1, [pc, #68]	; (800937c <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009336:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009338:	4811      	ldr	r0, [pc, #68]	; (8009380 <mem_init+0x54>)
 800933a:	4c12      	ldr	r4, [pc, #72]	; (8009384 <mem_init+0x58>)
  mem->used = 0;
 800933c:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 800933e:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009342:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 8009344:	2001      	movs	r0, #1
 8009346:	4a10      	ldr	r2, [pc, #64]	; (8009388 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009348:	4c10      	ldr	r4, [pc, #64]	; (800938c <mem_init+0x60>)
  ram_end->used = 1;
 800934a:	f882 00f0 	strb.w	r0, [r2, #240]	; 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 800934e:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009352:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009356:	480e      	ldr	r0, [pc, #56]	; (8009390 <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8009358:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800935a:	f007 fa03 	bl	8010764 <sys_mutex_new>
 800935e:	b900      	cbnz	r0, 8009362 <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009360:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009362:	4b0c      	ldr	r3, [pc, #48]	; (8009394 <mem_init+0x68>)
 8009364:	f240 221f 	movw	r2, #543	; 0x21f
 8009368:	490b      	ldr	r1, [pc, #44]	; (8009398 <mem_init+0x6c>)
 800936a:	480c      	ldr	r0, [pc, #48]	; (800939c <mem_init+0x70>)
}
 800936c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009370:	f009 b8be 	b.w	80124f0 <iprintf>
 8009374:	30020000 	.word	0x30020000
 8009378:	2400a298 	.word	0x2400a298
 800937c:	0001ffe8 	.word	0x0001ffe8
 8009380:	2400a29c 	.word	0x2400a29c
 8009384:	3003ffe8 	.word	0x3003ffe8
 8009388:	3003ff00 	.word	0x3003ff00
 800938c:	2400a290 	.word	0x2400a290
 8009390:	2400a294 	.word	0x2400a294
 8009394:	080158a0 	.word	0x080158a0
 8009398:	080158d0 	.word	0x080158d0
 800939c:	08014fe0 	.word	0x08014fe0

080093a0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80093a0:	2800      	cmp	r0, #0
 80093a2:	f000 8098 	beq.w	80094d6 <mem_free+0x136>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80093a6:	0783      	lsls	r3, r0, #30
{
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80093ae:	f040 808d 	bne.w	80094cc <mem_free+0x12c>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80093b2:	4e61      	ldr	r6, [pc, #388]	; (8009538 <mem_free+0x198>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80093b4:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80093b8:	6833      	ldr	r3, [r6, #0]
 80093ba:	42ab      	cmp	r3, r5
 80093bc:	d805      	bhi.n	80093ca <mem_free+0x2a>
 80093be:	4f5f      	ldr	r7, [pc, #380]	; (800953c <mem_free+0x19c>)
 80093c0:	f100 030c 	add.w	r3, r0, #12
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d20c      	bcs.n	80093e4 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80093ca:	4b5d      	ldr	r3, [pc, #372]	; (8009540 <mem_free+0x1a0>)
 80093cc:	f240 227f 	movw	r2, #639	; 0x27f
 80093d0:	495c      	ldr	r1, [pc, #368]	; (8009544 <mem_free+0x1a4>)
 80093d2:	485d      	ldr	r0, [pc, #372]	; (8009548 <mem_free+0x1a8>)
 80093d4:	f009 f88c 	bl	80124f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80093d8:	f007 f9f0 	bl	80107bc <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80093dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80093e0:	f007 b9f8 	b.w	80107d4 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 80093e4:	4859      	ldr	r0, [pc, #356]	; (800954c <mem_free+0x1ac>)
 80093e6:	f007 f9c9 	bl	801077c <sys_mutex_lock>
  if (!mem->used) {
 80093ea:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 809c 	beq.w	800952c <mem_free+0x18c>
  pmem = ptr_to_mem(mem->prev);
 80093f4:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80093f8:	4855      	ldr	r0, [pc, #340]	; (8009550 <mem_free+0x1b0>)
  return (mem_size_t)((u8_t *)mem - ram);
 80093fa:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80093fc:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 80093fe:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009402:	d807      	bhi.n	8009414 <mem_free+0x74>
 8009404:	4283      	cmp	r3, r0
 8009406:	d805      	bhi.n	8009414 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 8009408:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800940a:	4288      	cmp	r0, r1
 800940c:	d012      	beq.n	8009434 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800940e:	5851      	ldr	r1, [r2, r1]
 8009410:	4288      	cmp	r0, r1
 8009412:	d00f      	beq.n	8009434 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009414:	4b4a      	ldr	r3, [pc, #296]	; (8009540 <mem_free+0x1a0>)
 8009416:	f240 2295 	movw	r2, #661	; 0x295
 800941a:	494e      	ldr	r1, [pc, #312]	; (8009554 <mem_free+0x1b4>)
 800941c:	484a      	ldr	r0, [pc, #296]	; (8009548 <mem_free+0x1a8>)
 800941e:	f009 f867 	bl	80124f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009422:	484a      	ldr	r0, [pc, #296]	; (800954c <mem_free+0x1ac>)
 8009424:	f007 f9b0 	bl	8010788 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8009428:	f007 f9c8 	bl	80107bc <sys_arch_protect>
}
 800942c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009430:	f007 b9d0 	b.w	80107d4 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 8009434:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009436:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800943a:	4561      	cmp	r1, ip
 800943c:	d002      	beq.n	8009444 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800943e:	6849      	ldr	r1, [r1, #4]
 8009440:	4288      	cmp	r0, r1
 8009442:	d1e7      	bne.n	8009414 <mem_free+0x74>
  if (mem < lfree) {
 8009444:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8009570 <mem_free+0x1d0>
  mem->used = 0;
 8009448:	2100      	movs	r1, #0
 800944a:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 800944e:	f8d8 1000 	ldr.w	r1, [r8]
 8009452:	42a9      	cmp	r1, r5
    lfree = mem;
 8009454:	bf88      	it	hi
 8009456:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800945a:	4295      	cmp	r5, r2
 800945c:	d33c      	bcc.n	80094d8 <mem_free+0x138>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800945e:	4565      	cmp	r5, ip
 8009460:	d244      	bcs.n	80094ec <mem_free+0x14c>
  return (struct mem *)(void *)&ram[ptr];
 8009462:	6832      	ldr	r2, [r6, #0]
 8009464:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009466:	429d      	cmp	r5, r3
 8009468:	d014      	beq.n	8009494 <mem_free+0xf4>
 800946a:	7a19      	ldrb	r1, [r3, #8]
 800946c:	b991      	cbnz	r1, 8009494 <mem_free+0xf4>
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	428b      	cmp	r3, r1
 8009472:	d00f      	beq.n	8009494 <mem_free+0xf4>
    if (lfree == nmem) {
 8009474:	f8d8 1000 	ldr.w	r1, [r8]
 8009478:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800947a:	6819      	ldr	r1, [r3, #0]
 800947c:	f844 1c0c 	str.w	r1, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009480:	4933      	ldr	r1, [pc, #204]	; (8009550 <mem_free+0x1b0>)
 8009482:	681b      	ldr	r3, [r3, #0]
      lfree = mem;
 8009484:	bf08      	it	eq
 8009486:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800948a:	428b      	cmp	r3, r1
 800948c:	d002      	beq.n	8009494 <mem_free+0xf4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800948e:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8009490:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009492:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 8009494:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009498:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800949a:	429d      	cmp	r5, r3
 800949c:	d011      	beq.n	80094c2 <mem_free+0x122>
 800949e:	7a18      	ldrb	r0, [r3, #8]
 80094a0:	b978      	cbnz	r0, 80094c2 <mem_free+0x122>
    if (lfree == mem) {
 80094a2:	f8d8 0000 	ldr.w	r0, [r8]
 80094a6:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 80094a8:	4829      	ldr	r0, [pc, #164]	; (8009550 <mem_free+0x1b0>)
      lfree = pmem;
 80094aa:	bf08      	it	eq
 80094ac:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 80094b0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80094b4:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80094b6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80094ba:	4283      	cmp	r3, r0
 80094bc:	d001      	beq.n	80094c2 <mem_free+0x122>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80094be:	441a      	add	r2, r3
 80094c0:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 80094c2:	4822      	ldr	r0, [pc, #136]	; (800954c <mem_free+0x1ac>)
}
 80094c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80094c8:	f007 b95e 	b.w	8010788 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80094cc:	4b1c      	ldr	r3, [pc, #112]	; (8009540 <mem_free+0x1a0>)
 80094ce:	f240 2273 	movw	r2, #627	; 0x273
 80094d2:	4921      	ldr	r1, [pc, #132]	; (8009558 <mem_free+0x1b8>)
 80094d4:	e77d      	b.n	80093d2 <mem_free+0x32>
 80094d6:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80094d8:	4b19      	ldr	r3, [pc, #100]	; (8009540 <mem_free+0x1a0>)
 80094da:	f240 12df 	movw	r2, #479	; 0x1df
 80094de:	491f      	ldr	r1, [pc, #124]	; (800955c <mem_free+0x1bc>)
 80094e0:	4819      	ldr	r0, [pc, #100]	; (8009548 <mem_free+0x1a8>)
 80094e2:	f009 f805 	bl	80124f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	429d      	cmp	r5, r3
 80094ea:	d306      	bcc.n	80094fa <mem_free+0x15a>
 80094ec:	4b14      	ldr	r3, [pc, #80]	; (8009540 <mem_free+0x1a0>)
 80094ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80094f2:	491b      	ldr	r1, [pc, #108]	; (8009560 <mem_free+0x1c0>)
 80094f4:	4814      	ldr	r0, [pc, #80]	; (8009548 <mem_free+0x1a8>)
 80094f6:	f008 fffb 	bl	80124f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80094fa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80094fe:	b133      	cbz	r3, 800950e <mem_free+0x16e>
 8009500:	4b0f      	ldr	r3, [pc, #60]	; (8009540 <mem_free+0x1a0>)
 8009502:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009506:	4917      	ldr	r1, [pc, #92]	; (8009564 <mem_free+0x1c4>)
 8009508:	480f      	ldr	r0, [pc, #60]	; (8009548 <mem_free+0x1a8>)
 800950a:	f008 fff1 	bl	80124f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800950e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8009512:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <mem_free+0x1b0>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d9a4      	bls.n	8009462 <mem_free+0xc2>
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <mem_free+0x1a0>)
 800951a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800951e:	4912      	ldr	r1, [pc, #72]	; (8009568 <mem_free+0x1c8>)
 8009520:	4809      	ldr	r0, [pc, #36]	; (8009548 <mem_free+0x1a8>)
 8009522:	f008 ffe5 	bl	80124f0 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8009526:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800952a:	e79a      	b.n	8009462 <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <mem_free+0x1a0>)
 800952e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009532:	490e      	ldr	r1, [pc, #56]	; (800956c <mem_free+0x1cc>)
 8009534:	e772      	b.n	800941c <mem_free+0x7c>
 8009536:	bf00      	nop
 8009538:	2400a298 	.word	0x2400a298
 800953c:	2400a29c 	.word	0x2400a29c
 8009540:	080158a0 	.word	0x080158a0
 8009544:	08015910 	.word	0x08015910
 8009548:	08014fe0 	.word	0x08014fe0
 800954c:	2400a294 	.word	0x2400a294
 8009550:	0001ffe8 	.word	0x0001ffe8
 8009554:	08015954 	.word	0x08015954
 8009558:	080158ec 	.word	0x080158ec
 800955c:	08015988 	.word	0x08015988
 8009560:	080159a0 	.word	0x080159a0
 8009564:	080159bc 	.word	0x080159bc
 8009568:	080159d8 	.word	0x080159d8
 800956c:	0801592c 	.word	0x0801592c
 8009570:	2400a290 	.word	0x2400a290

08009574 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009578:	1ccb      	adds	r3, r1, #3
 800957a:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 800957e:	2b0c      	cmp	r3, #12
 8009580:	461d      	mov	r5, r3
 8009582:	bf38      	it	cc
 8009584:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009586:	42a9      	cmp	r1, r5
 8009588:	d875      	bhi.n	8009676 <mem_trim+0x102>
 800958a:	4a4d      	ldr	r2, [pc, #308]	; (80096c0 <mem_trim+0x14c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d872      	bhi.n	8009676 <mem_trim+0x102>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009590:	4f4c      	ldr	r7, [pc, #304]	; (80096c4 <mem_trim+0x150>)
 8009592:	4604      	mov	r4, r0
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	4283      	cmp	r3, r0
 8009598:	d83b      	bhi.n	8009612 <mem_trim+0x9e>
 800959a:	4a4b      	ldr	r2, [pc, #300]	; (80096c8 <mem_trim+0x154>)
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	4282      	cmp	r2, r0
 80095a0:	d937      	bls.n	8009612 <mem_trim+0x9e>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80095a2:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80095a6:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 80095aa:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80095ae:	3e0c      	subs	r6, #12
 80095b0:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80095b4:	42ae      	cmp	r6, r5
 80095b6:	d361      	bcc.n	800967c <mem_trim+0x108>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 80095b8:	d06a      	beq.n	8009690 <mem_trim+0x11c>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80095ba:	4844      	ldr	r0, [pc, #272]	; (80096cc <mem_trim+0x158>)
 80095bc:	f007 f8de 	bl	801077c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80095c0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 80095ca:	f899 1008 	ldrb.w	r1, [r9, #8]
 80095ce:	2900      	cmp	r1, #0
 80095d0:	d134      	bne.n	800963c <mem_trim+0xc8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80095d2:	493b      	ldr	r1, [pc, #236]	; (80096c0 <mem_trim+0x14c>)
 80095d4:	428a      	cmp	r2, r1
 80095d6:	d069      	beq.n	80096ac <mem_trim+0x138>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 80095d8:	493d      	ldr	r1, [pc, #244]	; (80096d0 <mem_trim+0x15c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80095da:	350c      	adds	r5, #12
    next = mem2->next;
 80095dc:	f8d9 0000 	ldr.w	r0, [r9]
    if (lfree == mem2) {
 80095e0:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80095e2:	4445      	add	r5, r8
    if (lfree == mem2) {
 80095e4:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 80095e6:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 80095ea:	bf08      	it	eq
 80095ec:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 80095ee:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 80095f0:	e9c2 0800 	strd	r0, r8, [r2]
    mem2->used = 0;
 80095f4:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80095f6:	4932      	ldr	r1, [pc, #200]	; (80096c0 <mem_trim+0x14c>)
    mem->next = ptr2;
 80095f8:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80095fc:	6812      	ldr	r2, [r2, #0]
 80095fe:	428a      	cmp	r2, r1
 8009600:	d001      	beq.n	8009606 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009602:	441a      	add	r2, r3
 8009604:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009606:	4831      	ldr	r0, [pc, #196]	; (80096cc <mem_trim+0x158>)
 8009608:	f007 f8be 	bl	8010788 <sys_mutex_unlock>
  return rmem;
 800960c:	4620      	mov	r0, r4
}
 800960e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009612:	4b30      	ldr	r3, [pc, #192]	; (80096d4 <mem_trim+0x160>)
 8009614:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009618:	492f      	ldr	r1, [pc, #188]	; (80096d8 <mem_trim+0x164>)
 800961a:	4830      	ldr	r0, [pc, #192]	; (80096dc <mem_trim+0x168>)
 800961c:	f008 ff68 	bl	80124f0 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	42a3      	cmp	r3, r4
 8009624:	d803      	bhi.n	800962e <mem_trim+0xba>
 8009626:	4a28      	ldr	r2, [pc, #160]	; (80096c8 <mem_trim+0x154>)
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	42a2      	cmp	r2, r4
 800962c:	d8b9      	bhi.n	80095a2 <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 800962e:	f007 f8c5 	bl	80107bc <sys_arch_protect>
 8009632:	f007 f8cf 	bl	80107d4 <sys_arch_unprotect>
    return rmem;
 8009636:	4620      	mov	r0, r4
}
 8009638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800963c:	f105 0118 	add.w	r1, r5, #24
 8009640:	42b1      	cmp	r1, r6
 8009642:	d8e0      	bhi.n	8009606 <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009644:	491e      	ldr	r1, [pc, #120]	; (80096c0 <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009646:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009648:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800964a:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800964c:	d023      	beq.n	8009696 <mem_trim+0x122>
    if (mem2 < lfree) {
 800964e:	4820      	ldr	r0, [pc, #128]	; (80096d0 <mem_trim+0x15c>)
  return (struct mem *)(void *)&ram[ptr];
 8009650:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8009652:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 8009654:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 8009658:	428e      	cmp	r6, r1
    mem2->used = 0;
 800965a:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 800965e:	bf88      	it	hi
 8009660:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 8009662:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 8009664:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009668:	680a      	ldr	r2, [r1, #0]
 800966a:	4915      	ldr	r1, [pc, #84]	; (80096c0 <mem_trim+0x14c>)
 800966c:	428a      	cmp	r2, r1
 800966e:	d0ca      	beq.n	8009606 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009670:	4413      	add	r3, r2
 8009672:	605d      	str	r5, [r3, #4]
 8009674:	e7c7      	b.n	8009606 <mem_trim+0x92>
    return NULL;
 8009676:	2000      	movs	r0, #0
}
 8009678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800967c:	4b15      	ldr	r3, [pc, #84]	; (80096d4 <mem_trim+0x160>)
 800967e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009682:	4917      	ldr	r1, [pc, #92]	; (80096e0 <mem_trim+0x16c>)
 8009684:	4815      	ldr	r0, [pc, #84]	; (80096dc <mem_trim+0x168>)
 8009686:	f008 ff33 	bl	80124f0 <iprintf>
    return NULL;
 800968a:	2000      	movs	r0, #0
}
 800968c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009690:	4620      	mov	r0, r4
 8009692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <mem_trim+0x160>)
 8009698:	f240 3216 	movw	r2, #790	; 0x316
 800969c:	4911      	ldr	r1, [pc, #68]	; (80096e4 <mem_trim+0x170>)
 800969e:	480f      	ldr	r0, [pc, #60]	; (80096dc <mem_trim+0x168>)
 80096a0:	f008 ff26 	bl	80124f0 <iprintf>
    mem2->next = mem->next;
 80096a4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	e7d0      	b.n	800964e <mem_trim+0xda>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80096ac:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <mem_trim+0x160>)
 80096ae:	f240 22f5 	movw	r2, #757	; 0x2f5
 80096b2:	490c      	ldr	r1, [pc, #48]	; (80096e4 <mem_trim+0x170>)
 80096b4:	4809      	ldr	r0, [pc, #36]	; (80096dc <mem_trim+0x168>)
 80096b6:	f008 ff1b 	bl	80124f0 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	e78c      	b.n	80095d8 <mem_trim+0x64>
 80096be:	bf00      	nop
 80096c0:	0001ffe8 	.word	0x0001ffe8
 80096c4:	2400a298 	.word	0x2400a298
 80096c8:	2400a29c 	.word	0x2400a29c
 80096cc:	2400a294 	.word	0x2400a294
 80096d0:	2400a290 	.word	0x2400a290
 80096d4:	080158a0 	.word	0x080158a0
 80096d8:	08015a04 	.word	0x08015a04
 80096dc:	08014fe0 	.word	0x08014fe0
 80096e0:	08015a1c 	.word	0x08015a1c
 80096e4:	08015a3c 	.word	0x08015a3c

080096e8 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d066      	beq.n	80097ba <mem_malloc+0xd2>
{
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80096f0:	1cc3      	adds	r3, r0, #3
 80096f2:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 80096f6:	2b0c      	cmp	r3, #12
 80096f8:	4698      	mov	r8, r3
 80096fa:	bf38      	it	cc
 80096fc:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009700:	4540      	cmp	r0, r8
 8009702:	d827      	bhi.n	8009754 <mem_malloc+0x6c>
 8009704:	4c47      	ldr	r4, [pc, #284]	; (8009824 <mem_malloc+0x13c>)
 8009706:	42a3      	cmp	r3, r4
 8009708:	d824      	bhi.n	8009754 <mem_malloc+0x6c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800970a:	4f47      	ldr	r7, [pc, #284]	; (8009828 <mem_malloc+0x140>)
  return (mem_size_t)((u8_t *)mem - ram);
 800970c:	4e47      	ldr	r6, [pc, #284]	; (800982c <mem_malloc+0x144>)
  sys_mutex_lock(&mem_mutex);
 800970e:	4848      	ldr	r0, [pc, #288]	; (8009830 <mem_malloc+0x148>)
 8009710:	f007 f834 	bl	801077c <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009714:	6838      	ldr	r0, [r7, #0]
  return (mem_size_t)((u8_t *)mem - ram);
 8009716:	6832      	ldr	r2, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009718:	eba4 0c08 	sub.w	ip, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 800971c:	1a84      	subs	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800971e:	4564      	cmp	r4, ip
 8009720:	d212      	bcs.n	8009748 <mem_malloc+0x60>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009722:	f06f 0e0b 	mvn.w	lr, #11
 8009726:	e006      	b.n	8009736 <mem_malloc+0x4e>
 8009728:	5911      	ldr	r1, [r2, r4]
 800972a:	440b      	add	r3, r1
      if ((!mem->used) &&
 800972c:	4543      	cmp	r3, r8
 800972e:	d214      	bcs.n	800975a <mem_malloc+0x72>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009730:	460c      	mov	r4, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009732:	4564      	cmp	r4, ip
 8009734:	d208      	bcs.n	8009748 <mem_malloc+0x60>
  return (struct mem *)(void *)&ram[ptr];
 8009736:	1915      	adds	r5, r2, r4
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009738:	ebae 0304 	sub.w	r3, lr, r4
      if ((!mem->used) &&
 800973c:	7a29      	ldrb	r1, [r5, #8]
 800973e:	2900      	cmp	r1, #0
 8009740:	d0f2      	beq.n	8009728 <mem_malloc+0x40>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009742:	5914      	ldr	r4, [r2, r4]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009744:	4564      	cmp	r4, ip
 8009746:	d3f6      	bcc.n	8009736 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009748:	4839      	ldr	r0, [pc, #228]	; (8009830 <mem_malloc+0x148>)
 800974a:	f007 f81d 	bl	8010788 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800974e:	2000      	movs	r0, #0
}
 8009750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8009754:	2000      	movs	r0, #0
}
 8009756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800975a:	f108 0c18 	add.w	ip, r8, #24
 800975e:	f108 080c 	add.w	r8, r8, #12
 8009762:	4563      	cmp	r3, ip
 8009764:	d32a      	bcc.n	80097bc <mem_malloc+0xd4>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009766:	4b2f      	ldr	r3, [pc, #188]	; (8009824 <mem_malloc+0x13c>)
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009768:	eb08 0904 	add.w	r9, r8, r4
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800976c:	4599      	cmp	r9, r3
 800976e:	d04d      	beq.n	800980c <mem_malloc+0x124>
  return (struct mem *)(void *)&ram[ptr];
 8009770:	eb02 0309 	add.w	r3, r2, r9
          mem2->used = 0;
 8009774:	f04f 0c00 	mov.w	ip, #0
 8009778:	f883 c008 	strb.w	ip, [r3, #8]
          mem2->next = mem->next;
 800977c:	f842 1009 	str.w	r1, [r2, r9]
          mem2->prev = ptr;
 8009780:	605c      	str	r4, [r3, #4]
          mem->used = 1;
 8009782:	2301      	movs	r3, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009784:	4927      	ldr	r1, [pc, #156]	; (8009824 <mem_malloc+0x13c>)
          mem->next = ptr2;
 8009786:	f8c5 9000 	str.w	r9, [r5]
          mem->used = 1;
 800978a:	722b      	strb	r3, [r5, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800978c:	f852 3009 	ldr.w	r3, [r2, r9]
 8009790:	428b      	cmp	r3, r1
 8009792:	d002      	beq.n	800979a <mem_malloc+0xb2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009794:	441a      	add	r2, r3
 8009796:	f8c2 9004 	str.w	r9, [r2, #4]
        if (mem == lfree) {
 800979a:	4285      	cmp	r5, r0
          while (cur->used && cur != ram_end) {
 800979c:	4c25      	ldr	r4, [pc, #148]	; (8009834 <mem_malloc+0x14c>)
        if (mem == lfree) {
 800979e:	d027      	beq.n	80097f0 <mem_malloc+0x108>
        sys_mutex_unlock(&mem_mutex);
 80097a0:	4823      	ldr	r0, [pc, #140]	; (8009830 <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80097a2:	44a8      	add	r8, r5
        sys_mutex_unlock(&mem_mutex);
 80097a4:	f006 fff0 	bl	8010788 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	4543      	cmp	r3, r8
 80097ac:	d318      	bcc.n	80097e0 <mem_malloc+0xf8>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80097ae:	07ab      	lsls	r3, r5, #30
 80097b0:	d107      	bne.n	80097c2 <mem_malloc+0xda>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80097b2:	f105 000c 	add.w	r0, r5, #12
}
 80097b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ba:	4770      	bx	lr
          mem->used = 1;
 80097bc:	2301      	movs	r3, #1
 80097be:	722b      	strb	r3, [r5, #8]
 80097c0:	e7eb      	b.n	800979a <mem_malloc+0xb2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80097c2:	4b1d      	ldr	r3, [pc, #116]	; (8009838 <mem_malloc+0x150>)
 80097c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80097c8:	491c      	ldr	r1, [pc, #112]	; (800983c <mem_malloc+0x154>)
 80097ca:	481d      	ldr	r0, [pc, #116]	; (8009840 <mem_malloc+0x158>)
 80097cc:	f008 fe90 	bl	80124f0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80097d0:	4b19      	ldr	r3, [pc, #100]	; (8009838 <mem_malloc+0x150>)
 80097d2:	f240 32bd 	movw	r2, #957	; 0x3bd
 80097d6:	491b      	ldr	r1, [pc, #108]	; (8009844 <mem_malloc+0x15c>)
 80097d8:	4819      	ldr	r0, [pc, #100]	; (8009840 <mem_malloc+0x158>)
 80097da:	f008 fe89 	bl	80124f0 <iprintf>
 80097de:	e7e8      	b.n	80097b2 <mem_malloc+0xca>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80097e0:	4b15      	ldr	r3, [pc, #84]	; (8009838 <mem_malloc+0x150>)
 80097e2:	f240 32b9 	movw	r2, #953	; 0x3b9
 80097e6:	4918      	ldr	r1, [pc, #96]	; (8009848 <mem_malloc+0x160>)
 80097e8:	4815      	ldr	r0, [pc, #84]	; (8009840 <mem_malloc+0x158>)
 80097ea:	f008 fe81 	bl	80124f0 <iprintf>
 80097ee:	e7de      	b.n	80097ae <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 80097f0:	6830      	ldr	r0, [r6, #0]
 80097f2:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 80097f4:	6821      	ldr	r1, [r4, #0]
 80097f6:	e003      	b.n	8009800 <mem_malloc+0x118>
  return (struct mem *)(void *)&ram[ptr];
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 80097fc:	7a1a      	ldrb	r2, [r3, #8]
 80097fe:	b11a      	cbz	r2, 8009808 <mem_malloc+0x120>
 8009800:	4299      	cmp	r1, r3
 8009802:	d1f9      	bne.n	80097f8 <mem_malloc+0x110>
          lfree = cur;
 8009804:	6039      	str	r1, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009806:	e7cb      	b.n	80097a0 <mem_malloc+0xb8>
          lfree = cur;
 8009808:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800980a:	e7c9      	b.n	80097a0 <mem_malloc+0xb8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800980c:	f240 3287 	movw	r2, #903	; 0x387
 8009810:	490e      	ldr	r1, [pc, #56]	; (800984c <mem_malloc+0x164>)
 8009812:	4b09      	ldr	r3, [pc, #36]	; (8009838 <mem_malloc+0x150>)
 8009814:	480a      	ldr	r0, [pc, #40]	; (8009840 <mem_malloc+0x158>)
 8009816:	f008 fe6b 	bl	80124f0 <iprintf>
          mem2->next = mem->next;
 800981a:	6829      	ldr	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 800981c:	6832      	ldr	r2, [r6, #0]
        if (mem == lfree) {
 800981e:	6838      	ldr	r0, [r7, #0]
 8009820:	e7a6      	b.n	8009770 <mem_malloc+0x88>
 8009822:	bf00      	nop
 8009824:	0001ffe8 	.word	0x0001ffe8
 8009828:	2400a290 	.word	0x2400a290
 800982c:	2400a298 	.word	0x2400a298
 8009830:	2400a294 	.word	0x2400a294
 8009834:	2400a29c 	.word	0x2400a29c
 8009838:	080158a0 	.word	0x080158a0
 800983c:	08015a80 	.word	0x08015a80
 8009840:	08014fe0 	.word	0x08014fe0
 8009844:	08015ab0 	.word	0x08015ab0
 8009848:	08015a50 	.word	0x08015a50
 800984c:	08015a3c 	.word	0x08015a3c

08009850 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009854:	f006 ffb2 	bl	80107bc <sys_arch_protect>

  memp = *desc->tab;
 8009858:	68a3      	ldr	r3, [r4, #8]
 800985a:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800985c:	b18c      	cbz	r4, 8009882 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800985e:	6822      	ldr	r2, [r4, #0]
 8009860:	4605      	mov	r5, r0
 8009862:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009864:	07a3      	lsls	r3, r4, #30
 8009866:	d104      	bne.n	8009872 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009868:	4628      	mov	r0, r5
 800986a:	f006 ffb3 	bl	80107d4 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800986e:	4620      	mov	r0, r4
 8009870:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009872:	4b06      	ldr	r3, [pc, #24]	; (800988c <do_memp_malloc_pool+0x3c>)
 8009874:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009878:	4905      	ldr	r1, [pc, #20]	; (8009890 <do_memp_malloc_pool+0x40>)
 800987a:	4806      	ldr	r0, [pc, #24]	; (8009894 <do_memp_malloc_pool+0x44>)
 800987c:	f008 fe38 	bl	80124f0 <iprintf>
 8009880:	e7f2      	b.n	8009868 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8009882:	f006 ffa7 	bl	80107d4 <sys_arch_unprotect>
}
 8009886:	4620      	mov	r0, r4
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	bf00      	nop
 800988c:	08015ad4 	.word	0x08015ad4
 8009890:	08015b04 	.word	0x08015b04
 8009894:	08014fe0 	.word	0x08014fe0

08009898 <memp_init_pool>:
{
 8009898:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800989a:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800989c:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800989e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 80098a2:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 80098a4:	b17c      	cbz	r4, 80098c6 <memp_init_pool+0x2e>
 80098a6:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098a8:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 80098ac:	460a      	mov	r2, r1
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	e000      	b.n	80098b6 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098b4:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 80098b6:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80098b8:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098ba:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 80098be:	4619      	mov	r1, r3
 80098c0:	42a2      	cmp	r2, r4
 80098c2:	d1f7      	bne.n	80098b4 <memp_init_pool+0x1c>
 80098c4:	602b      	str	r3, [r5, #0]
}
 80098c6:	bc30      	pop	{r4, r5}
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop

080098cc <memp_init>:
{
 80098cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ce:	f8df e054 	ldr.w	lr, [pc, #84]	; 8009924 <memp_init+0x58>
 80098d2:	2404      	movs	r4, #4
 80098d4:	4b10      	ldr	r3, [pc, #64]	; (8009918 <memp_init+0x4c>)
  *desc->tab = NULL;
 80098d6:	2600      	movs	r6, #0
{
 80098d8:	4d10      	ldr	r5, [pc, #64]	; (800991c <memp_init+0x50>)
 80098da:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 80098de:	4a10      	ldr	r2, [pc, #64]	; (8009920 <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80098e0:	3303      	adds	r3, #3
  *desc->tab = NULL;
 80098e2:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80098e4:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80098e8:	b16c      	cbz	r4, 8009906 <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098ea:	2100      	movs	r1, #0
 80098ec:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 80098f0:	460a      	mov	r2, r1
 80098f2:	e000      	b.n	80098f6 <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098f4:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 80098f6:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80098f8:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80098fa:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 80098fe:	4619      	mov	r1, r3
 8009900:	42a2      	cmp	r2, r4
 8009902:	d1f7      	bne.n	80098f4 <memp_init+0x28>
 8009904:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009906:	4577      	cmp	r7, lr
 8009908:	d005      	beq.n	8009916 <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 800990a:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800990e:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 8009912:	8854      	ldrh	r4, [r2, #2]
 8009914:	e7e4      	b.n	80098e0 <memp_init+0x14>
}
 8009916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009918:	24010c74 	.word	0x24010c74
 800991c:	24010d28 	.word	0x24010d28
 8009920:	08015c28 	.word	0x08015c28
 8009924:	08015c34 	.word	0x08015c34

08009928 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009928:	b108      	cbz	r0, 800992e <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800992a:	f7ff bf91 	b.w	8009850 <do_memp_malloc_pool>
{
 800992e:	b510      	push	{r4, lr}
 8009930:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009932:	4b04      	ldr	r3, [pc, #16]	; (8009944 <memp_malloc_pool+0x1c>)
 8009934:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009938:	4903      	ldr	r1, [pc, #12]	; (8009948 <memp_malloc_pool+0x20>)
 800993a:	4804      	ldr	r0, [pc, #16]	; (800994c <memp_malloc_pool+0x24>)
 800993c:	f008 fdd8 	bl	80124f0 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009940:	4620      	mov	r0, r4
 8009942:	bd10      	pop	{r4, pc}
 8009944:	08015ad4 	.word	0x08015ad4
 8009948:	08015b28 	.word	0x08015b28
 800994c:	08014fe0 	.word	0x08014fe0

08009950 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009950:	280c      	cmp	r0, #12
{
 8009952:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009954:	d806      	bhi.n	8009964 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009956:	4b08      	ldr	r3, [pc, #32]	; (8009978 <memp_malloc+0x28>)
 8009958:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800995c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009960:	f7ff bf76 	b.w	8009850 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <memp_malloc+0x2c>)
 8009966:	f240 1257 	movw	r2, #343	; 0x157
 800996a:	4905      	ldr	r1, [pc, #20]	; (8009980 <memp_malloc+0x30>)
 800996c:	4805      	ldr	r0, [pc, #20]	; (8009984 <memp_malloc+0x34>)
 800996e:	f008 fdbf 	bl	80124f0 <iprintf>
}
 8009972:	2000      	movs	r0, #0
 8009974:	bd08      	pop	{r3, pc}
 8009976:	bf00      	nop
 8009978:	08015c34 	.word	0x08015c34
 800997c:	08015ad4 	.word	0x08015ad4
 8009980:	08015b3c 	.word	0x08015b3c
 8009984:	08014fe0 	.word	0x08014fe0

08009988 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009988:	b180      	cbz	r0, 80099ac <memp_free_pool+0x24>
{
 800998a:	b570      	push	{r4, r5, r6, lr}
 800998c:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800998e:	b161      	cbz	r1, 80099aa <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009990:	078b      	lsls	r3, r1, #30
 8009992:	4605      	mov	r5, r0
 8009994:	d111      	bne.n	80099ba <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 8009996:	f006 ff11 	bl	80107bc <sys_arch_protect>
  memp->next = *desc->tab;
 800999a:	68ab      	ldr	r3, [r5, #8]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80099a0:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 80099a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80099a6:	f006 bf15 	b.w	80107d4 <sys_arch_unprotect>
}
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80099ac:	4b07      	ldr	r3, [pc, #28]	; (80099cc <memp_free_pool+0x44>)
 80099ae:	f240 1295 	movw	r2, #405	; 0x195
 80099b2:	4907      	ldr	r1, [pc, #28]	; (80099d0 <memp_free_pool+0x48>)
 80099b4:	4807      	ldr	r0, [pc, #28]	; (80099d4 <memp_free_pool+0x4c>)
 80099b6:	f008 bd9b 	b.w	80124f0 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <memp_free_pool+0x44>)
 80099bc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80099c0:	4905      	ldr	r1, [pc, #20]	; (80099d8 <memp_free_pool+0x50>)
 80099c2:	4804      	ldr	r0, [pc, #16]	; (80099d4 <memp_free_pool+0x4c>)
 80099c4:	f008 fd94 	bl	80124f0 <iprintf>
 80099c8:	e7e5      	b.n	8009996 <memp_free_pool+0xe>
 80099ca:	bf00      	nop
 80099cc:	08015ad4 	.word	0x08015ad4
 80099d0:	08015b28 	.word	0x08015b28
 80099d4:	08014fe0 	.word	0x08014fe0
 80099d8:	08015b5c 	.word	0x08015b5c

080099dc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80099dc:	280c      	cmp	r0, #12
 80099de:	d812      	bhi.n	8009a06 <memp_free+0x2a>
{
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	460c      	mov	r4, r1

  if (mem == NULL) {
 80099e4:	b171      	cbz	r1, 8009a04 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <memp_free+0x48>)
 80099e8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 80099ec:	078b      	lsls	r3, r1, #30
 80099ee:	d111      	bne.n	8009a14 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 80099f0:	f006 fee4 	bl	80107bc <sys_arch_protect>
  memp->next = *desc->tab;
 80099f4:	68ab      	ldr	r3, [r5, #8]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80099fa:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80099fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009a00:	f006 bee8 	b.w	80107d4 <sys_arch_unprotect>
}
 8009a04:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009a06:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <memp_free+0x4c>)
 8009a08:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009a0c:	4907      	ldr	r1, [pc, #28]	; (8009a2c <memp_free+0x50>)
 8009a0e:	4808      	ldr	r0, [pc, #32]	; (8009a30 <memp_free+0x54>)
 8009a10:	f008 bd6e 	b.w	80124f0 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <memp_free+0x4c>)
 8009a16:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009a1a:	4906      	ldr	r1, [pc, #24]	; (8009a34 <memp_free+0x58>)
 8009a1c:	4804      	ldr	r0, [pc, #16]	; (8009a30 <memp_free+0x54>)
 8009a1e:	f008 fd67 	bl	80124f0 <iprintf>
 8009a22:	e7e5      	b.n	80099f0 <memp_free+0x14>
 8009a24:	08015c34 	.word	0x08015c34
 8009a28:	08015ad4 	.word	0x08015ad4
 8009a2c:	08015b7c 	.word	0x08015b7c
 8009a30:	08014fe0 	.word	0x08014fe0
 8009a34:	08015b5c 	.word	0x08015b5c

08009a38 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009a38:	f06f 000b 	mvn.w	r0, #11
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <netif_issue_reports>:
{
 8009a40:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009a42:	4604      	mov	r4, r0
 8009a44:	b150      	cbz	r0, 8009a5c <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009a46:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009a4a:	f003 0205 	and.w	r2, r3, #5
 8009a4e:	2a05      	cmp	r2, #5
 8009a50:	d103      	bne.n	8009a5a <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009a52:	6862      	ldr	r2, [r4, #4]
 8009a54:	b10a      	cbz	r2, 8009a5a <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009a56:	071b      	lsls	r3, r3, #28
 8009a58:	d408      	bmi.n	8009a6c <netif_issue_reports+0x2c>
}
 8009a5a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <netif_issue_reports+0x38>)
 8009a5e:	f240 326d 	movw	r2, #877	; 0x36d
 8009a62:	4906      	ldr	r1, [pc, #24]	; (8009a7c <netif_issue_reports+0x3c>)
 8009a64:	4806      	ldr	r0, [pc, #24]	; (8009a80 <netif_issue_reports+0x40>)
 8009a66:	f008 fd43 	bl	80124f0 <iprintf>
 8009a6a:	e7ec      	b.n	8009a46 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8009a6c:	1d21      	adds	r1, r4, #4
 8009a6e:	4620      	mov	r0, r4
}
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8009a74:	f005 be06 	b.w	800f684 <etharp_request>
 8009a78:	08015c68 	.word	0x08015c68
 8009a7c:	08015c9c 	.word	0x08015c9c
 8009a80:	08014fe0 	.word	0x08014fe0

08009a84 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	4605      	mov	r5, r0
 8009a88:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009a8a:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009a8c:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009a8e:	b1b9      	cbz	r1, 8009ac0 <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009a90:	686b      	ldr	r3, [r5, #4]
 8009a92:	6822      	ldr	r2, [r4, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d101      	bne.n	8009a9c <netif_do_set_ipaddr.isra.0+0x18>
}
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009a9c:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009aa2:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009aa4:	f002 f82e 	bl	800bb04 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009aa8:	a901      	add	r1, sp, #4
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f005 f99c 	bl	800ede8 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009ab0:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009ab6:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ab8:	f7ff ffc2 	bl	8009a40 <netif_issue_reports>
}
 8009abc:	b002      	add	sp, #8
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <netif_do_set_ipaddr.isra.0+0x4c>)
 8009ac2:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009ac6:	4903      	ldr	r1, [pc, #12]	; (8009ad4 <netif_do_set_ipaddr.isra.0+0x50>)
 8009ac8:	4803      	ldr	r0, [pc, #12]	; (8009ad8 <netif_do_set_ipaddr.isra.0+0x54>)
 8009aca:	f008 fd11 	bl	80124f0 <iprintf>
 8009ace:	e7df      	b.n	8009a90 <netif_do_set_ipaddr.isra.0+0xc>
 8009ad0:	08015c68 	.word	0x08015c68
 8009ad4:	08015220 	.word	0x08015220
 8009ad8:	08014fe0 	.word	0x08014fe0

08009adc <netif_init>:
}
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop

08009ae0 <netif_set_addr>:
{
 8009ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4617      	mov	r7, r2
 8009aea:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8009aec:	f7fb f94e 	bl	8004d8c <sys_check_core_locking>
  if (ipaddr == NULL) {
 8009af0:	b1fd      	cbz	r5, 8009b32 <netif_set_addr+0x52>
  if (netmask == NULL) {
 8009af2:	b187      	cbz	r7, 8009b16 <netif_set_addr+0x36>
  if (gw == NULL) {
 8009af4:	b196      	cbz	r6, 8009b1c <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 8009af6:	682b      	ldr	r3, [r5, #0]
 8009af8:	b1a3      	cbz	r3, 8009b24 <netif_set_addr+0x44>
 8009afa:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68a1      	ldr	r1, [r4, #8]
 8009b00:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b02:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009b04:	bf18      	it	ne
 8009b06:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b08:	6833      	ldr	r3, [r6, #0]
 8009b0a:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009b0c:	bf18      	it	ne
 8009b0e:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8009b10:	b19a      	cbz	r2, 8009b3a <netif_set_addr+0x5a>
}
 8009b12:	b003      	add	sp, #12
 8009b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8009b16:	4f0c      	ldr	r7, [pc, #48]	; (8009b48 <netif_set_addr+0x68>)
  if (gw == NULL) {
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	d1ec      	bne.n	8009af6 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8009b1c:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 8009b1e:	4e0a      	ldr	r6, [pc, #40]	; (8009b48 <netif_set_addr+0x68>)
  remove = ip4_addr_isany(ipaddr);
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1ea      	bne.n	8009afa <netif_set_addr+0x1a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009b24:	aa01      	add	r2, sp, #4
 8009b26:	4629      	mov	r1, r5
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff ffab 	bl	8009a84 <netif_do_set_ipaddr.isra.0>
 8009b2e:	2201      	movs	r2, #1
 8009b30:	e7e4      	b.n	8009afc <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 8009b32:	4d05      	ldr	r5, [pc, #20]	; (8009b48 <netif_set_addr+0x68>)
  if (netmask == NULL) {
 8009b34:	2f00      	cmp	r7, #0
 8009b36:	d1dd      	bne.n	8009af4 <netif_set_addr+0x14>
 8009b38:	e7ed      	b.n	8009b16 <netif_set_addr+0x36>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009b3a:	aa01      	add	r2, sp, #4
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f7ff ffa0 	bl	8009a84 <netif_do_set_ipaddr.isra.0>
}
 8009b44:	b003      	add	sp, #12
 8009b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b48:	08017634 	.word	0x08017634

08009b4c <netif_add>:
{
 8009b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b50:	4606      	mov	r6, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	4615      	mov	r5, r2
 8009b56:	461f      	mov	r7, r3
 8009b58:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 8009b5c:	f7fb f916 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	f000 8083 	beq.w	8009c6c <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009b66:	f1b8 0f00 	cmp.w	r8, #0
 8009b6a:	f000 8088 	beq.w	8009c7e <netif_add+0x132>
  if (ipaddr == NULL) {
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	d070      	beq.n	8009c54 <netif_add+0x108>
  if (netmask == NULL) {
 8009b72:	2d00      	cmp	r5, #0
 8009b74:	d069      	beq.n	8009c4a <netif_add+0xfe>
  if (gw == NULL) {
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	d06a      	beq.n	8009c50 <netif_add+0x104>
  netif->state = state;
 8009b7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009b7c:	4621      	mov	r1, r4
  netif->num = netif_num;
 8009b7e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8009cac <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009b82:	2400      	movs	r4, #0
  netif->state = state;
 8009b84:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009b86:	463b      	mov	r3, r7
  netif->input = input;
 8009b88:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009b8a:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 8009b8c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 8009b8e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 8009b90:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 8009b94:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 8009b96:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 8009b9a:	483d      	ldr	r0, [pc, #244]	; (8009c90 <netif_add+0x144>)
  netif->flags = 0;
 8009b9c:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 8009ba0:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009ba2:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 8009ba4:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009ba6:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009baa:	f7ff ff99 	bl	8009ae0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8009bae:	4630      	mov	r0, r6
 8009bb0:	47c0      	blx	r8
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d157      	bne.n	8009c66 <netif_add+0x11a>
      if (netif->num == 255) {
 8009bb6:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8009bba:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8009cb0 <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009bbe:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8009ca0 <netif_add+0x154>
 8009bc2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8009cb4 <netif_add+0x168>
 8009bc6:	4f33      	ldr	r7, [pc, #204]	; (8009c94 <netif_add+0x148>)
      if (netif->num == 255) {
 8009bc8:	2aff      	cmp	r2, #255	; 0xff
 8009bca:	d102      	bne.n	8009bd2 <netif_add+0x86>
        netif->num = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009bd2:	f8d8 4000 	ldr.w	r4, [r8]
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d042      	beq.n	8009c60 <netif_add+0x114>
      num_netifs = 0;
 8009bda:	2500      	movs	r5, #0
 8009bdc:	e007      	b.n	8009bee <netif_add+0xa2>
        if (netif2->num == netif->num) {
 8009bde:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8009be2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d014      	beq.n	8009c14 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009bea:	6824      	ldr	r4, [r4, #0]
 8009bec:	b1fc      	cbz	r4, 8009c2e <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009bee:	42b4      	cmp	r4, r6
        num_netifs++;
 8009bf0:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009bf4:	d013      	beq.n	8009c1e <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009bf6:	2dff      	cmp	r5, #255	; 0xff
 8009bf8:	ddf1      	ble.n	8009bde <netif_add+0x92>
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	f240 128d 	movw	r2, #397	; 0x18d
 8009c00:	4925      	ldr	r1, [pc, #148]	; (8009c98 <netif_add+0x14c>)
 8009c02:	4638      	mov	r0, r7
 8009c04:	f008 fc74 	bl	80124f0 <iprintf>
        if (netif2->num == netif->num) {
 8009c08:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8009c0c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d1ea      	bne.n	8009bea <netif_add+0x9e>
          netif->num++;
 8009c14:	3201      	adds	r2, #1
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8009c1c:	e7d4      	b.n	8009bc8 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009c1e:	465b      	mov	r3, fp
 8009c20:	f240 128b 	movw	r2, #395	; 0x18b
 8009c24:	4649      	mov	r1, r9
 8009c26:	4638      	mov	r0, r7
 8009c28:	f008 fc62 	bl	80124f0 <iprintf>
 8009c2c:	e7e3      	b.n	8009bf6 <netif_add+0xaa>
  netif->next = netif_list;
 8009c2e:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 8009c32:	2bfe      	cmp	r3, #254	; 0xfe
 8009c34:	d012      	beq.n	8009c5c <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 8009c36:	3301      	adds	r3, #1
 8009c38:	b2db      	uxtb	r3, r3
  return netif;
 8009c3a:	4630      	mov	r0, r6
  netif->next = netif_list;
 8009c3c:	6034      	str	r4, [r6, #0]
 8009c3e:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 8009c42:	f8c8 6000 	str.w	r6, [r8]
}
 8009c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009c4a:	4d14      	ldr	r5, [pc, #80]	; (8009c9c <netif_add+0x150>)
  if (gw == NULL) {
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	d194      	bne.n	8009b7a <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009c50:	4f12      	ldr	r7, [pc, #72]	; (8009c9c <netif_add+0x150>)
 8009c52:	e792      	b.n	8009b7a <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009c54:	4c11      	ldr	r4, [pc, #68]	; (8009c9c <netif_add+0x150>)
  if (netmask == NULL) {
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	d18d      	bne.n	8009b76 <netif_add+0x2a>
 8009c5a:	e7f6      	b.n	8009c4a <netif_add+0xfe>
    netif_num = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e7ec      	b.n	8009c3a <netif_add+0xee>
  if (netif->num == 254) {
 8009c60:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009c64:	e7e5      	b.n	8009c32 <netif_add+0xe6>
    return NULL;
 8009c66:	4620      	mov	r0, r4
}
 8009c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <netif_add+0x154>)
 8009c6e:	f240 1227 	movw	r2, #295	; 0x127
 8009c72:	490c      	ldr	r1, [pc, #48]	; (8009ca4 <netif_add+0x158>)
 8009c74:	4807      	ldr	r0, [pc, #28]	; (8009c94 <netif_add+0x148>)
 8009c76:	f008 fc3b 	bl	80124f0 <iprintf>
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	e7e3      	b.n	8009c46 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009c7e:	4b08      	ldr	r3, [pc, #32]	; (8009ca0 <netif_add+0x154>)
 8009c80:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009c84:	4908      	ldr	r1, [pc, #32]	; (8009ca8 <netif_add+0x15c>)
 8009c86:	4803      	ldr	r0, [pc, #12]	; (8009c94 <netif_add+0x148>)
 8009c88:	f008 fc32 	bl	80124f0 <iprintf>
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	e7da      	b.n	8009c46 <netif_add+0xfa>
 8009c90:	08009a39 	.word	0x08009a39
 8009c94:	08014fe0 	.word	0x08014fe0
 8009c98:	08015d14 	.word	0x08015d14
 8009c9c:	08017634 	.word	0x08017634
 8009ca0:	08015c68 	.word	0x08015c68
 8009ca4:	08015cc0 	.word	0x08015cc0
 8009ca8:	08015cdc 	.word	0x08015cdc
 8009cac:	24010d34 	.word	0x24010d34
 8009cb0:	24010d30 	.word	0x24010d30
 8009cb4:	08015d00 	.word	0x08015d00

08009cb8 <netif_set_default>:
{
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009cbc:	f7fb f866 	bl	8004d8c <sys_check_core_locking>
  netif_default = netif;
 8009cc0:	4b01      	ldr	r3, [pc, #4]	; (8009cc8 <netif_set_default+0x10>)
 8009cc2:	601c      	str	r4, [r3, #0]
}
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	bf00      	nop
 8009cc8:	24010d2c 	.word	0x24010d2c

08009ccc <netif_set_up>:
{
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009cd0:	f7fb f85c 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009cd4:	b174      	cbz	r4, 8009cf4 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009cd6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009cda:	07da      	lsls	r2, r3, #31
 8009cdc:	d500      	bpl.n	8009ce0 <netif_set_up+0x14>
}
 8009cde:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009ce8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8009cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009cf0:	f7ff bea6 	b.w	8009a40 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009cf4:	4b04      	ldr	r3, [pc, #16]	; (8009d08 <netif_set_up+0x3c>)
 8009cf6:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009cfa:	4904      	ldr	r1, [pc, #16]	; (8009d0c <netif_set_up+0x40>)
 8009cfc:	4804      	ldr	r0, [pc, #16]	; (8009d10 <netif_set_up+0x44>)
}
 8009cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009d02:	f008 bbf5 	b.w	80124f0 <iprintf>
 8009d06:	bf00      	nop
 8009d08:	08015c68 	.word	0x08015c68
 8009d0c:	08015d44 	.word	0x08015d44
 8009d10:	08014fe0 	.word	0x08014fe0

08009d14 <netif_set_down>:
{
 8009d14:	b510      	push	{r4, lr}
 8009d16:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009d18:	f7fb f838 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009d1c:	b17c      	cbz	r4, 8009d3e <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 8009d1e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009d22:	07da      	lsls	r2, r3, #31
 8009d24:	d505      	bpl.n	8009d32 <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d26:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d2a:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d2c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d30:	d400      	bmi.n	8009d34 <netif_set_down+0x20>
}
 8009d32:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8009d34:	4620      	mov	r0, r4
}
 8009d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 8009d3a:	f005 ba69 	b.w	800f210 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <netif_set_down+0x3c>)
 8009d40:	f240 329b 	movw	r2, #923	; 0x39b
 8009d44:	4903      	ldr	r1, [pc, #12]	; (8009d54 <netif_set_down+0x40>)
 8009d46:	4804      	ldr	r0, [pc, #16]	; (8009d58 <netif_set_down+0x44>)
}
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009d4c:	f008 bbd0 	b.w	80124f0 <iprintf>
 8009d50:	08015c68 	.word	0x08015c68
 8009d54:	08015d60 	.word	0x08015d60
 8009d58:	08014fe0 	.word	0x08014fe0

08009d5c <netif_set_link_up>:
{
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009d60:	f7fb f814 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009d64:	b19c      	cbz	r4, 8009d8e <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009d66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009d6a:	075a      	lsls	r2, r3, #29
 8009d6c:	d500      	bpl.n	8009d70 <netif_set_link_up+0x14>
}
 8009d6e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009d70:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009d74:	2103      	movs	r1, #3
 8009d76:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009d78:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009d7c:	f7ff fe60 	bl	8009a40 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8009d80:	69e3      	ldr	r3, [r4, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0f3      	beq.n	8009d6e <netif_set_link_up+0x12>
 8009d86:	4620      	mov	r0, r4
}
 8009d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8009d8c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009d8e:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <netif_set_link_up+0x44>)
 8009d90:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009d94:	4903      	ldr	r1, [pc, #12]	; (8009da4 <netif_set_link_up+0x48>)
 8009d96:	4804      	ldr	r0, [pc, #16]	; (8009da8 <netif_set_link_up+0x4c>)
}
 8009d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009d9c:	f008 bba8 	b.w	80124f0 <iprintf>
 8009da0:	08015c68 	.word	0x08015c68
 8009da4:	08015d80 	.word	0x08015d80
 8009da8:	08014fe0 	.word	0x08014fe0

08009dac <netif_set_link_down>:
{
 8009dac:	b510      	push	{r4, lr}
 8009dae:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009db0:	f7fa ffec 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009db4:	b174      	cbz	r4, 8009dd4 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009db6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009dba:	075a      	lsls	r2, r3, #29
 8009dbc:	d509      	bpl.n	8009dd2 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009dbe:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 8009dc2:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009dc4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009dc8:	b11a      	cbz	r2, 8009dd2 <netif_set_link_down+0x26>
 8009dca:	4620      	mov	r0, r4
}
 8009dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8009dd0:	4710      	bx	r2
}
 8009dd2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009dd4:	4b04      	ldr	r3, [pc, #16]	; (8009de8 <netif_set_link_down+0x3c>)
 8009dd6:	f240 4206 	movw	r2, #1030	; 0x406
 8009dda:	4904      	ldr	r1, [pc, #16]	; (8009dec <netif_set_link_down+0x40>)
 8009ddc:	4804      	ldr	r0, [pc, #16]	; (8009df0 <netif_set_link_down+0x44>)
}
 8009dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009de2:	f008 bb85 	b.w	80124f0 <iprintf>
 8009de6:	bf00      	nop
 8009de8:	08015c68 	.word	0x08015c68
 8009dec:	08015da4 	.word	0x08015da4
 8009df0:	08014fe0 	.word	0x08014fe0

08009df4 <netif_set_link_callback>:
{
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4604      	mov	r4, r0
 8009df8:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009dfa:	f7fa ffc7 	bl	8004d8c <sys_check_core_locking>
  if (netif) {
 8009dfe:	b104      	cbz	r4, 8009e02 <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 8009e00:	61e5      	str	r5, [r4, #28]
}
 8009e02:	bd38      	pop	{r3, r4, r5, pc}

08009e04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009e04:	b510      	push	{r4, lr}
 8009e06:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8009e08:	f7fa ffc0 	bl	8004d8c <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8009e0c:	b164      	cbz	r4, 8009e28 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <netif_get_by_index+0x28>)
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	b910      	cbnz	r0, 8009e1a <netif_get_by_index+0x16>
 8009e14:	e007      	b.n	8009e26 <netif_get_by_index+0x22>
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	b128      	cbz	r0, 8009e26 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8009e1a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009e1e:	3301      	adds	r3, #1
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	d1f7      	bne.n	8009e16 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 8009e26:	bd10      	pop	{r4, pc}
  return NULL;
 8009e28:	4620      	mov	r0, r4
}
 8009e2a:	bd10      	pop	{r4, pc}
 8009e2c:	24010d30 	.word	0x24010d30

08009e30 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009e30:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009e32:	f006 fcc3 	bl	80107bc <sys_arch_protect>
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <pbuf_free_ooseq_callback+0x2c>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	f006 fcca 	bl	80107d4 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009e40:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <pbuf_free_ooseq_callback+0x30>)
 8009e42:	6818      	ldr	r0, [r3, #0]
 8009e44:	b910      	cbnz	r0, 8009e4c <pbuf_free_ooseq_callback+0x1c>
 8009e46:	e008      	b.n	8009e5a <pbuf_free_ooseq_callback+0x2a>
 8009e48:	68c0      	ldr	r0, [r0, #12]
 8009e4a:	b130      	cbz	r0, 8009e5a <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8009e4c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0fa      	beq.n	8009e48 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8009e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8009e56:	f001 be7f 	b.w	800bb58 <tcp_free_ooseq>
}
 8009e5a:	bd08      	pop	{r3, pc}
 8009e5c:	24010d35 	.word	0x24010d35
 8009e60:	24010d38 	.word	0x24010d38

08009e64 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8009e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 8009e68:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009e6a:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009f90 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8009e6e:	4605      	mov	r5, r0
 8009e70:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 8009e72:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009e74:	8944      	ldrh	r4, [r0, #10]
 8009e76:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009e78:	f8df b128 	ldr.w	fp, [pc, #296]	; 8009fa4 <pbuf_copy.part.0+0x140>
 8009e7c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8009f98 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009e80:	1be4      	subs	r4, r4, r7
 8009e82:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009e84:	6868      	ldr	r0, [r5, #4]
 8009e86:	429c      	cmp	r4, r3
 8009e88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e8c:	4438      	add	r0, r7
 8009e8e:	bf28      	it	cs
 8009e90:	461c      	movcs	r4, r3
 8009e92:	4431      	add	r1, r6
 8009e94:	4622      	mov	r2, r4
    offset_to += len;
 8009e96:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009e98:	f008 fceb 	bl	8012872 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009e9c:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8009e9e:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009ea0:	429f      	cmp	r7, r3
 8009ea2:	d838      	bhi.n	8009f16 <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009ea4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009ea8:	429e      	cmp	r6, r3
 8009eaa:	d82a      	bhi.n	8009f02 <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 8009eac:	429e      	cmp	r6, r3
 8009eae:	d318      	bcc.n	8009ee2 <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8009eb0:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8009eb2:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8009eb6:	429f      	cmp	r7, r3
 8009eb8:	d04c      	beq.n	8009f54 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009eba:	f1b8 0f00 	cmp.w	r8, #0
 8009ebe:	d145      	bne.n	8009f4c <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009ec0:	892a      	ldrh	r2, [r5, #8]
 8009ec2:	896b      	ldrh	r3, [r5, #10]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d14d      	bne.n	8009f64 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009ec8:	6828      	ldr	r0, [r5, #0]
 8009eca:	b140      	cbz	r0, 8009ede <pbuf_copy.part.0+0x7a>
 8009ecc:	4b30      	ldr	r3, [pc, #192]	; (8009f90 <pbuf_copy.part.0+0x12c>)
 8009ece:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009ed2:	4930      	ldr	r1, [pc, #192]	; (8009f94 <pbuf_copy.part.0+0x130>)
 8009ed4:	4830      	ldr	r0, [pc, #192]	; (8009f98 <pbuf_copy.part.0+0x134>)
 8009ed6:	f008 fb0b 	bl	80124f0 <iprintf>
 8009eda:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8009ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8009ee2:	896a      	ldrh	r2, [r5, #10]
 8009ee4:	4297      	cmp	r7, r2
 8009ee6:	d040      	beq.n	8009f6a <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009ee8:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d01a      	beq.n	8009f26 <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009ef0:	896c      	ldrh	r4, [r5, #10]
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	d0c4      	beq.n	8009e80 <pbuf_copy.part.0+0x1c>
 8009ef6:	892b      	ldrh	r3, [r5, #8]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	d045      	beq.n	8009f88 <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009efc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009f00:	e7be      	b.n	8009e80 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009f02:	4653      	mov	r3, sl
 8009f04:	f240 32da 	movw	r2, #986	; 0x3da
 8009f08:	4924      	ldr	r1, [pc, #144]	; (8009f9c <pbuf_copy.part.0+0x138>)
 8009f0a:	4648      	mov	r0, r9
 8009f0c:	f008 faf0 	bl	80124f0 <iprintf>
    if (offset_from >= p_from->len) {
 8009f10:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009f14:	e7ca      	b.n	8009eac <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f16:	4653      	mov	r3, sl
 8009f18:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009f1c:	4659      	mov	r1, fp
 8009f1e:	4648      	mov	r0, r9
 8009f20:	f008 fae6 	bl	80124f0 <iprintf>
 8009f24:	e7be      	b.n	8009ea4 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f26:	f8d8 2000 	ldr.w	r2, [r8]
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	d0e0      	beq.n	8009ef0 <pbuf_copy.part.0+0x8c>
 8009f2e:	4b18      	ldr	r3, [pc, #96]	; (8009f90 <pbuf_copy.part.0+0x12c>)
 8009f30:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009f34:	4917      	ldr	r1, [pc, #92]	; (8009f94 <pbuf_copy.part.0+0x130>)
 8009f36:	4818      	ldr	r0, [pc, #96]	; (8009f98 <pbuf_copy.part.0+0x134>)
 8009f38:	f008 fada 	bl	80124f0 <iprintf>
 8009f3c:	f06f 0005 	mvn.w	r0, #5
}
 8009f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009f44:	f1b8 0f00 	cmp.w	r8, #0
 8009f48:	d00a      	beq.n	8009f60 <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 8009f4a:	2700      	movs	r7, #0
 8009f4c:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009f4e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009f52:	e7c9      	b.n	8009ee8 <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 8009f54:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009f56:	2d00      	cmp	r5, #0
 8009f58:	d1f4      	bne.n	8009f44 <pbuf_copy.part.0+0xe0>
 8009f5a:	f1b8 0f00 	cmp.w	r8, #0
 8009f5e:	d108      	bne.n	8009f72 <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	d1ad      	bne.n	8009ec0 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 8009f64:	2000      	movs	r0, #0
}
 8009f66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8009f6a:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009f6c:	b10d      	cbz	r5, 8009f72 <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 8009f6e:	2700      	movs	r7, #0
 8009f70:	e7ed      	b.n	8009f4e <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <pbuf_copy.part.0+0x12c>)
 8009f74:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009f78:	4909      	ldr	r1, [pc, #36]	; (8009fa0 <pbuf_copy.part.0+0x13c>)
 8009f7a:	4807      	ldr	r0, [pc, #28]	; (8009f98 <pbuf_copy.part.0+0x134>)
 8009f7c:	f008 fab8 	bl	80124f0 <iprintf>
 8009f80:	f06f 000f 	mvn.w	r0, #15
}
 8009f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0b6      	beq.n	8009efc <pbuf_copy.part.0+0x98>
 8009f8e:	e79d      	b.n	8009ecc <pbuf_copy.part.0+0x68>
 8009f90:	08015dc8 	.word	0x08015dc8
 8009f94:	08015e3c 	.word	0x08015e3c
 8009f98:	08014fe0 	.word	0x08014fe0
 8009f9c:	08015e10 	.word	0x08015e10
 8009fa0:	08015e2c 	.word	0x08015e2c
 8009fa4:	08015df8 	.word	0x08015df8

08009fa8 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009fa8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009fac:	2b01      	cmp	r3, #1
{
 8009fae:	b570      	push	{r4, r5, r6, lr}
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009fb6:	d10d      	bne.n	8009fd4 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009fb8:	200b      	movs	r0, #11
 8009fba:	f7ff fcc9 	bl	8009950 <memp_malloc>
  if (p == NULL) {
 8009fbe:	b140      	cbz	r0, 8009fd2 <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 8009fc0:	2300      	movs	r3, #0
  p->ref = 1;
 8009fc2:	2201      	movs	r2, #1
  p->payload = payload;
 8009fc4:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8009fc6:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 8009fc8:	6003      	str	r3, [r0, #0]
  p->len = len;
 8009fca:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8009fcc:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8009fce:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8009fd0:	81c2      	strh	r2, [r0, #14]
}
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009fd4:	4b03      	ldr	r3, [pc, #12]	; (8009fe4 <pbuf_alloc_reference+0x3c>)
 8009fd6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009fda:	4903      	ldr	r1, [pc, #12]	; (8009fe8 <pbuf_alloc_reference+0x40>)
 8009fdc:	4803      	ldr	r0, [pc, #12]	; (8009fec <pbuf_alloc_reference+0x44>)
 8009fde:	f008 fa87 	bl	80124f0 <iprintf>
 8009fe2:	e7e9      	b.n	8009fb8 <pbuf_alloc_reference+0x10>
 8009fe4:	08015dc8 	.word	0x08015dc8
 8009fe8:	08015e68 	.word	0x08015e68
 8009fec:	08014fe0 	.word	0x08014fe0

08009ff0 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009ff0:	3003      	adds	r0, #3
 8009ff2:	f020 0003 	bic.w	r0, r0, #3
{
 8009ff6:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009ff8:	eb01 0e00 	add.w	lr, r1, r0
{
 8009ffc:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800a000:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a002:	45e6      	cmp	lr, ip
 800a004:	d80d      	bhi.n	800a022 <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 800a006:	b104      	cbz	r4, 800a00a <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a008:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a00a:	4618      	mov	r0, r3
  p->next = NULL;
 800a00c:	2300      	movs	r3, #0
  p->payload = payload;
 800a00e:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 800a010:	2402      	movs	r4, #2
  p->next = NULL;
 800a012:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800a014:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800a016:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800a018:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800a01a:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800a01c:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 800a01e:	81c3      	strh	r3, [r0, #14]
}
 800a020:	bd10      	pop	{r4, pc}
    return NULL;
 800a022:	2000      	movs	r0, #0
}
 800a024:	bd10      	pop	{r4, pc}
 800a026:	bf00      	nop

0800a028 <pbuf_add_header>:
{
 800a028:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a02a:	b310      	cbz	r0, 800a072 <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a02c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a030:	d20c      	bcs.n	800a04c <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 800a032:	b169      	cbz	r1, 800a050 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 800a034:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a038:	8902      	ldrh	r2, [r0, #8]
 800a03a:	4603      	mov	r3, r0
 800a03c:	4462      	add	r2, ip
 800a03e:	b292      	uxth	r2, r2
 800a040:	4594      	cmp	ip, r2
 800a042:	d803      	bhi.n	800a04c <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a044:	f990 000c 	ldrsb.w	r0, [r0, #12]
 800a048:	2800      	cmp	r0, #0
 800a04a:	db03      	blt.n	800a054 <pbuf_add_header+0x2c>
    return 1;
 800a04c:	2001      	movs	r0, #1
}
 800a04e:	bd08      	pop	{r3, pc}
    return 0;
 800a050:	4608      	mov	r0, r1
}
 800a052:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800a054:	6858      	ldr	r0, [r3, #4]
 800a056:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a058:	f103 0010 	add.w	r0, r3, #16
 800a05c:	4281      	cmp	r1, r0
 800a05e:	d3f5      	bcc.n	800a04c <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a060:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800a064:	2000      	movs	r0, #0
  p->payload = payload;
 800a066:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a068:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a06a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a06c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800a070:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a072:	4b04      	ldr	r3, [pc, #16]	; (800a084 <pbuf_add_header+0x5c>)
 800a074:	f240 12df 	movw	r2, #479	; 0x1df
 800a078:	4903      	ldr	r1, [pc, #12]	; (800a088 <pbuf_add_header+0x60>)
 800a07a:	4804      	ldr	r0, [pc, #16]	; (800a08c <pbuf_add_header+0x64>)
 800a07c:	f008 fa38 	bl	80124f0 <iprintf>
    return 1;
 800a080:	2001      	movs	r0, #1
}
 800a082:	bd08      	pop	{r3, pc}
 800a084:	08015dc8 	.word	0x08015dc8
 800a088:	080153c0 	.word	0x080153c0
 800a08c:	08014fe0 	.word	0x08014fe0

0800a090 <pbuf_remove_header>:
{
 800a090:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a092:	b1a0      	cbz	r0, 800a0be <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a094:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a098:	d21a      	bcs.n	800a0d0 <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 800a09a:	b171      	cbz	r1, 800a0ba <pbuf_remove_header+0x2a>
 800a09c:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 800a09e:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a0a0:	895a      	ldrh	r2, [r3, #10]
 800a0a2:	4290      	cmp	r0, r2
 800a0a4:	d816      	bhi.n	800a0d4 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a0a6:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a0a8:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a0aa:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a0ac:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a0ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a0b0:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a0b2:	605c      	str	r4, [r3, #4]
  return 0;
 800a0b4:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a0b6:	811a      	strh	r2, [r3, #8]
}
 800a0b8:	bd10      	pop	{r4, pc}
    return 0;
 800a0ba:	4608      	mov	r0, r1
}
 800a0bc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a0be:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <pbuf_remove_header+0x58>)
 800a0c0:	f240 224b 	movw	r2, #587	; 0x24b
 800a0c4:	4909      	ldr	r1, [pc, #36]	; (800a0ec <pbuf_remove_header+0x5c>)
 800a0c6:	480a      	ldr	r0, [pc, #40]	; (800a0f0 <pbuf_remove_header+0x60>)
 800a0c8:	f008 fa12 	bl	80124f0 <iprintf>
    return 1;
 800a0cc:	2001      	movs	r0, #1
}
 800a0ce:	bd10      	pop	{r4, pc}
    return 1;
 800a0d0:	2001      	movs	r0, #1
}
 800a0d2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a0d4:	4b04      	ldr	r3, [pc, #16]	; (800a0e8 <pbuf_remove_header+0x58>)
 800a0d6:	f240 2255 	movw	r2, #597	; 0x255
 800a0da:	4906      	ldr	r1, [pc, #24]	; (800a0f4 <pbuf_remove_header+0x64>)
 800a0dc:	4804      	ldr	r0, [pc, #16]	; (800a0f0 <pbuf_remove_header+0x60>)
 800a0de:	f008 fa07 	bl	80124f0 <iprintf>
 800a0e2:	2001      	movs	r0, #1
}
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	bf00      	nop
 800a0e8:	08015dc8 	.word	0x08015dc8
 800a0ec:	080153c0 	.word	0x080153c0
 800a0f0:	08014fe0 	.word	0x08014fe0
 800a0f4:	08015e7c 	.word	0x08015e7c

0800a0f8 <pbuf_header_force>:
  if (header_size_increment < 0) {
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	db1a      	blt.n	800a132 <pbuf_header_force+0x3a>
{
 800a0fc:	b508      	push	{r3, lr}
 800a0fe:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 800a100:	b1d0      	cbz	r0, 800a138 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 800a102:	b341      	cbz	r1, 800a156 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 800a104:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a108:	891a      	ldrh	r2, [r3, #8]
 800a10a:	4462      	add	r2, ip
 800a10c:	b292      	uxth	r2, r2
 800a10e:	4594      	cmp	ip, r2
 800a110:	d81f      	bhi.n	800a152 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a112:	f993 000c 	ldrsb.w	r0, [r3, #12]
 800a116:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800a118:	6858      	ldr	r0, [r3, #4]
 800a11a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a11e:	db14      	blt.n	800a14a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a120:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800a124:	2000      	movs	r0, #0
  p->payload = payload;
 800a126:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a128:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a12a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a12c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800a130:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a132:	4249      	negs	r1, r1
 800a134:	f7ff bfac 	b.w	800a090 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a138:	4b08      	ldr	r3, [pc, #32]	; (800a15c <pbuf_header_force+0x64>)
 800a13a:	f240 12df 	movw	r2, #479	; 0x1df
 800a13e:	4908      	ldr	r1, [pc, #32]	; (800a160 <pbuf_header_force+0x68>)
 800a140:	4808      	ldr	r0, [pc, #32]	; (800a164 <pbuf_header_force+0x6c>)
 800a142:	f008 f9d5 	bl	80124f0 <iprintf>
    return 1;
 800a146:	2001      	movs	r0, #1
}
 800a148:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a14a:	f103 0010 	add.w	r0, r3, #16
 800a14e:	4281      	cmp	r1, r0
 800a150:	d2e6      	bcs.n	800a120 <pbuf_header_force+0x28>
    return 1;
 800a152:	2001      	movs	r0, #1
}
 800a154:	bd08      	pop	{r3, pc}
    return 0;
 800a156:	4608      	mov	r0, r1
}
 800a158:	bd08      	pop	{r3, pc}
 800a15a:	bf00      	nop
 800a15c:	08015dc8 	.word	0x08015dc8
 800a160:	080153c0 	.word	0x080153c0
 800a164:	08014fe0 	.word	0x08014fe0

0800a168 <pbuf_free>:
{
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 800a16c:	4605      	mov	r5, r0
 800a16e:	2800      	cmp	r0, #0
 800a170:	d055      	beq.n	800a21e <pbuf_free+0xb6>
  count = 0;
 800a172:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a174:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a23c <pbuf_free+0xd4>
 800a178:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800a244 <pbuf_free+0xdc>
 800a17c:	4f2c      	ldr	r7, [pc, #176]	; (800a230 <pbuf_free+0xc8>)
 800a17e:	e008      	b.n	800a192 <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a180:	692b      	ldr	r3, [r5, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d03d      	beq.n	800a202 <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800a186:	4628      	mov	r0, r5
 800a188:	4798      	blx	r3
      count++;
 800a18a:	3601      	adds	r6, #1
 800a18c:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a18e:	b1fc      	cbz	r4, 800a1d0 <pbuf_free+0x68>
 800a190:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800a192:	f006 fb13 	bl	80107bc <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a196:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800a198:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a19a:	b1e3      	cbz	r3, 800a1d6 <pbuf_free+0x6e>
    ref = --(p->ref);
 800a19c:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800a19e:	4620      	mov	r0, r4
    ref = --(p->ref);
 800a1a0:	b2dc      	uxtb	r4, r3
 800a1a2:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a1a4:	f006 fb16 	bl	80107d4 <sys_arch_unprotect>
    if (ref == 0) {
 800a1a8:	b994      	cbnz	r4, 800a1d0 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a1aa:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800a1ac:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a1ae:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800a1b0:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a1b2:	d4e5      	bmi.n	800a180 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800a1b4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d01d      	beq.n	800a1f8 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d029      	beq.n	800a214 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a1c0:	b993      	cbnz	r3, 800a1e8 <pbuf_free+0x80>
      count++;
 800a1c2:	3601      	adds	r6, #1
          mem_free(p);
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7ff f8eb 	bl	80093a0 <mem_free>
      count++;
 800a1ca:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d1df      	bne.n	800a190 <pbuf_free+0x28>
}
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a1d6:	4643      	mov	r3, r8
 800a1d8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f008 f986 	bl	80124f0 <iprintf>
    ref = --(p->ref);
 800a1e4:	7bab      	ldrb	r3, [r5, #14]
 800a1e6:	e7d9      	b.n	800a19c <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a1e8:	4643      	mov	r3, r8
 800a1ea:	f240 320f 	movw	r2, #783	; 0x30f
 800a1ee:	4911      	ldr	r1, [pc, #68]	; (800a234 <pbuf_free+0xcc>)
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f008 f97d 	bl	80124f0 <iprintf>
 800a1f6:	e7c8      	b.n	800a18a <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	200c      	movs	r0, #12
 800a1fc:	f7ff fbee 	bl	80099dc <memp_free>
 800a200:	e7c3      	b.n	800a18a <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a202:	4643      	mov	r3, r8
 800a204:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a208:	490b      	ldr	r1, [pc, #44]	; (800a238 <pbuf_free+0xd0>)
 800a20a:	4638      	mov	r0, r7
 800a20c:	f008 f970 	bl	80124f0 <iprintf>
        pc->custom_free_function(p);
 800a210:	692b      	ldr	r3, [r5, #16]
 800a212:	e7b8      	b.n	800a186 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800a214:	4629      	mov	r1, r5
 800a216:	200b      	movs	r0, #11
 800a218:	f7ff fbe0 	bl	80099dc <memp_free>
 800a21c:	e7b5      	b.n	800a18a <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <pbuf_free+0xd4>)
 800a220:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a224:	4906      	ldr	r1, [pc, #24]	; (800a240 <pbuf_free+0xd8>)
    return 0;
 800a226:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <pbuf_free+0xc8>)
 800a22a:	f008 f961 	bl	80124f0 <iprintf>
    return 0;
 800a22e:	e7cf      	b.n	800a1d0 <pbuf_free+0x68>
 800a230:	08014fe0 	.word	0x08014fe0
 800a234:	08015ed8 	.word	0x08015ed8
 800a238:	08015eb4 	.word	0x08015eb4
 800a23c:	08015dc8 	.word	0x08015dc8
 800a240:	080153c0 	.word	0x080153c0
 800a244:	08015e9c 	.word	0x08015e9c

0800a248 <pbuf_alloc>:
  switch (type) {
 800a248:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a250:	4688      	mov	r8, r1
 800a252:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 800a254:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 800a258:	d040      	beq.n	800a2dc <pbuf_alloc+0x94>
 800a25a:	d80f      	bhi.n	800a27c <pbuf_alloc+0x34>
 800a25c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a260:	2b01      	cmp	r3, #1
 800a262:	d035      	beq.n	800a2d0 <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a264:	4b48      	ldr	r3, [pc, #288]	; (800a388 <pbuf_alloc+0x140>)
 800a266:	f240 1227 	movw	r2, #295	; 0x127
 800a26a:	4948      	ldr	r1, [pc, #288]	; (800a38c <pbuf_alloc+0x144>)
      return NULL;
 800a26c:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a26e:	4848      	ldr	r0, [pc, #288]	; (800a390 <pbuf_alloc+0x148>)
 800a270:	f008 f93e 	bl	80124f0 <iprintf>
}
 800a274:	4620      	mov	r0, r4
 800a276:	b003      	add	sp, #12
 800a278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800a27c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a280:	d1f0      	bne.n	800a264 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a282:	f109 0303 	add.w	r3, r9, #3
 800a286:	1cca      	adds	r2, r1, #3
 800a288:	4605      	mov	r5, r0
 800a28a:	f022 0203 	bic.w	r2, r2, #3
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	4413      	add	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a294:	b29b      	uxth	r3, r3
 800a296:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a29a:	4283      	cmp	r3, r0
 800a29c:	bf28      	it	cs
 800a29e:	4603      	movcs	r3, r0
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d84c      	bhi.n	800a33e <pbuf_alloc+0xf6>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a2a4:	f7ff fa20 	bl	80096e8 <mem_malloc>
      if (p == NULL) {
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d0e2      	beq.n	800a274 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a2ae:	1943      	adds	r3, r0, r5
  p->next = NULL;
 800a2b0:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 800a2b2:	4a38      	ldr	r2, [pc, #224]	; (800a394 <pbuf_alloc+0x14c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a2b4:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 800a2b6:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 800a2ba:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 800a2c0:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 800a2c4:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 800a2c6:	6043      	str	r3, [r0, #4]
}
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	b003      	add	sp, #12
 800a2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800a2d0:	2000      	movs	r0, #0
}
 800a2d2:	b003      	add	sp, #12
 800a2d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a2d8:	f7ff be66 	b.w	8009fa8 <pbuf_alloc_reference>
  switch (type) {
 800a2dc:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a2de:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 800a2e2:	4d2d      	ldr	r5, [pc, #180]	; (800a398 <pbuf_alloc+0x150>)
  switch (type) {
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	e009      	b.n	800a2fc <pbuf_alloc+0xb4>
          last->next = q;
 800a2e8:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800a2ea:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 800a2ee:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a2f2:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800a2f6:	f1b8 0f00 	cmp.w	r8, #0
 800a2fa:	d0bb      	beq.n	800a274 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a2fc:	200c      	movs	r0, #12
 800a2fe:	460f      	mov	r7, r1
 800a300:	f7ff fb26 	bl	8009950 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a304:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800a308:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 800a30c:	4601      	mov	r1, r0
 800a30e:	b1d8      	cbz	r0, 800a348 <pbuf_alloc+0x100>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a310:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a314:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800a318:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a31c:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a31e:	3213      	adds	r2, #19
  p->next = NULL;
 800a320:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a324:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a326:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800a32a:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a32c:	4543      	cmp	r3, r8
  p->payload = payload;
 800a32e:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a330:	bf28      	it	cs
 800a332:	4643      	movcs	r3, r8
  p->len = len;
 800a334:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a336:	2c00      	cmp	r4, #0
 800a338:	d1d6      	bne.n	800a2e8 <pbuf_alloc+0xa0>
 800a33a:	4604      	mov	r4, r0
 800a33c:	e7d5      	b.n	800a2ea <pbuf_alloc+0xa2>
          return NULL;
 800a33e:	2400      	movs	r4, #0
}
 800a340:	4620      	mov	r0, r4
 800a342:	b003      	add	sp, #12
 800a344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 800a348:	4e14      	ldr	r6, [pc, #80]	; (800a39c <pbuf_alloc+0x154>)
 800a34a:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800a34c:	f006 fa36 	bl	80107bc <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800a350:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800a352:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800a354:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800a356:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a358:	f006 fa3c 	bl	80107d4 <sys_arch_unprotect>
  if (!queued) {
 800a35c:	9901      	ldr	r1, [sp, #4]
 800a35e:	b135      	cbz	r5, 800a36e <pbuf_alloc+0x126>
          if (p) {
 800a360:	2c00      	cmp	r4, #0
 800a362:	d0ec      	beq.n	800a33e <pbuf_alloc+0xf6>
            pbuf_free(p);
 800a364:	4620      	mov	r0, r4
          return NULL;
 800a366:	2400      	movs	r4, #0
            pbuf_free(p);
 800a368:	f7ff fefe 	bl	800a168 <pbuf_free>
 800a36c:	e782      	b.n	800a274 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a36e:	480c      	ldr	r0, [pc, #48]	; (800a3a0 <pbuf_alloc+0x158>)
 800a370:	f7fe fed4 	bl	800911c <tcpip_try_callback>
 800a374:	2800      	cmp	r0, #0
 800a376:	d0f3      	beq.n	800a360 <pbuf_alloc+0x118>
 800a378:	f006 fa20 	bl	80107bc <sys_arch_protect>
 800a37c:	9901      	ldr	r1, [sp, #4]
 800a37e:	7031      	strb	r1, [r6, #0]
 800a380:	f006 fa28 	bl	80107d4 <sys_arch_unprotect>
 800a384:	e7ec      	b.n	800a360 <pbuf_alloc+0x118>
 800a386:	bf00      	nop
 800a388:	08015dc8 	.word	0x08015dc8
 800a38c:	08015eec 	.word	0x08015eec
 800a390:	08014fe0 	.word	0x08014fe0
 800a394:	00010080 	.word	0x00010080
 800a398:	00010082 	.word	0x00010082
 800a39c:	24010d35 	.word	0x24010d35
 800a3a0:	08009e31 	.word	0x08009e31

0800a3a4 <pbuf_realloc>:
{
 800a3a4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a3a6:	4604      	mov	r4, r0
{
 800a3a8:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d036      	beq.n	800a41c <pbuf_realloc+0x78>
  if (new_len >= p->tot_len) {
 800a3ae:	8922      	ldrh	r2, [r4, #8]
 800a3b0:	42aa      	cmp	r2, r5
 800a3b2:	d91b      	bls.n	800a3ec <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 800a3b4:	8963      	ldrh	r3, [r4, #10]
 800a3b6:	429d      	cmp	r5, r3
 800a3b8:	d90d      	bls.n	800a3d6 <pbuf_realloc+0x32>
 800a3ba:	1aa9      	subs	r1, r5, r2
 800a3bc:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a3be:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800a3c0:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a3c2:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a3c4:	b29d      	uxth	r5, r3
    q = q->next;
 800a3c6:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	d02f      	beq.n	800a42c <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 800a3cc:	8963      	ldrh	r3, [r4, #10]
 800a3ce:	42ab      	cmp	r3, r5
 800a3d0:	d201      	bcs.n	800a3d6 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a3d2:	8922      	ldrh	r2, [r4, #8]
 800a3d4:	e7f3      	b.n	800a3be <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a3d6:	7b22      	ldrb	r2, [r4, #12]
 800a3d8:	0712      	lsls	r2, r2, #28
 800a3da:	d008      	beq.n	800a3ee <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 800a3dc:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a3de:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a3e0:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a3e2:	b108      	cbz	r0, 800a3e8 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 800a3e4:	f7ff fec0 	bl	800a168 <pbuf_free>
  q->next = NULL;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	6023      	str	r3, [r4, #0]
}
 800a3ec:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a3ee:	42ab      	cmp	r3, r5
 800a3f0:	d0f4      	beq.n	800a3dc <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a3f2:	7b63      	ldrb	r3, [r4, #13]
 800a3f4:	079b      	lsls	r3, r3, #30
 800a3f6:	d4f1      	bmi.n	800a3dc <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a3f8:	6863      	ldr	r3, [r4, #4]
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	1b1b      	subs	r3, r3, r4
 800a3fe:	1959      	adds	r1, r3, r5
 800a400:	f7ff f8b8 	bl	8009574 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a404:	4604      	mov	r4, r0
 800a406:	2800      	cmp	r0, #0
 800a408:	d1e8      	bne.n	800a3dc <pbuf_realloc+0x38>
 800a40a:	4b0d      	ldr	r3, [pc, #52]	; (800a440 <pbuf_realloc+0x9c>)
 800a40c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a410:	490c      	ldr	r1, [pc, #48]	; (800a444 <pbuf_realloc+0xa0>)
 800a412:	480d      	ldr	r0, [pc, #52]	; (800a448 <pbuf_realloc+0xa4>)
 800a414:	f008 f86c 	bl	80124f0 <iprintf>
  q->len = rem_len;
 800a418:	8164      	strh	r4, [r4, #10]
 800a41a:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a41c:	4b08      	ldr	r3, [pc, #32]	; (800a440 <pbuf_realloc+0x9c>)
 800a41e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a422:	490a      	ldr	r1, [pc, #40]	; (800a44c <pbuf_realloc+0xa8>)
 800a424:	4808      	ldr	r0, [pc, #32]	; (800a448 <pbuf_realloc+0xa4>)
 800a426:	f008 f863 	bl	80124f0 <iprintf>
 800a42a:	e7c0      	b.n	800a3ae <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a42c:	4b04      	ldr	r3, [pc, #16]	; (800a440 <pbuf_realloc+0x9c>)
 800a42e:	f240 12af 	movw	r2, #431	; 0x1af
 800a432:	4907      	ldr	r1, [pc, #28]	; (800a450 <pbuf_realloc+0xac>)
 800a434:	4804      	ldr	r0, [pc, #16]	; (800a448 <pbuf_realloc+0xa4>)
 800a436:	f008 f85b 	bl	80124f0 <iprintf>
  while (rem_len > q->len) {
 800a43a:	8963      	ldrh	r3, [r4, #10]
 800a43c:	deff      	udf	#255	; 0xff
 800a43e:	bf00      	nop
 800a440:	08015dc8 	.word	0x08015dc8
 800a444:	08015f38 	.word	0x08015f38
 800a448:	08014fe0 	.word	0x08014fe0
 800a44c:	08015f08 	.word	0x08015f08
 800a450:	08015f20 	.word	0x08015f20

0800a454 <pbuf_clen>:
  while (p != NULL) {
 800a454:	b138      	cbz	r0, 800a466 <pbuf_clen+0x12>
  len = 0;
 800a456:	2300      	movs	r3, #0
    ++len;
 800a458:	3301      	adds	r3, #1
    p = p->next;
 800a45a:	6800      	ldr	r0, [r0, #0]
    ++len;
 800a45c:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800a45e:	2800      	cmp	r0, #0
 800a460:	d1fa      	bne.n	800a458 <pbuf_clen+0x4>
}
 800a462:	4618      	mov	r0, r3
 800a464:	4770      	bx	lr
  len = 0;
 800a466:	4603      	mov	r3, r0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	4770      	bx	lr

0800a46c <pbuf_ref>:
  if (p != NULL) {
 800a46c:	b158      	cbz	r0, 800a486 <pbuf_ref+0x1a>
{
 800a46e:	b510      	push	{r4, lr}
 800a470:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a472:	f006 f9a3 	bl	80107bc <sys_arch_protect>
 800a476:	7ba3      	ldrb	r3, [r4, #14]
 800a478:	3301      	adds	r3, #1
 800a47a:	73a3      	strb	r3, [r4, #14]
 800a47c:	f006 f9aa 	bl	80107d4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a480:	7ba3      	ldrb	r3, [r4, #14]
 800a482:	b10b      	cbz	r3, 800a488 <pbuf_ref+0x1c>
}
 800a484:	bd10      	pop	{r4, pc}
 800a486:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a488:	4b04      	ldr	r3, [pc, #16]	; (800a49c <pbuf_ref+0x30>)
 800a48a:	f240 3242 	movw	r2, #834	; 0x342
 800a48e:	4904      	ldr	r1, [pc, #16]	; (800a4a0 <pbuf_ref+0x34>)
 800a490:	4804      	ldr	r0, [pc, #16]	; (800a4a4 <pbuf_ref+0x38>)
}
 800a492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a496:	f008 b82b 	b.w	80124f0 <iprintf>
 800a49a:	bf00      	nop
 800a49c:	08015dc8 	.word	0x08015dc8
 800a4a0:	08015f54 	.word	0x08015f54
 800a4a4:	08014fe0 	.word	0x08014fe0

0800a4a8 <pbuf_cat>:
{
 800a4a8:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a4aa:	b330      	cbz	r0, 800a4fa <pbuf_cat+0x52>
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	b321      	cbz	r1, 800a4fa <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 800a4b0:	6803      	ldr	r3, [r0, #0]
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	b13b      	cbz	r3, 800a4c6 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a4b6:	8922      	ldrh	r2, [r4, #8]
 800a4b8:	8928      	ldrh	r0, [r5, #8]
 800a4ba:	4402      	add	r2, r0
 800a4bc:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a4be:	461c      	mov	r4, r3
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f7      	bne.n	800a4b6 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a4c6:	8963      	ldrh	r3, [r4, #10]
 800a4c8:	8922      	ldrh	r2, [r4, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d010      	beq.n	800a4f0 <pbuf_cat+0x48>
 800a4ce:	4b0f      	ldr	r3, [pc, #60]	; (800a50c <pbuf_cat+0x64>)
 800a4d0:	f240 3262 	movw	r2, #866	; 0x362
 800a4d4:	490e      	ldr	r1, [pc, #56]	; (800a510 <pbuf_cat+0x68>)
 800a4d6:	480f      	ldr	r0, [pc, #60]	; (800a514 <pbuf_cat+0x6c>)
 800a4d8:	f008 f80a 	bl	80124f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	b133      	cbz	r3, 800a4ee <pbuf_cat+0x46>
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <pbuf_cat+0x64>)
 800a4e2:	f240 3263 	movw	r2, #867	; 0x363
 800a4e6:	490c      	ldr	r1, [pc, #48]	; (800a518 <pbuf_cat+0x70>)
 800a4e8:	480a      	ldr	r0, [pc, #40]	; (800a514 <pbuf_cat+0x6c>)
 800a4ea:	f008 f801 	bl	80124f0 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a4ee:	8923      	ldrh	r3, [r4, #8]
 800a4f0:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 800a4f2:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a4f4:	4413      	add	r3, r2
 800a4f6:	8123      	strh	r3, [r4, #8]
}
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a4fa:	4b04      	ldr	r3, [pc, #16]	; (800a50c <pbuf_cat+0x64>)
 800a4fc:	f240 3259 	movw	r2, #857	; 0x359
 800a500:	4906      	ldr	r1, [pc, #24]	; (800a51c <pbuf_cat+0x74>)
 800a502:	4804      	ldr	r0, [pc, #16]	; (800a514 <pbuf_cat+0x6c>)
}
 800a504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a508:	f007 bff2 	b.w	80124f0 <iprintf>
 800a50c:	08015dc8 	.word	0x08015dc8
 800a510:	08015fa0 	.word	0x08015fa0
 800a514:	08014fe0 	.word	0x08014fe0
 800a518:	08015fd0 	.word	0x08015fd0
 800a51c:	08015f68 	.word	0x08015f68

0800a520 <pbuf_copy>:
{
 800a520:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a522:	b140      	cbz	r0, 800a536 <pbuf_copy+0x16>
 800a524:	b139      	cbz	r1, 800a536 <pbuf_copy+0x16>
 800a526:	8902      	ldrh	r2, [r0, #8]
 800a528:	890b      	ldrh	r3, [r1, #8]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d303      	bcc.n	800a536 <pbuf_copy+0x16>
}
 800a52e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a532:	f7ff bc97 	b.w	8009e64 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <pbuf_copy+0x2c>)
 800a538:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <pbuf_copy+0x30>)
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <pbuf_copy+0x34>)
 800a540:	f007 ffd6 	bl	80124f0 <iprintf>
}
 800a544:	f06f 000f 	mvn.w	r0, #15
 800a548:	bd08      	pop	{r3, pc}
 800a54a:	bf00      	nop
 800a54c:	08015dc8 	.word	0x08015dc8
 800a550:	08015fe0 	.word	0x08015fe0
 800a554:	08014fe0 	.word	0x08014fe0

0800a558 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a55c:	4605      	mov	r5, r0
 800a55e:	b370      	cbz	r0, 800a5be <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a560:	460f      	mov	r7, r1
 800a562:	2900      	cmp	r1, #0
 800a564:	d036      	beq.n	800a5d4 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a566:	4690      	mov	r8, r2
 800a568:	b392      	cbz	r2, 800a5d0 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 800a56a:	2600      	movs	r6, #0
 800a56c:	e005      	b.n	800a57a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a56e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a570:	682d      	ldr	r5, [r5, #0]
 800a572:	f1b8 0f00 	cmp.w	r8, #0
 800a576:	d01f      	beq.n	800a5b8 <pbuf_copy_partial+0x60>
 800a578:	b1f5      	cbz	r5, 800a5b8 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a57a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800a57c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800a580:	b11b      	cbz	r3, 800a58a <pbuf_copy_partial+0x32>
 800a582:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 800a584:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 800a588:	d2f1      	bcs.n	800a56e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 800a58a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a58e:	6869      	ldr	r1, [r5, #4]
 800a590:	fa1f f48c 	uxth.w	r4, ip
 800a594:	4419      	add	r1, r3
 800a596:	4544      	cmp	r4, r8
 800a598:	bf28      	it	cs
 800a59a:	4644      	movcs	r4, r8
 800a59c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a59e:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a5a0:	f008 f967 	bl	8012872 <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800a5a4:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 800a5a8:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a5aa:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800a5ac:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a5b0:	682d      	ldr	r5, [r5, #0]
 800a5b2:	f1b8 0f00 	cmp.w	r8, #0
 800a5b6:	d1df      	bne.n	800a578 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <pbuf_copy_partial+0x90>)
 800a5c0:	f240 420a 	movw	r2, #1034	; 0x40a
 800a5c4:	4909      	ldr	r1, [pc, #36]	; (800a5ec <pbuf_copy_partial+0x94>)
 800a5c6:	462e      	mov	r6, r5
 800a5c8:	4809      	ldr	r0, [pc, #36]	; (800a5f0 <pbuf_copy_partial+0x98>)
 800a5ca:	f007 ff91 	bl	80124f0 <iprintf>
 800a5ce:	e7f3      	b.n	800a5b8 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 800a5d0:	4616      	mov	r6, r2
 800a5d2:	e7f1      	b.n	800a5b8 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <pbuf_copy_partial+0x90>)
 800a5d6:	f240 420b 	movw	r2, #1035	; 0x40b
 800a5da:	4906      	ldr	r1, [pc, #24]	; (800a5f4 <pbuf_copy_partial+0x9c>)
 800a5dc:	463e      	mov	r6, r7
 800a5de:	4804      	ldr	r0, [pc, #16]	; (800a5f0 <pbuf_copy_partial+0x98>)
 800a5e0:	f007 ff86 	bl	80124f0 <iprintf>
 800a5e4:	e7e8      	b.n	800a5b8 <pbuf_copy_partial+0x60>
 800a5e6:	bf00      	nop
 800a5e8:	08015dc8 	.word	0x08015dc8
 800a5ec:	08016010 	.word	0x08016010
 800a5f0:	08014fe0 	.word	0x08014fe0
 800a5f4:	08016030 	.word	0x08016030

0800a5f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4615      	mov	r5, r2
 800a5fc:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a5fe:	8929      	ldrh	r1, [r5, #8]
 800a600:	f7ff fe22 	bl	800a248 <pbuf_alloc>
  if (q == NULL) {
 800a604:	4604      	mov	r4, r0
 800a606:	b138      	cbz	r0, 800a618 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a608:	8902      	ldrh	r2, [r0, #8]
 800a60a:	892b      	ldrh	r3, [r5, #8]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d305      	bcc.n	800a61c <pbuf_clone+0x24>
 800a610:	4629      	mov	r1, r5
 800a612:	f7ff fc27 	bl	8009e64 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a616:	b940      	cbnz	r0, 800a62a <pbuf_clone+0x32>
  return q;
}
 800a618:	4620      	mov	r0, r4
 800a61a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a61c:	4b07      	ldr	r3, [pc, #28]	; (800a63c <pbuf_clone+0x44>)
 800a61e:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a622:	4907      	ldr	r1, [pc, #28]	; (800a640 <pbuf_clone+0x48>)
 800a624:	4807      	ldr	r0, [pc, #28]	; (800a644 <pbuf_clone+0x4c>)
 800a626:	f007 ff63 	bl	80124f0 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a62a:	4b04      	ldr	r3, [pc, #16]	; (800a63c <pbuf_clone+0x44>)
 800a62c:	f240 5224 	movw	r2, #1316	; 0x524
 800a630:	4905      	ldr	r1, [pc, #20]	; (800a648 <pbuf_clone+0x50>)
 800a632:	4804      	ldr	r0, [pc, #16]	; (800a644 <pbuf_clone+0x4c>)
 800a634:	f007 ff5c 	bl	80124f0 <iprintf>
}
 800a638:	4620      	mov	r0, r4
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	08015dc8 	.word	0x08015dc8
 800a640:	08015fe0 	.word	0x08015fe0
 800a644:	08014fe0 	.word	0x08014fe0
 800a648:	08016054 	.word	0x08016054

0800a64c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a64c:	b4f0      	push	{r4, r5, r6, r7}
 800a64e:	4f14      	ldr	r7, [pc, #80]	; (800a6a0 <tcp_new_port+0x54>)
 800a650:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a654:	4e13      	ldr	r6, [pc, #76]	; (800a6a4 <tcp_new_port+0x58>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a656:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800a65a:	8839      	ldrh	r1, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a65c:	4d12      	ldr	r5, [pc, #72]	; (800a6a8 <tcp_new_port+0x5c>)
  tcp_port++;
 800a65e:	3101      	adds	r1, #1
 800a660:	4c12      	ldr	r4, [pc, #72]	; (800a6ac <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a662:	462b      	mov	r3, r5
  tcp_port++;
 800a664:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a666:	4561      	cmp	r1, ip
 800a668:	bf08      	it	eq
 800a66a:	f44f 4140 	moveq.w	r1, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	b913      	cbnz	r3, 800a678 <tcp_new_port+0x2c>
 800a672:	e00b      	b.n	800a68c <tcp_new_port+0x40>
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	b14b      	cbz	r3, 800a68c <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800a678:	8ada      	ldrh	r2, [r3, #22]
 800a67a:	428a      	cmp	r2, r1
 800a67c:	d1fa      	bne.n	800a674 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a67e:	3801      	subs	r0, #1
 800a680:	b280      	uxth	r0, r0
 800a682:	2800      	cmp	r0, #0
 800a684:	d1eb      	bne.n	800a65e <tcp_new_port+0x12>
 800a686:	8039      	strh	r1, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800a688:	bcf0      	pop	{r4, r5, r6, r7}
 800a68a:	4770      	bx	lr
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a68c:	42a6      	cmp	r6, r4
 800a68e:	d002      	beq.n	800a696 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a690:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800a694:	e7eb      	b.n	800a66e <tcp_new_port+0x22>
 800a696:	4608      	mov	r0, r1
 800a698:	8039      	strh	r1, [r7, #0]
}
 800a69a:	bcf0      	pop	{r4, r5, r6, r7}
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	24000040 	.word	0x24000040
 800a6a4:	080166f0 	.word	0x080166f0
 800a6a8:	24010d44 	.word	0x24010d44
 800a6ac:	080166e4 	.word	0x080166e4

0800a6b0 <tcp_close_shutdown_fin>:
{
 800a6b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	b308      	cbz	r0, 800a6fa <tcp_close_shutdown_fin+0x4a>
  switch (pcb->state) {
 800a6b6:	7d23      	ldrb	r3, [r4, #20]
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d005      	beq.n	800a6c8 <tcp_close_shutdown_fin+0x18>
 800a6bc:	2b07      	cmp	r3, #7
 800a6be:	d00e      	beq.n	800a6de <tcp_close_shutdown_fin+0x2e>
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d001      	beq.n	800a6c8 <tcp_close_shutdown_fin+0x18>
 800a6c4:	2000      	movs	r0, #0
}
 800a6c6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f003 fc87 	bl	800dfdc <tcp_send_fin>
      if (err == ERR_OK) {
 800a6ce:	b950      	cbnz	r0, 800a6e6 <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 800a6d0:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a6d2:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800a6d4:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a6d6:	f003 fdf1 	bl	800e2bc <tcp_output>
 800a6da:	2000      	movs	r0, #0
}
 800a6dc:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f003 fc7c 	bl	800dfdc <tcp_send_fin>
      if (err == ERR_OK) {
 800a6e4:	b138      	cbz	r0, 800a6f6 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 800a6e6:	1c43      	adds	r3, r0, #1
 800a6e8:	d1ed      	bne.n	800a6c6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a6ea:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 800a6ec:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a6ee:	f043 0308 	orr.w	r3, r3, #8
 800a6f2:	8363      	strh	r3, [r4, #26]
}
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	2309      	movs	r3, #9
 800a6f8:	e7eb      	b.n	800a6d2 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a6fa:	4b04      	ldr	r3, [pc, #16]	; (800a70c <tcp_close_shutdown_fin+0x5c>)
 800a6fc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a700:	4903      	ldr	r1, [pc, #12]	; (800a710 <tcp_close_shutdown_fin+0x60>)
 800a702:	4804      	ldr	r0, [pc, #16]	; (800a714 <tcp_close_shutdown_fin+0x64>)
 800a704:	f007 fef4 	bl	80124f0 <iprintf>
 800a708:	e7d5      	b.n	800a6b6 <tcp_close_shutdown_fin+0x6>
 800a70a:	bf00      	nop
 800a70c:	08016068 	.word	0x08016068
 800a710:	08016098 	.word	0x08016098
 800a714:	08014fe0 	.word	0x08014fe0

0800a718 <tcp_init>:
{
 800a718:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a71a:	f006 ff55 	bl	80115c8 <rand>
 800a71e:	4b02      	ldr	r3, [pc, #8]	; (800a728 <tcp_init+0x10>)
 800a720:	4a02      	ldr	r2, [pc, #8]	; (800a72c <tcp_init+0x14>)
 800a722:	4303      	orrs	r3, r0
 800a724:	8013      	strh	r3, [r2, #0]
}
 800a726:	bd08      	pop	{r3, pc}
 800a728:	ffffc000 	.word	0xffffc000
 800a72c:	24000040 	.word	0x24000040

0800a730 <tcp_free>:
{
 800a730:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a732:	7d03      	ldrb	r3, [r0, #20]
{
 800a734:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a736:	2b01      	cmp	r3, #1
 800a738:	d005      	beq.n	800a746 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800a73a:	4621      	mov	r1, r4
 800a73c:	2001      	movs	r0, #1
}
 800a73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a742:	f7ff b94b 	b.w	80099dc <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a746:	4906      	ldr	r1, [pc, #24]	; (800a760 <tcp_free+0x30>)
 800a748:	22d4      	movs	r2, #212	; 0xd4
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <tcp_free+0x34>)
 800a74c:	4806      	ldr	r0, [pc, #24]	; (800a768 <tcp_free+0x38>)
 800a74e:	f007 fecf 	bl	80124f0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a752:	4621      	mov	r1, r4
 800a754:	2001      	movs	r0, #1
}
 800a756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a75a:	f7ff b93f 	b.w	80099dc <memp_free>
 800a75e:	bf00      	nop
 800a760:	080160a4 	.word	0x080160a4
 800a764:	08016068 	.word	0x08016068
 800a768:	08014fe0 	.word	0x08014fe0

0800a76c <tcp_bind>:
{
 800a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a770:	460f      	mov	r7, r1
 800a772:	4680      	mov	r8, r0
 800a774:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 800a776:	f7fa fb09 	bl	8004d8c <sys_check_core_locking>
  if (ipaddr == NULL) {
 800a77a:	b1f7      	cbz	r7, 800a7ba <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a77c:	f1b8 0f00 	cmp.w	r8, #0
 800a780:	d044      	beq.n	800a80c <tcp_bind+0xa0>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a782:	f898 3014 	ldrb.w	r3, [r8, #20]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d136      	bne.n	800a7f8 <tcp_bind+0x8c>
  if (port == 0) {
 800a78a:	b1ec      	cbz	r4, 800a7c8 <tcp_bind+0x5c>
 800a78c:	4e24      	ldr	r6, [pc, #144]	; (800a820 <tcp_bind+0xb4>)
 800a78e:	4b25      	ldr	r3, [pc, #148]	; (800a824 <tcp_bind+0xb8>)
 800a790:	f106 010c 	add.w	r1, r6, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	b913      	cbnz	r3, 800a79e <tcp_bind+0x32>
 800a798:	e011      	b.n	800a7be <tcp_bind+0x52>
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	b17b      	cbz	r3, 800a7be <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 800a79e:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800a7a2:	45a4      	cmp	ip, r4
 800a7a4:	d1f9      	bne.n	800a79a <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	b11a      	cbz	r2, 800a7b2 <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 800a7aa:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a7ac:	b10d      	cbz	r5, 800a7b2 <tcp_bind+0x46>
 800a7ae:	42aa      	cmp	r2, r5
 800a7b0:	d1f3      	bne.n	800a79a <tcp_bind+0x2e>
              return ERR_USE;
 800a7b2:	f06f 0007 	mvn.w	r0, #7
}
 800a7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800a7ba:	4f1b      	ldr	r7, [pc, #108]	; (800a828 <tcp_bind+0xbc>)
 800a7bc:	e7de      	b.n	800a77c <tcp_bind+0x10>
    for (i = 0; i < max_pcb_list; i++) {
 800a7be:	428e      	cmp	r6, r1
 800a7c0:	d006      	beq.n	800a7d0 <tcp_bind+0x64>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a7c2:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800a7c6:	e7e5      	b.n	800a794 <tcp_bind+0x28>
    port = tcp_new_port();
 800a7c8:	f7ff ff40 	bl	800a64c <tcp_new_port>
    if (port == 0) {
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	b180      	cbz	r0, 800a7f2 <tcp_bind+0x86>
  if (!ip_addr_isany(ipaddr)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	b10b      	cbz	r3, 800a7d8 <tcp_bind+0x6c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a7d4:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a7d8:	4b14      	ldr	r3, [pc, #80]	; (800a82c <tcp_bind+0xc0>)
  pcb->local_port = port;
 800a7da:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	f8c3 8000 	str.w	r8, [r3]
 800a7e4:	f8c8 200c 	str.w	r2, [r8, #12]
 800a7e8:	f004 f88c 	bl	800e904 <tcp_timer_needed>
  return ERR_OK;
 800a7ec:	2000      	movs	r0, #0
}
 800a7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERR_BUF;
 800a7f2:	f06f 0001 	mvn.w	r0, #1
 800a7f6:	e7de      	b.n	800a7b6 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <tcp_bind+0xc4>)
 800a7fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a7fe:	490d      	ldr	r1, [pc, #52]	; (800a834 <tcp_bind+0xc8>)
 800a800:	480d      	ldr	r0, [pc, #52]	; (800a838 <tcp_bind+0xcc>)
 800a802:	f007 fe75 	bl	80124f0 <iprintf>
 800a806:	f06f 0005 	mvn.w	r0, #5
 800a80a:	e7d4      	b.n	800a7b6 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a80c:	4b08      	ldr	r3, [pc, #32]	; (800a830 <tcp_bind+0xc4>)
 800a80e:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a812:	490a      	ldr	r1, [pc, #40]	; (800a83c <tcp_bind+0xd0>)
 800a814:	4808      	ldr	r0, [pc, #32]	; (800a838 <tcp_bind+0xcc>)
 800a816:	f007 fe6b 	bl	80124f0 <iprintf>
 800a81a:	f06f 000f 	mvn.w	r0, #15
 800a81e:	e7ca      	b.n	800a7b6 <tcp_bind+0x4a>
 800a820:	080166e4 	.word	0x080166e4
 800a824:	24010d44 	.word	0x24010d44
 800a828:	08017634 	.word	0x08017634
 800a82c:	24010d40 	.word	0x24010d40
 800a830:	08016068 	.word	0x08016068
 800a834:	080160d0 	.word	0x080160d0
 800a838:	08014fe0 	.word	0x08014fe0
 800a83c:	080160b8 	.word	0x080160b8

0800a840 <tcp_listen_with_backlog_and_err>:
{
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	4604      	mov	r4, r0
 800a844:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 800a846:	f7fa faa1 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	d05d      	beq.n	800a90a <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a84e:	7d25      	ldrb	r5, [r4, #20]
 800a850:	2d00      	cmp	r5, #0
 800a852:	d147      	bne.n	800a8e4 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a854:	2002      	movs	r0, #2
 800a856:	f7ff f87b 	bl	8009950 <memp_malloc>
  if (lpcb == NULL) {
 800a85a:	4606      	mov	r6, r0
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d051      	beq.n	800a904 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 800a860:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800a862:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800a864:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800a866:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800a868:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800a86a:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800a86c:	7d62      	ldrb	r2, [r4, #21]
 800a86e:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a870:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a872:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800a874:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800a876:	7ae2      	ldrb	r2, [r4, #11]
 800a878:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800a87a:	7aa2      	ldrb	r2, [r4, #10]
 800a87c:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a87e:	6822      	ldr	r2, [r4, #0]
 800a880:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800a882:	b99b      	cbnz	r3, 800a8ac <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a884:	7d23      	ldrb	r3, [r4, #20]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d020      	beq.n	800a8cc <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800a88a:	4621      	mov	r1, r4
 800a88c:	2001      	movs	r0, #1
 800a88e:	f7ff f8a5 	bl	80099dc <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a892:	4b23      	ldr	r3, [pc, #140]	; (800a920 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 800a894:	4923      	ldr	r1, [pc, #140]	; (800a924 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a896:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800a898:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a89a:	60f2      	str	r2, [r6, #12]
 800a89c:	601e      	str	r6, [r3, #0]
 800a89e:	f004 f831 	bl	800e904 <tcp_timer_needed>
  res = ERR_OK;
 800a8a2:	2300      	movs	r3, #0
  if (err != NULL) {
 800a8a4:	b107      	cbz	r7, 800a8a8 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 800a8a6:	703b      	strb	r3, [r7, #0]
}
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a8ac:	4a1e      	ldr	r2, [pc, #120]	; (800a928 <tcp_listen_with_backlog_and_err+0xe8>)
 800a8ae:	6813      	ldr	r3, [r2, #0]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d012      	beq.n	800a8da <tcp_listen_with_backlog_and_err+0x9a>
 800a8b4:	b12b      	cbz	r3, 800a8c2 <tcp_listen_with_backlog_and_err+0x82>
 800a8b6:	68d9      	ldr	r1, [r3, #12]
 800a8b8:	42a1      	cmp	r1, r4
 800a8ba:	d01e      	beq.n	800a8fa <tcp_listen_with_backlog_and_err+0xba>
 800a8bc:	460b      	mov	r3, r1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1f9      	bne.n	800a8b6 <tcp_listen_with_backlog_and_err+0x76>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a8c6:	7d23      	ldrb	r3, [r4, #20]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d1de      	bne.n	800a88a <tcp_listen_with_backlog_and_err+0x4a>
 800a8cc:	4b17      	ldr	r3, [pc, #92]	; (800a92c <tcp_listen_with_backlog_and_err+0xec>)
 800a8ce:	22d4      	movs	r2, #212	; 0xd4
 800a8d0:	4917      	ldr	r1, [pc, #92]	; (800a930 <tcp_listen_with_backlog_and_err+0xf0>)
 800a8d2:	4818      	ldr	r0, [pc, #96]	; (800a934 <tcp_listen_with_backlog_and_err+0xf4>)
 800a8d4:	f007 fe0c 	bl	80124f0 <iprintf>
 800a8d8:	e7d7      	b.n	800a88a <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60e3      	str	r3, [r4, #12]
 800a8e2:	e7f0      	b.n	800a8c6 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a8e4:	4b11      	ldr	r3, [pc, #68]	; (800a92c <tcp_listen_with_backlog_and_err+0xec>)
 800a8e6:	f240 325a 	movw	r2, #858	; 0x35a
 800a8ea:	4913      	ldr	r1, [pc, #76]	; (800a938 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a8ec:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a8ee:	4811      	ldr	r0, [pc, #68]	; (800a934 <tcp_listen_with_backlog_and_err+0xf4>)
 800a8f0:	f007 fdfe 	bl	80124f0 <iprintf>
 800a8f4:	f06f 030e 	mvn.w	r3, #14
 800a8f8:	e7d4      	b.n	800a8a4 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a8fa:	68e2      	ldr	r2, [r4, #12]
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	2300      	movs	r3, #0
 800a900:	60e3      	str	r3, [r4, #12]
 800a902:	e7e0      	b.n	800a8c6 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 800a904:	f04f 33ff 	mov.w	r3, #4294967295
 800a908:	e7cc      	b.n	800a8a4 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a90a:	4b08      	ldr	r3, [pc, #32]	; (800a92c <tcp_listen_with_backlog_and_err+0xec>)
 800a90c:	f240 3259 	movw	r2, #857	; 0x359
 800a910:	490a      	ldr	r1, [pc, #40]	; (800a93c <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a912:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a914:	4807      	ldr	r0, [pc, #28]	; (800a934 <tcp_listen_with_backlog_and_err+0xf4>)
 800a916:	f007 fdeb 	bl	80124f0 <iprintf>
 800a91a:	f06f 030f 	mvn.w	r3, #15
 800a91e:	e7c1      	b.n	800a8a4 <tcp_listen_with_backlog_and_err+0x64>
 800a920:	24010d44 	.word	0x24010d44
 800a924:	0800b469 	.word	0x0800b469
 800a928:	24010d40 	.word	0x24010d40
 800a92c:	08016068 	.word	0x08016068
 800a930:	080160a4 	.word	0x080160a4
 800a934:	08014fe0 	.word	0x08014fe0
 800a938:	08016128 	.word	0x08016128
 800a93c:	080160f8 	.word	0x080160f8

0800a940 <tcp_update_rcv_ann_wnd>:
{
 800a940:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a942:	4604      	mov	r4, r0
 800a944:	b1c8      	cbz	r0, 800a97a <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a946:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a948:	f640 3c68 	movw	ip, #2920	; 0xb68
 800a94c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a94e:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a952:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a954:	1a58      	subs	r0, r3, r1
 800a956:	45e6      	cmp	lr, ip
 800a958:	4410      	add	r0, r2
 800a95a:	bf94      	ite	ls
 800a95c:	eba0 050e 	subls.w	r5, r0, lr
 800a960:	eba0 050c 	subhi.w	r5, r0, ip
 800a964:	2d00      	cmp	r5, #0
 800a966:	db01      	blt.n	800a96c <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a968:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a96c:	1a53      	subs	r3, r2, r1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dd0b      	ble.n	800a98a <tcp_update_rcv_ann_wnd+0x4a>
 800a972:	2300      	movs	r3, #0
    return 0;
 800a974:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a976:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800a978:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a97a:	4b0c      	ldr	r3, [pc, #48]	; (800a9ac <tcp_update_rcv_ann_wnd+0x6c>)
 800a97c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a980:	490b      	ldr	r1, [pc, #44]	; (800a9b0 <tcp_update_rcv_ann_wnd+0x70>)
 800a982:	480c      	ldr	r0, [pc, #48]	; (800a9b4 <tcp_update_rcv_ann_wnd+0x74>)
 800a984:	f007 fdb4 	bl	80124f0 <iprintf>
 800a988:	e7dd      	b.n	800a946 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a98a:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a98c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a990:	d203      	bcs.n	800a99a <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a992:	b2ab      	uxth	r3, r5
    return 0;
 800a994:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a996:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800a998:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a99a:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <tcp_update_rcv_ann_wnd+0x6c>)
 800a99c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a9a0:	4905      	ldr	r1, [pc, #20]	; (800a9b8 <tcp_update_rcv_ann_wnd+0x78>)
 800a9a2:	4804      	ldr	r0, [pc, #16]	; (800a9b4 <tcp_update_rcv_ann_wnd+0x74>)
 800a9a4:	f007 fda4 	bl	80124f0 <iprintf>
 800a9a8:	e7f3      	b.n	800a992 <tcp_update_rcv_ann_wnd+0x52>
 800a9aa:	bf00      	nop
 800a9ac:	08016068 	.word	0x08016068
 800a9b0:	08016160 	.word	0x08016160
 800a9b4:	08014fe0 	.word	0x08014fe0
 800a9b8:	08016184 	.word	0x08016184

0800a9bc <tcp_recved>:
{
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	4605      	mov	r5, r0
 800a9c0:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800a9c2:	f7fa f9e3 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a9c6:	b33d      	cbz	r5, 800aa18 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a9c8:	7d2b      	ldrb	r3, [r5, #20]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d01c      	beq.n	800aa08 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a9ce:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800a9d0:	1919      	adds	r1, r3, r4
 800a9d2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	d803      	bhi.n	800a9e0 <tcp_recved+0x24>
 800a9d8:	f241 63d0 	movw	r3, #5840	; 0x16d0
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d901      	bls.n	800a9e4 <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a9e0:	f241 61d0 	movw	r1, #5840	; 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	8529      	strh	r1, [r5, #40]	; 0x28
 800a9e8:	f7ff ffaa 	bl	800a940 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a9ec:	f240 53b3 	movw	r3, #1459	; 0x5b3
 800a9f0:	4298      	cmp	r0, r3
 800a9f2:	d800      	bhi.n	800a9f6 <tcp_recved+0x3a>
}
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800a9f6:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800a9f8:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800a9fa:	f043 0302 	orr.w	r3, r3, #2
 800a9fe:	836b      	strh	r3, [r5, #26]
}
 800aa00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800aa04:	f003 bc5a 	b.w	800e2bc <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aa08:	4b08      	ldr	r3, [pc, #32]	; (800aa2c <tcp_recved+0x70>)
 800aa0a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800aa0e:	4908      	ldr	r1, [pc, #32]	; (800aa30 <tcp_recved+0x74>)
 800aa10:	4808      	ldr	r0, [pc, #32]	; (800aa34 <tcp_recved+0x78>)
 800aa12:	f007 fd6d 	bl	80124f0 <iprintf>
 800aa16:	e7da      	b.n	800a9ce <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aa18:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <tcp_recved+0x70>)
 800aa1a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800aa1e:	4906      	ldr	r1, [pc, #24]	; (800aa38 <tcp_recved+0x7c>)
 800aa20:	4804      	ldr	r0, [pc, #16]	; (800aa34 <tcp_recved+0x78>)
}
 800aa22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aa26:	f007 bd63 	b.w	80124f0 <iprintf>
 800aa2a:	bf00      	nop
 800aa2c:	08016068 	.word	0x08016068
 800aa30:	080161b8 	.word	0x080161b8
 800aa34:	08014fe0 	.word	0x08014fe0
 800aa38:	080161a0 	.word	0x080161a0

0800aa3c <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 800aa3c:	b170      	cbz	r0, 800aa5c <tcp_segs_free+0x20>
{
 800aa3e:	b538      	push	{r3, r4, r5, lr}
 800aa40:	4604      	mov	r4, r0
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
    if (seg->p != NULL) {
      pbuf_free(seg->p);
 800aa42:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800aa44:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800aa46:	6868      	ldr	r0, [r5, #4]
 800aa48:	b108      	cbz	r0, 800aa4e <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800aa4a:	f7ff fb8d 	bl	800a168 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800aa4e:	4629      	mov	r1, r5
 800aa50:	2003      	movs	r0, #3
 800aa52:	f7fe ffc3 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800aa56:	2c00      	cmp	r4, #0
 800aa58:	d1f3      	bne.n	800aa42 <tcp_segs_free+0x6>
}
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop

0800aa60 <tcp_seg_free>:
  if (seg != NULL) {
 800aa60:	b158      	cbz	r0, 800aa7a <tcp_seg_free+0x1a>
{
 800aa62:	b510      	push	{r4, lr}
 800aa64:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800aa66:	6840      	ldr	r0, [r0, #4]
 800aa68:	b108      	cbz	r0, 800aa6e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800aa6a:	f7ff fb7d 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800aa6e:	4621      	mov	r1, r4
 800aa70:	2003      	movs	r0, #3
  }
}
 800aa72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800aa76:	f7fe bfb1 	b.w	80099dc <memp_free>
 800aa7a:	4770      	bx	lr

0800aa7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800aa7c:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800aa7e:	4605      	mov	r5, r0
 800aa80:	b188      	cbz	r0, 800aaa6 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800aa82:	2003      	movs	r0, #3
 800aa84:	f7fe ff64 	bl	8009950 <memp_malloc>
  if (cseg == NULL) {
 800aa88:	4604      	mov	r4, r0
 800aa8a:	b150      	cbz	r0, 800aaa2 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800aa8c:	6868      	ldr	r0, [r5, #4]
 800aa8e:	6829      	ldr	r1, [r5, #0]
 800aa90:	68aa      	ldr	r2, [r5, #8]
 800aa92:	68eb      	ldr	r3, [r5, #12]
 800aa94:	6060      	str	r0, [r4, #4]
 800aa96:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800aa98:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800aa9a:	60a2      	str	r2, [r4, #8]
 800aa9c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800aa9e:	f7ff fce5 	bl	800a46c <pbuf_ref>
  return cseg;
}
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800aaa6:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <tcp_seg_copy+0x3c>)
 800aaa8:	f240 6282 	movw	r2, #1666	; 0x682
 800aaac:	4903      	ldr	r1, [pc, #12]	; (800aabc <tcp_seg_copy+0x40>)
 800aaae:	4804      	ldr	r0, [pc, #16]	; (800aac0 <tcp_seg_copy+0x44>)
 800aab0:	f007 fd1e 	bl	80124f0 <iprintf>
 800aab4:	e7e5      	b.n	800aa82 <tcp_seg_copy+0x6>
 800aab6:	bf00      	nop
 800aab8:	08016068 	.word	0x08016068
 800aabc:	080161e0 	.word	0x080161e0
 800aac0:	08014fe0 	.word	0x08014fe0

0800aac4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4604      	mov	r4, r0
 800aac8:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800aaca:	f7fa f95f 	bl	8004d8c <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800aace:	b104      	cbz	r4, 800aad2 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800aad0:	6125      	str	r5, [r4, #16]
  }
}
 800aad2:	bd38      	pop	{r3, r4, r5, pc}

0800aad4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4604      	mov	r4, r0
 800aad8:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800aada:	f7fa f957 	bl	8004d8c <sys_check_core_locking>
  if (pcb != NULL) {
 800aade:	b124      	cbz	r4, 800aaea <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800aae0:	7d23      	ldrb	r3, [r4, #20]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d002      	beq.n	800aaec <tcp_recv+0x18>
    pcb->recv = recv;
 800aae6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800aaec:	4b03      	ldr	r3, [pc, #12]	; (800aafc <tcp_recv+0x28>)
 800aaee:	f240 72df 	movw	r2, #2015	; 0x7df
 800aaf2:	4903      	ldr	r1, [pc, #12]	; (800ab00 <tcp_recv+0x2c>)
 800aaf4:	4803      	ldr	r0, [pc, #12]	; (800ab04 <tcp_recv+0x30>)
 800aaf6:	f007 fcfb 	bl	80124f0 <iprintf>
 800aafa:	e7f4      	b.n	800aae6 <tcp_recv+0x12>
 800aafc:	08016068 	.word	0x08016068
 800ab00:	080161fc 	.word	0x080161fc
 800ab04:	08014fe0 	.word	0x08014fe0

0800ab08 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ab0e:	f7fa f93d 	bl	8004d8c <sys_check_core_locking>
  if (pcb != NULL) {
 800ab12:	b124      	cbz	r4, 800ab1e <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ab14:	7d23      	ldrb	r3, [r4, #20]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d002      	beq.n	800ab20 <tcp_sent+0x18>
    pcb->sent = sent;
 800ab1a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ab20:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <tcp_sent+0x28>)
 800ab22:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ab26:	4903      	ldr	r1, [pc, #12]	; (800ab34 <tcp_sent+0x2c>)
 800ab28:	4803      	ldr	r0, [pc, #12]	; (800ab38 <tcp_sent+0x30>)
 800ab2a:	f007 fce1 	bl	80124f0 <iprintf>
 800ab2e:	e7f4      	b.n	800ab1a <tcp_sent+0x12>
 800ab30:	08016068 	.word	0x08016068
 800ab34:	08016224 	.word	0x08016224
 800ab38:	08014fe0 	.word	0x08014fe0

0800ab3c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ab42:	f7fa f923 	bl	8004d8c <sys_check_core_locking>
  if (pcb != NULL) {
 800ab46:	b124      	cbz	r4, 800ab52 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ab48:	7d23      	ldrb	r3, [r4, #20]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d002      	beq.n	800ab54 <tcp_err+0x18>
    pcb->errf = err;
 800ab4e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ab54:	4b03      	ldr	r3, [pc, #12]	; (800ab64 <tcp_err+0x28>)
 800ab56:	f640 020d 	movw	r2, #2061	; 0x80d
 800ab5a:	4903      	ldr	r1, [pc, #12]	; (800ab68 <tcp_err+0x2c>)
 800ab5c:	4803      	ldr	r0, [pc, #12]	; (800ab6c <tcp_err+0x30>)
 800ab5e:	f007 fcc7 	bl	80124f0 <iprintf>
 800ab62:	e7f4      	b.n	800ab4e <tcp_err+0x12>
 800ab64:	08016068 	.word	0x08016068
 800ab68:	0801624c 	.word	0x0801624c
 800ab6c:	08014fe0 	.word	0x08014fe0

0800ab70 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4604      	mov	r4, r0
 800ab74:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800ab76:	f7fa f909 	bl	8004d8c <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ab7a:	b11c      	cbz	r4, 800ab84 <tcp_accept+0x14>
 800ab7c:	7d23      	ldrb	r3, [r4, #20]
 800ab7e:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800ab80:	bf08      	it	eq
 800ab82:	61a5      	streq	r5, [r4, #24]
  }
}
 800ab84:	bd38      	pop	{r3, r4, r5, pc}
 800ab86:	bf00      	nop

0800ab88 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	460e      	mov	r6, r1
 800ab8e:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ab90:	f7fa f8fc 	bl	8004d8c <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ab94:	b18c      	cbz	r4, 800abba <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ab96:	7d23      	ldrb	r3, [r4, #20]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d003      	beq.n	800aba4 <tcp_poll+0x1c>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ab9c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800aba0:	7765      	strb	r5, [r4, #29]
}
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800aba4:	4b09      	ldr	r3, [pc, #36]	; (800abcc <tcp_poll+0x44>)
 800aba6:	f640 023e 	movw	r2, #2110	; 0x83e
 800abaa:	4909      	ldr	r1, [pc, #36]	; (800abd0 <tcp_poll+0x48>)
 800abac:	4809      	ldr	r0, [pc, #36]	; (800abd4 <tcp_poll+0x4c>)
 800abae:	f007 fc9f 	bl	80124f0 <iprintf>
  pcb->poll = poll;
 800abb2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 800abb6:	7765      	strb	r5, [r4, #29]
}
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800abba:	4b04      	ldr	r3, [pc, #16]	; (800abcc <tcp_poll+0x44>)
 800abbc:	f640 023d 	movw	r2, #2109	; 0x83d
 800abc0:	4905      	ldr	r1, [pc, #20]	; (800abd8 <tcp_poll+0x50>)
 800abc2:	4804      	ldr	r0, [pc, #16]	; (800abd4 <tcp_poll+0x4c>)
}
 800abc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800abc8:	f007 bc92 	b.w	80124f0 <iprintf>
 800abcc:	08016068 	.word	0x08016068
 800abd0:	0801628c 	.word	0x0801628c
 800abd4:	08014fe0 	.word	0x08014fe0
 800abd8:	08016274 	.word	0x08016274

0800abdc <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800abdc:	2800      	cmp	r0, #0
 800abde:	d041      	beq.n	800ac64 <tcp_pcb_purge+0x88>
{
 800abe0:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 800abe2:	7d03      	ldrb	r3, [r0, #20]
 800abe4:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800abe6:	2b0a      	cmp	r3, #10
 800abe8:	d001      	beq.n	800abee <tcp_pcb_purge+0x12>
 800abea:	2b01      	cmp	r3, #1
 800abec:	d800      	bhi.n	800abf0 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800abee:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800abf0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800abf2:	b118      	cbz	r0, 800abfc <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800abf4:	f7ff fab8 	bl	800a168 <pbuf_free>
      pcb->refused_data = NULL;
 800abf8:	2300      	movs	r3, #0
 800abfa:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800abfc:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800abfe:	b164      	cbz	r4, 800ac1a <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800ac00:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ac02:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ac04:	6870      	ldr	r0, [r6, #4]
 800ac06:	b108      	cbz	r0, 800ac0c <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800ac08:	f7ff faae 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	2003      	movs	r0, #3
 800ac10:	f7fe fee4 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	d1f3      	bne.n	800ac00 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800ac18:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800ac1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800ac1e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 800ac20:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 800ac22:	b15c      	cbz	r4, 800ac3c <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800ac24:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ac26:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ac28:	6870      	ldr	r0, [r6, #4]
 800ac2a:	b108      	cbz	r0, 800ac30 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800ac2c:	f7ff fa9c 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ac30:	4631      	mov	r1, r6
 800ac32:	2003      	movs	r0, #3
 800ac34:	f7fe fed2 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	d1f3      	bne.n	800ac24 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800ac3c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 800ac3e:	b15c      	cbz	r4, 800ac58 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800ac40:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ac42:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ac44:	6870      	ldr	r0, [r6, #4]
 800ac46:	b108      	cbz	r0, 800ac4c <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800ac48:	f7ff fa8e 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ac4c:	4631      	mov	r1, r6
 800ac4e:	2003      	movs	r0, #3
 800ac50:	f7fe fec4 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800ac54:	2c00      	cmp	r4, #0
 800ac56:	d1f3      	bne.n	800ac40 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800ac5e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ac64:	4b03      	ldr	r3, [pc, #12]	; (800ac74 <tcp_pcb_purge+0x98>)
 800ac66:	f640 0251 	movw	r2, #2129	; 0x851
 800ac6a:	4903      	ldr	r1, [pc, #12]	; (800ac78 <tcp_pcb_purge+0x9c>)
 800ac6c:	4803      	ldr	r0, [pc, #12]	; (800ac7c <tcp_pcb_purge+0xa0>)
 800ac6e:	f007 bc3f 	b.w	80124f0 <iprintf>
 800ac72:	bf00      	nop
 800ac74:	08016068 	.word	0x08016068
 800ac78:	080162ac 	.word	0x080162ac
 800ac7c:	08014fe0 	.word	0x08014fe0

0800ac80 <tcp_slowtmr>:
{
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800ac84:	4da9      	ldr	r5, [pc, #676]	; (800af2c <tcp_slowtmr+0x2ac>)
{
 800ac86:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800ac88:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800af58 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800ac8c:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ac8e:	4fa8      	ldr	r7, [pc, #672]	; (800af30 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 800ac90:	3301      	adds	r3, #1
 800ac92:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800ac94:	f89b 3000 	ldrb.w	r3, [fp]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 800ac9e:	4ba5      	ldr	r3, [pc, #660]	; (800af34 <tcp_slowtmr+0x2b4>)
 800aca0:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800aca2:	2c00      	cmp	r4, #0
 800aca4:	f000 808a 	beq.w	800adbc <tcp_slowtmr+0x13c>
  prev = NULL;
 800aca8:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800acaa:	46b1      	mov	r9, r6
 800acac:	7d23      	ldrb	r3, [r4, #20]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80fc 	beq.w	800aeac <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	f000 8104 	beq.w	800aec2 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800acba:	2b0a      	cmp	r3, #10
 800acbc:	f000 810c 	beq.w	800aed8 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 800acc0:	f89b 2000 	ldrb.w	r2, [fp]
 800acc4:	7fa3      	ldrb	r3, [r4, #30]
 800acc6:	4293      	cmp	r3, r2
 800acc8:	f000 8113 	beq.w	800aef2 <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800accc:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800acce:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800acd6:	f000 8112 	beq.w	800aefe <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800acda:	2a0b      	cmp	r2, #11
 800acdc:	f240 80cb 	bls.w	800ae76 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 800ace0:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800ace4:	2b06      	cmp	r3, #6
 800ace6:	f000 80b7 	beq.w	800ae58 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800acea:	f894 a009 	ldrb.w	sl, [r4, #9]
 800acee:	f01a 0a08 	ands.w	sl, sl, #8
 800acf2:	d01d      	beq.n	800ad30 <tcp_slowtmr+0xb0>
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d007      	beq.n	800ad08 <tcp_slowtmr+0x88>
 800acf8:	f1a3 0307 	sub.w	r3, r3, #7
 800acfc:	fab3 f383 	clz	r3, r3
 800ad00:	095b      	lsrs	r3, r3, #5
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80b4 	beq.w	800ae70 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ad08:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ad0c:	4b8a      	ldr	r3, [pc, #552]	; (800af38 <tcp_slowtmr+0x2b8>)
 800ad0e:	488b      	ldr	r0, [pc, #556]	; (800af3c <tcp_slowtmr+0x2bc>)
 800ad10:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad12:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ad14:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad18:	6a20      	ldr	r0, [r4, #32]
 800ad1a:	1a12      	subs	r2, r2, r0
 800ad1c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800ad20:	f240 8160 	bls.w	800afe4 <tcp_slowtmr+0x364>
        ++pcb_remove;
 800ad24:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800ad28:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800ad2c:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800ad30:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800ad32:	b156      	cbz	r6, 800ad4a <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	6a22      	ldr	r2, [r4, #32]
 800ad38:	1a9a      	subs	r2, r3, r2
 800ad3a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800ad3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800ad42:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800ad46:	f080 80e1 	bcs.w	800af0c <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 800ad4a:	7d23      	ldrb	r3, [r4, #20]
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d057      	beq.n	800ae00 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 800ad50:	2b09      	cmp	r3, #9
 800ad52:	d15a      	bne.n	800ae0a <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	6a22      	ldr	r2, [r4, #32]
 800ad58:	1a9b      	subs	r3, r3, r2
 800ad5a:	2bf0      	cmp	r3, #240	; 0xf0
 800ad5c:	d955      	bls.n	800ae0a <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 800ad5e:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800ad60:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800ad64:	f7ff ff3a 	bl	800abdc <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad68:	4b72      	ldr	r3, [pc, #456]	; (800af34 <tcp_slowtmr+0x2b4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800ad6c:	f1b9 0f00 	cmp.w	r9, #0
 800ad70:	f000 817e 	beq.w	800b070 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	f000 81da 	beq.w	800b12e <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800ad80:	f1ba 0f00 	cmp.w	sl, #0
 800ad84:	f040 8147 	bne.w	800b016 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ad88:	7d23      	ldrb	r3, [r4, #20]
 800ad8a:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800ad8c:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ad90:	f000 8153 	beq.w	800b03a <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 800ad94:	4621      	mov	r1, r4
 800ad96:	2001      	movs	r0, #1
 800ad98:	f7fe fe20 	bl	80099dc <memp_free>
      tcp_active_pcbs_changed = 0;
 800ad9c:	4c68      	ldr	r4, [pc, #416]	; (800af40 <tcp_slowtmr+0x2c0>)
 800ad9e:	2300      	movs	r3, #0
 800ada0:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ada2:	b13e      	cbz	r6, 800adb4 <tcp_slowtmr+0x134>
 800ada4:	f06f 010c 	mvn.w	r1, #12
 800ada8:	4650      	mov	r0, sl
 800adaa:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 800adac:	7823      	ldrb	r3, [r4, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f47f af75 	bne.w	800ac9e <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 800adb4:	4644      	mov	r4, r8
  while (pcb != NULL) {
 800adb6:	2c00      	cmp	r4, #0
 800adb8:	f47f af78 	bne.w	800acac <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 800adbc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800af5c <tcp_slowtmr+0x2dc>
 800adc0:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 800adc4:	b1cc      	cbz	r4, 800adfa <tcp_slowtmr+0x17a>
  prev = NULL;
 800adc6:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800adc8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800af30 <tcp_slowtmr+0x2b0>
 800adcc:	f8df a190 	ldr.w	sl, [pc, #400]	; 800af60 <tcp_slowtmr+0x2e0>
 800add0:	4f5c      	ldr	r7, [pc, #368]	; (800af44 <tcp_slowtmr+0x2c4>)
 800add2:	7d23      	ldrb	r3, [r4, #20]
 800add4:	2b0a      	cmp	r3, #10
 800add6:	d006      	beq.n	800ade6 <tcp_slowtmr+0x166>
 800add8:	4643      	mov	r3, r8
 800adda:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800adde:	4651      	mov	r1, sl
 800ade0:	4638      	mov	r0, r7
 800ade2:	f007 fb85 	bl	80124f0 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	6a22      	ldr	r2, [r4, #32]
 800adea:	1a9b      	subs	r3, r3, r2
 800adec:	2bf0      	cmp	r3, #240	; 0xf0
 800adee:	f200 80d4 	bhi.w	800af9a <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 800adf2:	4626      	mov	r6, r4
 800adf4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800adf6:	2c00      	cmp	r4, #0
 800adf8:	d1eb      	bne.n	800add2 <tcp_slowtmr+0x152>
}
 800adfa:	b007      	add	sp, #28
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	6a22      	ldr	r2, [r4, #32]
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	2b28      	cmp	r3, #40	; 0x28
 800ae08:	d8a9      	bhi.n	800ad5e <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800ae0a:	f1b8 0f00 	cmp.w	r8, #0
 800ae0e:	d1a6      	bne.n	800ad5e <tcp_slowtmr+0xde>
      ++prev->polltmr;
 800ae10:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae12:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800ae14:	3301      	adds	r3, #1
      pcb = pcb->next;
 800ae16:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800ae18:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800ae1a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800ae1c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae1e:	d815      	bhi.n	800ae4c <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 800ae20:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800af40 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 800ae24:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800ae28:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800ae2c:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 80ce 	beq.w	800afd2 <tcp_slowtmr+0x352>
 800ae36:	4621      	mov	r1, r4
 800ae38:	6920      	ldr	r0, [r4, #16]
 800ae3a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800ae3c:	f899 3000 	ldrb.w	r3, [r9]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f47f af2c 	bne.w	800ac9e <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f000 80c3 	beq.w	800afd2 <tcp_slowtmr+0x352>
 800ae4c:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800ae4e:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800ae50:	2c00      	cmp	r4, #0
 800ae52:	f47f af2b 	bne.w	800acac <tcp_slowtmr+0x2c>
 800ae56:	e7b1      	b.n	800adbc <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 800ae58:	8b63      	ldrh	r3, [r4, #26]
 800ae5a:	06db      	lsls	r3, r3, #27
 800ae5c:	d508      	bpl.n	800ae70 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae5e:	682b      	ldr	r3, [r5, #0]
 800ae60:	6a22      	ldr	r2, [r4, #32]
 800ae62:	1a9b      	subs	r3, r3, r2
 800ae64:	2b28      	cmp	r3, #40	; 0x28
 800ae66:	d903      	bls.n	800ae70 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 800ae68:	f108 0801 	add.w	r8, r8, #1
 800ae6c:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	e75c      	b.n	800ad30 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 800ae76:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 800ae7a:	f1b8 0f00 	cmp.w	r8, #0
 800ae7e:	d071      	beq.n	800af64 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ae80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae82:	b133      	cbz	r3, 800ae92 <tcp_slowtmr+0x212>
 800ae84:	463b      	mov	r3, r7
 800ae86:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ae8a:	492f      	ldr	r1, [pc, #188]	; (800af48 <tcp_slowtmr+0x2c8>)
 800ae8c:	482d      	ldr	r0, [pc, #180]	; (800af44 <tcp_slowtmr+0x2c4>)
 800ae8e:	f007 fb2f 	bl	80124f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ae92:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 816c 	beq.w	800b172 <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ae9a:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800ae9e:	2b0b      	cmp	r3, #11
 800aea0:	f240 80d2 	bls.w	800b048 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 800aea4:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800aea6:	f04f 0801 	mov.w	r8, #1
 800aeaa:	e71b      	b.n	800ace4 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aeac:	463b      	mov	r3, r7
 800aeae:	f240 42be 	movw	r2, #1214	; 0x4be
 800aeb2:	4926      	ldr	r1, [pc, #152]	; (800af4c <tcp_slowtmr+0x2cc>)
 800aeb4:	4823      	ldr	r0, [pc, #140]	; (800af44 <tcp_slowtmr+0x2c4>)
 800aeb6:	f007 fb1b 	bl	80124f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800aeba:	7d23      	ldrb	r3, [r4, #20]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	f47f aefc 	bne.w	800acba <tcp_slowtmr+0x3a>
 800aec2:	463b      	mov	r3, r7
 800aec4:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800aec8:	4921      	ldr	r1, [pc, #132]	; (800af50 <tcp_slowtmr+0x2d0>)
 800aeca:	481e      	ldr	r0, [pc, #120]	; (800af44 <tcp_slowtmr+0x2c4>)
 800aecc:	f007 fb10 	bl	80124f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aed0:	7d23      	ldrb	r3, [r4, #20]
 800aed2:	2b0a      	cmp	r3, #10
 800aed4:	f47f aef4 	bne.w	800acc0 <tcp_slowtmr+0x40>
 800aed8:	463b      	mov	r3, r7
 800aeda:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800aede:	491d      	ldr	r1, [pc, #116]	; (800af54 <tcp_slowtmr+0x2d4>)
 800aee0:	4818      	ldr	r0, [pc, #96]	; (800af44 <tcp_slowtmr+0x2c4>)
 800aee2:	f007 fb05 	bl	80124f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800aee6:	f89b 2000 	ldrb.w	r2, [fp]
 800aeea:	7fa3      	ldrb	r3, [r4, #30]
 800aeec:	4293      	cmp	r3, r2
 800aeee:	f47f aeed 	bne.w	800accc <tcp_slowtmr+0x4c>
      continue;
 800aef2:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800aef4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800aef6:	2c00      	cmp	r4, #0
 800aef8:	f47f aed8 	bne.w	800acac <tcp_slowtmr+0x2c>
 800aefc:	e75e      	b.n	800adbc <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800aefe:	2a05      	cmp	r2, #5
 800af00:	d9b9      	bls.n	800ae76 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 800af02:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 800af06:	f04f 0801 	mov.w	r8, #1
 800af0a:	e711      	b.n	800ad30 <tcp_slowtmr+0xb0>
 800af0c:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800af0e:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 800af10:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 800af12:	6860      	ldr	r0, [r4, #4]
 800af14:	b108      	cbz	r0, 800af1a <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 800af16:	f7ff f927 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800af1a:	4621      	mov	r1, r4
 800af1c:	2003      	movs	r0, #3
 800af1e:	f7fe fd5d 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800af22:	2e00      	cmp	r6, #0
 800af24:	d1f3      	bne.n	800af0e <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 800af26:	9c05      	ldr	r4, [sp, #20]
 800af28:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800af2a:	e70e      	b.n	800ad4a <tcp_slowtmr+0xca>
 800af2c:	24010d48 	.word	0x24010d48
 800af30:	08016068 	.word	0x08016068
 800af34:	24010d38 	.word	0x24010d38
 800af38:	000a4cb8 	.word	0x000a4cb8
 800af3c:	10624dd3 	.word	0x10624dd3
 800af40:	24010d3c 	.word	0x24010d3c
 800af44:	08014fe0 	.word	0x08014fe0
 800af48:	08016350 	.word	0x08016350
 800af4c:	080162c8 	.word	0x080162c8
 800af50:	080162f4 	.word	0x080162f4
 800af54:	08016320 	.word	0x08016320
 800af58:	24010d4d 	.word	0x24010d4d
 800af5c:	24010d50 	.word	0x24010d50
 800af60:	08016414 	.word	0x08016414
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800af64:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800af68:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 800af6c:	b291      	uxth	r1, r2
 800af6e:	4281      	cmp	r1, r0
 800af70:	d802      	bhi.n	800af78 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 800af72:	3101      	adds	r1, #1
 800af74:	b20a      	sxth	r2, r1
 800af76:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800af78:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800af7c:	4291      	cmp	r1, r2
 800af7e:	f73f aeb1 	bgt.w	800ace4 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800af82:	4620      	mov	r0, r4
 800af84:	f003 f85c 	bl	800e040 <tcp_rexmit_rto_prepare>
 800af88:	2800      	cmp	r0, #0
 800af8a:	f000 809e 	beq.w	800b0ca <tcp_slowtmr+0x44a>
 800af8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8096 	beq.w	800b0c2 <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 800af96:	7d23      	ldrb	r3, [r4, #20]
 800af98:	e6a4      	b.n	800ace4 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff fe1e 	bl	800abdc <tcp_pcb_purge>
      if (prev != NULL) {
 800afa0:	2e00      	cmp	r6, #0
 800afa2:	f000 80cc 	beq.w	800b13e <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800afa6:	f8d9 3000 	ldr.w	r3, [r9]
 800afaa:	42a3      	cmp	r3, r4
 800afac:	f000 80e9 	beq.w	800b182 <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 800afb0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800afb4:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800afb8:	7d23      	ldrb	r3, [r4, #20]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	f000 80d2 	beq.w	800b164 <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 800afc0:	4621      	mov	r1, r4
      pcb = pcb->next;
 800afc2:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800afc4:	2001      	movs	r0, #1
 800afc6:	f7fe fd09 	bl	80099dc <memp_free>
  while (pcb != NULL) {
 800afca:	2c00      	cmp	r4, #0
 800afcc:	f47f af01 	bne.w	800add2 <tcp_slowtmr+0x152>
 800afd0:	e713      	b.n	800adfa <tcp_slowtmr+0x17a>
          tcp_output(prev);
 800afd2:	4620      	mov	r0, r4
 800afd4:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800afd6:	4634      	mov	r4, r6
          tcp_output(prev);
 800afd8:	f003 f970 	bl	800e2bc <tcp_output>
  while (pcb != NULL) {
 800afdc:	2c00      	cmp	r4, #0
 800afde:	f47f ae65 	bne.w	800acac <tcp_slowtmr+0x2c>
 800afe2:	e6eb      	b.n	800adbc <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800afe4:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800afe8:	486e      	ldr	r0, [pc, #440]	; (800b1a4 <tcp_slowtmr+0x524>)
 800afea:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800afee:	4b6e      	ldr	r3, [pc, #440]	; (800b1a8 <tcp_slowtmr+0x528>)
 800aff0:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aff4:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800aff8:	f67f af3a 	bls.w	800ae70 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800affc:	4620      	mov	r0, r4
 800affe:	f003 fb8b 	bl	800e718 <tcp_keepalive>
        if (err == ERR_OK) {
 800b002:	2800      	cmp	r0, #0
 800b004:	f47f af34 	bne.w	800ae70 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 800b008:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800b00c:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800b00e:	3301      	adds	r3, #1
 800b010:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800b014:	e68c      	b.n	800ad30 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b016:	8b23      	ldrh	r3, [r4, #24]
 800b018:	4620      	mov	r0, r4
 800b01a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b01c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b01e:	9302      	str	r3, [sp, #8]
 800b020:	8ae3      	ldrh	r3, [r4, #22]
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	1d23      	adds	r3, r4, #4
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	4623      	mov	r3, r4
 800b02a:	f003 f8cd 	bl	800e1c8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b02e:	7d23      	ldrb	r3, [r4, #20]
 800b030:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b032:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b036:	f47f aead 	bne.w	800ad94 <tcp_slowtmr+0x114>
 800b03a:	463b      	mov	r3, r7
 800b03c:	22d4      	movs	r2, #212	; 0xd4
 800b03e:	495b      	ldr	r1, [pc, #364]	; (800b1ac <tcp_slowtmr+0x52c>)
 800b040:	485b      	ldr	r0, [pc, #364]	; (800b1b0 <tcp_slowtmr+0x530>)
 800b042:	f007 fa55 	bl	80124f0 <iprintf>
 800b046:	e6a5      	b.n	800ad94 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b048:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800b04c:	4a59      	ldr	r2, [pc, #356]	; (800b1b4 <tcp_slowtmr+0x534>)
 800b04e:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800b050:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b054:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800b058:	4293      	cmp	r3, r2
 800b05a:	d216      	bcs.n	800b08a <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 800b05c:	3301      	adds	r3, #1
 800b05e:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800b060:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b062:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b066:	d210      	bcs.n	800b08a <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 800b068:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 800b06a:	f04f 0800 	mov.w	r8, #0
 800b06e:	e639      	b.n	800ace4 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b070:	42a3      	cmp	r3, r4
 800b072:	d006      	beq.n	800b082 <tcp_slowtmr+0x402>
 800b074:	463b      	mov	r3, r7
 800b076:	f240 5271 	movw	r2, #1393	; 0x571
 800b07a:	494f      	ldr	r1, [pc, #316]	; (800b1b8 <tcp_slowtmr+0x538>)
 800b07c:	484c      	ldr	r0, [pc, #304]	; (800b1b0 <tcp_slowtmr+0x530>)
 800b07e:	f007 fa37 	bl	80124f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b082:	68e3      	ldr	r3, [r4, #12]
 800b084:	4a4d      	ldr	r2, [pc, #308]	; (800b1bc <tcp_slowtmr+0x53c>)
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	e67a      	b.n	800ad80 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 800b08a:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 800b08e:	b936      	cbnz	r6, 800b09e <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b090:	4620      	mov	r0, r4
 800b092:	f003 fb67 	bl	800e764 <tcp_zero_window_probe>
 800b096:	b140      	cbz	r0, 800b0aa <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800b098:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 800b09a:	7d23      	ldrb	r3, [r4, #20]
 800b09c:	e622      	b.n	800ace4 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f002 fe19 	bl	800dcd8 <tcp_split_unsent_seg>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d073      	beq.n	800b192 <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b0aa:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 800b0ae:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b0b2:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b0b4:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 800b0b8:	bf9c      	itt	ls
 800b0ba:	3301      	addls	r3, #1
 800b0bc:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 800b0c0:	e769      	b.n	800af96 <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b0c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f43f af66 	beq.w	800af96 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 800b0ca:	7d23      	ldrb	r3, [r4, #20]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d014      	beq.n	800b0fa <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b0d0:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b0d4:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800b0d8:	2a0c      	cmp	r2, #12
 800b0da:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800b0de:	bf28      	it	cs
 800b0e0:	220c      	movcs	r2, #12
 800b0e2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b0e6:	4936      	ldr	r1, [pc, #216]	; (800b1c0 <tcp_slowtmr+0x540>)
 800b0e8:	5c8a      	ldrb	r2, [r1, r2]
 800b0ea:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b0ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	bfa8      	it	ge
 800b0f4:	4613      	movge	r3, r2
 800b0f6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b0fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 800b0fc:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b0fe:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 800b102:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b10a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800b10e:	428b      	cmp	r3, r1
 800b110:	bf28      	it	cs
 800b112:	460b      	movcs	r3, r1
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	4293      	cmp	r3, r2
 800b118:	bf38      	it	cc
 800b11a:	4613      	movcc	r3, r2
 800b11c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800b124:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b128:	f003 faaa 	bl	800e680 <tcp_rexmit_rto_commit>
 800b12c:	e733      	b.n	800af96 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b12e:	463b      	mov	r3, r7
 800b130:	f240 526d 	movw	r2, #1389	; 0x56d
 800b134:	4923      	ldr	r1, [pc, #140]	; (800b1c4 <tcp_slowtmr+0x544>)
 800b136:	481e      	ldr	r0, [pc, #120]	; (800b1b0 <tcp_slowtmr+0x530>)
 800b138:	f007 f9da 	bl	80124f0 <iprintf>
 800b13c:	e61d      	b.n	800ad7a <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b13e:	f8d9 3000 	ldr.w	r3, [r9]
 800b142:	42a3      	cmp	r3, r4
 800b144:	d006      	beq.n	800b154 <tcp_slowtmr+0x4d4>
 800b146:	4643      	mov	r3, r8
 800b148:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b14c:	491e      	ldr	r1, [pc, #120]	; (800b1c8 <tcp_slowtmr+0x548>)
 800b14e:	4638      	mov	r0, r7
 800b150:	f007 f9ce 	bl	80124f0 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b154:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800b156:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b15a:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800b15c:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b160:	f47f af2e 	bne.w	800afc0 <tcp_slowtmr+0x340>
 800b164:	4643      	mov	r3, r8
 800b166:	22d4      	movs	r2, #212	; 0xd4
 800b168:	4910      	ldr	r1, [pc, #64]	; (800b1ac <tcp_slowtmr+0x52c>)
 800b16a:	4638      	mov	r0, r7
 800b16c:	f007 f9c0 	bl	80124f0 <iprintf>
 800b170:	e726      	b.n	800afc0 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b172:	463b      	mov	r3, r7
 800b174:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b178:	4914      	ldr	r1, [pc, #80]	; (800b1cc <tcp_slowtmr+0x54c>)
 800b17a:	480d      	ldr	r0, [pc, #52]	; (800b1b0 <tcp_slowtmr+0x530>)
 800b17c:	f007 f9b8 	bl	80124f0 <iprintf>
 800b180:	e68b      	b.n	800ae9a <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b182:	4643      	mov	r3, r8
 800b184:	f240 52af 	movw	r2, #1455	; 0x5af
 800b188:	4911      	ldr	r1, [pc, #68]	; (800b1d0 <tcp_slowtmr+0x550>)
 800b18a:	4638      	mov	r0, r7
 800b18c:	f007 f9b0 	bl	80124f0 <iprintf>
 800b190:	e70e      	b.n	800afb0 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 800b192:	4620      	mov	r0, r4
 800b194:	f003 f892 	bl	800e2bc <tcp_output>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d186      	bne.n	800b0aa <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800b19c:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800b19e:	7d23      	ldrb	r3, [r4, #20]
 800b1a0:	e5a0      	b.n	800ace4 <tcp_slowtmr+0x64>
 800b1a2:	bf00      	nop
 800b1a4:	000124f8 	.word	0x000124f8
 800b1a8:	10624dd3 	.word	0x10624dd3
 800b1ac:	080160a4 	.word	0x080160a4
 800b1b0:	08014fe0 	.word	0x08014fe0
 800b1b4:	080166f4 	.word	0x080166f4
 800b1b8:	080163e8 	.word	0x080163e8
 800b1bc:	24010d38 	.word	0x24010d38
 800b1c0:	080166d4 	.word	0x080166d4
 800b1c4:	080163bc 	.word	0x080163bc
 800b1c8:	0801646c 	.word	0x0801646c
 800b1cc:	08016384 	.word	0x08016384
 800b1d0:	08016444 	.word	0x08016444

0800b1d4 <tcp_pcb_remove>:
{
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b1d8:	460c      	mov	r4, r1
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	d04a      	beq.n	800b274 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	d051      	beq.n	800b286 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800b1e2:	682b      	ldr	r3, [r5, #0]
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d032      	beq.n	800b24e <tcp_pcb_remove+0x7a>
 800b1e8:	b12b      	cbz	r3, 800b1f6 <tcp_pcb_remove+0x22>
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	42a2      	cmp	r2, r4
 800b1ee:	d03e      	beq.n	800b26e <tcp_pcb_remove+0x9a>
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d1f9      	bne.n	800b1ea <tcp_pcb_remove+0x16>
 800b1f6:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800b1f8:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b1fa:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b1fc:	f7ff fcee 	bl	800abdc <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800b200:	7d23      	ldrb	r3, [r4, #20]
 800b202:	2b0a      	cmp	r3, #10
 800b204:	d02d      	beq.n	800b262 <tcp_pcb_remove+0x8e>
 800b206:	2b01      	cmp	r3, #1
 800b208:	d01d      	beq.n	800b246 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800b20a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b20c:	07da      	lsls	r2, r3, #31
 800b20e:	d421      	bmi.n	800b254 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b210:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b212:	b133      	cbz	r3, 800b222 <tcp_pcb_remove+0x4e>
 800b214:	4b20      	ldr	r3, [pc, #128]	; (800b298 <tcp_pcb_remove+0xc4>)
 800b216:	f640 0293 	movw	r2, #2195	; 0x893
 800b21a:	4920      	ldr	r1, [pc, #128]	; (800b29c <tcp_pcb_remove+0xc8>)
 800b21c:	4820      	ldr	r0, [pc, #128]	; (800b2a0 <tcp_pcb_remove+0xcc>)
 800b21e:	f007 f967 	bl	80124f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b222:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b224:	b133      	cbz	r3, 800b234 <tcp_pcb_remove+0x60>
 800b226:	4b1c      	ldr	r3, [pc, #112]	; (800b298 <tcp_pcb_remove+0xc4>)
 800b228:	f640 0294 	movw	r2, #2196	; 0x894
 800b22c:	491d      	ldr	r1, [pc, #116]	; (800b2a4 <tcp_pcb_remove+0xd0>)
 800b22e:	481c      	ldr	r0, [pc, #112]	; (800b2a0 <tcp_pcb_remove+0xcc>)
 800b230:	f007 f95e 	bl	80124f0 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b234:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b236:	b133      	cbz	r3, 800b246 <tcp_pcb_remove+0x72>
 800b238:	4b17      	ldr	r3, [pc, #92]	; (800b298 <tcp_pcb_remove+0xc4>)
 800b23a:	f640 0296 	movw	r2, #2198	; 0x896
 800b23e:	491a      	ldr	r1, [pc, #104]	; (800b2a8 <tcp_pcb_remove+0xd4>)
 800b240:	4817      	ldr	r0, [pc, #92]	; (800b2a0 <tcp_pcb_remove+0xcc>)
 800b242:	f007 f955 	bl	80124f0 <iprintf>
  pcb->state = CLOSED;
 800b246:	2300      	movs	r3, #0
 800b248:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800b24a:	82e3      	strh	r3, [r4, #22]
}
 800b24c:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	602b      	str	r3, [r5, #0]
 800b252:	e7d0      	b.n	800b1f6 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800b254:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b258:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b25a:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b25c:	f003 f82e 	bl	800e2bc <tcp_output>
  if (pcb->state != LISTEN) {
 800b260:	7d23      	ldrb	r3, [r4, #20]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d0ef      	beq.n	800b246 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b266:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1d3      	bne.n	800b214 <tcp_pcb_remove+0x40>
 800b26c:	e7d9      	b.n	800b222 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800b26e:	68e2      	ldr	r2, [r4, #12]
 800b270:	60da      	str	r2, [r3, #12]
 800b272:	e7c0      	b.n	800b1f6 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b274:	4b08      	ldr	r3, [pc, #32]	; (800b298 <tcp_pcb_remove+0xc4>)
 800b276:	f640 0283 	movw	r2, #2179	; 0x883
 800b27a:	490c      	ldr	r1, [pc, #48]	; (800b2ac <tcp_pcb_remove+0xd8>)
 800b27c:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <tcp_pcb_remove+0xcc>)
 800b27e:	f007 f937 	bl	80124f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b282:	2d00      	cmp	r5, #0
 800b284:	d1ad      	bne.n	800b1e2 <tcp_pcb_remove+0xe>
 800b286:	4b04      	ldr	r3, [pc, #16]	; (800b298 <tcp_pcb_remove+0xc4>)
 800b288:	f640 0284 	movw	r2, #2180	; 0x884
 800b28c:	4908      	ldr	r1, [pc, #32]	; (800b2b0 <tcp_pcb_remove+0xdc>)
 800b28e:	4804      	ldr	r0, [pc, #16]	; (800b2a0 <tcp_pcb_remove+0xcc>)
 800b290:	f007 f92e 	bl	80124f0 <iprintf>
 800b294:	e7a5      	b.n	800b1e2 <tcp_pcb_remove+0xe>
 800b296:	bf00      	nop
 800b298:	08016068 	.word	0x08016068
 800b29c:	080164d0 	.word	0x080164d0
 800b2a0:	08014fe0 	.word	0x08014fe0
 800b2a4:	080164e8 	.word	0x080164e8
 800b2a8:	08016504 	.word	0x08016504
 800b2ac:	08016494 	.word	0x08016494
 800b2b0:	080164b0 	.word	0x080164b0

0800b2b4 <tcp_abandon>:
{
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b2be:	f7f9 fd65 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b2c2:	2d00      	cmp	r5, #0
 800b2c4:	f000 80a8 	beq.w	800b418 <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b2c8:	7d2b      	ldrb	r3, [r5, #20]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	f000 808b 	beq.w	800b3e6 <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 800b2d0:	2b0a      	cmp	r3, #10
 800b2d2:	f000 8093 	beq.w	800b3fc <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 800b2d6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b2d8:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 800b2dc:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800b2e0:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 800b2e4:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800b2e6:	b96b      	cbnz	r3, 800b304 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 800b2e8:	8aef      	ldrh	r7, [r5, #22]
 800b2ea:	2f00      	cmp	r7, #0
 800b2ec:	d052      	beq.n	800b394 <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2ee:	4a53      	ldr	r2, [pc, #332]	; (800b43c <tcp_abandon+0x188>)
 800b2f0:	6813      	ldr	r3, [r2, #0]
 800b2f2:	42ab      	cmp	r3, r5
 800b2f4:	d074      	beq.n	800b3e0 <tcp_abandon+0x12c>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d050      	beq.n	800b39c <tcp_abandon+0xe8>
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	42aa      	cmp	r2, r5
 800b2fe:	d04b      	beq.n	800b398 <tcp_abandon+0xe4>
 800b300:	4613      	mov	r3, r2
 800b302:	e7f8      	b.n	800b2f6 <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b304:	4629      	mov	r1, r5
 800b306:	484e      	ldr	r0, [pc, #312]	; (800b440 <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 800b308:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b30a:	f7ff ff63 	bl	800b1d4 <tcp_pcb_remove>
 800b30e:	4b4d      	ldr	r3, [pc, #308]	; (800b444 <tcp_abandon+0x190>)
 800b310:	2201      	movs	r2, #1
 800b312:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800b314:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800b316:	b164      	cbz	r4, 800b332 <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 800b318:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b31a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b31c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b320:	b108      	cbz	r0, 800b326 <tcp_abandon+0x72>
      pbuf_free(seg->p);
 800b322:	f7fe ff21 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b326:	4651      	mov	r1, sl
 800b328:	2003      	movs	r0, #3
 800b32a:	f7fe fb57 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800b32e:	2c00      	cmp	r4, #0
 800b330:	d1f2      	bne.n	800b318 <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 800b332:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800b334:	b164      	cbz	r4, 800b350 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 800b336:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b338:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b33a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b33e:	b108      	cbz	r0, 800b344 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 800b340:	f7fe ff12 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b344:	4651      	mov	r1, sl
 800b346:	2003      	movs	r0, #3
 800b348:	f7fe fb48 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800b34c:	2c00      	cmp	r4, #0
 800b34e:	d1f2      	bne.n	800b336 <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 800b350:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800b352:	b164      	cbz	r4, 800b36e <tcp_abandon+0xba>
      pbuf_free(seg->p);
 800b354:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b356:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b358:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b35c:	b108      	cbz	r0, 800b362 <tcp_abandon+0xae>
      pbuf_free(seg->p);
 800b35e:	f7fe ff03 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b362:	4651      	mov	r1, sl
 800b364:	2003      	movs	r0, #3
 800b366:	f7fe fb39 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800b36a:	2c00      	cmp	r4, #0
 800b36c:	d1f2      	bne.n	800b354 <tcp_abandon+0xa0>
    if (send_rst) {
 800b36e:	b9ce      	cbnz	r6, 800b3a4 <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b370:	7d2b      	ldrb	r3, [r5, #20]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d024      	beq.n	800b3c0 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 800b376:	4629      	mov	r1, r5
 800b378:	2001      	movs	r0, #1
 800b37a:	f7fe fb2f 	bl	80099dc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	d02a      	beq.n	800b3da <tcp_abandon+0x126>
 800b384:	f06f 010c 	mvn.w	r1, #12
 800b388:	4648      	mov	r0, r9
 800b38a:	4643      	mov	r3, r8
}
 800b38c:	b007      	add	sp, #28
 800b38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b392:	4718      	bx	r3
    int send_rst = 0;
 800b394:	461e      	mov	r6, r3
 800b396:	e7bd      	b.n	800b314 <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b398:	68ea      	ldr	r2, [r5, #12]
 800b39a:	60da      	str	r2, [r3, #12]
 800b39c:	2700      	movs	r7, #0
    int send_rst = 0;
 800b39e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b3a0:	60ef      	str	r7, [r5, #12]
 800b3a2:	e7b7      	b.n	800b314 <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b3a4:	9701      	str	r7, [sp, #4]
 800b3a6:	465a      	mov	r2, fp
 800b3a8:	8b2b      	ldrh	r3, [r5, #24]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	9905      	ldr	r1, [sp, #20]
 800b3ae:	9302      	str	r3, [sp, #8]
 800b3b0:	1d2b      	adds	r3, r5, #4
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f002 ff07 	bl	800e1c8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b3ba:	7d2b      	ldrb	r3, [r5, #20]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d1da      	bne.n	800b376 <tcp_abandon+0xc2>
 800b3c0:	4921      	ldr	r1, [pc, #132]	; (800b448 <tcp_abandon+0x194>)
 800b3c2:	22d4      	movs	r2, #212	; 0xd4
 800b3c4:	4b21      	ldr	r3, [pc, #132]	; (800b44c <tcp_abandon+0x198>)
 800b3c6:	4822      	ldr	r0, [pc, #136]	; (800b450 <tcp_abandon+0x19c>)
 800b3c8:	f007 f892 	bl	80124f0 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	f7fe fb04 	bl	80099dc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b3d4:	f1b8 0f00 	cmp.w	r8, #0
 800b3d8:	d1d4      	bne.n	800b384 <tcp_abandon+0xd0>
}
 800b3da:	b007      	add	sp, #28
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b3e0:	68eb      	ldr	r3, [r5, #12]
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	e7da      	b.n	800b39c <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b3e6:	4b19      	ldr	r3, [pc, #100]	; (800b44c <tcp_abandon+0x198>)
 800b3e8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b3ec:	4919      	ldr	r1, [pc, #100]	; (800b454 <tcp_abandon+0x1a0>)
 800b3ee:	4818      	ldr	r0, [pc, #96]	; (800b450 <tcp_abandon+0x19c>)
 800b3f0:	f007 f87e 	bl	80124f0 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b3f4:	7d2b      	ldrb	r3, [r5, #20]
 800b3f6:	2b0a      	cmp	r3, #10
 800b3f8:	f47f af6d 	bne.w	800b2d6 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4816      	ldr	r0, [pc, #88]	; (800b458 <tcp_abandon+0x1a4>)
 800b400:	f7ff fee8 	bl	800b1d4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b404:	7d2b      	ldrb	r3, [r5, #20]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d010      	beq.n	800b42c <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 800b40a:	4629      	mov	r1, r5
 800b40c:	2001      	movs	r0, #1
}
 800b40e:	b007      	add	sp, #28
 800b410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800b414:	f7fe bae2 	b.w	80099dc <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b418:	4b0c      	ldr	r3, [pc, #48]	; (800b44c <tcp_abandon+0x198>)
 800b41a:	f240 223d 	movw	r2, #573	; 0x23d
 800b41e:	490f      	ldr	r1, [pc, #60]	; (800b45c <tcp_abandon+0x1a8>)
 800b420:	480b      	ldr	r0, [pc, #44]	; (800b450 <tcp_abandon+0x19c>)
}
 800b422:	b007      	add	sp, #28
 800b424:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b428:	f007 b862 	b.w	80124f0 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <tcp_abandon+0x198>)
 800b42e:	22d4      	movs	r2, #212	; 0xd4
 800b430:	4905      	ldr	r1, [pc, #20]	; (800b448 <tcp_abandon+0x194>)
 800b432:	4807      	ldr	r0, [pc, #28]	; (800b450 <tcp_abandon+0x19c>)
 800b434:	f007 f85c 	bl	80124f0 <iprintf>
 800b438:	e7e7      	b.n	800b40a <tcp_abandon+0x156>
 800b43a:	bf00      	nop
 800b43c:	24010d40 	.word	0x24010d40
 800b440:	24010d38 	.word	0x24010d38
 800b444:	24010d3c 	.word	0x24010d3c
 800b448:	080160a4 	.word	0x080160a4
 800b44c:	08016068 	.word	0x08016068
 800b450:	08014fe0 	.word	0x08014fe0
 800b454:	08016538 	.word	0x08016538
 800b458:	24010d50 	.word	0x24010d50
 800b45c:	0801651c 	.word	0x0801651c

0800b460 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b460:	2101      	movs	r1, #1
 800b462:	f7ff bf27 	b.w	800b2b4 <tcp_abandon>
 800b466:	bf00      	nop

0800b468 <tcp_accept_null>:
{
 800b468:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b46a:	460c      	mov	r4, r1
 800b46c:	b131      	cbz	r1, 800b47c <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800b46e:	4620      	mov	r0, r4
 800b470:	2101      	movs	r1, #1
 800b472:	f7ff ff1f 	bl	800b2b4 <tcp_abandon>
}
 800b476:	f06f 000c 	mvn.w	r0, #12
 800b47a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <tcp_accept_null+0x30>)
 800b47e:	f240 320f 	movw	r2, #783	; 0x30f
 800b482:	4906      	ldr	r1, [pc, #24]	; (800b49c <tcp_accept_null+0x34>)
 800b484:	4806      	ldr	r0, [pc, #24]	; (800b4a0 <tcp_accept_null+0x38>)
 800b486:	f007 f833 	bl	80124f0 <iprintf>
  tcp_abandon(pcb, 1);
 800b48a:	4620      	mov	r0, r4
 800b48c:	2101      	movs	r1, #1
 800b48e:	f7ff ff11 	bl	800b2b4 <tcp_abandon>
}
 800b492:	f06f 000c 	mvn.w	r0, #12
 800b496:	bd10      	pop	{r4, pc}
 800b498:	08016068 	.word	0x08016068
 800b49c:	0801656c 	.word	0x0801656c
 800b4a0:	08014fe0 	.word	0x08014fe0

0800b4a4 <tcp_netif_ip_addr_changed_pcblist>:
{
 800b4a4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b4a6:	4605      	mov	r5, r0
{
 800b4a8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b4aa:	b178      	cbz	r0, 800b4cc <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 800b4ac:	b134      	cbz	r4, 800b4bc <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b4ae:	6822      	ldr	r2, [r4, #0]
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d003      	beq.n	800b4be <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 800b4b6:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b4b8:	2c00      	cmp	r4, #0
 800b4ba:	d1f8      	bne.n	800b4ae <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800b4bc:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 800b4be:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	2101      	movs	r1, #1
      pcb = next;
 800b4c4:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 800b4c6:	f7ff fef5 	bl	800b2b4 <tcp_abandon>
      pcb = next;
 800b4ca:	e7ef      	b.n	800b4ac <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b4cc:	4b03      	ldr	r3, [pc, #12]	; (800b4dc <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b4ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b4d2:	4903      	ldr	r1, [pc, #12]	; (800b4e0 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800b4d4:	4803      	ldr	r0, [pc, #12]	; (800b4e4 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800b4d6:	f007 f80b 	bl	80124f0 <iprintf>
 800b4da:	e7e7      	b.n	800b4ac <tcp_netif_ip_addr_changed_pcblist+0x8>
 800b4dc:	08016068 	.word	0x08016068
 800b4e0:	0801658c 	.word	0x0801658c
 800b4e4:	08014fe0 	.word	0x08014fe0

0800b4e8 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	; (800b528 <tcp_kill_state+0x40>)
 800b4ea:	6819      	ldr	r1, [r3, #0]
 800b4ec:	b1d1      	cbz	r1, 800b524 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b4ee:	4b0f      	ldr	r3, [pc, #60]	; (800b52c <tcp_kill_state+0x44>)
  inactivity = 0;
 800b4f0:	2200      	movs	r2, #0
{
 800b4f2:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b4f4:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800b4f6:	4614      	mov	r4, r2
 800b4f8:	e001      	b.n	800b4fe <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4fa:	68c9      	ldr	r1, [r1, #12]
 800b4fc:	b159      	cbz	r1, 800b516 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 800b4fe:	7d0b      	ldrb	r3, [r1, #20]
 800b500:	4283      	cmp	r3, r0
 800b502:	d1fa      	bne.n	800b4fa <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b504:	6a0b      	ldr	r3, [r1, #32]
 800b506:	1aeb      	subs	r3, r5, r3
 800b508:	4293      	cmp	r3, r2
 800b50a:	d3f6      	bcc.n	800b4fa <tcp_kill_state+0x12>
 800b50c:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b50e:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b510:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b512:	2900      	cmp	r1, #0
 800b514:	d1f3      	bne.n	800b4fe <tcp_kill_state+0x16>
  if (inactive != NULL) {
 800b516:	b11c      	cbz	r4, 800b520 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 800b518:	4620      	mov	r0, r4
}
 800b51a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800b51c:	f7ff beca 	b.w	800b2b4 <tcp_abandon>
}
 800b520:	bc30      	pop	{r4, r5}
 800b522:	4770      	bx	lr
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	24010d38 	.word	0x24010d38
 800b52c:	24010d48 	.word	0x24010d48

0800b530 <tcp_alloc>:
{
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 800b534:	f7f9 fc2a 	bl	8004d8c <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b538:	2001      	movs	r0, #1
 800b53a:	f7fe fa09 	bl	8009950 <memp_malloc>
  if (pcb == NULL) {
 800b53e:	4603      	mov	r3, r0
 800b540:	b320      	cbz	r0, 800b58c <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b542:	229c      	movs	r2, #156	; 0x9c
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 800b548:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b54c:	f007 f89d 	bl	801268a <memset>
    pcb->last_timer = tcp_timer_ctr;
 800b550:	4943      	ldr	r1, [pc, #268]	; (800b660 <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b552:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b554:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 800b556:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800b558:	4842      	ldr	r0, [pc, #264]	; (800b664 <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b55a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 800b55e:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b560:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 800b562:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b564:	4a40      	ldr	r2, [pc, #256]	; (800b668 <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 800b566:	4941      	ldr	r1, [pc, #260]	; (800b66c <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 800b568:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 800b56c:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 800b56e:	4c40      	ldr	r4, [pc, #256]	; (800b670 <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 800b570:	4840      	ldr	r0, [pc, #256]	; (800b674 <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 800b572:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b576:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 800b57a:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b57c:	493e      	ldr	r1, [pc, #248]	; (800b678 <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 800b57e:	6498      	str	r0, [r3, #72]	; 0x48
}
 800b580:	4618      	mov	r0, r3
    pcb->prio = prio;
 800b582:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 800b584:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b586:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b588:	72da      	strb	r2, [r3, #11]
}
 800b58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b58c:	4e3b      	ldr	r6, [pc, #236]	; (800b67c <tcp_alloc+0x14c>)
 800b58e:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 800b590:	b15c      	cbz	r4, 800b5aa <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 800b592:	4620      	mov	r0, r4
 800b594:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800b596:	8b43      	ldrh	r3, [r0, #26]
 800b598:	0719      	lsls	r1, r3, #28
 800b59a:	d5f9      	bpl.n	800b590 <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b59c:	f023 0308 	bic.w	r3, r3, #8
 800b5a0:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800b5a2:	f7ff f885 	bl	800a6b0 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800b5a6:	2c00      	cmp	r4, #0
 800b5a8:	d1f3      	bne.n	800b592 <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5aa:	4b35      	ldr	r3, [pc, #212]	; (800b680 <tcp_alloc+0x150>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	b193      	cbz	r3, 800b5d6 <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b5b0:	4a2c      	ldr	r2, [pc, #176]	; (800b664 <tcp_alloc+0x134>)
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	6a19      	ldr	r1, [r3, #32]
 800b5b6:	6814      	ldr	r4, [r2, #0]
 800b5b8:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	b143      	cbz	r3, 800b5d0 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b5be:	6a1a      	ldr	r2, [r3, #32]
 800b5c0:	1aa2      	subs	r2, r4, r2
 800b5c2:	428a      	cmp	r2, r1
 800b5c4:	d3f9      	bcc.n	800b5ba <tcp_alloc+0x8a>
 800b5c6:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5c8:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b5ca:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1f6      	bne.n	800b5be <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	f7ff fe6f 	bl	800b2b4 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	f7fe f9ba 	bl	8009950 <memp_malloc>
    if (pcb == NULL) {
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d1af      	bne.n	800b542 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800b5e2:	2009      	movs	r0, #9
 800b5e4:	f7ff ff80 	bl	800b4e8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5e8:	2001      	movs	r0, #1
 800b5ea:	f7fe f9b1 	bl	8009950 <memp_malloc>
      if (pcb == NULL) {
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d1a6      	bne.n	800b542 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800b5f4:	2008      	movs	r0, #8
 800b5f6:	f7ff ff77 	bl	800b4e8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	f7fe f9a8 	bl	8009950 <memp_malloc>
        if (pcb == NULL) {
 800b600:	4603      	mov	r3, r0
 800b602:	2800      	cmp	r0, #0
 800b604:	d19d      	bne.n	800b542 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b606:	062a      	lsls	r2, r5, #24
 800b608:	d427      	bmi.n	800b65a <tcp_alloc+0x12a>
  if (mprio == 0) {
 800b60a:	b1ed      	cbz	r5, 800b648 <tcp_alloc+0x118>
 800b60c:	462a      	mov	r2, r5
  mprio--;
 800b60e:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b610:	6832      	ldr	r2, [r6, #0]
  mprio--;
 800b612:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b614:	b1c2      	cbz	r2, 800b648 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b616:	4813      	ldr	r0, [pc, #76]	; (800b664 <tcp_alloc+0x134>)
  inactivity = 0;
 800b618:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b61a:	6807      	ldr	r7, [r0, #0]
 800b61c:	e005      	b.n	800b62a <tcp_alloc+0xfa>
 800b61e:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800b620:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 800b622:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 800b624:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b626:	68d2      	ldr	r2, [r2, #12]
 800b628:	b14a      	cbz	r2, 800b63e <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 800b62a:	7d50      	ldrb	r0, [r2, #21]
 800b62c:	4288      	cmp	r0, r1
 800b62e:	d3f6      	bcc.n	800b61e <tcp_alloc+0xee>
 800b630:	d1f9      	bne.n	800b626 <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b632:	6a14      	ldr	r4, [r2, #32]
 800b634:	eba7 0e04 	sub.w	lr, r7, r4
 800b638:	45b6      	cmp	lr, r6
 800b63a:	d3f4      	bcc.n	800b626 <tcp_alloc+0xf6>
 800b63c:	e7f0      	b.n	800b620 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 800b63e:	b11b      	cbz	r3, 800b648 <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 800b640:	2101      	movs	r1, #1
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff fe36 	bl	800b2b4 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b648:	2001      	movs	r0, #1
 800b64a:	f7fe f981 	bl	8009950 <memp_malloc>
  if (pcb != NULL) {
 800b64e:	4603      	mov	r3, r0
 800b650:	2800      	cmp	r0, #0
 800b652:	f47f af76 	bne.w	800b542 <tcp_alloc+0x12>
}
 800b656:	4618      	mov	r0, r3
 800b658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b65a:	227f      	movs	r2, #127	; 0x7f
 800b65c:	e7d7      	b.n	800b60e <tcp_alloc+0xde>
 800b65e:	bf00      	nop
 800b660:	24010d4d 	.word	0x24010d4d
 800b664:	24010d48 	.word	0x24010d48
 800b668:	006ddd00 	.word	0x006ddd00
 800b66c:	0800b8f1 	.word	0x0800b8f1
 800b670:	0218ffff 	.word	0x0218ffff
 800b674:	16d00001 	.word	0x16d00001
 800b678:	16d016d0 	.word	0x16d016d0
 800b67c:	24010d38 	.word	0x24010d38
 800b680:	24010d50 	.word	0x24010d50

0800b684 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b684:	2040      	movs	r0, #64	; 0x40
 800b686:	f7ff bf53 	b.w	800b530 <tcp_alloc>
 800b68a:	bf00      	nop

0800b68c <tcp_close_shutdown>:
{
 800b68c:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b68e:	4604      	mov	r4, r0
{
 800b690:	b085      	sub	sp, #20
 800b692:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b694:	2800      	cmp	r0, #0
 800b696:	d06b      	beq.n	800b770 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b698:	7d23      	ldrb	r3, [r4, #20]
 800b69a:	b11d      	cbz	r5, 800b6a4 <tcp_close_shutdown+0x18>
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d00c      	beq.n	800b6ba <tcp_close_shutdown+0x2e>
 800b6a0:	2b07      	cmp	r3, #7
 800b6a2:	d00a      	beq.n	800b6ba <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d06b      	beq.n	800b780 <tcp_close_shutdown+0xf4>
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d030      	beq.n	800b70e <tcp_close_shutdown+0x82>
 800b6ac:	b333      	cbz	r3, 800b6fc <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 800b6ae:	4620      	mov	r0, r4
}
 800b6b0:	b005      	add	sp, #20
 800b6b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b6b6:	f7fe bffb 	b.w	800a6b0 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b6ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	d037      	beq.n	800b730 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b6c0:	8b63      	ldrh	r3, [r4, #26]
 800b6c2:	06db      	lsls	r3, r3, #27
 800b6c4:	f140 8085 	bpl.w	800b7d2 <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b6c8:	8b21      	ldrh	r1, [r4, #24]
 800b6ca:	1d20      	adds	r0, r4, #4
 800b6cc:	8ae2      	ldrh	r2, [r4, #22]
 800b6ce:	4623      	mov	r3, r4
 800b6d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b6d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b6d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b6d8:	9000      	str	r0, [sp, #0]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f002 fd74 	bl	800e1c8 <tcp_rst>
      tcp_pcb_purge(pcb);
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7ff fa7b 	bl	800abdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b6e6:	4a45      	ldr	r2, [pc, #276]	; (800b7fc <tcp_close_shutdown+0x170>)
 800b6e8:	6813      	ldr	r3, [r2, #0]
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	d031      	beq.n	800b752 <tcp_close_shutdown+0xc6>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d031      	beq.n	800b756 <tcp_close_shutdown+0xca>
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	42a2      	cmp	r2, r4
 800b6f6:	d069      	beq.n	800b7cc <tcp_close_shutdown+0x140>
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	e7f8      	b.n	800b6ee <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 800b6fc:	8ae3      	ldrh	r3, [r4, #22]
 800b6fe:	b9eb      	cbnz	r3, 800b73c <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 800b700:	4621      	mov	r1, r4
 800b702:	2001      	movs	r0, #1
 800b704:	f7fe f96a 	bl	80099dc <memp_free>
}
 800b708:	2000      	movs	r0, #0
 800b70a:	b005      	add	sp, #20
 800b70c:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b70e:	4621      	mov	r1, r4
 800b710:	483a      	ldr	r0, [pc, #232]	; (800b7fc <tcp_close_shutdown+0x170>)
 800b712:	f7ff fd5f 	bl	800b1d4 <tcp_pcb_remove>
 800b716:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b718:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b71a:	4a39      	ldr	r2, [pc, #228]	; (800b800 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b71c:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b71e:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b720:	d1ee      	bne.n	800b700 <tcp_close_shutdown+0x74>
 800b722:	4b38      	ldr	r3, [pc, #224]	; (800b804 <tcp_close_shutdown+0x178>)
 800b724:	22d4      	movs	r2, #212	; 0xd4
 800b726:	4938      	ldr	r1, [pc, #224]	; (800b808 <tcp_close_shutdown+0x17c>)
 800b728:	4838      	ldr	r0, [pc, #224]	; (800b80c <tcp_close_shutdown+0x180>)
 800b72a:	f006 fee1 	bl	80124f0 <iprintf>
 800b72e:	e7e7      	b.n	800b700 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b730:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b732:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b736:	4291      	cmp	r1, r2
 800b738:	d0b4      	beq.n	800b6a4 <tcp_close_shutdown+0x18>
 800b73a:	e7c1      	b.n	800b6c0 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b73c:	4a34      	ldr	r2, [pc, #208]	; (800b810 <tcp_close_shutdown+0x184>)
 800b73e:	6813      	ldr	r3, [r2, #0]
 800b740:	42a3      	cmp	r3, r4
 800b742:	d051      	beq.n	800b7e8 <tcp_close_shutdown+0x15c>
 800b744:	2b00      	cmp	r3, #0
 800b746:	d03e      	beq.n	800b7c6 <tcp_close_shutdown+0x13a>
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	42a2      	cmp	r2, r4
 800b74c:	d039      	beq.n	800b7c2 <tcp_close_shutdown+0x136>
 800b74e:	4613      	mov	r3, r2
 800b750:	e7f8      	b.n	800b744 <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800b756:	4b2f      	ldr	r3, [pc, #188]	; (800b814 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 800b758:	2000      	movs	r0, #0
 800b75a:	4a29      	ldr	r2, [pc, #164]	; (800b800 <tcp_close_shutdown+0x174>)
 800b75c:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800b75e:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800b760:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800b762:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800b764:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800b766:	d03c      	beq.n	800b7e2 <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b768:	7d23      	ldrb	r3, [r4, #20]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d1c8      	bne.n	800b700 <tcp_close_shutdown+0x74>
 800b76e:	e7d8      	b.n	800b722 <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b770:	4b24      	ldr	r3, [pc, #144]	; (800b804 <tcp_close_shutdown+0x178>)
 800b772:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b776:	4928      	ldr	r1, [pc, #160]	; (800b818 <tcp_close_shutdown+0x18c>)
 800b778:	4824      	ldr	r0, [pc, #144]	; (800b80c <tcp_close_shutdown+0x180>)
 800b77a:	f006 feb9 	bl	80124f0 <iprintf>
 800b77e:	e78b      	b.n	800b698 <tcp_close_shutdown+0xc>
 800b780:	4926      	ldr	r1, [pc, #152]	; (800b81c <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 800b782:	2000      	movs	r0, #0
  switch (pcb->state) {
 800b784:	4b22      	ldr	r3, [pc, #136]	; (800b810 <tcp_close_shutdown+0x184>)
 800b786:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b78a:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b78c:	b133      	cbz	r3, 800b79c <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 800b78e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b790:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800b792:	bf08      	it	eq
 800b794:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f8      	bne.n	800b78e <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b79c:	42a9      	cmp	r1, r5
 800b79e:	d002      	beq.n	800b7a6 <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b7a0:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b7a4:	e7f1      	b.n	800b78a <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	481d      	ldr	r0, [pc, #116]	; (800b820 <tcp_close_shutdown+0x194>)
 800b7aa:	f7ff fd13 	bl	800b1d4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b7ae:	7d23      	ldrb	r3, [r4, #20]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d01c      	beq.n	800b7ee <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	2002      	movs	r0, #2
 800b7b8:	f7fe f910 	bl	80099dc <memp_free>
}
 800b7bc:	2000      	movs	r0, #0
 800b7be:	b005      	add	sp, #20
 800b7c0:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7c2:	68e2      	ldr	r2, [r4, #12]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60e3      	str	r3, [r4, #12]
 800b7ca:	e799      	b.n	800b700 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 800b7cc:	68e2      	ldr	r2, [r4, #12]
 800b7ce:	60da      	str	r2, [r3, #12]
 800b7d0:	e7c1      	b.n	800b756 <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b7d2:	4b0c      	ldr	r3, [pc, #48]	; (800b804 <tcp_close_shutdown+0x178>)
 800b7d4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b7d8:	4912      	ldr	r1, [pc, #72]	; (800b824 <tcp_close_shutdown+0x198>)
 800b7da:	480c      	ldr	r0, [pc, #48]	; (800b80c <tcp_close_shutdown+0x180>)
 800b7dc:	f006 fe88 	bl	80124f0 <iprintf>
 800b7e0:	e772      	b.n	800b6c8 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 800b7e2:	f001 fdcb 	bl	800d37c <tcp_trigger_input_pcb_close>
 800b7e6:	e78f      	b.n	800b708 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7e8:	68e3      	ldr	r3, [r4, #12]
 800b7ea:	6013      	str	r3, [r2, #0]
 800b7ec:	e7eb      	b.n	800b7c6 <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <tcp_close_shutdown+0x178>)
 800b7f0:	22df      	movs	r2, #223	; 0xdf
 800b7f2:	490d      	ldr	r1, [pc, #52]	; (800b828 <tcp_close_shutdown+0x19c>)
 800b7f4:	4805      	ldr	r0, [pc, #20]	; (800b80c <tcp_close_shutdown+0x180>)
 800b7f6:	f006 fe7b 	bl	80124f0 <iprintf>
 800b7fa:	e7db      	b.n	800b7b4 <tcp_close_shutdown+0x128>
 800b7fc:	24010d38 	.word	0x24010d38
 800b800:	24010d3c 	.word	0x24010d3c
 800b804:	08016068 	.word	0x08016068
 800b808:	080160a4 	.word	0x080160a4
 800b80c:	08014fe0 	.word	0x08014fe0
 800b810:	24010d40 	.word	0x24010d40
 800b814:	24010d7c 	.word	0x24010d7c
 800b818:	080165c0 	.word	0x080165c0
 800b81c:	080166e8 	.word	0x080166e8
 800b820:	24010d44 	.word	0x24010d44
 800b824:	080165e0 	.word	0x080165e0
 800b828:	080165fc 	.word	0x080165fc

0800b82c <tcp_close>:
{
 800b82c:	b510      	push	{r4, lr}
 800b82e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800b830:	f7f9 faac 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b834:	b164      	cbz	r4, 800b850 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800b836:	7d23      	ldrb	r3, [r4, #20]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d003      	beq.n	800b844 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b83c:	8b63      	ldrh	r3, [r4, #26]
 800b83e:	f043 0310 	orr.w	r3, r3, #16
 800b842:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800b844:	4620      	mov	r0, r4
 800b846:	2101      	movs	r1, #1
}
 800b848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800b84c:	f7ff bf1e 	b.w	800b68c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b850:	4b04      	ldr	r3, [pc, #16]	; (800b864 <tcp_close+0x38>)
 800b852:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b856:	4904      	ldr	r1, [pc, #16]	; (800b868 <tcp_close+0x3c>)
 800b858:	4804      	ldr	r0, [pc, #16]	; (800b86c <tcp_close+0x40>)
 800b85a:	f006 fe49 	bl	80124f0 <iprintf>
}
 800b85e:	f06f 000f 	mvn.w	r0, #15
 800b862:	bd10      	pop	{r4, pc}
 800b864:	08016068 	.word	0x08016068
 800b868:	08016618 	.word	0x08016618
 800b86c:	08014fe0 	.word	0x08014fe0

0800b870 <tcp_shutdown>:
{
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4604      	mov	r4, r0
 800b874:	460e      	mov	r6, r1
 800b876:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800b878:	f7f9 fa88 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b87c:	b33c      	cbz	r4, 800b8ce <tcp_shutdown+0x5e>
  if (pcb->state == LISTEN) {
 800b87e:	7d23      	ldrb	r3, [r4, #20]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d005      	beq.n	800b890 <tcp_shutdown+0x20>
  if (shut_rx) {
 800b884:	b93e      	cbnz	r6, 800b896 <tcp_shutdown+0x26>
  if (shut_tx) {
 800b886:	b1d5      	cbz	r5, 800b8be <tcp_shutdown+0x4e>
    switch (pcb->state) {
 800b888:	2b04      	cmp	r3, #4
 800b88a:	d810      	bhi.n	800b8ae <tcp_shutdown+0x3e>
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d810      	bhi.n	800b8b2 <tcp_shutdown+0x42>
 800b890:	f06f 000a 	mvn.w	r0, #10
}
 800b894:	bd70      	pop	{r4, r5, r6, pc}
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b896:	8b63      	ldrh	r3, [r4, #26]
 800b898:	f043 0310 	orr.w	r3, r3, #16
 800b89c:	8363      	strh	r3, [r4, #26]
    if (shut_tx) {
 800b89e:	b985      	cbnz	r5, 800b8c2 <tcp_shutdown+0x52>
    if (pcb->refused_data != NULL) {
 800b8a0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b8a2:	b160      	cbz	r0, 800b8be <tcp_shutdown+0x4e>
      pbuf_free(pcb->refused_data);
 800b8a4:	f7fe fc60 	bl	800a168 <pbuf_free>
  return ERR_OK;
 800b8a8:	4628      	mov	r0, r5
      pcb->refused_data = NULL;
 800b8aa:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800b8ac:	bd70      	pop	{r4, r5, r6, pc}
    switch (pcb->state) {
 800b8ae:	2b07      	cmp	r3, #7
 800b8b0:	d1ee      	bne.n	800b890 <tcp_shutdown+0x20>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	2100      	movs	r1, #0
}
 800b8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b8ba:	f7ff bee7 	b.w	800b68c <tcp_close_shutdown>
  return ERR_OK;
 800b8be:	2000      	movs	r0, #0
}
 800b8c0:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	2101      	movs	r1, #1
}
 800b8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return tcp_close_shutdown(pcb, 1);
 800b8ca:	f7ff bedf 	b.w	800b68c <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <tcp_shutdown+0x74>)
 800b8d0:	f240 2207 	movw	r2, #519	; 0x207
 800b8d4:	4904      	ldr	r1, [pc, #16]	; (800b8e8 <tcp_shutdown+0x78>)
 800b8d6:	4805      	ldr	r0, [pc, #20]	; (800b8ec <tcp_shutdown+0x7c>)
 800b8d8:	f006 fe0a 	bl	80124f0 <iprintf>
 800b8dc:	f06f 000f 	mvn.w	r0, #15
}
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	bf00      	nop
 800b8e4:	08016068 	.word	0x08016068
 800b8e8:	08016630 	.word	0x08016630
 800b8ec:	08014fe0 	.word	0x08014fe0

0800b8f0 <tcp_recv_null>:
{
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8f4:	b301      	cbz	r1, 800b938 <tcp_recv_null+0x48>
  if (p != NULL) {
 800b8f6:	4614      	mov	r4, r2
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	b142      	cbz	r2, 800b90e <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800b8fc:	8911      	ldrh	r1, [r2, #8]
 800b8fe:	f7ff f85d 	bl	800a9bc <tcp_recved>
    pbuf_free(p);
 800b902:	4620      	mov	r0, r4
 800b904:	f7fe fc30 	bl	800a168 <pbuf_free>
  return ERR_OK;
 800b908:	2000      	movs	r0, #0
}
 800b90a:	b002      	add	sp, #8
 800b90c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800b90e:	b113      	cbz	r3, 800b916 <tcp_recv_null+0x26>
  return ERR_OK;
 800b910:	4610      	mov	r0, r2
}
 800b912:	b002      	add	sp, #8
 800b914:	bd10      	pop	{r4, pc}
 800b916:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b918:	f7f9 fa38 	bl	8004d8c <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800b91c:	9801      	ldr	r0, [sp, #4]
 800b91e:	7d03      	ldrb	r3, [r0, #20]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d003      	beq.n	800b92c <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b924:	8b43      	ldrh	r3, [r0, #26]
 800b926:	f043 0310 	orr.w	r3, r3, #16
 800b92a:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800b92c:	2101      	movs	r1, #1
}
 800b92e:	b002      	add	sp, #8
 800b930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800b934:	f7ff beaa 	b.w	800b68c <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b938:	4b04      	ldr	r3, [pc, #16]	; (800b94c <tcp_recv_null+0x5c>)
 800b93a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b93e:	4904      	ldr	r1, [pc, #16]	; (800b950 <tcp_recv_null+0x60>)
 800b940:	4804      	ldr	r0, [pc, #16]	; (800b954 <tcp_recv_null+0x64>)
 800b942:	f006 fdd5 	bl	80124f0 <iprintf>
 800b946:	f06f 000f 	mvn.w	r0, #15
 800b94a:	e7de      	b.n	800b90a <tcp_recv_null+0x1a>
 800b94c:	08016068 	.word	0x08016068
 800b950:	0801664c 	.word	0x0801664c
 800b954:	08014fe0 	.word	0x08014fe0

0800b958 <tcp_process_refused_data>:
{
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b95a:	b380      	cbz	r0, 800b9be <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800b95c:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800b95e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b960:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800b964:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800b966:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800b968:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b96a:	b156      	cbz	r6, 800b982 <tcp_process_refused_data+0x2a>
 800b96c:	4601      	mov	r1, r0
 800b96e:	462a      	mov	r2, r5
 800b970:	6900      	ldr	r0, [r0, #16]
 800b972:	47b0      	blx	r6
    if (err == ERR_OK) {
 800b974:	b158      	cbz	r0, 800b98e <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800b976:	300d      	adds	r0, #13
 800b978:	d01e      	beq.n	800b9b8 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800b97a:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800b97e:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800b980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800b982:	8929      	ldrh	r1, [r5, #8]
 800b984:	f7ff f81a 	bl	800a9bc <tcp_recved>
    pbuf_free(p);
 800b988:	4628      	mov	r0, r5
 800b98a:	f7fe fbed 	bl	800a168 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b98e:	06bb      	lsls	r3, r7, #26
 800b990:	d510      	bpl.n	800b9b4 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b992:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b994:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b998:	4293      	cmp	r3, r2
 800b99a:	d001      	beq.n	800b9a0 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800b99c:	3301      	adds	r3, #1
 800b99e:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800b9a0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b9a4:	b135      	cbz	r5, 800b9b4 <tcp_process_refused_data+0x5c>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	6920      	ldr	r0, [r4, #16]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800b9b0:	300d      	adds	r0, #13
 800b9b2:	d001      	beq.n	800b9b8 <tcp_process_refused_data+0x60>
  return ERR_OK;
 800b9b4:	2000      	movs	r0, #0
}
 800b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800b9b8:	f06f 000c 	mvn.w	r0, #12
}
 800b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9be:	4b05      	ldr	r3, [pc, #20]	; (800b9d4 <tcp_process_refused_data+0x7c>)
 800b9c0:	f240 6209 	movw	r2, #1545	; 0x609
 800b9c4:	4904      	ldr	r1, [pc, #16]	; (800b9d8 <tcp_process_refused_data+0x80>)
 800b9c6:	4805      	ldr	r0, [pc, #20]	; (800b9dc <tcp_process_refused_data+0x84>)
 800b9c8:	f006 fd92 	bl	80124f0 <iprintf>
 800b9cc:	f06f 000f 	mvn.w	r0, #15
}
 800b9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08016068 	.word	0x08016068
 800b9d8:	08016668 	.word	0x08016668
 800b9dc:	08014fe0 	.word	0x08014fe0

0800b9e0 <tcp_fasttmr>:
{
 800b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800b9e4:	4d1c      	ldr	r5, [pc, #112]	; (800ba58 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800b9e6:	2700      	movs	r7, #0
 800b9e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800ba60 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800b9ec:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800b9ee:	4e1b      	ldr	r6, [pc, #108]	; (800ba5c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800b9f4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800b9f8:	b1bc      	cbz	r4, 800ba2a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b9fa:	782a      	ldrb	r2, [r5, #0]
 800b9fc:	7fa3      	ldrb	r3, [r4, #30]
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d015      	beq.n	800ba2e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 800ba02:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800ba04:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800ba06:	07d9      	lsls	r1, r3, #31
 800ba08:	d41a      	bmi.n	800ba40 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 800ba0a:	071a      	lsls	r2, r3, #28
 800ba0c:	d411      	bmi.n	800ba32 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 800ba0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800ba10:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800ba14:	b133      	cbz	r3, 800ba24 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 800ba16:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800ba18:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800ba1a:	f7ff ff9d 	bl	800b958 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ba1e:	7833      	ldrb	r3, [r6, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e7      	bne.n	800b9f4 <tcp_fasttmr+0x14>
      pcb = next;
 800ba24:	464c      	mov	r4, r9
  while (pcb != NULL) {
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d1e7      	bne.n	800b9fa <tcp_fasttmr+0x1a>
}
 800ba2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800ba2e:	68e4      	ldr	r4, [r4, #12]
 800ba30:	e7e2      	b.n	800b9f8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ba32:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800ba36:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ba38:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ba3a:	f7fe fe39 	bl	800a6b0 <tcp_close_shutdown_fin>
 800ba3e:	e7e6      	b.n	800ba0e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800ba40:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ba44:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ba46:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800ba48:	f002 fc38 	bl	800e2bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba4c:	8b63      	ldrh	r3, [r4, #26]
 800ba4e:	f023 0303 	bic.w	r3, r3, #3
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	8363      	strh	r3, [r4, #26]
 800ba56:	e7d8      	b.n	800ba0a <tcp_fasttmr+0x2a>
 800ba58:	24010d4d 	.word	0x24010d4d
 800ba5c:	24010d3c 	.word	0x24010d3c
 800ba60:	24010d38 	.word	0x24010d38

0800ba64 <tcp_tmr>:
{
 800ba64:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ba66:	f7ff ffbb 	bl	800b9e0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ba6a:	4a06      	ldr	r2, [pc, #24]	; (800ba84 <tcp_tmr+0x20>)
 800ba6c:	7813      	ldrb	r3, [r2, #0]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	7013      	strb	r3, [r2, #0]
 800ba74:	07db      	lsls	r3, r3, #31
 800ba76:	d400      	bmi.n	800ba7a <tcp_tmr+0x16>
}
 800ba78:	bd08      	pop	{r3, pc}
 800ba7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800ba7e:	f7ff b8ff 	b.w	800ac80 <tcp_slowtmr>
 800ba82:	bf00      	nop
 800ba84:	24010d4c 	.word	0x24010d4c

0800ba88 <tcp_next_iss>:
{
 800ba88:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ba8a:	b130      	cbz	r0, 800ba9a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800ba8c:	4b07      	ldr	r3, [pc, #28]	; (800baac <tcp_next_iss+0x24>)
 800ba8e:	4a08      	ldr	r2, [pc, #32]	; (800bab0 <tcp_next_iss+0x28>)
 800ba90:	6818      	ldr	r0, [r3, #0]
 800ba92:	6812      	ldr	r2, [r2, #0]
 800ba94:	4410      	add	r0, r2
 800ba96:	6018      	str	r0, [r3, #0]
}
 800ba98:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ba9a:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <tcp_next_iss+0x2c>)
 800ba9c:	f640 02af 	movw	r2, #2223	; 0x8af
 800baa0:	4905      	ldr	r1, [pc, #20]	; (800bab8 <tcp_next_iss+0x30>)
 800baa2:	4806      	ldr	r0, [pc, #24]	; (800babc <tcp_next_iss+0x34>)
 800baa4:	f006 fd24 	bl	80124f0 <iprintf>
 800baa8:	e7f0      	b.n	800ba8c <tcp_next_iss+0x4>
 800baaa:	bf00      	nop
 800baac:	2400003c 	.word	0x2400003c
 800bab0:	24010d48 	.word	0x24010d48
 800bab4:	08016068 	.word	0x08016068
 800bab8:	08016690 	.word	0x08016690
 800babc:	08014fe0 	.word	0x08014fe0

0800bac0 <tcp_eff_send_mss_netif>:
{
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4605      	mov	r5, r0
 800bac4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bac6:	b172      	cbz	r2, 800bae6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 800bac8:	b144      	cbz	r4, 800badc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 800baca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 800bacc:	b133      	cbz	r3, 800badc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bace:	2b28      	cmp	r3, #40	; 0x28
 800bad0:	d906      	bls.n	800bae0 <tcp_eff_send_mss_netif+0x20>
 800bad2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	429d      	cmp	r5, r3
 800bad8:	bf28      	it	cs
 800bada:	461d      	movcs	r5, r3
}
 800badc:	4628      	mov	r0, r5
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	2500      	movs	r5, #0
 800bae2:	4628      	mov	r0, r5
 800bae4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bae6:	4b04      	ldr	r3, [pc, #16]	; (800baf8 <tcp_eff_send_mss_netif+0x38>)
 800bae8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800baec:	4903      	ldr	r1, [pc, #12]	; (800bafc <tcp_eff_send_mss_netif+0x3c>)
 800baee:	4804      	ldr	r0, [pc, #16]	; (800bb00 <tcp_eff_send_mss_netif+0x40>)
 800baf0:	f006 fcfe 	bl	80124f0 <iprintf>
 800baf4:	e7e8      	b.n	800bac8 <tcp_eff_send_mss_netif+0x8>
 800baf6:	bf00      	nop
 800baf8:	08016068 	.word	0x08016068
 800bafc:	080166ac 	.word	0x080166ac
 800bb00:	08014fe0 	.word	0x08014fe0

0800bb04 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800bb04:	b308      	cbz	r0, 800bb4a <tcp_netif_ip_addr_changed+0x46>
{
 800bb06:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800bb08:	6803      	ldr	r3, [r0, #0]
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	b903      	cbnz	r3, 800bb10 <tcp_netif_ip_addr_changed+0xc>
}
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bb10:	4b0e      	ldr	r3, [pc, #56]	; (800bb4c <tcp_netif_ip_addr_changed+0x48>)
 800bb12:	460d      	mov	r5, r1
 800bb14:	6819      	ldr	r1, [r3, #0]
 800bb16:	f7ff fcc5 	bl	800b4a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <tcp_netif_ip_addr_changed+0x4c>)
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	f7ff fcc0 	bl	800b4a4 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800bb24:	2d00      	cmp	r5, #0
 800bb26:	d0f2      	beq.n	800bb0e <tcp_netif_ip_addr_changed+0xa>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d0ef      	beq.n	800bb0e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb2e:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <tcp_netif_ip_addr_changed+0x50>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0eb      	beq.n	800bb0e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bb36:	6819      	ldr	r1, [r3, #0]
 800bb38:	6822      	ldr	r2, [r4, #0]
 800bb3a:	4291      	cmp	r1, r2
 800bb3c:	d101      	bne.n	800bb42 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bb3e:	682a      	ldr	r2, [r5, #0]
 800bb40:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1f6      	bne.n	800bb36 <tcp_netif_ip_addr_changed+0x32>
}
 800bb48:	bd38      	pop	{r3, r4, r5, pc}
 800bb4a:	4770      	bx	lr
 800bb4c:	24010d38 	.word	0x24010d38
 800bb50:	24010d40 	.word	0x24010d40
 800bb54:	24010d44 	.word	0x24010d44

0800bb58 <tcp_free_ooseq>:
{
 800bb58:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800bb5a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800bb5c:	b16c      	cbz	r4, 800bb7a <tcp_free_ooseq+0x22>
 800bb5e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800bb60:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800bb62:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800bb64:	6868      	ldr	r0, [r5, #4]
 800bb66:	b108      	cbz	r0, 800bb6c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800bb68:	f7fe fafe 	bl	800a168 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	2003      	movs	r0, #3
 800bb70:	f7fd ff34 	bl	80099dc <memp_free>
  while (seg != NULL) {
 800bb74:	2c00      	cmp	r4, #0
 800bb76:	d1f3      	bne.n	800bb60 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800bb78:	6774      	str	r4, [r6, #116]	; 0x74
}
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}

0800bb7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bb7e:	4605      	mov	r5, r0
{
 800bb80:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d03e      	beq.n	800bc04 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bb86:	68eb      	ldr	r3, [r5, #12]
 800bb88:	8998      	ldrh	r0, [r3, #12]
 800bb8a:	f7fd fb4b 	bl	8009224 <lwip_htons>
 800bb8e:	07c2      	lsls	r2, r0, #31
 800bb90:	d432      	bmi.n	800bbf8 <tcp_oos_insert_segment+0x7c>
 800bb92:	4e20      	ldr	r6, [pc, #128]	; (800bc14 <tcp_oos_insert_segment+0x98>)
 800bb94:	e005      	b.n	800bba2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800bb96:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f7fe ff61 	bl	800aa60 <tcp_seg_free>
    while (next &&
 800bb9e:	463c      	mov	r4, r7
 800bba0:	b1ef      	cbz	r7, 800bbde <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bba2:	68e1      	ldr	r1, [r4, #12]
 800bba4:	8923      	ldrh	r3, [r4, #8]
 800bba6:	6837      	ldr	r7, [r6, #0]
 800bba8:	892a      	ldrh	r2, [r5, #8]
 800bbaa:	6848      	ldr	r0, [r1, #4]
 800bbac:	443a      	add	r2, r7
 800bbae:	4403      	add	r3, r0
 800bbb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	db15      	blt.n	800bbe2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bbb6:	8988      	ldrh	r0, [r1, #12]
 800bbb8:	f7fd fb34 	bl	8009224 <lwip_htons>
 800bbbc:	07c3      	lsls	r3, r0, #31
 800bbbe:	d5ea      	bpl.n	800bb96 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bbc0:	68eb      	ldr	r3, [r5, #12]
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	899f      	ldrh	r7, [r3, #12]
 800bbc6:	f7fd fb2d 	bl	8009224 <lwip_htons>
 800bbca:	68eb      	ldr	r3, [r5, #12]
 800bbcc:	4338      	orrs	r0, r7
      next = next->next;
 800bbce:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bbd0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f7fe ff44 	bl	800aa60 <tcp_seg_free>
    while (next &&
 800bbd8:	463c      	mov	r4, r7
 800bbda:	2f00      	cmp	r7, #0
 800bbdc:	d1e1      	bne.n	800bba2 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 800bbde:	602c      	str	r4, [r5, #0]
}
 800bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bbe2:	1a12      	subs	r2, r2, r0
    if (next &&
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	ddfa      	ble.n	800bbde <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bbe8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800bbea:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bbec:	b289      	uxth	r1, r1
 800bbee:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bbf0:	f7fe fbd8 	bl	800a3a4 <pbuf_realloc>
  cseg->next = next;
 800bbf4:	602c      	str	r4, [r5, #0]
}
 800bbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800bbf8:	4620      	mov	r0, r4
    next = NULL;
 800bbfa:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800bbfc:	f7fe ff1e 	bl	800aa3c <tcp_segs_free>
  cseg->next = next;
 800bc00:	602c      	str	r4, [r5, #0]
}
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bc04:	4b04      	ldr	r3, [pc, #16]	; (800bc18 <tcp_oos_insert_segment+0x9c>)
 800bc06:	f240 421f 	movw	r2, #1055	; 0x41f
 800bc0a:	4904      	ldr	r1, [pc, #16]	; (800bc1c <tcp_oos_insert_segment+0xa0>)
 800bc0c:	4804      	ldr	r0, [pc, #16]	; (800bc20 <tcp_oos_insert_segment+0xa4>)
 800bc0e:	f006 fc6f 	bl	80124f0 <iprintf>
 800bc12:	e7b8      	b.n	800bb86 <tcp_oos_insert_segment+0xa>
 800bc14:	24010d78 	.word	0x24010d78
 800bc18:	080166fc 	.word	0x080166fc
 800bc1c:	08016730 	.word	0x08016730
 800bc20:	08014fe0 	.word	0x08014fe0

0800bc24 <tcp_input_delayed_close>:
{
 800bc24:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bc26:	4604      	mov	r4, r0
 800bc28:	b1c8      	cbz	r0, 800bc5e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800bc2a:	4b11      	ldr	r3, [pc, #68]	; (800bc70 <tcp_input_delayed_close+0x4c>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	f013 0310 	ands.w	r3, r3, #16
 800bc32:	d101      	bne.n	800bc38 <tcp_input_delayed_close+0x14>
  return 0;
 800bc34:	4618      	mov	r0, r3
}
 800bc36:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bc38:	8b63      	ldrh	r3, [r4, #26]
 800bc3a:	06db      	lsls	r3, r3, #27
 800bc3c:	d406      	bmi.n	800bc4c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bc3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc42:	b11b      	cbz	r3, 800bc4c <tcp_input_delayed_close+0x28>
 800bc44:	f06f 010e 	mvn.w	r1, #14
 800bc48:	6920      	ldr	r0, [r4, #16]
 800bc4a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4809      	ldr	r0, [pc, #36]	; (800bc74 <tcp_input_delayed_close+0x50>)
 800bc50:	f7ff fac0 	bl	800b1d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7fe fd6b 	bl	800a730 <tcp_free>
 800bc5a:	2001      	movs	r0, #1
}
 800bc5c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <tcp_input_delayed_close+0x54>)
 800bc60:	f240 225a 	movw	r2, #602	; 0x25a
 800bc64:	4905      	ldr	r1, [pc, #20]	; (800bc7c <tcp_input_delayed_close+0x58>)
 800bc66:	4806      	ldr	r0, [pc, #24]	; (800bc80 <tcp_input_delayed_close+0x5c>)
 800bc68:	f006 fc42 	bl	80124f0 <iprintf>
 800bc6c:	e7dd      	b.n	800bc2a <tcp_input_delayed_close+0x6>
 800bc6e:	bf00      	nop
 800bc70:	24010d74 	.word	0x24010d74
 800bc74:	24010d38 	.word	0x24010d38
 800bc78:	080166fc 	.word	0x080166fc
 800bc7c:	08016758 	.word	0x08016758
 800bc80:	08014fe0 	.word	0x08014fe0

0800bc84 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bc8c:	2900      	cmp	r1, #0
 800bc8e:	d03d      	beq.n	800bd0c <tcp_free_acked_segments.constprop.0+0x88>
 800bc90:	4607      	mov	r7, r0
 800bc92:	460c      	mov	r4, r1
 800bc94:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800bd58 <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bc98:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800bd4c <tcp_free_acked_segments.constprop.0+0xc8>
 800bc9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bd5c <tcp_free_acked_segments.constprop.0+0xd8>
 800bca0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800bd54 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bca4:	68e3      	ldr	r3, [r4, #12]
 800bca6:	6858      	ldr	r0, [r3, #4]
 800bca8:	f7fd fac0 	bl	800922c <lwip_htonl>
 800bcac:	68e3      	ldr	r3, [r4, #12]
 800bcae:	4605      	mov	r5, r0
 800bcb0:	8926      	ldrh	r6, [r4, #8]
 800bcb2:	8998      	ldrh	r0, [r3, #12]
 800bcb4:	f7fd fab6 	bl	8009224 <lwip_htons>
 800bcb8:	f8d8 3000 	ldr.w	r3, [r8]
 800bcbc:	f010 0003 	ands.w	r0, r0, #3
 800bcc0:	eba5 0503 	sub.w	r5, r5, r3
 800bcc4:	bf18      	it	ne
 800bcc6:	2001      	movne	r0, #1
 800bcc8:	4435      	add	r5, r6
 800bcca:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800bccc:	2d00      	cmp	r5, #0
 800bcce:	dc36      	bgt.n	800bd3e <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 800bcd0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 800bcd4:	f7fe fbbe 	bl	800a454 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bcd8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800bcdc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bcde:	4298      	cmp	r0, r3
 800bce0:	d823      	bhi.n	800bd2a <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bce2:	4919      	ldr	r1, [pc, #100]	; (800bd48 <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bce4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bce6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 800bce8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bcea:	880d      	ldrh	r5, [r1, #0]
 800bcec:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bcee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bcf2:	1953      	adds	r3, r2, r5
 800bcf4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800bcf6:	f7fe feb3 	bl	800aa60 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bcfa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bcfe:	b11b      	cbz	r3, 800bd08 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	ea53 0506 	orrs.w	r5, r3, r6
 800bd06:	d005      	beq.n	800bd14 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 800bd08:	2e00      	cmp	r6, #0
 800bd0a:	d1cb      	bne.n	800bca4 <tcp_free_acked_segments.constprop.0+0x20>
 800bd0c:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800bd0e:	b003      	add	sp, #12
 800bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bd14:	4b0d      	ldr	r3, [pc, #52]	; (800bd4c <tcp_free_acked_segments.constprop.0+0xc8>)
 800bd16:	f240 4261 	movw	r2, #1121	; 0x461
 800bd1a:	490d      	ldr	r1, [pc, #52]	; (800bd50 <tcp_free_acked_segments.constprop.0+0xcc>)
 800bd1c:	480d      	ldr	r0, [pc, #52]	; (800bd54 <tcp_free_acked_segments.constprop.0+0xd0>)
 800bd1e:	f006 fbe7 	bl	80124f0 <iprintf>
 800bd22:	4628      	mov	r0, r5
}
 800bd24:	b003      	add	sp, #12
 800bd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bd2a:	465b      	mov	r3, fp
 800bd2c:	f240 4257 	movw	r2, #1111	; 0x457
 800bd30:	4651      	mov	r1, sl
 800bd32:	4648      	mov	r0, r9
 800bd34:	f006 fbdc 	bl	80124f0 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bd38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bd3c:	e7d1      	b.n	800bce2 <tcp_free_acked_segments.constprop.0+0x5e>
 800bd3e:	4620      	mov	r0, r4
}
 800bd40:	b003      	add	sp, #12
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	bf00      	nop
 800bd48:	24010d6c 	.word	0x24010d6c
 800bd4c:	080166fc 	.word	0x080166fc
 800bd50:	080167a8 	.word	0x080167a8
 800bd54:	08014fe0 	.word	0x08014fe0
 800bd58:	24010d54 	.word	0x24010d54
 800bd5c:	08016780 	.word	0x08016780

0800bd60 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bd64:	4604      	mov	r4, r0
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f000 81e2 	beq.w	800c130 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bd6c:	7d23      	ldrb	r3, [r4, #20]
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	f240 80f5 	bls.w	800bf5e <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 800bd74:	4baf      	ldr	r3, [pc, #700]	; (800c034 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bd76:	4eb0      	ldr	r6, [pc, #704]	; (800c038 <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	06d8      	lsls	r0, r3, #27
 800bd7c:	d470      	bmi.n	800be60 <tcp_receive+0x100>
 800bd7e:	4faf      	ldr	r7, [pc, #700]	; (800c03c <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bd80:	883b      	ldrh	r3, [r7, #0]
 800bd82:	b113      	cbz	r3, 800bd8a <tcp_receive+0x2a>
 800bd84:	7d22      	ldrb	r2, [r4, #20]
 800bd86:	2a06      	cmp	r2, #6
 800bd88:	d911      	bls.n	800bdae <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd8a:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bd8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd8e:	1ad1      	subs	r1, r2, r3
 800bd90:	2900      	cmp	r1, #0
 800bd92:	db06      	blt.n	800bda2 <tcp_receive+0x42>
 800bd94:	f1c3 0301 	rsb	r3, r3, #1
 800bd98:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bd9a:	1a5b      	subs	r3, r3, r1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	dd03      	ble.n	800bdaa <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 800bda2:	8b63      	ldrh	r3, [r4, #26]
 800bda4:	f043 0302 	orr.w	r3, r3, #2
 800bda8:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800bdaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bdae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdb0:	6832      	ldr	r2, [r6, #0]
 800bdb2:	eba1 0802 	sub.w	r8, r1, r2
 800bdb6:	f1b8 0f01 	cmp.w	r8, #1
 800bdba:	d406      	bmi.n	800bdca <tcp_receive+0x6a>
 800bdbc:	f1c2 0001 	rsb	r0, r2, #1
 800bdc0:	1ac3      	subs	r3, r0, r3
 800bdc2:	440b      	add	r3, r1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f340 81c2 	ble.w	800c14e <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bdca:	1a53      	subs	r3, r2, r1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f2c0 81b9 	blt.w	800c144 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bdd2:	f102 0c01 	add.w	ip, r2, #1
 800bdd6:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bdd8:	ebac 0301 	sub.w	r3, ip, r1
 800bddc:	1a1b      	subs	r3, r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dc39      	bgt.n	800be56 <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 800bde2:	4291      	cmp	r1, r2
 800bde4:	f000 8452 	beq.w	800c68c <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 800bde8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800bdea:	2d00      	cmp	r5, #0
 800bdec:	f000 835d 	beq.w	800c4aa <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 800bdf0:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 800bdf2:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bdf6:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800bdfa:	6843      	ldr	r3, [r0, #4]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d019      	beq.n	800be34 <tcp_receive+0xd4>
              if (prev == NULL) {
 800be00:	f1b8 0f00 	cmp.w	r8, #0
 800be04:	f000 812c 	beq.w	800c060 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800be08:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800be0c:	6849      	ldr	r1, [r1, #4]
 800be0e:	ebae 0101 	sub.w	r1, lr, r1
 800be12:	2900      	cmp	r1, #0
 800be14:	db04      	blt.n	800be20 <tcp_receive+0xc0>
 800be16:	ebac 0103 	sub.w	r1, ip, r3
 800be1a:	2900      	cmp	r1, #0
 800be1c:	f340 834e 	ble.w	800c4bc <tcp_receive+0x75c>
              if (next->next == NULL &&
 800be20:	6829      	ldr	r1, [r5, #0]
 800be22:	46a8      	mov	r8, r5
 800be24:	2900      	cmp	r1, #0
 800be26:	f000 812a 	beq.w	800c07e <tcp_receive+0x31e>
 800be2a:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800be2c:	68e8      	ldr	r0, [r5, #12]
 800be2e:	6843      	ldr	r3, [r0, #4]
 800be30:	429a      	cmp	r2, r3
 800be32:	d1e5      	bne.n	800be00 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 800be34:	4882      	ldr	r0, [pc, #520]	; (800c040 <tcp_receive+0x2e0>)
 800be36:	892b      	ldrh	r3, [r5, #8]
 800be38:	8902      	ldrh	r2, [r0, #8]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d90b      	bls.n	800be56 <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800be3e:	f7fe fe1d 	bl	800aa7c <tcp_seg_copy>
                if (cseg != NULL) {
 800be42:	b140      	cbz	r0, 800be56 <tcp_receive+0xf6>
                  if (prev != NULL) {
 800be44:	f1b8 0f00 	cmp.w	r8, #0
 800be48:	f000 83f7 	beq.w	800c63a <tcp_receive+0x8da>
                    prev->next = cseg;
 800be4c:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800be50:	4629      	mov	r1, r5
 800be52:	f7ff fe93 	bl	800bb7c <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 800be56:	4620      	mov	r0, r4
}
 800be58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800be5c:	f002 b9fc 	b.w	800e258 <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be62:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be64:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be68:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be6a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be6e:	2900      	cmp	r1, #0
 800be70:	db7d      	blt.n	800bf6e <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be72:	4d74      	ldr	r5, [pc, #464]	; (800c044 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be74:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be76:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be78:	f000 80cb 	beq.w	800c012 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be7c:	459c      	cmp	ip, r3
 800be7e:	f000 80d1 	beq.w	800c024 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800be82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800be84:	1a19      	subs	r1, r3, r0
 800be86:	2900      	cmp	r1, #0
 800be88:	f340 8085 	ble.w	800bf96 <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800be8e:	1a9a      	subs	r2, r3, r2
 800be90:	2a00      	cmp	r2, #0
 800be92:	f300 808f 	bgt.w	800bfb4 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 800be96:	8b62      	ldrh	r2, [r4, #26]
 800be98:	0750      	lsls	r0, r2, #29
 800be9a:	d509      	bpl.n	800beb0 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800be9c:	f022 0204 	bic.w	r2, r2, #4
 800bea0:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800bea2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bea6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800beaa:	2200      	movs	r2, #0
 800beac:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800beb0:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800beb4:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800beb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 800beb8:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800beba:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800bebe:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bec0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800bec4:	f04f 0300 	mov.w	r3, #0
 800bec8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800becc:	d913      	bls.n	800bef6 <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 800bece:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bed2:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800bed4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bed8:	429a      	cmp	r2, r3
 800beda:	f200 81d1 	bhi.w	800c280 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bede:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800bee2:	4411      	add	r1, r2
 800bee4:	b289      	uxth	r1, r1
 800bee6:	428a      	cmp	r2, r1
 800bee8:	f200 82c6 	bhi.w	800c478 <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800beec:	428b      	cmp	r3, r1
 800beee:	f240 82c5 	bls.w	800c47c <tcp_receive+0x71c>
 800bef2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bef6:	4620      	mov	r0, r4
 800bef8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800befc:	f7ff fec2 	bl	800bc84 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf00:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800bf02:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bf04:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf06:	4620      	mov	r0, r4
 800bf08:	f7ff febc 	bl	800bc84 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800bf0c:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bf0e:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800bf10:	fab2 f382 	clz	r3, r2
 800bf14:	095b      	lsrs	r3, r3, #5
 800bf16:	425b      	negs	r3, r3
 800bf18:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f000 81ab 	beq.w	800c27a <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bf24:	4b48      	ldr	r3, [pc, #288]	; (800c048 <tcp_receive+0x2e8>)
 800bf26:	8819      	ldrh	r1, [r3, #0]
 800bf28:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800bf2c:	440b      	add	r3, r1
 800bf2e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800bf32:	8b63      	ldrh	r3, [r4, #26]
 800bf34:	0519      	lsls	r1, r3, #20
 800bf36:	f140 8103 	bpl.w	800c140 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	f000 81b7 	beq.w	800c2ae <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bf40:	68d3      	ldr	r3, [r2, #12]
 800bf42:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800bf44:	6858      	ldr	r0, [r3, #4]
 800bf46:	f7fd f971 	bl	800922c <lwip_htonl>
 800bf4a:	1a38      	subs	r0, r7, r0
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	f300 80f7 	bgt.w	800c140 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 800bf52:	8b63      	ldrh	r3, [r4, #26]
 800bf54:	4f39      	ldr	r7, [pc, #228]	; (800c03c <tcp_receive+0x2dc>)
 800bf56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf5a:	8363      	strh	r3, [r4, #26]
 800bf5c:	e02e      	b.n	800bfbc <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bf5e:	4b3b      	ldr	r3, [pc, #236]	; (800c04c <tcp_receive+0x2ec>)
 800bf60:	f240 427c 	movw	r2, #1148	; 0x47c
 800bf64:	493a      	ldr	r1, [pc, #232]	; (800c050 <tcp_receive+0x2f0>)
 800bf66:	483b      	ldr	r0, [pc, #236]	; (800c054 <tcp_receive+0x2f4>)
 800bf68:	f006 fac2 	bl	80124f0 <iprintf>
 800bf6c:	e702      	b.n	800bd74 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf6e:	4b3a      	ldr	r3, [pc, #232]	; (800c058 <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf70:	4d34      	ldr	r5, [pc, #208]	; (800c044 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf76:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf78:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf7c:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf80:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf82:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf84:	bf38      	it	cc
 800bf86:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf8a:	1a19      	subs	r1, r3, r0
 800bf8c:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800bf8e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf92:	f73f af7b 	bgt.w	800be8c <tcp_receive+0x12c>
      if (tcplen == 0) {
 800bf96:	4f29      	ldr	r7, [pc, #164]	; (800c03c <tcp_receive+0x2dc>)
 800bf98:	8839      	ldrh	r1, [r7, #0]
 800bf9a:	b939      	cbnz	r1, 800bfac <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf9c:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bfa0:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 800bfa4:	4461      	add	r1, ip
 800bfa6:	4571      	cmp	r1, lr
 800bfa8:	f000 8191 	beq.w	800c2ce <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb2:	e003      	b.n	800bfbc <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4f21      	ldr	r7, [pc, #132]	; (800c03c <tcp_receive+0x2dc>)
 800bfb8:	f002 f94e 	bl	800e258 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bfbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfbe:	2900      	cmp	r1, #0
 800bfc0:	f43f aede 	beq.w	800bd80 <tcp_receive+0x20>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bfc8:	1ad2      	subs	r2, r2, r3
 800bfca:	2a00      	cmp	r2, #0
 800bfcc:	f6bf aed8 	bge.w	800bd80 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 800bfd0:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bfd4:	b289      	uxth	r1, r1
 800bfd6:	4b21      	ldr	r3, [pc, #132]	; (800c05c <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800bfd8:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bfdc:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800bfde:	1a2b      	subs	r3, r5, r0
 800bfe0:	1a5b      	subs	r3, r3, r1
 800bfe2:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800bfe4:	441a      	add	r2, r3
      if (m < 0) {
 800bfe6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800bfea:	b212      	sxth	r2, r2
 800bfec:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 800bfee:	d002      	beq.n	800bff6 <tcp_receive+0x296>
        m = (s16_t) - m;
 800bff0:	1b40      	subs	r0, r0, r5
 800bff2:	4401      	add	r1, r0
 800bff4:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800bff6:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bffa:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800bffe:	440b      	add	r3, r1
 800c000:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c002:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800c006:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800c008:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c00a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800c00e:	6363      	str	r3, [r4, #52]	; 0x34
 800c010:	e6b6      	b.n	800bd80 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c012:	ebac 0103 	sub.w	r1, ip, r3
 800c016:	2900      	cmp	r1, #0
 800c018:	f6bf af30 	bge.w	800be7c <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c01c:	490e      	ldr	r1, [pc, #56]	; (800c058 <tcp_receive+0x2f8>)
 800c01e:	6809      	ldr	r1, [r1, #0]
 800c020:	89c9      	ldrh	r1, [r1, #14]
 800c022:	e7a9      	b.n	800bf78 <tcp_receive+0x218>
 800c024:	490c      	ldr	r1, [pc, #48]	; (800c058 <tcp_receive+0x2f8>)
 800c026:	6809      	ldr	r1, [r1, #0]
 800c028:	89c9      	ldrh	r1, [r1, #14]
 800c02a:	458e      	cmp	lr, r1
 800c02c:	f4bf af29 	bcs.w	800be82 <tcp_receive+0x122>
 800c030:	e7a2      	b.n	800bf78 <tcp_receive+0x218>
 800c032:	bf00      	nop
 800c034:	24010d58 	.word	0x24010d58
 800c038:	24010d78 	.word	0x24010d78
 800c03c:	24010d92 	.word	0x24010d92
 800c040:	24010d5c 	.word	0x24010d5c
 800c044:	24010d54 	.word	0x24010d54
 800c048:	24010d6c 	.word	0x24010d6c
 800c04c:	080166fc 	.word	0x080166fc
 800c050:	080167e4 	.word	0x080167e4
 800c054:	08014fe0 	.word	0x08014fe0
 800c058:	24010d84 	.word	0x24010d84
 800c05c:	24010d48 	.word	0x24010d48
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c060:	1ad1      	subs	r1, r2, r3
 800c062:	2900      	cmp	r1, #0
 800c064:	f6bf aedc 	bge.w	800be20 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c068:	48af      	ldr	r0, [pc, #700]	; (800c328 <tcp_receive+0x5c8>)
 800c06a:	f7fe fd07 	bl	800aa7c <tcp_seg_copy>
                  if (cseg != NULL) {
 800c06e:	2800      	cmp	r0, #0
 800c070:	f43f aef1 	beq.w	800be56 <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 800c074:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800c076:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c078:	f7ff fd80 	bl	800bb7c <tcp_oos_insert_segment>
 800c07c:	e6eb      	b.n	800be56 <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c07e:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c080:	2b00      	cmp	r3, #0
 800c082:	f77f aee8 	ble.w	800be56 <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c086:	8980      	ldrh	r0, [r0, #12]
 800c088:	f7fd f8cc 	bl	8009224 <lwip_htons>
 800c08c:	07c1      	lsls	r1, r0, #31
 800c08e:	f53f aee2 	bmi.w	800be56 <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 800c092:	48a5      	ldr	r0, [pc, #660]	; (800c328 <tcp_receive+0x5c8>)
 800c094:	f7fe fcf2 	bl	800aa7c <tcp_seg_copy>
 800c098:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800c09a:	2800      	cmp	r0, #0
 800c09c:	f43f aedb 	beq.w	800be56 <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c0a0:	68eb      	ldr	r3, [r5, #12]
 800c0a2:	892a      	ldrh	r2, [r5, #8]
 800c0a4:	6859      	ldr	r1, [r3, #4]
 800c0a6:	6833      	ldr	r3, [r6, #0]
 800c0a8:	440a      	add	r2, r1
 800c0aa:	1ad2      	subs	r2, r2, r3
 800c0ac:	2a00      	cmp	r2, #0
 800c0ae:	dd05      	ble.n	800c0bc <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c0b0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800c0b2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c0b4:	b299      	uxth	r1, r3
 800c0b6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800c0b8:	f7fe f974 	bl	800a3a4 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c0bc:	6832      	ldr	r2, [r6, #0]
 800c0be:	883b      	ldrh	r3, [r7, #0]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f77f aec3 	ble.w	800be56 <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c0d0:	682b      	ldr	r3, [r5, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	8998      	ldrh	r0, [r3, #12]
 800c0d6:	f7fd f8a5 	bl	8009224 <lwip_htons>
 800c0da:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c0dc:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c0de:	f100 82c3 	bmi.w	800c668 <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c0e2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800c0e4:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800c0e6:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c0e8:	1a89      	subs	r1, r1, r2
 800c0ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0ec:	4411      	add	r1, r2
 800c0ee:	b289      	uxth	r1, r1
 800c0f0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c0f2:	f7fe f957 	bl	800a3a4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c0f6:	682b      	ldr	r3, [r5, #0]
 800c0f8:	891d      	ldrh	r5, [r3, #8]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	8998      	ldrh	r0, [r3, #12]
 800c0fe:	f7fd f891 	bl	8009224 <lwip_htons>
 800c102:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c106:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800c108:	bf18      	it	ne
 800c10a:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c10c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800c10e:	182b      	adds	r3, r5, r0
 800c110:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c112:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800c114:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c118:	4413      	add	r3, r2
 800c11a:	4299      	cmp	r1, r3
 800c11c:	f43f ae9b 	beq.w	800be56 <tcp_receive+0xf6>
 800c120:	4b82      	ldr	r3, [pc, #520]	; (800c32c <tcp_receive+0x5cc>)
 800c122:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c126:	4982      	ldr	r1, [pc, #520]	; (800c330 <tcp_receive+0x5d0>)
 800c128:	4882      	ldr	r0, [pc, #520]	; (800c334 <tcp_receive+0x5d4>)
 800c12a:	f006 f9e1 	bl	80124f0 <iprintf>
 800c12e:	e692      	b.n	800be56 <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c130:	4b7e      	ldr	r3, [pc, #504]	; (800c32c <tcp_receive+0x5cc>)
 800c132:	f240 427b 	movw	r2, #1147	; 0x47b
 800c136:	4980      	ldr	r1, [pc, #512]	; (800c338 <tcp_receive+0x5d8>)
 800c138:	487e      	ldr	r0, [pc, #504]	; (800c334 <tcp_receive+0x5d4>)
 800c13a:	f006 f9d9 	bl	80124f0 <iprintf>
 800c13e:	e615      	b.n	800bd6c <tcp_receive+0xc>
 800c140:	4f7e      	ldr	r7, [pc, #504]	; (800c33c <tcp_receive+0x5dc>)
 800c142:	e73b      	b.n	800bfbc <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 800c144:	8b63      	ldrh	r3, [r4, #26]
 800c146:	f043 0302 	orr.w	r3, r3, #2
 800c14a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c14c:	e683      	b.n	800be56 <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 800c14e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800c328 <tcp_receive+0x5c8>
 800c152:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c156:	2d00      	cmp	r5, #0
 800c158:	f000 8186 	beq.w	800c468 <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c15c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c160:	4598      	cmp	r8, r3
 800c162:	f200 80d9 	bhi.w	800c318 <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c166:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800c16a:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c16e:	891a      	ldrh	r2, [r3, #8]
 800c170:	4542      	cmp	r2, r8
 800c172:	f0c0 80c6 	bcc.w	800c302 <tcp_receive+0x5a2>
      inseg.len -= off;
 800c176:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c17a:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800c17e:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c182:	b292      	uxth	r2, r2
      inseg.len -= off;
 800c184:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800c188:	896b      	ldrh	r3, [r5, #10]
 800c18a:	4543      	cmp	r3, r8
 800c18c:	d20a      	bcs.n	800c1a4 <tcp_receive+0x444>
        p->len = 0;
 800c18e:	2100      	movs	r1, #0
        off -= p->len;
 800c190:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800c194:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800c196:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800c198:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800c19a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800c19e:	896b      	ldrh	r3, [r5, #10]
 800c1a0:	4543      	cmp	r3, r8
 800c1a2:	d3f5      	bcc.n	800c190 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 800c1a4:	4641      	mov	r1, r8
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f7fd ff72 	bl	800a090 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1ae:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800c1b2:	6033      	str	r3, [r6, #0]
 800c1b4:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f43f ae4c 	beq.w	800be56 <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 800c1be:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c1c2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c1c6:	8998      	ldrh	r0, [r3, #12]
 800c1c8:	f7fd f82c 	bl	8009224 <lwip_htons>
 800c1cc:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800c1d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c1d2:	bf18      	it	ne
 800c1d4:	2001      	movne	r0, #1
 800c1d6:	182b      	adds	r3, r5, r0
 800c1d8:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800c1da:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800c1dc:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800c1de:	f0c0 8197 	bcc.w	800c510 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 800c1e2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f000 80b6 	beq.w	800c356 <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c1ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c1ee:	8998      	ldrh	r0, [r3, #12]
 800c1f0:	f7fd f818 	bl	8009224 <lwip_htons>
 800c1f4:	07c2      	lsls	r2, r0, #31
 800c1f6:	f100 80ab 	bmi.w	800c350 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 800c1fa:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800c1fc:	b955      	cbnz	r5, 800c214 <tcp_receive+0x4b4>
 800c1fe:	e208      	b.n	800c612 <tcp_receive+0x8b2>
              next = next->next;
 800c200:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800c204:	4628      	mov	r0, r5
 800c206:	f7fe fc2b 	bl	800aa60 <tcp_seg_free>
            while (next &&
 800c20a:	4645      	mov	r5, r8
 800c20c:	f1b8 0f00 	cmp.w	r8, #0
 800c210:	f000 81ff 	beq.w	800c612 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c214:	68e8      	ldr	r0, [r5, #12]
 800c216:	883a      	ldrh	r2, [r7, #0]
 800c218:	f8d6 e000 	ldr.w	lr, [r6]
 800c21c:	892b      	ldrh	r3, [r5, #8]
 800c21e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c222:	eb02 010e 	add.w	r1, r2, lr
 800c226:	4463      	add	r3, ip
 800c228:	1acb      	subs	r3, r1, r3
            while (next &&
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f2c0 81b9 	blt.w	800c5a2 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c230:	8980      	ldrh	r0, [r0, #12]
 800c232:	f7fc fff7 	bl	8009224 <lwip_htons>
 800c236:	07c3      	lsls	r3, r0, #31
 800c238:	d5e2      	bpl.n	800c200 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c23a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c23e:	8998      	ldrh	r0, [r3, #12]
 800c240:	f7fc fff0 	bl	8009224 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c244:	0780      	lsls	r0, r0, #30
 800c246:	d4db      	bmi.n	800c200 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c248:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c24c:	2001      	movs	r0, #1
 800c24e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c252:	f7fc ffe7 	bl	8009224 <lwip_htons>
 800c256:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c25a:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800c25e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c262:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c264:	b280      	uxth	r0, r0
 800c266:	f7fc ffdd 	bl	8009224 <lwip_htons>
 800c26a:	f010 0003 	ands.w	r0, r0, #3
 800c26e:	bf18      	it	ne
 800c270:	2001      	movne	r0, #1
 800c272:	4480      	add	r8, r0
 800c274:	f8a7 8000 	strh.w	r8, [r7]
 800c278:	e7c2      	b.n	800c200 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 800c27a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 800c27e:	e651      	b.n	800bf24 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c280:	8b62      	ldrh	r2, [r4, #26]
 800c282:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c286:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c288:	bf14      	ite	ne
 800c28a:	2001      	movne	r0, #1
 800c28c:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c28e:	fb12 f200 	smulbb	r2, r2, r0
 800c292:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800c294:	428a      	cmp	r2, r1
 800c296:	bf94      	ite	ls
 800c298:	1898      	addls	r0, r3, r2
 800c29a:	1858      	addhi	r0, r3, r1
 800c29c:	b282      	uxth	r2, r0
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	f240 80f5 	bls.w	800c48e <tcp_receive+0x72e>
 800c2a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2a8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800c2ac:	e623      	b.n	800bef6 <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 800c2ae:	b148      	cbz	r0, 800c2c4 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c2b0:	68c3      	ldr	r3, [r0, #12]
 800c2b2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800c2b4:	6858      	ldr	r0, [r3, #4]
 800c2b6:	f7fc ffb9 	bl	800922c <lwip_htonl>
 800c2ba:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f73f af3f 	bgt.w	800c140 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 800c2c2:	8b63      	ldrh	r3, [r4, #26]
 800c2c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2c8:	4f1c      	ldr	r7, [pc, #112]	; (800c33c <tcp_receive+0x5dc>)
 800c2ca:	8363      	strh	r3, [r4, #26]
 800c2cc:	e676      	b.n	800bfbc <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 800c2ce:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800c2d0:	0409      	lsls	r1, r1, #16
 800c2d2:	f53f ae6b 	bmi.w	800bfac <tcp_receive+0x24c>
 800c2d6:	4298      	cmp	r0, r3
 800c2d8:	f47f ae68 	bne.w	800bfac <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c2dc:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800c2e0:	29ff      	cmp	r1, #255	; 0xff
 800c2e2:	f000 814e 	beq.w	800c582 <tcp_receive+0x822>
                ++pcb->dupacks;
 800c2e6:	3101      	adds	r1, #1
 800c2e8:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800c2ea:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800c2ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800c2f0:	f200 8147 	bhi.w	800c582 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 800c2f4:	f000 8151 	beq.w	800c59a <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2fa:	2900      	cmp	r1, #0
 800c2fc:	f47f ae63 	bne.w	800bfc6 <tcp_receive+0x266>
 800c300:	e544      	b.n	800bd8c <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c302:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <tcp_receive+0x5cc>)
 800c304:	f240 5297 	movw	r2, #1431	; 0x597
 800c308:	490d      	ldr	r1, [pc, #52]	; (800c340 <tcp_receive+0x5e0>)
 800c30a:	480a      	ldr	r0, [pc, #40]	; (800c334 <tcp_receive+0x5d4>)
 800c30c:	f006 f8f0 	bl	80124f0 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c310:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c314:	891a      	ldrh	r2, [r3, #8]
 800c316:	e72e      	b.n	800c176 <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c318:	4b04      	ldr	r3, [pc, #16]	; (800c32c <tcp_receive+0x5cc>)
 800c31a:	f240 5295 	movw	r2, #1429	; 0x595
 800c31e:	4909      	ldr	r1, [pc, #36]	; (800c344 <tcp_receive+0x5e4>)
 800c320:	4804      	ldr	r0, [pc, #16]	; (800c334 <tcp_receive+0x5d4>)
 800c322:	f006 f8e5 	bl	80124f0 <iprintf>
 800c326:	e71e      	b.n	800c166 <tcp_receive+0x406>
 800c328:	24010d5c 	.word	0x24010d5c
 800c32c:	080166fc 	.word	0x080166fc
 800c330:	08016830 	.word	0x08016830
 800c334:	08014fe0 	.word	0x08014fe0
 800c338:	080167c8 	.word	0x080167c8
 800c33c:	24010d92 	.word	0x24010d92
 800c340:	08016820 	.word	0x08016820
 800c344:	08016810 	.word	0x08016810
              pcb->ooseq = pcb->ooseq->next;
 800c348:	6803      	ldr	r3, [r0, #0]
 800c34a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c34c:	f7fe fb88 	bl	800aa60 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c350:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c352:	2800      	cmp	r0, #0
 800c354:	d1f8      	bne.n	800c348 <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 800c356:	883a      	ldrh	r2, [r7, #0]
 800c358:	6831      	ldr	r1, [r6, #0]
 800c35a:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c35c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800c35e:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c360:	4293      	cmp	r3, r2
 800c362:	f0c0 80cb 	bcc.w	800c4fc <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 800c366:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800c368:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800c36a:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800c36c:	f7fe fae8 	bl	800a940 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800c370:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c374:	891a      	ldrh	r2, [r3, #8]
 800c376:	b122      	cbz	r2, 800c382 <tcp_receive+0x622>
          recv_data = inseg.p;
 800c378:	4ab1      	ldr	r2, [pc, #708]	; (800c640 <tcp_receive+0x8e0>)
 800c37a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c382:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c386:	8998      	ldrh	r0, [r3, #12]
 800c388:	f7fc ff4c 	bl	8009224 <lwip_htons>
 800c38c:	07c2      	lsls	r2, r0, #31
 800c38e:	d504      	bpl.n	800c39a <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 800c390:	4aac      	ldr	r2, [pc, #688]	; (800c644 <tcp_receive+0x8e4>)
 800c392:	7813      	ldrb	r3, [r2, #0]
 800c394:	f043 0320 	orr.w	r3, r3, #32
 800c398:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800c39a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c39c:	2d00      	cmp	r5, #0
 800c39e:	d07b      	beq.n	800c498 <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c3a0:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800c64c <tcp_receive+0x8ec>
 800c3a4:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800c664 <tcp_receive+0x904>
 800c3a8:	4fa7      	ldr	r7, [pc, #668]	; (800c648 <tcp_receive+0x8e8>)
 800c3aa:	e033      	b.n	800c414 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c3ac:	68eb      	ldr	r3, [r5, #12]
 800c3ae:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c3b2:	8998      	ldrh	r0, [r3, #12]
 800c3b4:	f7fc ff36 	bl	8009224 <lwip_htons>
 800c3b8:	f010 0003 	ands.w	r0, r0, #3
 800c3bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c3be:	bf18      	it	ne
 800c3c0:	2001      	movne	r0, #1
 800c3c2:	4450      	add	r0, sl
 800c3c4:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800c3c6:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c3c8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800c3ca:	f7fe fab9 	bl	800a940 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800c3ce:	6869      	ldr	r1, [r5, #4]
 800c3d0:	890b      	ldrh	r3, [r1, #8]
 800c3d2:	b13b      	cbz	r3, 800c3e4 <tcp_receive+0x684>
            if (recv_data) {
 800c3d4:	4b9a      	ldr	r3, [pc, #616]	; (800c640 <tcp_receive+0x8e0>)
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d05b      	beq.n	800c494 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 800c3dc:	f7fe f864 	bl	800a4a8 <pbuf_cat>
            cseg->p = NULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c3e4:	68eb      	ldr	r3, [r5, #12]
 800c3e6:	8998      	ldrh	r0, [r3, #12]
 800c3e8:	f7fc ff1c 	bl	8009224 <lwip_htons>
 800c3ec:	07c3      	lsls	r3, r0, #31
 800c3ee:	d509      	bpl.n	800c404 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 800c3f0:	4a94      	ldr	r2, [pc, #592]	; (800c644 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c3f2:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800c3f4:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c3f6:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800c3f8:	f043 0320 	orr.w	r3, r3, #32
 800c3fc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c3fe:	d101      	bne.n	800c404 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 800c400:	2307      	movs	r3, #7
 800c402:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800c404:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800c406:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800c408:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800c40a:	f7fe fb29 	bl	800aa60 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c40e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c410:	2d00      	cmp	r5, #0
 800c412:	d041      	beq.n	800c498 <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c414:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800c416:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c418:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800c41a:	428b      	cmp	r3, r1
 800c41c:	d13c      	bne.n	800c498 <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 800c41e:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c420:	8990      	ldrh	r0, [r2, #12]
 800c422:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c426:	f7fc fefd 	bl	8009224 <lwip_htons>
 800c42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c42c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c430:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c434:	bf18      	it	ne
 800c436:	2001      	movne	r0, #1
 800c438:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c43a:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c43c:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c43e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c442:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c444:	8998      	ldrh	r0, [r3, #12]
 800c446:	f7fc feed 	bl	8009224 <lwip_htons>
 800c44a:	f010 0003 	ands.w	r0, r0, #3
 800c44e:	bf18      	it	ne
 800c450:	2001      	movne	r0, #1
 800c452:	4458      	add	r0, fp
 800c454:	4582      	cmp	sl, r0
 800c456:	d2a9      	bcs.n	800c3ac <tcp_receive+0x64c>
 800c458:	464b      	mov	r3, r9
 800c45a:	f240 622b 	movw	r2, #1579	; 0x62b
 800c45e:	4641      	mov	r1, r8
 800c460:	4638      	mov	r0, r7
 800c462:	f006 f845 	bl	80124f0 <iprintf>
 800c466:	e7a1      	b.n	800c3ac <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c468:	4b78      	ldr	r3, [pc, #480]	; (800c64c <tcp_receive+0x8ec>)
 800c46a:	f240 5294 	movw	r2, #1428	; 0x594
 800c46e:	4978      	ldr	r1, [pc, #480]	; (800c650 <tcp_receive+0x8f0>)
 800c470:	4875      	ldr	r0, [pc, #468]	; (800c648 <tcp_receive+0x8e8>)
 800c472:	f006 f83d 	bl	80124f0 <iprintf>
 800c476:	e671      	b.n	800c15c <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c478:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c47c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c47e:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c480:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c482:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c486:	b292      	uxth	r2, r2
 800c488:	4293      	cmp	r3, r2
 800c48a:	f63f af0b 	bhi.w	800c2a4 <tcp_receive+0x544>
 800c48e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800c492:	e530      	b.n	800bef6 <tcp_receive+0x196>
              recv_data = cseg->p;
 800c494:	6019      	str	r1, [r3, #0]
 800c496:	e7a3      	b.n	800c3e0 <tcp_receive+0x680>
        tcp_ack(pcb);
 800c498:	8b63      	ldrh	r3, [r4, #26]
 800c49a:	07d8      	lsls	r0, r3, #31
 800c49c:	d50a      	bpl.n	800c4b4 <tcp_receive+0x754>
 800c49e:	f023 0301 	bic.w	r3, r3, #1
 800c4a2:	f043 0302 	orr.w	r3, r3, #2
 800c4a6:	8363      	strh	r3, [r4, #26]
 800c4a8:	e47f      	b.n	800bdaa <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c4aa:	486a      	ldr	r0, [pc, #424]	; (800c654 <tcp_receive+0x8f4>)
 800c4ac:	f7fe fae6 	bl	800aa7c <tcp_seg_copy>
 800c4b0:	6760      	str	r0, [r4, #116]	; 0x74
 800c4b2:	e4d0      	b.n	800be56 <tcp_receive+0xf6>
        tcp_ack(pcb);
 800c4b4:	f043 0301 	orr.w	r3, r3, #1
 800c4b8:	8363      	strh	r3, [r4, #26]
 800c4ba:	e476      	b.n	800bdaa <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c4bc:	4865      	ldr	r0, [pc, #404]	; (800c654 <tcp_receive+0x8f4>)
 800c4be:	f7fe fadd 	bl	800aa7c <tcp_seg_copy>
                  if (cseg != NULL) {
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f43f acc6 	beq.w	800be56 <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c4ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4ce:	6832      	ldr	r2, [r6, #0]
 800c4d0:	6859      	ldr	r1, [r3, #4]
 800c4d2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c4d6:	440b      	add	r3, r1
 800c4d8:	1a9b      	subs	r3, r3, r2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dd07      	ble.n	800c4ee <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c4de:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800c4e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c4e4:	b291      	uxth	r1, r2
 800c4e6:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c4ea:	f7fd ff5b 	bl	800a3a4 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	4638      	mov	r0, r7
                    prev->next = cseg;
 800c4f2:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800c4f6:	f7ff fb41 	bl	800bb7c <tcp_oos_insert_segment>
 800c4fa:	e4ac      	b.n	800be56 <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c4fc:	4b53      	ldr	r3, [pc, #332]	; (800c64c <tcp_receive+0x8ec>)
 800c4fe:	f240 6207 	movw	r2, #1543	; 0x607
 800c502:	4955      	ldr	r1, [pc, #340]	; (800c658 <tcp_receive+0x8f8>)
 800c504:	4850      	ldr	r0, [pc, #320]	; (800c648 <tcp_receive+0x8e8>)
 800c506:	f005 fff3 	bl	80124f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c50a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c50c:	883a      	ldrh	r2, [r7, #0]
 800c50e:	e72a      	b.n	800c366 <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c510:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c514:	8998      	ldrh	r0, [r3, #12]
 800c516:	f7fc fe85 	bl	8009224 <lwip_htons>
 800c51a:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c51c:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c520:	d47b      	bmi.n	800c61a <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c522:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c524:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c526:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c52a:	f7fc fe7b 	bl	8009224 <lwip_htons>
 800c52e:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800c530:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c534:	d503      	bpl.n	800c53e <tcp_receive+0x7de>
            inseg.len -= 1;
 800c536:	3901      	subs	r1, #1
 800c538:	b289      	uxth	r1, r1
 800c53a:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800c53e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c542:	f7fd ff2f 	bl	800a3a4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c546:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c54a:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c54e:	8998      	ldrh	r0, [r3, #12]
 800c550:	f7fc fe68 	bl	8009224 <lwip_htons>
 800c554:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c558:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800c55a:	bf18      	it	ne
 800c55c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c55e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800c560:	182b      	adds	r3, r5, r0
 800c562:	b29b      	uxth	r3, r3
 800c564:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c566:	4413      	add	r3, r2
 800c568:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c56a:	440a      	add	r2, r1
 800c56c:	4293      	cmp	r3, r2
 800c56e:	f43f ae38 	beq.w	800c1e2 <tcp_receive+0x482>
 800c572:	4b36      	ldr	r3, [pc, #216]	; (800c64c <tcp_receive+0x8ec>)
 800c574:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c578:	4938      	ldr	r1, [pc, #224]	; (800c65c <tcp_receive+0x8fc>)
 800c57a:	4833      	ldr	r0, [pc, #204]	; (800c648 <tcp_receive+0x8e8>)
 800c57c:	f005 ffb8 	bl	80124f0 <iprintf>
 800c580:	e62f      	b.n	800c1e2 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c582:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800c586:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c58a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c58c:	4413      	add	r3, r2
 800c58e:	b29b      	uxth	r3, r3
 800c590:	429a      	cmp	r2, r3
 800c592:	bf88      	it	hi
 800c594:	460b      	movhi	r3, r1
 800c596:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800c59a:	4620      	mov	r0, r4
 800c59c:	f001 fdda 	bl	800e154 <tcp_rexmit_fast>
      if (!found_dupack) {
 800c5a0:	e50c      	b.n	800bfbc <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 800c5a2:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	dc01      	bgt.n	800c5ae <tcp_receive+0x84e>
            pcb->ooseq = next;
 800c5aa:	6765      	str	r5, [r4, #116]	; 0x74
 800c5ac:	e6d6      	b.n	800c35c <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c5ae:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c5b2:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c5b6:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c5ba:	8998      	ldrh	r0, [r3, #12]
 800c5bc:	f7fc fe32 	bl	8009224 <lwip_htons>
 800c5c0:	0781      	lsls	r1, r0, #30
 800c5c2:	d504      	bpl.n	800c5ce <tcp_receive+0x86e>
                inseg.len -= 1;
 800c5c4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800c5ce:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800c5d2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c5d6:	f7fd fee5 	bl	800a3a4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c5da:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c5de:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800c5e2:	8998      	ldrh	r0, [r3, #12]
 800c5e4:	f7fc fe1e 	bl	8009224 <lwip_htons>
 800c5e8:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c5ec:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800c5ee:	bf18      	it	ne
 800c5f0:	2001      	movne	r0, #1
 800c5f2:	eb08 0200 	add.w	r2, r8, r0
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c5fa:	6859      	ldr	r1, [r3, #4]
 800c5fc:	6833      	ldr	r3, [r6, #0]
 800c5fe:	4413      	add	r3, r2
 800c600:	428b      	cmp	r3, r1
 800c602:	d0d2      	beq.n	800c5aa <tcp_receive+0x84a>
 800c604:	4b11      	ldr	r3, [pc, #68]	; (800c64c <tcp_receive+0x8ec>)
 800c606:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c60a:	4915      	ldr	r1, [pc, #84]	; (800c660 <tcp_receive+0x900>)
 800c60c:	480e      	ldr	r0, [pc, #56]	; (800c648 <tcp_receive+0x8e8>)
 800c60e:	f005 ff6f 	bl	80124f0 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800c612:	883a      	ldrh	r2, [r7, #0]
 800c614:	6831      	ldr	r1, [r6, #0]
 800c616:	4411      	add	r1, r2
 800c618:	e7c7      	b.n	800c5aa <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c61a:	899d      	ldrh	r5, [r3, #12]
 800c61c:	4628      	mov	r0, r5
 800c61e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800c622:	f7fc fdff 	bl	8009224 <lwip_htons>
 800c626:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c62a:	f7fc fdfb 	bl	8009224 <lwip_htons>
 800c62e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c632:	4328      	orrs	r0, r5
 800c634:	8198      	strh	r0, [r3, #12]
 800c636:	b280      	uxth	r0, r0
 800c638:	e774      	b.n	800c524 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 800c63a:	6760      	str	r0, [r4, #116]	; 0x74
 800c63c:	e408      	b.n	800be50 <tcp_receive+0xf0>
 800c63e:	bf00      	nop
 800c640:	24010d70 	.word	0x24010d70
 800c644:	24010d74 	.word	0x24010d74
 800c648:	08014fe0 	.word	0x08014fe0
 800c64c:	080166fc 	.word	0x080166fc
 800c650:	08016800 	.word	0x08016800
 800c654:	24010d5c 	.word	0x24010d5c
 800c658:	080168a4 	.word	0x080168a4
 800c65c:	08016830 	.word	0x08016830
 800c660:	08016868 	.word	0x08016868
 800c664:	080168c4 	.word	0x080168c4
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c66e:	4640      	mov	r0, r8
 800c670:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800c674:	f7fc fdd6 	bl	8009224 <lwip_htons>
 800c678:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c67c:	f7fc fdd2 	bl	8009224 <lwip_htons>
 800c680:	682b      	ldr	r3, [r5, #0]
 800c682:	ea40 0008 	orr.w	r0, r0, r8
 800c686:	68da      	ldr	r2, [r3, #12]
 800c688:	8190      	strh	r0, [r2, #12]
 800c68a:	e52a      	b.n	800c0e2 <tcp_receive+0x382>
 800c68c:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800c694 <tcp_receive+0x934>
 800c690:	e595      	b.n	800c1be <tcp_receive+0x45e>
 800c692:	bf00      	nop
 800c694:	24010d5c 	.word	0x24010d5c

0800c698 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c69c:	4605      	mov	r5, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d07b      	beq.n	800c79a <tcp_parseopt+0x102>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c6a2:	4b4b      	ldr	r3, [pc, #300]	; (800c7d0 <tcp_parseopt+0x138>)
 800c6a4:	8818      	ldrh	r0, [r3, #0]
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d03c      	beq.n	800c724 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6aa:	4b4a      	ldr	r3, [pc, #296]	; (800c7d4 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800c7ec <tcp_parseopt+0x154>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c6b2:	f240 5ab3 	movw	sl, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6b6:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c6ba:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6bc:	4b46      	ldr	r3, [pc, #280]	; (800c7d8 <tcp_parseopt+0x140>)
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c6be:	f240 59b4 	movw	r9, #1460	; 0x5b4
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c6c2:	fa5f f78e 	uxtb.w	r7, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c6c6:	f8a8 2000 	strh.w	r2, [r8]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6ca:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c6cc:	4b43      	ldr	r3, [pc, #268]	; (800c7dc <tcp_parseopt+0x144>)
 800c6ce:	681e      	ldr	r6, [r3, #0]
 800c6d0:	f101 0c14 	add.w	ip, r1, #20
 800c6d4:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c6d6:	4288      	cmp	r0, r1
  u16_t optidx = tcp_optidx++;
 800c6d8:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c6dc:	d96b      	bls.n	800c7b6 <tcp_parseopt+0x11e>
  u16_t optidx = tcp_optidx++;
 800c6de:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6e0:	b1b4      	cbz	r4, 800c710 <tcp_parseopt+0x78>
 800c6e2:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 800c6e4:	eba3 0207 	sub.w	r2, r3, r7
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6e8:	d812      	bhi.n	800c710 <tcp_parseopt+0x78>
    return tcphdr_opt2[idx];
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	b2d2      	uxtb	r2, r2
 800c6ee:	5ca2      	ldrb	r2, [r4, r2]
      switch (opt) {
 800c6f0:	2a01      	cmp	r2, #1
 800c6f2:	d011      	beq.n	800c718 <tcp_parseopt+0x80>
 800c6f4:	2a02      	cmp	r2, #2
 800c6f6:	d017      	beq.n	800c728 <tcp_parseopt+0x90>
 800c6f8:	b192      	cbz	r2, 800c720 <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6fa:	b10c      	cbz	r4, 800c700 <tcp_parseopt+0x68>
 800c6fc:	4573      	cmp	r3, lr
 800c6fe:	d23d      	bcs.n	800c77c <tcp_parseopt+0xe4>
    return opts[optidx];
 800c700:	4433      	add	r3, r6
 800c702:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800c704:	2b01      	cmp	r3, #1
 800c706:	d95e      	bls.n	800c7c6 <tcp_parseopt+0x12e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c708:	440b      	add	r3, r1
 800c70a:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c70c:	2201      	movs	r2, #1
 800c70e:	e7df      	b.n	800c6d0 <tcp_parseopt+0x38>
    return opts[optidx];
 800c710:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 800c714:	2a01      	cmp	r2, #1
 800c716:	d1ed      	bne.n	800c6f4 <tcp_parseopt+0x5c>
 800c718:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 800c71c:	4619      	mov	r1, r3
 800c71e:	e7da      	b.n	800c6d6 <tcp_parseopt+0x3e>
 800c720:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
  }
}
 800c724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t optidx = tcp_optidx++;
 800c728:	1c8a      	adds	r2, r1, #2
 800c72a:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c72c:	b10c      	cbz	r4, 800c732 <tcp_parseopt+0x9a>
 800c72e:	4573      	cmp	r3, lr
 800c730:	d220      	bcs.n	800c774 <tcp_parseopt+0xdc>
    return opts[optidx];
 800c732:	4433      	add	r3, r6
 800c734:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c736:	2b04      	cmp	r3, #4
 800c738:	d142      	bne.n	800c7c0 <tcp_parseopt+0x128>
 800c73a:	1c53      	adds	r3, r2, #1
 800c73c:	4283      	cmp	r3, r0
 800c73e:	da3f      	bge.n	800c7c0 <tcp_parseopt+0x128>
  u16_t optidx = tcp_optidx++;
 800c740:	1ccb      	adds	r3, r1, #3
 800c742:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c744:	2c00      	cmp	r4, #0
 800c746:	d030      	beq.n	800c7aa <tcp_parseopt+0x112>
 800c748:	4596      	cmp	lr, r2
 800c74a:	d81b      	bhi.n	800c784 <tcp_parseopt+0xec>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c74c:	1bd2      	subs	r2, r2, r7
  u16_t optidx = tcp_optidx++;
 800c74e:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c750:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 800c752:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 800c754:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c756:	5ca2      	ldrb	r2, [r4, r2]
 800c758:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c75c:	d81a      	bhi.n	800c794 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c75e:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800c760:	b2db      	uxtb	r3, r3
 800c762:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 800c764:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c766:	1e5a      	subs	r2, r3, #1
 800c768:	b292      	uxth	r2, r2
 800c76a:	4552      	cmp	r2, sl
 800c76c:	bf88      	it	hi
 800c76e:	464b      	movhi	r3, r9
 800c770:	866b      	strh	r3, [r5, #50]	; 0x32
          break;
 800c772:	e7cb      	b.n	800c70c <tcp_parseopt+0x74>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c774:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800c776:	b2db      	uxtb	r3, r3
 800c778:	5ce3      	ldrb	r3, [r4, r3]
 800c77a:	e7dc      	b.n	800c736 <tcp_parseopt+0x9e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c77c:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	5ce3      	ldrb	r3, [r4, r3]
 800c782:	e7bf      	b.n	800c704 <tcp_parseopt+0x6c>
    return opts[optidx];
 800c784:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800c786:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c788:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c78a:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800c78c:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c78e:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c792:	d9e4      	bls.n	800c75e <tcp_parseopt+0xc6>
    return opts[optidx];
 800c794:	4433      	add	r3, r6
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	e7e4      	b.n	800c764 <tcp_parseopt+0xcc>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c79a:	4b11      	ldr	r3, [pc, #68]	; (800c7e0 <tcp_parseopt+0x148>)
 800c79c:	f240 727d 	movw	r2, #1917	; 0x77d
 800c7a0:	4910      	ldr	r1, [pc, #64]	; (800c7e4 <tcp_parseopt+0x14c>)
 800c7a2:	4811      	ldr	r0, [pc, #68]	; (800c7e8 <tcp_parseopt+0x150>)
 800c7a4:	f005 fea4 	bl	80124f0 <iprintf>
 800c7a8:	e77b      	b.n	800c6a2 <tcp_parseopt+0xa>
    return opts[optidx];
 800c7aa:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800c7ac:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c7ae:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800c7b0:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c7b2:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c7b4:	e7ee      	b.n	800c794 <tcp_parseopt+0xfc>
 800c7b6:	2a00      	cmp	r2, #0
 800c7b8:	d0b4      	beq.n	800c724 <tcp_parseopt+0x8c>
 800c7ba:	f8a8 1000 	strh.w	r1, [r8]
 800c7be:	e7b1      	b.n	800c724 <tcp_parseopt+0x8c>
 800c7c0:	f8a8 2000 	strh.w	r2, [r8]
 800c7c4:	e7ae      	b.n	800c724 <tcp_parseopt+0x8c>
  u16_t optidx = tcp_optidx++;
 800c7c6:	3102      	adds	r1, #2
 800c7c8:	f8a8 1000 	strh.w	r1, [r8]
 800c7cc:	e7aa      	b.n	800c724 <tcp_parseopt+0x8c>
 800c7ce:	bf00      	nop
 800c7d0:	24010d90 	.word	0x24010d90
 800c7d4:	24010d88 	.word	0x24010d88
 800c7d8:	24010d8c 	.word	0x24010d8c
 800c7dc:	24010d84 	.word	0x24010d84
 800c7e0:	080166fc 	.word	0x080166fc
 800c7e4:	080168ec 	.word	0x080168ec
 800c7e8:	08014fe0 	.word	0x08014fe0
 800c7ec:	24010d80 	.word	0x24010d80

0800c7f0 <tcp_input>:
{
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800c7f8:	f7f8 fac8 	bl	8004d8c <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c7fc:	2c00      	cmp	r4, #0
 800c7fe:	f000 80d6 	beq.w	800c9ae <tcp_input+0x1be>
  if (p->len < TCP_HLEN) {
 800c802:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800c804:	4e6d      	ldr	r6, [pc, #436]	; (800c9bc <tcp_input+0x1cc>)
 800c806:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800c808:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800c80a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800c80c:	d805      	bhi.n	800c81a <tcp_input+0x2a>
  pbuf_free(p);
 800c80e:	4620      	mov	r0, r4
}
 800c810:	b007      	add	sp, #28
 800c812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c816:	f7fd bca7 	b.w	800a168 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c81a:	4f69      	ldr	r7, [pc, #420]	; (800c9c0 <tcp_input+0x1d0>)
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6978      	ldr	r0, [r7, #20]
 800c820:	f003 f9f0 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800c824:	4605      	mov	r5, r0
 800c826:	2800      	cmp	r0, #0
 800c828:	d1f1      	bne.n	800c80e <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c830:	2be0      	cmp	r3, #224	; 0xe0
 800c832:	d0ec      	beq.n	800c80e <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c834:	6833      	ldr	r3, [r6, #0]
 800c836:	8998      	ldrh	r0, [r3, #12]
 800c838:	f7fc fcf4 	bl	8009224 <lwip_htons>
 800c83c:	0a80      	lsrs	r0, r0, #10
 800c83e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c842:	2913      	cmp	r1, #19
 800c844:	d9e3      	bls.n	800c80e <tcp_input+0x1e>
 800c846:	8923      	ldrh	r3, [r4, #8]
 800c848:	b28a      	uxth	r2, r1
 800c84a:	428b      	cmp	r3, r1
 800c84c:	d3df      	bcc.n	800c80e <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c84e:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800c852:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c854:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800c9f4 <tcp_input+0x204>
 800c858:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800c85a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800c9f8 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800c85e:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c860:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800c864:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800c868:	f080 819a 	bcs.w	800cba0 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 836e 	beq.w	800cf50 <tcp_input+0x760>
    pbuf_remove_header(p, TCP_HLEN);
 800c874:	2114      	movs	r1, #20
 800c876:	4620      	mov	r0, r4
 800c878:	f7fd fc0a 	bl	800a090 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800c87c:	8965      	ldrh	r5, [r4, #10]
 800c87e:	4b51      	ldr	r3, [pc, #324]	; (800c9c4 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800c880:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c882:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c886:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800c888:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c88a:	f7fd fc01 	bl	800a090 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c88e:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800c892:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c894:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800c898:	8943      	ldrh	r3, [r0, #10]
 800c89a:	454b      	cmp	r3, r9
 800c89c:	d3b7      	bcc.n	800c80e <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c89e:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800c8a0:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c8a2:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800c8a6:	f7fd fbf3 	bl	800a090 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c8aa:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c8ac:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c8ae:	442b      	add	r3, r5
 800c8b0:	eba3 030a 	sub.w	r3, r3, sl
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c8b8:	2a00      	cmp	r2, #0
 800c8ba:	f040 8350 	bne.w	800cf5e <tcp_input+0x76e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	8912      	ldrh	r2, [r2, #8]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d005      	beq.n	800c8d2 <tcp_input+0xe2>
 800c8c6:	4b40      	ldr	r3, [pc, #256]	; (800c9c8 <tcp_input+0x1d8>)
 800c8c8:	22e0      	movs	r2, #224	; 0xe0
 800c8ca:	4940      	ldr	r1, [pc, #256]	; (800c9cc <tcp_input+0x1dc>)
 800c8cc:	4840      	ldr	r0, [pc, #256]	; (800c9d0 <tcp_input+0x1e0>)
 800c8ce:	f005 fe0f 	bl	80124f0 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c8d2:	6835      	ldr	r5, [r6, #0]
 800c8d4:	8828      	ldrh	r0, [r5, #0]
 800c8d6:	f7fc fca5 	bl	8009224 <lwip_htons>
 800c8da:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c8dc:	6835      	ldr	r5, [r6, #0]
 800c8de:	8868      	ldrh	r0, [r5, #2]
 800c8e0:	f7fc fca0 	bl	8009224 <lwip_htons>
 800c8e4:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c8e6:	6835      	ldr	r5, [r6, #0]
 800c8e8:	6868      	ldr	r0, [r5, #4]
 800c8ea:	f7fc fc9f 	bl	800922c <lwip_htonl>
 800c8ee:	4b39      	ldr	r3, [pc, #228]	; (800c9d4 <tcp_input+0x1e4>)
 800c8f0:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c8f2:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c8f4:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c8f6:	68a8      	ldr	r0, [r5, #8]
 800c8f8:	f7fc fc98 	bl	800922c <lwip_htonl>
 800c8fc:	4b36      	ldr	r3, [pc, #216]	; (800c9d8 <tcp_input+0x1e8>)
 800c8fe:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c900:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c902:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c904:	89e8      	ldrh	r0, [r5, #14]
 800c906:	f7fc fc8d 	bl	8009224 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800c90a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c90c:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800c90e:	8998      	ldrh	r0, [r3, #12]
 800c910:	f7fc fc88 	bl	8009224 <lwip_htons>
 800c914:	4931      	ldr	r1, [pc, #196]	; (800c9dc <tcp_input+0x1ec>)
 800c916:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800c91a:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800c91c:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c91e:	0783      	lsls	r3, r0, #30
 800c920:	f040 8144 	bne.w	800cbac <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800c924:	4b2e      	ldr	r3, [pc, #184]	; (800c9e0 <tcp_input+0x1f0>)
 800c926:	9305      	str	r3, [sp, #20]
 800c928:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c92a:	4b2e      	ldr	r3, [pc, #184]	; (800c9e4 <tcp_input+0x1f4>)
 800c92c:	681d      	ldr	r5, [r3, #0]
 800c92e:	2d00      	cmp	r5, #0
 800c930:	f000 80e5 	beq.w	800cafe <tcp_input+0x30e>
  prev = NULL;
 800c934:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c938:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800c9c8 <tcp_input+0x1d8>
 800c93c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800c9fc <tcp_input+0x20c>
 800c940:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c9d0 <tcp_input+0x1e0>
 800c944:	e017      	b.n	800c976 <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c946:	2b0a      	cmp	r3, #10
 800c948:	d021      	beq.n	800c98e <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d028      	beq.n	800c9a0 <tcp_input+0x1b0>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c94e:	7a2a      	ldrb	r2, [r5, #8]
 800c950:	b132      	cbz	r2, 800c960 <tcp_input+0x170>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c958:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d104      	bne.n	800c96a <tcp_input+0x17a>
    if (pcb->remote_port == tcphdr->src &&
 800c960:	6833      	ldr	r3, [r6, #0]
 800c962:	8b29      	ldrh	r1, [r5, #24]
 800c964:	881a      	ldrh	r2, [r3, #0]
 800c966:	4291      	cmp	r1, r2
 800c968:	d04a      	beq.n	800ca00 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c96a:	68eb      	ldr	r3, [r5, #12]
 800c96c:	46a8      	mov	r8, r5
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 80c5 	beq.w	800cafe <tcp_input+0x30e>
 800c974:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c976:	7d2b      	ldrb	r3, [r5, #20]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e4      	bne.n	800c946 <tcp_input+0x156>
 800c97c:	4653      	mov	r3, sl
 800c97e:	22fb      	movs	r2, #251	; 0xfb
 800c980:	4659      	mov	r1, fp
 800c982:	4648      	mov	r0, r9
 800c984:	f005 fdb4 	bl	80124f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c988:	7d2b      	ldrb	r3, [r5, #20]
 800c98a:	2b0a      	cmp	r3, #10
 800c98c:	d1dd      	bne.n	800c94a <tcp_input+0x15a>
 800c98e:	4653      	mov	r3, sl
 800c990:	22fc      	movs	r2, #252	; 0xfc
 800c992:	4915      	ldr	r1, [pc, #84]	; (800c9e8 <tcp_input+0x1f8>)
 800c994:	4648      	mov	r0, r9
 800c996:	f005 fdab 	bl	80124f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c99a:	7d2b      	ldrb	r3, [r5, #20]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d1d6      	bne.n	800c94e <tcp_input+0x15e>
 800c9a0:	4653      	mov	r3, sl
 800c9a2:	22fd      	movs	r2, #253	; 0xfd
 800c9a4:	4911      	ldr	r1, [pc, #68]	; (800c9ec <tcp_input+0x1fc>)
 800c9a6:	4648      	mov	r0, r9
 800c9a8:	f005 fda2 	bl	80124f0 <iprintf>
 800c9ac:	e7cf      	b.n	800c94e <tcp_input+0x15e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c9ae:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <tcp_input+0x1d8>)
 800c9b0:	2283      	movs	r2, #131	; 0x83
 800c9b2:	490f      	ldr	r1, [pc, #60]	; (800c9f0 <tcp_input+0x200>)
 800c9b4:	4806      	ldr	r0, [pc, #24]	; (800c9d0 <tcp_input+0x1e0>)
 800c9b6:	f005 fd9b 	bl	80124f0 <iprintf>
 800c9ba:	e722      	b.n	800c802 <tcp_input+0x12>
 800c9bc:	24010d84 	.word	0x24010d84
 800c9c0:	2400a278 	.word	0x2400a278
 800c9c4:	24010d88 	.word	0x24010d88
 800c9c8:	080166fc 	.word	0x080166fc
 800c9cc:	0801693c 	.word	0x0801693c
 800c9d0:	08014fe0 	.word	0x08014fe0
 800c9d4:	24010d78 	.word	0x24010d78
 800c9d8:	24010d54 	.word	0x24010d54
 800c9dc:	24010d58 	.word	0x24010d58
 800c9e0:	24010d92 	.word	0x24010d92
 800c9e4:	24010d38 	.word	0x24010d38
 800c9e8:	08016984 	.word	0x08016984
 800c9ec:	080169b0 	.word	0x080169b0
 800c9f0:	08016908 	.word	0x08016908
 800c9f4:	24010d90 	.word	0x24010d90
 800c9f8:	24010d8c 	.word	0x24010d8c
 800c9fc:	0801695c 	.word	0x0801695c
    if (pcb->remote_port == tcphdr->src &&
 800ca00:	885b      	ldrh	r3, [r3, #2]
 800ca02:	8aea      	ldrh	r2, [r5, #22]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d1b0      	bne.n	800c96a <tcp_input+0x17a>
        pcb->local_port == tcphdr->dest &&
 800ca08:	686a      	ldr	r2, [r5, #4]
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d1ac      	bne.n	800c96a <tcp_input+0x17a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca10:	682a      	ldr	r2, [r5, #0]
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d1a8      	bne.n	800c96a <tcp_input+0x17a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ca18:	68eb      	ldr	r3, [r5, #12]
 800ca1a:	42ab      	cmp	r3, r5
 800ca1c:	f000 8405 	beq.w	800d22a <tcp_input+0xa3a>
      if (prev != NULL) {
 800ca20:	f1b8 0f00 	cmp.w	r8, #0
 800ca24:	d009      	beq.n	800ca3a <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800ca26:	4a6e      	ldr	r2, [pc, #440]	; (800cbe0 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800ca28:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800ca2c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800ca2e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800ca30:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ca32:	68eb      	ldr	r3, [r5, #12]
 800ca34:	42ab      	cmp	r3, r5
 800ca36:	f000 8432 	beq.w	800d29e <tcp_input+0xaae>
    inseg.next = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	4f69      	ldr	r7, [pc, #420]	; (800cbe4 <tcp_input+0x3f4>)
    recv_data = NULL;
 800ca3e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc00 <tcp_input+0x410>
    recv_flags = 0;
 800ca42:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800cc04 <tcp_input+0x414>
    recv_acked = 0;
 800ca46:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800cc08 <tcp_input+0x418>
    inseg.len = p->tot_len;
 800ca4a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800ca4c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800ca4e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800ca52:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800ca56:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800ca5a:	4b63      	ldr	r3, [pc, #396]	; (800cbe8 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800ca5c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800ca5e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800ca60:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800ca62:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800ca64:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800ca66:	071a      	lsls	r2, r3, #28
 800ca68:	d503      	bpl.n	800ca72 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800ca6a:	7b62      	ldrb	r2, [r4, #13]
 800ca6c:	f042 0201 	orr.w	r2, r2, #1
 800ca70:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800ca72:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800ca74:	b172      	cbz	r2, 800ca94 <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ca76:	4628      	mov	r0, r5
 800ca78:	f7fe ff6e 	bl	800b958 <tcp_process_refused_data>
 800ca7c:	300d      	adds	r0, #13
 800ca7e:	f000 8276 	beq.w	800cf6e <tcp_input+0x77e>
 800ca82:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800ca84:	b123      	cbz	r3, 800ca90 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ca86:	9b05      	ldr	r3, [sp, #20]
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f040 826f 	bne.w	800cf6e <tcp_input+0x77e>
  if (flags & TCP_RST) {
 800ca90:	4b55      	ldr	r3, [pc, #340]	; (800cbe8 <tcp_input+0x3f8>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800ca94:	4c55      	ldr	r4, [pc, #340]	; (800cbec <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800ca96:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 800ca98:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800ca9a:	f140 814a 	bpl.w	800cd32 <tcp_input+0x542>
    if (pcb->state == SYN_SENT) {
 800ca9e:	7d29      	ldrb	r1, [r5, #20]
 800caa0:	2902      	cmp	r1, #2
 800caa2:	f000 8331 	beq.w	800d108 <tcp_input+0x918>
      if (seqno == pcb->rcv_nxt) {
 800caa6:	4b52      	ldr	r3, [pc, #328]	; (800cbf0 <tcp_input+0x400>)
 800caa8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	f000 8415 	beq.w	800d2dc <tcp_input+0xaec>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cab2:	1a9b      	subs	r3, r3, r2
 800cab4:	d404      	bmi.n	800cac0 <tcp_input+0x2d0>
 800cab6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800cab8:	1a9b      	subs	r3, r3, r2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f340 831f 	ble.w	800d0fe <tcp_input+0x90e>
      if (recv_flags & TF_RESET) {
 800cac0:	f899 3000 	ldrb.w	r3, [r9]
 800cac4:	0718      	lsls	r0, r3, #28
 800cac6:	f140 8258 	bpl.w	800cf7a <tcp_input+0x78a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800caca:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800cace:	b11b      	cbz	r3, 800cad8 <tcp_input+0x2e8>
 800cad0:	f06f 010d 	mvn.w	r1, #13
 800cad4:	6928      	ldr	r0, [r5, #16]
 800cad6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cad8:	4841      	ldr	r0, [pc, #260]	; (800cbe0 <tcp_input+0x3f0>)
 800cada:	4629      	mov	r1, r5
 800cadc:	f7fe fb7a 	bl	800b1d4 <tcp_pcb_remove>
        tcp_free(pcb);
 800cae0:	4628      	mov	r0, r5
 800cae2:	f7fd fe25 	bl	800a730 <tcp_free>
    tcp_input_pcb = NULL;
 800cae6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800cae8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800caea:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800caec:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800caf0:	b110      	cbz	r0, 800caf8 <tcp_input+0x308>
      pbuf_free(inseg.p);
 800caf2:	f7fd fb39 	bl	800a168 <pbuf_free>
      inseg.p = NULL;
 800caf6:	607d      	str	r5, [r7, #4]
}
 800caf8:	b007      	add	sp, #28
 800cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cafe:	4b3d      	ldr	r3, [pc, #244]	; (800cbf4 <tcp_input+0x404>)
 800cb00:	681d      	ldr	r5, [r3, #0]
 800cb02:	2d00      	cmp	r5, #0
 800cb04:	d05b      	beq.n	800cbbe <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb06:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800cc0c <tcp_input+0x41c>
 800cb0a:	f8df b104 	ldr.w	fp, [pc, #260]	; 800cc10 <tcp_input+0x420>
 800cb0e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800cc14 <tcp_input+0x424>
 800cb12:	e002      	b.n	800cb1a <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb14:	68ed      	ldr	r5, [r5, #12]
 800cb16:	2d00      	cmp	r5, #0
 800cb18:	d051      	beq.n	800cbbe <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb1a:	7d2b      	ldrb	r3, [r5, #20]
 800cb1c:	2b0a      	cmp	r3, #10
 800cb1e:	4643      	mov	r3, r8
 800cb20:	d005      	beq.n	800cb2e <tcp_input+0x33e>
 800cb22:	f240 121f 	movw	r2, #287	; 0x11f
 800cb26:	4659      	mov	r1, fp
 800cb28:	4648      	mov	r0, r9
 800cb2a:	f005 fce1 	bl	80124f0 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb2e:	7a2a      	ldrb	r2, [r5, #8]
 800cb30:	b132      	cbz	r2, 800cb40 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb38:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d1e9      	bne.n	800cb14 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800cb40:	6832      	ldr	r2, [r6, #0]
 800cb42:	8b2b      	ldrh	r3, [r5, #24]
 800cb44:	8811      	ldrh	r1, [r2, #0]
 800cb46:	428b      	cmp	r3, r1
 800cb48:	d1e4      	bne.n	800cb14 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800cb4a:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800cb4c:	8ae8      	ldrh	r0, [r5, #22]
 800cb4e:	4290      	cmp	r0, r2
 800cb50:	d1e0      	bne.n	800cb14 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800cb52:	6869      	ldr	r1, [r5, #4]
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4291      	cmp	r1, r2
 800cb58:	d1dc      	bne.n	800cb14 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb5a:	6829      	ldr	r1, [r5, #0]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4291      	cmp	r1, r2
 800cb60:	d1d8      	bne.n	800cb14 <tcp_input+0x324>
  if (flags & TCP_RST) {
 800cb62:	4a21      	ldr	r2, [pc, #132]	; (800cbe8 <tcp_input+0x3f8>)
 800cb64:	7812      	ldrb	r2, [r2, #0]
 800cb66:	0757      	lsls	r7, r2, #29
 800cb68:	f53f ae51 	bmi.w	800c80e <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800cb6c:	0796      	lsls	r6, r2, #30
 800cb6e:	f140 83aa 	bpl.w	800d2c6 <tcp_input+0xad6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cb72:	4a1f      	ldr	r2, [pc, #124]	; (800cbf0 <tcp_input+0x400>)
 800cb74:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800cb76:	6812      	ldr	r2, [r2, #0]
 800cb78:	1a51      	subs	r1, r2, r1
 800cb7a:	d404      	bmi.n	800cb86 <tcp_input+0x396>
 800cb7c:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800cb7e:	1b89      	subs	r1, r1, r6
 800cb80:	2900      	cmp	r1, #0
 800cb82:	f340 83b6 	ble.w	800d2f2 <tcp_input+0xb02>
  if ((tcplen > 0)) {
 800cb86:	9b05      	ldr	r3, [sp, #20]
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f43f ae3f 	beq.w	800c80e <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800cb90:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800cb92:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800cb94:	f043 0302 	orr.w	r3, r3, #2
 800cb98:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800cb9a:	f001 fb8f 	bl	800e2bc <tcp_output>
        pbuf_free(p);
 800cb9e:	e636      	b.n	800c80e <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800cba0:	4a15      	ldr	r2, [pc, #84]	; (800cbf8 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cba2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800cba4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cba6:	f7fd fa73 	bl	800a090 <pbuf_remove_header>
 800cbaa:	e692      	b.n	800c8d2 <tcp_input+0xe2>
    tcplen++;
 800cbac:	1c53      	adds	r3, r2, #1
 800cbae:	4913      	ldr	r1, [pc, #76]	; (800cbfc <tcp_input+0x40c>)
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800cbb4:	429a      	cmp	r2, r3
    tcplen++;
 800cbb6:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800cbb8:	f67f aeb7 	bls.w	800c92a <tcp_input+0x13a>
 800cbbc:	e627      	b.n	800c80e <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cbbe:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cc18 <tcp_input+0x428>
 800cbc2:	f8d9 8000 	ldr.w	r8, [r9]
 800cbc6:	f1b8 0f00 	cmp.w	r8, #0
 800cbca:	f000 8226 	beq.w	800d01a <tcp_input+0x82a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cbce:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cbd2:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800cbd4:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800cbd6:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cbd8:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800cbdc:	e024      	b.n	800cc28 <tcp_input+0x438>
 800cbde:	bf00      	nop
 800cbe0:	24010d38 	.word	0x24010d38
 800cbe4:	24010d5c 	.word	0x24010d5c
 800cbe8:	24010d58 	.word	0x24010d58
 800cbec:	24010d7c 	.word	0x24010d7c
 800cbf0:	24010d78 	.word	0x24010d78
 800cbf4:	24010d50 	.word	0x24010d50
 800cbf8:	24010d88 	.word	0x24010d88
 800cbfc:	24010d92 	.word	0x24010d92
 800cc00:	24010d70 	.word	0x24010d70
 800cc04:	24010d74 	.word	0x24010d74
 800cc08:	24010d6c 	.word	0x24010d6c
 800cc0c:	080166fc 	.word	0x080166fc
 800cc10:	08016a30 	.word	0x08016a30
 800cc14:	08014fe0 	.word	0x08014fe0
 800cc18:	24010d44 	.word	0x24010d44
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cc1c:	68eb      	ldr	r3, [r5, #12]
 800cc1e:	4629      	mov	r1, r5
 800cc20:	461d      	mov	r5, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 81fa 	beq.w	800d01c <tcp_input+0x82c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cc28:	7a2a      	ldrb	r2, [r5, #8]
 800cc2a:	b12a      	cbz	r2, 800cc38 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc2c:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800cc30:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d1f1      	bne.n	800cc1c <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 800cc38:	8aea      	ldrh	r2, [r5, #22]
 800cc3a:	8843      	ldrh	r3, [r0, #2]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d1ed      	bne.n	800cc1c <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cc40:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cc42:	b10a      	cbz	r2, 800cc48 <tcp_input+0x458>
 800cc44:	4572      	cmp	r2, lr
 800cc46:	d1e9      	bne.n	800cc1c <tcp_input+0x42c>
      if (prev != NULL) {
 800cc48:	b129      	cbz	r1, 800cc56 <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cc4a:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cc4c:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cc50:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cc52:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 800cc56:	4aa8      	ldr	r2, [pc, #672]	; (800cef8 <tcp_input+0x708>)
 800cc58:	7812      	ldrb	r2, [r2, #0]
 800cc5a:	0751      	lsls	r1, r2, #29
 800cc5c:	f53f add7 	bmi.w	800c80e <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800cc60:	f012 0810 	ands.w	r8, r2, #16
 800cc64:	f040 8266 	bne.w	800d134 <tcp_input+0x944>
  } else if (flags & TCP_SYN) {
 800cc68:	0790      	lsls	r0, r2, #30
 800cc6a:	f57f add0 	bpl.w	800c80e <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800cc6e:	7d68      	ldrb	r0, [r5, #21]
 800cc70:	f7fe fc5e 	bl	800b530 <tcp_alloc>
    if (npcb == NULL) {
 800cc74:	4681      	mov	r9, r0
 800cc76:	2800      	cmp	r0, #0
 800cc78:	f000 82c6 	beq.w	800d208 <tcp_input+0xa18>
    npcb->rcv_nxt = seqno + 1;
 800cc7c:	4b9f      	ldr	r3, [pc, #636]	; (800cefc <tcp_input+0x70c>)
    npcb->remote_port = tcphdr->src;
 800cc7e:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 800cc80:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800cc82:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800cc84:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800cc86:	7849      	ldrb	r1, [r1, #1]
 800cc88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800cc8c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800cc8e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cc90:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cc92:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800cc94:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cc96:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cc98:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800cc9a:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cc9c:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800cca2:	f7fe fef1 	bl	800ba88 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cca6:	4b95      	ldr	r3, [pc, #596]	; (800cefc <tcp_input+0x70c>)
    npcb->snd_nxt = iss;
 800cca8:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ccac:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800ccae:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ccb2:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 800ccb4:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 800ccb8:	4a91      	ldr	r2, [pc, #580]	; (800cf00 <tcp_input+0x710>)
    npcb->snd_wl2 = iss;
 800ccba:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ccbe:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 800ccc0:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800ccc4:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ccc8:	7a6b      	ldrb	r3, [r5, #9]
 800ccca:	f003 030c 	and.w	r3, r3, #12
 800ccce:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ccd2:	7a2b      	ldrb	r3, [r5, #8]
 800ccd4:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800ccd8:	6813      	ldr	r3, [r2, #0]
 800ccda:	f8c2 9000 	str.w	r9, [r2]
 800ccde:	f8c9 300c 	str.w	r3, [r9, #12]
 800cce2:	f001 fe0f 	bl	800e904 <tcp_timer_needed>
 800cce6:	4b87      	ldr	r3, [pc, #540]	; (800cf04 <tcp_input+0x714>)
 800cce8:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800ccea:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800ccec:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ccee:	f7ff fcd3 	bl	800c698 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ccf2:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ccf4:	f109 0204 	add.w	r2, r9, #4
 800ccf8:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800ccfc:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ccfe:	4610      	mov	r0, r2
 800cd00:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800cd02:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cd06:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cd0a:	f002 fdd3 	bl	800f8b4 <ip4_route>
 800cd0e:	9a05      	ldr	r2, [sp, #20]
 800cd10:	4601      	mov	r1, r0
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7fe fed4 	bl	800bac0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cd18:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cd1a:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cd1e:	4648      	mov	r0, r9
 800cd20:	f001 f8b0 	bl	800de84 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800cd24:	2800      	cmp	r0, #0
 800cd26:	f040 827a 	bne.w	800d21e <tcp_input+0xa2e>
    tcp_output(npcb);
 800cd2a:	4648      	mov	r0, r9
 800cd2c:	f001 fac6 	bl	800e2bc <tcp_output>
 800cd30:	e56d      	b.n	800c80e <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cd32:	079a      	lsls	r2, r3, #30
 800cd34:	d504      	bpl.n	800cd40 <tcp_input+0x550>
 800cd36:	7d2b      	ldrb	r3, [r5, #20]
 800cd38:	3b02      	subs	r3, #2
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	f200 81df 	bhi.w	800d0fe <tcp_input+0x90e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cd40:	8b6b      	ldrh	r3, [r5, #26]
 800cd42:	06db      	lsls	r3, r3, #27
 800cd44:	d402      	bmi.n	800cd4c <tcp_input+0x55c>
    pcb->tmr = tcp_ticks;
 800cd46:	4b70      	ldr	r3, [pc, #448]	; (800cf08 <tcp_input+0x718>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800cd4c:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800cd4e:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800cd50:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 800cd54:	f7ff fca0 	bl	800c698 <tcp_parseopt>
  switch (pcb->state) {
 800cd58:	7d2b      	ldrb	r3, [r5, #20]
 800cd5a:	3b02      	subs	r3, #2
 800cd5c:	2b07      	cmp	r3, #7
 800cd5e:	f63f aeaf 	bhi.w	800cac0 <tcp_input+0x2d0>
 800cd62:	e8df f003 	tbb	[pc, r3]
 800cd66:	1334      	.short	0x1334
 800cd68:	04748f04 	.word	0x04748f04
 800cd6c:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f7fe fff6 	bl	800bd60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cd74:	f899 3000 	ldrb.w	r3, [r9]
 800cd78:	069e      	lsls	r6, r3, #26
 800cd7a:	f57f aea1 	bpl.w	800cac0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800cd7e:	8b6b      	ldrh	r3, [r5, #26]
 800cd80:	f043 0302 	orr.w	r3, r3, #2
 800cd84:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800cd86:	2307      	movs	r3, #7
 800cd88:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800cd8a:	e699      	b.n	800cac0 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800cd8c:	4b5a      	ldr	r3, [pc, #360]	; (800cef8 <tcp_input+0x708>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	06d9      	lsls	r1, r3, #27
 800cd92:	f140 820d 	bpl.w	800d1b0 <tcp_input+0x9c0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cd96:	4b5d      	ldr	r3, [pc, #372]	; (800cf0c <tcp_input+0x71c>)
 800cd98:	6819      	ldr	r1, [r3, #0]
 800cd9a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cd9c:	43db      	mvns	r3, r3
 800cd9e:	42cb      	cmn	r3, r1
 800cda0:	d404      	bmi.n	800cdac <tcp_input+0x5bc>
 800cda2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cda4:	1acb      	subs	r3, r1, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f340 824d 	ble.w	800d246 <tcp_input+0xa56>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdac:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdae:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdb0:	8810      	ldrh	r0, [r2, #0]
 800cdb2:	4a52      	ldr	r2, [pc, #328]	; (800cefc <tcp_input+0x70c>)
 800cdb4:	6812      	ldr	r2, [r2, #0]
 800cdb6:	4402      	add	r2, r0
 800cdb8:	8818      	ldrh	r0, [r3, #0]
 800cdba:	9002      	str	r0, [sp, #8]
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	885b      	ldrh	r3, [r3, #2]
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	4b53      	ldr	r3, [pc, #332]	; (800cf10 <tcp_input+0x720>)
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	f001 f9fe 	bl	800e1c8 <tcp_rst>
    if (err != ERR_ABRT) {
 800cdcc:	e678      	b.n	800cac0 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cdce:	4b4a      	ldr	r3, [pc, #296]	; (800cef8 <tcp_input+0x708>)
 800cdd0:	781a      	ldrb	r2, [r3, #0]
 800cdd2:	f002 0312 	and.w	r3, r2, #18
 800cdd6:	2b12      	cmp	r3, #18
 800cdd8:	f000 813a 	beq.w	800d050 <tcp_input+0x860>
      else if (flags & TCP_ACK) {
 800cddc:	06d0      	lsls	r0, r2, #27
 800cdde:	f57f ae6f 	bpl.w	800cac0 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cde2:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cde4:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cde6:	8811      	ldrh	r1, [r2, #0]
 800cde8:	4a44      	ldr	r2, [pc, #272]	; (800cefc <tcp_input+0x70c>)
 800cdea:	8818      	ldrh	r0, [r3, #0]
 800cdec:	6812      	ldr	r2, [r2, #0]
 800cdee:	440a      	add	r2, r1
 800cdf0:	4946      	ldr	r1, [pc, #280]	; (800cf0c <tcp_input+0x71c>)
 800cdf2:	6809      	ldr	r1, [r1, #0]
 800cdf4:	9002      	str	r0, [sp, #8]
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	885b      	ldrh	r3, [r3, #2]
 800cdfa:	9301      	str	r3, [sp, #4]
 800cdfc:	4b44      	ldr	r3, [pc, #272]	; (800cf10 <tcp_input+0x720>)
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	3304      	adds	r3, #4
 800ce02:	f001 f9e1 	bl	800e1c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ce06:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800ce0a:	2b05      	cmp	r3, #5
 800ce0c:	f63f ae58 	bhi.w	800cac0 <tcp_input+0x2d0>
          pcb->rtime = 0;
 800ce10:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800ce12:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800ce14:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ce16:	f001 fc51 	bl	800e6bc <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800ce1a:	e651      	b.n	800cac0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	f7fe ff9f 	bl	800bd60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ce22:	4b35      	ldr	r3, [pc, #212]	; (800cef8 <tcp_input+0x708>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	06de      	lsls	r6, r3, #27
 800ce28:	f57f ae4a 	bpl.w	800cac0 <tcp_input+0x2d0>
 800ce2c:	4b37      	ldr	r3, [pc, #220]	; (800cf0c <tcp_input+0x71c>)
 800ce2e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	f47f ae44 	bne.w	800cac0 <tcp_input+0x2d0>
 800ce38:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f47f ae40 	bne.w	800cac0 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 800ce40:	f899 3000 	ldrb.w	r3, [r9]
 800ce44:	f043 0310 	orr.w	r3, r3, #16
 800ce48:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800ce4c:	e638      	b.n	800cac0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f7fe ff86 	bl	800bd60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ce54:	f899 3000 	ldrb.w	r3, [r9]
 800ce58:	069a      	lsls	r2, r3, #26
 800ce5a:	f57f ae31 	bpl.w	800cac0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800ce5e:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800ce60:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800ce62:	f043 0302 	orr.w	r3, r3, #2
 800ce66:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800ce68:	f7fd feb8 	bl	800abdc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ce6c:	4b24      	ldr	r3, [pc, #144]	; (800cf00 <tcp_input+0x710>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	42ab      	cmp	r3, r5
 800ce72:	d05e      	beq.n	800cf32 <tcp_input+0x742>
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d05f      	beq.n	800cf38 <tcp_input+0x748>
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	42aa      	cmp	r2, r5
 800ce7c:	f000 8218 	beq.w	800d2b0 <tcp_input+0xac0>
 800ce80:	4613      	mov	r3, r2
 800ce82:	e7f7      	b.n	800ce74 <tcp_input+0x684>
      tcp_receive(pcb);
 800ce84:	4628      	mov	r0, r5
 800ce86:	f7fe ff6b 	bl	800bd60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ce8a:	f899 3000 	ldrb.w	r3, [r9]
 800ce8e:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce92:	4b19      	ldr	r3, [pc, #100]	; (800cef8 <tcp_input+0x708>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800ce96:	f000 817b 	beq.w	800d190 <tcp_input+0x9a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce9a:	06d8      	lsls	r0, r3, #27
 800ce9c:	d504      	bpl.n	800cea8 <tcp_input+0x6b8>
 800ce9e:	4b1b      	ldr	r3, [pc, #108]	; (800cf0c <tcp_input+0x71c>)
 800cea0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d035      	beq.n	800cf14 <tcp_input+0x724>
          tcp_ack_now(pcb);
 800cea8:	8b6b      	ldrh	r3, [r5, #26]
 800ceaa:	f043 0302 	orr.w	r3, r3, #2
 800ceae:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800ceb0:	2308      	movs	r3, #8
 800ceb2:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800ceb4:	e604      	b.n	800cac0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f7fe ff52 	bl	800bd60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cebc:	4b0e      	ldr	r3, [pc, #56]	; (800cef8 <tcp_input+0x708>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	06db      	lsls	r3, r3, #27
 800cec2:	f57f adfd 	bpl.w	800cac0 <tcp_input+0x2d0>
 800cec6:	4b11      	ldr	r3, [pc, #68]	; (800cf0c <tcp_input+0x71c>)
 800cec8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	429a      	cmp	r2, r3
 800cece:	f47f adf7 	bne.w	800cac0 <tcp_input+0x2d0>
 800ced2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f47f adf3 	bne.w	800cac0 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 800ceda:	4628      	mov	r0, r5
 800cedc:	f7fd fe7e 	bl	800abdc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <tcp_input+0x710>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	42ab      	cmp	r3, r5
 800cee6:	d024      	beq.n	800cf32 <tcp_input+0x742>
 800cee8:	b333      	cbz	r3, 800cf38 <tcp_input+0x748>
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	42aa      	cmp	r2, r5
 800ceee:	f000 81df 	beq.w	800d2b0 <tcp_input+0xac0>
 800cef2:	4613      	mov	r3, r2
 800cef4:	e7f8      	b.n	800cee8 <tcp_input+0x6f8>
 800cef6:	bf00      	nop
 800cef8:	24010d58 	.word	0x24010d58
 800cefc:	24010d78 	.word	0x24010d78
 800cf00:	24010d38 	.word	0x24010d38
 800cf04:	24010d3c 	.word	0x24010d3c
 800cf08:	24010d48 	.word	0x24010d48
 800cf0c:	24010d54 	.word	0x24010d54
 800cf10:	2400a288 	.word	0x2400a288
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf14:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1c6      	bne.n	800cea8 <tcp_input+0x6b8>
          tcp_ack_now(pcb);
 800cf1a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800cf1c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 800cf1e:	f043 0302 	orr.w	r3, r3, #2
 800cf22:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800cf24:	f7fd fe5a 	bl	800abdc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cf28:	4bab      	ldr	r3, [pc, #684]	; (800d1d8 <tcp_input+0x9e8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	42ab      	cmp	r3, r5
 800cf2e:	f040 81c2 	bne.w	800d2b6 <tcp_input+0xac6>
        TCP_RMV_ACTIVE(pcb);
 800cf32:	68eb      	ldr	r3, [r5, #12]
 800cf34:	4aa8      	ldr	r2, [pc, #672]	; (800d1d8 <tcp_input+0x9e8>)
 800cf36:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf38:	4ba8      	ldr	r3, [pc, #672]	; (800d1dc <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 800cf3a:	220a      	movs	r2, #10
 800cf3c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	601d      	str	r5, [r3, #0]
 800cf42:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800cf44:	2201      	movs	r2, #1
 800cf46:	4ba6      	ldr	r3, [pc, #664]	; (800d1e0 <tcp_input+0x9f0>)
 800cf48:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf4a:	f001 fcdb 	bl	800e904 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800cf4e:	e5b7      	b.n	800cac0 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cf50:	4ba4      	ldr	r3, [pc, #656]	; (800d1e4 <tcp_input+0x9f4>)
 800cf52:	22c2      	movs	r2, #194	; 0xc2
 800cf54:	49a4      	ldr	r1, [pc, #656]	; (800d1e8 <tcp_input+0x9f8>)
 800cf56:	48a5      	ldr	r0, [pc, #660]	; (800d1ec <tcp_input+0x9fc>)
 800cf58:	f005 faca 	bl	80124f0 <iprintf>
 800cf5c:	e48a      	b.n	800c874 <tcp_input+0x84>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cf5e:	4ba1      	ldr	r3, [pc, #644]	; (800d1e4 <tcp_input+0x9f4>)
 800cf60:	22df      	movs	r2, #223	; 0xdf
 800cf62:	49a3      	ldr	r1, [pc, #652]	; (800d1f0 <tcp_input+0xa00>)
 800cf64:	48a1      	ldr	r0, [pc, #644]	; (800d1ec <tcp_input+0x9fc>)
 800cf66:	f005 fac3 	bl	80124f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cf6a:	8923      	ldrh	r3, [r4, #8]
 800cf6c:	e4a7      	b.n	800c8be <tcp_input+0xce>
        if (pcb->rcv_ann_wnd == 0) {
 800cf6e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f000 80da 	beq.w	800d12a <tcp_input+0x93a>
 800cf76:	4c9f      	ldr	r4, [pc, #636]	; (800d1f4 <tcp_input+0xa04>)
 800cf78:	e5b5      	b.n	800cae6 <tcp_input+0x2f6>
        if (recv_acked > 0) {
 800cf7a:	f8bb 2000 	ldrh.w	r2, [fp]
 800cf7e:	b15a      	cbz	r2, 800cf98 <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cf80:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800cf84:	b12b      	cbz	r3, 800cf92 <tcp_input+0x7a2>
 800cf86:	4629      	mov	r1, r5
 800cf88:	6928      	ldr	r0, [r5, #16]
 800cf8a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800cf8c:	300d      	adds	r0, #13
 800cf8e:	f43f adaa 	beq.w	800cae6 <tcp_input+0x2f6>
          recv_acked = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f7fe fe43 	bl	800bc24 <tcp_input_delayed_close>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f47f ada1 	bne.w	800cae6 <tcp_input+0x2f6>
        if (recv_data != NULL) {
 800cfa4:	f8d8 2000 	ldr.w	r2, [r8]
 800cfa8:	b1fa      	cbz	r2, 800cfea <tcp_input+0x7fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cfaa:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800cfac:	b143      	cbz	r3, 800cfc0 <tcp_input+0x7d0>
 800cfae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cfb2:	4b8c      	ldr	r3, [pc, #560]	; (800d1e4 <tcp_input+0x9f4>)
 800cfb4:	4990      	ldr	r1, [pc, #576]	; (800d1f8 <tcp_input+0xa08>)
 800cfb6:	488d      	ldr	r0, [pc, #564]	; (800d1ec <tcp_input+0x9fc>)
 800cfb8:	f005 fa9a 	bl	80124f0 <iprintf>
            pbuf_free(recv_data);
 800cfbc:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800cfc0:	8b6b      	ldrh	r3, [r5, #26]
 800cfc2:	f013 0310 	ands.w	r3, r3, #16
 800cfc6:	f040 80dc 	bne.w	800d182 <tcp_input+0x992>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cfca:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800cfce:	2e00      	cmp	r6, #0
 800cfd0:	f000 80fc 	beq.w	800d1cc <tcp_input+0x9dc>
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	6928      	ldr	r0, [r5, #16]
 800cfd8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800cfda:	f110 0f0d 	cmn.w	r0, #13
 800cfde:	f43f ad82 	beq.w	800cae6 <tcp_input+0x2f6>
          if (err != ERR_OK) {
 800cfe2:	b110      	cbz	r0, 800cfea <tcp_input+0x7fa>
            pcb->refused_data = recv_data;
 800cfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe8:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800cfea:	f899 3000 	ldrb.w	r3, [r9]
 800cfee:	0699      	lsls	r1, r3, #26
 800cff0:	d507      	bpl.n	800d002 <tcp_input+0x812>
          if (pcb->refused_data != NULL) {
 800cff2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 80af 	beq.w	800d158 <tcp_input+0x968>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cffa:	7b5a      	ldrb	r2, [r3, #13]
 800cffc:	f042 0220 	orr.w	r2, r2, #32
 800d000:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d002:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d004:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800d006:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d008:	f7fe fe0c 	bl	800bc24 <tcp_input_delayed_close>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	f47f ad6a 	bne.w	800cae6 <tcp_input+0x2f6>
        tcp_output(pcb);
 800d012:	4628      	mov	r0, r5
 800d014:	f001 f952 	bl	800e2bc <tcp_output>
 800d018:	e565      	b.n	800cae6 <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d01a:	6830      	ldr	r0, [r6, #0]
 800d01c:	8980      	ldrh	r0, [r0, #12]
 800d01e:	f7fc f901 	bl	8009224 <lwip_htons>
 800d022:	f010 0004 	ands.w	r0, r0, #4
 800d026:	f47f abf2 	bne.w	800c80e <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d02a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d02c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d02e:	8811      	ldrh	r1, [r2, #0]
 800d030:	4a72      	ldr	r2, [pc, #456]	; (800d1fc <tcp_input+0xa0c>)
 800d032:	881d      	ldrh	r5, [r3, #0]
 800d034:	6812      	ldr	r2, [r2, #0]
 800d036:	440a      	add	r2, r1
 800d038:	4971      	ldr	r1, [pc, #452]	; (800d200 <tcp_input+0xa10>)
 800d03a:	6809      	ldr	r1, [r1, #0]
 800d03c:	9502      	str	r5, [sp, #8]
 800d03e:	885b      	ldrh	r3, [r3, #2]
 800d040:	9301      	str	r3, [sp, #4]
 800d042:	4b70      	ldr	r3, [pc, #448]	; (800d204 <tcp_input+0xa14>)
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	3304      	adds	r3, #4
 800d048:	f001 f8be 	bl	800e1c8 <tcp_rst>
 800d04c:	f7ff bbdf 	b.w	800c80e <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 800d050:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d052:	496b      	ldr	r1, [pc, #428]	; (800d200 <tcp_input+0xa10>)
 800d054:	3301      	adds	r3, #1
 800d056:	6809      	ldr	r1, [r1, #0]
 800d058:	428b      	cmp	r3, r1
 800d05a:	f47f aebf 	bne.w	800cddc <tcp_input+0x5ec>
        pcb->lastack = ackno;
 800d05e:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d060:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800d062:	4b66      	ldr	r3, [pc, #408]	; (800d1fc <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 800d064:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800d066:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d068:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800d06a:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d06c:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800d06e:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d070:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800d072:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d074:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d076:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d078:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800d07a:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800d07e:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d080:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d084:	9205      	str	r2, [sp, #20]
 800d086:	f002 fc15 	bl	800f8b4 <ip4_route>
 800d08a:	9a05      	ldr	r2, [sp, #20]
 800d08c:	4601      	mov	r1, r0
 800d08e:	4630      	mov	r0, r6
 800d090:	f7fe fd16 	bl	800bac0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d094:	f241 131c 	movw	r3, #4380	; 0x111c
 800d098:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d09a:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d09c:	0081      	lsls	r1, r0, #2
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	4616      	mov	r6, r2
 800d0a2:	bf38      	it	cc
 800d0a4:	461e      	movcc	r6, r3
 800d0a6:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800d0aa:	f240 8148 	bls.w	800d33e <tcp_input+0xb4e>
 800d0ae:	b28b      	uxth	r3, r1
 800d0b0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d0b4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 8138 	beq.w	800d32e <tcp_input+0xb3e>
        --pcb->snd_queuelen;
 800d0be:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 800d0c2:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 800d0ca:	2e00      	cmp	r6, #0
 800d0cc:	f000 812a 	beq.w	800d324 <tcp_input+0xb34>
          pcb->unacked = rseg->next;
 800d0d0:	6833      	ldr	r3, [r6, #0]
 800d0d2:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7fd fcc3 	bl	800aa60 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800d0da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f000 811d 	beq.w	800d31c <tcp_input+0xb2c>
          pcb->rtime = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 800d0e6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d0ea:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800d0ee:	b133      	cbz	r3, 800d0fe <tcp_input+0x90e>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	6928      	ldr	r0, [r5, #16]
 800d0f6:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d0f8:	300d      	adds	r0, #13
 800d0fa:	f43f acf4 	beq.w	800cae6 <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 800d0fe:	8b6b      	ldrh	r3, [r5, #26]
 800d100:	f043 0302 	orr.w	r3, r3, #2
 800d104:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d106:	e4db      	b.n	800cac0 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 800d108:	4b3d      	ldr	r3, [pc, #244]	; (800d200 <tcp_input+0xa10>)
 800d10a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	429a      	cmp	r2, r3
 800d110:	f47f acd6 	bne.w	800cac0 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 800d114:	f899 3000 	ldrb.w	r3, [r9]
 800d118:	f043 0308 	orr.w	r3, r3, #8
 800d11c:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d120:	8b6b      	ldrh	r3, [r5, #26]
 800d122:	f023 0301 	bic.w	r3, r3, #1
 800d126:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d128:	e4ca      	b.n	800cac0 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 800d12a:	4628      	mov	r0, r5
 800d12c:	4c31      	ldr	r4, [pc, #196]	; (800d1f4 <tcp_input+0xa04>)
 800d12e:	f001 f893 	bl	800e258 <tcp_send_empty_ack>
 800d132:	e4d8      	b.n	800cae6 <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d134:	8802      	ldrh	r2, [r0, #0]
 800d136:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d13a:	9b05      	ldr	r3, [sp, #20]
 800d13c:	881a      	ldrh	r2, [r3, #0]
 800d13e:	4b2f      	ldr	r3, [pc, #188]	; (800d1fc <tcp_input+0xa0c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	441a      	add	r2, r3
 800d144:	4b2e      	ldr	r3, [pc, #184]	; (800d200 <tcp_input+0xa10>)
 800d146:	4628      	mov	r0, r5
 800d148:	6819      	ldr	r1, [r3, #0]
 800d14a:	4b2e      	ldr	r3, [pc, #184]	; (800d204 <tcp_input+0xa14>)
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	3304      	adds	r3, #4
 800d150:	f001 f83a 	bl	800e1c8 <tcp_rst>
 800d154:	f7ff bb5b 	b.w	800c80e <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d158:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800d15a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800d15e:	4293      	cmp	r3, r2
 800d160:	d001      	beq.n	800d166 <tcp_input+0x976>
              pcb->rcv_wnd++;
 800d162:	3301      	adds	r3, #1
 800d164:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d166:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	f43f af49 	beq.w	800d002 <tcp_input+0x812>
 800d170:	2300      	movs	r3, #0
 800d172:	4629      	mov	r1, r5
 800d174:	6928      	ldr	r0, [r5, #16]
 800d176:	461a      	mov	r2, r3
 800d178:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d17a:	300d      	adds	r0, #13
 800d17c:	f47f af41 	bne.w	800d002 <tcp_input+0x812>
 800d180:	e4b1      	b.n	800cae6 <tcp_input+0x2f6>
            pbuf_free(recv_data);
 800d182:	4610      	mov	r0, r2
 800d184:	f7fc fff0 	bl	800a168 <pbuf_free>
            tcp_abort(pcb);
 800d188:	4628      	mov	r0, r5
 800d18a:	f7fe f969 	bl	800b460 <tcp_abort>
            goto aborted;
 800d18e:	e4aa      	b.n	800cae6 <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d190:	06d9      	lsls	r1, r3, #27
 800d192:	f57f ac95 	bpl.w	800cac0 <tcp_input+0x2d0>
 800d196:	4b1a      	ldr	r3, [pc, #104]	; (800d200 <tcp_input+0xa10>)
 800d198:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	f47f ac8f 	bne.w	800cac0 <tcp_input+0x2d0>
 800d1a2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f47f ac8b 	bne.w	800cac0 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 800d1aa:	2306      	movs	r3, #6
 800d1ac:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d1ae:	e487      	b.n	800cac0 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d1b0:	079b      	lsls	r3, r3, #30
 800d1b2:	f57f ac85 	bpl.w	800cac0 <tcp_input+0x2d0>
 800d1b6:	4b11      	ldr	r3, [pc, #68]	; (800d1fc <tcp_input+0xa0c>)
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	f47f ac7e 	bne.w	800cac0 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f000 ff81 	bl	800e0cc <tcp_rexmit>
    if (err != ERR_ABRT) {
 800d1ca:	e479      	b.n	800cac0 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d1cc:	4633      	mov	r3, r6
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7fe fb8d 	bl	800b8f0 <tcp_recv_null>
 800d1d6:	e700      	b.n	800cfda <tcp_input+0x7ea>
 800d1d8:	24010d38 	.word	0x24010d38
 800d1dc:	24010d50 	.word	0x24010d50
 800d1e0:	24010d3c 	.word	0x24010d3c
 800d1e4:	080166fc 	.word	0x080166fc
 800d1e8:	08016920 	.word	0x08016920
 800d1ec:	08014fe0 	.word	0x08014fe0
 800d1f0:	08016930 	.word	0x08016930
 800d1f4:	24010d7c 	.word	0x24010d7c
 800d1f8:	08016acc 	.word	0x08016acc
 800d1fc:	24010d78 	.word	0x24010d78
 800d200:	24010d54 	.word	0x24010d54
 800d204:	2400a288 	.word	0x2400a288
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d208:	69ab      	ldr	r3, [r5, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f43f aaff 	beq.w	800c80e <tcp_input+0x1e>
 800d210:	4601      	mov	r1, r0
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	6928      	ldr	r0, [r5, #16]
 800d218:	4798      	blx	r3
 800d21a:	f7ff baf8 	b.w	800c80e <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800d21e:	4641      	mov	r1, r8
 800d220:	4648      	mov	r0, r9
 800d222:	f7fe f847 	bl	800b2b4 <tcp_abandon>
      return;
 800d226:	f7ff baf2 	b.w	800c80e <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d22a:	4b4b      	ldr	r3, [pc, #300]	; (800d358 <tcp_input+0xb68>)
 800d22c:	f240 120d 	movw	r2, #269	; 0x10d
 800d230:	494a      	ldr	r1, [pc, #296]	; (800d35c <tcp_input+0xb6c>)
 800d232:	484b      	ldr	r0, [pc, #300]	; (800d360 <tcp_input+0xb70>)
 800d234:	f005 f95c 	bl	80124f0 <iprintf>
      if (prev != NULL) {
 800d238:	f1b8 0f00 	cmp.w	r8, #0
 800d23c:	f43f abf9 	beq.w	800ca32 <tcp_input+0x242>
 800d240:	68eb      	ldr	r3, [r5, #12]
 800d242:	f7ff bbf0 	b.w	800ca26 <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 800d246:	2304      	movs	r3, #4
 800d248:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800d24a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d09b      	beq.n	800d188 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d056      	beq.n	800d304 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d256:	2200      	movs	r2, #0
 800d258:	4629      	mov	r1, r5
 800d25a:	6928      	ldr	r0, [r5, #16]
 800d25c:	4798      	blx	r3
          if (err != ERR_OK) {
 800d25e:	2800      	cmp	r0, #0
 800d260:	d14c      	bne.n	800d2fc <tcp_input+0xb0c>
          tcp_receive(pcb);
 800d262:	4628      	mov	r0, r5
 800d264:	f7fe fd7c 	bl	800bd60 <tcp_receive>
          if (recv_acked != 0) {
 800d268:	f8bb 3000 	ldrh.w	r3, [fp]
 800d26c:	b113      	cbz	r3, 800d274 <tcp_input+0xa84>
            recv_acked--;
 800d26e:	3b01      	subs	r3, #1
 800d270:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d274:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 800d276:	f241 131c 	movw	r3, #4380	; 0x111c
 800d27a:	004a      	lsls	r2, r1, #1
 800d27c:	0088      	lsls	r0, r1, #2
 800d27e:	429a      	cmp	r2, r3
 800d280:	4616      	mov	r6, r2
 800d282:	bf38      	it	cc
 800d284:	461e      	movcc	r6, r3
 800d286:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800d28a:	d923      	bls.n	800d2d4 <tcp_input+0xae4>
 800d28c:	b283      	uxth	r3, r0
 800d28e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d292:	f899 3000 	ldrb.w	r3, [r9]
 800d296:	069a      	lsls	r2, r3, #26
 800d298:	f57f ac12 	bpl.w	800cac0 <tcp_input+0x2d0>
 800d29c:	e56f      	b.n	800cd7e <tcp_input+0x58e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d29e:	4b2e      	ldr	r3, [pc, #184]	; (800d358 <tcp_input+0xb68>)
 800d2a0:	f240 1215 	movw	r2, #277	; 0x115
 800d2a4:	492f      	ldr	r1, [pc, #188]	; (800d364 <tcp_input+0xb74>)
 800d2a6:	482e      	ldr	r0, [pc, #184]	; (800d360 <tcp_input+0xb70>)
 800d2a8:	f005 f922 	bl	80124f0 <iprintf>
 800d2ac:	f7ff bbc5 	b.w	800ca3a <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 800d2b0:	68ea      	ldr	r2, [r5, #12]
 800d2b2:	60da      	str	r2, [r3, #12]
 800d2b4:	e640      	b.n	800cf38 <tcp_input+0x748>
          TCP_RMV_ACTIVE(pcb);
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f43f ae3e 	beq.w	800cf38 <tcp_input+0x748>
 800d2bc:	68da      	ldr	r2, [r3, #12]
 800d2be:	42aa      	cmp	r2, r5
 800d2c0:	d0f6      	beq.n	800d2b0 <tcp_input+0xac0>
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	e7f7      	b.n	800d2b6 <tcp_input+0xac6>
  } else if (flags & TCP_FIN) {
 800d2c6:	07d0      	lsls	r0, r2, #31
 800d2c8:	f57f ac5d 	bpl.w	800cb86 <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 800d2cc:	4b26      	ldr	r3, [pc, #152]	; (800d368 <tcp_input+0xb78>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	622b      	str	r3, [r5, #32]
 800d2d2:	e458      	b.n	800cb86 <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	bf88      	it	hi
 800d2d8:	b293      	uxthhi	r3, r2
 800d2da:	e7d8      	b.n	800d28e <tcp_input+0xa9e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	f47f af19 	bne.w	800d114 <tcp_input+0x924>
 800d2e2:	4b1d      	ldr	r3, [pc, #116]	; (800d358 <tcp_input+0xb68>)
 800d2e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d2e8:	4920      	ldr	r1, [pc, #128]	; (800d36c <tcp_input+0xb7c>)
 800d2ea:	481d      	ldr	r0, [pc, #116]	; (800d360 <tcp_input+0xb70>)
 800d2ec:	f005 f900 	bl	80124f0 <iprintf>
 800d2f0:	e710      	b.n	800d114 <tcp_input+0x924>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2f2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800d2f6:	9b05      	ldr	r3, [sp, #20]
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	e722      	b.n	800d142 <tcp_input+0x952>
            if (err != ERR_ABRT) {
 800d2fc:	300d      	adds	r0, #13
 800d2fe:	f43f abf2 	beq.w	800cae6 <tcp_input+0x2f6>
 800d302:	e741      	b.n	800d188 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d304:	4b14      	ldr	r3, [pc, #80]	; (800d358 <tcp_input+0xb68>)
 800d306:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d30a:	4919      	ldr	r1, [pc, #100]	; (800d370 <tcp_input+0xb80>)
 800d30c:	4814      	ldr	r0, [pc, #80]	; (800d360 <tcp_input+0xb70>)
 800d30e:	f005 f8ef 	bl	80124f0 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d312:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d19d      	bne.n	800d256 <tcp_input+0xa66>
 800d31a:	e735      	b.n	800d188 <tcp_input+0x998>
          pcb->rtime = -1;
 800d31c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d320:	862b      	strh	r3, [r5, #48]	; 0x30
 800d322:	e6e2      	b.n	800d0ea <tcp_input+0x8fa>
          rseg = pcb->unsent;
 800d324:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d326:	b176      	cbz	r6, 800d346 <tcp_input+0xb56>
          pcb->unsent = rseg->next;
 800d328:	6833      	ldr	r3, [r6, #0]
 800d32a:	66eb      	str	r3, [r5, #108]	; 0x6c
 800d32c:	e6d2      	b.n	800d0d4 <tcp_input+0x8e4>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d32e:	4b0a      	ldr	r3, [pc, #40]	; (800d358 <tcp_input+0xb68>)
 800d330:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d334:	490f      	ldr	r1, [pc, #60]	; (800d374 <tcp_input+0xb84>)
 800d336:	480a      	ldr	r0, [pc, #40]	; (800d360 <tcp_input+0xb70>)
 800d338:	f005 f8da 	bl	80124f0 <iprintf>
 800d33c:	e6bf      	b.n	800d0be <tcp_input+0x8ce>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d33e:	429a      	cmp	r2, r3
 800d340:	bf88      	it	hi
 800d342:	b293      	uxthhi	r3, r2
 800d344:	e6b4      	b.n	800d0b0 <tcp_input+0x8c0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d346:	4b04      	ldr	r3, [pc, #16]	; (800d358 <tcp_input+0xb68>)
 800d348:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d34c:	490a      	ldr	r1, [pc, #40]	; (800d378 <tcp_input+0xb88>)
 800d34e:	4804      	ldr	r0, [pc, #16]	; (800d360 <tcp_input+0xb70>)
 800d350:	f005 f8ce 	bl	80124f0 <iprintf>
 800d354:	e7e8      	b.n	800d328 <tcp_input+0xb38>
 800d356:	bf00      	nop
 800d358:	080166fc 	.word	0x080166fc
 800d35c:	080169d8 	.word	0x080169d8
 800d360:	08014fe0 	.word	0x08014fe0
 800d364:	08016a04 	.word	0x08016a04
 800d368:	24010d48 	.word	0x24010d48
 800d36c:	08016a60 	.word	0x08016a60
 800d370:	08016aac 	.word	0x08016aac
 800d374:	08016a80 	.word	0x08016a80
 800d378:	08016a98 	.word	0x08016a98

0800d37c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d37c:	4a02      	ldr	r2, [pc, #8]	; (800d388 <tcp_trigger_input_pcb_close+0xc>)
 800d37e:	7813      	ldrb	r3, [r2, #0]
 800d380:	f043 0310 	orr.w	r3, r3, #16
 800d384:	7013      	strb	r3, [r2, #0]
}
 800d386:	4770      	bx	lr
 800d388:	24010d74 	.word	0x24010d74

0800d38c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d390:	9f08      	ldr	r7, [sp, #32]
 800d392:	4680      	mov	r8, r0
 800d394:	460d      	mov	r5, r1
 800d396:	4614      	mov	r4, r2
 800d398:	461e      	mov	r6, r3
 800d39a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d39e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d3a2:	2f00      	cmp	r7, #0
 800d3a4:	d033      	beq.n	800d40e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d3a6:	42a5      	cmp	r5, r4
 800d3a8:	d20e      	bcs.n	800d3c8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d3aa:	f019 0f02 	tst.w	r9, #2
 800d3ae:	d008      	beq.n	800d3c2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d3b0:	f205 51b7 	addw	r1, r5, #1463	; 0x5b7
 800d3b4:	f021 0103 	bic.w	r1, r1, #3
 800d3b8:	42a1      	cmp	r1, r4
 800d3ba:	bf28      	it	cs
 800d3bc:	4621      	movcs	r1, r4
 800d3be:	b289      	uxth	r1, r1
 800d3c0:	e003      	b.n	800d3ca <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d3c2:	8b7b      	ldrh	r3, [r7, #26]
 800d3c4:	065b      	lsls	r3, r3, #25
 800d3c6:	d518      	bpl.n	800d3fa <tcp_pbuf_prealloc+0x6e>
 800d3c8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d3ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f7fc ff3a 	bl	800a248 <pbuf_alloc>
  if (p == NULL) {
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	b168      	cbz	r0, 800d3f4 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d3d8:	6803      	ldr	r3, [r0, #0]
 800d3da:	b133      	cbz	r3, 800d3ea <tcp_pbuf_prealloc+0x5e>
 800d3dc:	4b0f      	ldr	r3, [pc, #60]	; (800d41c <tcp_pbuf_prealloc+0x90>)
 800d3de:	f240 120b 	movw	r2, #267	; 0x10b
 800d3e2:	490f      	ldr	r1, [pc, #60]	; (800d420 <tcp_pbuf_prealloc+0x94>)
 800d3e4:	480f      	ldr	r0, [pc, #60]	; (800d424 <tcp_pbuf_prealloc+0x98>)
 800d3e6:	f005 f883 	bl	80124f0 <iprintf>
  *oversize = p->len - length;
 800d3ea:	8963      	ldrh	r3, [r4, #10]
 800d3ec:	1b5b      	subs	r3, r3, r5
 800d3ee:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d3f0:	8125      	strh	r5, [r4, #8]
 800d3f2:	8165      	strh	r5, [r4, #10]
  return p;
}
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800d3fa:	f1ba 0f00 	cmp.w	sl, #0
 800d3fe:	d0d7      	beq.n	800d3b0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 800d400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1d4      	bne.n	800d3b0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 800d406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1d1      	bne.n	800d3b0 <tcp_pbuf_prealloc+0x24>
 800d40c:	e7dc      	b.n	800d3c8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d40e:	4b03      	ldr	r3, [pc, #12]	; (800d41c <tcp_pbuf_prealloc+0x90>)
 800d410:	22e9      	movs	r2, #233	; 0xe9
 800d412:	4905      	ldr	r1, [pc, #20]	; (800d428 <tcp_pbuf_prealloc+0x9c>)
 800d414:	4803      	ldr	r0, [pc, #12]	; (800d424 <tcp_pbuf_prealloc+0x98>)
 800d416:	f005 f86b 	bl	80124f0 <iprintf>
 800d41a:	e7c4      	b.n	800d3a6 <tcp_pbuf_prealloc+0x1a>
 800d41c:	08016ae8 	.word	0x08016ae8
 800d420:	08016b3c 	.word	0x08016b3c
 800d424:	08014fe0 	.word	0x08014fe0
 800d428:	08016b1c 	.word	0x08016b1c

0800d42c <tcp_create_segment>:
{
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	460e      	mov	r6, r1
 800d432:	f89d a020 	ldrb.w	sl, [sp, #32]
 800d436:	4690      	mov	r8, r2
 800d438:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d43a:	4607      	mov	r7, r0
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d04a      	beq.n	800d4d6 <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d440:	2e00      	cmp	r6, #0
 800d442:	d050      	beq.n	800d4e6 <tcp_create_segment+0xba>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d444:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d448:	2003      	movs	r0, #3
 800d44a:	f7fc fa81 	bl	8009950 <memp_malloc>
 800d44e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d450:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d454:	2800      	cmp	r0, #0
 800d456:	d054      	beq.n	800d502 <tcp_create_segment+0xd6>
  seg->flags = optflags;
 800d458:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800d45c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d45e:	8932      	ldrh	r2, [r6, #8]
 800d460:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800d464:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d466:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800d468:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d46a:	d32c      	bcc.n	800d4c6 <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 800d46c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d470:	4630      	mov	r0, r6
 800d472:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800d474:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d476:	f7fc fdd7 	bl	800a028 <pbuf_add_header>
 800d47a:	4606      	mov	r6, r0
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d139      	bne.n	800d4f4 <tcp_create_segment+0xc8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d480:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d482:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d484:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d486:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d48a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d48e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d492:	f7fb fec7 	bl	8009224 <lwip_htons>
 800d496:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d49a:	8b38      	ldrh	r0, [r7, #24]
 800d49c:	68e7      	ldr	r7, [r4, #12]
 800d49e:	f7fb fec1 	bl	8009224 <lwip_htons>
 800d4a2:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d4a4:	4648      	mov	r0, r9
 800d4a6:	68e7      	ldr	r7, [r4, #12]
 800d4a8:	f7fb fec0 	bl	800922c <lwip_htonl>
 800d4ac:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d4ae:	ea45 0008 	orr.w	r0, r5, r8
 800d4b2:	68e7      	ldr	r7, [r4, #12]
 800d4b4:	f7fb feb6 	bl	8009224 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800d4b8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d4ba:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800d4bc:	749e      	strb	r6, [r3, #18]
 800d4be:	74de      	strb	r6, [r3, #19]
}
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d4c6:	22b0      	movs	r2, #176	; 0xb0
 800d4c8:	4b10      	ldr	r3, [pc, #64]	; (800d50c <tcp_create_segment+0xe0>)
 800d4ca:	4911      	ldr	r1, [pc, #68]	; (800d510 <tcp_create_segment+0xe4>)
 800d4cc:	4811      	ldr	r0, [pc, #68]	; (800d514 <tcp_create_segment+0xe8>)
 800d4ce:	f005 f80f 	bl	80124f0 <iprintf>
  seg->len = p->tot_len - optlen;
 800d4d2:	8932      	ldrh	r2, [r6, #8]
 800d4d4:	e7ca      	b.n	800d46c <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	; (800d50c <tcp_create_segment+0xe0>)
 800d4d8:	22a3      	movs	r2, #163	; 0xa3
 800d4da:	490f      	ldr	r1, [pc, #60]	; (800d518 <tcp_create_segment+0xec>)
 800d4dc:	480d      	ldr	r0, [pc, #52]	; (800d514 <tcp_create_segment+0xe8>)
 800d4de:	f005 f807 	bl	80124f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	d1ae      	bne.n	800d444 <tcp_create_segment+0x18>
 800d4e6:	4b09      	ldr	r3, [pc, #36]	; (800d50c <tcp_create_segment+0xe0>)
 800d4e8:	22a4      	movs	r2, #164	; 0xa4
 800d4ea:	490c      	ldr	r1, [pc, #48]	; (800d51c <tcp_create_segment+0xf0>)
 800d4ec:	4809      	ldr	r0, [pc, #36]	; (800d514 <tcp_create_segment+0xe8>)
 800d4ee:	f004 ffff 	bl	80124f0 <iprintf>
 800d4f2:	e7a7      	b.n	800d444 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800d4f4:	4620      	mov	r0, r4
    return NULL;
 800d4f6:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800d4f8:	f7fd fab2 	bl	800aa60 <tcp_seg_free>
}
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800d502:	4630      	mov	r0, r6
 800d504:	f7fc fe30 	bl	800a168 <pbuf_free>
    return NULL;
 800d508:	e7da      	b.n	800d4c0 <tcp_create_segment+0x94>
 800d50a:	bf00      	nop
 800d50c:	08016ae8 	.word	0x08016ae8
 800d510:	08016b94 	.word	0x08016b94
 800d514:	08014fe0 	.word	0x08014fe0
 800d518:	08016b50 	.word	0x08016b50
 800d51c:	08016b70 	.word	0x08016b70

0800d520 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d520:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d526:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d528:	4606      	mov	r6, r0
 800d52a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d52c:	2022      	movs	r0, #34	; 0x22
 800d52e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d532:	461c      	mov	r4, r3
 800d534:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d538:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d53c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d540:	f7fc fe82 	bl	800a248 <pbuf_alloc>
  if (p != NULL) {
 800d544:	4605      	mov	r5, r0
 800d546:	b300      	cbz	r0, 800d58a <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d548:	8943      	ldrh	r3, [r0, #10]
 800d54a:	2b13      	cmp	r3, #19
 800d54c:	d920      	bls.n	800d590 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800d54e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800d550:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800d552:	f7fb fe67 	bl	8009224 <lwip_htons>
 800d556:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d558:	4650      	mov	r0, sl
 800d55a:	f7fb fe63 	bl	8009224 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800d55e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800d560:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800d562:	4630      	mov	r0, r6
 800d564:	f7fb fe62 	bl	800922c <lwip_htonl>
 800d568:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d56a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800d56e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d570:	f7fb fe58 	bl	8009224 <lwip_htons>
 800d574:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800d576:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d578:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d57a:	f7fb fe53 	bl	8009224 <lwip_htons>
    tcphdr->chksum = 0;
 800d57e:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800d580:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800d582:	7423      	strb	r3, [r4, #16]
 800d584:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800d586:	74a3      	strb	r3, [r4, #18]
 800d588:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800d58a:	4628      	mov	r0, r5
 800d58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d590:	4b03      	ldr	r3, [pc, #12]	; (800d5a0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800d592:	f240 7223 	movw	r2, #1827	; 0x723
 800d596:	4903      	ldr	r1, [pc, #12]	; (800d5a4 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800d598:	4803      	ldr	r0, [pc, #12]	; (800d5a8 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800d59a:	f004 ffa9 	bl	80124f0 <iprintf>
 800d59e:	e7d6      	b.n	800d54e <tcp_output_alloc_header_common.constprop.0+0x2e>
 800d5a0:	08016ae8 	.word	0x08016ae8
 800d5a4:	08016bac 	.word	0x08016bac
 800d5a8:	08014fe0 	.word	0x08014fe0

0800d5ac <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d5ac:	b570      	push	{r4, r5, r6, lr}
 800d5ae:	460d      	mov	r5, r1
 800d5b0:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d5b2:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d5b4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d5b6:	b190      	cbz	r0, 800d5de <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d5b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d5ba:	2210      	movs	r2, #16
 800d5bc:	8b21      	ldrh	r1, [r4, #24]
 800d5be:	9302      	str	r3, [sp, #8]
 800d5c0:	e9cd 1200 	strd	r1, r2, [sp]
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	8ae3      	ldrh	r3, [r4, #22]
 800d5ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d5cc:	f7ff ffa8 	bl	800d520 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d5d0:	b118      	cbz	r0, 800d5da <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d5d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d5d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5d6:	4413      	add	r3, r2
 800d5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800d5da:	b004      	add	sp, #16
 800d5dc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d5de:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <tcp_output_alloc_header.constprop.0+0x44>)
 800d5e0:	f240 7242 	movw	r2, #1858	; 0x742
 800d5e4:	4903      	ldr	r1, [pc, #12]	; (800d5f4 <tcp_output_alloc_header.constprop.0+0x48>)
 800d5e6:	4804      	ldr	r0, [pc, #16]	; (800d5f8 <tcp_output_alloc_header.constprop.0+0x4c>)
 800d5e8:	f004 ff82 	bl	80124f0 <iprintf>
 800d5ec:	e7e4      	b.n	800d5b8 <tcp_output_alloc_header.constprop.0+0xc>
 800d5ee:	bf00      	nop
 800d5f0:	08016ae8 	.word	0x08016ae8
 800d5f4:	08016bdc 	.word	0x08016bdc
 800d5f8:	08014fe0 	.word	0x08014fe0

0800d5fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fe:	4604      	mov	r4, r0
 800d600:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d602:	460d      	mov	r5, r1
{
 800d604:	4617      	mov	r7, r2
 800d606:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d608:	b321      	cbz	r1, 800d654 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d60a:	b35c      	cbz	r4, 800d664 <tcp_output_control_segment+0x68>
 800d60c:	7a20      	ldrb	r0, [r4, #8]
 800d60e:	b9a8      	cbnz	r0, 800d63c <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800d610:	4630      	mov	r0, r6
 800d612:	f002 f94f 	bl	800f8b4 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800d616:	b1a8      	cbz	r0, 800d644 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d618:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800d61a:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d61c:	9400      	str	r4, [sp, #0]
 800d61e:	2406      	movs	r4, #6
 800d620:	4632      	mov	r2, r6
 800d622:	4639      	mov	r1, r7
 800d624:	9002      	str	r0, [sp, #8]
 800d626:	4628      	mov	r0, r5
 800d628:	9401      	str	r4, [sp, #4]
 800d62a:	f002 fad9 	bl	800fbe0 <ip4_output_if>
 800d62e:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d630:	4628      	mov	r0, r5
 800d632:	f7fc fd99 	bl	800a168 <pbuf_free>
  return err;
}
 800d636:	4620      	mov	r0, r4
 800d638:	b005      	add	sp, #20
 800d63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800d63c:	f7fc fbe2 	bl	8009e04 <netif_get_by_index>
  if (netif == NULL) {
 800d640:	2800      	cmp	r0, #0
 800d642:	d1e9      	bne.n	800d618 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800d644:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800d648:	4628      	mov	r0, r5
 800d64a:	f7fc fd8d 	bl	800a168 <pbuf_free>
}
 800d64e:	4620      	mov	r0, r4
 800d650:	b005      	add	sp, #20
 800d652:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d654:	4b07      	ldr	r3, [pc, #28]	; (800d674 <tcp_output_control_segment+0x78>)
 800d656:	f240 7287 	movw	r2, #1927	; 0x787
 800d65a:	4907      	ldr	r1, [pc, #28]	; (800d678 <tcp_output_control_segment+0x7c>)
 800d65c:	4807      	ldr	r0, [pc, #28]	; (800d67c <tcp_output_control_segment+0x80>)
 800d65e:	f004 ff47 	bl	80124f0 <iprintf>
 800d662:	e7d2      	b.n	800d60a <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800d664:	4630      	mov	r0, r6
 800d666:	f002 f925 	bl	800f8b4 <ip4_route>
  if (netif == NULL) {
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0ea      	beq.n	800d644 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800d66e:	23ff      	movs	r3, #255	; 0xff
 800d670:	e7d4      	b.n	800d61c <tcp_output_control_segment+0x20>
 800d672:	bf00      	nop
 800d674:	08016ae8 	.word	0x08016ae8
 800d678:	08016c04 	.word	0x08016c04
 800d67c:	08014fe0 	.word	0x08014fe0

0800d680 <tcp_write>:
{
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800d684:	2400      	movs	r4, #0
{
 800d686:	b091      	sub	sp, #68	; 0x44
 800d688:	9107      	str	r1, [sp, #28]
 800d68a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 800d68c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d690:	2800      	cmp	r0, #0
 800d692:	f000 8300 	beq.w	800dc96 <tcp_write+0x616>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d696:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d69a:	4692      	mov	sl, r2
 800d69c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800d69e:	4681      	mov	r9, r0
 800d6a0:	085b      	lsrs	r3, r3, #1
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	bf28      	it	cs
 800d6a6:	4613      	movcs	r3, r2
 800d6a8:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	bf08      	it	eq
 800d6ae:	4693      	moveq	fp, r2
  LWIP_ASSERT_CORE_LOCKED();
 800d6b0:	f7f7 fb6c 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d6b4:	9b07      	ldr	r3, [sp, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 82e1 	beq.w	800dc7e <tcp_write+0x5fe>
  if ((pcb->state != ESTABLISHED) &&
 800d6bc:	f899 3014 	ldrb.w	r3, [r9, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d6c0:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800d6c2:	2a02      	cmp	r2, #2
 800d6c4:	d902      	bls.n	800d6cc <tcp_write+0x4c>
 800d6c6:	2b07      	cmp	r3, #7
 800d6c8:	f040 829d 	bne.w	800dc06 <tcp_write+0x586>
  } else if (len == 0) {
 800d6cc:	f1ba 0f00 	cmp.w	sl, #0
 800d6d0:	f000 80ec 	beq.w	800d8ac <tcp_write+0x22c>
  if (len > pcb->snd_buf) {
 800d6d4:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800d6d8:	4553      	cmp	r3, sl
 800d6da:	f0c0 82b7 	bcc.w	800dc4c <tcp_write+0x5cc>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d6de:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800d6e2:	2e0f      	cmp	r6, #15
 800d6e4:	f200 82b2 	bhi.w	800dc4c <tcp_write+0x5cc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d6e8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800d6ec:	2e00      	cmp	r6, #0
 800d6ee:	f000 80d3 	beq.w	800d898 <tcp_write+0x218>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f040 80dc 	bne.w	800d8b0 <tcp_write+0x230>
 800d6f8:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800d6fc:	f1b8 0f00 	cmp.w	r8, #0
 800d700:	f000 8264 	beq.w	800dbcc <tcp_write+0x54c>
 800d704:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d706:	461a      	mov	r2, r3
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1fb      	bne.n	800d706 <tcp_write+0x86>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d70e:	7a94      	ldrb	r4, [r2, #10]
 800d710:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d712:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d714:	00a4      	lsls	r4, r4, #2
 800d716:	920b      	str	r2, [sp, #44]	; 0x2c
 800d718:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d71c:	191a      	adds	r2, r3, r4
 800d71e:	4593      	cmp	fp, r2
 800d720:	f2c0 81a7 	blt.w	800da72 <tcp_write+0x3f2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d724:	ebab 0404 	sub.w	r4, fp, r4
 800d728:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 800d72a:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d72e:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 800d730:	930a      	str	r3, [sp, #40]	; 0x28
 800d732:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 80cf 	beq.w	800d8da <tcp_write+0x25a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d73c:	42a3      	cmp	r3, r4
 800d73e:	f200 818b 	bhi.w	800da58 <tcp_write+0x3d8>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d742:	45a2      	cmp	sl, r4
 800d744:	4653      	mov	r3, sl
 800d746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d748:	bf28      	it	cs
 800d74a:	4623      	movcs	r3, r4
 800d74c:	4293      	cmp	r3, r2
 800d74e:	bf28      	it	cs
 800d750:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 800d752:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 800d754:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d756:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800d758:	b292      	uxth	r2, r2
      space -= oversize_used;
 800d75a:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800d75c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d760:	2a00      	cmp	r2, #0
 800d762:	f000 8184 	beq.w	800da6e <tcp_write+0x3ee>
 800d766:	459a      	cmp	sl, r3
 800d768:	f000 8181 	beq.w	800da6e <tcp_write+0x3ee>
 800d76c:	4bb2      	ldr	r3, [pc, #712]	; (800da38 <tcp_write+0x3b8>)
 800d76e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d772:	49b2      	ldr	r1, [pc, #712]	; (800da3c <tcp_write+0x3bc>)
 800d774:	48b2      	ldr	r0, [pc, #712]	; (800da40 <tcp_write+0x3c0>)
 800d776:	f004 febb 	bl	80124f0 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d77a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d77c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d77e:	459a      	cmp	sl, r3
 800d780:	f200 80b0 	bhi.w	800d8e4 <tcp_write+0x264>
  struct pbuf *concat_p = NULL;
 800d784:	2300      	movs	r3, #0
 800d786:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d788:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 800d78a:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 800d78c:	45a2      	cmp	sl, r4
 800d78e:	f240 80ee 	bls.w	800d96e <tcp_write+0x2ee>
 800d792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d794:	f04f 0800 	mov.w	r8, #0
 800d798:	f003 0301 	and.w	r3, r3, #1
 800d79c:	f8cd 8014 	str.w	r8, [sp, #20]
 800d7a0:	9308      	str	r3, [sp, #32]
 800d7a2:	4643      	mov	r3, r8
 800d7a4:	46d8      	mov	r8, fp
 800d7a6:	469b      	mov	fp, r3
 800d7a8:	e042      	b.n	800d830 <tcp_write+0x1b0>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d7aa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f040 80f0 	bne.w	800d994 <tcp_write+0x314>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	2036      	movs	r0, #54	; 0x36
 800d7ba:	f7fc fd45 	bl	800a248 <pbuf_alloc>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	f000 8100 	beq.w	800d9c4 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d7c4:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d7c6:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d7c8:	9006      	str	r0, [sp, #24]
 800d7ca:	4422      	add	r2, r4
 800d7cc:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d7ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d7d2:	2036      	movs	r0, #54	; 0x36
 800d7d4:	f7fc fd38 	bl	800a248 <pbuf_alloc>
 800d7d8:	9b06      	ldr	r3, [sp, #24]
 800d7da:	4607      	mov	r7, r0
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	f000 8196 	beq.w	800db0e <tcp_write+0x48e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	f7fc fe60 	bl	800a4a8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800d7e8:	4638      	mov	r0, r7
 800d7ea:	f7fc fe33 	bl	800a454 <pbuf_clen>
 800d7ee:	4430      	add	r0, r6
 800d7f0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d7f2:	2e10      	cmp	r6, #16
 800d7f4:	d84a      	bhi.n	800d88c <tcp_write+0x20c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d7f6:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4648      	mov	r0, r9
 800d800:	4423      	add	r3, r4
 800d802:	9200      	str	r2, [sp, #0]
 800d804:	f7ff fe12 	bl	800d42c <tcp_create_segment>
 800d808:	4607      	mov	r7, r0
 800d80a:	2800      	cmp	r0, #0
 800d80c:	f000 80da 	beq.w	800d9c4 <tcp_write+0x344>
    if (queue == NULL) {
 800d810:	9b05      	ldr	r3, [sp, #20]
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 80a3 	beq.w	800d95e <tcp_write+0x2de>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d818:	f1bb 0f00 	cmp.w	fp, #0
 800d81c:	f000 80c2 	beq.w	800d9a4 <tcp_write+0x324>
    pos += seglen;
 800d820:	4425      	add	r5, r4
      prev_seg->next = seg;
 800d822:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 800d826:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800d828:	45a2      	cmp	sl, r4
 800d82a:	f240 809e 	bls.w	800d96a <tcp_write+0x2ea>
 800d82e:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 800d830:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d834:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d836:	b2ad      	uxth	r5, r5
 800d838:	4545      	cmp	r5, r8
 800d83a:	bf28      	it	cs
 800d83c:	4645      	movcs	r5, r8
 800d83e:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d840:	2b00      	cmp	r3, #0
 800d842:	d0b2      	beq.n	800d7aa <tcp_write+0x12a>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d846:	4642      	mov	r2, r8
 800d848:	4629      	mov	r1, r5
 800d84a:	2036      	movs	r0, #54	; 0x36
 800d84c:	e9cd 9300 	strd	r9, r3, [sp]
 800d850:	9b05      	ldr	r3, [sp, #20]
 800d852:	fab3 f383 	clz	r3, r3
 800d856:	095b      	lsrs	r3, r3, #5
 800d858:	9302      	str	r3, [sp, #8]
 800d85a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800d85e:	f7ff fd95 	bl	800d38c <tcp_pbuf_prealloc>
 800d862:	4607      	mov	r7, r0
 800d864:	2800      	cmp	r0, #0
 800d866:	f000 80ad 	beq.w	800d9c4 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d86a:	8943      	ldrh	r3, [r0, #10]
 800d86c:	42ab      	cmp	r3, r5
 800d86e:	f0c0 80a1 	bcc.w	800d9b4 <tcp_write+0x334>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d872:	9b07      	ldr	r3, [sp, #28]
 800d874:	462a      	mov	r2, r5
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	1919      	adds	r1, r3, r4
 800d87a:	f004 fffa 	bl	8012872 <memcpy>
    queuelen += pbuf_clen(p);
 800d87e:	4638      	mov	r0, r7
 800d880:	f7fc fde8 	bl	800a454 <pbuf_clen>
 800d884:	4430      	add	r0, r6
 800d886:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d888:	2e10      	cmp	r6, #16
 800d88a:	d9b4      	bls.n	800d7f6 <tcp_write+0x176>
      pbuf_free(p);
 800d88c:	4638      	mov	r0, r7
 800d88e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d892:	f7fc fc69 	bl	800a168 <pbuf_free>
      goto memerr;
 800d896:	e097      	b.n	800d9c8 <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 80b6 	beq.w	800da0a <tcp_write+0x38a>
 800d89e:	4b66      	ldr	r3, [pc, #408]	; (800da38 <tcp_write+0x3b8>)
 800d8a0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800d8a4:	4967      	ldr	r1, [pc, #412]	; (800da44 <tcp_write+0x3c4>)
 800d8a6:	4866      	ldr	r0, [pc, #408]	; (800da40 <tcp_write+0x3c0>)
 800d8a8:	f004 fe22 	bl	80124f0 <iprintf>
  queuelen = pcb->snd_queuelen;
 800d8ac:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800d8b0:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800d8b4:	f1b8 0f00 	cmp.w	r8, #0
 800d8b8:	f47f af24 	bne.w	800d704 <tcp_write+0x84>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d8bc:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f040 80ac 	bne.w	800da1e <tcp_write+0x39e>
  while (pos < len) {
 800d8c6:	f1ba 0f00 	cmp.w	sl, #0
 800d8ca:	f000 81c8 	beq.w	800dc5e <tcp_write+0x5de>
 800d8ce:	2400      	movs	r4, #0
 800d8d0:	940d      	str	r4, [sp, #52]	; 0x34
 800d8d2:	940c      	str	r4, [sp, #48]	; 0x30
 800d8d4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800d8d8:	e75b      	b.n	800d792 <tcp_write+0x112>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d8da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8de:	459a      	cmp	sl, r3
 800d8e0:	f67f af50 	bls.w	800d784 <tcp_write+0x104>
 800d8e4:	2c00      	cmp	r4, #0
 800d8e6:	f43f af4d 	beq.w	800d784 <tcp_write+0x104>
 800d8ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8ec:	8912      	ldrh	r2, [r2, #8]
 800d8ee:	920d      	str	r2, [sp, #52]	; 0x34
 800d8f0:	2a00      	cmp	r2, #0
 800d8f2:	f000 809c 	beq.w	800da2e <tcp_write+0x3ae>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d8f6:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d8fc:	42a7      	cmp	r7, r4
 800d8fe:	bfa8      	it	ge
 800d900:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d902:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d904:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d906:	f100 8188 	bmi.w	800dc1a <tcp_write+0x59a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	4613      	mov	r3, r2
 800d910:	6812      	ldr	r2, [r2, #0]
 800d912:	2a00      	cmp	r2, #0
 800d914:	d1fb      	bne.n	800d90e <tcp_write+0x28e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d916:	920c      	str	r2, [sp, #48]	; 0x30
 800d918:	7b1a      	ldrb	r2, [r3, #12]
 800d91a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800d91e:	d106      	bne.n	800d92e <tcp_write+0x2ae>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d920:	895a      	ldrh	r2, [r3, #10]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d926:	9a07      	ldr	r2, [sp, #28]
 800d928:	429a      	cmp	r2, r3
 800d92a:	f000 8168 	beq.w	800dbfe <tcp_write+0x57e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d92e:	2201      	movs	r2, #1
 800d930:	4629      	mov	r1, r5
 800d932:	2000      	movs	r0, #0
 800d934:	f7fc fc88 	bl	800a248 <pbuf_alloc>
 800d938:	900c      	str	r0, [sp, #48]	; 0x30
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f000 813f 	beq.w	800dbbe <tcp_write+0x53e>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d940:	9b07      	ldr	r3, [sp, #28]
 800d942:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d944:	440b      	add	r3, r1
 800d946:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800d948:	f7fc fd84 	bl	800a454 <pbuf_clen>
 800d94c:	4430      	add	r0, r6
  u16_t extendlen = 0;
 800d94e:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 800d950:	b286      	uxth	r6, r0
  u16_t extendlen = 0;
 800d952:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 800d954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d956:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d958:	18ec      	adds	r4, r5, r3
 800d95a:	b2a4      	uxth	r4, r4
 800d95c:	e716      	b.n	800d78c <tcp_write+0x10c>
    pos += seglen;
 800d95e:	4425      	add	r5, r4
 800d960:	9005      	str	r0, [sp, #20]
 800d962:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800d964:	45a2      	cmp	sl, r4
 800d966:	f63f af62 	bhi.w	800d82e <tcp_write+0x1ae>
 800d96a:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 800d96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 80dc 	beq.w	800db2e <tcp_write+0x4ae>
    for (p = last_unsent->p; p; p = p->next) {
 800d976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d978:	6854      	ldr	r4, [r2, #4]
 800d97a:	2c00      	cmp	r4, #0
 800d97c:	f000 8091 	beq.w	800daa2 <tcp_write+0x422>
 800d980:	469b      	mov	fp, r3
 800d982:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 800d984:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800d986:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 800d988:	445b      	add	r3, fp
 800d98a:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800d98c:	2a00      	cmp	r2, #0
 800d98e:	d07a      	beq.n	800da86 <tcp_write+0x406>
      pos += seglen;
 800d990:	4614      	mov	r4, r2
 800d992:	e7f7      	b.n	800d984 <tcp_write+0x304>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d994:	4b28      	ldr	r3, [pc, #160]	; (800da38 <tcp_write+0x3b8>)
 800d996:	f240 2271 	movw	r2, #625	; 0x271
 800d99a:	492b      	ldr	r1, [pc, #172]	; (800da48 <tcp_write+0x3c8>)
 800d99c:	4828      	ldr	r0, [pc, #160]	; (800da40 <tcp_write+0x3c0>)
 800d99e:	f004 fda7 	bl	80124f0 <iprintf>
 800d9a2:	e707      	b.n	800d7b4 <tcp_write+0x134>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d9a4:	4b24      	ldr	r3, [pc, #144]	; (800da38 <tcp_write+0x3b8>)
 800d9a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d9aa:	4928      	ldr	r1, [pc, #160]	; (800da4c <tcp_write+0x3cc>)
 800d9ac:	4824      	ldr	r0, [pc, #144]	; (800da40 <tcp_write+0x3c0>)
 800d9ae:	f004 fd9f 	bl	80124f0 <iprintf>
 800d9b2:	e735      	b.n	800d820 <tcp_write+0x1a0>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d9b4:	4b20      	ldr	r3, [pc, #128]	; (800da38 <tcp_write+0x3b8>)
 800d9b6:	f240 2266 	movw	r2, #614	; 0x266
 800d9ba:	4925      	ldr	r1, [pc, #148]	; (800da50 <tcp_write+0x3d0>)
 800d9bc:	4820      	ldr	r0, [pc, #128]	; (800da40 <tcp_write+0x3c0>)
 800d9be:	f004 fd97 	bl	80124f0 <iprintf>
 800d9c2:	e756      	b.n	800d872 <tcp_write+0x1f2>
 800d9c4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d9c8:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800d9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800d9d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9d6:	b113      	cbz	r3, 800d9de <tcp_write+0x35e>
    pbuf_free(concat_p);
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fc fbc5 	bl	800a168 <pbuf_free>
  if (queue != NULL) {
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	d002      	beq.n	800d9ea <tcp_write+0x36a>
    tcp_segs_free(queue);
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	f7fd f829 	bl	800aa3c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800d9ea:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800d9ee:	b13b      	cbz	r3, 800da00 <tcp_write+0x380>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d9f0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800d9f4:	b923      	cbnz	r3, 800da00 <tcp_write+0x380>
 800d9f6:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	f000 808d 	beq.w	800db1a <tcp_write+0x49a>
  return ERR_MEM;
 800da00:	f04f 30ff 	mov.w	r0, #4294967295
}
 800da04:	b011      	add	sp, #68	; 0x44
 800da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800da0a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f47f af45 	bne.w	800d89e <tcp_write+0x21e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800da14:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f43f af58 	beq.w	800d8ce <tcp_write+0x24e>
 800da1e:	4b06      	ldr	r3, [pc, #24]	; (800da38 <tcp_write+0x3b8>)
 800da20:	f240 224a 	movw	r2, #586	; 0x24a
 800da24:	490b      	ldr	r1, [pc, #44]	; (800da54 <tcp_write+0x3d4>)
 800da26:	4806      	ldr	r0, [pc, #24]	; (800da40 <tcp_write+0x3c0>)
 800da28:	f004 fd62 	bl	80124f0 <iprintf>
 800da2c:	e74b      	b.n	800d8c6 <tcp_write+0x246>
  struct pbuf *concat_p = NULL;
 800da2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800da32:	930c      	str	r3, [sp, #48]	; 0x30
 800da34:	e6ad      	b.n	800d792 <tcp_write+0x112>
 800da36:	bf00      	nop
 800da38:	08016ae8 	.word	0x08016ae8
 800da3c:	08016d24 	.word	0x08016d24
 800da40:	08014fe0 	.word	0x08014fe0
 800da44:	08016cb8 	.word	0x08016cb8
 800da48:	08016de0 	.word	0x08016de0
 800da4c:	08016df0 	.word	0x08016df0
 800da50:	08016da0 	.word	0x08016da0
 800da54:	08016d70 	.word	0x08016d70
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800da58:	4b94      	ldr	r3, [pc, #592]	; (800dcac <tcp_write+0x62c>)
 800da5a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800da5e:	4994      	ldr	r1, [pc, #592]	; (800dcb0 <tcp_write+0x630>)
 800da60:	4894      	ldr	r0, [pc, #592]	; (800dcb4 <tcp_write+0x634>)
 800da62:	f004 fd45 	bl	80124f0 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800da66:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800da6a:	930a      	str	r3, [sp, #40]	; 0x28
 800da6c:	e669      	b.n	800d742 <tcp_write+0xc2>
 800da6e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800da70:	e734      	b.n	800d8dc <tcp_write+0x25c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800da72:	4b8e      	ldr	r3, [pc, #568]	; (800dcac <tcp_write+0x62c>)
 800da74:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800da78:	498f      	ldr	r1, [pc, #572]	; (800dcb8 <tcp_write+0x638>)
 800da7a:	488e      	ldr	r0, [pc, #568]	; (800dcb4 <tcp_write+0x634>)
 800da7c:	f004 fd38 	bl	80124f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800da80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da82:	891b      	ldrh	r3, [r3, #8]
 800da84:	e64e      	b.n	800d724 <tcp_write+0xa4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800da86:	8963      	ldrh	r3, [r4, #10]
 800da88:	465a      	mov	r2, fp
 800da8a:	6860      	ldr	r0, [r4, #4]
 800da8c:	4629      	mov	r1, r5
 800da8e:	4418      	add	r0, r3
 800da90:	f004 feef 	bl	8012872 <memcpy>
        p->len += oversize_used;
 800da94:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800da96:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 800da98:	445b      	add	r3, fp
 800da9a:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800da9c:	2a00      	cmp	r2, #0
 800da9e:	f47f af77 	bne.w	800d990 <tcp_write+0x310>
    last_unsent->len += oversize_used;
 800daa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800daa6:	8913      	ldrh	r3, [r2, #8]
 800daa8:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 800daaa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 800daae:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800dab0:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800dab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d061      	beq.n	800db7e <tcp_write+0x4fe>
    pbuf_cat(last_unsent->p, concat_p);
 800daba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dabc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dabe:	6860      	ldr	r0, [r4, #4]
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7fc fcf1 	bl	800a4a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dac6:	892a      	ldrh	r2, [r5, #8]
 800dac8:	8923      	ldrh	r3, [r4, #8]
 800daca:	4413      	add	r3, r2
 800dacc:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800dace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dad0:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 800dad4:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 800dad8:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 800dadc:	4453      	add	r3, sl
 800dade:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 800dae2:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800dae6:	eba3 030a 	sub.w	r3, r3, sl
 800daea:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 800daee:	b11e      	cbz	r6, 800daf8 <tcp_write+0x478>
    LWIP_ASSERT("tcp_write: valid queue length",
 800daf0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d036      	beq.n	800db66 <tcp_write+0x4e6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800daf8:	b12f      	cbz	r7, 800db06 <tcp_write+0x486>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	b11b      	cbz	r3, 800db06 <tcp_write+0x486>
 800dafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db00:	f012 0502 	ands.w	r5, r2, #2
 800db04:	d025      	beq.n	800db52 <tcp_write+0x4d2>
  return ERR_OK;
 800db06:	2000      	movs	r0, #0
}
 800db08:	b011      	add	sp, #68	; 0x44
 800db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 800db0e:	4618      	mov	r0, r3
 800db10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800db14:	f7fc fb28 	bl	800a168 <pbuf_free>
        goto memerr;
 800db18:	e756      	b.n	800d9c8 <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800db1a:	4b64      	ldr	r3, [pc, #400]	; (800dcac <tcp_write+0x62c>)
 800db1c:	f240 3227 	movw	r2, #807	; 0x327
 800db20:	4966      	ldr	r1, [pc, #408]	; (800dcbc <tcp_write+0x63c>)
 800db22:	4864      	ldr	r0, [pc, #400]	; (800dcb4 <tcp_write+0x634>)
 800db24:	f004 fce4 	bl	80124f0 <iprintf>
  return ERR_MEM;
 800db28:	f04f 30ff 	mov.w	r0, #4294967295
 800db2c:	e76a      	b.n	800da04 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800db2e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800db32:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800db36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d051      	beq.n	800dbe0 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800db3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1bb      	bne.n	800daba <tcp_write+0x43a>
 800db42:	4b5a      	ldr	r3, [pc, #360]	; (800dcac <tcp_write+0x62c>)
 800db44:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800db48:	495d      	ldr	r1, [pc, #372]	; (800dcc0 <tcp_write+0x640>)
 800db4a:	485a      	ldr	r0, [pc, #360]	; (800dcb4 <tcp_write+0x634>)
 800db4c:	f004 fcd0 	bl	80124f0 <iprintf>
 800db50:	e7b3      	b.n	800daba <tcp_write+0x43a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800db52:	2008      	movs	r0, #8
 800db54:	899c      	ldrh	r4, [r3, #12]
 800db56:	f7fb fb65 	bl	8009224 <lwip_htons>
 800db5a:	4602      	mov	r2, r0
 800db5c:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 800db5e:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800db60:	4314      	orrs	r4, r2
 800db62:	819c      	strh	r4, [r3, #12]
 800db64:	e74e      	b.n	800da04 <tcp_write+0x384>
    LWIP_ASSERT("tcp_write: valid queue length",
 800db66:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1c4      	bne.n	800daf8 <tcp_write+0x478>
 800db6e:	4b4f      	ldr	r3, [pc, #316]	; (800dcac <tcp_write+0x62c>)
 800db70:	f240 3212 	movw	r2, #786	; 0x312
 800db74:	4951      	ldr	r1, [pc, #324]	; (800dcbc <tcp_write+0x63c>)
 800db76:	484f      	ldr	r0, [pc, #316]	; (800dcb4 <tcp_write+0x634>)
 800db78:	f004 fcba 	bl	80124f0 <iprintf>
 800db7c:	e7bc      	b.n	800daf8 <tcp_write+0x478>
  } else if (extendlen > 0) {
 800db7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db80:	2b00      	cmp	r3, #0
 800db82:	d0a4      	beq.n	800dace <tcp_write+0x44e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800db84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db86:	6859      	ldr	r1, [r3, #4]
 800db88:	2900      	cmp	r1, #0
 800db8a:	d02e      	beq.n	800dbea <tcp_write+0x56a>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800db8c:	680a      	ldr	r2, [r1, #0]
 800db8e:	2a00      	cmp	r2, #0
 800db90:	d07f      	beq.n	800dc92 <tcp_write+0x612>
 800db92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800db94:	e000      	b.n	800db98 <tcp_write+0x518>
 800db96:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800db98:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800db9a:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800db9c:	4423      	add	r3, r4
 800db9e:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dba0:	4611      	mov	r1, r2
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d1f7      	bne.n	800db96 <tcp_write+0x516>
    p->tot_len += extendlen;
 800dba6:	8913      	ldrh	r3, [r2, #8]
 800dba8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dbaa:	440b      	add	r3, r1
 800dbac:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800dbae:	8953      	ldrh	r3, [r2, #10]
 800dbb0:	440b      	add	r3, r1
 800dbb2:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800dbb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbb6:	8913      	ldrh	r3, [r2, #8]
 800dbb8:	440b      	add	r3, r1
 800dbba:	8113      	strh	r3, [r2, #8]
 800dbbc:	e787      	b.n	800dace <tcp_write+0x44e>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dbbe:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800dbc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbc6:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800dbca:	e70e      	b.n	800d9ea <tcp_write+0x36a>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dbcc:	4b37      	ldr	r3, [pc, #220]	; (800dcac <tcp_write+0x62c>)
 800dbce:	f240 1255 	movw	r2, #341	; 0x155
 800dbd2:	493c      	ldr	r1, [pc, #240]	; (800dcc4 <tcp_write+0x644>)
 800dbd4:	4837      	ldr	r0, [pc, #220]	; (800dcb4 <tcp_write+0x634>)
 800dbd6:	f004 fc8b 	bl	80124f0 <iprintf>
  queuelen = pcb->snd_queuelen;
 800dbda:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800dbde:	e667      	b.n	800d8b0 <tcp_write+0x230>
  } else if (extendlen > 0) {
 800dbe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbe2:	b19b      	cbz	r3, 800dc0c <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1cc      	bne.n	800db84 <tcp_write+0x504>
 800dbea:	4b30      	ldr	r3, [pc, #192]	; (800dcac <tcp_write+0x62c>)
 800dbec:	f240 22e6 	movw	r2, #742	; 0x2e6
 800dbf0:	4935      	ldr	r1, [pc, #212]	; (800dcc8 <tcp_write+0x648>)
 800dbf2:	4830      	ldr	r0, [pc, #192]	; (800dcb4 <tcp_write+0x634>)
 800dbf4:	f004 fc7c 	bl	80124f0 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbfa:	6859      	ldr	r1, [r3, #4]
 800dbfc:	e7c6      	b.n	800db8c <tcp_write+0x50c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dbfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc00:	bba3      	cbnz	r3, 800dc6c <tcp_write+0x5ec>
          extendlen = seglen;
 800dc02:	950d      	str	r5, [sp, #52]	; 0x34
 800dc04:	e6a6      	b.n	800d954 <tcp_write+0x2d4>
    return ERR_CONN;
 800dc06:	f06f 000a 	mvn.w	r0, #10
 800dc0a:	e6fb      	b.n	800da04 <tcp_write+0x384>
  if (last_unsent == NULL) {
 800dc0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f47f af5d 	bne.w	800dace <tcp_write+0x44e>
    pcb->unsent = queue;
 800dc14:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 800dc18:	e75c      	b.n	800dad4 <tcp_write+0x454>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dc1a:	e9cd 9300 	strd	r9, r3, [sp]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	4622      	mov	r2, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	2000      	movs	r0, #0
 800dc26:	9302      	str	r3, [sp, #8]
 800dc28:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800dc2c:	f7ff fbae 	bl	800d38c <tcp_pbuf_prealloc>
 800dc30:	4603      	mov	r3, r0
 800dc32:	4604      	mov	r4, r0
 800dc34:	900c      	str	r0, [sp, #48]	; 0x30
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d0c1      	beq.n	800dbbe <tcp_write+0x53e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dc3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc3c:	462a      	mov	r2, r5
 800dc3e:	9907      	ldr	r1, [sp, #28]
 800dc40:	4401      	add	r1, r0
 800dc42:	6858      	ldr	r0, [r3, #4]
 800dc44:	f004 fe15 	bl	8012872 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800dc48:	4620      	mov	r0, r4
 800dc4a:	e67d      	b.n	800d948 <tcp_write+0x2c8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc4c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc58:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 800dc5c:	e6d2      	b.n	800da04 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800dc5e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dc62:	46d0      	mov	r8, sl
 800dc64:	4657      	mov	r7, sl
 800dc66:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800dc6a:	e7d3      	b.n	800dc14 <tcp_write+0x594>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dc6c:	4b0f      	ldr	r3, [pc, #60]	; (800dcac <tcp_write+0x62c>)
 800dc6e:	f240 2231 	movw	r2, #561	; 0x231
 800dc72:	4916      	ldr	r1, [pc, #88]	; (800dccc <tcp_write+0x64c>)
 800dc74:	480f      	ldr	r0, [pc, #60]	; (800dcb4 <tcp_write+0x634>)
 800dc76:	f004 fc3b 	bl	80124f0 <iprintf>
          extendlen = seglen;
 800dc7a:	950d      	str	r5, [sp, #52]	; 0x34
 800dc7c:	e66a      	b.n	800d954 <tcp_write+0x2d4>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <tcp_write+0x62c>)
 800dc80:	f240 12ad 	movw	r2, #429	; 0x1ad
 800dc84:	4912      	ldr	r1, [pc, #72]	; (800dcd0 <tcp_write+0x650>)
 800dc86:	480b      	ldr	r0, [pc, #44]	; (800dcb4 <tcp_write+0x634>)
 800dc88:	f004 fc32 	bl	80124f0 <iprintf>
 800dc8c:	f06f 000f 	mvn.w	r0, #15
 800dc90:	e6b8      	b.n	800da04 <tcp_write+0x384>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dc92:	460a      	mov	r2, r1
 800dc94:	e787      	b.n	800dba6 <tcp_write+0x526>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc96:	4b05      	ldr	r3, [pc, #20]	; (800dcac <tcp_write+0x62c>)
 800dc98:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800dc9c:	490d      	ldr	r1, [pc, #52]	; (800dcd4 <tcp_write+0x654>)
 800dc9e:	4805      	ldr	r0, [pc, #20]	; (800dcb4 <tcp_write+0x634>)
 800dca0:	f004 fc26 	bl	80124f0 <iprintf>
 800dca4:	f06f 000f 	mvn.w	r0, #15
 800dca8:	e6ac      	b.n	800da04 <tcp_write+0x384>
 800dcaa:	bf00      	nop
 800dcac:	08016ae8 	.word	0x08016ae8
 800dcb0:	08016d04 	.word	0x08016d04
 800dcb4:	08014fe0 	.word	0x08014fe0
 800dcb8:	08016cec 	.word	0x08016cec
 800dcbc:	08016e74 	.word	0x08016e74
 800dcc0:	08016e04 	.word	0x08016e04
 800dcc4:	08016c7c 	.word	0x08016c7c
 800dcc8:	08016e3c 	.word	0x08016e3c
 800dccc:	08016d44 	.word	0x08016d44
 800dcd0:	08016c48 	.word	0x08016c48
 800dcd4:	08016c30 	.word	0x08016c30

0800dcd8 <tcp_split_unsent_seg>:
{
 800dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dcdc:	4605      	mov	r5, r0
{
 800dcde:	b083      	sub	sp, #12
 800dce0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dce2:	2800      	cmp	r0, #0
 800dce4:	f000 80a7 	beq.w	800de36 <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 800dce8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800dcea:	b376      	cbz	r6, 800dd4a <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 800dcec:	2c00      	cmp	r4, #0
 800dcee:	f000 80b3 	beq.w	800de58 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 800dcf2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800dcf6:	45a1      	cmp	r9, r4
 800dcf8:	f240 8099 	bls.w	800de2e <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dcfc:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800dcfe:	42a3      	cmp	r3, r4
 800dd00:	d328      	bcc.n	800dd54 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 800dd02:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 800dd06:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dd0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd0e:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dd10:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800dd14:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dd18:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dd1c:	eb08 010b 	add.w	r1, r8, fp
 800dd20:	b289      	uxth	r1, r1
 800dd22:	f7fc fa91 	bl	800a248 <pbuf_alloc>
  if (p == NULL) {
 800dd26:	4607      	mov	r7, r0
 800dd28:	b178      	cbz	r0, 800dd4a <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 800dd2a:	6870      	ldr	r0, [r6, #4]
 800dd2c:	8932      	ldrh	r2, [r6, #8]
 800dd2e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dd30:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800dd32:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dd34:	4642      	mov	r2, r8
 800dd36:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800dd38:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	f7fc fc0c 	bl	800a558 <pbuf_copy_partial>
 800dd40:	4540      	cmp	r0, r8
 800dd42:	d01d      	beq.n	800dd80 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 800dd44:	4638      	mov	r0, r7
 800dd46:	f7fc fa0f 	bl	800a168 <pbuf_free>
  return ERR_MEM;
 800dd4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dd4e:	b003      	add	sp, #12
 800dd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dd54:	4b45      	ldr	r3, [pc, #276]	; (800de6c <tcp_split_unsent_seg+0x194>)
 800dd56:	f240 325b 	movw	r2, #859	; 0x35b
 800dd5a:	4945      	ldr	r1, [pc, #276]	; (800de70 <tcp_split_unsent_seg+0x198>)
 800dd5c:	4845      	ldr	r0, [pc, #276]	; (800de74 <tcp_split_unsent_seg+0x19c>)
 800dd5e:	f004 fbc7 	bl	80124f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dd62:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800dd66:	f1b9 0f00 	cmp.w	r9, #0
 800dd6a:	d1ca      	bne.n	800dd02 <tcp_split_unsent_seg+0x2a>
 800dd6c:	4b3f      	ldr	r3, [pc, #252]	; (800de6c <tcp_split_unsent_seg+0x194>)
 800dd6e:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800dd72:	4941      	ldr	r1, [pc, #260]	; (800de78 <tcp_split_unsent_seg+0x1a0>)
 800dd74:	483f      	ldr	r0, [pc, #252]	; (800de74 <tcp_split_unsent_seg+0x19c>)
 800dd76:	f004 fbbb 	bl	80124f0 <iprintf>
  remainder = useg->len - split;
 800dd7a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800dd7e:	e7c0      	b.n	800dd02 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dd80:	68f3      	ldr	r3, [r6, #12]
 800dd82:	8998      	ldrh	r0, [r3, #12]
 800dd84:	f7fb fa4e 	bl	8009224 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800dd88:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dd8c:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 800dd90:	d159      	bne.n	800de46 <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dd92:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800dd96:	f018 0f01 	tst.w	r8, #1
 800dd9a:	d003      	beq.n	800dda4 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 800dd9c:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800dda0:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dda4:	68f3      	ldr	r3, [r6, #12]
 800dda6:	6858      	ldr	r0, [r3, #4]
 800dda8:	f7fb fa40 	bl	800922c <lwip_htonl>
 800ddac:	f8cd a000 	str.w	sl, [sp]
 800ddb0:	1823      	adds	r3, r4, r0
 800ddb2:	465a      	mov	r2, fp
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f7ff fb38 	bl	800d42c <tcp_create_segment>
  if (seg == NULL) {
 800ddbc:	4682      	mov	sl, r0
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0c0      	beq.n	800dd44 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ddc2:	6870      	ldr	r0, [r6, #4]
 800ddc4:	eba4 0409 	sub.w	r4, r4, r9
 800ddc8:	f7fc fb44 	bl	800a454 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ddcc:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ddce:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800ddd2:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ddd4:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ddd6:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dddc:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dde0:	b289      	uxth	r1, r1
 800dde2:	f7fc fadf 	bl	800a3a4 <pbuf_realloc>
  useg->len -= remainder;
 800dde6:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dde8:	4640      	mov	r0, r8
  useg->len -= remainder;
 800ddea:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ddec:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 800ddee:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ddf0:	899c      	ldrh	r4, [r3, #12]
 800ddf2:	f7fb fa17 	bl	8009224 <lwip_htons>
 800ddf6:	68f3      	ldr	r3, [r6, #12]
 800ddf8:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ddfa:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ddfc:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ddfe:	f7fc fb29 	bl	800a454 <pbuf_clen>
 800de02:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800de06:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de08:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800de0c:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de10:	f7fc fb20 	bl	800a454 <pbuf_clen>
 800de14:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800de18:	4418      	add	r0, r3
  seg->next = useg->next;
 800de1a:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de1c:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800de20:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800de24:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800de28:	f8da 3000 	ldr.w	r3, [sl]
 800de2c:	b183      	cbz	r3, 800de50 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800de2e:	2000      	movs	r0, #0
}
 800de30:	b003      	add	sp, #12
 800de32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800de36:	4b0d      	ldr	r3, [pc, #52]	; (800de6c <tcp_split_unsent_seg+0x194>)
 800de38:	f240 324b 	movw	r2, #843	; 0x34b
 800de3c:	490f      	ldr	r1, [pc, #60]	; (800de7c <tcp_split_unsent_seg+0x1a4>)
 800de3e:	480d      	ldr	r0, [pc, #52]	; (800de74 <tcp_split_unsent_seg+0x19c>)
 800de40:	f004 fb56 	bl	80124f0 <iprintf>
 800de44:	e750      	b.n	800dce8 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800de46:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800de4a:	f04f 0b08 	mov.w	fp, #8
 800de4e:	e7a2      	b.n	800dd96 <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800de50:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800de52:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800de56:	e77a      	b.n	800dd4e <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800de58:	4b04      	ldr	r3, [pc, #16]	; (800de6c <tcp_split_unsent_seg+0x194>)
 800de5a:	f240 3253 	movw	r2, #851	; 0x353
 800de5e:	4908      	ldr	r1, [pc, #32]	; (800de80 <tcp_split_unsent_seg+0x1a8>)
 800de60:	4804      	ldr	r0, [pc, #16]	; (800de74 <tcp_split_unsent_seg+0x19c>)
 800de62:	f004 fb45 	bl	80124f0 <iprintf>
    return ERR_VAL;
 800de66:	f06f 0005 	mvn.w	r0, #5
 800de6a:	e770      	b.n	800dd4e <tcp_split_unsent_seg+0x76>
 800de6c:	08016ae8 	.word	0x08016ae8
 800de70:	08016edc 	.word	0x08016edc
 800de74:	08014fe0 	.word	0x08014fe0
 800de78:	08016eec 	.word	0x08016eec
 800de7c:	08016e94 	.word	0x08016e94
 800de80:	08016eb8 	.word	0x08016eb8

0800de84 <tcp_enqueue_flags>:
{
 800de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800de88:	f011 0703 	ands.w	r7, r1, #3
{
 800de8c:	b082      	sub	sp, #8
 800de8e:	460d      	mov	r5, r1
 800de90:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800de92:	d05e      	beq.n	800df52 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800de94:	2c00      	cmp	r4, #0
 800de96:	d065      	beq.n	800df64 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800de98:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800de9c:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800dea0:	d049      	beq.n	800df36 <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dea2:	2104      	movs	r1, #4
 800dea4:	2036      	movs	r0, #54	; 0x36
 800dea6:	f7fc f9cf 	bl	800a248 <pbuf_alloc>
 800deaa:	4606      	mov	r6, r0
 800deac:	2800      	cmp	r0, #0
 800deae:	d049      	beq.n	800df44 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800deb0:	8943      	ldrh	r3, [r0, #10]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d872      	bhi.n	800df9c <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800deb6:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800deba:	4b40      	ldr	r3, [pc, #256]	; (800dfbc <tcp_enqueue_flags+0x138>)
 800debc:	f240 4239 	movw	r2, #1081	; 0x439
 800dec0:	493f      	ldr	r1, [pc, #252]	; (800dfc0 <tcp_enqueue_flags+0x13c>)
 800dec2:	4840      	ldr	r0, [pc, #256]	; (800dfc4 <tcp_enqueue_flags+0x140>)
 800dec4:	f004 fb14 	bl	80124f0 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dec8:	4631      	mov	r1, r6
 800deca:	f8cd 8000 	str.w	r8, [sp]
 800dece:	462a      	mov	r2, r5
 800ded0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7ff faaa 	bl	800d42c <tcp_create_segment>
 800ded8:	4606      	mov	r6, r0
 800deda:	2800      	cmp	r0, #0
 800dedc:	d032      	beq.n	800df44 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dede:	68c3      	ldr	r3, [r0, #12]
 800dee0:	079a      	lsls	r2, r3, #30
 800dee2:	d153      	bne.n	800df8c <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dee4:	8933      	ldrh	r3, [r6, #8]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d144      	bne.n	800df74 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800deea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d04b      	beq.n	800df88 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800def0:	461a      	mov	r2, r3
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1fb      	bne.n	800def0 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800def8:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800df00:	b117      	cbz	r7, 800df08 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800df02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800df04:	3301      	adds	r3, #1
 800df06:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800df08:	07eb      	lsls	r3, r5, #31
 800df0a:	d503      	bpl.n	800df14 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800df0c:	8b63      	ldrh	r3, [r4, #26]
 800df0e:	f043 0320 	orr.w	r3, r3, #32
 800df12:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df14:	6870      	ldr	r0, [r6, #4]
 800df16:	f7fc fa9d 	bl	800a454 <pbuf_clen>
 800df1a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800df1e:	4418      	add	r0, r3
 800df20:	b280      	uxth	r0, r0
 800df22:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800df26:	b118      	cbz	r0, 800df30 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800df28:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d039      	beq.n	800dfa2 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800df2e:	2000      	movs	r0, #0
}
 800df30:	b002      	add	sp, #8
 800df32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800df36:	4641      	mov	r1, r8
 800df38:	2036      	movs	r0, #54	; 0x36
 800df3a:	f7fc f985 	bl	800a248 <pbuf_alloc>
 800df3e:	4606      	mov	r6, r0
 800df40:	2800      	cmp	r0, #0
 800df42:	d1c1      	bne.n	800dec8 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800df44:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800df46:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800df4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df4e:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800df50:	e7ee      	b.n	800df30 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800df52:	4b1a      	ldr	r3, [pc, #104]	; (800dfbc <tcp_enqueue_flags+0x138>)
 800df54:	f240 4211 	movw	r2, #1041	; 0x411
 800df58:	491b      	ldr	r1, [pc, #108]	; (800dfc8 <tcp_enqueue_flags+0x144>)
 800df5a:	481a      	ldr	r0, [pc, #104]	; (800dfc4 <tcp_enqueue_flags+0x140>)
 800df5c:	f004 fac8 	bl	80124f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800df60:	2c00      	cmp	r4, #0
 800df62:	d199      	bne.n	800de98 <tcp_enqueue_flags+0x14>
 800df64:	4b15      	ldr	r3, [pc, #84]	; (800dfbc <tcp_enqueue_flags+0x138>)
 800df66:	f240 4213 	movw	r2, #1043	; 0x413
 800df6a:	4918      	ldr	r1, [pc, #96]	; (800dfcc <tcp_enqueue_flags+0x148>)
 800df6c:	4815      	ldr	r0, [pc, #84]	; (800dfc4 <tcp_enqueue_flags+0x140>)
 800df6e:	f004 fabf 	bl	80124f0 <iprintf>
 800df72:	e791      	b.n	800de98 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800df74:	4b11      	ldr	r3, [pc, #68]	; (800dfbc <tcp_enqueue_flags+0x138>)
 800df76:	f240 4243 	movw	r2, #1091	; 0x443
 800df7a:	4915      	ldr	r1, [pc, #84]	; (800dfd0 <tcp_enqueue_flags+0x14c>)
 800df7c:	4811      	ldr	r0, [pc, #68]	; (800dfc4 <tcp_enqueue_flags+0x140>)
 800df7e:	f004 fab7 	bl	80124f0 <iprintf>
  if (pcb->unsent == NULL) {
 800df82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1b3      	bne.n	800def0 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800df88:	66e6      	str	r6, [r4, #108]	; 0x6c
 800df8a:	e7b6      	b.n	800defa <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800df8c:	4b0b      	ldr	r3, [pc, #44]	; (800dfbc <tcp_enqueue_flags+0x138>)
 800df8e:	f240 4242 	movw	r2, #1090	; 0x442
 800df92:	4910      	ldr	r1, [pc, #64]	; (800dfd4 <tcp_enqueue_flags+0x150>)
 800df94:	480b      	ldr	r0, [pc, #44]	; (800dfc4 <tcp_enqueue_flags+0x140>)
 800df96:	f004 faab 	bl	80124f0 <iprintf>
 800df9a:	e7a3      	b.n	800dee4 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800df9c:	f04f 0801 	mov.w	r8, #1
 800dfa0:	e792      	b.n	800dec8 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dfa2:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800dfa4:	2c00      	cmp	r4, #0
 800dfa6:	d1c3      	bne.n	800df30 <tcp_enqueue_flags+0xac>
 800dfa8:	4b04      	ldr	r3, [pc, #16]	; (800dfbc <tcp_enqueue_flags+0x138>)
 800dfaa:	f240 4265 	movw	r2, #1125	; 0x465
 800dfae:	490a      	ldr	r1, [pc, #40]	; (800dfd8 <tcp_enqueue_flags+0x154>)
 800dfb0:	4804      	ldr	r0, [pc, #16]	; (800dfc4 <tcp_enqueue_flags+0x140>)
 800dfb2:	f004 fa9d 	bl	80124f0 <iprintf>
  return ERR_OK;
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	e7ba      	b.n	800df30 <tcp_enqueue_flags+0xac>
 800dfba:	bf00      	nop
 800dfbc:	08016ae8 	.word	0x08016ae8
 800dfc0:	08016f74 	.word	0x08016f74
 800dfc4:	08014fe0 	.word	0x08014fe0
 800dfc8:	08016efc 	.word	0x08016efc
 800dfcc:	08016f54 	.word	0x08016f54
 800dfd0:	08016fc8 	.word	0x08016fc8
 800dfd4:	08016fb0 	.word	0x08016fb0
 800dfd8:	08016ff4 	.word	0x08016ff4

0800dfdc <tcp_send_fin>:
{
 800dfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dfde:	4606      	mov	r6, r0
 800dfe0:	b188      	cbz	r0, 800e006 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800dfe2:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800dfe4:	b14c      	cbz	r4, 800dffa <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dfe6:	4625      	mov	r5, r4
 800dfe8:	6824      	ldr	r4, [r4, #0]
 800dfea:	2c00      	cmp	r4, #0
 800dfec:	d1fb      	bne.n	800dfe6 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dfee:	68eb      	ldr	r3, [r5, #12]
 800dff0:	8998      	ldrh	r0, [r3, #12]
 800dff2:	f7fb f917 	bl	8009224 <lwip_htons>
 800dff6:	0743      	lsls	r3, r0, #29
 800dff8:	d00d      	beq.n	800e016 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dffa:	4630      	mov	r0, r6
 800dffc:	2101      	movs	r1, #1
}
 800dffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e002:	f7ff bf3f 	b.w	800de84 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <tcp_send_fin+0x58>)
 800e008:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e00c:	490a      	ldr	r1, [pc, #40]	; (800e038 <tcp_send_fin+0x5c>)
 800e00e:	480b      	ldr	r0, [pc, #44]	; (800e03c <tcp_send_fin+0x60>)
 800e010:	f004 fa6e 	bl	80124f0 <iprintf>
 800e014:	e7e5      	b.n	800dfe2 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e016:	68eb      	ldr	r3, [r5, #12]
 800e018:	2001      	movs	r0, #1
 800e01a:	899f      	ldrh	r7, [r3, #12]
 800e01c:	f7fb f902 	bl	8009224 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800e020:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e022:	4338      	orrs	r0, r7
 800e024:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e026:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e02a:	8190      	strh	r0, [r2, #12]
}
 800e02c:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800e02e:	8373      	strh	r3, [r6, #26]
}
 800e030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e032:	bf00      	nop
 800e034:	08016ae8 	.word	0x08016ae8
 800e038:	0801701c 	.word	0x0801701c
 800e03c:	08014fe0 	.word	0x08014fe0

0800e040 <tcp_rexmit_rto_prepare>:
{
 800e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e042:	4605      	mov	r5, r0
 800e044:	2800      	cmp	r0, #0
 800e046:	d032      	beq.n	800e0ae <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800e048:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800e04a:	b132      	cbz	r2, 800e05a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e04c:	6813      	ldr	r3, [r2, #0]
 800e04e:	4614      	mov	r4, r2
 800e050:	b15b      	cbz	r3, 800e06a <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800e052:	6863      	ldr	r3, [r4, #4]
 800e054:	7b9b      	ldrb	r3, [r3, #14]
 800e056:	2b01      	cmp	r3, #1
 800e058:	d003      	beq.n	800e062 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800e05a:	f06f 0305 	mvn.w	r3, #5
}
 800e05e:	4618      	mov	r0, r3
 800e060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e062:	6824      	ldr	r4, [r4, #0]
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1f3      	bne.n	800e052 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800e06a:	6863      	ldr	r3, [r4, #4]
 800e06c:	7b9b      	ldrb	r3, [r3, #14]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d1f3      	bne.n	800e05a <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800e072:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800e074:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800e076:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800e078:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800e07c:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800e07e:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e080:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800e082:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e086:	6858      	ldr	r0, [r3, #4]
 800e088:	f7fb f8d0 	bl	800922c <lwip_htonl>
 800e08c:	68e3      	ldr	r3, [r4, #12]
 800e08e:	4606      	mov	r6, r0
 800e090:	8924      	ldrh	r4, [r4, #8]
 800e092:	8998      	ldrh	r0, [r3, #12]
 800e094:	f7fb f8c6 	bl	8009224 <lwip_htons>
 800e098:	f010 0003 	ands.w	r0, r0, #3
 800e09c:	4426      	add	r6, r4
  return ERR_OK;
 800e09e:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0a0:	bf18      	it	ne
 800e0a2:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800e0a4:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0a6:	4430      	add	r0, r6
 800e0a8:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e0ae:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <tcp_rexmit_rto_prepare+0x80>)
 800e0b0:	f240 6263 	movw	r2, #1635	; 0x663
 800e0b4:	4903      	ldr	r1, [pc, #12]	; (800e0c4 <tcp_rexmit_rto_prepare+0x84>)
 800e0b6:	4804      	ldr	r0, [pc, #16]	; (800e0c8 <tcp_rexmit_rto_prepare+0x88>)
 800e0b8:	f004 fa1a 	bl	80124f0 <iprintf>
 800e0bc:	e7c4      	b.n	800e048 <tcp_rexmit_rto_prepare+0x8>
 800e0be:	bf00      	nop
 800e0c0:	08016ae8 	.word	0x08016ae8
 800e0c4:	08017038 	.word	0x08017038
 800e0c8:	08014fe0 	.word	0x08014fe0

0800e0cc <tcp_rexmit>:
{
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d031      	beq.n	800e138 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800e0d4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800e0d6:	b34e      	cbz	r6, 800e12c <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800e0d8:	6873      	ldr	r3, [r6, #4]
 800e0da:	7b9b      	ldrb	r3, [r3, #14]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d125      	bne.n	800e12c <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800e0e0:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800e0e2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800e0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800e0e8:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800e0ea:	b91b      	cbnz	r3, 800e0f4 <tcp_rexmit+0x28>
 800e0ec:	e00f      	b.n	800e10e <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800e0ee:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800e0f0:	682b      	ldr	r3, [r5, #0]
 800e0f2:	b163      	cbz	r3, 800e10e <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	6858      	ldr	r0, [r3, #4]
 800e0f8:	f7fb f898 	bl	800922c <lwip_htonl>
 800e0fc:	68f3      	ldr	r3, [r6, #12]
 800e0fe:	4604      	mov	r4, r0
 800e100:	6858      	ldr	r0, [r3, #4]
 800e102:	f7fb f893 	bl	800922c <lwip_htonl>
 800e106:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800e108:	2c00      	cmp	r4, #0
 800e10a:	dbf0      	blt.n	800e0ee <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800e10c:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800e10e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800e110:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800e112:	6833      	ldr	r3, [r6, #0]
 800e114:	b16b      	cbz	r3, 800e132 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800e116:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e11a:	2bff      	cmp	r3, #255	; 0xff
 800e11c:	d002      	beq.n	800e124 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800e11e:	3301      	adds	r3, #1
 800e120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800e124:	2300      	movs	r3, #0
  return ERR_OK;
 800e126:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800e128:	637b      	str	r3, [r7, #52]	; 0x34
}
 800e12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800e12c:	f06f 0005 	mvn.w	r0, #5
}
 800e130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800e132:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800e136:	e7ee      	b.n	800e116 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e138:	4b03      	ldr	r3, [pc, #12]	; (800e148 <tcp_rexmit+0x7c>)
 800e13a:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e13e:	4903      	ldr	r1, [pc, #12]	; (800e14c <tcp_rexmit+0x80>)
 800e140:	4803      	ldr	r0, [pc, #12]	; (800e150 <tcp_rexmit+0x84>)
 800e142:	f004 f9d5 	bl	80124f0 <iprintf>
 800e146:	e7c5      	b.n	800e0d4 <tcp_rexmit+0x8>
 800e148:	08016ae8 	.word	0x08016ae8
 800e14c:	0801705c 	.word	0x0801705c
 800e150:	08014fe0 	.word	0x08014fe0

0800e154 <tcp_rexmit_fast>:
{
 800e154:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e156:	4604      	mov	r4, r0
 800e158:	b340      	cbz	r0, 800e1ac <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e15a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e15c:	b113      	cbz	r3, 800e164 <tcp_rexmit_fast+0x10>
 800e15e:	8b63      	ldrh	r3, [r4, #26]
 800e160:	075b      	lsls	r3, r3, #29
 800e162:	d500      	bpl.n	800e166 <tcp_rexmit_fast+0x12>
}
 800e164:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e166:	4620      	mov	r0, r4
 800e168:	f7ff ffb0 	bl	800e0cc <tcp_rexmit>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d1f9      	bne.n	800e164 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e170:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e174:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e178:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e17a:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e17c:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e180:	bf28      	it	cs
 800e182:	4619      	movcs	r1, r3
 800e184:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e186:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e18a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e18e:	d902      	bls.n	800e196 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800e190:	b283      	uxth	r3, r0
 800e192:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800e196:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e198:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800e19a:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e19e:	4413      	add	r3, r2
      pcb->rtime = 0;
 800e1a0:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e1a2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e1a6:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800e1a8:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800e1aa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e1ac:	4b03      	ldr	r3, [pc, #12]	; (800e1bc <tcp_rexmit_fast+0x68>)
 800e1ae:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e1b2:	4903      	ldr	r1, [pc, #12]	; (800e1c0 <tcp_rexmit_fast+0x6c>)
 800e1b4:	4803      	ldr	r0, [pc, #12]	; (800e1c4 <tcp_rexmit_fast+0x70>)
 800e1b6:	f004 f99b 	bl	80124f0 <iprintf>
 800e1ba:	e7ce      	b.n	800e15a <tcp_rexmit_fast+0x6>
 800e1bc:	08016ae8 	.word	0x08016ae8
 800e1c0:	08017074 	.word	0x08017074
 800e1c4:	08014fe0 	.word	0x08014fe0

0800e1c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	4607      	mov	r7, r0
 800e1d0:	460e      	mov	r6, r1
 800e1d2:	4615      	mov	r5, r2
 800e1d4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e1d8:	461c      	mov	r4, r3
{
 800e1da:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800e1de:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e1e2:	b1fb      	cbz	r3, 800e224 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e1e4:	f1b8 0f00 	cmp.w	r8, #0
 800e1e8:	d026      	beq.n	800e238 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f7fb f81e 	bl	800922c <lwip_htonl>
 800e1f0:	2114      	movs	r1, #20
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f24d 0516 	movw	r5, #53270	; 0xd016
 800e1fa:	464b      	mov	r3, r9
 800e1fc:	f8cd a000 	str.w	sl, [sp]
 800e200:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800e204:	2100      	movs	r1, #0
 800e206:	f7ff f98b 	bl	800d520 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e20a:	4601      	mov	r1, r0
 800e20c:	b138      	cbz	r0, 800e21e <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e20e:	4643      	mov	r3, r8
 800e210:	4622      	mov	r2, r4
 800e212:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e214:	b004      	add	sp, #16
 800e216:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e21a:	f7ff b9ef 	b.w	800d5fc <tcp_output_control_segment>
}
 800e21e:	b004      	add	sp, #16
 800e220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e224:	4b08      	ldr	r3, [pc, #32]	; (800e248 <tcp_rst+0x80>)
 800e226:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e22a:	4908      	ldr	r1, [pc, #32]	; (800e24c <tcp_rst+0x84>)
 800e22c:	4808      	ldr	r0, [pc, #32]	; (800e250 <tcp_rst+0x88>)
 800e22e:	f004 f95f 	bl	80124f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e232:	f1b8 0f00 	cmp.w	r8, #0
 800e236:	d1d8      	bne.n	800e1ea <tcp_rst+0x22>
 800e238:	4b03      	ldr	r3, [pc, #12]	; (800e248 <tcp_rst+0x80>)
 800e23a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e23e:	4905      	ldr	r1, [pc, #20]	; (800e254 <tcp_rst+0x8c>)
 800e240:	4803      	ldr	r0, [pc, #12]	; (800e250 <tcp_rst+0x88>)
 800e242:	f004 f955 	bl	80124f0 <iprintf>
 800e246:	e7d0      	b.n	800e1ea <tcp_rst+0x22>
 800e248:	08016ae8 	.word	0x08016ae8
 800e24c:	08017094 	.word	0x08017094
 800e250:	08014fe0 	.word	0x08014fe0
 800e254:	080170b0 	.word	0x080170b0

0800e258 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e258:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e25a:	4604      	mov	r4, r0
 800e25c:	b1c8      	cbz	r0, 800e292 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e25e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e260:	f7fa ffe4 	bl	800922c <lwip_htonl>
 800e264:	2100      	movs	r1, #0
 800e266:	4602      	mov	r2, r0
 800e268:	4620      	mov	r0, r4
 800e26a:	f7ff f99f 	bl	800d5ac <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e26e:	4601      	mov	r1, r0
 800e270:	b1b8      	cbz	r0, 800e2a2 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e272:	1d23      	adds	r3, r4, #4
 800e274:	4622      	mov	r2, r4
 800e276:	4620      	mov	r0, r4
 800e278:	f7ff f9c0 	bl	800d5fc <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e27c:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800e27e:	b920      	cbnz	r0, 800e28a <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e280:	f023 0303 	bic.w	r3, r3, #3
 800e284:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e286:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800e288:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e28a:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e28e:	8363      	strh	r3, [r4, #26]
}
 800e290:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e292:	4b07      	ldr	r3, [pc, #28]	; (800e2b0 <tcp_send_empty_ack+0x58>)
 800e294:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e298:	4906      	ldr	r1, [pc, #24]	; (800e2b4 <tcp_send_empty_ack+0x5c>)
 800e29a:	4807      	ldr	r0, [pc, #28]	; (800e2b8 <tcp_send_empty_ack+0x60>)
 800e29c:	f004 f928 	bl	80124f0 <iprintf>
 800e2a0:	e7dd      	b.n	800e25e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2a2:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800e2a4:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2a8:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800e2ac:	e7eb      	b.n	800e286 <tcp_send_empty_ack+0x2e>
 800e2ae:	bf00      	nop
 800e2b0:	08016ae8 	.word	0x08016ae8
 800e2b4:	080170cc 	.word	0x080170cc
 800e2b8:	08014fe0 	.word	0x08014fe0

0800e2bc <tcp_output>:
{
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800e2c4:	f7f6 fd62 	bl	8004d8c <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e2c8:	2c00      	cmp	r4, #0
 800e2ca:	f000 81b2 	beq.w	800e632 <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e2ce:	7d23      	ldrb	r3, [r4, #20]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	f000 8169 	beq.w	800e5a8 <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 800e2d6:	4bae      	ldr	r3, [pc, #696]	; (800e590 <tcp_output+0x2d4>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	42a3      	cmp	r3, r4
 800e2dc:	f000 8170 	beq.w	800e5c0 <tcp_output+0x304>
  seg = pcb->unsent;
 800e2e0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e2e2:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800e2e6:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 800e2ea:	b325      	cbz	r5, 800e336 <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e2ec:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e2ee:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	f040 81a5 	bne.w	800e642 <tcp_output+0x386>
    return ip_route(src, dst);
 800e2f8:	4648      	mov	r0, r9
 800e2fa:	f001 fadb 	bl	800f8b4 <ip4_route>
 800e2fe:	4680      	mov	r8, r0
  if (netif == NULL) {
 800e300:	f1b8 0f00 	cmp.w	r8, #0
 800e304:	f000 81af 	beq.w	800e666 <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	b913      	cbnz	r3, 800e312 <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e30c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e310:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e312:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e314:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e316:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e318:	bf28      	it	cs
 800e31a:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e31c:	f7fa ff86 	bl	800922c <lwip_htonl>
 800e320:	892b      	ldrh	r3, [r5, #8]
 800e322:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e324:	1a9b      	subs	r3, r3, r2
 800e326:	4418      	add	r0, r3
 800e328:	42b0      	cmp	r0, r6
 800e32a:	d90f      	bls.n	800e34c <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e32c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800e330:	42b3      	cmp	r3, r6
 800e332:	f000 814f 	beq.w	800e5d4 <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 800e336:	8b62      	ldrh	r2, [r4, #26]
 800e338:	0791      	lsls	r1, r2, #30
 800e33a:	f100 8145 	bmi.w	800e5c8 <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e33e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800e342:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e344:	8362      	strh	r2, [r4, #26]
}
 800e346:	b005      	add	sp, #20
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800e352:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 814d 	beq.w	800e5f4 <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 800e35a:	461f      	mov	r7, r3
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f000 80af 	beq.w	800e4c2 <tcp_output+0x206>
 800e364:	461f      	mov	r7, r3
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1f6      	bne.n	800e35a <tcp_output+0x9e>
 800e36c:	e0a9      	b.n	800e4c2 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e36e:	68eb      	ldr	r3, [r5, #12]
 800e370:	2010      	movs	r0, #16
 800e372:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800e376:	f7fa ff55 	bl	8009224 <lwip_htons>
 800e37a:	ea4a 0000 	orr.w	r0, sl, r0
 800e37e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e382:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800e386:	686b      	ldr	r3, [r5, #4]
 800e388:	7b9b      	ldrb	r3, [r3, #14]
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d154      	bne.n	800e438 <tcp_output+0x17c>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e38e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e390:	f7fa ff4c 	bl	800922c <lwip_htonl>
 800e394:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e398:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e39a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e39e:	f7fa ff41 	bl	8009224 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e3a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800e3a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e3a6:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e3aa:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e3ac:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e3b0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e3b2:	7aab      	ldrb	r3, [r5, #10]
 800e3b4:	07db      	lsls	r3, r3, #31
 800e3b6:	f100 80c2 	bmi.w	800e53e <tcp_output+0x282>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e3ba:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800e3be:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	da01      	bge.n	800e3ca <tcp_output+0x10e>
    pcb->rtime = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800e3ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 80ab 	beq.w	800e528 <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e3d2:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800e3d4:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e3d6:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800e3d8:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e3da:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800e3de:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e3e2:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800e3e4:	1ac9      	subs	r1, r1, r3
 800e3e6:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800e3e8:	8901      	ldrh	r1, [r0, #8]
 800e3ea:	1acb      	subs	r3, r1, r3
 800e3ec:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800e3ee:	f88a 2010 	strb.w	r2, [sl, #16]
 800e3f2:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e3f6:	7aab      	ldrb	r3, [r5, #10]
 800e3f8:	f013 0f01 	tst.w	r3, #1
 800e3fc:	bf14      	ite	ne
 800e3fe:	2318      	movne	r3, #24
 800e400:	2314      	moveq	r3, #20
 800e402:	449a      	add	sl, r3
 800e404:	45d3      	cmp	fp, sl
 800e406:	d007      	beq.n	800e418 <tcp_output+0x15c>
 800e408:	4b62      	ldr	r3, [pc, #392]	; (800e594 <tcp_output+0x2d8>)
 800e40a:	f240 621c 	movw	r2, #1564	; 0x61c
 800e40e:	4962      	ldr	r1, [pc, #392]	; (800e598 <tcp_output+0x2dc>)
 800e410:	4862      	ldr	r0, [pc, #392]	; (800e59c <tcp_output+0x2e0>)
 800e412:	f004 f86d 	bl	80124f0 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e416:	6868      	ldr	r0, [r5, #4]
 800e418:	f8cd 8008 	str.w	r8, [sp, #8]
 800e41c:	464a      	mov	r2, r9
 800e41e:	7aa3      	ldrb	r3, [r4, #10]
 800e420:	4621      	mov	r1, r4
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	2306      	movs	r3, #6
 800e426:	9301      	str	r3, [sp, #4]
 800e428:	7ae3      	ldrb	r3, [r4, #11]
 800e42a:	f001 fbd9 	bl	800fbe0 <ip4_output_if>
    if (err != ERR_OK) {
 800e42e:	2800      	cmp	r0, #0
 800e430:	f040 8114 	bne.w	800e65c <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e434:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e43c:	7d23      	ldrb	r3, [r4, #20]
 800e43e:	2b02      	cmp	r3, #2
 800e440:	d003      	beq.n	800e44a <tcp_output+0x18e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e442:	8b63      	ldrh	r3, [r4, #26]
 800e444:	f023 0303 	bic.w	r3, r3, #3
 800e448:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e44a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e44e:	f7fa feed 	bl	800922c <lwip_htonl>
 800e452:	68eb      	ldr	r3, [r5, #12]
 800e454:	4682      	mov	sl, r0
 800e456:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800e45a:	8998      	ldrh	r0, [r3, #12]
 800e45c:	f7fa fee2 	bl	8009224 <lwip_htons>
 800e460:	f010 0303 	ands.w	r3, r0, #3
 800e464:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e466:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e468:	bf18      	it	ne
 800e46a:	2301      	movne	r3, #1
 800e46c:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800e46e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e472:	1ad2      	subs	r2, r2, r3
 800e474:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800e476:	bfb8      	it	lt
 800e478:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800e47a:	68eb      	ldr	r3, [r5, #12]
 800e47c:	8998      	ldrh	r0, [r3, #12]
 800e47e:	f7fa fed1 	bl	8009224 <lwip_htons>
 800e482:	f010 0003 	ands.w	r0, r0, #3
 800e486:	bf18      	it	ne
 800e488:	2001      	movne	r0, #1
 800e48a:	eb10 0f0a 	cmn.w	r0, sl
 800e48e:	d044      	beq.n	800e51a <tcp_output+0x25e>
      seg->next = NULL;
 800e490:	2300      	movs	r3, #0
 800e492:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800e494:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e496:	2b00      	cmp	r3, #0
 800e498:	d043      	beq.n	800e522 <tcp_output+0x266>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e49a:	68eb      	ldr	r3, [r5, #12]
 800e49c:	6858      	ldr	r0, [r3, #4]
 800e49e:	f7fa fec5 	bl	800922c <lwip_htonl>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	4682      	mov	sl, r0
 800e4a6:	6858      	ldr	r0, [r3, #4]
 800e4a8:	f7fa fec0 	bl	800922c <lwip_htonl>
 800e4ac:	ebaa 0000 	sub.w	r0, sl, r0
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f2c0 80a1 	blt.w	800e5f8 <tcp_output+0x33c>
          useg->next = seg;
 800e4b6:	603d      	str	r5, [r7, #0]
 800e4b8:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800e4ba:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	f000 80c4 	beq.w	800e64a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e4c2:	68eb      	ldr	r3, [r5, #12]
 800e4c4:	6858      	ldr	r0, [r3, #4]
 800e4c6:	f7fa feb1 	bl	800922c <lwip_htonl>
 800e4ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4cc:	1ac0      	subs	r0, r0, r3
 800e4ce:	892b      	ldrh	r3, [r5, #8]
 800e4d0:	4418      	add	r0, r3
  while (seg != NULL &&
 800e4d2:	42b0      	cmp	r0, r6
 800e4d4:	f200 80bb 	bhi.w	800e64e <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 800e4d8:	68eb      	ldr	r3, [r5, #12]
 800e4da:	8998      	ldrh	r0, [r3, #12]
 800e4dc:	f7fa fea2 	bl	8009224 <lwip_htons>
 800e4e0:	0742      	lsls	r2, r0, #29
 800e4e2:	d412      	bmi.n	800e50a <tcp_output+0x24e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e4e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e4e6:	b14b      	cbz	r3, 800e4fc <tcp_output+0x240>
 800e4e8:	8b63      	ldrh	r3, [r4, #26]
 800e4ea:	f013 0f44 	tst.w	r3, #68	; 0x44
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	d104      	bne.n	800e4fc <tcp_output+0x240>
 800e4f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	d038      	beq.n	800e56a <tcp_output+0x2ae>
 800e4f8:	6808      	ldr	r0, [r1, #0]
 800e4fa:	b388      	cbz	r0, 800e560 <tcp_output+0x2a4>
    if (pcb->state != SYN_SENT) {
 800e4fc:	7d23      	ldrb	r3, [r4, #20]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	f47f af35 	bne.w	800e36e <tcp_output+0xb2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e504:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e508:	e73d      	b.n	800e386 <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 800e50a:	4b22      	ldr	r3, [pc, #136]	; (800e594 <tcp_output+0x2d8>)
 800e50c:	f240 5236 	movw	r2, #1334	; 0x536
 800e510:	4923      	ldr	r1, [pc, #140]	; (800e5a0 <tcp_output+0x2e4>)
 800e512:	4822      	ldr	r0, [pc, #136]	; (800e59c <tcp_output+0x2e0>)
 800e514:	f003 ffec 	bl	80124f0 <iprintf>
 800e518:	e7e4      	b.n	800e4e4 <tcp_output+0x228>
      tcp_seg_free(seg);
 800e51a:	4628      	mov	r0, r5
 800e51c:	f7fc faa0 	bl	800aa60 <tcp_seg_free>
 800e520:	e7cb      	b.n	800e4ba <tcp_output+0x1fe>
        pcb->unacked = seg;
 800e522:	462f      	mov	r7, r5
 800e524:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800e526:	e7c8      	b.n	800e4ba <tcp_output+0x1fe>
    pcb->rttest = tcp_ticks;
 800e528:	4b1e      	ldr	r3, [pc, #120]	; (800e5a4 <tcp_output+0x2e8>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e52e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e532:	f7fa fe7b 	bl	800922c <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e536:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e53a:	63a0      	str	r0, [r4, #56]	; 0x38
 800e53c:	e749      	b.n	800e3d2 <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e53e:	464a      	mov	r2, r9
 800e540:	4641      	mov	r1, r8
 800e542:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 800e546:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e54a:	f7fd fab9 	bl	800bac0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e54e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800e552:	f7fa fe6b 	bl	800922c <lwip_htonl>
 800e556:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e55a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e55e:	e72e      	b.n	800e3be <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e560:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800e564:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800e566:	4584      	cmp	ip, r0
 800e568:	d2c8      	bcs.n	800e4fc <tcp_output+0x240>
 800e56a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800e56e:	2800      	cmp	r0, #0
 800e570:	d0c4      	beq.n	800e4fc <tcp_output+0x240>
 800e572:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800e576:	280f      	cmp	r0, #15
 800e578:	d8c0      	bhi.n	800e4fc <tcp_output+0x240>
 800e57a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800e57e:	d1bd      	bne.n	800e4fc <tcp_output+0x240>
  if (pcb->unsent == NULL) {
 800e580:	2900      	cmp	r1, #0
 800e582:	f47f aedc 	bne.w	800e33e <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 800e586:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e588:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800e58a:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800e58e:	e6d6      	b.n	800e33e <tcp_output+0x82>
 800e590:	24010d7c 	.word	0x24010d7c
 800e594:	08016ae8 	.word	0x08016ae8
 800e598:	08017144 	.word	0x08017144
 800e59c:	08014fe0 	.word	0x08014fe0
 800e5a0:	0801712c 	.word	0x0801712c
 800e5a4:	24010d48 	.word	0x24010d48
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e5a8:	4b30      	ldr	r3, [pc, #192]	; (800e66c <tcp_output+0x3b0>)
 800e5aa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e5ae:	4930      	ldr	r1, [pc, #192]	; (800e670 <tcp_output+0x3b4>)
 800e5b0:	4830      	ldr	r0, [pc, #192]	; (800e674 <tcp_output+0x3b8>)
 800e5b2:	f003 ff9d 	bl	80124f0 <iprintf>
  if (tcp_input_pcb == pcb) {
 800e5b6:	4b30      	ldr	r3, [pc, #192]	; (800e678 <tcp_output+0x3bc>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	42a3      	cmp	r3, r4
 800e5bc:	f47f ae90 	bne.w	800e2e0 <tcp_output+0x24>
    return ERR_OK;
 800e5c0:	2000      	movs	r0, #0
}
 800e5c2:	b005      	add	sp, #20
 800e5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800e5c8:	4620      	mov	r0, r4
}
 800e5ca:	b005      	add	sp, #20
 800e5cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800e5d0:	f7ff be42 	b.w	800e258 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e5d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f47f aead 	bne.w	800e336 <tcp_output+0x7a>
 800e5dc:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f47f aea8 	bne.w	800e336 <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 800e5e6:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800e5ea:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800e5ee:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800e5f2:	e6a0      	b.n	800e336 <tcp_output+0x7a>
  useg = pcb->unacked;
 800e5f4:	461f      	mov	r7, r3
 800e5f6:	e764      	b.n	800e4c2 <tcp_output+0x206>
          while (*cur_seg &&
 800e5f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e5fa:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800e5fe:	b92b      	cbnz	r3, 800e60c <tcp_output+0x350>
 800e600:	e013      	b.n	800e62a <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 800e602:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800e606:	f8db 3000 	ldr.w	r3, [fp]
 800e60a:	b173      	cbz	r3, 800e62a <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	6858      	ldr	r0, [r3, #4]
 800e610:	f7fa fe0c 	bl	800922c <lwip_htonl>
 800e614:	68eb      	ldr	r3, [r5, #12]
 800e616:	4682      	mov	sl, r0
 800e618:	6858      	ldr	r0, [r3, #4]
 800e61a:	f7fa fe07 	bl	800922c <lwip_htonl>
 800e61e:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800e622:	2800      	cmp	r0, #0
 800e624:	dbed      	blt.n	800e602 <tcp_output+0x346>
            cur_seg = &((*cur_seg)->next );
 800e626:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800e62a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800e62c:	f8cb 5000 	str.w	r5, [fp]
 800e630:	e743      	b.n	800e4ba <tcp_output+0x1fe>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e632:	4b0e      	ldr	r3, [pc, #56]	; (800e66c <tcp_output+0x3b0>)
 800e634:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e638:	4910      	ldr	r1, [pc, #64]	; (800e67c <tcp_output+0x3c0>)
 800e63a:	480e      	ldr	r0, [pc, #56]	; (800e674 <tcp_output+0x3b8>)
 800e63c:	f003 ff58 	bl	80124f0 <iprintf>
 800e640:	e645      	b.n	800e2ce <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800e642:	f7fb fbdf 	bl	8009e04 <netif_get_by_index>
 800e646:	4680      	mov	r8, r0
 800e648:	e65a      	b.n	800e300 <tcp_output+0x44>
 800e64a:	8b63      	ldrh	r3, [r4, #26]
 800e64c:	e79b      	b.n	800e586 <tcp_output+0x2ca>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e64e:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800e650:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e652:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800e654:	2900      	cmp	r1, #0
 800e656:	f47f ae72 	bne.w	800e33e <tcp_output+0x82>
 800e65a:	e794      	b.n	800e586 <tcp_output+0x2ca>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e65c:	8b63      	ldrh	r3, [r4, #26]
 800e65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e662:	8363      	strh	r3, [r4, #26]
      return err;
 800e664:	e66f      	b.n	800e346 <tcp_output+0x8a>
    return ERR_RTE;
 800e666:	f06f 0003 	mvn.w	r0, #3
 800e66a:	e66c      	b.n	800e346 <tcp_output+0x8a>
 800e66c:	08016ae8 	.word	0x08016ae8
 800e670:	08017104 	.word	0x08017104
 800e674:	08014fe0 	.word	0x08014fe0
 800e678:	24010d7c 	.word	0x24010d7c
 800e67c:	080170ec 	.word	0x080170ec

0800e680 <tcp_rexmit_rto_commit>:
{
 800e680:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e682:	4604      	mov	r4, r0
 800e684:	b158      	cbz	r0, 800e69e <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800e686:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e68a:	2bff      	cmp	r3, #255	; 0xff
 800e68c:	d002      	beq.n	800e694 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800e68e:	3301      	adds	r3, #1
 800e690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800e694:	4620      	mov	r0, r4
}
 800e696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e69a:	f7ff be0f 	b.w	800e2bc <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e69e:	4b04      	ldr	r3, [pc, #16]	; (800e6b0 <tcp_rexmit_rto_commit+0x30>)
 800e6a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e6a4:	4903      	ldr	r1, [pc, #12]	; (800e6b4 <tcp_rexmit_rto_commit+0x34>)
 800e6a6:	4804      	ldr	r0, [pc, #16]	; (800e6b8 <tcp_rexmit_rto_commit+0x38>)
 800e6a8:	f003 ff22 	bl	80124f0 <iprintf>
 800e6ac:	e7eb      	b.n	800e686 <tcp_rexmit_rto_commit+0x6>
 800e6ae:	bf00      	nop
 800e6b0:	08016ae8 	.word	0x08016ae8
 800e6b4:	08017158 	.word	0x08017158
 800e6b8:	08014fe0 	.word	0x08014fe0

0800e6bc <tcp_rexmit_rto>:
{
 800e6bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e6be:	4604      	mov	r4, r0
 800e6c0:	b118      	cbz	r0, 800e6ca <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e6c2:	f7ff fcbd 	bl	800e040 <tcp_rexmit_rto_prepare>
 800e6c6:	b198      	cbz	r0, 800e6f0 <tcp_rexmit_rto+0x34>
}
 800e6c8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e6ca:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <tcp_rexmit_rto+0x4c>)
 800e6cc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e6d0:	490e      	ldr	r1, [pc, #56]	; (800e70c <tcp_rexmit_rto+0x50>)
 800e6d2:	480f      	ldr	r0, [pc, #60]	; (800e710 <tcp_rexmit_rto+0x54>)
 800e6d4:	f003 ff0c 	bl	80124f0 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f7ff fcb1 	bl	800e040 <tcp_rexmit_rto_prepare>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d1f2      	bne.n	800e6c8 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e6e2:	4b09      	ldr	r3, [pc, #36]	; (800e708 <tcp_rexmit_rto+0x4c>)
 800e6e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e6e8:	490a      	ldr	r1, [pc, #40]	; (800e714 <tcp_rexmit_rto+0x58>)
 800e6ea:	4809      	ldr	r0, [pc, #36]	; (800e710 <tcp_rexmit_rto+0x54>)
 800e6ec:	f003 ff00 	bl	80124f0 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800e6f0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e6f4:	2bff      	cmp	r3, #255	; 0xff
 800e6f6:	d002      	beq.n	800e6fe <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800e6fe:	4620      	mov	r0, r4
}
 800e700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e704:	f7ff bdda 	b.w	800e2bc <tcp_output>
 800e708:	08016ae8 	.word	0x08016ae8
 800e70c:	0801717c 	.word	0x0801717c
 800e710:	08014fe0 	.word	0x08014fe0
 800e714:	08017158 	.word	0x08017158

0800e718 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e718:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e71a:	4604      	mov	r4, r0
 800e71c:	b188      	cbz	r0, 800e742 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e71e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e720:	3801      	subs	r0, #1
 800e722:	f7fa fd83 	bl	800922c <lwip_htonl>
 800e726:	2100      	movs	r1, #0
 800e728:	4602      	mov	r2, r0
 800e72a:	4620      	mov	r0, r4
 800e72c:	f7fe ff3e 	bl	800d5ac <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e730:	4601      	mov	r1, r0
 800e732:	b170      	cbz	r0, 800e752 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e734:	1d23      	adds	r3, r4, #4
 800e736:	4622      	mov	r2, r4
 800e738:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e73e:	f7fe bf5d 	b.w	800d5fc <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e742:	4b05      	ldr	r3, [pc, #20]	; (800e758 <tcp_keepalive+0x40>)
 800e744:	f640 0224 	movw	r2, #2084	; 0x824
 800e748:	4904      	ldr	r1, [pc, #16]	; (800e75c <tcp_keepalive+0x44>)
 800e74a:	4805      	ldr	r0, [pc, #20]	; (800e760 <tcp_keepalive+0x48>)
 800e74c:	f003 fed0 	bl	80124f0 <iprintf>
 800e750:	e7e5      	b.n	800e71e <tcp_keepalive+0x6>
}
 800e752:	f04f 30ff 	mov.w	r0, #4294967295
 800e756:	bd10      	pop	{r4, pc}
 800e758:	08016ae8 	.word	0x08016ae8
 800e75c:	08017198 	.word	0x08017198
 800e760:	08014fe0 	.word	0x08014fe0

0800e764 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e768:	4604      	mov	r4, r0
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d051      	beq.n	800e812 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e76e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800e770:	2d00      	cmp	r5, #0
 800e772:	d04b      	beq.n	800e80c <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e774:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800e778:	2bff      	cmp	r3, #255	; 0xff
 800e77a:	d002      	beq.n	800e782 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800e77c:	3301      	adds	r3, #1
 800e77e:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e782:	68eb      	ldr	r3, [r5, #12]
 800e784:	8998      	ldrh	r0, [r3, #12]
 800e786:	f7fa fd4d 	bl	8009224 <lwip_htons>
 800e78a:	07c3      	lsls	r3, r0, #31
 800e78c:	d527      	bpl.n	800e7de <tcp_zero_window_probe+0x7a>
 800e78e:	8929      	ldrh	r1, [r5, #8]
 800e790:	bb29      	cbnz	r1, 800e7de <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e792:	68eb      	ldr	r3, [r5, #12]
 800e794:	4620      	mov	r0, r4
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	f7fe ff08 	bl	800d5ac <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e79c:	4606      	mov	r6, r0
 800e79e:	b388      	cbz	r0, 800e804 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e7a0:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e7a4:	2011      	movs	r0, #17
 800e7a6:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800e7aa:	f7fa fd3b 	bl	8009224 <lwip_htons>
 800e7ae:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800e7b2:	4338      	orrs	r0, r7
 800e7b4:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e7b8:	68eb      	ldr	r3, [r5, #12]
 800e7ba:	6858      	ldr	r0, [r3, #4]
 800e7bc:	f7fa fd36 	bl	800922c <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e7c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e7c2:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e7c4:	4622      	mov	r2, r4
 800e7c6:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e7c8:	1a1b      	subs	r3, r3, r0
 800e7ca:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e7cc:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800e7d0:	bfb8      	it	lt
 800e7d2:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e7d4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e7da:	f7fe bf0f 	b.w	800d5fc <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e7de:	68eb      	ldr	r3, [r5, #12]
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	685a      	ldr	r2, [r3, #4]
 800e7e6:	f7fe fee1 	bl	800d5ac <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	b150      	cbz	r0, 800e804 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e7ee:	6868      	ldr	r0, [r5, #4]
 800e7f0:	892a      	ldrh	r2, [r5, #8]
 800e7f2:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800e7f4:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e7f6:	1a9b      	subs	r3, r3, r2
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	3114      	adds	r1, #20
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f7fb feab 	bl	800a558 <pbuf_copy_partial>
 800e802:	e7d9      	b.n	800e7b8 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800e804:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800e80c:	4628      	mov	r0, r5
}
 800e80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e812:	4b04      	ldr	r3, [pc, #16]	; (800e824 <tcp_zero_window_probe+0xc0>)
 800e814:	f640 024f 	movw	r2, #2127	; 0x84f
 800e818:	4903      	ldr	r1, [pc, #12]	; (800e828 <tcp_zero_window_probe+0xc4>)
 800e81a:	4804      	ldr	r0, [pc, #16]	; (800e82c <tcp_zero_window_probe+0xc8>)
 800e81c:	f003 fe68 	bl	80124f0 <iprintf>
 800e820:	e7a5      	b.n	800e76e <tcp_zero_window_probe+0xa>
 800e822:	bf00      	nop
 800e824:	08016ae8 	.word	0x08016ae8
 800e828:	080171b4 	.word	0x080171b4
 800e82c:	08014fe0 	.word	0x08014fe0

0800e830 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e834:	200a      	movs	r0, #10
{
 800e836:	460e      	mov	r6, r1
 800e838:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e83a:	f7fb f889 	bl	8009950 <memp_malloc>
  if (timeout == NULL) {
 800e83e:	b190      	cbz	r0, 800e866 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800e840:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e842:	490d      	ldr	r1, [pc, #52]	; (800e878 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800e844:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800e846:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800e848:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800e84c:	680b      	ldr	r3, [r1, #0]
 800e84e:	b91b      	cbnz	r3, 800e858 <sys_timeout_abs+0x28>
 800e850:	e007      	b.n	800e862 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e852:	4619      	mov	r1, r3
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	b11b      	cbz	r3, 800e860 <sys_timeout_abs+0x30>
 800e858:	685a      	ldr	r2, [r3, #4]
 800e85a:	1aa2      	subs	r2, r4, r2
 800e85c:	2a00      	cmp	r2, #0
 800e85e:	daf8      	bge.n	800e852 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800e860:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800e862:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800e864:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e866:	4b05      	ldr	r3, [pc, #20]	; (800e87c <sys_timeout_abs+0x4c>)
 800e868:	22be      	movs	r2, #190	; 0xbe
 800e86a:	4905      	ldr	r1, [pc, #20]	; (800e880 <sys_timeout_abs+0x50>)
 800e86c:	4805      	ldr	r0, [pc, #20]	; (800e884 <sys_timeout_abs+0x54>)
}
 800e86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e872:	f003 be3d 	b.w	80124f0 <iprintf>
 800e876:	bf00      	nop
 800e878:	24010d98 	.word	0x24010d98
 800e87c:	080171d8 	.word	0x080171d8
 800e880:	0801720c 	.word	0x0801720c
 800e884:	08014fe0 	.word	0x08014fe0

0800e888 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e888:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e88a:	6843      	ldr	r3, [r0, #4]
{
 800e88c:	4604      	mov	r4, r0
  cyclic->handler();
 800e88e:	4798      	blx	r3

  now = sys_now();
 800e890:	f7f6 f8f8 	bl	8004a84 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e894:	4b09      	ldr	r3, [pc, #36]	; (800e8bc <lwip_cyclic_timer+0x34>)
 800e896:	6825      	ldr	r5, [r4, #0]
 800e898:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e89a:	4909      	ldr	r1, [pc, #36]	; (800e8c0 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e89c:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e89e:	1a1a      	subs	r2, r3, r0
 800e8a0:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e8a2:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e8a4:	da04      	bge.n	800e8b0 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e8a6:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e8ac:	f7ff bfc0 	b.w	800e830 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e8b0:	4618      	mov	r0, r3
}
 800e8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e8b6:	f7ff bfbb 	b.w	800e830 <sys_timeout_abs>
 800e8ba:	bf00      	nop
 800e8bc:	24010d94 	.word	0x24010d94
 800e8c0:	0800e889 	.word	0x0800e889

0800e8c4 <tcpip_tcp_timer>:
{
 800e8c4:	b508      	push	{r3, lr}
  tcp_tmr();
 800e8c6:	f7fd f8cd 	bl	800ba64 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e8ca:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <tcpip_tcp_timer+0x30>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	b153      	cbz	r3, 800e8e6 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800e8d0:	f7f6 fa5c 	bl	8004d8c <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e8d4:	f7f6 f8d6 	bl	8004a84 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e8d8:	2200      	movs	r2, #0
 800e8da:	4907      	ldr	r1, [pc, #28]	; (800e8f8 <tcpip_tcp_timer+0x34>)
 800e8dc:	30fa      	adds	r0, #250	; 0xfa
}
 800e8de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e8e2:	f7ff bfa5 	b.w	800e830 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e8e6:	4b05      	ldr	r3, [pc, #20]	; (800e8fc <tcpip_tcp_timer+0x38>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1f0      	bne.n	800e8d0 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800e8ee:	4a04      	ldr	r2, [pc, #16]	; (800e900 <tcpip_tcp_timer+0x3c>)
 800e8f0:	6013      	str	r3, [r2, #0]
}
 800e8f2:	bd08      	pop	{r3, pc}
 800e8f4:	24010d38 	.word	0x24010d38
 800e8f8:	0800e8c5 	.word	0x0800e8c5
 800e8fc:	24010d50 	.word	0x24010d50
 800e900:	24010d9c 	.word	0x24010d9c

0800e904 <tcp_timer_needed>:
{
 800e904:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800e906:	f7f6 fa41 	bl	8004d8c <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e90a:	4b0c      	ldr	r3, [pc, #48]	; (800e93c <tcp_timer_needed+0x38>)
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	b99a      	cbnz	r2, 800e938 <tcp_timer_needed+0x34>
 800e910:	4a0b      	ldr	r2, [pc, #44]	; (800e940 <tcp_timer_needed+0x3c>)
 800e912:	6812      	ldr	r2, [r2, #0]
 800e914:	b162      	cbz	r2, 800e930 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800e916:	2201      	movs	r2, #1
 800e918:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800e91a:	f7f6 fa37 	bl	8004d8c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e91e:	f7f6 f8b1 	bl	8004a84 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e922:	2200      	movs	r2, #0
 800e924:	4907      	ldr	r1, [pc, #28]	; (800e944 <tcp_timer_needed+0x40>)
 800e926:	30fa      	adds	r0, #250	; 0xfa
}
 800e928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e92c:	f7ff bf80 	b.w	800e830 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e930:	4a05      	ldr	r2, [pc, #20]	; (800e948 <tcp_timer_needed+0x44>)
 800e932:	6812      	ldr	r2, [r2, #0]
 800e934:	2a00      	cmp	r2, #0
 800e936:	d1ee      	bne.n	800e916 <tcp_timer_needed+0x12>
}
 800e938:	bd08      	pop	{r3, pc}
 800e93a:	bf00      	nop
 800e93c:	24010d9c 	.word	0x24010d9c
 800e940:	24010d38 	.word	0x24010d38
 800e944:	0800e8c5 	.word	0x0800e8c5
 800e948:	24010d50 	.word	0x24010d50

0800e94c <sys_timeouts_init>:
{
 800e94c:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e94e:	4c0c      	ldr	r4, [pc, #48]	; (800e980 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800e950:	f7f6 fa1c 	bl	8004d8c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e954:	f7f6 f896 	bl	8004a84 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e958:	490a      	ldr	r1, [pc, #40]	; (800e984 <sys_timeouts_init+0x38>)
 800e95a:	f104 0208 	add.w	r2, r4, #8
 800e95e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800e962:	f7ff ff65 	bl	800e830 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800e966:	f7f6 fa11 	bl	8004d8c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e96a:	f7f6 f88b 	bl	8004a84 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e96e:	f104 0210 	add.w	r2, r4, #16
 800e972:	4904      	ldr	r1, [pc, #16]	; (800e984 <sys_timeouts_init+0x38>)
 800e974:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800e978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e97c:	f7ff bf58 	b.w	800e830 <sys_timeout_abs>
 800e980:	0801724c 	.word	0x0801724c
 800e984:	0800e889 	.word	0x0800e889

0800e988 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800e98c:	f7f6 f9fe 	bl	8004d8c <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e990:	4c10      	ldr	r4, [pc, #64]	; (800e9d4 <sys_check_timeouts+0x4c>)
 800e992:	f7f6 f877 	bl	8004a84 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800e996:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800e9d8 <sys_check_timeouts+0x50>
  now = sys_now();
 800e99a:	4607      	mov	r7, r0
 800e99c:	e00f      	b.n	800e9be <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e99e:	685a      	ldr	r2, [r3, #4]
 800e9a0:	eba7 0c02 	sub.w	ip, r7, r2
 800e9a4:	f1bc 0f00 	cmp.w	ip, #0
 800e9a8:	db0e      	blt.n	800e9c8 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800e9aa:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800e9ac:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800e9ae:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800e9b2:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800e9b6:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e9b8:	f7fb f810 	bl	80099dc <memp_free>
    if (handler != NULL) {
 800e9bc:	b935      	cbnz	r5, 800e9cc <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800e9be:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e9c0:	200a      	movs	r0, #10
 800e9c2:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1ea      	bne.n	800e99e <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800e9cc:	4648      	mov	r0, r9
 800e9ce:	47a8      	blx	r5
 800e9d0:	e7f5      	b.n	800e9be <sys_check_timeouts+0x36>
 800e9d2:	bf00      	nop
 800e9d4:	24010d98 	.word	0x24010d98
 800e9d8:	24010d94 	.word	0x24010d94

0800e9dc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e9dc:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e9de:	4c08      	ldr	r4, [pc, #32]	; (800ea00 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800e9e0:	f7f6 f9d4 	bl	8004d8c <sys_check_core_locking>
  if (next_timeout == NULL) {
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	b13b      	cbz	r3, 800e9f8 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800e9e8:	f7f6 f84c 	bl	8004a84 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
    return 0;
 800e9f0:	1a18      	subs	r0, r3, r0
 800e9f2:	bf48      	it	mi
 800e9f4:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800e9f6:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e9f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	bf00      	nop
 800ea00:	24010d98 	.word	0x24010d98

0800ea04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ea04:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ea06:	f002 fddf 	bl	80115c8 <rand>
 800ea0a:	4b02      	ldr	r3, [pc, #8]	; (800ea14 <udp_init+0x10>)
 800ea0c:	4a02      	ldr	r2, [pc, #8]	; (800ea18 <udp_init+0x14>)
 800ea0e:	4303      	orrs	r3, r0
 800ea10:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800ea12:	bd08      	pop	{r3, pc}
 800ea14:	ffffc000 	.word	0xffffc000
 800ea18:	24000042 	.word	0x24000042

0800ea1c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	4680      	mov	r8, r0
 800ea22:	b085      	sub	sp, #20
 800ea24:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800ea26:	f7f6 f9b1 	bl	8004d8c <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ea2a:	f1b8 0f00 	cmp.w	r8, #0
 800ea2e:	f000 80af 	beq.w	800eb90 <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ea32:	2f00      	cmp	r7, #0
 800ea34:	f000 80b5 	beq.w	800eba2 <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ea38:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800ea3c:	2b07      	cmp	r3, #7
 800ea3e:	f240 8091 	bls.w	800eb64 <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ea42:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800ec18 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800ea46:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ea4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ea4e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ea52:	f001 f8d7 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800ea56:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ea58:	8820      	ldrh	r0, [r4, #0]
 800ea5a:	f7fa fbe3 	bl	8009224 <lwip_htons>
 800ea5e:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800ea60:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800ea62:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800ea64:	f7fa fbde 	bl	8009224 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea68:	4b63      	ldr	r3, [pc, #396]	; (800ebf8 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800ea6a:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea6c:	681c      	ldr	r4, [r3, #0]
 800ea6e:	2c00      	cmp	r4, #0
 800ea70:	d064      	beq.n	800eb3c <udp_input+0x120>
  uncon_pcb = NULL;
 800ea72:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ea76:	f8df c190 	ldr.w	ip, [pc, #400]	; 800ec08 <udp_input+0x1ec>
 800ea7a:	4960      	ldr	r1, [pc, #384]	; (800ebfc <udp_input+0x1e0>)
  prev = NULL;
 800ea7c:	465e      	mov	r6, fp
 800ea7e:	e004      	b.n	800ea8a <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea80:	68e2      	ldr	r2, [r4, #12]
 800ea82:	4626      	mov	r6, r4
 800ea84:	2a00      	cmp	r2, #0
 800ea86:	d056      	beq.n	800eb36 <udp_input+0x11a>
 800ea88:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ea8a:	8a62      	ldrh	r2, [r4, #18]
 800ea8c:	42aa      	cmp	r2, r5
 800ea8e:	d1f7      	bne.n	800ea80 <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ea90:	2f00      	cmp	r7, #0
 800ea92:	d06d      	beq.n	800eb70 <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ea94:	7a20      	ldrb	r0, [r4, #8]
 800ea96:	b138      	cbz	r0, 800eaa8 <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ea98:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ea9c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800eaa0:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eaa2:	b2d2      	uxtb	r2, r2
 800eaa4:	4290      	cmp	r0, r2
 800eaa6:	d1eb      	bne.n	800ea80 <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eaa8:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800eaaa:	f1ba 0f00 	cmp.w	sl, #0
 800eaae:	d038      	beq.n	800eb22 <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eab0:	b13a      	cbz	r2, 800eac2 <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eab2:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eab6:	1c43      	adds	r3, r0, #1
 800eab8:	d003      	beq.n	800eac2 <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800eaba:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	4218      	tst	r0, r3
 800eac0:	d1de      	bne.n	800ea80 <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800eac2:	7c20      	ldrb	r0, [r4, #16]
 800eac4:	0743      	lsls	r3, r0, #29
 800eac6:	d409      	bmi.n	800eadc <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 800eac8:	f1bb 0f00 	cmp.w	fp, #0
 800eacc:	d059      	beq.n	800eb82 <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800eace:	f1ba 0f00 	cmp.w	sl, #0
 800ead2:	d003      	beq.n	800eadc <udp_input+0xc0>
 800ead4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ead8:	3001      	adds	r0, #1
 800eada:	d069      	beq.n	800ebb0 <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eadc:	8aa2      	ldrh	r2, [r4, #20]
 800eade:	9803      	ldr	r0, [sp, #12]
 800eae0:	4282      	cmp	r2, r0
 800eae2:	d1cd      	bne.n	800ea80 <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eae4:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800eae6:	b11a      	cbz	r2, 800eaf0 <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eae8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eaec:	4282      	cmp	r2, r0
 800eaee:	d1c7      	bne.n	800ea80 <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eaf0:	b12e      	cbz	r6, 800eafe <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eaf2:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800eaf4:	4a40      	ldr	r2, [pc, #256]	; (800ebf8 <udp_input+0x1dc>)
          prev->next = pcb->next;
 800eaf6:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800eaf8:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800eafa:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800eafc:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eafe:	2108      	movs	r1, #8
 800eb00:	4640      	mov	r0, r8
 800eb02:	f7fb fac5 	bl	800a090 <pbuf_remove_header>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d15b      	bne.n	800ebc2 <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800eb0a:	69a5      	ldr	r5, [r4, #24]
 800eb0c:	b355      	cbz	r5, 800eb64 <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800eb0e:	9b03      	ldr	r3, [sp, #12]
 800eb10:	4642      	mov	r2, r8
 800eb12:	69e0      	ldr	r0, [r4, #28]
 800eb14:	4621      	mov	r1, r4
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	4b39      	ldr	r3, [pc, #228]	; (800ec00 <udp_input+0x1e4>)
 800eb1a:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800eb1c:	b005      	add	sp, #20
 800eb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eb22:	2a00      	cmp	r2, #0
 800eb24:	d0cd      	beq.n	800eac2 <udp_input+0xa6>
 800eb26:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800eb2a:	4282      	cmp	r2, r0
 800eb2c:	d0c9      	beq.n	800eac2 <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb2e:	68e2      	ldr	r2, [r4, #12]
 800eb30:	4626      	mov	r6, r4
 800eb32:	2a00      	cmp	r2, #0
 800eb34:	d1a8      	bne.n	800ea88 <udp_input+0x6c>
  if (pcb != NULL) {
 800eb36:	f1bb 0f00 	cmp.w	fp, #0
 800eb3a:	d15b      	bne.n	800ebf4 <udp_input+0x1d8>
  if (for_us) {
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d10e      	bne.n	800eb64 <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eb46:	2108      	movs	r1, #8
 800eb48:	4640      	mov	r0, r8
 800eb4a:	f7fb faa1 	bl	800a090 <pbuf_remove_header>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	d137      	bne.n	800ebc2 <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800eb52:	f1ba 0f00 	cmp.w	sl, #0
 800eb56:	d105      	bne.n	800eb64 <udp_input+0x148>
 800eb58:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eb5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb60:	2be0      	cmp	r3, #224	; 0xe0
 800eb62:	d13b      	bne.n	800ebdc <udp_input+0x1c0>
      pbuf_free(p);
 800eb64:	4640      	mov	r0, r8
}
 800eb66:	b005      	add	sp, #20
 800eb68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800eb6c:	f7fb bafc 	b.w	800a168 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eb70:	4663      	mov	r3, ip
 800eb72:	2288      	movs	r2, #136	; 0x88
 800eb74:	4823      	ldr	r0, [pc, #140]	; (800ec04 <udp_input+0x1e8>)
 800eb76:	f003 fcbb 	bl	80124f0 <iprintf>
 800eb7a:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800ec08 <udp_input+0x1ec>
 800eb7e:	491f      	ldr	r1, [pc, #124]	; (800ebfc <udp_input+0x1e0>)
 800eb80:	e788      	b.n	800ea94 <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 800eb82:	8aa2      	ldrh	r2, [r4, #20]
 800eb84:	46a3      	mov	fp, r4
 800eb86:	9803      	ldr	r0, [sp, #12]
 800eb88:	4282      	cmp	r2, r0
 800eb8a:	f47f af79 	bne.w	800ea80 <udp_input+0x64>
 800eb8e:	e7a9      	b.n	800eae4 <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eb90:	4b1d      	ldr	r3, [pc, #116]	; (800ec08 <udp_input+0x1ec>)
 800eb92:	22cf      	movs	r2, #207	; 0xcf
 800eb94:	491d      	ldr	r1, [pc, #116]	; (800ec0c <udp_input+0x1f0>)
 800eb96:	481b      	ldr	r0, [pc, #108]	; (800ec04 <udp_input+0x1e8>)
 800eb98:	f003 fcaa 	bl	80124f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eb9c:	2f00      	cmp	r7, #0
 800eb9e:	f47f af4b 	bne.w	800ea38 <udp_input+0x1c>
 800eba2:	4b19      	ldr	r3, [pc, #100]	; (800ec08 <udp_input+0x1ec>)
 800eba4:	22d0      	movs	r2, #208	; 0xd0
 800eba6:	491a      	ldr	r1, [pc, #104]	; (800ec10 <udp_input+0x1f4>)
 800eba8:	4816      	ldr	r0, [pc, #88]	; (800ec04 <udp_input+0x1e8>)
 800ebaa:	f003 fca1 	bl	80124f0 <iprintf>
 800ebae:	e743      	b.n	800ea38 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f8db 3000 	ldr.w	r3, [fp]
 800ebb6:	4283      	cmp	r3, r0
 800ebb8:	d090      	beq.n	800eadc <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ebba:	4290      	cmp	r0, r2
 800ebbc:	bf08      	it	eq
 800ebbe:	46a3      	moveq	fp, r4
 800ebc0:	e78c      	b.n	800eadc <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ebc2:	4b11      	ldr	r3, [pc, #68]	; (800ec08 <udp_input+0x1ec>)
 800ebc4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ebc8:	4912      	ldr	r1, [pc, #72]	; (800ec14 <udp_input+0x1f8>)
 800ebca:	480e      	ldr	r0, [pc, #56]	; (800ec04 <udp_input+0x1e8>)
 800ebcc:	f003 fc90 	bl	80124f0 <iprintf>
      pbuf_free(p);
 800ebd0:	4640      	mov	r0, r8
}
 800ebd2:	b005      	add	sp, #20
 800ebd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800ebd8:	f7fb bac6 	b.w	800a168 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ebdc:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	3108      	adds	r1, #8
 800ebe4:	b209      	sxth	r1, r1
 800ebe6:	f7fb fa87 	bl	800a0f8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ebea:	2103      	movs	r1, #3
 800ebec:	4640      	mov	r0, r8
 800ebee:	f000 fe59 	bl	800f8a4 <icmp_dest_unreach>
 800ebf2:	e7b7      	b.n	800eb64 <udp_input+0x148>
 800ebf4:	465c      	mov	r4, fp
 800ebf6:	e782      	b.n	800eafe <udp_input+0xe2>
 800ebf8:	24010da0 	.word	0x24010da0
 800ebfc:	080172c8 	.word	0x080172c8
 800ec00:	2400a288 	.word	0x2400a288
 800ec04:	08014fe0 	.word	0x08014fe0
 800ec08:	08017264 	.word	0x08017264
 800ec0c:	08017294 	.word	0x08017294
 800ec10:	080172ac 	.word	0x080172ac
 800ec14:	080172f0 	.word	0x080172f0
 800ec18:	2400a278 	.word	0x2400a278

0800ec1c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec20:	4688      	mov	r8, r1
 800ec22:	4605      	mov	r5, r0
 800ec24:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800ec26:	f7f6 f8b1 	bl	8004d8c <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ec2a:	f1b8 0f00 	cmp.w	r8, #0
 800ec2e:	d03c      	beq.n	800ecaa <udp_bind+0x8e>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec30:	2d00      	cmp	r5, #0
 800ec32:	d064      	beq.n	800ecfe <udp_bind+0xe2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec34:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800ed20 <udp_bind+0x104>
 800ec38:	f8dc 7000 	ldr.w	r7, [ip]
 800ec3c:	b34f      	cbz	r7, 800ec92 <udp_bind+0x76>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ec3e:	42bd      	cmp	r5, r7
 800ec40:	d036      	beq.n	800ecb0 <udp_bind+0x94>
 800ec42:	463c      	mov	r4, r7
 800ec44:	e001      	b.n	800ec4a <udp_bind+0x2e>
 800ec46:	42a5      	cmp	r5, r4
 800ec48:	d032      	beq.n	800ecb0 <udp_bind+0x94>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec4a:	68e4      	ldr	r4, [r4, #12]
 800ec4c:	2c00      	cmp	r4, #0
 800ec4e:	d1fa      	bne.n	800ec46 <udp_bind+0x2a>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ec50:	b38e      	cbz	r6, 800ecb6 <udp_bind+0x9a>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ec52:	f8d8 1000 	ldr.w	r1, [r8]
 800ec56:	463b      	mov	r3, r7
 800ec58:	e001      	b.n	800ec5e <udp_bind+0x42>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	b19b      	cbz	r3, 800ec86 <udp_bind+0x6a>
      if (pcb != ipcb) {
 800ec5e:	429d      	cmp	r5, r3
 800ec60:	d0fb      	beq.n	800ec5a <udp_bind+0x3e>
          if ((ipcb->local_port == port) &&
 800ec62:	8a5a      	ldrh	r2, [r3, #18]
 800ec64:	42b2      	cmp	r2, r6
 800ec66:	d1f8      	bne.n	800ec5a <udp_bind+0x3e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ec68:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 800ec6a:	428a      	cmp	r2, r1
 800ec6c:	bf18      	it	ne
 800ec6e:	2a00      	cmpne	r2, #0
 800ec70:	d001      	beq.n	800ec76 <udp_bind+0x5a>
 800ec72:	2900      	cmp	r1, #0
 800ec74:	d1f1      	bne.n	800ec5a <udp_bind+0x3e>
      return ERR_USE;
 800ec76:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ec7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ec7e:	f8d8 1000 	ldr.w	r1, [r8]
 800ec82:	f8ae 6000 	strh.w	r6, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ec86:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 800ec88:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 800ec8a:	b144      	cbz	r4, 800ec9e <udp_bind+0x82>
  return ERR_OK;
 800ec8c:	2000      	movs	r0, #0
}
 800ec8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 800ec92:	2e00      	cmp	r6, #0
 800ec94:	d031      	beq.n	800ecfa <udp_bind+0xde>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ec96:	f8d8 3000 	ldr.w	r3, [r8]
  pcb->local_port = port;
 800ec9a:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ec9c:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800ec9e:	2000      	movs	r0, #0
    pcb->next = udp_pcbs;
 800eca0:	60ef      	str	r7, [r5, #12]
    udp_pcbs = pcb;
 800eca2:	f8cc 5000 	str.w	r5, [ip]
}
 800eca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800ecaa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800ed24 <udp_bind+0x108>
 800ecae:	e7bf      	b.n	800ec30 <udp_bind+0x14>
      rebind = 1;
 800ecb0:	2401      	movs	r4, #1
  if (port == 0) {
 800ecb2:	2e00      	cmp	r6, #0
 800ecb4:	d1cd      	bne.n	800ec52 <udp_bind+0x36>
 800ecb6:	f8df e070 	ldr.w	lr, [pc, #112]	; 800ed28 <udp_bind+0x10c>
  rebind = 0;
 800ecba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ecbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ecc2:	f8be 6000 	ldrh.w	r6, [lr]
 800ecc6:	4286      	cmp	r6, r0
 800ecc8:	d014      	beq.n	800ecf4 <udp_bind+0xd8>
 800ecca:	3601      	adds	r6, #1
 800eccc:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecce:	2f00      	cmp	r7, #0
 800ecd0:	d0d5      	beq.n	800ec7e <udp_bind+0x62>
 800ecd2:	463b      	mov	r3, r7
 800ecd4:	e002      	b.n	800ecdc <udp_bind+0xc0>
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d0d0      	beq.n	800ec7e <udp_bind+0x62>
    if (pcb->local_port == udp_port) {
 800ecdc:	8a5a      	ldrh	r2, [r3, #18]
 800ecde:	42b2      	cmp	r2, r6
 800ece0:	d1f9      	bne.n	800ecd6 <udp_bind+0xba>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ece2:	3901      	subs	r1, #1
 800ece4:	b289      	uxth	r1, r1
 800ece6:	2900      	cmp	r1, #0
 800ece8:	d1ed      	bne.n	800ecc6 <udp_bind+0xaa>
      return ERR_USE;
 800ecea:	f06f 0007 	mvn.w	r0, #7
 800ecee:	f8ae 6000 	strh.w	r6, [lr]
 800ecf2:	e7cc      	b.n	800ec8e <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ecf4:	f44f 4640 	mov.w	r6, #49152	; 0xc000
 800ecf8:	e7e9      	b.n	800ecce <udp_bind+0xb2>
  rebind = 0;
 800ecfa:	463c      	mov	r4, r7
 800ecfc:	e7db      	b.n	800ecb6 <udp_bind+0x9a>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecfe:	4b05      	ldr	r3, [pc, #20]	; (800ed14 <udp_bind+0xf8>)
 800ed00:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ed04:	4904      	ldr	r1, [pc, #16]	; (800ed18 <udp_bind+0xfc>)
 800ed06:	4805      	ldr	r0, [pc, #20]	; (800ed1c <udp_bind+0x100>)
 800ed08:	f003 fbf2 	bl	80124f0 <iprintf>
 800ed0c:	f06f 000f 	mvn.w	r0, #15
 800ed10:	e7bd      	b.n	800ec8e <udp_bind+0x72>
 800ed12:	bf00      	nop
 800ed14:	08017264 	.word	0x08017264
 800ed18:	0801730c 	.word	0x0801730c
 800ed1c:	08014fe0 	.word	0x08014fe0
 800ed20:	24010da0 	.word	0x24010da0
 800ed24:	08017634 	.word	0x08017634
 800ed28:	24000042 	.word	0x24000042

0800ed2c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	4604      	mov	r4, r0
 800ed30:	460e      	mov	r6, r1
 800ed32:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ed34:	f7f6 f82a 	bl	8004d8c <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ed38:	b114      	cbz	r4, 800ed40 <udp_recv+0x14>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800ed3a:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ed40:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <udp_recv+0x28>)
 800ed42:	f240 428a 	movw	r2, #1162	; 0x48a
 800ed46:	4904      	ldr	r1, [pc, #16]	; (800ed58 <udp_recv+0x2c>)
 800ed48:	4804      	ldr	r0, [pc, #16]	; (800ed5c <udp_recv+0x30>)
}
 800ed4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ed4e:	f003 bbcf 	b.w	80124f0 <iprintf>
 800ed52:	bf00      	nop
 800ed54:	08017264 	.word	0x08017264
 800ed58:	08017324 	.word	0x08017324
 800ed5c:	08014fe0 	.word	0x08014fe0

0800ed60 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ed60:	b510      	push	{r4, lr}
 800ed62:	4604      	mov	r4, r0
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 800ed64:	f7f6 f812 	bl	8004d8c <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ed68:	b1d4      	cbz	r4, 800eda0 <udp_remove+0x40>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ed6a:	4b12      	ldr	r3, [pc, #72]	; (800edb4 <udp_remove+0x54>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	42a2      	cmp	r2, r4
 800ed70:	d006      	beq.n	800ed80 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ed72:	b13a      	cbz	r2, 800ed84 <udp_remove+0x24>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ed74:	68d3      	ldr	r3, [r2, #12]
 800ed76:	b12b      	cbz	r3, 800ed84 <udp_remove+0x24>
 800ed78:	42a3      	cmp	r3, r4
 800ed7a:	d009      	beq.n	800ed90 <udp_remove+0x30>
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	e7f8      	b.n	800ed72 <udp_remove+0x12>
    udp_pcbs = udp_pcbs->next;
 800ed80:	68e2      	ldr	r2, [r4, #12]
 800ed82:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ed84:	4621      	mov	r1, r4
 800ed86:	2000      	movs	r0, #0
}
 800ed88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 800ed8c:	f7fa be26 	b.w	80099dc <memp_free>
        pcb2->next = pcb->next;
 800ed90:	68e3      	ldr	r3, [r4, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800ed92:	4621      	mov	r1, r4
 800ed94:	2000      	movs	r0, #0
        pcb2->next = pcb->next;
 800ed96:	60d3      	str	r3, [r2, #12]
}
 800ed98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 800ed9c:	f7fa be1e 	b.w	80099dc <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800eda0:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <udp_remove+0x58>)
 800eda2:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800eda6:	4905      	ldr	r1, [pc, #20]	; (800edbc <udp_remove+0x5c>)
 800eda8:	4805      	ldr	r0, [pc, #20]	; (800edc0 <udp_remove+0x60>)
}
 800edaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800edae:	f003 bb9f 	b.w	80124f0 <iprintf>
 800edb2:	bf00      	nop
 800edb4:	24010da0 	.word	0x24010da0
 800edb8:	08017264 	.word	0x08017264
 800edbc:	0801733c 	.word	0x0801733c
 800edc0:	08014fe0 	.word	0x08014fe0

0800edc4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800edc4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800edc6:	f7f5 ffe1 	bl	8004d8c <sys_check_core_locking>
  LWIP_ASSERT_CORE_LOCKED();
 800edca:	f7f5 ffdf 	bl	8004d8c <sys_check_core_locking>
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800edce:	2000      	movs	r0, #0
 800edd0:	f7fa fdbe 	bl	8009950 <memp_malloc>
  if (pcb != NULL) {
 800edd4:	4604      	mov	r4, r0
 800edd6:	b128      	cbz	r0, 800ede4 <udp_new_ip_type+0x20>
    memset(pcb, 0, sizeof(struct udp_pcb));
 800edd8:	2220      	movs	r2, #32
 800edda:	2100      	movs	r1, #0
 800eddc:	f003 fc55 	bl	801268a <memset>
    pcb->ttl = UDP_TTL;
 800ede0:	23ff      	movs	r3, #255	; 0xff
 800ede2:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800ede4:	4620      	mov	r0, r4
 800ede6:	bd10      	pop	{r4, pc}

0800ede8 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ede8:	b110      	cbz	r0, 800edf0 <udp_netif_ip_addr_changed+0x8>
 800edea:	6802      	ldr	r2, [r0, #0]
 800edec:	b101      	cbz	r1, 800edf0 <udp_netif_ip_addr_changed+0x8>
 800edee:	b902      	cbnz	r2, 800edf2 <udp_netif_ip_addr_changed+0xa>
 800edf0:	4770      	bx	lr
 800edf2:	680b      	ldr	r3, [r1, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d0fb      	beq.n	800edf0 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800edf8:	4b08      	ldr	r3, [pc, #32]	; (800ee1c <udp_netif_ip_addr_changed+0x34>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d0f7      	beq.n	800edf0 <udp_netif_ip_addr_changed+0x8>
{
 800ee00:	b410      	push	{r4}
 800ee02:	e000      	b.n	800ee06 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ee04:	6802      	ldr	r2, [r0, #0]
 800ee06:	681c      	ldr	r4, [r3, #0]
 800ee08:	4294      	cmp	r4, r2
 800ee0a:	d101      	bne.n	800ee10 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ee0c:	680a      	ldr	r2, [r1, #0]
 800ee0e:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1f6      	bne.n	800ee04 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800ee16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	24010da0 	.word	0x24010da0

0800ee20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee24:	468b      	mov	fp, r1
 800ee26:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ee28:	f04f 080a 	mov.w	r8, #10
{
 800ee2c:	b085      	sub	sp, #20
 800ee2e:	4617      	mov	r7, r2
 800ee30:	4e52      	ldr	r6, [pc, #328]	; (800ef7c <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ee32:	465a      	mov	r2, fp
{
 800ee34:	4605      	mov	r5, r0
 800ee36:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ee38:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800ee3a:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ee3c:	46c6      	mov	lr, r8
 800ee3e:	46c3      	mov	fp, r8
 800ee40:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ee42:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ee44:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800ee48:	e004      	b.n	800ee54 <etharp_find_entry+0x34>
 800ee4a:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	3118      	adds	r1, #24
 800ee50:	2b0a      	cmp	r3, #10
 800ee52:	d016      	beq.n	800ee82 <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ee54:	2c0a      	cmp	r4, #10
 800ee56:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800ee5a:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ee5c:	d13a      	bne.n	800eed4 <etharp_find_entry+0xb4>
 800ee5e:	2a00      	cmp	r2, #0
 800ee60:	d0f3      	beq.n	800ee4a <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ee62:	b11d      	cbz	r5, 800ee6c <etharp_find_entry+0x4c>
 800ee64:	6828      	ldr	r0, [r5, #0]
 800ee66:	684f      	ldr	r7, [r1, #4]
 800ee68:	42b8      	cmp	r0, r7
 800ee6a:	d03e      	beq.n	800eeea <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ee6c:	2a01      	cmp	r2, #1
 800ee6e:	d034      	beq.n	800eeda <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ee70:	8a4a      	ldrh	r2, [r1, #18]
 800ee72:	454a      	cmp	r2, r9
 800ee74:	d3ea      	bcc.n	800ee4c <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee76:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800ee78:	4691      	mov	r9, r2
 800ee7a:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee7c:	3118      	adds	r1, #24
 800ee7e:	2b0a      	cmp	r3, #10
 800ee80:	d1e8      	bne.n	800ee54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ee82:	46da      	mov	sl, fp
 800ee84:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800ee88:	f1bb 0f01 	cmp.w	fp, #1
 800ee8c:	d172      	bne.n	800ef74 <etharp_find_entry+0x154>
 800ee8e:	2c0a      	cmp	r4, #10
 800ee90:	d032      	beq.n	800eef8 <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ee92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ee96:	46a1      	mov	r9, r4
 800ee98:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800ee9c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800eea0:	7d1b      	ldrb	r3, [r3, #20]
 800eea2:	b133      	cbz	r3, 800eeb2 <etharp_find_entry+0x92>
 800eea4:	4b36      	ldr	r3, [pc, #216]	; (800ef80 <etharp_find_entry+0x160>)
 800eea6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800eeaa:	4936      	ldr	r1, [pc, #216]	; (800ef84 <etharp_find_entry+0x164>)
 800eeac:	4836      	ldr	r0, [pc, #216]	; (800ef88 <etharp_find_entry+0x168>)
 800eeae:	f003 fb1f 	bl	80124f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800eeb2:	b12d      	cbz	r5, 800eec0 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800eeb4:	eb08 0309 	add.w	r3, r8, r9
 800eeb8:	682a      	ldr	r2, [r5, #0]
 800eeba:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800eebe:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800eec0:	44c8      	add	r8, r9
 800eec2:	2300      	movs	r3, #0
 800eec4:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800eec8:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800eeca:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800eecc:	4620      	mov	r0, r4
 800eece:	b005      	add	sp, #20
 800eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800eed4:	2a00      	cmp	r2, #0
 800eed6:	d0b9      	beq.n	800ee4c <etharp_find_entry+0x2c>
 800eed8:	e7c3      	b.n	800ee62 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800eeda:	680a      	ldr	r2, [r1, #0]
 800eedc:	b3a2      	cbz	r2, 800ef48 <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800eede:	8a4a      	ldrh	r2, [r1, #18]
 800eee0:	4552      	cmp	r2, sl
 800eee2:	d3b3      	bcc.n	800ee4c <etharp_find_entry+0x2c>
 800eee4:	4692      	mov	sl, r2
 800eee6:	46e0      	mov	r8, ip
 800eee8:	e7b0      	b.n	800ee4c <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eeea:	9f01      	ldr	r7, [sp, #4]
 800eeec:	b117      	cbz	r7, 800eef4 <etharp_find_entry+0xd4>
 800eeee:	6888      	ldr	r0, [r1, #8]
 800eef0:	42b8      	cmp	r0, r7
 800eef2:	d1bb      	bne.n	800ee6c <etharp_find_entry+0x4c>
 800eef4:	4664      	mov	r4, ip
 800eef6:	e7e9      	b.n	800eecc <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800eef8:	f1be 0f0a 	cmp.w	lr, #10
 800eefc:	d02c      	beq.n	800ef58 <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800eefe:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800ef02:	46f1      	mov	r9, lr
 800ef04:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800ef08:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800ef0c:	b383      	cbz	r3, 800ef70 <etharp_find_entry+0x150>
 800ef0e:	464c      	mov	r4, r9
 800ef10:	4b1b      	ldr	r3, [pc, #108]	; (800ef80 <etharp_find_entry+0x160>)
 800ef12:	f240 126d 	movw	r2, #365	; 0x16d
 800ef16:	491d      	ldr	r1, [pc, #116]	; (800ef8c <etharp_find_entry+0x16c>)
 800ef18:	481b      	ldr	r0, [pc, #108]	; (800ef88 <etharp_find_entry+0x168>)
 800ef1a:	f003 fae9 	bl	80124f0 <iprintf>
  if (arp_table[i].q != NULL) {
 800ef1e:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800ef22:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800ef26:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ef2a:	f856 000a 	ldr.w	r0, [r6, sl]
 800ef2e:	b120      	cbz	r0, 800ef3a <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800ef30:	f7fb f91a 	bl	800a168 <pbuf_free>
    arp_table[i].q = NULL;
 800ef34:	2300      	movs	r3, #0
 800ef36:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ef3a:	eb08 0309 	add.w	r3, r8, r9
 800ef3e:	2200      	movs	r2, #0
 800ef40:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ef44:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ef46:	e7b4      	b.n	800eeb2 <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800ef48:	8a4a      	ldrh	r2, [r1, #18]
 800ef4a:	9803      	ldr	r0, [sp, #12]
 800ef4c:	4282      	cmp	r2, r0
 800ef4e:	f4ff af7d 	bcc.w	800ee4c <etharp_find_entry+0x2c>
 800ef52:	46e3      	mov	fp, ip
 800ef54:	9203      	str	r2, [sp, #12]
 800ef56:	e779      	b.n	800ee4c <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ef58:	f1ba 0f0a 	cmp.w	sl, #10
 800ef5c:	d105      	bne.n	800ef6a <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ef5e:	f1b8 0f0a 	cmp.w	r8, #10
 800ef62:	d007      	beq.n	800ef74 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800ef64:	4644      	mov	r4, r8
 800ef66:	46c1      	mov	r9, r8
 800ef68:	e7d9      	b.n	800ef1e <etharp_find_entry+0xfe>
 800ef6a:	4654      	mov	r4, sl
 800ef6c:	46d1      	mov	r9, sl
 800ef6e:	e7d6      	b.n	800ef1e <etharp_find_entry+0xfe>
 800ef70:	4674      	mov	r4, lr
 800ef72:	e7e2      	b.n	800ef3a <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800ef74:	f04f 34ff 	mov.w	r4, #4294967295
 800ef78:	e7a8      	b.n	800eecc <etharp_find_entry+0xac>
 800ef7a:	bf00      	nop
 800ef7c:	24010da4 	.word	0x24010da4
 800ef80:	08017354 	.word	0x08017354
 800ef84:	080173a4 	.word	0x080173a4
 800ef88:	08014fe0 	.word	0x08014fe0
 800ef8c:	0801738c 	.word	0x0801738c

0800ef90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ef90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef94:	b082      	sub	sp, #8
 800ef96:	4688      	mov	r8, r1
 800ef98:	4691      	mov	r9, r2
 800ef9a:	461f      	mov	r7, r3
 800ef9c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800efa0:	4606      	mov	r6, r0
{
 800efa2:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d050      	beq.n	800f04c <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800efaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800efae:	211c      	movs	r1, #28
 800efb0:	200e      	movs	r0, #14
 800efb2:	f7fb f949 	bl	800a248 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800efb6:	4605      	mov	r5, r0
 800efb8:	2800      	cmp	r0, #0
 800efba:	d04f      	beq.n	800f05c <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800efbc:	8943      	ldrh	r3, [r0, #10]
 800efbe:	2b1b      	cmp	r3, #27
 800efc0:	d93c      	bls.n	800f03c <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800efc2:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800efc4:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800efc6:	f7fa f92d 	bl	8009224 <lwip_htons>
 800efca:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800efcc:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800efd0:	2b06      	cmp	r3, #6
 800efd2:	d006      	beq.n	800efe2 <etharp_raw+0x52>
 800efd4:	4b23      	ldr	r3, [pc, #140]	; (800f064 <etharp_raw+0xd4>)
 800efd6:	f240 4269 	movw	r2, #1129	; 0x469
 800efda:	4923      	ldr	r1, [pc, #140]	; (800f068 <etharp_raw+0xd8>)
 800efdc:	4823      	ldr	r0, [pc, #140]	; (800f06c <etharp_raw+0xdc>)
 800efde:	f003 fa87 	bl	80124f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800efe2:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800efe4:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800efe6:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800efe8:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800efea:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800efec:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800efee:	88b9      	ldrh	r1, [r7, #4]
 800eff0:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800eff2:	f8da 1000 	ldr.w	r1, [sl]
 800eff6:	f8c4 1012 	str.w	r1, [r4, #18]
 800effa:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800effe:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f000:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f002:	6809      	ldr	r1, [r1, #0]
 800f004:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f008:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f00a:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f00c:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f00e:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f010:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f012:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f014:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f016:	2108      	movs	r1, #8
 800f018:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800f01a:	2106      	movs	r1, #6
 800f01c:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f01e:	2104      	movs	r1, #4
 800f020:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f022:	f640 0106 	movw	r1, #2054	; 0x806
 800f026:	9100      	str	r1, [sp, #0]
 800f028:	4629      	mov	r1, r5
 800f02a:	f001 fab5 	bl	8010598 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f02e:	4628      	mov	r0, r5
 800f030:	f7fb f89a 	bl	800a168 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f034:	4630      	mov	r0, r6
}
 800f036:	b002      	add	sp, #8
 800f038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f03c:	4b09      	ldr	r3, [pc, #36]	; (800f064 <etharp_raw+0xd4>)
 800f03e:	f240 4262 	movw	r2, #1122	; 0x462
 800f042:	490b      	ldr	r1, [pc, #44]	; (800f070 <etharp_raw+0xe0>)
 800f044:	4809      	ldr	r0, [pc, #36]	; (800f06c <etharp_raw+0xdc>)
 800f046:	f003 fa53 	bl	80124f0 <iprintf>
 800f04a:	e7ba      	b.n	800efc2 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <etharp_raw+0xd4>)
 800f04e:	f240 4257 	movw	r2, #1111	; 0x457
 800f052:	4908      	ldr	r1, [pc, #32]	; (800f074 <etharp_raw+0xe4>)
 800f054:	4805      	ldr	r0, [pc, #20]	; (800f06c <etharp_raw+0xdc>)
 800f056:	f003 fa4b 	bl	80124f0 <iprintf>
 800f05a:	e7a6      	b.n	800efaa <etharp_raw+0x1a>
    return ERR_MEM;
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295
 800f060:	e7e9      	b.n	800f036 <etharp_raw+0xa6>
 800f062:	bf00      	nop
 800f064:	08017354 	.word	0x08017354
 800f068:	08017404 	.word	0x08017404
 800f06c:	08014fe0 	.word	0x08014fe0
 800f070:	080173d0 	.word	0x080173d0
 800f074:	08014fd0 	.word	0x08014fd0

0800f078 <etharp_output_to_arp_index>:
{
 800f078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f07c:	4f39      	ldr	r7, [pc, #228]	; (800f164 <etharp_output_to_arp_index+0xec>)
 800f07e:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800f082:	b084      	sub	sp, #16
 800f084:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f086:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800f08a:	4605      	mov	r5, r0
 800f08c:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f08e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800f092:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f096:	2b01      	cmp	r3, #1
 800f098:	d93d      	bls.n	800f116 <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f09a:	2b02      	cmp	r3, #2
 800f09c:	d013      	beq.n	800f0c6 <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f09e:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0a2:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f0a6:	fb09 7904 	mla	r9, r9, r4, r7
 800f0aa:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f0ae:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f0b2:	464b      	mov	r3, r9
 800f0b4:	4652      	mov	r2, sl
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	9400      	str	r4, [sp, #0]
 800f0bc:	f001 fa6c 	bl	8010598 <ethernet_output>
}
 800f0c0:	b004      	add	sp, #16
 800f0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f0c6:	44a0      	add	r8, r4
 800f0c8:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800f0cc:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800f0d0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f0d4:	d829      	bhi.n	800f12a <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f0d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f0da:	d3e0      	bcc.n	800f09e <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f0dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	00e4      	lsls	r4, r4, #3
 800f0ea:	9303      	str	r3, [sp, #12]
 800f0ec:	4b1e      	ldr	r3, [pc, #120]	; (800f168 <etharp_output_to_arp_index+0xf0>)
 800f0ee:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f0f0:	f104 090c 	add.w	r9, r4, #12
 800f0f4:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0f6:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f0f8:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f0fa:	44b9      	add	r9, r7
 800f0fc:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	4653      	mov	r3, sl
 800f102:	464a      	mov	r2, r9
 800f104:	9702      	str	r7, [sp, #8]
 800f106:	f7ff ff43 	bl	800ef90 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d1cf      	bne.n	800f0ae <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f10e:	2303      	movs	r3, #3
 800f110:	f888 3014 	strb.w	r3, [r8, #20]
 800f114:	e7cb      	b.n	800f0ae <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f116:	4b15      	ldr	r3, [pc, #84]	; (800f16c <etharp_output_to_arp_index+0xf4>)
 800f118:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f11c:	4914      	ldr	r1, [pc, #80]	; (800f170 <etharp_output_to_arp_index+0xf8>)
 800f11e:	4815      	ldr	r0, [pc, #84]	; (800f174 <etharp_output_to_arp_index+0xfc>)
 800f120:	f003 f9e6 	bl	80124f0 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f124:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f128:	e7b7      	b.n	800f09a <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f12a:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f12e:	2301      	movs	r3, #1
 800f130:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800f134:	4a10      	ldr	r2, [pc, #64]	; (800f178 <etharp_output_to_arp_index+0x100>)
 800f136:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f13a:	9303      	str	r3, [sp, #12]
 800f13c:	4651      	mov	r1, sl
 800f13e:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f140:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f144:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f148:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f14a:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f14c:	9302      	str	r3, [sp, #8]
 800f14e:	4b06      	ldr	r3, [pc, #24]	; (800f168 <etharp_output_to_arp_index+0xf0>)
 800f150:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f152:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	4653      	mov	r3, sl
 800f158:	f7ff ff1a 	bl	800ef90 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d0d6      	beq.n	800f10e <etharp_output_to_arp_index+0x96>
 800f160:	e7a5      	b.n	800f0ae <etharp_output_to_arp_index+0x36>
 800f162:	bf00      	nop
 800f164:	24010da4 	.word	0x24010da4
 800f168:	08017830 	.word	0x08017830
 800f16c:	08017354 	.word	0x08017354
 800f170:	08017448 	.word	0x08017448
 800f174:	08014fe0 	.word	0x08014fe0
 800f178:	08017828 	.word	0x08017828

0800f17c <etharp_tmr>:
{
 800f17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f180:	4c20      	ldr	r4, [pc, #128]	; (800f204 <etharp_tmr+0x88>)
 800f182:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f184:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f186:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f20c <etharp_tmr+0x90>
 800f18a:	4f1f      	ldr	r7, [pc, #124]	; (800f208 <etharp_tmr+0x8c>)
 800f18c:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800f190:	e00c      	b.n	800f1ac <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f192:	2a01      	cmp	r2, #1
 800f194:	d101      	bne.n	800f19a <etharp_tmr+0x1e>
 800f196:	2b04      	cmp	r3, #4
 800f198:	d812      	bhi.n	800f1c0 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f19a:	2a03      	cmp	r2, #3
 800f19c:	d01e      	beq.n	800f1dc <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f19e:	2a04      	cmp	r2, #4
 800f1a0:	d01f      	beq.n	800f1e2 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f1a2:	2a01      	cmp	r2, #1
 800f1a4:	d020      	beq.n	800f1e8 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1a6:	3418      	adds	r4, #24
 800f1a8:	42ac      	cmp	r4, r5
 800f1aa:	d014      	beq.n	800f1d6 <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800f1ac:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800f1ae:	2a00      	cmp	r2, #0
 800f1b0:	d0f9      	beq.n	800f1a6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800f1b2:	89e3      	ldrh	r3, [r4, #14]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f1b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800f1bc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f1be:	d3e8      	bcc.n	800f192 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800f1c0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f1c4:	b118      	cbz	r0, 800f1ce <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800f1c6:	f7fa ffcf 	bl	800a168 <pbuf_free>
    arp_table[i].q = NULL;
 800f1ca:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f1ce:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1d0:	3418      	adds	r4, #24
 800f1d2:	42ac      	cmp	r4, r5
 800f1d4:	d1ea      	bne.n	800f1ac <etharp_tmr+0x30>
}
 800f1d6:	b004      	add	sp, #16
 800f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f1dc:	2304      	movs	r3, #4
 800f1de:	7423      	strb	r3, [r4, #16]
 800f1e0:	e7e1      	b.n	800f1a6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	7423      	strb	r3, [r4, #16]
 800f1e6:	e7de      	b.n	800f1a6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f1e8:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f1ea:	f8cd 8004 	str.w	r8, [sp, #4]
 800f1ee:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f1f2:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f1f4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800f1f8:	9100      	str	r1, [sp, #0]
 800f1fa:	463a      	mov	r2, r7
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	f7ff fec7 	bl	800ef90 <etharp_raw>
 800f202:	e7d0      	b.n	800f1a6 <etharp_tmr+0x2a>
 800f204:	24010da8 	.word	0x24010da8
 800f208:	08017828 	.word	0x08017828
 800f20c:	08017830 	.word	0x08017830

0800f210 <etharp_cleanup_netif>:
{
 800f210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f212:	4c0a      	ldr	r4, [pc, #40]	; (800f23c <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f214:	2700      	movs	r7, #0
{
 800f216:	4606      	mov	r6, r0
 800f218:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f21c:	7d23      	ldrb	r3, [r4, #20]
 800f21e:	b113      	cbz	r3, 800f226 <etharp_cleanup_netif+0x16>
 800f220:	68a3      	ldr	r3, [r4, #8]
 800f222:	42b3      	cmp	r3, r6
 800f224:	d003      	beq.n	800f22e <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f226:	3418      	adds	r4, #24
 800f228:	42ac      	cmp	r4, r5
 800f22a:	d1f7      	bne.n	800f21c <etharp_cleanup_netif+0xc>
}
 800f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800f22e:	6820      	ldr	r0, [r4, #0]
 800f230:	b110      	cbz	r0, 800f238 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800f232:	f7fa ff99 	bl	800a168 <pbuf_free>
    arp_table[i].q = NULL;
 800f236:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f238:	7527      	strb	r7, [r4, #20]
}
 800f23a:	e7f4      	b.n	800f226 <etharp_cleanup_netif+0x16>
 800f23c:	24010da4 	.word	0x24010da4

0800f240 <etharp_input>:
{
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	460d      	mov	r5, r1
 800f246:	b087      	sub	sp, #28
 800f248:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800f24a:	f7f5 fd9f 	bl	8004d8c <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f24e:	2d00      	cmp	r5, #0
 800f250:	d07b      	beq.n	800f34a <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800f252:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f254:	8833      	ldrh	r3, [r6, #0]
 800f256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f25a:	d102      	bne.n	800f262 <etharp_input+0x22>
 800f25c:	7933      	ldrb	r3, [r6, #4]
 800f25e:	2b06      	cmp	r3, #6
 800f260:	d005      	beq.n	800f26e <etharp_input+0x2e>
  pbuf_free(p);
 800f262:	4620      	mov	r0, r4
}
 800f264:	b007      	add	sp, #28
 800f266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800f26a:	f7fa bf7d 	b.w	800a168 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f26e:	7973      	ldrb	r3, [r6, #5]
 800f270:	2b04      	cmp	r3, #4
 800f272:	d1f6      	bne.n	800f262 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f274:	8873      	ldrh	r3, [r6, #2]
 800f276:	2b08      	cmp	r3, #8
 800f278:	d1f3      	bne.n	800f262 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f27a:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f27e:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f282:	686f      	ldr	r7, [r5, #4]
 800f284:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f286:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f28a:	2f00      	cmp	r7, #0
 800f28c:	d167      	bne.n	800f35e <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f28e:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f292:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f296:	2b06      	cmp	r3, #6
 800f298:	d165      	bne.n	800f366 <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800f29a:	f1ba 0f00 	cmp.w	sl, #0
 800f29e:	d03e      	beq.n	800f31e <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2a0:	4629      	mov	r1, r5
 800f2a2:	4650      	mov	r0, sl
 800f2a4:	f000 fcae 	bl	800fc04 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800f2a8:	4681      	mov	r9, r0
 800f2aa:	bbc0      	cbnz	r0, 800f31e <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 800f2ac:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2b0:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 800f2b4:	d033      	beq.n	800f31e <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 800f2b6:	4659      	mov	r1, fp
 800f2b8:	462a      	mov	r2, r5
 800f2ba:	a805      	add	r0, sp, #20
 800f2bc:	f7ff fdb0 	bl	800ee20 <etharp_find_entry>
  if (i < 0) {
 800f2c0:	1e03      	subs	r3, r0, #0
 800f2c2:	db2c      	blt.n	800f31e <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f2c4:	492d      	ldr	r1, [pc, #180]	; (800f37c <etharp_input+0x13c>)
 800f2c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f2ca:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f2cc:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f2d0:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800f2d4:	00d2      	lsls	r2, r2, #3
 800f2d6:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f2da:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800f2dc:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f2e0:	fb13 030e 	smlabb	r3, r3, lr, r0
 800f2e4:	f8d8 0000 	ldr.w	r0, [r8]
 800f2e8:	50c8      	str	r0, [r1, r3]
 800f2ea:	440b      	add	r3, r1
 800f2ec:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800f2f0:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800f2f2:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800f2f6:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800f2fa:	f1ba 0f00 	cmp.w	sl, #0
 800f2fe:	d00e      	beq.n	800f31e <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f300:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800f304:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f308:	4628      	mov	r0, r5
 800f30a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4651      	mov	r1, sl
 800f312:	4643      	mov	r3, r8
 800f314:	f001 f940 	bl	8010598 <ethernet_output>
    pbuf_free(p);
 800f318:	4650      	mov	r0, sl
 800f31a:	f7fa ff25 	bl	800a168 <pbuf_free>
  switch (hdr->opcode) {
 800f31e:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800f320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f324:	d19d      	bne.n	800f262 <etharp_input+0x22>
 800f326:	2f00      	cmp	r7, #0
 800f328:	d09b      	beq.n	800f262 <etharp_input+0x22>
        etharp_raw(netif,
 800f32a:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f32c:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800f330:	4642      	mov	r2, r8
 800f332:	4628      	mov	r0, r5
 800f334:	9103      	str	r1, [sp, #12]
 800f336:	a905      	add	r1, sp, #20
 800f338:	f8cd 8004 	str.w	r8, [sp, #4]
 800f33c:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f33e:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800f340:	9100      	str	r1, [sp, #0]
 800f342:	4619      	mov	r1, r3
 800f344:	f7ff fe24 	bl	800ef90 <etharp_raw>
 800f348:	e78b      	b.n	800f262 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f34a:	4b0d      	ldr	r3, [pc, #52]	; (800f380 <etharp_input+0x140>)
 800f34c:	f240 228a 	movw	r2, #650	; 0x28a
 800f350:	490c      	ldr	r1, [pc, #48]	; (800f384 <etharp_input+0x144>)
 800f352:	480d      	ldr	r0, [pc, #52]	; (800f388 <etharp_input+0x148>)
}
 800f354:	b007      	add	sp, #28
 800f356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f35a:	f003 b8c9 	b.w	80124f0 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f35e:	429f      	cmp	r7, r3
 800f360:	d009      	beq.n	800f376 <etharp_input+0x136>
 800f362:	2700      	movs	r7, #0
 800f364:	e793      	b.n	800f28e <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f366:	4b06      	ldr	r3, [pc, #24]	; (800f380 <etharp_input+0x140>)
 800f368:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f36c:	4907      	ldr	r1, [pc, #28]	; (800f38c <etharp_input+0x14c>)
 800f36e:	4806      	ldr	r0, [pc, #24]	; (800f388 <etharp_input+0x148>)
 800f370:	f003 f8be 	bl	80124f0 <iprintf>
 800f374:	e791      	b.n	800f29a <etharp_input+0x5a>
 800f376:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f378:	46bb      	mov	fp, r7
 800f37a:	e78a      	b.n	800f292 <etharp_input+0x52>
 800f37c:	24010da4 	.word	0x24010da4
 800f380:	08017354 	.word	0x08017354
 800f384:	08014fd0 	.word	0x08014fd0
 800f388:	08014fe0 	.word	0x08014fe0
 800f38c:	08017498 	.word	0x08017498

0800f390 <etharp_query>:
{
 800f390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	460e      	mov	r6, r1
 800f396:	b085      	sub	sp, #20
 800f398:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f39a:	4601      	mov	r1, r0
 800f39c:	6830      	ldr	r0, [r6, #0]
{
 800f39e:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f3a0:	f000 fc30 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	f040 8099 	bne.w	800f4dc <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 800f3aa:	6833      	ldr	r3, [r6, #0]
 800f3ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800f3b0:	2ae0      	cmp	r2, #224	; 0xe0
 800f3b2:	f000 8093 	beq.w	800f4dc <etharp_query+0x14c>
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	f000 8090 	beq.w	800f4dc <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f3bc:	462a      	mov	r2, r5
 800f3be:	2101      	movs	r1, #1
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f7ff fd2d 	bl	800ee20 <etharp_find_entry>
  if (i_err < 0) {
 800f3c6:	f1b0 0800 	subs.w	r8, r0, #0
 800f3ca:	db4c      	blt.n	800f466 <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f3cc:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800f3d0:	dc41      	bgt.n	800f456 <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 800f3d2:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f3d6:	f8df a144 	ldr.w	sl, [pc, #324]	; 800f51c <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f3da:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f3de:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800f3e2:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800f3e6:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800f3ea:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f3ee:	b14b      	cbz	r3, 800f404 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 800f3f0:	2f00      	cmp	r7, #0
 800f3f2:	d079      	beq.n	800f4e8 <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f3f4:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 800f3f6:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f3fa:	d81a      	bhi.n	800f432 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f3fc:	d038      	beq.n	800f470 <etharp_query+0xe0>
}
 800f3fe:	b005      	add	sp, #20
 800f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f404:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f406:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800f408:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f40c:	4621      	mov	r1, r4
 800f40e:	9303      	str	r3, [sp, #12]
 800f410:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f412:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f416:	4b3b      	ldr	r3, [pc, #236]	; (800f504 <etharp_query+0x174>)
 800f418:	4a3b      	ldr	r2, [pc, #236]	; (800f508 <etharp_query+0x178>)
 800f41a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f41c:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4623      	mov	r3, r4
 800f422:	f7ff fdb5 	bl	800ef90 <etharp_raw>
    if (q == NULL) {
 800f426:	2f00      	cmp	r7, #0
 800f428:	d0e9      	beq.n	800f3fe <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f42a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d9e4      	bls.n	800f3fc <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f432:	2318      	movs	r3, #24
 800f434:	4622      	mov	r2, r4
 800f436:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f43a:	4639      	mov	r1, r7
 800f43c:	fb03 a308 	mla	r3, r3, r8, sl
 800f440:	4628      	mov	r0, r5
 800f442:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800f444:	4c31      	ldr	r4, [pc, #196]	; (800f50c <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f446:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800f448:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f44c:	f001 f8a4 	bl	8010598 <ethernet_output>
}
 800f450:	b005      	add	sp, #20
 800f452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f456:	4b2e      	ldr	r3, [pc, #184]	; (800f510 <etharp_query+0x180>)
 800f458:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f45c:	492d      	ldr	r1, [pc, #180]	; (800f514 <etharp_query+0x184>)
 800f45e:	482e      	ldr	r0, [pc, #184]	; (800f518 <etharp_query+0x188>)
 800f460:	f003 f846 	bl	80124f0 <iprintf>
 800f464:	e7b5      	b.n	800f3d2 <etharp_query+0x42>
    return (err_t)i_err;
 800f466:	fa4f f088 	sxtb.w	r0, r8
}
 800f46a:	b005      	add	sp, #20
 800f46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f470:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f472:	4d27      	ldr	r5, [pc, #156]	; (800f510 <etharp_query+0x180>)
 800f474:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800f520 <etharp_query+0x190>
 800f478:	4e27      	ldr	r6, [pc, #156]	; (800f518 <etharp_query+0x188>)
 800f47a:	e004      	b.n	800f486 <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 800f47c:	7b23      	ldrb	r3, [r4, #12]
 800f47e:	065a      	lsls	r2, r3, #25
 800f480:	d412      	bmi.n	800f4a8 <etharp_query+0x118>
      p = p->next;
 800f482:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800f484:	b334      	cbz	r4, 800f4d4 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f486:	8962      	ldrh	r2, [r4, #10]
 800f488:	8923      	ldrh	r3, [r4, #8]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d1f6      	bne.n	800f47c <etharp_query+0xec>
 800f48e:	6822      	ldr	r2, [r4, #0]
 800f490:	462b      	mov	r3, r5
 800f492:	b132      	cbz	r2, 800f4a2 <etharp_query+0x112>
 800f494:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f498:	4649      	mov	r1, r9
 800f49a:	4630      	mov	r0, r6
 800f49c:	f003 f828 	bl	80124f0 <iprintf>
 800f4a0:	e7ec      	b.n	800f47c <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 800f4a2:	7b23      	ldrb	r3, [r4, #12]
 800f4a4:	065b      	lsls	r3, r3, #25
 800f4a6:	d515      	bpl.n	800f4d4 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f4a8:	463a      	mov	r2, r7
 800f4aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f4ae:	200e      	movs	r0, #14
 800f4b0:	f7fb f8a2 	bl	800a5f8 <pbuf_clone>
    if (p != NULL) {
 800f4b4:	4607      	mov	r7, r0
 800f4b6:	b1a0      	cbz	r0, 800f4e2 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 800f4b8:	eb0b 0308 	add.w	r3, fp, r8
 800f4bc:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 800f4c0:	b108      	cbz	r0, 800f4c6 <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 800f4c2:	f7fa fe51 	bl	800a168 <pbuf_free>
      arp_table[i].q = p;
 800f4c6:	44d8      	add	r8, fp
      result = ERR_OK;
 800f4c8:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800f4ca:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 800f4ce:	b005      	add	sp, #20
 800f4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800f4d4:	4638      	mov	r0, r7
 800f4d6:	f7fa ffc9 	bl	800a46c <pbuf_ref>
    if (p != NULL) {
 800f4da:	e7ed      	b.n	800f4b8 <etharp_query+0x128>
    return ERR_ARG;
 800f4dc:	f06f 000f 	mvn.w	r0, #15
 800f4e0:	e78d      	b.n	800f3fe <etharp_query+0x6e>
      result = ERR_MEM;
 800f4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e6:	e78a      	b.n	800f3fe <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4e8:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	4f05      	ldr	r7, [pc, #20]	; (800f504 <etharp_query+0x174>)
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800f4f6:	e9cd 2700 	strd	r2, r7, [sp]
 800f4fa:	4623      	mov	r3, r4
 800f4fc:	4a02      	ldr	r2, [pc, #8]	; (800f508 <etharp_query+0x178>)
 800f4fe:	f7ff fd47 	bl	800ef90 <etharp_raw>
    if (q == NULL) {
 800f502:	e77c      	b.n	800f3fe <etharp_query+0x6e>
 800f504:	08017830 	.word	0x08017830
 800f508:	08017828 	.word	0x08017828
 800f50c:	24010e94 	.word	0x24010e94
 800f510:	08017354 	.word	0x08017354
 800f514:	080174bc 	.word	0x080174bc
 800f518:	08014fe0 	.word	0x08014fe0
 800f51c:	24010da4 	.word	0x24010da4
 800f520:	080174cc 	.word	0x080174cc

0800f524 <etharp_output>:
{
 800f524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f526:	4605      	mov	r5, r0
 800f528:	b085      	sub	sp, #20
 800f52a:	460f      	mov	r7, r1
 800f52c:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 800f52e:	f7f5 fc2d 	bl	8004d8c <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f532:	2d00      	cmp	r5, #0
 800f534:	f000 8081 	beq.w	800f63a <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f538:	2f00      	cmp	r7, #0
 800f53a:	d06d      	beq.n	800f618 <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f53c:	2e00      	cmp	r6, #0
 800f53e:	d074      	beq.n	800f62a <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f540:	4629      	mov	r1, r5
 800f542:	6830      	ldr	r0, [r6, #0]
 800f544:	f000 fb5e 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d163      	bne.n	800f614 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f54c:	6833      	ldr	r3, [r6, #0]
 800f54e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f552:	2ae0      	cmp	r2, #224	; 0xe0
 800f554:	d039      	beq.n	800f5ca <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f556:	686a      	ldr	r2, [r5, #4]
 800f558:	68a9      	ldr	r1, [r5, #8]
 800f55a:	405a      	eors	r2, r3
 800f55c:	420a      	tst	r2, r1
 800f55e:	d009      	beq.n	800f574 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800f560:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f562:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f566:	4293      	cmp	r3, r2
 800f568:	d004      	beq.n	800f574 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f56a:	68eb      	ldr	r3, [r5, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d076      	beq.n	800f65e <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800f570:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f574:	f8df c108 	ldr.w	ip, [pc, #264]	; 800f680 <etharp_output+0x15c>
 800f578:	4b3a      	ldr	r3, [pc, #232]	; (800f664 <etharp_output+0x140>)
 800f57a:	f89c 2000 	ldrb.w	r2, [ip]
 800f57e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800f582:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f586:	7d19      	ldrb	r1, [r3, #20]
 800f588:	2901      	cmp	r1, #1
 800f58a:	d902      	bls.n	800f592 <etharp_output+0x6e>
 800f58c:	6899      	ldr	r1, [r3, #8]
 800f58e:	42a9      	cmp	r1, r5
 800f590:	d05e      	beq.n	800f650 <etharp_output+0x12c>
 800f592:	4c34      	ldr	r4, [pc, #208]	; (800f664 <etharp_output+0x140>)
{
 800f594:	2300      	movs	r3, #0
 800f596:	e003      	b.n	800f5a0 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f598:	2b0a      	cmp	r3, #10
 800f59a:	f104 0418 	add.w	r4, r4, #24
 800f59e:	d031      	beq.n	800f604 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f5a0:	7d20      	ldrb	r0, [r4, #20]
 800f5a2:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f5a4:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f5a6:	2801      	cmp	r0, #1
 800f5a8:	d9f6      	bls.n	800f598 <etharp_output+0x74>
 800f5aa:	68a1      	ldr	r1, [r4, #8]
 800f5ac:	42a9      	cmp	r1, r5
 800f5ae:	d1f3      	bne.n	800f598 <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 800f5b0:	6830      	ldr	r0, [r6, #0]
 800f5b2:	6861      	ldr	r1, [r4, #4]
 800f5b4:	4288      	cmp	r0, r1
 800f5b6:	d1ef      	bne.n	800f598 <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 800f5b8:	4639      	mov	r1, r7
 800f5ba:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800f5bc:	f88c 2000 	strb.w	r2, [ip]
}
 800f5c0:	b005      	add	sp, #20
 800f5c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800f5c6:	f7ff bd57 	b.w	800f078 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f5ca:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f5cc:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f5ce:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f5d4:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f5d8:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f5da:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f5de:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f5e0:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f5e4:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800f5e8:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f5ea:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f5ee:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f5f2:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	9400      	str	r4, [sp, #0]
 800f5fc:	f000 ffcc 	bl	8010598 <ethernet_output>
}
 800f600:	b005      	add	sp, #20
 800f602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800f604:	463a      	mov	r2, r7
 800f606:	4631      	mov	r1, r6
 800f608:	4628      	mov	r0, r5
}
 800f60a:	b005      	add	sp, #20
 800f60c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800f610:	f7ff bebe 	b.w	800f390 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800f614:	4b14      	ldr	r3, [pc, #80]	; (800f668 <etharp_output+0x144>)
 800f616:	e7ea      	b.n	800f5ee <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f618:	4b14      	ldr	r3, [pc, #80]	; (800f66c <etharp_output+0x148>)
 800f61a:	f240 321f 	movw	r2, #799	; 0x31f
 800f61e:	4914      	ldr	r1, [pc, #80]	; (800f670 <etharp_output+0x14c>)
 800f620:	4814      	ldr	r0, [pc, #80]	; (800f674 <etharp_output+0x150>)
 800f622:	f002 ff65 	bl	80124f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f626:	2e00      	cmp	r6, #0
 800f628:	d18a      	bne.n	800f540 <etharp_output+0x1c>
 800f62a:	4b10      	ldr	r3, [pc, #64]	; (800f66c <etharp_output+0x148>)
 800f62c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f630:	4911      	ldr	r1, [pc, #68]	; (800f678 <etharp_output+0x154>)
 800f632:	4810      	ldr	r0, [pc, #64]	; (800f674 <etharp_output+0x150>)
 800f634:	f002 ff5c 	bl	80124f0 <iprintf>
 800f638:	e782      	b.n	800f540 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f63a:	4b0c      	ldr	r3, [pc, #48]	; (800f66c <etharp_output+0x148>)
 800f63c:	f240 321e 	movw	r2, #798	; 0x31e
 800f640:	490e      	ldr	r1, [pc, #56]	; (800f67c <etharp_output+0x158>)
 800f642:	480c      	ldr	r0, [pc, #48]	; (800f674 <etharp_output+0x150>)
 800f644:	f002 ff54 	bl	80124f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f648:	2f00      	cmp	r7, #0
 800f64a:	f47f af77 	bne.w	800f53c <etharp_output+0x18>
 800f64e:	e7e3      	b.n	800f618 <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	6831      	ldr	r1, [r6, #0]
 800f654:	4299      	cmp	r1, r3
 800f656:	d19c      	bne.n	800f592 <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f658:	4639      	mov	r1, r7
 800f65a:	4628      	mov	r0, r5
 800f65c:	e7b0      	b.n	800f5c0 <etharp_output+0x9c>
            return ERR_RTE;
 800f65e:	f06f 0003 	mvn.w	r0, #3
 800f662:	e7cd      	b.n	800f600 <etharp_output+0xdc>
 800f664:	24010da4 	.word	0x24010da4
 800f668:	08017828 	.word	0x08017828
 800f66c:	08017354 	.word	0x08017354
 800f670:	080174e8 	.word	0x080174e8
 800f674:	08014fe0 	.word	0x08014fe0
 800f678:	08017478 	.word	0x08017478
 800f67c:	08014fd0 	.word	0x08014fd0
 800f680:	24010e94 	.word	0x24010e94

0800f684 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f684:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f686:	2301      	movs	r3, #1
{
 800f688:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f68a:	4c07      	ldr	r4, [pc, #28]	; (800f6a8 <etharp_request+0x24>)
 800f68c:	4a07      	ldr	r2, [pc, #28]	; (800f6ac <etharp_request+0x28>)
 800f68e:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f690:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f692:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800f696:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800f69a:	9400      	str	r4, [sp, #0]
 800f69c:	4619      	mov	r1, r3
 800f69e:	f7ff fc77 	bl	800ef90 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800f6a2:	b004      	add	sp, #16
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	bf00      	nop
 800f6a8:	08017830 	.word	0x08017830
 800f6ac:	08017828 	.word	0x08017828

0800f6b0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b2:	460e      	mov	r6, r1
 800f6b4:	b087      	sub	sp, #28
 800f6b6:	4617      	mov	r7, r2
 800f6b8:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f6ba:	2124      	movs	r1, #36	; 0x24
 800f6bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6c0:	2022      	movs	r0, #34	; 0x22
 800f6c2:	f7fa fdc1 	bl	800a248 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800f6c6:	b3a8      	cbz	r0, 800f734 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f6c8:	8943      	ldrh	r3, [r0, #10]
 800f6ca:	4605      	mov	r5, r0
 800f6cc:	2b23      	cmp	r3, #35	; 0x23
 800f6ce:	d933      	bls.n	800f738 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f6d0:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f6d2:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800f6d4:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800f6d6:	2600      	movs	r6, #0
  icmphdr->code = code;
 800f6d8:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800f6da:	7126      	strb	r6, [r4, #4]
 800f6dc:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800f6de:	71a6      	strb	r6, [r4, #6]
 800f6e0:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	6859      	ldr	r1, [r3, #4]
 800f6e6:	689a      	ldr	r2, [r3, #8]
 800f6e8:	68df      	ldr	r7, [r3, #12]
 800f6ea:	60a0      	str	r0, [r4, #8]
 800f6ec:	6167      	str	r7, [r4, #20]
 800f6ee:	60e1      	str	r1, [r4, #12]
 800f6f0:	6122      	str	r2, [r4, #16]
 800f6f2:	6918      	ldr	r0, [r3, #16]
 800f6f4:	6959      	ldr	r1, [r3, #20]
 800f6f6:	699a      	ldr	r2, [r3, #24]
 800f6f8:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f6fa:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f6fc:	61e1      	str	r1, [r4, #28]
 800f6fe:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800f704:	f000 f8d6 	bl	800f8b4 <ip4_route>
#endif
  if (netif != NULL) {
 800f708:	4607      	mov	r7, r0
 800f70a:	b180      	cbz	r0, 800f72e <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f70c:	8969      	ldrh	r1, [r5, #10]
 800f70e:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800f710:	70a6      	strb	r6, [r4, #2]
 800f712:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f714:	f7f9 fdc6 	bl	80092a4 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f718:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f71a:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f71c:	aa05      	add	r2, sp, #20
 800f71e:	4631      	mov	r1, r6
 800f720:	4628      	mov	r0, r5
 800f722:	9600      	str	r6, [sp, #0]
 800f724:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800f728:	23ff      	movs	r3, #255	; 0xff
 800f72a:	f000 fa59 	bl	800fbe0 <ip4_output_if>
  }
  pbuf_free(q);
 800f72e:	4628      	mov	r0, r5
 800f730:	f7fa fd1a 	bl	800a168 <pbuf_free>
}
 800f734:	b007      	add	sp, #28
 800f736:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f738:	4b03      	ldr	r3, [pc, #12]	; (800f748 <icmp_send_response+0x98>)
 800f73a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f73e:	4903      	ldr	r1, [pc, #12]	; (800f74c <icmp_send_response+0x9c>)
 800f740:	4803      	ldr	r0, [pc, #12]	; (800f750 <icmp_send_response+0xa0>)
 800f742:	f002 fed5 	bl	80124f0 <iprintf>
 800f746:	e7c3      	b.n	800f6d0 <icmp_send_response+0x20>
 800f748:	080174f4 	.word	0x080174f4
 800f74c:	0801752c 	.word	0x0801752c
 800f750:	08014fe0 	.word	0x08014fe0

0800f754 <icmp_input>:
{
 800f754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800f758:	4f4c      	ldr	r7, [pc, #304]	; (800f88c <icmp_input+0x138>)
{
 800f75a:	b087      	sub	sp, #28
 800f75c:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800f75e:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800f762:	f898 4000 	ldrb.w	r4, [r8]
 800f766:	f004 040f 	and.w	r4, r4, #15
 800f76a:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800f76c:	2c13      	cmp	r4, #19
 800f76e:	d913      	bls.n	800f798 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800f770:	8943      	ldrh	r3, [r0, #10]
 800f772:	2b03      	cmp	r3, #3
 800f774:	d910      	bls.n	800f798 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800f776:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	2b08      	cmp	r3, #8
 800f77c:	d10c      	bne.n	800f798 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f77e:	6978      	ldr	r0, [r7, #20]
 800f780:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800f784:	2be0      	cmp	r3, #224	; 0xe0
 800f786:	d007      	beq.n	800f798 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f788:	460e      	mov	r6, r1
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	f000 fa3a 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800f790:	b910      	cbnz	r0, 800f798 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f792:	892b      	ldrh	r3, [r5, #8]
 800f794:	2b07      	cmp	r3, #7
 800f796:	d805      	bhi.n	800f7a4 <icmp_input+0x50>
  pbuf_free(p);
 800f798:	4628      	mov	r0, r5
}
 800f79a:	b007      	add	sp, #28
 800f79c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800f7a0:	f7fa bce2 	b.w	800a168 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f7f9 fd83 	bl	80092b0 <inet_chksum_pbuf>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d1f4      	bne.n	800f798 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f7ae:	f104 010e 	add.w	r1, r4, #14
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	9105      	str	r1, [sp, #20]
 800f7b6:	f7fa fc37 	bl	800a028 <pbuf_add_header>
 800f7ba:	9905      	ldr	r1, [sp, #20]
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d04b      	beq.n	800f858 <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f7c0:	892b      	ldrh	r3, [r5, #8]
 800f7c2:	1919      	adds	r1, r3, r4
 800f7c4:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800f7c6:	428b      	cmp	r3, r1
 800f7c8:	d8e6      	bhi.n	800f798 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f7ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7ce:	200e      	movs	r0, #14
 800f7d0:	f7fa fd3a 	bl	800a248 <pbuf_alloc>
        if (r == NULL) {
 800f7d4:	4681      	mov	r9, r0
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d0de      	beq.n	800f798 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f7da:	8942      	ldrh	r2, [r0, #10]
 800f7dc:	f104 0308 	add.w	r3, r4, #8
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d345      	bcc.n	800f870 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800f7e4:	4641      	mov	r1, r8
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	6840      	ldr	r0, [r0, #4]
 800f7ea:	f003 f842 	bl	8012872 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	4648      	mov	r0, r9
 800f7f2:	f7fa fc4d 	bl	800a090 <pbuf_remove_header>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d13e      	bne.n	800f878 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	4648      	mov	r0, r9
 800f7fe:	f7fa fe8f 	bl	800a520 <pbuf_copy>
 800f802:	2800      	cmp	r0, #0
 800f804:	d134      	bne.n	800f870 <icmp_input+0x11c>
        pbuf_free(p);
 800f806:	4628      	mov	r0, r5
 800f808:	464d      	mov	r5, r9
 800f80a:	f7fa fcad 	bl	800a168 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800f80e:	4621      	mov	r1, r4
 800f810:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f812:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800f814:	f7fa fc08 	bl	800a028 <pbuf_add_header>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d1bd      	bne.n	800f798 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f81c:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f81e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f82a:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f82c:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f82e:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f830:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800f832:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800f836:	bf8c      	ite	hi
 800f838:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800f83a:	3308      	addls	r3, #8
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f840:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800f842:	728a      	strb	r2, [r1, #10]
 800f844:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f846:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f848:	2101      	movs	r1, #1
 800f84a:	9200      	str	r2, [sp, #0]
 800f84c:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800f850:	490f      	ldr	r1, [pc, #60]	; (800f890 <icmp_input+0x13c>)
 800f852:	f000 f9c5 	bl	800fbe0 <ip4_output_if>
  pbuf_free(p);
 800f856:	e79f      	b.n	800f798 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f858:	4628      	mov	r0, r5
 800f85a:	f7fa fc19 	bl	800a090 <pbuf_remove_header>
 800f85e:	2800      	cmp	r0, #0
 800f860:	d0d5      	beq.n	800f80e <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f862:	4b0c      	ldr	r3, [pc, #48]	; (800f894 <icmp_input+0x140>)
 800f864:	22c7      	movs	r2, #199	; 0xc7
 800f866:	490c      	ldr	r1, [pc, #48]	; (800f898 <icmp_input+0x144>)
 800f868:	480c      	ldr	r0, [pc, #48]	; (800f89c <icmp_input+0x148>)
 800f86a:	f002 fe41 	bl	80124f0 <iprintf>
          goto icmperr;
 800f86e:	e793      	b.n	800f798 <icmp_input+0x44>
          pbuf_free(r);
 800f870:	4648      	mov	r0, r9
 800f872:	f7fa fc79 	bl	800a168 <pbuf_free>
          goto icmperr;
 800f876:	e78f      	b.n	800f798 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f878:	4b06      	ldr	r3, [pc, #24]	; (800f894 <icmp_input+0x140>)
 800f87a:	22b6      	movs	r2, #182	; 0xb6
 800f87c:	4908      	ldr	r1, [pc, #32]	; (800f8a0 <icmp_input+0x14c>)
 800f87e:	4807      	ldr	r0, [pc, #28]	; (800f89c <icmp_input+0x148>)
 800f880:	f002 fe36 	bl	80124f0 <iprintf>
          pbuf_free(r);
 800f884:	4648      	mov	r0, r9
 800f886:	f7fa fc6f 	bl	800a168 <pbuf_free>
          goto icmperr;
 800f88a:	e785      	b.n	800f798 <icmp_input+0x44>
 800f88c:	2400a278 	.word	0x2400a278
 800f890:	2400a28c 	.word	0x2400a28c
 800f894:	080174f4 	.word	0x080174f4
 800f898:	08017590 	.word	0x08017590
 800f89c:	08014fe0 	.word	0x08014fe0
 800f8a0:	08017558 	.word	0x08017558

0800f8a4 <icmp_dest_unreach>:
{
 800f8a4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800f8a6:	2103      	movs	r1, #3
 800f8a8:	f7ff bf02 	b.w	800f6b0 <icmp_send_response>

0800f8ac <icmp_time_exceeded>:
{
 800f8ac:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800f8ae:	210b      	movs	r1, #11
 800f8b0:	f7ff befe 	b.w	800f6b0 <icmp_send_response>

0800f8b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800f8b8:	f7f5 fa68 	bl	8004d8c <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f8bc:	4b15      	ldr	r3, [pc, #84]	; (800f914 <ip4_route+0x60>)
 800f8be:	6818      	ldr	r0, [r3, #0]
 800f8c0:	b1a0      	cbz	r0, 800f8ec <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f8c2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800f8c6:	07d9      	lsls	r1, r3, #31
 800f8c8:	d50d      	bpl.n	800f8e6 <ip4_route+0x32>
 800f8ca:	075a      	lsls	r2, r3, #29
 800f8cc:	d50b      	bpl.n	800f8e6 <ip4_route+0x32>
 800f8ce:	6842      	ldr	r2, [r0, #4]
 800f8d0:	b14a      	cbz	r2, 800f8e6 <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f8d2:	6821      	ldr	r1, [r4, #0]
 800f8d4:	6885      	ldr	r5, [r0, #8]
 800f8d6:	404a      	eors	r2, r1
 800f8d8:	422a      	tst	r2, r5
 800f8da:	d016      	beq.n	800f90a <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f8dc:	079b      	lsls	r3, r3, #30
 800f8de:	d402      	bmi.n	800f8e6 <ip4_route+0x32>
 800f8e0:	68c3      	ldr	r3, [r0, #12]
 800f8e2:	4299      	cmp	r1, r3
 800f8e4:	d011      	beq.n	800f90a <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800f8e6:	6800      	ldr	r0, [r0, #0]
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	d1ea      	bne.n	800f8c2 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f8ec:	4b0a      	ldr	r3, [pc, #40]	; (800f918 <ip4_route+0x64>)
 800f8ee:	6818      	ldr	r0, [r3, #0]
 800f8f0:	b158      	cbz	r0, 800f90a <ip4_route+0x56>
 800f8f2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800f8f6:	f003 0305 	and.w	r3, r3, #5
 800f8fa:	2b05      	cmp	r3, #5
 800f8fc:	d106      	bne.n	800f90c <ip4_route+0x58>
 800f8fe:	6843      	ldr	r3, [r0, #4]
 800f900:	b133      	cbz	r3, 800f910 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f902:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f904:	2b7f      	cmp	r3, #127	; 0x7f
 800f906:	bf08      	it	eq
 800f908:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800f90a:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800f90c:	2000      	movs	r0, #0
}
 800f90e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800f910:	4618      	mov	r0, r3
}
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	24010d30 	.word	0x24010d30
 800f918:	24010d2c 	.word	0x24010d2c

0800f91c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f920:	4604      	mov	r4, r0
 800f922:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800f924:	f7f5 fa32 	bl	8004d8c <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f928:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800f92a:	783b      	ldrb	r3, [r7, #0]
 800f92c:	091a      	lsrs	r2, r3, #4
 800f92e:	2a04      	cmp	r2, #4
 800f930:	f040 808d 	bne.w	800fa4e <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f934:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f938:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f93a:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f93e:	f7f9 fc71 	bl	8009224 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f942:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f944:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f946:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800f948:	4283      	cmp	r3, r0
 800f94a:	f200 8086 	bhi.w	800fa5a <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f94e:	8963      	ldrh	r3, [r4, #10]
 800f950:	42ab      	cmp	r3, r5
 800f952:	d37c      	bcc.n	800fa4e <ip4_input+0x132>
 800f954:	8923      	ldrh	r3, [r4, #8]
 800f956:	4543      	cmp	r3, r8
 800f958:	d379      	bcc.n	800fa4e <ip4_input+0x132>
 800f95a:	2d13      	cmp	r5, #19
 800f95c:	d977      	bls.n	800fa4e <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800fad4 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f968:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f96c:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f974:	d076      	beq.n	800fa64 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f976:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800f97a:	07d2      	lsls	r2, r2, #31
 800f97c:	d503      	bpl.n	800f986 <ip4_input+0x6a>
 800f97e:	6872      	ldr	r2, [r6, #4]
 800f980:	2a00      	cmp	r2, #0
 800f982:	f040 8082 	bne.w	800fa8a <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f986:	b2db      	uxtb	r3, r3
 800f988:	2b7f      	cmp	r3, #127	; 0x7f
 800f98a:	f000 8088 	beq.w	800fa9e <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f98e:	4b50      	ldr	r3, [pc, #320]	; (800fad0 <ip4_input+0x1b4>)
 800f990:	681d      	ldr	r5, [r3, #0]
 800f992:	b92d      	cbnz	r5, 800f9a0 <ip4_input+0x84>
 800f994:	e083      	b.n	800fa9e <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f996:	f000 f935 	bl	800fc04 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f99a:	b978      	cbnz	r0, 800f9bc <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 800f99c:	682d      	ldr	r5, [r5, #0]
 800f99e:	b16d      	cbz	r5, 800f9bc <ip4_input+0xa0>
          if (netif == inp) {
 800f9a0:	42ae      	cmp	r6, r5
 800f9a2:	d0fb      	beq.n	800f99c <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f9a4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800f9a8:	07db      	lsls	r3, r3, #31
 800f9aa:	d5f7      	bpl.n	800f99c <ip4_input+0x80>
 800f9ac:	686b      	ldr	r3, [r5, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d0f4      	beq.n	800f99c <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f9b2:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f9b6:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f9b8:	4283      	cmp	r3, r0
 800f9ba:	d1ec      	bne.n	800f996 <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f9bc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	f000 f91f 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d141      	bne.n	800fa4e <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f9ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f9ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f9d2:	2be0      	cmp	r3, #224	; 0xe0
 800f9d4:	d03b      	beq.n	800fa4e <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f9d6:	b3d5      	cbz	r5, 800fa4e <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f9d8:	88fb      	ldrh	r3, [r7, #6]
 800f9da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d14b      	bne.n	800fa7a <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800f9e2:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800f9ea:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f9ee:	783b      	ldrb	r3, [r7, #0]
 800f9f0:	f003 030f 	and.w	r3, r3, #15
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f9fa:	f7fa fb49 	bl	800a090 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f9fe:	7a7b      	ldrb	r3, [r7, #9]
 800fa00:	2b06      	cmp	r3, #6
 800fa02:	d05a      	beq.n	800faba <ip4_input+0x19e>
 800fa04:	2b11      	cmp	r3, #17
 800fa06:	d053      	beq.n	800fab0 <ip4_input+0x194>
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d04c      	beq.n	800faa6 <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800fa12:	f000 f8f7 	bl	800fc04 <ip4_addr_isbroadcast_u32>
 800fa16:	b968      	cbnz	r0, 800fa34 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa18:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fa1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fa20:	2be0      	cmp	r3, #224	; 0xe0
 800fa22:	d007      	beq.n	800fa34 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fa24:	4649      	mov	r1, r9
 800fa26:	4620      	mov	r0, r4
 800fa28:	f7fa fb66 	bl	800a0f8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fa2c:	2102      	movs	r1, #2
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f7ff ff38 	bl	800f8a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fa34:	4620      	mov	r0, r4
 800fa36:	f7fa fb97 	bl	800a168 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fa3a:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800fa3c:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800fa40:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fa44:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800fa48:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800fa4c:	e002      	b.n	800fa54 <ip4_input+0x138>
    pbuf_free(p);
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f7fa fb8a 	bl	800a168 <pbuf_free>
}
 800fa54:	2000      	movs	r0, #0
 800fa56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f7fa fca1 	bl	800a3a4 <pbuf_realloc>
 800fa62:	e774      	b.n	800f94e <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fa64:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800fa68:	f015 0501 	ands.w	r5, r5, #1
 800fa6c:	d0a8      	beq.n	800f9c0 <ip4_input+0xa4>
 800fa6e:	6873      	ldr	r3, [r6, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	bf14      	ite	ne
 800fa74:	4635      	movne	r5, r6
 800fa76:	2500      	moveq	r5, #0
 800fa78:	e7a2      	b.n	800f9c0 <ip4_input+0xa4>
    p = ip4_reass(p);
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 f9ec 	bl	800fe58 <ip4_reass>
    if (p == NULL) {
 800fa80:	4604      	mov	r4, r0
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d0e6      	beq.n	800fa54 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 800fa86:	6847      	ldr	r7, [r0, #4]
 800fa88:	e7ab      	b.n	800f9e2 <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d01a      	beq.n	800fac4 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fa8e:	4618      	mov	r0, r3
 800fa90:	4631      	mov	r1, r6
 800fa92:	f000 f8b7 	bl	800fc04 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fa96:	b9b8      	cbnz	r0, 800fac8 <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fa98:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fa9c:	e773      	b.n	800f986 <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa9e:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800faa2:	2500      	movs	r5, #0
 800faa4:	e78c      	b.n	800f9c0 <ip4_input+0xa4>
        icmp_input(p, inp);
 800faa6:	4631      	mov	r1, r6
 800faa8:	4620      	mov	r0, r4
 800faaa:	f7ff fe53 	bl	800f754 <icmp_input>
        break;
 800faae:	e7c4      	b.n	800fa3a <ip4_input+0x11e>
        udp_input(p, inp);
 800fab0:	4631      	mov	r1, r6
 800fab2:	4620      	mov	r0, r4
 800fab4:	f7fe ffb2 	bl	800ea1c <udp_input>
        break;
 800fab8:	e7bf      	b.n	800fa3a <ip4_input+0x11e>
        tcp_input(p, inp);
 800faba:	4631      	mov	r1, r6
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7fc fe97 	bl	800c7f0 <tcp_input>
        break;
 800fac2:	e7ba      	b.n	800fa3a <ip4_input+0x11e>
 800fac4:	4635      	mov	r5, r6
 800fac6:	e77b      	b.n	800f9c0 <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fac8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800facc:	4635      	mov	r5, r6
 800face:	e777      	b.n	800f9c0 <ip4_input+0xa4>
 800fad0:	24010d30 	.word	0x24010d30
 800fad4:	2400a278 	.word	0x2400a278

0800fad8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	4604      	mov	r4, r0
 800fade:	b083      	sub	sp, #12
 800fae0:	4699      	mov	r9, r3
 800fae2:	460f      	mov	r7, r1
 800fae4:	4616      	mov	r6, r2
 800fae6:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800faea:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800faee:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800faf2:	f7f5 f94b 	bl	8004d8c <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800faf6:	7ba3      	ldrb	r3, [r4, #14]
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d13d      	bne.n	800fb78 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fafc:	2e00      	cmp	r6, #0
 800fafe:	d044      	beq.n	800fb8a <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fb00:	2114      	movs	r1, #20
 800fb02:	4620      	mov	r0, r4
 800fb04:	f7fa fa90 	bl	800a028 <pbuf_add_header>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d159      	bne.n	800fbc0 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fb0c:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800fb0e:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fb10:	2b13      	cmp	r3, #19
 800fb12:	d942      	bls.n	800fb9a <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fb14:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fb18:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800fb1a:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800fb1e:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fb20:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800fb22:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800fb26:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fb28:	8920      	ldrh	r0, [r4, #8]
 800fb2a:	f7f9 fb7b 	bl	8009224 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fb2e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800fbdc <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800fb32:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fb34:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fb36:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800fb3a:	71ab      	strb	r3, [r5, #6]
 800fb3c:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fb3e:	f7f9 fb71 	bl	8009224 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fb42:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fb46:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800fb48:	3301      	adds	r3, #1
 800fb4a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800fb4e:	b367      	cbz	r7, 800fbaa <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fb54:	2300      	movs	r3, #0
 800fb56:	72ab      	strb	r3, [r5, #10]
 800fb58:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fb5a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800fb5e:	b113      	cbz	r3, 800fb66 <ip4_output_if_src+0x8e>
 800fb60:	8922      	ldrh	r2, [r4, #8]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d824      	bhi.n	800fbb0 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fb66:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fb6a:	4632      	mov	r2, r6
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	4640      	mov	r0, r8
 800fb70:	4798      	blx	r3
}
 800fb72:	b003      	add	sp, #12
 800fb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fb78:	4b13      	ldr	r3, [pc, #76]	; (800fbc8 <ip4_output_if_src+0xf0>)
 800fb7a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fb7e:	4913      	ldr	r1, [pc, #76]	; (800fbcc <ip4_output_if_src+0xf4>)
 800fb80:	4813      	ldr	r0, [pc, #76]	; (800fbd0 <ip4_output_if_src+0xf8>)
 800fb82:	f002 fcb5 	bl	80124f0 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800fb86:	2e00      	cmp	r6, #0
 800fb88:	d1ba      	bne.n	800fb00 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800fb8a:	8963      	ldrh	r3, [r4, #10]
 800fb8c:	2b13      	cmp	r3, #19
 800fb8e:	d917      	bls.n	800fbc0 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fb90:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800fb92:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800fb98:	e7df      	b.n	800fb5a <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fb9a:	4b0b      	ldr	r3, [pc, #44]	; (800fbc8 <ip4_output_if_src+0xf0>)
 800fb9c:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fba0:	490c      	ldr	r1, [pc, #48]	; (800fbd4 <ip4_output_if_src+0xfc>)
 800fba2:	480b      	ldr	r0, [pc, #44]	; (800fbd0 <ip4_output_if_src+0xf8>)
 800fba4:	f002 fca4 	bl	80124f0 <iprintf>
 800fba8:	e7b4      	b.n	800fb14 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fbaa:	4b0b      	ldr	r3, [pc, #44]	; (800fbd8 <ip4_output_if_src+0x100>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	e7d0      	b.n	800fb52 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800fbb0:	4632      	mov	r2, r6
 800fbb2:	4641      	mov	r1, r8
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f000 fb83 	bl	80102c0 <ip4_frag>
}
 800fbba:	b003      	add	sp, #12
 800fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800fbc0:	f06f 0001 	mvn.w	r0, #1
 800fbc4:	e7d5      	b.n	800fb72 <ip4_output_if_src+0x9a>
 800fbc6:	bf00      	nop
 800fbc8:	080175c4 	.word	0x080175c4
 800fbcc:	080175f8 	.word	0x080175f8
 800fbd0:	08014fe0 	.word	0x08014fe0
 800fbd4:	08017604 	.word	0x08017604
 800fbd8:	08017634 	.word	0x08017634
 800fbdc:	24010e96 	.word	0x24010e96

0800fbe0 <ip4_output_if>:
{
 800fbe0:	b4f0      	push	{r4, r5, r6, r7}
 800fbe2:	9c06      	ldr	r4, [sp, #24]
 800fbe4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800fbe8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fbec:	b11a      	cbz	r2, 800fbf6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800fbee:	b109      	cbz	r1, 800fbf4 <ip4_output_if+0x14>
 800fbf0:	680f      	ldr	r7, [r1, #0]
 800fbf2:	b907      	cbnz	r7, 800fbf6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800fbf4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fbf6:	9504      	str	r5, [sp, #16]
 800fbf8:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800fbfc:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fbfe:	f7ff bf6b 	b.w	800fad8 <ip4_output_if_src>
 800fc02:	bf00      	nop

0800fc04 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fc04:	1e43      	subs	r3, r0, #1
 800fc06:	3303      	adds	r3, #3
 800fc08:	d814      	bhi.n	800fc34 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fc0a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800fc0e:	f013 0302 	ands.w	r3, r3, #2
 800fc12:	d00d      	beq.n	800fc30 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fc14:	684b      	ldr	r3, [r1, #4]
 800fc16:	4283      	cmp	r3, r0
 800fc18:	d00f      	beq.n	800fc3a <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fc1a:	688a      	ldr	r2, [r1, #8]
 800fc1c:	4043      	eors	r3, r0
 800fc1e:	4213      	tst	r3, r2
 800fc20:	d10b      	bne.n	800fc3a <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fc22:	43d3      	mvns	r3, r2
 800fc24:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 800fc28:	1ac3      	subs	r3, r0, r3
 800fc2a:	fab3 f383 	clz	r3, r3
 800fc2e:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	4770      	bx	lr
    return 1;
 800fc34:	2301      	movs	r3, #1
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	4770      	bx	lr
    return 0;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	4770      	bx	lr

0800fc40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fc40:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fc42:	4604      	mov	r4, r0
 800fc44:	b148      	cbz	r0, 800fc5a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800fc46:	6960      	ldr	r0, [r4, #20]
 800fc48:	b108      	cbz	r0, 800fc4e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800fc4a:	f7fa fa8d 	bl	800a168 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800fc4e:	4621      	mov	r1, r4
 800fc50:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800fc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800fc56:	f7f9 bec1 	b.w	80099dc <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fc5a:	4b04      	ldr	r3, [pc, #16]	; (800fc6c <ipfrag_free_pbuf_custom+0x2c>)
 800fc5c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fc60:	4903      	ldr	r1, [pc, #12]	; (800fc70 <ipfrag_free_pbuf_custom+0x30>)
 800fc62:	4804      	ldr	r0, [pc, #16]	; (800fc74 <ipfrag_free_pbuf_custom+0x34>)
 800fc64:	f002 fc44 	bl	80124f0 <iprintf>
 800fc68:	e7ed      	b.n	800fc46 <ipfrag_free_pbuf_custom+0x6>
 800fc6a:	bf00      	nop
 800fc6c:	08017638 	.word	0x08017638
 800fc70:	08017674 	.word	0x08017674
 800fc74:	08014fe0 	.word	0x08014fe0

0800fc78 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fc78:	4281      	cmp	r1, r0
{
 800fc7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7e:	4606      	mov	r6, r0
 800fc80:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fc82:	d075      	beq.n	800fd70 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 800fc84:	b147      	cbz	r7, 800fc98 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	42b3      	cmp	r3, r6
 800fc8a:	d005      	beq.n	800fc98 <ip_reass_free_complete_datagram+0x20>
 800fc8c:	4b40      	ldr	r3, [pc, #256]	; (800fd90 <ip_reass_free_complete_datagram+0x118>)
 800fc8e:	22ad      	movs	r2, #173	; 0xad
 800fc90:	4940      	ldr	r1, [pc, #256]	; (800fd94 <ip_reass_free_complete_datagram+0x11c>)
 800fc92:	4841      	ldr	r0, [pc, #260]	; (800fd98 <ip_reass_free_complete_datagram+0x120>)
 800fc94:	f002 fc2c 	bl	80124f0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fc98:	6875      	ldr	r5, [r6, #4]
 800fc9a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800fc9c:	889a      	ldrh	r2, [r3, #4]
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	d047      	beq.n	800fd32 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 800fca2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fca6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800fd90 <ip_reass_free_complete_datagram+0x118>
 800fcaa:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800fdb0 <ip_reass_free_complete_datagram+0x138>
 800fcae:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800fd98 <ip_reass_free_complete_datagram+0x120>
 800fcb2:	e005      	b.n	800fcc0 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 800fcb4:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800fcb6:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800fcb8:	f7fa fa56 	bl	800a168 <pbuf_free>
  while (p != NULL) {
 800fcbc:	b1b4      	cbz	r4, 800fcec <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800fcbe:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800fcc0:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 800fcc2:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800fcc4:	f7fa fbc6 	bl	800a454 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fcc8:	4458      	add	r0, fp
 800fcca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fcce:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fcd2:	dbef      	blt.n	800fcb4 <ip_reass_free_complete_datagram+0x3c>
 800fcd4:	4653      	mov	r3, sl
 800fcd6:	22cc      	movs	r2, #204	; 0xcc
 800fcd8:	4649      	mov	r1, r9
 800fcda:	4640      	mov	r0, r8
 800fcdc:	f002 fc08 	bl	80124f0 <iprintf>
    pbuf_free(pcur);
 800fce0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800fce2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800fce4:	f7fa fa40 	bl	800a168 <pbuf_free>
  while (p != NULL) {
 800fce8:	2c00      	cmp	r4, #0
 800fcea:	d1e8      	bne.n	800fcbe <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 800fcec:	4b2b      	ldr	r3, [pc, #172]	; (800fd9c <ip_reass_free_complete_datagram+0x124>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4296      	cmp	r6, r2
 800fcf2:	d03a      	beq.n	800fd6a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fcf4:	2f00      	cmp	r7, #0
 800fcf6:	d042      	beq.n	800fd7e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 800fcf8:	6833      	ldr	r3, [r6, #0]
 800fcfa:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fcfc:	4c28      	ldr	r4, [pc, #160]	; (800fda0 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800fcfe:	4631      	mov	r1, r6
 800fd00:	2004      	movs	r0, #4
 800fd02:	f7f9 fe6b 	bl	80099dc <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fd06:	8823      	ldrh	r3, [r4, #0]
 800fd08:	455b      	cmp	r3, fp
 800fd0a:	d305      	bcc.n	800fd18 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fd0c:	eba3 030b 	sub.w	r3, r3, fp
}
 800fd10:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fd12:	8023      	strh	r3, [r4, #0]
}
 800fd14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fd18:	4b1d      	ldr	r3, [pc, #116]	; (800fd90 <ip_reass_free_complete_datagram+0x118>)
 800fd1a:	22d2      	movs	r2, #210	; 0xd2
 800fd1c:	4921      	ldr	r1, [pc, #132]	; (800fda4 <ip_reass_free_complete_datagram+0x12c>)
 800fd1e:	481e      	ldr	r0, [pc, #120]	; (800fd98 <ip_reass_free_complete_datagram+0x120>)
 800fd20:	f002 fbe6 	bl	80124f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fd24:	8823      	ldrh	r3, [r4, #0]
}
 800fd26:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fd28:	eba3 030b 	sub.w	r3, r3, fp
 800fd2c:	8023      	strh	r3, [r4, #0]
}
 800fd2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800fd32:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fd34:	6930      	ldr	r0, [r6, #16]
 800fd36:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800fd38:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fd3a:	68f4      	ldr	r4, [r6, #12]
 800fd3c:	68b2      	ldr	r2, [r6, #8]
 800fd3e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fd40:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fd42:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fd44:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fd46:	601a      	str	r2, [r3, #0]
 800fd48:	605c      	str	r4, [r3, #4]
 800fd4a:	69b2      	ldr	r2, [r6, #24]
 800fd4c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fd4e:	f7ff fdad 	bl	800f8ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fd52:	4628      	mov	r0, r5
 800fd54:	f7fa fb7e 	bl	800a454 <pbuf_clen>
 800fd58:	4683      	mov	fp, r0
    pbuf_free(p);
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	f7fa fa04 	bl	800a168 <pbuf_free>
  p = ipr->p;
 800fd60:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 800fd62:	2d00      	cmp	r5, #0
 800fd64:	d0c2      	beq.n	800fcec <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800fd66:	686b      	ldr	r3, [r5, #4]
 800fd68:	e79d      	b.n	800fca6 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 800fd6a:	6832      	ldr	r2, [r6, #0]
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	e7c5      	b.n	800fcfc <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fd70:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <ip_reass_free_complete_datagram+0x118>)
 800fd72:	22ab      	movs	r2, #171	; 0xab
 800fd74:	490c      	ldr	r1, [pc, #48]	; (800fda8 <ip_reass_free_complete_datagram+0x130>)
 800fd76:	4808      	ldr	r0, [pc, #32]	; (800fd98 <ip_reass_free_complete_datagram+0x120>)
 800fd78:	f002 fbba 	bl	80124f0 <iprintf>
 800fd7c:	e782      	b.n	800fc84 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fd7e:	4b04      	ldr	r3, [pc, #16]	; (800fd90 <ip_reass_free_complete_datagram+0x118>)
 800fd80:	f240 1245 	movw	r2, #325	; 0x145
 800fd84:	4909      	ldr	r1, [pc, #36]	; (800fdac <ip_reass_free_complete_datagram+0x134>)
 800fd86:	4804      	ldr	r0, [pc, #16]	; (800fd98 <ip_reass_free_complete_datagram+0x120>)
 800fd88:	f002 fbb2 	bl	80124f0 <iprintf>
 800fd8c:	e7b4      	b.n	800fcf8 <ip_reass_free_complete_datagram+0x80>
 800fd8e:	bf00      	nop
 800fd90:	08017638 	.word	0x08017638
 800fd94:	0801768c 	.word	0x0801768c
 800fd98:	08014fe0 	.word	0x08014fe0
 800fd9c:	24010e9c 	.word	0x24010e9c
 800fda0:	24010e98 	.word	0x24010e98
 800fda4:	080176dc 	.word	0x080176dc
 800fda8:	08017680 	.word	0x08017680
 800fdac:	080176c0 	.word	0x080176c0
 800fdb0:	080176a0 	.word	0x080176a0

0800fdb4 <ip_reass_remove_oldest_datagram>:
{
 800fdb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800fdb8:	2700      	movs	r7, #0
 800fdba:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800fe24 <ip_reass_remove_oldest_datagram+0x70>
{
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	460e      	mov	r6, r1
    r = reassdatagrams;
 800fdc2:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800fdc6:	b1f3      	cbz	r3, 800fe06 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800fdc8:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fdca:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800fdce:	4621      	mov	r1, r4
    prev = NULL;
 800fdd0:	46a4      	mov	ip, r4
    oldest = NULL;
 800fdd2:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fdd4:	695a      	ldr	r2, [r3, #20]
 800fdd6:	4572      	cmp	r2, lr
 800fdd8:	d018      	beq.n	800fe0c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800fdda:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800fddc:	b120      	cbz	r0, 800fde8 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 800fdde:	f893 901f 	ldrb.w	r9, [r3, #31]
 800fde2:	7fc2      	ldrb	r2, [r0, #31]
 800fde4:	4591      	cmp	r9, r2
 800fde6:	d801      	bhi.n	800fdec <ip_reass_remove_oldest_datagram+0x38>
 800fde8:	4661      	mov	r1, ip
 800fdea:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	469c      	mov	ip, r3
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	2a00      	cmp	r2, #0
 800fdf4:	d1ee      	bne.n	800fdd4 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800fdf6:	b110      	cbz	r0, 800fdfe <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fdf8:	f7ff ff3e 	bl	800fc78 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800fdfc:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fdfe:	42b7      	cmp	r7, r6
 800fe00:	da01      	bge.n	800fe06 <ip_reass_remove_oldest_datagram+0x52>
 800fe02:	2c01      	cmp	r4, #1
 800fe04:	dcdd      	bgt.n	800fdc2 <ip_reass_remove_oldest_datagram+0xe>
}
 800fe06:	4638      	mov	r0, r7
 800fe08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fe0c:	699a      	ldr	r2, [r3, #24]
 800fe0e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800fe12:	454a      	cmp	r2, r9
 800fe14:	d1e1      	bne.n	800fdda <ip_reass_remove_oldest_datagram+0x26>
 800fe16:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800fe1a:	88aa      	ldrh	r2, [r5, #4]
 800fe1c:	4591      	cmp	r9, r2
 800fe1e:	d1dc      	bne.n	800fdda <ip_reass_remove_oldest_datagram+0x26>
 800fe20:	e7e4      	b.n	800fdec <ip_reass_remove_oldest_datagram+0x38>
 800fe22:	bf00      	nop
 800fe24:	24010e9c 	.word	0x24010e9c

0800fe28 <ip_reass_tmr>:
{
 800fe28:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800fe2a:	4b0a      	ldr	r3, [pc, #40]	; (800fe54 <ip_reass_tmr+0x2c>)
 800fe2c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800fe2e:	b140      	cbz	r0, 800fe42 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 800fe30:	2400      	movs	r4, #0
    if (r->timer > 0) {
 800fe32:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 800fe34:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800fe36:	b12b      	cbz	r3, 800fe44 <ip_reass_tmr+0x1c>
 800fe38:	4604      	mov	r4, r0
      r->timer--;
 800fe3a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 800fe3c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d1f7      	bne.n	800fe32 <ip_reass_tmr+0xa>
}
 800fe42:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 800fe44:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800fe46:	4621      	mov	r1, r4
 800fe48:	f7ff ff16 	bl	800fc78 <ip_reass_free_complete_datagram>
      r = r->next;
 800fe4c:	4628      	mov	r0, r5
  while (r != NULL) {
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d1ef      	bne.n	800fe32 <ip_reass_tmr+0xa>
 800fe52:	e7f6      	b.n	800fe42 <ip_reass_tmr+0x1a>
 800fe54:	24010e9c 	.word	0x24010e9c

0800fe58 <ip4_reass>:
{
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800fe5c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800fe60:	b085      	sub	sp, #20
 800fe62:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fe64:	f89a 3000 	ldrb.w	r3, [sl]
 800fe68:	f003 030f 	and.w	r3, r3, #15
 800fe6c:	2b05      	cmp	r3, #5
 800fe6e:	f040 8089 	bne.w	800ff84 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fe72:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800fe76:	f7f9 f9d5 	bl	8009224 <lwip_htons>
 800fe7a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fe7c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800fe80:	f7f9 f9d0 	bl	8009224 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800fe84:	f89a 3000 	ldrb.w	r3, [sl]
 800fe88:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800fe8c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800fe90:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800fe94:	d376      	bcc.n	800ff84 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800fe96:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fe98:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8010184 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 800fe9c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 800fea2:	f7fa fad7 	bl	800a454 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fea6:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800feaa:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800feac:	4403      	add	r3, r0
 800feae:	2b0a      	cmp	r3, #10
 800feb0:	f300 80e5 	bgt.w	801007e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800feb4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010188 <ip4_reass+0x330>
 800feb8:	f8d9 4000 	ldr.w	r4, [r9]
 800febc:	2c00      	cmp	r4, #0
 800febe:	f000 80ec 	beq.w	801009a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fec2:	f8da 200c 	ldr.w	r2, [sl, #12]
 800fec6:	e003      	b.n	800fed0 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fec8:	6824      	ldr	r4, [r4, #0]
 800feca:	2c00      	cmp	r4, #0
 800fecc:	f000 80e5 	beq.w	801009a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fed0:	6963      	ldr	r3, [r4, #20]
 800fed2:	4293      	cmp	r3, r2
 800fed4:	d1f8      	bne.n	800fec8 <ip4_reass+0x70>
 800fed6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800feda:	69a1      	ldr	r1, [r4, #24]
 800fedc:	4299      	cmp	r1, r3
 800fede:	d1f3      	bne.n	800fec8 <ip4_reass+0x70>
 800fee0:	89a1      	ldrh	r1, [r4, #12]
 800fee2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800fee6:	4299      	cmp	r1, r3
 800fee8:	d1ee      	bne.n	800fec8 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800feea:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800feee:	f7f9 f999 	bl	8009224 <lwip_htons>
 800fef2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800fef6:	2800      	cmp	r0, #0
 800fef8:	f000 80a9 	beq.w	801004e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fefc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff00:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800ff04:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff08:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	d108      	bne.n	800ff22 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff10:	9b00      	ldr	r3, [sp, #0]
 800ff12:	18f3      	adds	r3, r6, r3
 800ff14:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ff16:	429e      	cmp	r6, r3
 800ff18:	d812      	bhi.n	800ff40 <ip4_reass+0xe8>
 800ff1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d80e      	bhi.n	800ff40 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ff22:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ff26:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800ff2a:	f7f9 f97b 	bl	8009224 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800ff2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff32:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800ff36:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800ff3a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ff3e:	d229      	bcs.n	800ff94 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800ff40:	6866      	ldr	r6, [r4, #4]
 800ff42:	b9fe      	cbnz	r6, 800ff84 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ff44:	f8d9 3000 	ldr.w	r3, [r9]
 800ff48:	42a3      	cmp	r3, r4
 800ff4a:	d014      	beq.n	800ff76 <ip4_reass+0x11e>
 800ff4c:	4b89      	ldr	r3, [pc, #548]	; (8010174 <ip4_reass+0x31c>)
 800ff4e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ff52:	4989      	ldr	r1, [pc, #548]	; (8010178 <ip4_reass+0x320>)
 800ff54:	4889      	ldr	r0, [pc, #548]	; (801017c <ip4_reass+0x324>)
 800ff56:	f002 facb 	bl	80124f0 <iprintf>
  if (reassdatagrams == ipr) {
 800ff5a:	f8d9 3000 	ldr.w	r3, [r9]
 800ff5e:	429c      	cmp	r4, r3
 800ff60:	d009      	beq.n	800ff76 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ff62:	4b84      	ldr	r3, [pc, #528]	; (8010174 <ip4_reass+0x31c>)
 800ff64:	f240 1245 	movw	r2, #325	; 0x145
 800ff68:	4985      	ldr	r1, [pc, #532]	; (8010180 <ip4_reass+0x328>)
 800ff6a:	4884      	ldr	r0, [pc, #528]	; (801017c <ip4_reass+0x324>)
 800ff6c:	f002 fac0 	bl	80124f0 <iprintf>
    prev->next = ipr->next;
 800ff70:	6823      	ldr	r3, [r4, #0]
 800ff72:	6033      	str	r3, [r6, #0]
 800ff74:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 800ff76:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800ff78:	4621      	mov	r1, r4
 800ff7a:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800ff7c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800ff80:	f7f9 fd2c 	bl	80099dc <memp_free>
  pbuf_free(p);
 800ff84:	4628      	mov	r0, r5
  return NULL;
 800ff86:	2600      	movs	r6, #0
  pbuf_free(p);
 800ff88:	f7fa f8ee 	bl	800a168 <pbuf_free>
}
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	b005      	add	sp, #20
 800ff90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800ff94:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff96:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 800ff9a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ff9e:	f7f9 f941 	bl	8009224 <lwip_htons>
 800ffa2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ffa6:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ffaa:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ffac:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 800ffb0:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 800ffb4:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 800ffb8:	f8ab 3006 	strh.w	r3, [fp, #6]
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800ffc2:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800ffc4:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800ffc6:	f88b 3000 	strb.w	r3, [fp]
 800ffca:	f88b 3001 	strb.w	r3, [fp, #1]
 800ffce:	f88b 3002 	strb.w	r3, [fp, #2]
 800ffd2:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 800ffd6:	d8b3      	bhi.n	800ff40 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800ffd8:	6861      	ldr	r1, [r4, #4]
 800ffda:	2900      	cmp	r1, #0
 800ffdc:	f000 80be 	beq.w	801015c <ip4_reass+0x304>
  int valid = 1;
 800ffe0:	f04f 0a01 	mov.w	sl, #1
 800ffe4:	4694      	mov	ip, r2
 800ffe6:	e00e      	b.n	8010006 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 800ffe8:	d0cc      	beq.n	800ff84 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800ffea:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800ffee:	45f4      	cmp	ip, lr
 800fff0:	d3c8      	bcc.n	800ff84 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800fff2:	b122      	cbz	r2, 800fffe <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 800fff4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800fff6:	4282      	cmp	r2, r0
 800fff8:	bf18      	it	ne
 800fffa:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800fffe:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8010000:	2900      	cmp	r1, #0
 8010002:	f000 8084 	beq.w	801010e <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010006:	461a      	mov	r2, r3
 8010008:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 801000a:	8898      	ldrh	r0, [r3, #4]
 801000c:	4584      	cmp	ip, r0
 801000e:	d2eb      	bcs.n	800ffe8 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8010010:	4613      	mov	r3, r2
 8010012:	f8cb 1000 	str.w	r1, [fp]
 8010016:	4662      	mov	r2, ip
 8010018:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 801001a:	2b00      	cmp	r3, #0
 801001c:	d060      	beq.n	80100e0 <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801001e:	88db      	ldrh	r3, [r3, #6]
 8010020:	429a      	cmp	r2, r3
 8010022:	d3af      	bcc.n	800ff84 <ip4_reass+0x12c>
 8010024:	9903      	ldr	r1, [sp, #12]
 8010026:	4281      	cmp	r1, r0
 8010028:	d8ac      	bhi.n	800ff84 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 801002a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 801002c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8010030:	d05b      	beq.n	80100ea <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010032:	9b01      	ldr	r3, [sp, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	f000 8084 	beq.w	8010142 <ip4_reass+0x2ea>
 801003a:	7fa3      	ldrb	r3, [r4, #30]
 801003c:	07db      	lsls	r3, r3, #31
 801003e:	d45c      	bmi.n	80100fa <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010040:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8010044:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010046:	443b      	add	r3, r7
 8010048:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801004c:	e79e      	b.n	800ff8c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801004e:	89e0      	ldrh	r0, [r4, #14]
 8010050:	f7f9 f8e8 	bl	8009224 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010054:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010058:	2800      	cmp	r0, #0
 801005a:	f43f af4f 	beq.w	800fefc <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801005e:	f8da 3000 	ldr.w	r3, [sl]
 8010062:	f8da 0004 	ldr.w	r0, [sl, #4]
 8010066:	f8da 1008 	ldr.w	r1, [sl, #8]
 801006a:	f8da 200c 	ldr.w	r2, [sl, #12]
 801006e:	60a3      	str	r3, [r4, #8]
 8010070:	60e0      	str	r0, [r4, #12]
 8010072:	6121      	str	r1, [r4, #16]
 8010074:	6162      	str	r2, [r4, #20]
 8010076:	f8da 3010 	ldr.w	r3, [sl, #16]
 801007a:	61a3      	str	r3, [r4, #24]
 801007c:	e73e      	b.n	800fefc <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801007e:	4601      	mov	r1, r0
 8010080:	4650      	mov	r0, sl
 8010082:	f7ff fe97 	bl	800fdb4 <ip_reass_remove_oldest_datagram>
 8010086:	2800      	cmp	r0, #0
 8010088:	f43f af7c 	beq.w	800ff84 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801008c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010090:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010092:	2b0a      	cmp	r3, #10
 8010094:	f77f af0e 	ble.w	800feb4 <ip4_reass+0x5c>
 8010098:	e774      	b.n	800ff84 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801009a:	2004      	movs	r0, #4
 801009c:	f7f9 fc58 	bl	8009950 <memp_malloc>
  if (ipr == NULL) {
 80100a0:	4604      	mov	r4, r0
 80100a2:	b178      	cbz	r0, 80100c4 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80100a4:	2300      	movs	r3, #0
 80100a6:	61e3      	str	r3, [r4, #28]
 80100a8:	60a3      	str	r3, [r4, #8]
 80100aa:	60e3      	str	r3, [r4, #12]
 80100ac:	6123      	str	r3, [r4, #16]
 80100ae:	6163      	str	r3, [r4, #20]
 80100b0:	61a3      	str	r3, [r4, #24]
 80100b2:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 80100b4:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 80100b8:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 80100bc:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 80100be:	230f      	movs	r3, #15
 80100c0:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80100c2:	e7cc      	b.n	801005e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80100c4:	4639      	mov	r1, r7
 80100c6:	4650      	mov	r0, sl
 80100c8:	f7ff fe74 	bl	800fdb4 <ip_reass_remove_oldest_datagram>
 80100cc:	4287      	cmp	r7, r0
 80100ce:	f73f af59 	bgt.w	800ff84 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80100d2:	2004      	movs	r0, #4
 80100d4:	f7f9 fc3c 	bl	8009950 <memp_malloc>
    if (ipr == NULL)
 80100d8:	4604      	mov	r4, r0
 80100da:	2800      	cmp	r0, #0
 80100dc:	d1e2      	bne.n	80100a4 <ip4_reass+0x24c>
 80100de:	e751      	b.n	800ff84 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 80100e0:	9b03      	ldr	r3, [sp, #12]
 80100e2:	4283      	cmp	r3, r0
 80100e4:	f63f af4e 	bhi.w	800ff84 <ip4_reass+0x12c>
        ipr->p = new_p;
 80100e8:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80100ea:	9b01      	ldr	r3, [sp, #4]
 80100ec:	b19b      	cbz	r3, 8010116 <ip4_reass+0x2be>
 80100ee:	7fa3      	ldrb	r3, [r4, #30]
 80100f0:	07d9      	lsls	r1, r3, #31
 80100f2:	d5a5      	bpl.n	8010040 <ip4_reass+0x1e8>
    if (valid) {
 80100f4:	f1ba 0f00 	cmp.w	sl, #0
 80100f8:	d138      	bne.n	801016c <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80100fa:	f8b8 3000 	ldrh.w	r3, [r8]
 80100fe:	443b      	add	r3, r7
 8010100:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 8010104:	2600      	movs	r6, #0
}
 8010106:	4630      	mov	r0, r6
 8010108:	b005      	add	sp, #20
 801010a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 801010e:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 8010110:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010112:	d18e      	bne.n	8010032 <ip4_reass+0x1da>
 8010114:	e7e9      	b.n	80100ea <ip4_reass+0x292>
    if (valid) {
 8010116:	f1ba 0f00 	cmp.w	sl, #0
 801011a:	d012      	beq.n	8010142 <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801011c:	6863      	ldr	r3, [r4, #4]
 801011e:	b183      	cbz	r3, 8010142 <ip4_reass+0x2ea>
 8010120:	6859      	ldr	r1, [r3, #4]
 8010122:	888b      	ldrh	r3, [r1, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d031      	beq.n	801018c <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010128:	f8b8 3000 	ldrh.w	r3, [r8]
 801012c:	443b      	add	r3, r7
 801012e:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8010132:	9b01      	ldr	r3, [sp, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d1e5      	bne.n	8010104 <ip4_reass+0x2ac>
 8010138:	e008      	b.n	801014c <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801013a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801013e:	4659      	mov	r1, fp
 8010140:	b323      	cbz	r3, 801018c <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010142:	f8b8 3000 	ldrh.w	r3, [r8]
 8010146:	443b      	add	r3, r7
 8010148:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801014c:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801014e:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010150:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8010154:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010156:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8010158:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801015a:	e7d3      	b.n	8010104 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801015c:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 801015e:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0ea      	beq.n	801013a <ip4_reass+0x2e2>
 8010164:	7fa3      	ldrb	r3, [r4, #30]
 8010166:	07da      	lsls	r2, r3, #31
 8010168:	f57f af6a 	bpl.w	8010040 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801016c:	6863      	ldr	r3, [r4, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d0c3      	beq.n	80100fa <ip4_reass+0x2a2>
 8010172:	e7d5      	b.n	8010120 <ip4_reass+0x2c8>
 8010174:	08017638 	.word	0x08017638
 8010178:	08017750 	.word	0x08017750
 801017c:	08014fe0 	.word	0x08014fe0
 8010180:	080176c0 	.word	0x080176c0
 8010184:	24010e98 	.word	0x24010e98
 8010188:	24010e9c 	.word	0x24010e9c
        q = iprh->next_pbuf;
 801018c:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 8010190:	b153      	cbz	r3, 80101a8 <ip4_reass+0x350>
 8010192:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8010194:	4610      	mov	r0, r2
 8010196:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8010198:	88c0      	ldrh	r0, [r0, #6]
 801019a:	8893      	ldrh	r3, [r2, #4]
 801019c:	4298      	cmp	r0, r3
 801019e:	d1c3      	bne.n	8010128 <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 80101a0:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d1f6      	bne.n	8010194 <ip4_reass+0x33c>
 80101a6:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 80101a8:	9b02      	ldr	r3, [sp, #8]
 80101aa:	428b      	cmp	r3, r1
 80101ac:	d110      	bne.n	80101d0 <ip4_reass+0x378>
 80101ae:	4b3e      	ldr	r3, [pc, #248]	; (80102a8 <ip4_reass+0x450>)
 80101b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80101b4:	493d      	ldr	r1, [pc, #244]	; (80102ac <ip4_reass+0x454>)
 80101b6:	483e      	ldr	r0, [pc, #248]	; (80102b0 <ip4_reass+0x458>)
 80101b8:	f002 f99a 	bl	80124f0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80101bc:	9b02      	ldr	r3, [sp, #8]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	b133      	cbz	r3, 80101d0 <ip4_reass+0x378>
 80101c2:	4b39      	ldr	r3, [pc, #228]	; (80102a8 <ip4_reass+0x450>)
 80101c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80101c8:	493a      	ldr	r1, [pc, #232]	; (80102b4 <ip4_reass+0x45c>)
 80101ca:	4839      	ldr	r0, [pc, #228]	; (80102b0 <ip4_reass+0x458>)
 80101cc:	f002 f990 	bl	80124f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80101d0:	f8b8 3000 	ldrh.w	r3, [r8]
 80101d4:	443b      	add	r3, r7
 80101d6:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d156      	bne.n	801028e <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 80101e0:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80101e2:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80101e4:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80101e6:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80101ea:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80101ec:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80101ee:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80101f0:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80101f2:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80101f4:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80101f6:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80101f8:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80101fa:	68a3      	ldr	r3, [r4, #8]
 80101fc:	6921      	ldr	r1, [r4, #16]
 80101fe:	6962      	ldr	r2, [r4, #20]
 8010200:	6075      	str	r5, [r6, #4]
 8010202:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010204:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010206:	60f2      	str	r2, [r6, #12]
 8010208:	6033      	str	r3, [r6, #0]
 801020a:	69a3      	ldr	r3, [r4, #24]
 801020c:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801020e:	f7f9 f809 	bl	8009224 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8010212:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010214:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010216:	71b3      	strb	r3, [r6, #6]
 8010218:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801021a:	72b3      	strb	r3, [r6, #10]
 801021c:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 801021e:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8010220:	b15d      	cbz	r5, 801023a <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 8010222:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8010224:	4628      	mov	r0, r5
 8010226:	2114      	movs	r1, #20
 8010228:	f7f9 ff32 	bl	800a090 <pbuf_remove_header>
      pbuf_cat(p, r);
 801022c:	4629      	mov	r1, r5
 801022e:	4630      	mov	r0, r6
 8010230:	f7fa f93a 	bl	800a4a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8010234:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8010236:	2d00      	cmp	r5, #0
 8010238:	d1f3      	bne.n	8010222 <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 801023a:	f8d9 5000 	ldr.w	r5, [r9]
 801023e:	42a5      	cmp	r5, r4
 8010240:	d005      	beq.n	801024e <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010242:	b335      	cbz	r5, 8010292 <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	42a3      	cmp	r3, r4
 8010248:	d014      	beq.n	8010274 <ip4_reass+0x41c>
 801024a:	461d      	mov	r5, r3
 801024c:	e7f9      	b.n	8010242 <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8010254:	4621      	mov	r1, r4
 8010256:	2004      	movs	r0, #4
 8010258:	f7f9 fbc0 	bl	80099dc <memp_free>
    clen = pbuf_clen(p);
 801025c:	4630      	mov	r0, r6
 801025e:	f7fa f8f9 	bl	800a454 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010262:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 8010266:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010268:	4283      	cmp	r3, r0
 801026a:	d306      	bcc.n	801027a <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801026c:	1b1b      	subs	r3, r3, r4
 801026e:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8010272:	e68b      	b.n	800ff8c <ip4_reass+0x134>
    prev->next = ipr->next;
 8010274:	6823      	ldr	r3, [r4, #0]
 8010276:	602b      	str	r3, [r5, #0]
 8010278:	e7ec      	b.n	8010254 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801027a:	4b0b      	ldr	r3, [pc, #44]	; (80102a8 <ip4_reass+0x450>)
 801027c:	f240 229b 	movw	r2, #667	; 0x29b
 8010280:	490d      	ldr	r1, [pc, #52]	; (80102b8 <ip4_reass+0x460>)
 8010282:	480b      	ldr	r0, [pc, #44]	; (80102b0 <ip4_reass+0x458>)
 8010284:	f002 f934 	bl	80124f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010288:	f8b8 3000 	ldrh.w	r3, [r8]
 801028c:	e7ee      	b.n	801026c <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801028e:	8ba0      	ldrh	r0, [r4, #28]
 8010290:	e7ae      	b.n	80101f0 <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010292:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <ip4_reass+0x450>)
 8010294:	f240 1245 	movw	r2, #325	; 0x145
 8010298:	4908      	ldr	r1, [pc, #32]	; (80102bc <ip4_reass+0x464>)
 801029a:	4805      	ldr	r0, [pc, #20]	; (80102b0 <ip4_reass+0x458>)
 801029c:	f002 f928 	bl	80124f0 <iprintf>
    prev->next = ipr->next;
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	602b      	str	r3, [r5, #0]
 80102a4:	deff      	udf	#255	; 0xff
 80102a6:	bf00      	nop
 80102a8:	08017638 	.word	0x08017638
 80102ac:	08017700 	.word	0x08017700
 80102b0:	08014fe0 	.word	0x08014fe0
 80102b4:	08017710 	.word	0x08017710
 80102b8:	08017734 	.word	0x08017734
 80102bc:	080176c0 	.word	0x080176c0

080102c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80102c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80102c4:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 80102c6:	b08f      	sub	sp, #60	; 0x3c
 80102c8:	4606      	mov	r6, r0
 80102ca:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80102cc:	f1b3 0214 	subs.w	r2, r3, #20
{
 80102d0:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80102d2:	bf48      	it	mi
 80102d4:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80102d8:	6843      	ldr	r3, [r0, #4]
 80102da:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80102dc:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80102e0:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80102e2:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80102e4:	f003 030f 	and.w	r3, r3, #15
 80102e8:	2b05      	cmp	r3, #5
 80102ea:	ea4f 0583 	mov.w	r5, r3, lsl #2
 80102ee:	f040 80e5 	bne.w	80104bc <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80102f2:	8943      	ldrh	r3, [r0, #10]
 80102f4:	2b13      	cmp	r3, #19
 80102f6:	f240 80e4 	bls.w	80104c2 <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80102fa:	9b04      	ldr	r3, [sp, #16]
 80102fc:	88d8      	ldrh	r0, [r3, #6]
 80102fe:	f7f8 ff91 	bl	8009224 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010302:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 8010304:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8010308:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 801030a:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 801030c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8010310:	b29b      	uxth	r3, r3
 8010312:	920d      	str	r2, [sp, #52]	; 0x34
 8010314:	9305      	str	r3, [sp, #20]

  while (left) {
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 8098 	beq.w	801044c <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801031c:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 801031e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010320:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80104e4 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010324:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010326:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80104ec <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801032a:	b29b      	uxth	r3, r3
 801032c:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801032e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010332:	2114      	movs	r1, #20
 8010334:	200e      	movs	r0, #14
 8010336:	f7f9 ff87 	bl	800a248 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801033a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801033c:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 801033e:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010340:	4293      	cmp	r3, r2
 8010342:	bf28      	it	cs
 8010344:	4613      	movcs	r3, r2
 8010346:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 8010348:	2800      	cmp	r0, #0
 801034a:	f000 80b4 	beq.w	80104b6 <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801034e:	8943      	ldrh	r3, [r0, #10]
 8010350:	2b13      	cmp	r3, #19
 8010352:	f240 808c 	bls.w	801046e <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010356:	9904      	ldr	r1, [sp, #16]
 8010358:	9b03      	ldr	r3, [sp, #12]
 801035a:	680a      	ldr	r2, [r1, #0]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	684f      	ldr	r7, [r1, #4]
 8010360:	6888      	ldr	r0, [r1, #8]
 8010362:	68c9      	ldr	r1, [r1, #12]
 8010364:	605f      	str	r7, [r3, #4]
 8010366:	60d9      	str	r1, [r3, #12]
 8010368:	9904      	ldr	r1, [sp, #16]
 801036a:	601a      	str	r2, [r3, #0]
 801036c:	6098      	str	r0, [r3, #8]
 801036e:	690a      	ldr	r2, [r1, #16]
 8010370:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010372:	9b03      	ldr	r3, [sp, #12]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 8010378:	9b06      	ldr	r3, [sp, #24]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d034      	beq.n	80103e8 <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801037e:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 8010380:	8973      	ldrh	r3, [r6, #10]
 8010382:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010384:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 8010386:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010388:	d369      	bcc.n	801045e <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801038a:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801038c:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801038e:	429c      	cmp	r4, r3
 8010390:	bf28      	it	cs
 8010392:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010394:	2c00      	cmp	r4, #0
 8010396:	d05b      	beq.n	8010450 <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010398:	f7f9 fada 	bl	8009950 <memp_malloc>
 801039c:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801039e:	2241      	movs	r2, #65	; 0x41
 80103a0:	4621      	mov	r1, r4
 80103a2:	2000      	movs	r0, #0
      if (pcr == NULL) {
 80103a4:	f1bb 0f00 	cmp.w	fp, #0
 80103a8:	d06c      	beq.n	8010484 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80103aa:	9401      	str	r4, [sp, #4]
 80103ac:	465b      	mov	r3, fp
 80103ae:	6877      	ldr	r7, [r6, #4]
 80103b0:	eb07 0c05 	add.w	ip, r7, r5
 80103b4:	f8cd c000 	str.w	ip, [sp]
 80103b8:	f7f9 fe1a 	bl	8009ff0 <pbuf_alloced_custom>
 80103bc:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80103be:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 80103c0:	f1ba 0f00 	cmp.w	sl, #0
 80103c4:	d068      	beq.n	8010498 <ip4_frag+0x1d8>
      pbuf_ref(p);
 80103c6:	f7fa f851 	bl	800a46c <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80103ca:	4b43      	ldr	r3, [pc, #268]	; (80104d8 <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80103cc:	4651      	mov	r1, sl
 80103ce:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80103d0:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 80103d4:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 80103d8:	f7fa f866 	bl	800a4a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80103dc:	9b02      	ldr	r3, [sp, #8]
 80103de:	1b1f      	subs	r7, r3, r4
 80103e0:	b2bb      	uxth	r3, r7
 80103e2:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d133      	bne.n	8010450 <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80103e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80103ea:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80103ec:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 80103ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80103f0:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 80103f2:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80103f6:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 80103f8:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80103fa:	4293      	cmp	r3, r2
 80103fc:	dd3f      	ble.n	801047e <ip4_frag+0x1be>
 80103fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010400:	2b00      	cmp	r3, #0
 8010402:	d13c      	bne.n	801047e <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010404:	f7f8 ff0e 	bl	8009224 <lwip_htons>
 8010408:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801040a:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801040c:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801040e:	f103 0014 	add.w	r0, r3, #20
 8010412:	b280      	uxth	r0, r0
 8010414:	f7f8 ff06 	bl	8009224 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8010418:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801041a:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801041c:	72bb      	strb	r3, [r7, #10]
 801041e:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010422:	9f03      	ldr	r7, [sp, #12]
 8010424:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010426:	4639      	mov	r1, r7
 8010428:	6943      	ldr	r3, [r0, #20]
 801042a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801042c:	4638      	mov	r0, r7
 801042e:	f7f9 fe9b 	bl	800a168 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010432:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8010436:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8010438:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 801043c:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 801043e:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8010440:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8010442:	b292      	uxth	r2, r2
 8010444:	9207      	str	r2, [sp, #28]
  while (left) {
 8010446:	2b00      	cmp	r3, #0
 8010448:	f47f af71 	bne.w	801032e <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801044c:	2000      	movs	r0, #0
 801044e:	e020      	b.n	8010492 <ip4_frag+0x1d2>
        p = p->next;
 8010450:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 8010452:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 8010454:	8973      	ldrh	r3, [r6, #10]
 8010456:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010458:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 801045a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801045c:	d295      	bcs.n	801038a <ip4_frag+0xca>
 801045e:	4643      	mov	r3, r8
 8010460:	f240 322d 	movw	r2, #813	; 0x32d
 8010464:	491d      	ldr	r1, [pc, #116]	; (80104dc <ip4_frag+0x21c>)
 8010466:	4648      	mov	r0, r9
 8010468:	f002 f842 	bl	80124f0 <iprintf>
 801046c:	e78d      	b.n	801038a <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801046e:	4643      	mov	r3, r8
 8010470:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010474:	491a      	ldr	r1, [pc, #104]	; (80104e0 <ip4_frag+0x220>)
 8010476:	4648      	mov	r0, r9
 8010478:	f002 f83a 	bl	80124f0 <iprintf>
 801047c:	e76b      	b.n	8010356 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 801047e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8010482:	e7bf      	b.n	8010404 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8010484:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010488:	4658      	mov	r0, fp
 801048a:	f7f9 fe6d 	bl	800a168 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801048e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010492:	b00f      	add	sp, #60	; 0x3c
 8010494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8010498:	46da      	mov	sl, fp
 801049a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801049e:	2005      	movs	r0, #5
 80104a0:	4651      	mov	r1, sl
 80104a2:	f7f9 fa9b 	bl	80099dc <memp_free>
        pbuf_free(rambuf);
 80104a6:	4658      	mov	r0, fp
 80104a8:	f7f9 fe5e 	bl	800a168 <pbuf_free>
  return ERR_MEM;
 80104ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80104b0:	b00f      	add	sp, #60	; 0x3c
 80104b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 80104b6:	f04f 30ff 	mov.w	r0, #4294967295
 80104ba:	e7ea      	b.n	8010492 <ip4_frag+0x1d2>
    return ERR_VAL;
 80104bc:	f06f 0005 	mvn.w	r0, #5
 80104c0:	e7e7      	b.n	8010492 <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80104c2:	4b08      	ldr	r3, [pc, #32]	; (80104e4 <ip4_frag+0x224>)
 80104c4:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80104c8:	4907      	ldr	r1, [pc, #28]	; (80104e8 <ip4_frag+0x228>)
 80104ca:	4808      	ldr	r0, [pc, #32]	; (80104ec <ip4_frag+0x22c>)
 80104cc:	f002 f810 	bl	80124f0 <iprintf>
 80104d0:	f06f 0005 	mvn.w	r0, #5
 80104d4:	e7dd      	b.n	8010492 <ip4_frag+0x1d2>
 80104d6:	bf00      	nop
 80104d8:	0800fc41 	.word	0x0800fc41
 80104dc:	080177ac 	.word	0x080177ac
 80104e0:	0801778c 	.word	0x0801778c
 80104e4:	08017638 	.word	0x08017638
 80104e8:	08017770 	.word	0x08017770
 80104ec:	08014fe0 	.word	0x08014fe0

080104f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	4604      	mov	r4, r0
 80104f4:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 80104f6:	f7f4 fc49 	bl	8004d8c <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 80104fa:	8963      	ldrh	r3, [r4, #10]
 80104fc:	2b0e      	cmp	r3, #14
 80104fe:	d91a      	bls.n	8010536 <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010500:	7be3      	ldrb	r3, [r4, #15]
 8010502:	b91b      	cbnz	r3, 801050c <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 8010504:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8010508:	3301      	adds	r3, #1
 801050a:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801050c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801050e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8010510:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8010512:	07d9      	lsls	r1, r3, #31
 8010514:	d50a      	bpl.n	801052c <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010516:	2b01      	cmp	r3, #1
 8010518:	d030      	beq.n	801057c <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801051a:	2206      	movs	r2, #6
 801051c:	491d      	ldr	r1, [pc, #116]	; (8010594 <ethernet_input+0xa4>)
 801051e:	f002 f88a 	bl	8012636 <memcmp>
 8010522:	b918      	cbnz	r0, 801052c <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010524:	7b63      	ldrb	r3, [r4, #13]
 8010526:	f043 0308 	orr.w	r3, r3, #8
 801052a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801052c:	2e08      	cmp	r6, #8
 801052e:	d016      	beq.n	801055e <ethernet_input+0x6e>
 8010530:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8010534:	d004      	beq.n	8010540 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8010536:	4620      	mov	r0, r4
 8010538:	f7f9 fe16 	bl	800a168 <pbuf_free>
  return ERR_OK;
}
 801053c:	2000      	movs	r0, #0
 801053e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010540:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8010544:	071b      	lsls	r3, r3, #28
 8010546:	d5f6      	bpl.n	8010536 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010548:	210e      	movs	r1, #14
 801054a:	4620      	mov	r0, r4
 801054c:	f7f9 fda0 	bl	800a090 <pbuf_remove_header>
 8010550:	2800      	cmp	r0, #0
 8010552:	d1f0      	bne.n	8010536 <ethernet_input+0x46>
        etharp_input(p, netif);
 8010554:	4629      	mov	r1, r5
 8010556:	4620      	mov	r0, r4
 8010558:	f7fe fe72 	bl	800f240 <etharp_input>
      break;
 801055c:	e7ee      	b.n	801053c <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801055e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8010562:	071a      	lsls	r2, r3, #28
 8010564:	d5e7      	bpl.n	8010536 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010566:	210e      	movs	r1, #14
 8010568:	4620      	mov	r0, r4
 801056a:	f7f9 fd91 	bl	800a090 <pbuf_remove_header>
 801056e:	2800      	cmp	r0, #0
 8010570:	d1e1      	bne.n	8010536 <ethernet_input+0x46>
        ip4_input(p, netif);
 8010572:	4629      	mov	r1, r5
 8010574:	4620      	mov	r0, r4
 8010576:	f7ff f9d1 	bl	800f91c <ip4_input>
      break;
 801057a:	e7df      	b.n	801053c <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801057c:	7843      	ldrb	r3, [r0, #1]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1d4      	bne.n	801052c <ethernet_input+0x3c>
 8010582:	7883      	ldrb	r3, [r0, #2]
 8010584:	2b5e      	cmp	r3, #94	; 0x5e
 8010586:	d1d1      	bne.n	801052c <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 8010588:	7b63      	ldrb	r3, [r4, #13]
 801058a:	f043 0310 	orr.w	r3, r3, #16
 801058e:	7363      	strb	r3, [r4, #13]
 8010590:	e7cc      	b.n	801052c <ethernet_input+0x3c>
 8010592:	bf00      	nop
 8010594:	08017828 	.word	0x08017828

08010598 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059c:	460c      	mov	r4, r1
 801059e:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80105a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80105a4:	4616      	mov	r6, r2
 80105a6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80105a8:	f7f8 fe3c 	bl	8009224 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80105ac:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80105ae:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7f9 fd39 	bl	800a028 <pbuf_add_header>
 80105b6:	b9f0      	cbnz	r0, 80105f6 <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 80105b8:	f7f4 fbe8 	bl	8004d8c <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 80105bc:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80105be:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	600b      	str	r3, [r1, #0]
 80105c6:	88bb      	ldrh	r3, [r7, #4]
 80105c8:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80105ca:	6833      	ldr	r3, [r6, #0]
 80105cc:	f8c1 3006 	str.w	r3, [r1, #6]
 80105d0:	88b3      	ldrh	r3, [r6, #4]
 80105d2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80105d4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80105d8:	2b06      	cmp	r3, #6
 80105da:	d006      	beq.n	80105ea <ethernet_output+0x52>
 80105dc:	4b08      	ldr	r3, [pc, #32]	; (8010600 <ethernet_output+0x68>)
 80105de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80105e2:	4908      	ldr	r1, [pc, #32]	; (8010604 <ethernet_output+0x6c>)
 80105e4:	4808      	ldr	r0, [pc, #32]	; (8010608 <ethernet_output+0x70>)
 80105e6:	f001 ff83 	bl	80124f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80105ea:	69ab      	ldr	r3, [r5, #24]
 80105ec:	4621      	mov	r1, r4
 80105ee:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80105f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80105f4:	4718      	bx	r3
}
 80105f6:	f06f 0001 	mvn.w	r0, #1
 80105fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105fe:	bf00      	nop
 8010600:	080177bc 	.word	0x080177bc
 8010604:	080177f4 	.word	0x080177f4
 8010608:	08014fe0 	.word	0x08014fe0

0801060c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801060c:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801060e:	2200      	movs	r2, #0
 8010610:	2104      	movs	r1, #4
{
 8010612:	b510      	push	{r4, lr}
 8010614:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010616:	4618      	mov	r0, r3
 8010618:	f7f4 fddc 	bl	80051d4 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801061c:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010620:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8010622:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8010624:	4258      	negs	r0, r3
 8010626:	bd10      	pop	{r4, pc}

08010628 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8010628:	b510      	push	{r4, lr}
 801062a:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801062c:	6800      	ldr	r0, [r0, #0]
 801062e:	f7f4 fe8f 	bl	8005350 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8010632:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8010634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 8010638:	f7f4 be94 	b.w	8005364 <osMessageQueueDelete>

0801063c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801063c:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801063e:	2300      	movs	r3, #0
{
 8010640:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010642:	6800      	ldr	r0, [r0, #0]
{
 8010644:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010646:	461a      	mov	r2, r3
 8010648:	a901      	add	r1, sp, #4
 801064a:	f7f4 fe01 	bl	8005250 <osMessageQueuePut>
 801064e:	3800      	subs	r0, #0
 8010650:	bf18      	it	ne
 8010652:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8010654:	4240      	negs	r0, r0
 8010656:	b003      	add	sp, #12
 8010658:	f85d fb04 	ldr.w	pc, [sp], #4

0801065c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	4615      	mov	r5, r2
 8010660:	b082      	sub	sp, #8
 8010662:	4606      	mov	r6, r0
 8010664:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8010666:	f7f4 fc03 	bl	8004e70 <osKernelGetTickCount>
#endif
  if(timeout != 0)
 801066a:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 801066c:	4604      	mov	r4, r0
  if(timeout != 0)
 801066e:	b14d      	cbz	r5, 8010684 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8010670:	462b      	mov	r3, r5
 8010672:	2200      	movs	r2, #0
 8010674:	6830      	ldr	r0, [r6, #0]
 8010676:	f7f4 fe2d 	bl	80052d4 <osMessageQueueGet>
    if (status == osOK)
 801067a:	b148      	cbz	r0, 8010690 <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801067c:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010680:	b002      	add	sp, #8
 8010682:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8010684:	f04f 33ff 	mov.w	r3, #4294967295
 8010688:	462a      	mov	r2, r5
 801068a:	6830      	ldr	r0, [r6, #0]
 801068c:	f7f4 fe22 	bl	80052d4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8010690:	f7f4 fbee 	bl	8004e70 <osKernelGetTickCount>
 8010694:	1b00      	subs	r0, r0, r4
}
 8010696:	b002      	add	sp, #8
 8010698:	bd70      	pop	{r4, r5, r6, pc}
 801069a:	bf00      	nop

0801069c <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801069c:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801069e:	2300      	movs	r3, #0
 80106a0:	6800      	ldr	r0, [r0, #0]
 80106a2:	461a      	mov	r2, r3
 80106a4:	f7f4 fe16 	bl	80052d4 <osMessageQueueGet>
 80106a8:	3800      	subs	r0, #0
 80106aa:	bf18      	it	ne
 80106ac:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 80106ae:	4240      	negs	r0, r0
 80106b0:	bd08      	pop	{r3, pc}
 80106b2:	bf00      	nop

080106b4 <sys_mbox_valid>:
 80106b4:	6800      	ldr	r0, [r0, #0]
 80106b6:	3800      	subs	r0, #0
 80106b8:	bf18      	it	ne
 80106ba:	2001      	movne	r0, #1
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop

080106c0 <sys_mbox_set_invalid>:
 80106c0:	2300      	movs	r3, #0
 80106c2:	6003      	str	r3, [r0, #0]
 80106c4:	4770      	bx	lr
 80106c6:	bf00      	nop

080106c8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80106cc:	2200      	movs	r2, #0
 80106ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80106d2:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80106d4:	f7f4 fcba 	bl	800504c <osSemaphoreNew>
 80106d8:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 80106da:	b138      	cbz	r0, 80106ec <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 80106dc:	b10c      	cbz	r4, 80106e2 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80106de:	2000      	movs	r0, #0
}
 80106e0:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 80106e2:	4621      	mov	r1, r4
 80106e4:	f7f4 fd02 	bl	80050ec <osSemaphoreAcquire>
  return ERR_OK;
 80106e8:	4620      	mov	r0, r4
}
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_MEM;
 80106ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80106f0:	bd38      	pop	{r3, r4, r5, pc}
 80106f2:	bf00      	nop

080106f4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	460e      	mov	r6, r1
 80106f8:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80106fa:	f7f4 fbb9 	bl	8004e70 <osKernelGetTickCount>
 80106fe:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 8010700:	b956      	cbnz	r6, 8010718 <sys_arch_sem_wait+0x24>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8010702:	f04f 31ff 	mov.w	r1, #4294967295
 8010706:	6820      	ldr	r0, [r4, #0]
 8010708:	f7f4 fcf0 	bl	80050ec <osSemaphoreAcquire>
 801070c:	2800      	cmp	r0, #0
 801070e:	d1f8      	bne.n	8010702 <sys_arch_sem_wait+0xe>
    return (osKernelGetTickCount() - starttime);
 8010710:	f7f4 fbae 	bl	8004e70 <osKernelGetTickCount>
 8010714:	1b40      	subs	r0, r0, r5
#endif
  }
}
 8010716:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8010718:	4631      	mov	r1, r6
 801071a:	6820      	ldr	r0, [r4, #0]
 801071c:	f7f4 fce6 	bl	80050ec <osSemaphoreAcquire>
 8010720:	2800      	cmp	r0, #0
 8010722:	d0f5      	beq.n	8010710 <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8010724:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010728:	bd70      	pop	{r4, r5, r6, pc}
 801072a:	bf00      	nop

0801072c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 801072c:	6800      	ldr	r0, [r0, #0]
 801072e:	f7f4 bd11 	b.w	8005154 <osSemaphoreRelease>
 8010732:	bf00      	nop

08010734 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8010734:	6800      	ldr	r0, [r0, #0]
 8010736:	f7f4 bd39 	b.w	80051ac <osSemaphoreDelete>
 801073a:	bf00      	nop

0801073c <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 801073c:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 801073e:	3800      	subs	r0, #0
 8010740:	bf18      	it	ne
 8010742:	2001      	movne	r0, #1
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop

08010748 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8010748:	2300      	movs	r3, #0
 801074a:	6003      	str	r3, [r0, #0]
}
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop

08010750 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010750:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8010752:	2000      	movs	r0, #0
 8010754:	f7f4 fbf4 	bl	8004f40 <osMutexNew>
 8010758:	4b01      	ldr	r3, [pc, #4]	; (8010760 <sys_init+0x10>)
 801075a:	6018      	str	r0, [r3, #0]
#endif
}
 801075c:	bd08      	pop	{r3, pc}
 801075e:	bf00      	nop
 8010760:	24010ea0 	.word	0x24010ea0

08010764 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010764:	b510      	push	{r4, lr}
 8010766:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8010768:	2000      	movs	r0, #0
 801076a:	f7f4 fbe9 	bl	8004f40 <osMutexNew>
#endif

  if(*mutex == NULL)
 801076e:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 8010772:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8010774:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8010776:	4258      	negs	r0, r3
 8010778:	bd10      	pop	{r4, pc}
 801077a:	bf00      	nop

0801077c <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801077c:	f04f 31ff 	mov.w	r1, #4294967295
 8010780:	6800      	ldr	r0, [r0, #0]
 8010782:	f7f4 bc1d 	b.w	8004fc0 <osMutexAcquire>
 8010786:	bf00      	nop

08010788 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8010788:	6800      	ldr	r0, [r0, #0]
 801078a:	f7f4 bc3d 	b.w	8005008 <osMutexRelease>
 801078e:	bf00      	nop

08010790 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010792:	b08b      	sub	sp, #44	; 0x2c
 8010794:	4617      	mov	r7, r2
 8010796:	460e      	mov	r6, r1
 8010798:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801079a:	2220      	movs	r2, #32
 801079c:	2100      	movs	r1, #0
 801079e:	a802      	add	r0, sp, #8
{
 80107a0:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 80107a2:	f001 ff72 	bl	801268a <memset>
 80107a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80107a8:	4639      	mov	r1, r7
 80107aa:	aa01      	add	r2, sp, #4
 80107ac:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 80107ae:	9501      	str	r5, [sp, #4]
 80107b0:	9406      	str	r4, [sp, #24]
 80107b2:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 80107b4:	f7f4 fb68 	bl	8004e88 <osThreadNew>
#endif
}
 80107b8:	b00b      	add	sp, #44	; 0x2c
 80107ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80107bc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80107be:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <sys_arch_protect+0x14>)
 80107c0:	f04f 31ff 	mov.w	r1, #4294967295
 80107c4:	6818      	ldr	r0, [r3, #0]
 80107c6:	f7f4 fbfb 	bl	8004fc0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 80107ca:	2001      	movs	r0, #1
 80107cc:	bd08      	pop	{r3, pc}
 80107ce:	bf00      	nop
 80107d0:	24010ea0 	.word	0x24010ea0

080107d4 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80107d4:	4b01      	ldr	r3, [pc, #4]	; (80107dc <sys_arch_unprotect+0x8>)
 80107d6:	6818      	ldr	r0, [r3, #0]
 80107d8:	f7f4 bc16 	b.w	8005008 <osMutexRelease>
 80107dc:	24010ea0 	.word	0x24010ea0

080107e0 <cos>:
 80107e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107e2:	eeb0 7b40 	vmov.f64	d7, d0
 80107e6:	ee17 3a90 	vmov	r3, s15
 80107ea:	4a21      	ldr	r2, [pc, #132]	; (8010870 <cos+0x90>)
 80107ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107f0:	4293      	cmp	r3, r2
 80107f2:	dc06      	bgt.n	8010802 <cos+0x22>
 80107f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010868 <cos+0x88>
 80107f8:	b005      	add	sp, #20
 80107fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80107fe:	f000 b887 	b.w	8010910 <__kernel_cos>
 8010802:	4a1c      	ldr	r2, [pc, #112]	; (8010874 <cos+0x94>)
 8010804:	4293      	cmp	r3, r2
 8010806:	dd04      	ble.n	8010812 <cos+0x32>
 8010808:	ee30 0b40 	vsub.f64	d0, d0, d0
 801080c:	b005      	add	sp, #20
 801080e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010812:	4668      	mov	r0, sp
 8010814:	f000 f940 	bl	8010a98 <__ieee754_rem_pio2>
 8010818:	f000 0003 	and.w	r0, r0, #3
 801081c:	2801      	cmp	r0, #1
 801081e:	d009      	beq.n	8010834 <cos+0x54>
 8010820:	2802      	cmp	r0, #2
 8010822:	d010      	beq.n	8010846 <cos+0x66>
 8010824:	b9b0      	cbnz	r0, 8010854 <cos+0x74>
 8010826:	ed9d 1b02 	vldr	d1, [sp, #8]
 801082a:	ed9d 0b00 	vldr	d0, [sp]
 801082e:	f000 f86f 	bl	8010910 <__kernel_cos>
 8010832:	e7eb      	b.n	801080c <cos+0x2c>
 8010834:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010838:	ed9d 0b00 	vldr	d0, [sp]
 801083c:	f000 f8d4 	bl	80109e8 <__kernel_sin>
 8010840:	eeb1 0b40 	vneg.f64	d0, d0
 8010844:	e7e2      	b.n	801080c <cos+0x2c>
 8010846:	ed9d 1b02 	vldr	d1, [sp, #8]
 801084a:	ed9d 0b00 	vldr	d0, [sp]
 801084e:	f000 f85f 	bl	8010910 <__kernel_cos>
 8010852:	e7f5      	b.n	8010840 <cos+0x60>
 8010854:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010858:	ed9d 0b00 	vldr	d0, [sp]
 801085c:	2001      	movs	r0, #1
 801085e:	f000 f8c3 	bl	80109e8 <__kernel_sin>
 8010862:	e7d3      	b.n	801080c <cos+0x2c>
 8010864:	f3af 8000 	nop.w
	...
 8010870:	3fe921fb 	.word	0x3fe921fb
 8010874:	7fefffff 	.word	0x7fefffff

08010878 <sin>:
 8010878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801087a:	eeb0 7b40 	vmov.f64	d7, d0
 801087e:	ee17 3a90 	vmov	r3, s15
 8010882:	4a21      	ldr	r2, [pc, #132]	; (8010908 <sin+0x90>)
 8010884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010888:	4293      	cmp	r3, r2
 801088a:	dc07      	bgt.n	801089c <sin+0x24>
 801088c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8010900 <sin+0x88>
 8010890:	2000      	movs	r0, #0
 8010892:	b005      	add	sp, #20
 8010894:	f85d eb04 	ldr.w	lr, [sp], #4
 8010898:	f000 b8a6 	b.w	80109e8 <__kernel_sin>
 801089c:	4a1b      	ldr	r2, [pc, #108]	; (801090c <sin+0x94>)
 801089e:	4293      	cmp	r3, r2
 80108a0:	dd04      	ble.n	80108ac <sin+0x34>
 80108a2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80108a6:	b005      	add	sp, #20
 80108a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80108ac:	4668      	mov	r0, sp
 80108ae:	f000 f8f3 	bl	8010a98 <__ieee754_rem_pio2>
 80108b2:	f000 0003 	and.w	r0, r0, #3
 80108b6:	2801      	cmp	r0, #1
 80108b8:	d00a      	beq.n	80108d0 <sin+0x58>
 80108ba:	2802      	cmp	r0, #2
 80108bc:	d00f      	beq.n	80108de <sin+0x66>
 80108be:	b9c0      	cbnz	r0, 80108f2 <sin+0x7a>
 80108c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108c4:	ed9d 0b00 	vldr	d0, [sp]
 80108c8:	2001      	movs	r0, #1
 80108ca:	f000 f88d 	bl	80109e8 <__kernel_sin>
 80108ce:	e7ea      	b.n	80108a6 <sin+0x2e>
 80108d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108d4:	ed9d 0b00 	vldr	d0, [sp]
 80108d8:	f000 f81a 	bl	8010910 <__kernel_cos>
 80108dc:	e7e3      	b.n	80108a6 <sin+0x2e>
 80108de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108e2:	ed9d 0b00 	vldr	d0, [sp]
 80108e6:	2001      	movs	r0, #1
 80108e8:	f000 f87e 	bl	80109e8 <__kernel_sin>
 80108ec:	eeb1 0b40 	vneg.f64	d0, d0
 80108f0:	e7d9      	b.n	80108a6 <sin+0x2e>
 80108f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108f6:	ed9d 0b00 	vldr	d0, [sp]
 80108fa:	f000 f809 	bl	8010910 <__kernel_cos>
 80108fe:	e7f5      	b.n	80108ec <sin+0x74>
	...
 8010908:	3fe921fb 	.word	0x3fe921fb
 801090c:	7fefffff 	.word	0x7fefffff

08010910 <__kernel_cos>:
 8010910:	ee10 1a90 	vmov	r1, s1
 8010914:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010918:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801091c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010920:	da05      	bge.n	801092e <__kernel_cos+0x1e>
 8010922:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010926:	ee17 3a90 	vmov	r3, s15
 801092a:	2b00      	cmp	r3, #0
 801092c:	d03d      	beq.n	80109aa <__kernel_cos+0x9a>
 801092e:	ee20 5b00 	vmul.f64	d5, d0, d0
 8010932:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8010936:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 80109b0 <__kernel_cos+0xa0>
 801093a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80109b8 <__kernel_cos+0xa8>
 801093e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8010942:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80109c0 <__kernel_cos+0xb0>
 8010946:	eea4 7b05 	vfma.f64	d7, d4, d5
 801094a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 80109c8 <__kernel_cos+0xb8>
 801094e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8010952:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80109d0 <__kernel_cos+0xc0>
 8010956:	4b22      	ldr	r3, [pc, #136]	; (80109e0 <__kernel_cos+0xd0>)
 8010958:	eea4 7b05 	vfma.f64	d7, d4, d5
 801095c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80109d8 <__kernel_cos+0xc8>
 8010960:	4299      	cmp	r1, r3
 8010962:	eea7 4b05 	vfma.f64	d4, d7, d5
 8010966:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801096a:	ee24 4b05 	vmul.f64	d4, d4, d5
 801096e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010972:	eea5 1b04 	vfma.f64	d1, d5, d4
 8010976:	dc04      	bgt.n	8010982 <__kernel_cos+0x72>
 8010978:	ee37 7b41 	vsub.f64	d7, d7, d1
 801097c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8010980:	4770      	bx	lr
 8010982:	4b18      	ldr	r3, [pc, #96]	; (80109e4 <__kernel_cos+0xd4>)
 8010984:	4299      	cmp	r1, r3
 8010986:	dc0d      	bgt.n	80109a4 <__kernel_cos+0x94>
 8010988:	2200      	movs	r2, #0
 801098a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801098e:	ec43 2b15 	vmov	d5, r2, r3
 8010992:	ee36 0b45 	vsub.f64	d0, d6, d5
 8010996:	ee37 7b45 	vsub.f64	d7, d7, d5
 801099a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801099e:	ee30 0b47 	vsub.f64	d0, d0, d7
 80109a2:	4770      	bx	lr
 80109a4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80109a8:	e7f3      	b.n	8010992 <__kernel_cos+0x82>
 80109aa:	eeb0 0b46 	vmov.f64	d0, d6
 80109ae:	4770      	bx	lr
 80109b0:	be8838d4 	.word	0xbe8838d4
 80109b4:	bda8fae9 	.word	0xbda8fae9
 80109b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80109bc:	3e21ee9e 	.word	0x3e21ee9e
 80109c0:	809c52ad 	.word	0x809c52ad
 80109c4:	be927e4f 	.word	0xbe927e4f
 80109c8:	19cb1590 	.word	0x19cb1590
 80109cc:	3efa01a0 	.word	0x3efa01a0
 80109d0:	16c15177 	.word	0x16c15177
 80109d4:	bf56c16c 	.word	0xbf56c16c
 80109d8:	5555554c 	.word	0x5555554c
 80109dc:	3fa55555 	.word	0x3fa55555
 80109e0:	3fd33332 	.word	0x3fd33332
 80109e4:	3fe90000 	.word	0x3fe90000

080109e8 <__kernel_sin>:
 80109e8:	ee10 3a90 	vmov	r3, s1
 80109ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80109f0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80109f4:	da04      	bge.n	8010a00 <__kernel_sin+0x18>
 80109f6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80109fa:	ee17 3a90 	vmov	r3, s15
 80109fe:	b35b      	cbz	r3, 8010a58 <__kernel_sin+0x70>
 8010a00:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010a04:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010a08:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010a60 <__kernel_sin+0x78>
 8010a0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010a68 <__kernel_sin+0x80>
 8010a10:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010a14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010a70 <__kernel_sin+0x88>
 8010a18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010a1c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010a78 <__kernel_sin+0x90>
 8010a20:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010a24:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010a80 <__kernel_sin+0x98>
 8010a28:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010a2c:	b930      	cbnz	r0, 8010a3c <__kernel_sin+0x54>
 8010a2e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010a88 <__kernel_sin+0xa0>
 8010a32:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010a36:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010a3a:	4770      	bx	lr
 8010a3c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010a40:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010a44:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010a48:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010a4c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010a90 <__kernel_sin+0xa8>
 8010a50:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010a54:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	f3af 8000 	nop.w
 8010a60:	5acfd57c 	.word	0x5acfd57c
 8010a64:	3de5d93a 	.word	0x3de5d93a
 8010a68:	8a2b9ceb 	.word	0x8a2b9ceb
 8010a6c:	be5ae5e6 	.word	0xbe5ae5e6
 8010a70:	57b1fe7d 	.word	0x57b1fe7d
 8010a74:	3ec71de3 	.word	0x3ec71de3
 8010a78:	19c161d5 	.word	0x19c161d5
 8010a7c:	bf2a01a0 	.word	0xbf2a01a0
 8010a80:	1110f8a6 	.word	0x1110f8a6
 8010a84:	3f811111 	.word	0x3f811111
 8010a88:	55555549 	.word	0x55555549
 8010a8c:	bfc55555 	.word	0xbfc55555
 8010a90:	55555549 	.word	0x55555549
 8010a94:	3fc55555 	.word	0x3fc55555

08010a98 <__ieee754_rem_pio2>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8010a9e:	ee17 5a90 	vmov	r5, s15
 8010aa2:	4b99      	ldr	r3, [pc, #612]	; (8010d08 <__ieee754_rem_pio2+0x270>)
 8010aa4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010aa8:	429e      	cmp	r6, r3
 8010aaa:	b088      	sub	sp, #32
 8010aac:	4604      	mov	r4, r0
 8010aae:	dc07      	bgt.n	8010ac0 <__ieee754_rem_pio2+0x28>
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	ed84 0b00 	vstr	d0, [r4]
 8010ab8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010abc:	2000      	movs	r0, #0
 8010abe:	e01b      	b.n	8010af8 <__ieee754_rem_pio2+0x60>
 8010ac0:	4b92      	ldr	r3, [pc, #584]	; (8010d0c <__ieee754_rem_pio2+0x274>)
 8010ac2:	429e      	cmp	r6, r3
 8010ac4:	dc3b      	bgt.n	8010b3e <__ieee754_rem_pio2+0xa6>
 8010ac6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010aca:	2d00      	cmp	r5, #0
 8010acc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8010cc8 <__ieee754_rem_pio2+0x230>
 8010ad0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010ad4:	dd19      	ble.n	8010b0a <__ieee754_rem_pio2+0x72>
 8010ad6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010ada:	429e      	cmp	r6, r3
 8010adc:	d00e      	beq.n	8010afc <__ieee754_rem_pio2+0x64>
 8010ade:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010cd0 <__ieee754_rem_pio2+0x238>
 8010ae2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010ae6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010aea:	ed84 5b00 	vstr	d5, [r4]
 8010aee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010af2:	ed84 7b02 	vstr	d7, [r4, #8]
 8010af6:	2001      	movs	r0, #1
 8010af8:	b008      	add	sp, #32
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
 8010afc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010cd8 <__ieee754_rem_pio2+0x240>
 8010b00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b04:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8010ce0 <__ieee754_rem_pio2+0x248>
 8010b08:	e7eb      	b.n	8010ae2 <__ieee754_rem_pio2+0x4a>
 8010b0a:	429e      	cmp	r6, r3
 8010b0c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010b10:	d00e      	beq.n	8010b30 <__ieee754_rem_pio2+0x98>
 8010b12:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8010cd0 <__ieee754_rem_pio2+0x238>
 8010b16:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010b1a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010b1e:	ed84 5b00 	vstr	d5, [r4]
 8010b22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010b26:	f04f 30ff 	mov.w	r0, #4294967295
 8010b2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8010b2e:	e7e3      	b.n	8010af8 <__ieee754_rem_pio2+0x60>
 8010b30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010cd8 <__ieee754_rem_pio2+0x240>
 8010b34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010b38:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010ce0 <__ieee754_rem_pio2+0x248>
 8010b3c:	e7eb      	b.n	8010b16 <__ieee754_rem_pio2+0x7e>
 8010b3e:	4b74      	ldr	r3, [pc, #464]	; (8010d10 <__ieee754_rem_pio2+0x278>)
 8010b40:	429e      	cmp	r6, r3
 8010b42:	dc70      	bgt.n	8010c26 <__ieee754_rem_pio2+0x18e>
 8010b44:	f000 f8ec 	bl	8010d20 <fabs>
 8010b48:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b4c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010ce8 <__ieee754_rem_pio2+0x250>
 8010b50:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010b54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010b58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010b5c:	ee17 0a90 	vmov	r0, s15
 8010b60:	eeb1 4b45 	vneg.f64	d4, d5
 8010b64:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010cc8 <__ieee754_rem_pio2+0x230>
 8010b68:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010b6c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8010cd0 <__ieee754_rem_pio2+0x238>
 8010b70:	281f      	cmp	r0, #31
 8010b72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010b76:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010b7a:	dc08      	bgt.n	8010b8e <__ieee754_rem_pio2+0xf6>
 8010b7c:	4b65      	ldr	r3, [pc, #404]	; (8010d14 <__ieee754_rem_pio2+0x27c>)
 8010b7e:	1e42      	subs	r2, r0, #1
 8010b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b84:	42b3      	cmp	r3, r6
 8010b86:	d002      	beq.n	8010b8e <__ieee754_rem_pio2+0xf6>
 8010b88:	ed84 6b00 	vstr	d6, [r4]
 8010b8c:	e024      	b.n	8010bd8 <__ieee754_rem_pio2+0x140>
 8010b8e:	ee16 3a90 	vmov	r3, s13
 8010b92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010b96:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010b9a:	2b10      	cmp	r3, #16
 8010b9c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010ba0:	ddf2      	ble.n	8010b88 <__ieee754_rem_pio2+0xf0>
 8010ba2:	eeb0 6b40 	vmov.f64	d6, d0
 8010ba6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8010cd8 <__ieee754_rem_pio2+0x240>
 8010baa:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010bae:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010bb2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010bb6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010ce0 <__ieee754_rem_pio2+0x248>
 8010bba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010bbe:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010bc2:	ee13 3a90 	vmov	r3, s7
 8010bc6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	2b31      	cmp	r3, #49	; 0x31
 8010bce:	dc17      	bgt.n	8010c00 <__ieee754_rem_pio2+0x168>
 8010bd0:	eeb0 0b46 	vmov.f64	d0, d6
 8010bd4:	ed84 3b00 	vstr	d3, [r4]
 8010bd8:	ed94 6b00 	vldr	d6, [r4]
 8010bdc:	2d00      	cmp	r5, #0
 8010bde:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010be2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010be6:	ed84 0b02 	vstr	d0, [r4, #8]
 8010bea:	da85      	bge.n	8010af8 <__ieee754_rem_pio2+0x60>
 8010bec:	eeb1 6b46 	vneg.f64	d6, d6
 8010bf0:	eeb1 0b40 	vneg.f64	d0, d0
 8010bf4:	ed84 6b00 	vstr	d6, [r4]
 8010bf8:	ed84 0b02 	vstr	d0, [r4, #8]
 8010bfc:	4240      	negs	r0, r0
 8010bfe:	e77b      	b.n	8010af8 <__ieee754_rem_pio2+0x60>
 8010c00:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8010cf0 <__ieee754_rem_pio2+0x258>
 8010c04:	eeb0 0b46 	vmov.f64	d0, d6
 8010c08:	eea4 0b07 	vfma.f64	d0, d4, d7
 8010c0c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8010c10:	eea4 6b07 	vfma.f64	d6, d4, d7
 8010c14:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8010cf8 <__ieee754_rem_pio2+0x260>
 8010c18:	eeb0 7b46 	vmov.f64	d7, d6
 8010c1c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8010c20:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010c24:	e7b0      	b.n	8010b88 <__ieee754_rem_pio2+0xf0>
 8010c26:	4b3c      	ldr	r3, [pc, #240]	; (8010d18 <__ieee754_rem_pio2+0x280>)
 8010c28:	429e      	cmp	r6, r3
 8010c2a:	dd06      	ble.n	8010c3a <__ieee754_rem_pio2+0x1a2>
 8010c2c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010c30:	ed80 7b02 	vstr	d7, [r0, #8]
 8010c34:	ed80 7b00 	vstr	d7, [r0]
 8010c38:	e740      	b.n	8010abc <__ieee754_rem_pio2+0x24>
 8010c3a:	1532      	asrs	r2, r6, #20
 8010c3c:	ee10 0a10 	vmov	r0, s0
 8010c40:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010c44:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010c48:	ec41 0b17 	vmov	d7, r0, r1
 8010c4c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010c50:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010d00 <__ieee754_rem_pio2+0x268>
 8010c54:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010c58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010c60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010c68:	a808      	add	r0, sp, #32
 8010c6a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010c6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010c72:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010c76:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010c7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010c7e:	2103      	movs	r1, #3
 8010c80:	ed30 7b02 	vldmdb	r0!, {d7}
 8010c84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	f101 31ff 	add.w	r1, r1, #4294967295
 8010c92:	d0f5      	beq.n	8010c80 <__ieee754_rem_pio2+0x1e8>
 8010c94:	4921      	ldr	r1, [pc, #132]	; (8010d1c <__ieee754_rem_pio2+0x284>)
 8010c96:	9101      	str	r1, [sp, #4]
 8010c98:	2102      	movs	r1, #2
 8010c9a:	9100      	str	r1, [sp, #0]
 8010c9c:	a802      	add	r0, sp, #8
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	f000 f84a 	bl	8010d38 <__kernel_rem_pio2>
 8010ca4:	2d00      	cmp	r5, #0
 8010ca6:	f6bf af27 	bge.w	8010af8 <__ieee754_rem_pio2+0x60>
 8010caa:	ed94 7b00 	vldr	d7, [r4]
 8010cae:	eeb1 7b47 	vneg.f64	d7, d7
 8010cb2:	ed84 7b00 	vstr	d7, [r4]
 8010cb6:	ed94 7b02 	vldr	d7, [r4, #8]
 8010cba:	eeb1 7b47 	vneg.f64	d7, d7
 8010cbe:	ed84 7b02 	vstr	d7, [r4, #8]
 8010cc2:	e79b      	b.n	8010bfc <__ieee754_rem_pio2+0x164>
 8010cc4:	f3af 8000 	nop.w
 8010cc8:	54400000 	.word	0x54400000
 8010ccc:	3ff921fb 	.word	0x3ff921fb
 8010cd0:	1a626331 	.word	0x1a626331
 8010cd4:	3dd0b461 	.word	0x3dd0b461
 8010cd8:	1a600000 	.word	0x1a600000
 8010cdc:	3dd0b461 	.word	0x3dd0b461
 8010ce0:	2e037073 	.word	0x2e037073
 8010ce4:	3ba3198a 	.word	0x3ba3198a
 8010ce8:	6dc9c883 	.word	0x6dc9c883
 8010cec:	3fe45f30 	.word	0x3fe45f30
 8010cf0:	2e000000 	.word	0x2e000000
 8010cf4:	3ba3198a 	.word	0x3ba3198a
 8010cf8:	252049c1 	.word	0x252049c1
 8010cfc:	397b839a 	.word	0x397b839a
 8010d00:	00000000 	.word	0x00000000
 8010d04:	41700000 	.word	0x41700000
 8010d08:	3fe921fb 	.word	0x3fe921fb
 8010d0c:	4002d97b 	.word	0x4002d97b
 8010d10:	413921fb 	.word	0x413921fb
 8010d14:	08017838 	.word	0x08017838
 8010d18:	7fefffff 	.word	0x7fefffff
 8010d1c:	080178b8 	.word	0x080178b8

08010d20 <fabs>:
 8010d20:	ec51 0b10 	vmov	r0, r1, d0
 8010d24:	ee10 2a10 	vmov	r2, s0
 8010d28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d2c:	ec43 2b10 	vmov	d0, r2, r3
 8010d30:	4770      	bx	lr
 8010d32:	0000      	movs	r0, r0
 8010d34:	0000      	movs	r0, r0
	...

08010d38 <__kernel_rem_pio2>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	ed2d 8b06 	vpush	{d8-d10}
 8010d40:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8010d44:	460f      	mov	r7, r1
 8010d46:	9002      	str	r0, [sp, #8]
 8010d48:	49c3      	ldr	r1, [pc, #780]	; (8011058 <__kernel_rem_pio2+0x320>)
 8010d4a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8010d52:	9901      	ldr	r1, [sp, #4]
 8010d54:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8010d56:	f112 0f14 	cmn.w	r2, #20
 8010d5a:	bfa8      	it	ge
 8010d5c:	1ed0      	subge	r0, r2, #3
 8010d5e:	f101 3aff 	add.w	sl, r1, #4294967295
 8010d62:	bfaa      	itet	ge
 8010d64:	2418      	movge	r4, #24
 8010d66:	2000      	movlt	r0, #0
 8010d68:	fb90 f0f4 	sdivge	r0, r0, r4
 8010d6c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8011040 <__kernel_rem_pio2+0x308>
 8010d70:	f06f 0417 	mvn.w	r4, #23
 8010d74:	fb00 4404 	mla	r4, r0, r4, r4
 8010d78:	eba0 060a 	sub.w	r6, r0, sl
 8010d7c:	4414      	add	r4, r2
 8010d7e:	eb09 0c0a 	add.w	ip, r9, sl
 8010d82:	ad1a      	add	r5, sp, #104	; 0x68
 8010d84:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8010d88:	2200      	movs	r2, #0
 8010d8a:	4562      	cmp	r2, ip
 8010d8c:	dd10      	ble.n	8010db0 <__kernel_rem_pio2+0x78>
 8010d8e:	9a01      	ldr	r2, [sp, #4]
 8010d90:	a91a      	add	r1, sp, #104	; 0x68
 8010d92:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010d96:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8010d9a:	f04f 0c00 	mov.w	ip, #0
 8010d9e:	45cc      	cmp	ip, r9
 8010da0:	dc26      	bgt.n	8010df0 <__kernel_rem_pio2+0xb8>
 8010da2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8011040 <__kernel_rem_pio2+0x308>
 8010da6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010daa:	4616      	mov	r6, r2
 8010dac:	2500      	movs	r5, #0
 8010dae:	e015      	b.n	8010ddc <__kernel_rem_pio2+0xa4>
 8010db0:	42d6      	cmn	r6, r2
 8010db2:	d409      	bmi.n	8010dc8 <__kernel_rem_pio2+0x90>
 8010db4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8010db8:	ee07 1a90 	vmov	s15, r1
 8010dbc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010dc0:	eca5 7b02 	vstmia	r5!, {d7}
 8010dc4:	3201      	adds	r2, #1
 8010dc6:	e7e0      	b.n	8010d8a <__kernel_rem_pio2+0x52>
 8010dc8:	eeb0 7b46 	vmov.f64	d7, d6
 8010dcc:	e7f8      	b.n	8010dc0 <__kernel_rem_pio2+0x88>
 8010dce:	ecbe 5b02 	vldmia	lr!, {d5}
 8010dd2:	ed96 6b00 	vldr	d6, [r6]
 8010dd6:	3501      	adds	r5, #1
 8010dd8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010ddc:	4555      	cmp	r5, sl
 8010dde:	f1a6 0608 	sub.w	r6, r6, #8
 8010de2:	ddf4      	ble.n	8010dce <__kernel_rem_pio2+0x96>
 8010de4:	eca8 7b02 	vstmia	r8!, {d7}
 8010de8:	f10c 0c01 	add.w	ip, ip, #1
 8010dec:	3208      	adds	r2, #8
 8010dee:	e7d6      	b.n	8010d9e <__kernel_rem_pio2+0x66>
 8010df0:	aa06      	add	r2, sp, #24
 8010df2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8011048 <__kernel_rem_pio2+0x310>
 8010df6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011050 <__kernel_rem_pio2+0x318>
 8010dfa:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010dfe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8010e02:	9204      	str	r2, [sp, #16]
 8010e04:	9303      	str	r3, [sp, #12]
 8010e06:	464d      	mov	r5, r9
 8010e08:	00eb      	lsls	r3, r5, #3
 8010e0a:	9305      	str	r3, [sp, #20]
 8010e0c:	ab92      	add	r3, sp, #584	; 0x248
 8010e0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010e12:	f10d 0b18 	add.w	fp, sp, #24
 8010e16:	ab6a      	add	r3, sp, #424	; 0x1a8
 8010e18:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8010e1c:	465e      	mov	r6, fp
 8010e1e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8010e22:	4628      	mov	r0, r5
 8010e24:	2800      	cmp	r0, #0
 8010e26:	f1a2 0208 	sub.w	r2, r2, #8
 8010e2a:	dc48      	bgt.n	8010ebe <__kernel_rem_pio2+0x186>
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f000 fa17 	bl	8011260 <scalbn>
 8010e32:	eeb0 8b40 	vmov.f64	d8, d0
 8010e36:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010e3a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010e3e:	f000 fa8f 	bl	8011360 <floor>
 8010e42:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010e46:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010e4a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010e4e:	2c00      	cmp	r4, #0
 8010e50:	ee17 8a90 	vmov	r8, s15
 8010e54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e58:	ee38 8b47 	vsub.f64	d8, d8, d7
 8010e5c:	dd41      	ble.n	8010ee2 <__kernel_rem_pio2+0x1aa>
 8010e5e:	1e68      	subs	r0, r5, #1
 8010e60:	ab06      	add	r3, sp, #24
 8010e62:	f1c4 0c18 	rsb	ip, r4, #24
 8010e66:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010e6a:	fa46 f20c 	asr.w	r2, r6, ip
 8010e6e:	4490      	add	r8, r2
 8010e70:	fa02 f20c 	lsl.w	r2, r2, ip
 8010e74:	1ab6      	subs	r6, r6, r2
 8010e76:	f1c4 0217 	rsb	r2, r4, #23
 8010e7a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8010e7e:	4116      	asrs	r6, r2
 8010e80:	2e00      	cmp	r6, #0
 8010e82:	dd3d      	ble.n	8010f00 <__kernel_rem_pio2+0x1c8>
 8010e84:	f04f 0c00 	mov.w	ip, #0
 8010e88:	f108 0801 	add.w	r8, r8, #1
 8010e8c:	4660      	mov	r0, ip
 8010e8e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010e92:	4565      	cmp	r5, ip
 8010e94:	dc6a      	bgt.n	8010f6c <__kernel_rem_pio2+0x234>
 8010e96:	2c00      	cmp	r4, #0
 8010e98:	dd04      	ble.n	8010ea4 <__kernel_rem_pio2+0x16c>
 8010e9a:	2c01      	cmp	r4, #1
 8010e9c:	d07b      	beq.n	8010f96 <__kernel_rem_pio2+0x25e>
 8010e9e:	2c02      	cmp	r4, #2
 8010ea0:	f000 8083 	beq.w	8010faa <__kernel_rem_pio2+0x272>
 8010ea4:	2e02      	cmp	r6, #2
 8010ea6:	d12b      	bne.n	8010f00 <__kernel_rem_pio2+0x1c8>
 8010ea8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010eac:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010eb0:	b330      	cbz	r0, 8010f00 <__kernel_rem_pio2+0x1c8>
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	f000 f9d4 	bl	8011260 <scalbn>
 8010eb8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010ebc:	e020      	b.n	8010f00 <__kernel_rem_pio2+0x1c8>
 8010ebe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010ec2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010ec6:	3801      	subs	r0, #1
 8010ec8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010ecc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010ed0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010ed4:	eca6 0a01 	vstmia	r6!, {s0}
 8010ed8:	ed92 0b00 	vldr	d0, [r2]
 8010edc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010ee0:	e7a0      	b.n	8010e24 <__kernel_rem_pio2+0xec>
 8010ee2:	d105      	bne.n	8010ef0 <__kernel_rem_pio2+0x1b8>
 8010ee4:	1e6a      	subs	r2, r5, #1
 8010ee6:	ab06      	add	r3, sp, #24
 8010ee8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8010eec:	15f6      	asrs	r6, r6, #23
 8010eee:	e7c7      	b.n	8010e80 <__kernel_rem_pio2+0x148>
 8010ef0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010ef4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efc:	da34      	bge.n	8010f68 <__kernel_rem_pio2+0x230>
 8010efe:	2600      	movs	r6, #0
 8010f00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f08:	f040 80aa 	bne.w	8011060 <__kernel_rem_pio2+0x328>
 8010f0c:	f105 3bff 	add.w	fp, r5, #4294967295
 8010f10:	4658      	mov	r0, fp
 8010f12:	2200      	movs	r2, #0
 8010f14:	4548      	cmp	r0, r9
 8010f16:	da50      	bge.n	8010fba <__kernel_rem_pio2+0x282>
 8010f18:	2a00      	cmp	r2, #0
 8010f1a:	d06b      	beq.n	8010ff4 <__kernel_rem_pio2+0x2bc>
 8010f1c:	ab06      	add	r3, sp, #24
 8010f1e:	3c18      	subs	r4, #24
 8010f20:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f000 8087 	beq.w	8011038 <__kernel_rem_pio2+0x300>
 8010f2a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f000 f996 	bl	8011260 <scalbn>
 8010f34:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8011048 <__kernel_rem_pio2+0x310>
 8010f38:	f10b 0201 	add.w	r2, fp, #1
 8010f3c:	a96a      	add	r1, sp, #424	; 0x1a8
 8010f3e:	00d3      	lsls	r3, r2, #3
 8010f40:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010f44:	465a      	mov	r2, fp
 8010f46:	2a00      	cmp	r2, #0
 8010f48:	f280 80b8 	bge.w	80110bc <__kernel_rem_pio2+0x384>
 8010f4c:	465a      	mov	r2, fp
 8010f4e:	2a00      	cmp	r2, #0
 8010f50:	f2c0 80d6 	blt.w	8011100 <__kernel_rem_pio2+0x3c8>
 8010f54:	a96a      	add	r1, sp, #424	; 0x1a8
 8010f56:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8010f5a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8011040 <__kernel_rem_pio2+0x308>
 8010f5e:	4d3f      	ldr	r5, [pc, #252]	; (801105c <__kernel_rem_pio2+0x324>)
 8010f60:	2000      	movs	r0, #0
 8010f62:	ebab 0102 	sub.w	r1, fp, r2
 8010f66:	e0c0      	b.n	80110ea <__kernel_rem_pio2+0x3b2>
 8010f68:	2602      	movs	r6, #2
 8010f6a:	e78b      	b.n	8010e84 <__kernel_rem_pio2+0x14c>
 8010f6c:	f8db 2000 	ldr.w	r2, [fp]
 8010f70:	b958      	cbnz	r0, 8010f8a <__kernel_rem_pio2+0x252>
 8010f72:	b122      	cbz	r2, 8010f7e <__kernel_rem_pio2+0x246>
 8010f74:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010f78:	f8cb 2000 	str.w	r2, [fp]
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	f10c 0c01 	add.w	ip, ip, #1
 8010f82:	f10b 0b04 	add.w	fp, fp, #4
 8010f86:	4610      	mov	r0, r2
 8010f88:	e783      	b.n	8010e92 <__kernel_rem_pio2+0x15a>
 8010f8a:	ebae 0202 	sub.w	r2, lr, r2
 8010f8e:	f8cb 2000 	str.w	r2, [fp]
 8010f92:	4602      	mov	r2, r0
 8010f94:	e7f3      	b.n	8010f7e <__kernel_rem_pio2+0x246>
 8010f96:	f105 3cff 	add.w	ip, r5, #4294967295
 8010f9a:	ab06      	add	r3, sp, #24
 8010f9c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010fa0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8010fa4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8010fa8:	e77c      	b.n	8010ea4 <__kernel_rem_pio2+0x16c>
 8010faa:	f105 3cff 	add.w	ip, r5, #4294967295
 8010fae:	ab06      	add	r3, sp, #24
 8010fb0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8010fb4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8010fb8:	e7f4      	b.n	8010fa4 <__kernel_rem_pio2+0x26c>
 8010fba:	ab06      	add	r3, sp, #24
 8010fbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010fc0:	3801      	subs	r0, #1
 8010fc2:	431a      	orrs	r2, r3
 8010fc4:	e7a6      	b.n	8010f14 <__kernel_rem_pio2+0x1dc>
 8010fc6:	3201      	adds	r2, #1
 8010fc8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010fcc:	2e00      	cmp	r6, #0
 8010fce:	d0fa      	beq.n	8010fc6 <__kernel_rem_pio2+0x28e>
 8010fd0:	9b05      	ldr	r3, [sp, #20]
 8010fd2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8010fd6:	eb0d 0003 	add.w	r0, sp, r3
 8010fda:	9b01      	ldr	r3, [sp, #4]
 8010fdc:	18ee      	adds	r6, r5, r3
 8010fde:	ab1a      	add	r3, sp, #104	; 0x68
 8010fe0:	f105 0c01 	add.w	ip, r5, #1
 8010fe4:	3898      	subs	r0, #152	; 0x98
 8010fe6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010fea:	442a      	add	r2, r5
 8010fec:	4562      	cmp	r2, ip
 8010fee:	da04      	bge.n	8010ffa <__kernel_rem_pio2+0x2c2>
 8010ff0:	4615      	mov	r5, r2
 8010ff2:	e709      	b.n	8010e08 <__kernel_rem_pio2+0xd0>
 8010ff4:	9804      	ldr	r0, [sp, #16]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	e7e6      	b.n	8010fc8 <__kernel_rem_pio2+0x290>
 8010ffa:	9b03      	ldr	r3, [sp, #12]
 8010ffc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011000:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011004:	9305      	str	r3, [sp, #20]
 8011006:	ee07 3a90 	vmov	s15, r3
 801100a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801100e:	2500      	movs	r5, #0
 8011010:	eca6 7b02 	vstmia	r6!, {d7}
 8011014:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8011040 <__kernel_rem_pio2+0x308>
 8011018:	46b0      	mov	r8, r6
 801101a:	4555      	cmp	r5, sl
 801101c:	dd04      	ble.n	8011028 <__kernel_rem_pio2+0x2f0>
 801101e:	eca0 7b02 	vstmia	r0!, {d7}
 8011022:	f10c 0c01 	add.w	ip, ip, #1
 8011026:	e7e1      	b.n	8010fec <__kernel_rem_pio2+0x2b4>
 8011028:	ecbe 5b02 	vldmia	lr!, {d5}
 801102c:	ed38 6b02 	vldmdb	r8!, {d6}
 8011030:	3501      	adds	r5, #1
 8011032:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011036:	e7f0      	b.n	801101a <__kernel_rem_pio2+0x2e2>
 8011038:	f10b 3bff 	add.w	fp, fp, #4294967295
 801103c:	e76e      	b.n	8010f1c <__kernel_rem_pio2+0x1e4>
 801103e:	bf00      	nop
	...
 801104c:	3e700000 	.word	0x3e700000
 8011050:	00000000 	.word	0x00000000
 8011054:	41700000 	.word	0x41700000
 8011058:	08017a00 	.word	0x08017a00
 801105c:	080179c0 	.word	0x080179c0
 8011060:	4260      	negs	r0, r4
 8011062:	eeb0 0b48 	vmov.f64	d0, d8
 8011066:	f000 f8fb 	bl	8011260 <scalbn>
 801106a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011248 <__kernel_rem_pio2+0x510>
 801106e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011076:	db18      	blt.n	80110aa <__kernel_rem_pio2+0x372>
 8011078:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011250 <__kernel_rem_pio2+0x518>
 801107c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011080:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011084:	aa06      	add	r2, sp, #24
 8011086:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801108a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801108e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011092:	f105 0b01 	add.w	fp, r5, #1
 8011096:	ee10 3a10 	vmov	r3, s0
 801109a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801109e:	ee17 3a10 	vmov	r3, s14
 80110a2:	3418      	adds	r4, #24
 80110a4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80110a8:	e73f      	b.n	8010f2a <__kernel_rem_pio2+0x1f2>
 80110aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80110ae:	aa06      	add	r2, sp, #24
 80110b0:	ee10 3a10 	vmov	r3, s0
 80110b4:	46ab      	mov	fp, r5
 80110b6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80110ba:	e736      	b.n	8010f2a <__kernel_rem_pio2+0x1f2>
 80110bc:	a806      	add	r0, sp, #24
 80110be:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80110c2:	9001      	str	r0, [sp, #4]
 80110c4:	ee07 0a90 	vmov	s15, r0
 80110c8:	3a01      	subs	r2, #1
 80110ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80110ce:	ee27 7b00 	vmul.f64	d7, d7, d0
 80110d2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80110d6:	ed21 7b02 	vstmdb	r1!, {d7}
 80110da:	e734      	b.n	8010f46 <__kernel_rem_pio2+0x20e>
 80110dc:	ecb5 5b02 	vldmia	r5!, {d5}
 80110e0:	ecb4 6b02 	vldmia	r4!, {d6}
 80110e4:	3001      	adds	r0, #1
 80110e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80110ea:	4548      	cmp	r0, r9
 80110ec:	dc01      	bgt.n	80110f2 <__kernel_rem_pio2+0x3ba>
 80110ee:	4288      	cmp	r0, r1
 80110f0:	ddf4      	ble.n	80110dc <__kernel_rem_pio2+0x3a4>
 80110f2:	a842      	add	r0, sp, #264	; 0x108
 80110f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80110f8:	ed81 7b00 	vstr	d7, [r1]
 80110fc:	3a01      	subs	r2, #1
 80110fe:	e726      	b.n	8010f4e <__kernel_rem_pio2+0x216>
 8011100:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011102:	2a02      	cmp	r2, #2
 8011104:	dc0a      	bgt.n	801111c <__kernel_rem_pio2+0x3e4>
 8011106:	2a00      	cmp	r2, #0
 8011108:	dc2e      	bgt.n	8011168 <__kernel_rem_pio2+0x430>
 801110a:	d047      	beq.n	801119c <__kernel_rem_pio2+0x464>
 801110c:	f008 0007 	and.w	r0, r8, #7
 8011110:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011114:	ecbd 8b06 	vpop	{d8-d10}
 8011118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801111e:	2a03      	cmp	r2, #3
 8011120:	d1f4      	bne.n	801110c <__kernel_rem_pio2+0x3d4>
 8011122:	a942      	add	r1, sp, #264	; 0x108
 8011124:	f1a3 0208 	sub.w	r2, r3, #8
 8011128:	440a      	add	r2, r1
 801112a:	4611      	mov	r1, r2
 801112c:	4658      	mov	r0, fp
 801112e:	2800      	cmp	r0, #0
 8011130:	f1a1 0108 	sub.w	r1, r1, #8
 8011134:	dc55      	bgt.n	80111e2 <__kernel_rem_pio2+0x4aa>
 8011136:	4659      	mov	r1, fp
 8011138:	2901      	cmp	r1, #1
 801113a:	f1a2 0208 	sub.w	r2, r2, #8
 801113e:	dc60      	bgt.n	8011202 <__kernel_rem_pio2+0x4ca>
 8011140:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8011258 <__kernel_rem_pio2+0x520>
 8011144:	aa42      	add	r2, sp, #264	; 0x108
 8011146:	4413      	add	r3, r2
 8011148:	f1bb 0f01 	cmp.w	fp, #1
 801114c:	dc69      	bgt.n	8011222 <__kernel_rem_pio2+0x4ea>
 801114e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011152:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011156:	2e00      	cmp	r6, #0
 8011158:	d16a      	bne.n	8011230 <__kernel_rem_pio2+0x4f8>
 801115a:	ed87 5b00 	vstr	d5, [r7]
 801115e:	ed87 6b02 	vstr	d6, [r7, #8]
 8011162:	ed87 7b04 	vstr	d7, [r7, #16]
 8011166:	e7d1      	b.n	801110c <__kernel_rem_pio2+0x3d4>
 8011168:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011258 <__kernel_rem_pio2+0x520>
 801116c:	aa42      	add	r2, sp, #264	; 0x108
 801116e:	4413      	add	r3, r2
 8011170:	465a      	mov	r2, fp
 8011172:	2a00      	cmp	r2, #0
 8011174:	da26      	bge.n	80111c4 <__kernel_rem_pio2+0x48c>
 8011176:	b35e      	cbz	r6, 80111d0 <__kernel_rem_pio2+0x498>
 8011178:	eeb1 7b46 	vneg.f64	d7, d6
 801117c:	ed87 7b00 	vstr	d7, [r7]
 8011180:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011184:	aa44      	add	r2, sp, #272	; 0x110
 8011186:	2301      	movs	r3, #1
 8011188:	ee37 7b46 	vsub.f64	d7, d7, d6
 801118c:	459b      	cmp	fp, r3
 801118e:	da22      	bge.n	80111d6 <__kernel_rem_pio2+0x49e>
 8011190:	b10e      	cbz	r6, 8011196 <__kernel_rem_pio2+0x45e>
 8011192:	eeb1 7b47 	vneg.f64	d7, d7
 8011196:	ed87 7b02 	vstr	d7, [r7, #8]
 801119a:	e7b7      	b.n	801110c <__kernel_rem_pio2+0x3d4>
 801119c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011258 <__kernel_rem_pio2+0x520>
 80111a0:	aa42      	add	r2, sp, #264	; 0x108
 80111a2:	4413      	add	r3, r2
 80111a4:	f1bb 0f00 	cmp.w	fp, #0
 80111a8:	da05      	bge.n	80111b6 <__kernel_rem_pio2+0x47e>
 80111aa:	b10e      	cbz	r6, 80111b0 <__kernel_rem_pio2+0x478>
 80111ac:	eeb1 7b47 	vneg.f64	d7, d7
 80111b0:	ed87 7b00 	vstr	d7, [r7]
 80111b4:	e7aa      	b.n	801110c <__kernel_rem_pio2+0x3d4>
 80111b6:	ed33 6b02 	vldmdb	r3!, {d6}
 80111ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80111be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111c2:	e7ef      	b.n	80111a4 <__kernel_rem_pio2+0x46c>
 80111c4:	ed33 7b02 	vldmdb	r3!, {d7}
 80111c8:	3a01      	subs	r2, #1
 80111ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80111ce:	e7d0      	b.n	8011172 <__kernel_rem_pio2+0x43a>
 80111d0:	eeb0 7b46 	vmov.f64	d7, d6
 80111d4:	e7d2      	b.n	801117c <__kernel_rem_pio2+0x444>
 80111d6:	ecb2 6b02 	vldmia	r2!, {d6}
 80111da:	3301      	adds	r3, #1
 80111dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111e0:	e7d4      	b.n	801118c <__kernel_rem_pio2+0x454>
 80111e2:	ed91 7b00 	vldr	d7, [r1]
 80111e6:	ed91 5b02 	vldr	d5, [r1, #8]
 80111ea:	3801      	subs	r0, #1
 80111ec:	ee37 6b05 	vadd.f64	d6, d7, d5
 80111f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80111f4:	ed81 6b00 	vstr	d6, [r1]
 80111f8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80111fc:	ed81 7b02 	vstr	d7, [r1, #8]
 8011200:	e795      	b.n	801112e <__kernel_rem_pio2+0x3f6>
 8011202:	ed92 7b00 	vldr	d7, [r2]
 8011206:	ed92 5b02 	vldr	d5, [r2, #8]
 801120a:	3901      	subs	r1, #1
 801120c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011210:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011214:	ed82 6b00 	vstr	d6, [r2]
 8011218:	ee37 7b05 	vadd.f64	d7, d7, d5
 801121c:	ed82 7b02 	vstr	d7, [r2, #8]
 8011220:	e78a      	b.n	8011138 <__kernel_rem_pio2+0x400>
 8011222:	ed33 6b02 	vldmdb	r3!, {d6}
 8011226:	f10b 3bff 	add.w	fp, fp, #4294967295
 801122a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801122e:	e78b      	b.n	8011148 <__kernel_rem_pio2+0x410>
 8011230:	eeb1 5b45 	vneg.f64	d5, d5
 8011234:	eeb1 6b46 	vneg.f64	d6, d6
 8011238:	ed87 5b00 	vstr	d5, [r7]
 801123c:	eeb1 7b47 	vneg.f64	d7, d7
 8011240:	ed87 6b02 	vstr	d6, [r7, #8]
 8011244:	e78d      	b.n	8011162 <__kernel_rem_pio2+0x42a>
 8011246:	bf00      	nop
 8011248:	00000000 	.word	0x00000000
 801124c:	41700000 	.word	0x41700000
 8011250:	00000000 	.word	0x00000000
 8011254:	3e700000 	.word	0x3e700000
	...

08011260 <scalbn>:
 8011260:	ee10 1a90 	vmov	r1, s1
 8011264:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011268:	b98b      	cbnz	r3, 801128e <scalbn+0x2e>
 801126a:	ee10 3a10 	vmov	r3, s0
 801126e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011272:	4319      	orrs	r1, r3
 8011274:	d00a      	beq.n	801128c <scalbn+0x2c>
 8011276:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8011328 <scalbn+0xc8>
 801127a:	4b37      	ldr	r3, [pc, #220]	; (8011358 <scalbn+0xf8>)
 801127c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011280:	4298      	cmp	r0, r3
 8011282:	da0b      	bge.n	801129c <scalbn+0x3c>
 8011284:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8011330 <scalbn+0xd0>
 8011288:	ee20 0b07 	vmul.f64	d0, d0, d7
 801128c:	4770      	bx	lr
 801128e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011292:	4293      	cmp	r3, r2
 8011294:	d107      	bne.n	80112a6 <scalbn+0x46>
 8011296:	ee30 0b00 	vadd.f64	d0, d0, d0
 801129a:	4770      	bx	lr
 801129c:	ee10 1a90 	vmov	r1, s1
 80112a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80112a4:	3b36      	subs	r3, #54	; 0x36
 80112a6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80112aa:	4290      	cmp	r0, r2
 80112ac:	dd0d      	ble.n	80112ca <scalbn+0x6a>
 80112ae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011338 <scalbn+0xd8>
 80112b2:	ee10 3a90 	vmov	r3, s1
 80112b6:	eeb0 6b47 	vmov.f64	d6, d7
 80112ba:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8011340 <scalbn+0xe0>
 80112be:	2b00      	cmp	r3, #0
 80112c0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80112c4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80112c8:	4770      	bx	lr
 80112ca:	4418      	add	r0, r3
 80112cc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80112d0:	4298      	cmp	r0, r3
 80112d2:	dcec      	bgt.n	80112ae <scalbn+0x4e>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	dd0a      	ble.n	80112ee <scalbn+0x8e>
 80112d8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80112dc:	ec53 2b10 	vmov	r2, r3, d0
 80112e0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80112e4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80112e8:	ec43 2b10 	vmov	d0, r2, r3
 80112ec:	4770      	bx	lr
 80112ee:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80112f2:	da09      	bge.n	8011308 <scalbn+0xa8>
 80112f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011330 <scalbn+0xd0>
 80112f8:	ee10 3a90 	vmov	r3, s1
 80112fc:	eeb0 6b47 	vmov.f64	d6, d7
 8011300:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8011348 <scalbn+0xe8>
 8011304:	2b00      	cmp	r3, #0
 8011306:	e7db      	b.n	80112c0 <scalbn+0x60>
 8011308:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801130c:	ec53 2b10 	vmov	r2, r3, d0
 8011310:	3036      	adds	r0, #54	; 0x36
 8011312:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8011316:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801131a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011350 <scalbn+0xf0>
 801131e:	ec43 2b10 	vmov	d0, r2, r3
 8011322:	e7b1      	b.n	8011288 <scalbn+0x28>
 8011324:	f3af 8000 	nop.w
 8011328:	00000000 	.word	0x00000000
 801132c:	43500000 	.word	0x43500000
 8011330:	c2f8f359 	.word	0xc2f8f359
 8011334:	01a56e1f 	.word	0x01a56e1f
 8011338:	8800759c 	.word	0x8800759c
 801133c:	7e37e43c 	.word	0x7e37e43c
 8011340:	8800759c 	.word	0x8800759c
 8011344:	fe37e43c 	.word	0xfe37e43c
 8011348:	c2f8f359 	.word	0xc2f8f359
 801134c:	81a56e1f 	.word	0x81a56e1f
 8011350:	00000000 	.word	0x00000000
 8011354:	3c900000 	.word	0x3c900000
 8011358:	ffff3cb0 	.word	0xffff3cb0
 801135c:	00000000 	.word	0x00000000

08011360 <floor>:
 8011360:	ee10 1a90 	vmov	r1, s1
 8011364:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011368:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801136c:	2b13      	cmp	r3, #19
 801136e:	b530      	push	{r4, r5, lr}
 8011370:	ee10 0a10 	vmov	r0, s0
 8011374:	ee10 5a10 	vmov	r5, s0
 8011378:	dc31      	bgt.n	80113de <floor+0x7e>
 801137a:	2b00      	cmp	r3, #0
 801137c:	da15      	bge.n	80113aa <floor+0x4a>
 801137e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011440 <floor+0xe0>
 8011382:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011386:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801138e:	dd07      	ble.n	80113a0 <floor+0x40>
 8011390:	2900      	cmp	r1, #0
 8011392:	da4e      	bge.n	8011432 <floor+0xd2>
 8011394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011398:	4308      	orrs	r0, r1
 801139a:	d04d      	beq.n	8011438 <floor+0xd8>
 801139c:	492a      	ldr	r1, [pc, #168]	; (8011448 <floor+0xe8>)
 801139e:	2000      	movs	r0, #0
 80113a0:	460b      	mov	r3, r1
 80113a2:	4602      	mov	r2, r0
 80113a4:	ec43 2b10 	vmov	d0, r2, r3
 80113a8:	e020      	b.n	80113ec <floor+0x8c>
 80113aa:	4a28      	ldr	r2, [pc, #160]	; (801144c <floor+0xec>)
 80113ac:	411a      	asrs	r2, r3
 80113ae:	ea01 0402 	and.w	r4, r1, r2
 80113b2:	4304      	orrs	r4, r0
 80113b4:	d01a      	beq.n	80113ec <floor+0x8c>
 80113b6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8011440 <floor+0xe0>
 80113ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80113be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80113c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c6:	ddeb      	ble.n	80113a0 <floor+0x40>
 80113c8:	2900      	cmp	r1, #0
 80113ca:	bfbe      	ittt	lt
 80113cc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80113d0:	fa40 f303 	asrlt.w	r3, r0, r3
 80113d4:	18c9      	addlt	r1, r1, r3
 80113d6:	ea21 0102 	bic.w	r1, r1, r2
 80113da:	2000      	movs	r0, #0
 80113dc:	e7e0      	b.n	80113a0 <floor+0x40>
 80113de:	2b33      	cmp	r3, #51	; 0x33
 80113e0:	dd05      	ble.n	80113ee <floor+0x8e>
 80113e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113e6:	d101      	bne.n	80113ec <floor+0x8c>
 80113e8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80113ec:	bd30      	pop	{r4, r5, pc}
 80113ee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80113f2:	f04f 32ff 	mov.w	r2, #4294967295
 80113f6:	40e2      	lsrs	r2, r4
 80113f8:	4210      	tst	r0, r2
 80113fa:	d0f7      	beq.n	80113ec <floor+0x8c>
 80113fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011440 <floor+0xe0>
 8011400:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011404:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140c:	ddc8      	ble.n	80113a0 <floor+0x40>
 801140e:	2900      	cmp	r1, #0
 8011410:	da02      	bge.n	8011418 <floor+0xb8>
 8011412:	2b14      	cmp	r3, #20
 8011414:	d103      	bne.n	801141e <floor+0xbe>
 8011416:	3101      	adds	r1, #1
 8011418:	ea20 0002 	bic.w	r0, r0, r2
 801141c:	e7c0      	b.n	80113a0 <floor+0x40>
 801141e:	2401      	movs	r4, #1
 8011420:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011424:	fa04 f303 	lsl.w	r3, r4, r3
 8011428:	4418      	add	r0, r3
 801142a:	4285      	cmp	r5, r0
 801142c:	bf88      	it	hi
 801142e:	1909      	addhi	r1, r1, r4
 8011430:	e7f2      	b.n	8011418 <floor+0xb8>
 8011432:	2000      	movs	r0, #0
 8011434:	4601      	mov	r1, r0
 8011436:	e7b3      	b.n	80113a0 <floor+0x40>
 8011438:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801143c:	e7b0      	b.n	80113a0 <floor+0x40>
 801143e:	bf00      	nop
 8011440:	8800759c 	.word	0x8800759c
 8011444:	7e37e43c 	.word	0x7e37e43c
 8011448:	bff00000 	.word	0xbff00000
 801144c:	000fffff 	.word	0x000fffff

08011450 <malloc>:
 8011450:	4b02      	ldr	r3, [pc, #8]	; (801145c <malloc+0xc>)
 8011452:	4601      	mov	r1, r0
 8011454:	6818      	ldr	r0, [r3, #0]
 8011456:	f000 b82b 	b.w	80114b0 <_malloc_r>
 801145a:	bf00      	nop
 801145c:	24000208 	.word	0x24000208

08011460 <free>:
 8011460:	4b02      	ldr	r3, [pc, #8]	; (801146c <free+0xc>)
 8011462:	4601      	mov	r1, r0
 8011464:	6818      	ldr	r0, [r3, #0]
 8011466:	f001 ba39 	b.w	80128dc <_free_r>
 801146a:	bf00      	nop
 801146c:	24000208 	.word	0x24000208

08011470 <sbrk_aligned>:
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	4e0e      	ldr	r6, [pc, #56]	; (80114ac <sbrk_aligned+0x3c>)
 8011474:	460c      	mov	r4, r1
 8011476:	6831      	ldr	r1, [r6, #0]
 8011478:	4605      	mov	r5, r0
 801147a:	b911      	cbnz	r1, 8011482 <sbrk_aligned+0x12>
 801147c:	f001 f9aa 	bl	80127d4 <_sbrk_r>
 8011480:	6030      	str	r0, [r6, #0]
 8011482:	4621      	mov	r1, r4
 8011484:	4628      	mov	r0, r5
 8011486:	f001 f9a5 	bl	80127d4 <_sbrk_r>
 801148a:	1c43      	adds	r3, r0, #1
 801148c:	d00a      	beq.n	80114a4 <sbrk_aligned+0x34>
 801148e:	1cc4      	adds	r4, r0, #3
 8011490:	f024 0403 	bic.w	r4, r4, #3
 8011494:	42a0      	cmp	r0, r4
 8011496:	d007      	beq.n	80114a8 <sbrk_aligned+0x38>
 8011498:	1a21      	subs	r1, r4, r0
 801149a:	4628      	mov	r0, r5
 801149c:	f001 f99a 	bl	80127d4 <_sbrk_r>
 80114a0:	3001      	adds	r0, #1
 80114a2:	d101      	bne.n	80114a8 <sbrk_aligned+0x38>
 80114a4:	f04f 34ff 	mov.w	r4, #4294967295
 80114a8:	4620      	mov	r0, r4
 80114aa:	bd70      	pop	{r4, r5, r6, pc}
 80114ac:	24010ea8 	.word	0x24010ea8

080114b0 <_malloc_r>:
 80114b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114b4:	1ccd      	adds	r5, r1, #3
 80114b6:	f025 0503 	bic.w	r5, r5, #3
 80114ba:	3508      	adds	r5, #8
 80114bc:	2d0c      	cmp	r5, #12
 80114be:	bf38      	it	cc
 80114c0:	250c      	movcc	r5, #12
 80114c2:	2d00      	cmp	r5, #0
 80114c4:	4607      	mov	r7, r0
 80114c6:	db01      	blt.n	80114cc <_malloc_r+0x1c>
 80114c8:	42a9      	cmp	r1, r5
 80114ca:	d905      	bls.n	80114d8 <_malloc_r+0x28>
 80114cc:	230c      	movs	r3, #12
 80114ce:	603b      	str	r3, [r7, #0]
 80114d0:	2600      	movs	r6, #0
 80114d2:	4630      	mov	r0, r6
 80114d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80115ac <_malloc_r+0xfc>
 80114dc:	f000 f868 	bl	80115b0 <__malloc_lock>
 80114e0:	f8d8 3000 	ldr.w	r3, [r8]
 80114e4:	461c      	mov	r4, r3
 80114e6:	bb5c      	cbnz	r4, 8011540 <_malloc_r+0x90>
 80114e8:	4629      	mov	r1, r5
 80114ea:	4638      	mov	r0, r7
 80114ec:	f7ff ffc0 	bl	8011470 <sbrk_aligned>
 80114f0:	1c43      	adds	r3, r0, #1
 80114f2:	4604      	mov	r4, r0
 80114f4:	d155      	bne.n	80115a2 <_malloc_r+0xf2>
 80114f6:	f8d8 4000 	ldr.w	r4, [r8]
 80114fa:	4626      	mov	r6, r4
 80114fc:	2e00      	cmp	r6, #0
 80114fe:	d145      	bne.n	801158c <_malloc_r+0xdc>
 8011500:	2c00      	cmp	r4, #0
 8011502:	d048      	beq.n	8011596 <_malloc_r+0xe6>
 8011504:	6823      	ldr	r3, [r4, #0]
 8011506:	4631      	mov	r1, r6
 8011508:	4638      	mov	r0, r7
 801150a:	eb04 0903 	add.w	r9, r4, r3
 801150e:	f001 f961 	bl	80127d4 <_sbrk_r>
 8011512:	4581      	cmp	r9, r0
 8011514:	d13f      	bne.n	8011596 <_malloc_r+0xe6>
 8011516:	6821      	ldr	r1, [r4, #0]
 8011518:	1a6d      	subs	r5, r5, r1
 801151a:	4629      	mov	r1, r5
 801151c:	4638      	mov	r0, r7
 801151e:	f7ff ffa7 	bl	8011470 <sbrk_aligned>
 8011522:	3001      	adds	r0, #1
 8011524:	d037      	beq.n	8011596 <_malloc_r+0xe6>
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	442b      	add	r3, r5
 801152a:	6023      	str	r3, [r4, #0]
 801152c:	f8d8 3000 	ldr.w	r3, [r8]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d038      	beq.n	80115a6 <_malloc_r+0xf6>
 8011534:	685a      	ldr	r2, [r3, #4]
 8011536:	42a2      	cmp	r2, r4
 8011538:	d12b      	bne.n	8011592 <_malloc_r+0xe2>
 801153a:	2200      	movs	r2, #0
 801153c:	605a      	str	r2, [r3, #4]
 801153e:	e00f      	b.n	8011560 <_malloc_r+0xb0>
 8011540:	6822      	ldr	r2, [r4, #0]
 8011542:	1b52      	subs	r2, r2, r5
 8011544:	d41f      	bmi.n	8011586 <_malloc_r+0xd6>
 8011546:	2a0b      	cmp	r2, #11
 8011548:	d917      	bls.n	801157a <_malloc_r+0xca>
 801154a:	1961      	adds	r1, r4, r5
 801154c:	42a3      	cmp	r3, r4
 801154e:	6025      	str	r5, [r4, #0]
 8011550:	bf18      	it	ne
 8011552:	6059      	strne	r1, [r3, #4]
 8011554:	6863      	ldr	r3, [r4, #4]
 8011556:	bf08      	it	eq
 8011558:	f8c8 1000 	streq.w	r1, [r8]
 801155c:	5162      	str	r2, [r4, r5]
 801155e:	604b      	str	r3, [r1, #4]
 8011560:	4638      	mov	r0, r7
 8011562:	f104 060b 	add.w	r6, r4, #11
 8011566:	f000 f829 	bl	80115bc <__malloc_unlock>
 801156a:	f026 0607 	bic.w	r6, r6, #7
 801156e:	1d23      	adds	r3, r4, #4
 8011570:	1af2      	subs	r2, r6, r3
 8011572:	d0ae      	beq.n	80114d2 <_malloc_r+0x22>
 8011574:	1b9b      	subs	r3, r3, r6
 8011576:	50a3      	str	r3, [r4, r2]
 8011578:	e7ab      	b.n	80114d2 <_malloc_r+0x22>
 801157a:	42a3      	cmp	r3, r4
 801157c:	6862      	ldr	r2, [r4, #4]
 801157e:	d1dd      	bne.n	801153c <_malloc_r+0x8c>
 8011580:	f8c8 2000 	str.w	r2, [r8]
 8011584:	e7ec      	b.n	8011560 <_malloc_r+0xb0>
 8011586:	4623      	mov	r3, r4
 8011588:	6864      	ldr	r4, [r4, #4]
 801158a:	e7ac      	b.n	80114e6 <_malloc_r+0x36>
 801158c:	4634      	mov	r4, r6
 801158e:	6876      	ldr	r6, [r6, #4]
 8011590:	e7b4      	b.n	80114fc <_malloc_r+0x4c>
 8011592:	4613      	mov	r3, r2
 8011594:	e7cc      	b.n	8011530 <_malloc_r+0x80>
 8011596:	230c      	movs	r3, #12
 8011598:	603b      	str	r3, [r7, #0]
 801159a:	4638      	mov	r0, r7
 801159c:	f000 f80e 	bl	80115bc <__malloc_unlock>
 80115a0:	e797      	b.n	80114d2 <_malloc_r+0x22>
 80115a2:	6025      	str	r5, [r4, #0]
 80115a4:	e7dc      	b.n	8011560 <_malloc_r+0xb0>
 80115a6:	605b      	str	r3, [r3, #4]
 80115a8:	deff      	udf	#255	; 0xff
 80115aa:	bf00      	nop
 80115ac:	24010ea4 	.word	0x24010ea4

080115b0 <__malloc_lock>:
 80115b0:	4801      	ldr	r0, [pc, #4]	; (80115b8 <__malloc_lock+0x8>)
 80115b2:	f001 b95c 	b.w	801286e <__retarget_lock_acquire_recursive>
 80115b6:	bf00      	nop
 80115b8:	24010fec 	.word	0x24010fec

080115bc <__malloc_unlock>:
 80115bc:	4801      	ldr	r0, [pc, #4]	; (80115c4 <__malloc_unlock+0x8>)
 80115be:	f001 b957 	b.w	8012870 <__retarget_lock_release_recursive>
 80115c2:	bf00      	nop
 80115c4:	24010fec 	.word	0x24010fec

080115c8 <rand>:
 80115c8:	4b16      	ldr	r3, [pc, #88]	; (8011624 <rand+0x5c>)
 80115ca:	b510      	push	{r4, lr}
 80115cc:	681c      	ldr	r4, [r3, #0]
 80115ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80115d0:	b9b3      	cbnz	r3, 8011600 <rand+0x38>
 80115d2:	2018      	movs	r0, #24
 80115d4:	f7ff ff3c 	bl	8011450 <malloc>
 80115d8:	4602      	mov	r2, r0
 80115da:	6320      	str	r0, [r4, #48]	; 0x30
 80115dc:	b920      	cbnz	r0, 80115e8 <rand+0x20>
 80115de:	4b12      	ldr	r3, [pc, #72]	; (8011628 <rand+0x60>)
 80115e0:	4812      	ldr	r0, [pc, #72]	; (801162c <rand+0x64>)
 80115e2:	2152      	movs	r1, #82	; 0x52
 80115e4:	f001 f95c 	bl	80128a0 <__assert_func>
 80115e8:	4911      	ldr	r1, [pc, #68]	; (8011630 <rand+0x68>)
 80115ea:	4b12      	ldr	r3, [pc, #72]	; (8011634 <rand+0x6c>)
 80115ec:	e9c0 1300 	strd	r1, r3, [r0]
 80115f0:	4b11      	ldr	r3, [pc, #68]	; (8011638 <rand+0x70>)
 80115f2:	6083      	str	r3, [r0, #8]
 80115f4:	230b      	movs	r3, #11
 80115f6:	8183      	strh	r3, [r0, #12]
 80115f8:	2100      	movs	r1, #0
 80115fa:	2001      	movs	r0, #1
 80115fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011600:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011602:	480e      	ldr	r0, [pc, #56]	; (801163c <rand+0x74>)
 8011604:	690b      	ldr	r3, [r1, #16]
 8011606:	694c      	ldr	r4, [r1, #20]
 8011608:	4a0d      	ldr	r2, [pc, #52]	; (8011640 <rand+0x78>)
 801160a:	4358      	muls	r0, r3
 801160c:	fb02 0004 	mla	r0, r2, r4, r0
 8011610:	fba3 3202 	umull	r3, r2, r3, r2
 8011614:	3301      	adds	r3, #1
 8011616:	eb40 0002 	adc.w	r0, r0, r2
 801161a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801161e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011622:	bd10      	pop	{r4, pc}
 8011624:	24000208 	.word	0x24000208
 8011628:	08017a10 	.word	0x08017a10
 801162c:	08017a27 	.word	0x08017a27
 8011630:	abcd330e 	.word	0xabcd330e
 8011634:	e66d1234 	.word	0xe66d1234
 8011638:	0005deec 	.word	0x0005deec
 801163c:	5851f42d 	.word	0x5851f42d
 8011640:	4c957f2d 	.word	0x4c957f2d

08011644 <realloc>:
 8011644:	4b02      	ldr	r3, [pc, #8]	; (8011650 <realloc+0xc>)
 8011646:	460a      	mov	r2, r1
 8011648:	4601      	mov	r1, r0
 801164a:	6818      	ldr	r0, [r3, #0]
 801164c:	f000 b802 	b.w	8011654 <_realloc_r>
 8011650:	24000208 	.word	0x24000208

08011654 <_realloc_r>:
 8011654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011658:	4680      	mov	r8, r0
 801165a:	4614      	mov	r4, r2
 801165c:	460e      	mov	r6, r1
 801165e:	b921      	cbnz	r1, 801166a <_realloc_r+0x16>
 8011660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011664:	4611      	mov	r1, r2
 8011666:	f7ff bf23 	b.w	80114b0 <_malloc_r>
 801166a:	b92a      	cbnz	r2, 8011678 <_realloc_r+0x24>
 801166c:	f001 f936 	bl	80128dc <_free_r>
 8011670:	4625      	mov	r5, r4
 8011672:	4628      	mov	r0, r5
 8011674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011678:	f002 f990 	bl	801399c <_malloc_usable_size_r>
 801167c:	4284      	cmp	r4, r0
 801167e:	4607      	mov	r7, r0
 8011680:	d802      	bhi.n	8011688 <_realloc_r+0x34>
 8011682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011686:	d812      	bhi.n	80116ae <_realloc_r+0x5a>
 8011688:	4621      	mov	r1, r4
 801168a:	4640      	mov	r0, r8
 801168c:	f7ff ff10 	bl	80114b0 <_malloc_r>
 8011690:	4605      	mov	r5, r0
 8011692:	2800      	cmp	r0, #0
 8011694:	d0ed      	beq.n	8011672 <_realloc_r+0x1e>
 8011696:	42bc      	cmp	r4, r7
 8011698:	4622      	mov	r2, r4
 801169a:	4631      	mov	r1, r6
 801169c:	bf28      	it	cs
 801169e:	463a      	movcs	r2, r7
 80116a0:	f001 f8e7 	bl	8012872 <memcpy>
 80116a4:	4631      	mov	r1, r6
 80116a6:	4640      	mov	r0, r8
 80116a8:	f001 f918 	bl	80128dc <_free_r>
 80116ac:	e7e1      	b.n	8011672 <_realloc_r+0x1e>
 80116ae:	4635      	mov	r5, r6
 80116b0:	e7df      	b.n	8011672 <_realloc_r+0x1e>

080116b2 <sulp>:
 80116b2:	b570      	push	{r4, r5, r6, lr}
 80116b4:	4604      	mov	r4, r0
 80116b6:	460d      	mov	r5, r1
 80116b8:	4616      	mov	r6, r2
 80116ba:	ec45 4b10 	vmov	d0, r4, r5
 80116be:	f002 f82f 	bl	8013720 <__ulp>
 80116c2:	b17e      	cbz	r6, 80116e4 <sulp+0x32>
 80116c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80116c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	dd09      	ble.n	80116e4 <sulp+0x32>
 80116d0:	051b      	lsls	r3, r3, #20
 80116d2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80116d6:	2000      	movs	r0, #0
 80116d8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80116dc:	ec41 0b17 	vmov	d7, r0, r1
 80116e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80116e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080116e8 <_strtod_l>:
 80116e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ec:	ed2d 8b0e 	vpush	{d8-d14}
 80116f0:	b097      	sub	sp, #92	; 0x5c
 80116f2:	4604      	mov	r4, r0
 80116f4:	920d      	str	r2, [sp, #52]	; 0x34
 80116f6:	2200      	movs	r2, #0
 80116f8:	9212      	str	r2, [sp, #72]	; 0x48
 80116fa:	468a      	mov	sl, r1
 80116fc:	f04f 0800 	mov.w	r8, #0
 8011700:	f04f 0900 	mov.w	r9, #0
 8011704:	460a      	mov	r2, r1
 8011706:	9211      	str	r2, [sp, #68]	; 0x44
 8011708:	7811      	ldrb	r1, [r2, #0]
 801170a:	292b      	cmp	r1, #43	; 0x2b
 801170c:	d04c      	beq.n	80117a8 <_strtod_l+0xc0>
 801170e:	d839      	bhi.n	8011784 <_strtod_l+0x9c>
 8011710:	290d      	cmp	r1, #13
 8011712:	d833      	bhi.n	801177c <_strtod_l+0x94>
 8011714:	2908      	cmp	r1, #8
 8011716:	d833      	bhi.n	8011780 <_strtod_l+0x98>
 8011718:	2900      	cmp	r1, #0
 801171a:	d03c      	beq.n	8011796 <_strtod_l+0xae>
 801171c:	2200      	movs	r2, #0
 801171e:	9208      	str	r2, [sp, #32]
 8011720:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011722:	7832      	ldrb	r2, [r6, #0]
 8011724:	2a30      	cmp	r2, #48	; 0x30
 8011726:	f040 80b8 	bne.w	801189a <_strtod_l+0x1b2>
 801172a:	7872      	ldrb	r2, [r6, #1]
 801172c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011730:	2a58      	cmp	r2, #88	; 0x58
 8011732:	d170      	bne.n	8011816 <_strtod_l+0x12e>
 8011734:	9302      	str	r3, [sp, #8]
 8011736:	9b08      	ldr	r3, [sp, #32]
 8011738:	9301      	str	r3, [sp, #4]
 801173a:	ab12      	add	r3, sp, #72	; 0x48
 801173c:	9300      	str	r3, [sp, #0]
 801173e:	4a91      	ldr	r2, [pc, #580]	; (8011984 <_strtod_l+0x29c>)
 8011740:	ab13      	add	r3, sp, #76	; 0x4c
 8011742:	a911      	add	r1, sp, #68	; 0x44
 8011744:	4620      	mov	r0, r4
 8011746:	f001 f97d 	bl	8012a44 <__gethex>
 801174a:	f010 070f 	ands.w	r7, r0, #15
 801174e:	4605      	mov	r5, r0
 8011750:	d005      	beq.n	801175e <_strtod_l+0x76>
 8011752:	2f06      	cmp	r7, #6
 8011754:	d12a      	bne.n	80117ac <_strtod_l+0xc4>
 8011756:	3601      	adds	r6, #1
 8011758:	2300      	movs	r3, #0
 801175a:	9611      	str	r6, [sp, #68]	; 0x44
 801175c:	9308      	str	r3, [sp, #32]
 801175e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011760:	2b00      	cmp	r3, #0
 8011762:	f040 8555 	bne.w	8012210 <_strtod_l+0xb28>
 8011766:	9b08      	ldr	r3, [sp, #32]
 8011768:	ec49 8b10 	vmov	d0, r8, r9
 801176c:	b1cb      	cbz	r3, 80117a2 <_strtod_l+0xba>
 801176e:	eeb1 0b40 	vneg.f64	d0, d0
 8011772:	b017      	add	sp, #92	; 0x5c
 8011774:	ecbd 8b0e 	vpop	{d8-d14}
 8011778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177c:	2920      	cmp	r1, #32
 801177e:	d1cd      	bne.n	801171c <_strtod_l+0x34>
 8011780:	3201      	adds	r2, #1
 8011782:	e7c0      	b.n	8011706 <_strtod_l+0x1e>
 8011784:	292d      	cmp	r1, #45	; 0x2d
 8011786:	d1c9      	bne.n	801171c <_strtod_l+0x34>
 8011788:	2101      	movs	r1, #1
 801178a:	9108      	str	r1, [sp, #32]
 801178c:	1c51      	adds	r1, r2, #1
 801178e:	9111      	str	r1, [sp, #68]	; 0x44
 8011790:	7852      	ldrb	r2, [r2, #1]
 8011792:	2a00      	cmp	r2, #0
 8011794:	d1c4      	bne.n	8011720 <_strtod_l+0x38>
 8011796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011798:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801179c:	2b00      	cmp	r3, #0
 801179e:	f040 8535 	bne.w	801220c <_strtod_l+0xb24>
 80117a2:	ec49 8b10 	vmov	d0, r8, r9
 80117a6:	e7e4      	b.n	8011772 <_strtod_l+0x8a>
 80117a8:	2100      	movs	r1, #0
 80117aa:	e7ee      	b.n	801178a <_strtod_l+0xa2>
 80117ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80117ae:	b13a      	cbz	r2, 80117c0 <_strtod_l+0xd8>
 80117b0:	2135      	movs	r1, #53	; 0x35
 80117b2:	a814      	add	r0, sp, #80	; 0x50
 80117b4:	f002 f8ae 	bl	8013914 <__copybits>
 80117b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80117ba:	4620      	mov	r0, r4
 80117bc:	f001 fc84 	bl	80130c8 <_Bfree>
 80117c0:	1e7b      	subs	r3, r7, #1
 80117c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80117c4:	2b04      	cmp	r3, #4
 80117c6:	d806      	bhi.n	80117d6 <_strtod_l+0xee>
 80117c8:	e8df f003 	tbb	[pc, r3]
 80117cc:	201d0314 	.word	0x201d0314
 80117d0:	14          	.byte	0x14
 80117d1:	00          	.byte	0x00
 80117d2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80117d6:	05eb      	lsls	r3, r5, #23
 80117d8:	bf48      	it	mi
 80117da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80117de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117e2:	0d1b      	lsrs	r3, r3, #20
 80117e4:	051b      	lsls	r3, r3, #20
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1b9      	bne.n	801175e <_strtod_l+0x76>
 80117ea:	f001 f815 	bl	8012818 <__errno>
 80117ee:	2322      	movs	r3, #34	; 0x22
 80117f0:	6003      	str	r3, [r0, #0]
 80117f2:	e7b4      	b.n	801175e <_strtod_l+0x76>
 80117f4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80117f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80117fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011800:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011804:	e7e7      	b.n	80117d6 <_strtod_l+0xee>
 8011806:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801198c <_strtod_l+0x2a4>
 801180a:	e7e4      	b.n	80117d6 <_strtod_l+0xee>
 801180c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011810:	f04f 38ff 	mov.w	r8, #4294967295
 8011814:	e7df      	b.n	80117d6 <_strtod_l+0xee>
 8011816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011818:	1c5a      	adds	r2, r3, #1
 801181a:	9211      	str	r2, [sp, #68]	; 0x44
 801181c:	785b      	ldrb	r3, [r3, #1]
 801181e:	2b30      	cmp	r3, #48	; 0x30
 8011820:	d0f9      	beq.n	8011816 <_strtod_l+0x12e>
 8011822:	2b00      	cmp	r3, #0
 8011824:	d09b      	beq.n	801175e <_strtod_l+0x76>
 8011826:	2301      	movs	r3, #1
 8011828:	9306      	str	r3, [sp, #24]
 801182a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801182c:	9309      	str	r3, [sp, #36]	; 0x24
 801182e:	2300      	movs	r3, #0
 8011830:	9305      	str	r3, [sp, #20]
 8011832:	9307      	str	r3, [sp, #28]
 8011834:	461e      	mov	r6, r3
 8011836:	220a      	movs	r2, #10
 8011838:	9811      	ldr	r0, [sp, #68]	; 0x44
 801183a:	7805      	ldrb	r5, [r0, #0]
 801183c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8011840:	b2d9      	uxtb	r1, r3
 8011842:	2909      	cmp	r1, #9
 8011844:	d92b      	bls.n	801189e <_strtod_l+0x1b6>
 8011846:	4950      	ldr	r1, [pc, #320]	; (8011988 <_strtod_l+0x2a0>)
 8011848:	2201      	movs	r2, #1
 801184a:	f000 ff26 	bl	801269a <strncmp>
 801184e:	2800      	cmp	r0, #0
 8011850:	d035      	beq.n	80118be <_strtod_l+0x1d6>
 8011852:	2000      	movs	r0, #0
 8011854:	462a      	mov	r2, r5
 8011856:	4633      	mov	r3, r6
 8011858:	4683      	mov	fp, r0
 801185a:	4601      	mov	r1, r0
 801185c:	2a65      	cmp	r2, #101	; 0x65
 801185e:	d001      	beq.n	8011864 <_strtod_l+0x17c>
 8011860:	2a45      	cmp	r2, #69	; 0x45
 8011862:	d118      	bne.n	8011896 <_strtod_l+0x1ae>
 8011864:	b91b      	cbnz	r3, 801186e <_strtod_l+0x186>
 8011866:	9b06      	ldr	r3, [sp, #24]
 8011868:	4303      	orrs	r3, r0
 801186a:	d094      	beq.n	8011796 <_strtod_l+0xae>
 801186c:	2300      	movs	r3, #0
 801186e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8011872:	f10a 0201 	add.w	r2, sl, #1
 8011876:	9211      	str	r2, [sp, #68]	; 0x44
 8011878:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801187c:	2a2b      	cmp	r2, #43	; 0x2b
 801187e:	d075      	beq.n	801196c <_strtod_l+0x284>
 8011880:	2a2d      	cmp	r2, #45	; 0x2d
 8011882:	d07b      	beq.n	801197c <_strtod_l+0x294>
 8011884:	f04f 0e00 	mov.w	lr, #0
 8011888:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801188c:	2d09      	cmp	r5, #9
 801188e:	f240 8083 	bls.w	8011998 <_strtod_l+0x2b0>
 8011892:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8011896:	2500      	movs	r5, #0
 8011898:	e09e      	b.n	80119d8 <_strtod_l+0x2f0>
 801189a:	2300      	movs	r3, #0
 801189c:	e7c4      	b.n	8011828 <_strtod_l+0x140>
 801189e:	2e08      	cmp	r6, #8
 80118a0:	bfd5      	itete	le
 80118a2:	9907      	ldrle	r1, [sp, #28]
 80118a4:	9905      	ldrgt	r1, [sp, #20]
 80118a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80118aa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80118ae:	f100 0001 	add.w	r0, r0, #1
 80118b2:	bfd4      	ite	le
 80118b4:	9307      	strle	r3, [sp, #28]
 80118b6:	9305      	strgt	r3, [sp, #20]
 80118b8:	3601      	adds	r6, #1
 80118ba:	9011      	str	r0, [sp, #68]	; 0x44
 80118bc:	e7bc      	b.n	8011838 <_strtod_l+0x150>
 80118be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118c0:	1c5a      	adds	r2, r3, #1
 80118c2:	9211      	str	r2, [sp, #68]	; 0x44
 80118c4:	785a      	ldrb	r2, [r3, #1]
 80118c6:	b3ae      	cbz	r6, 8011934 <_strtod_l+0x24c>
 80118c8:	4683      	mov	fp, r0
 80118ca:	4633      	mov	r3, r6
 80118cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80118d0:	2909      	cmp	r1, #9
 80118d2:	d912      	bls.n	80118fa <_strtod_l+0x212>
 80118d4:	2101      	movs	r1, #1
 80118d6:	e7c1      	b.n	801185c <_strtod_l+0x174>
 80118d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118da:	1c5a      	adds	r2, r3, #1
 80118dc:	9211      	str	r2, [sp, #68]	; 0x44
 80118de:	785a      	ldrb	r2, [r3, #1]
 80118e0:	3001      	adds	r0, #1
 80118e2:	2a30      	cmp	r2, #48	; 0x30
 80118e4:	d0f8      	beq.n	80118d8 <_strtod_l+0x1f0>
 80118e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80118ea:	2b08      	cmp	r3, #8
 80118ec:	f200 8495 	bhi.w	801221a <_strtod_l+0xb32>
 80118f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118f2:	9309      	str	r3, [sp, #36]	; 0x24
 80118f4:	4683      	mov	fp, r0
 80118f6:	2000      	movs	r0, #0
 80118f8:	4603      	mov	r3, r0
 80118fa:	3a30      	subs	r2, #48	; 0x30
 80118fc:	f100 0101 	add.w	r1, r0, #1
 8011900:	d012      	beq.n	8011928 <_strtod_l+0x240>
 8011902:	448b      	add	fp, r1
 8011904:	eb00 0c03 	add.w	ip, r0, r3
 8011908:	4619      	mov	r1, r3
 801190a:	250a      	movs	r5, #10
 801190c:	4561      	cmp	r1, ip
 801190e:	d113      	bne.n	8011938 <_strtod_l+0x250>
 8011910:	1819      	adds	r1, r3, r0
 8011912:	2908      	cmp	r1, #8
 8011914:	f103 0301 	add.w	r3, r3, #1
 8011918:	4403      	add	r3, r0
 801191a:	dc1b      	bgt.n	8011954 <_strtod_l+0x26c>
 801191c:	9807      	ldr	r0, [sp, #28]
 801191e:	210a      	movs	r1, #10
 8011920:	fb01 2200 	mla	r2, r1, r0, r2
 8011924:	9207      	str	r2, [sp, #28]
 8011926:	2100      	movs	r1, #0
 8011928:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801192a:	1c50      	adds	r0, r2, #1
 801192c:	9011      	str	r0, [sp, #68]	; 0x44
 801192e:	7852      	ldrb	r2, [r2, #1]
 8011930:	4608      	mov	r0, r1
 8011932:	e7cb      	b.n	80118cc <_strtod_l+0x1e4>
 8011934:	4630      	mov	r0, r6
 8011936:	e7d4      	b.n	80118e2 <_strtod_l+0x1fa>
 8011938:	2908      	cmp	r1, #8
 801193a:	f101 0101 	add.w	r1, r1, #1
 801193e:	dc03      	bgt.n	8011948 <_strtod_l+0x260>
 8011940:	9f07      	ldr	r7, [sp, #28]
 8011942:	436f      	muls	r7, r5
 8011944:	9707      	str	r7, [sp, #28]
 8011946:	e7e1      	b.n	801190c <_strtod_l+0x224>
 8011948:	2910      	cmp	r1, #16
 801194a:	bfde      	ittt	le
 801194c:	9f05      	ldrle	r7, [sp, #20]
 801194e:	436f      	mulle	r7, r5
 8011950:	9705      	strle	r7, [sp, #20]
 8011952:	e7db      	b.n	801190c <_strtod_l+0x224>
 8011954:	2b10      	cmp	r3, #16
 8011956:	bfdf      	itttt	le
 8011958:	9805      	ldrle	r0, [sp, #20]
 801195a:	210a      	movle	r1, #10
 801195c:	fb01 2200 	mlale	r2, r1, r0, r2
 8011960:	9205      	strle	r2, [sp, #20]
 8011962:	e7e0      	b.n	8011926 <_strtod_l+0x23e>
 8011964:	f04f 0b00 	mov.w	fp, #0
 8011968:	2101      	movs	r1, #1
 801196a:	e77c      	b.n	8011866 <_strtod_l+0x17e>
 801196c:	f04f 0e00 	mov.w	lr, #0
 8011970:	f10a 0202 	add.w	r2, sl, #2
 8011974:	9211      	str	r2, [sp, #68]	; 0x44
 8011976:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801197a:	e785      	b.n	8011888 <_strtod_l+0x1a0>
 801197c:	f04f 0e01 	mov.w	lr, #1
 8011980:	e7f6      	b.n	8011970 <_strtod_l+0x288>
 8011982:	bf00      	nop
 8011984:	08017a90 	.word	0x08017a90
 8011988:	08017a7f 	.word	0x08017a7f
 801198c:	7ff00000 	.word	0x7ff00000
 8011990:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011992:	1c55      	adds	r5, r2, #1
 8011994:	9511      	str	r5, [sp, #68]	; 0x44
 8011996:	7852      	ldrb	r2, [r2, #1]
 8011998:	2a30      	cmp	r2, #48	; 0x30
 801199a:	d0f9      	beq.n	8011990 <_strtod_l+0x2a8>
 801199c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80119a0:	2d08      	cmp	r5, #8
 80119a2:	f63f af78 	bhi.w	8011896 <_strtod_l+0x1ae>
 80119a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80119aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119ac:	920a      	str	r2, [sp, #40]	; 0x28
 80119ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119b0:	1c55      	adds	r5, r2, #1
 80119b2:	9511      	str	r5, [sp, #68]	; 0x44
 80119b4:	7852      	ldrb	r2, [r2, #1]
 80119b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80119ba:	2f09      	cmp	r7, #9
 80119bc:	d937      	bls.n	8011a2e <_strtod_l+0x346>
 80119be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80119c0:	1bed      	subs	r5, r5, r7
 80119c2:	2d08      	cmp	r5, #8
 80119c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80119c8:	dc02      	bgt.n	80119d0 <_strtod_l+0x2e8>
 80119ca:	4565      	cmp	r5, ip
 80119cc:	bfa8      	it	ge
 80119ce:	4665      	movge	r5, ip
 80119d0:	f1be 0f00 	cmp.w	lr, #0
 80119d4:	d000      	beq.n	80119d8 <_strtod_l+0x2f0>
 80119d6:	426d      	negs	r5, r5
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d14d      	bne.n	8011a78 <_strtod_l+0x390>
 80119dc:	9b06      	ldr	r3, [sp, #24]
 80119de:	4303      	orrs	r3, r0
 80119e0:	f47f aebd 	bne.w	801175e <_strtod_l+0x76>
 80119e4:	2900      	cmp	r1, #0
 80119e6:	f47f aed6 	bne.w	8011796 <_strtod_l+0xae>
 80119ea:	2a69      	cmp	r2, #105	; 0x69
 80119ec:	d027      	beq.n	8011a3e <_strtod_l+0x356>
 80119ee:	dc24      	bgt.n	8011a3a <_strtod_l+0x352>
 80119f0:	2a49      	cmp	r2, #73	; 0x49
 80119f2:	d024      	beq.n	8011a3e <_strtod_l+0x356>
 80119f4:	2a4e      	cmp	r2, #78	; 0x4e
 80119f6:	f47f aece 	bne.w	8011796 <_strtod_l+0xae>
 80119fa:	4995      	ldr	r1, [pc, #596]	; (8011c50 <_strtod_l+0x568>)
 80119fc:	a811      	add	r0, sp, #68	; 0x44
 80119fe:	f001 fa61 	bl	8012ec4 <__match>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	f43f aec7 	beq.w	8011796 <_strtod_l+0xae>
 8011a08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	2b28      	cmp	r3, #40	; 0x28
 8011a0e:	d12d      	bne.n	8011a6c <_strtod_l+0x384>
 8011a10:	4990      	ldr	r1, [pc, #576]	; (8011c54 <_strtod_l+0x56c>)
 8011a12:	aa14      	add	r2, sp, #80	; 0x50
 8011a14:	a811      	add	r0, sp, #68	; 0x44
 8011a16:	f001 fa69 	bl	8012eec <__hexnan>
 8011a1a:	2805      	cmp	r0, #5
 8011a1c:	d126      	bne.n	8011a6c <_strtod_l+0x384>
 8011a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011a24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011a28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011a2c:	e697      	b.n	801175e <_strtod_l+0x76>
 8011a2e:	250a      	movs	r5, #10
 8011a30:	fb05 2c0c 	mla	ip, r5, ip, r2
 8011a34:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8011a38:	e7b9      	b.n	80119ae <_strtod_l+0x2c6>
 8011a3a:	2a6e      	cmp	r2, #110	; 0x6e
 8011a3c:	e7db      	b.n	80119f6 <_strtod_l+0x30e>
 8011a3e:	4986      	ldr	r1, [pc, #536]	; (8011c58 <_strtod_l+0x570>)
 8011a40:	a811      	add	r0, sp, #68	; 0x44
 8011a42:	f001 fa3f 	bl	8012ec4 <__match>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	f43f aea5 	beq.w	8011796 <_strtod_l+0xae>
 8011a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a4e:	4983      	ldr	r1, [pc, #524]	; (8011c5c <_strtod_l+0x574>)
 8011a50:	3b01      	subs	r3, #1
 8011a52:	a811      	add	r0, sp, #68	; 0x44
 8011a54:	9311      	str	r3, [sp, #68]	; 0x44
 8011a56:	f001 fa35 	bl	8012ec4 <__match>
 8011a5a:	b910      	cbnz	r0, 8011a62 <_strtod_l+0x37a>
 8011a5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a5e:	3301      	adds	r3, #1
 8011a60:	9311      	str	r3, [sp, #68]	; 0x44
 8011a62:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8011c70 <_strtod_l+0x588>
 8011a66:	f04f 0800 	mov.w	r8, #0
 8011a6a:	e678      	b.n	801175e <_strtod_l+0x76>
 8011a6c:	487c      	ldr	r0, [pc, #496]	; (8011c60 <_strtod_l+0x578>)
 8011a6e:	f000 ff0f 	bl	8012890 <nan>
 8011a72:	ec59 8b10 	vmov	r8, r9, d0
 8011a76:	e672      	b.n	801175e <_strtod_l+0x76>
 8011a78:	eddd 7a07 	vldr	s15, [sp, #28]
 8011a7c:	eba5 020b 	sub.w	r2, r5, fp
 8011a80:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011a84:	2e00      	cmp	r6, #0
 8011a86:	bf08      	it	eq
 8011a88:	461e      	moveq	r6, r3
 8011a8a:	2b10      	cmp	r3, #16
 8011a8c:	9206      	str	r2, [sp, #24]
 8011a8e:	461a      	mov	r2, r3
 8011a90:	bfa8      	it	ge
 8011a92:	2210      	movge	r2, #16
 8011a94:	2b09      	cmp	r3, #9
 8011a96:	ec59 8b17 	vmov	r8, r9, d7
 8011a9a:	dd0c      	ble.n	8011ab6 <_strtod_l+0x3ce>
 8011a9c:	4971      	ldr	r1, [pc, #452]	; (8011c64 <_strtod_l+0x57c>)
 8011a9e:	eddd 6a05 	vldr	s13, [sp, #20]
 8011aa2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011aa6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8011aaa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8011aae:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011ab2:	ec59 8b16 	vmov	r8, r9, d6
 8011ab6:	2b0f      	cmp	r3, #15
 8011ab8:	dc37      	bgt.n	8011b2a <_strtod_l+0x442>
 8011aba:	9906      	ldr	r1, [sp, #24]
 8011abc:	2900      	cmp	r1, #0
 8011abe:	f43f ae4e 	beq.w	801175e <_strtod_l+0x76>
 8011ac2:	dd23      	ble.n	8011b0c <_strtod_l+0x424>
 8011ac4:	2916      	cmp	r1, #22
 8011ac6:	dc0b      	bgt.n	8011ae0 <_strtod_l+0x3f8>
 8011ac8:	4b66      	ldr	r3, [pc, #408]	; (8011c64 <_strtod_l+0x57c>)
 8011aca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011ace:	ed93 7b00 	vldr	d7, [r3]
 8011ad2:	ec49 8b16 	vmov	d6, r8, r9
 8011ad6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011ada:	ec59 8b17 	vmov	r8, r9, d7
 8011ade:	e63e      	b.n	801175e <_strtod_l+0x76>
 8011ae0:	9806      	ldr	r0, [sp, #24]
 8011ae2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011ae6:	4281      	cmp	r1, r0
 8011ae8:	db1f      	blt.n	8011b2a <_strtod_l+0x442>
 8011aea:	4a5e      	ldr	r2, [pc, #376]	; (8011c64 <_strtod_l+0x57c>)
 8011aec:	f1c3 030f 	rsb	r3, r3, #15
 8011af0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011af4:	ed91 7b00 	vldr	d7, [r1]
 8011af8:	ec49 8b16 	vmov	d6, r8, r9
 8011afc:	1ac3      	subs	r3, r0, r3
 8011afe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011b02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b06:	ed92 6b00 	vldr	d6, [r2]
 8011b0a:	e7e4      	b.n	8011ad6 <_strtod_l+0x3ee>
 8011b0c:	9906      	ldr	r1, [sp, #24]
 8011b0e:	3116      	adds	r1, #22
 8011b10:	db0b      	blt.n	8011b2a <_strtod_l+0x442>
 8011b12:	4b54      	ldr	r3, [pc, #336]	; (8011c64 <_strtod_l+0x57c>)
 8011b14:	ebab 0505 	sub.w	r5, fp, r5
 8011b18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011b1c:	ed95 7b00 	vldr	d7, [r5]
 8011b20:	ec49 8b16 	vmov	d6, r8, r9
 8011b24:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b28:	e7d7      	b.n	8011ada <_strtod_l+0x3f2>
 8011b2a:	9906      	ldr	r1, [sp, #24]
 8011b2c:	1a9a      	subs	r2, r3, r2
 8011b2e:	440a      	add	r2, r1
 8011b30:	2a00      	cmp	r2, #0
 8011b32:	dd6e      	ble.n	8011c12 <_strtod_l+0x52a>
 8011b34:	f012 000f 	ands.w	r0, r2, #15
 8011b38:	d00a      	beq.n	8011b50 <_strtod_l+0x468>
 8011b3a:	494a      	ldr	r1, [pc, #296]	; (8011c64 <_strtod_l+0x57c>)
 8011b3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011b40:	ed91 7b00 	vldr	d7, [r1]
 8011b44:	ec49 8b16 	vmov	d6, r8, r9
 8011b48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b4c:	ec59 8b17 	vmov	r8, r9, d7
 8011b50:	f032 020f 	bics.w	r2, r2, #15
 8011b54:	d04e      	beq.n	8011bf4 <_strtod_l+0x50c>
 8011b56:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011b5a:	dd22      	ble.n	8011ba2 <_strtod_l+0x4ba>
 8011b5c:	2500      	movs	r5, #0
 8011b5e:	462e      	mov	r6, r5
 8011b60:	9507      	str	r5, [sp, #28]
 8011b62:	462f      	mov	r7, r5
 8011b64:	2322      	movs	r3, #34	; 0x22
 8011b66:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011c70 <_strtod_l+0x588>
 8011b6a:	6023      	str	r3, [r4, #0]
 8011b6c:	f04f 0800 	mov.w	r8, #0
 8011b70:	9b07      	ldr	r3, [sp, #28]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	f43f adf3 	beq.w	801175e <_strtod_l+0x76>
 8011b78:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f001 faa4 	bl	80130c8 <_Bfree>
 8011b80:	4639      	mov	r1, r7
 8011b82:	4620      	mov	r0, r4
 8011b84:	f001 faa0 	bl	80130c8 <_Bfree>
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	f001 fa9c 	bl	80130c8 <_Bfree>
 8011b90:	9907      	ldr	r1, [sp, #28]
 8011b92:	4620      	mov	r0, r4
 8011b94:	f001 fa98 	bl	80130c8 <_Bfree>
 8011b98:	4629      	mov	r1, r5
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f001 fa94 	bl	80130c8 <_Bfree>
 8011ba0:	e5dd      	b.n	801175e <_strtod_l+0x76>
 8011ba2:	2000      	movs	r0, #0
 8011ba4:	ec49 8b17 	vmov	d7, r8, r9
 8011ba8:	4f2f      	ldr	r7, [pc, #188]	; (8011c68 <_strtod_l+0x580>)
 8011baa:	1112      	asrs	r2, r2, #4
 8011bac:	4601      	mov	r1, r0
 8011bae:	2a01      	cmp	r2, #1
 8011bb0:	dc23      	bgt.n	8011bfa <_strtod_l+0x512>
 8011bb2:	b108      	cbz	r0, 8011bb8 <_strtod_l+0x4d0>
 8011bb4:	ec59 8b17 	vmov	r8, r9, d7
 8011bb8:	4a2b      	ldr	r2, [pc, #172]	; (8011c68 <_strtod_l+0x580>)
 8011bba:	482c      	ldr	r0, [pc, #176]	; (8011c6c <_strtod_l+0x584>)
 8011bbc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011bc0:	ed92 7b00 	vldr	d7, [r2]
 8011bc4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011bc8:	ec49 8b16 	vmov	d6, r8, r9
 8011bcc:	4a28      	ldr	r2, [pc, #160]	; (8011c70 <_strtod_l+0x588>)
 8011bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bd2:	ee17 1a90 	vmov	r1, s15
 8011bd6:	400a      	ands	r2, r1
 8011bd8:	4282      	cmp	r2, r0
 8011bda:	ec59 8b17 	vmov	r8, r9, d7
 8011bde:	d8bd      	bhi.n	8011b5c <_strtod_l+0x474>
 8011be0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011be4:	4282      	cmp	r2, r0
 8011be6:	bf86      	itte	hi
 8011be8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8011c74 <_strtod_l+0x58c>
 8011bec:	f04f 38ff 	movhi.w	r8, #4294967295
 8011bf0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	9205      	str	r2, [sp, #20]
 8011bf8:	e076      	b.n	8011ce8 <_strtod_l+0x600>
 8011bfa:	f012 0f01 	tst.w	r2, #1
 8011bfe:	d004      	beq.n	8011c0a <_strtod_l+0x522>
 8011c00:	ed97 6b00 	vldr	d6, [r7]
 8011c04:	2001      	movs	r0, #1
 8011c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c0a:	3101      	adds	r1, #1
 8011c0c:	1052      	asrs	r2, r2, #1
 8011c0e:	3708      	adds	r7, #8
 8011c10:	e7cd      	b.n	8011bae <_strtod_l+0x4c6>
 8011c12:	d0ef      	beq.n	8011bf4 <_strtod_l+0x50c>
 8011c14:	4252      	negs	r2, r2
 8011c16:	f012 000f 	ands.w	r0, r2, #15
 8011c1a:	d00a      	beq.n	8011c32 <_strtod_l+0x54a>
 8011c1c:	4911      	ldr	r1, [pc, #68]	; (8011c64 <_strtod_l+0x57c>)
 8011c1e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011c22:	ed91 7b00 	vldr	d7, [r1]
 8011c26:	ec49 8b16 	vmov	d6, r8, r9
 8011c2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011c2e:	ec59 8b17 	vmov	r8, r9, d7
 8011c32:	1112      	asrs	r2, r2, #4
 8011c34:	d0de      	beq.n	8011bf4 <_strtod_l+0x50c>
 8011c36:	2a1f      	cmp	r2, #31
 8011c38:	dd1e      	ble.n	8011c78 <_strtod_l+0x590>
 8011c3a:	2500      	movs	r5, #0
 8011c3c:	462e      	mov	r6, r5
 8011c3e:	9507      	str	r5, [sp, #28]
 8011c40:	462f      	mov	r7, r5
 8011c42:	2322      	movs	r3, #34	; 0x22
 8011c44:	f04f 0800 	mov.w	r8, #0
 8011c48:	f04f 0900 	mov.w	r9, #0
 8011c4c:	6023      	str	r3, [r4, #0]
 8011c4e:	e78f      	b.n	8011b70 <_strtod_l+0x488>
 8011c50:	08017a8a 	.word	0x08017a8a
 8011c54:	08017aa4 	.word	0x08017aa4
 8011c58:	08017a81 	.word	0x08017a81
 8011c5c:	08017a84 	.word	0x08017a84
 8011c60:	08017c24 	.word	0x08017c24
 8011c64:	08017d18 	.word	0x08017d18
 8011c68:	08017cf0 	.word	0x08017cf0
 8011c6c:	7ca00000 	.word	0x7ca00000
 8011c70:	7ff00000 	.word	0x7ff00000
 8011c74:	7fefffff 	.word	0x7fefffff
 8011c78:	f012 0110 	ands.w	r1, r2, #16
 8011c7c:	bf18      	it	ne
 8011c7e:	216a      	movne	r1, #106	; 0x6a
 8011c80:	9105      	str	r1, [sp, #20]
 8011c82:	ec49 8b17 	vmov	d7, r8, r9
 8011c86:	49be      	ldr	r1, [pc, #760]	; (8011f80 <_strtod_l+0x898>)
 8011c88:	2000      	movs	r0, #0
 8011c8a:	07d7      	lsls	r7, r2, #31
 8011c8c:	d504      	bpl.n	8011c98 <_strtod_l+0x5b0>
 8011c8e:	ed91 6b00 	vldr	d6, [r1]
 8011c92:	2001      	movs	r0, #1
 8011c94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c98:	1052      	asrs	r2, r2, #1
 8011c9a:	f101 0108 	add.w	r1, r1, #8
 8011c9e:	d1f4      	bne.n	8011c8a <_strtod_l+0x5a2>
 8011ca0:	b108      	cbz	r0, 8011ca6 <_strtod_l+0x5be>
 8011ca2:	ec59 8b17 	vmov	r8, r9, d7
 8011ca6:	9a05      	ldr	r2, [sp, #20]
 8011ca8:	b1ba      	cbz	r2, 8011cda <_strtod_l+0x5f2>
 8011caa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8011cae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8011cb2:	2a00      	cmp	r2, #0
 8011cb4:	4648      	mov	r0, r9
 8011cb6:	dd10      	ble.n	8011cda <_strtod_l+0x5f2>
 8011cb8:	2a1f      	cmp	r2, #31
 8011cba:	f340 812c 	ble.w	8011f16 <_strtod_l+0x82e>
 8011cbe:	2a34      	cmp	r2, #52	; 0x34
 8011cc0:	bfde      	ittt	le
 8011cc2:	f04f 32ff 	movle.w	r2, #4294967295
 8011cc6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8011cca:	408a      	lslle	r2, r1
 8011ccc:	f04f 0800 	mov.w	r8, #0
 8011cd0:	bfcc      	ite	gt
 8011cd2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011cd6:	ea02 0900 	andle.w	r9, r2, r0
 8011cda:	ec49 8b17 	vmov	d7, r8, r9
 8011cde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce6:	d0a8      	beq.n	8011c3a <_strtod_l+0x552>
 8011ce8:	9a07      	ldr	r2, [sp, #28]
 8011cea:	9200      	str	r2, [sp, #0]
 8011cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cee:	4632      	mov	r2, r6
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f001 fa51 	bl	8013198 <__s2b>
 8011cf6:	9007      	str	r0, [sp, #28]
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	f43f af2f 	beq.w	8011b5c <_strtod_l+0x474>
 8011cfe:	9a06      	ldr	r2, [sp, #24]
 8011d00:	2a00      	cmp	r2, #0
 8011d02:	ebab 0305 	sub.w	r3, fp, r5
 8011d06:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011f60 <_strtod_l+0x878>
 8011d0a:	bfa8      	it	ge
 8011d0c:	2300      	movge	r3, #0
 8011d0e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8011f68 <_strtod_l+0x880>
 8011d12:	ed9f bb97 	vldr	d11, [pc, #604]	; 8011f70 <_strtod_l+0x888>
 8011d16:	9309      	str	r3, [sp, #36]	; 0x24
 8011d18:	2500      	movs	r5, #0
 8011d1a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8011d20:	462e      	mov	r6, r5
 8011d22:	9b07      	ldr	r3, [sp, #28]
 8011d24:	4620      	mov	r0, r4
 8011d26:	6859      	ldr	r1, [r3, #4]
 8011d28:	f001 f98e 	bl	8013048 <_Balloc>
 8011d2c:	4607      	mov	r7, r0
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f43f af18 	beq.w	8011b64 <_strtod_l+0x47c>
 8011d34:	9b07      	ldr	r3, [sp, #28]
 8011d36:	691a      	ldr	r2, [r3, #16]
 8011d38:	3202      	adds	r2, #2
 8011d3a:	f103 010c 	add.w	r1, r3, #12
 8011d3e:	0092      	lsls	r2, r2, #2
 8011d40:	300c      	adds	r0, #12
 8011d42:	f000 fd96 	bl	8012872 <memcpy>
 8011d46:	ec49 8b10 	vmov	d0, r8, r9
 8011d4a:	aa14      	add	r2, sp, #80	; 0x50
 8011d4c:	a913      	add	r1, sp, #76	; 0x4c
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f001 fd56 	bl	8013800 <__d2b>
 8011d54:	ec49 8b18 	vmov	d8, r8, r9
 8011d58:	9012      	str	r0, [sp, #72]	; 0x48
 8011d5a:	2800      	cmp	r0, #0
 8011d5c:	f43f af02 	beq.w	8011b64 <_strtod_l+0x47c>
 8011d60:	2101      	movs	r1, #1
 8011d62:	4620      	mov	r0, r4
 8011d64:	f001 fab0 	bl	80132c8 <__i2b>
 8011d68:	4606      	mov	r6, r0
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	f43f aefa 	beq.w	8011b64 <_strtod_l+0x47c>
 8011d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d72:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	bfab      	itete	ge
 8011d78:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8011d7a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8011d7c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8011d80:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8011d84:	bfac      	ite	ge
 8011d86:	eb03 0b02 	addge.w	fp, r3, r2
 8011d8a:	eba2 0a03 	sublt.w	sl, r2, r3
 8011d8e:	9a05      	ldr	r2, [sp, #20]
 8011d90:	1a9b      	subs	r3, r3, r2
 8011d92:	440b      	add	r3, r1
 8011d94:	4a7b      	ldr	r2, [pc, #492]	; (8011f84 <_strtod_l+0x89c>)
 8011d96:	3b01      	subs	r3, #1
 8011d98:	4293      	cmp	r3, r2
 8011d9a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8011d9e:	f280 80cd 	bge.w	8011f3c <_strtod_l+0x854>
 8011da2:	1ad2      	subs	r2, r2, r3
 8011da4:	2a1f      	cmp	r2, #31
 8011da6:	eba1 0102 	sub.w	r1, r1, r2
 8011daa:	f04f 0001 	mov.w	r0, #1
 8011dae:	f300 80b9 	bgt.w	8011f24 <_strtod_l+0x83c>
 8011db2:	fa00 f302 	lsl.w	r3, r0, r2
 8011db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011db8:	2300      	movs	r3, #0
 8011dba:	930a      	str	r3, [sp, #40]	; 0x28
 8011dbc:	eb0b 0301 	add.w	r3, fp, r1
 8011dc0:	9a05      	ldr	r2, [sp, #20]
 8011dc2:	459b      	cmp	fp, r3
 8011dc4:	448a      	add	sl, r1
 8011dc6:	4492      	add	sl, r2
 8011dc8:	465a      	mov	r2, fp
 8011dca:	bfa8      	it	ge
 8011dcc:	461a      	movge	r2, r3
 8011dce:	4552      	cmp	r2, sl
 8011dd0:	bfa8      	it	ge
 8011dd2:	4652      	movge	r2, sl
 8011dd4:	2a00      	cmp	r2, #0
 8011dd6:	bfc2      	ittt	gt
 8011dd8:	1a9b      	subgt	r3, r3, r2
 8011dda:	ebaa 0a02 	subgt.w	sl, sl, r2
 8011dde:	ebab 0b02 	subgt.w	fp, fp, r2
 8011de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011de4:	2a00      	cmp	r2, #0
 8011de6:	dd18      	ble.n	8011e1a <_strtod_l+0x732>
 8011de8:	4631      	mov	r1, r6
 8011dea:	4620      	mov	r0, r4
 8011dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dee:	f001 fb2b 	bl	8013448 <__pow5mult>
 8011df2:	4606      	mov	r6, r0
 8011df4:	2800      	cmp	r0, #0
 8011df6:	f43f aeb5 	beq.w	8011b64 <_strtod_l+0x47c>
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f001 fa78 	bl	80132f4 <__multiply>
 8011e04:	900e      	str	r0, [sp, #56]	; 0x38
 8011e06:	2800      	cmp	r0, #0
 8011e08:	f43f aeac 	beq.w	8011b64 <_strtod_l+0x47c>
 8011e0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f001 f95a 	bl	80130c8 <_Bfree>
 8011e14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e18:	9212      	str	r2, [sp, #72]	; 0x48
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	f300 8093 	bgt.w	8011f46 <_strtod_l+0x85e>
 8011e20:	9b06      	ldr	r3, [sp, #24]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dd08      	ble.n	8011e38 <_strtod_l+0x750>
 8011e26:	4639      	mov	r1, r7
 8011e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	f001 fb0c 	bl	8013448 <__pow5mult>
 8011e30:	4607      	mov	r7, r0
 8011e32:	2800      	cmp	r0, #0
 8011e34:	f43f ae96 	beq.w	8011b64 <_strtod_l+0x47c>
 8011e38:	f1ba 0f00 	cmp.w	sl, #0
 8011e3c:	dd08      	ble.n	8011e50 <_strtod_l+0x768>
 8011e3e:	4639      	mov	r1, r7
 8011e40:	4652      	mov	r2, sl
 8011e42:	4620      	mov	r0, r4
 8011e44:	f001 fb5a 	bl	80134fc <__lshift>
 8011e48:	4607      	mov	r7, r0
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	f43f ae8a 	beq.w	8011b64 <_strtod_l+0x47c>
 8011e50:	f1bb 0f00 	cmp.w	fp, #0
 8011e54:	dd08      	ble.n	8011e68 <_strtod_l+0x780>
 8011e56:	4631      	mov	r1, r6
 8011e58:	465a      	mov	r2, fp
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f001 fb4e 	bl	80134fc <__lshift>
 8011e60:	4606      	mov	r6, r0
 8011e62:	2800      	cmp	r0, #0
 8011e64:	f43f ae7e 	beq.w	8011b64 <_strtod_l+0x47c>
 8011e68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011e6a:	463a      	mov	r2, r7
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f001 fbcd 	bl	801360c <__mdiff>
 8011e72:	4605      	mov	r5, r0
 8011e74:	2800      	cmp	r0, #0
 8011e76:	f43f ae75 	beq.w	8011b64 <_strtod_l+0x47c>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011e80:	60c3      	str	r3, [r0, #12]
 8011e82:	4631      	mov	r1, r6
 8011e84:	f001 fba6 	bl	80135d4 <__mcmp>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	da7f      	bge.n	8011f8c <_strtod_l+0x8a4>
 8011e8c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8011e90:	f040 80a5 	bne.w	8011fde <_strtod_l+0x8f6>
 8011e94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f040 80a0 	bne.w	8011fde <_strtod_l+0x8f6>
 8011e9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011ea2:	0d1b      	lsrs	r3, r3, #20
 8011ea4:	051b      	lsls	r3, r3, #20
 8011ea6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011eaa:	f240 8098 	bls.w	8011fde <_strtod_l+0x8f6>
 8011eae:	696b      	ldr	r3, [r5, #20]
 8011eb0:	b91b      	cbnz	r3, 8011eba <_strtod_l+0x7d2>
 8011eb2:	692b      	ldr	r3, [r5, #16]
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	f340 8092 	ble.w	8011fde <_strtod_l+0x8f6>
 8011eba:	4629      	mov	r1, r5
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f001 fb1c 	bl	80134fc <__lshift>
 8011ec4:	4631      	mov	r1, r6
 8011ec6:	4605      	mov	r5, r0
 8011ec8:	f001 fb84 	bl	80135d4 <__mcmp>
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	f340 8086 	ble.w	8011fde <_strtod_l+0x8f6>
 8011ed2:	9905      	ldr	r1, [sp, #20]
 8011ed4:	4a2c      	ldr	r2, [pc, #176]	; (8011f88 <_strtod_l+0x8a0>)
 8011ed6:	464b      	mov	r3, r9
 8011ed8:	2900      	cmp	r1, #0
 8011eda:	f000 809f 	beq.w	801201c <_strtod_l+0x934>
 8011ede:	ea02 0109 	and.w	r1, r2, r9
 8011ee2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011ee6:	f300 8099 	bgt.w	801201c <_strtod_l+0x934>
 8011eea:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011eee:	f77f aea8 	ble.w	8011c42 <_strtod_l+0x55a>
 8011ef2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8011f78 <_strtod_l+0x890>
 8011ef6:	ec49 8b16 	vmov	d6, r8, r9
 8011efa:	4b23      	ldr	r3, [pc, #140]	; (8011f88 <_strtod_l+0x8a0>)
 8011efc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011f00:	ee17 2a90 	vmov	r2, s15
 8011f04:	4013      	ands	r3, r2
 8011f06:	ec59 8b17 	vmov	r8, r9, d7
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	f47f ae34 	bne.w	8011b78 <_strtod_l+0x490>
 8011f10:	2322      	movs	r3, #34	; 0x22
 8011f12:	6023      	str	r3, [r4, #0]
 8011f14:	e630      	b.n	8011b78 <_strtod_l+0x490>
 8011f16:	f04f 31ff 	mov.w	r1, #4294967295
 8011f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8011f1e:	ea02 0808 	and.w	r8, r2, r8
 8011f22:	e6da      	b.n	8011cda <_strtod_l+0x5f2>
 8011f24:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8011f28:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011f2c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8011f30:	33e2      	adds	r3, #226	; 0xe2
 8011f32:	fa00 f303 	lsl.w	r3, r0, r3
 8011f36:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8011f3a:	e73f      	b.n	8011dbc <_strtod_l+0x6d4>
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011f44:	e73a      	b.n	8011dbc <_strtod_l+0x6d4>
 8011f46:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011f48:	461a      	mov	r2, r3
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f001 fad6 	bl	80134fc <__lshift>
 8011f50:	9012      	str	r0, [sp, #72]	; 0x48
 8011f52:	2800      	cmp	r0, #0
 8011f54:	f47f af64 	bne.w	8011e20 <_strtod_l+0x738>
 8011f58:	e604      	b.n	8011b64 <_strtod_l+0x47c>
 8011f5a:	bf00      	nop
 8011f5c:	f3af 8000 	nop.w
 8011f60:	94a03595 	.word	0x94a03595
 8011f64:	3fcfffff 	.word	0x3fcfffff
 8011f68:	94a03595 	.word	0x94a03595
 8011f6c:	3fdfffff 	.word	0x3fdfffff
 8011f70:	35afe535 	.word	0x35afe535
 8011f74:	3fe00000 	.word	0x3fe00000
 8011f78:	00000000 	.word	0x00000000
 8011f7c:	39500000 	.word	0x39500000
 8011f80:	08017ab8 	.word	0x08017ab8
 8011f84:	fffffc02 	.word	0xfffffc02
 8011f88:	7ff00000 	.word	0x7ff00000
 8011f8c:	46cb      	mov	fp, r9
 8011f8e:	d15f      	bne.n	8012050 <_strtod_l+0x968>
 8011f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f94:	f1ba 0f00 	cmp.w	sl, #0
 8011f98:	d02a      	beq.n	8011ff0 <_strtod_l+0x908>
 8011f9a:	4aa7      	ldr	r2, [pc, #668]	; (8012238 <_strtod_l+0xb50>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	d12b      	bne.n	8011ff8 <_strtod_l+0x910>
 8011fa0:	9b05      	ldr	r3, [sp, #20]
 8011fa2:	4642      	mov	r2, r8
 8011fa4:	b1fb      	cbz	r3, 8011fe6 <_strtod_l+0x8fe>
 8011fa6:	4ba5      	ldr	r3, [pc, #660]	; (801223c <_strtod_l+0xb54>)
 8011fa8:	ea09 0303 	and.w	r3, r9, r3
 8011fac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8011fb4:	d81a      	bhi.n	8011fec <_strtod_l+0x904>
 8011fb6:	0d1b      	lsrs	r3, r3, #20
 8011fb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d119      	bne.n	8011ff8 <_strtod_l+0x910>
 8011fc4:	4b9e      	ldr	r3, [pc, #632]	; (8012240 <_strtod_l+0xb58>)
 8011fc6:	459b      	cmp	fp, r3
 8011fc8:	d102      	bne.n	8011fd0 <_strtod_l+0x8e8>
 8011fca:	3201      	adds	r2, #1
 8011fcc:	f43f adca 	beq.w	8011b64 <_strtod_l+0x47c>
 8011fd0:	4b9a      	ldr	r3, [pc, #616]	; (801223c <_strtod_l+0xb54>)
 8011fd2:	ea0b 0303 	and.w	r3, fp, r3
 8011fd6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011fda:	f04f 0800 	mov.w	r8, #0
 8011fde:	9b05      	ldr	r3, [sp, #20]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d186      	bne.n	8011ef2 <_strtod_l+0x80a>
 8011fe4:	e5c8      	b.n	8011b78 <_strtod_l+0x490>
 8011fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fea:	e7e9      	b.n	8011fc0 <_strtod_l+0x8d8>
 8011fec:	460b      	mov	r3, r1
 8011fee:	e7e7      	b.n	8011fc0 <_strtod_l+0x8d8>
 8011ff0:	ea53 0308 	orrs.w	r3, r3, r8
 8011ff4:	f43f af6d 	beq.w	8011ed2 <_strtod_l+0x7ea>
 8011ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ffa:	b1cb      	cbz	r3, 8012030 <_strtod_l+0x948>
 8011ffc:	ea13 0f0b 	tst.w	r3, fp
 8012000:	d0ed      	beq.n	8011fde <_strtod_l+0x8f6>
 8012002:	9a05      	ldr	r2, [sp, #20]
 8012004:	4640      	mov	r0, r8
 8012006:	4649      	mov	r1, r9
 8012008:	f1ba 0f00 	cmp.w	sl, #0
 801200c:	d014      	beq.n	8012038 <_strtod_l+0x950>
 801200e:	f7ff fb50 	bl	80116b2 <sulp>
 8012012:	ee38 7b00 	vadd.f64	d7, d8, d0
 8012016:	ec59 8b17 	vmov	r8, r9, d7
 801201a:	e7e0      	b.n	8011fde <_strtod_l+0x8f6>
 801201c:	4013      	ands	r3, r2
 801201e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012022:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012026:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801202a:	f04f 38ff 	mov.w	r8, #4294967295
 801202e:	e7d6      	b.n	8011fde <_strtod_l+0x8f6>
 8012030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012032:	ea13 0f08 	tst.w	r3, r8
 8012036:	e7e3      	b.n	8012000 <_strtod_l+0x918>
 8012038:	f7ff fb3b 	bl	80116b2 <sulp>
 801203c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8012040:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012048:	ec59 8b10 	vmov	r8, r9, d0
 801204c:	d1c7      	bne.n	8011fde <_strtod_l+0x8f6>
 801204e:	e5f8      	b.n	8011c42 <_strtod_l+0x55a>
 8012050:	4631      	mov	r1, r6
 8012052:	4628      	mov	r0, r5
 8012054:	f001 fc2e 	bl	80138b4 <__ratio>
 8012058:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801205c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012064:	d85f      	bhi.n	8012126 <_strtod_l+0xa3e>
 8012066:	f1ba 0f00 	cmp.w	sl, #0
 801206a:	d166      	bne.n	801213a <_strtod_l+0xa52>
 801206c:	f1b8 0f00 	cmp.w	r8, #0
 8012070:	d14d      	bne.n	801210e <_strtod_l+0xa26>
 8012072:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012076:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d162      	bne.n	8012144 <_strtod_l+0xa5c>
 801207e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8012082:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8012086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208a:	d401      	bmi.n	8012090 <_strtod_l+0x9a8>
 801208c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8012090:	eeb1 cb4d 	vneg.f64	d12, d13
 8012094:	4869      	ldr	r0, [pc, #420]	; (801223c <_strtod_l+0xb54>)
 8012096:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8012248 <_strtod_l+0xb60>
 801209a:	ea0b 0100 	and.w	r1, fp, r0
 801209e:	4561      	cmp	r1, ip
 80120a0:	ec53 2b1c 	vmov	r2, r3, d12
 80120a4:	d17a      	bne.n	801219c <_strtod_l+0xab4>
 80120a6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80120aa:	ec49 8b10 	vmov	d0, r8, r9
 80120ae:	910a      	str	r1, [sp, #40]	; 0x28
 80120b0:	f001 fb36 	bl	8013720 <__ulp>
 80120b4:	ec49 8b1e 	vmov	d14, r8, r9
 80120b8:	4860      	ldr	r0, [pc, #384]	; (801223c <_strtod_l+0xb54>)
 80120ba:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80120be:	ee1e 3a90 	vmov	r3, s29
 80120c2:	4a60      	ldr	r2, [pc, #384]	; (8012244 <_strtod_l+0xb5c>)
 80120c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80120c6:	4018      	ands	r0, r3
 80120c8:	4290      	cmp	r0, r2
 80120ca:	ec59 8b1e 	vmov	r8, r9, d14
 80120ce:	d93c      	bls.n	801214a <_strtod_l+0xa62>
 80120d0:	ee18 2a90 	vmov	r2, s17
 80120d4:	4b5a      	ldr	r3, [pc, #360]	; (8012240 <_strtod_l+0xb58>)
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d104      	bne.n	80120e4 <_strtod_l+0x9fc>
 80120da:	ee18 3a10 	vmov	r3, s16
 80120de:	3301      	adds	r3, #1
 80120e0:	f43f ad40 	beq.w	8011b64 <_strtod_l+0x47c>
 80120e4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8012240 <_strtod_l+0xb58>
 80120e8:	f04f 38ff 	mov.w	r8, #4294967295
 80120ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80120ee:	4620      	mov	r0, r4
 80120f0:	f000 ffea 	bl	80130c8 <_Bfree>
 80120f4:	4639      	mov	r1, r7
 80120f6:	4620      	mov	r0, r4
 80120f8:	f000 ffe6 	bl	80130c8 <_Bfree>
 80120fc:	4631      	mov	r1, r6
 80120fe:	4620      	mov	r0, r4
 8012100:	f000 ffe2 	bl	80130c8 <_Bfree>
 8012104:	4629      	mov	r1, r5
 8012106:	4620      	mov	r0, r4
 8012108:	f000 ffde 	bl	80130c8 <_Bfree>
 801210c:	e609      	b.n	8011d22 <_strtod_l+0x63a>
 801210e:	f1b8 0f01 	cmp.w	r8, #1
 8012112:	d103      	bne.n	801211c <_strtod_l+0xa34>
 8012114:	f1b9 0f00 	cmp.w	r9, #0
 8012118:	f43f ad93 	beq.w	8011c42 <_strtod_l+0x55a>
 801211c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8012120:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8012124:	e7b6      	b.n	8012094 <_strtod_l+0x9ac>
 8012126:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801212a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801212e:	f1ba 0f00 	cmp.w	sl, #0
 8012132:	d0ad      	beq.n	8012090 <_strtod_l+0x9a8>
 8012134:	eeb0 cb4d 	vmov.f64	d12, d13
 8012138:	e7ac      	b.n	8012094 <_strtod_l+0x9ac>
 801213a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801213e:	eeb0 db4c 	vmov.f64	d13, d12
 8012142:	e7a7      	b.n	8012094 <_strtod_l+0x9ac>
 8012144:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8012148:	e7a4      	b.n	8012094 <_strtod_l+0x9ac>
 801214a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801214e:	9b05      	ldr	r3, [sp, #20]
 8012150:	46cb      	mov	fp, r9
 8012152:	2b00      	cmp	r3, #0
 8012154:	d1ca      	bne.n	80120ec <_strtod_l+0xa04>
 8012156:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801215a:	0d1b      	lsrs	r3, r3, #20
 801215c:	051b      	lsls	r3, r3, #20
 801215e:	4299      	cmp	r1, r3
 8012160:	d1c4      	bne.n	80120ec <_strtod_l+0xa04>
 8012162:	ec51 0b1d 	vmov	r0, r1, d13
 8012166:	f7ee fadf 	bl	8000728 <__aeabi_d2lz>
 801216a:	f7ee faaf 	bl	80006cc <__aeabi_l2d>
 801216e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8012172:	ec41 0b17 	vmov	d7, r0, r1
 8012176:	ea4b 0b08 	orr.w	fp, fp, r8
 801217a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801217e:	ee3d db47 	vsub.f64	d13, d13, d7
 8012182:	d03c      	beq.n	80121fe <_strtod_l+0xb16>
 8012184:	eeb4 dbca 	vcmpe.f64	d13, d10
 8012188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218c:	f53f acf4 	bmi.w	8011b78 <_strtod_l+0x490>
 8012190:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	dda8      	ble.n	80120ec <_strtod_l+0xa04>
 801219a:	e4ed      	b.n	8011b78 <_strtod_l+0x490>
 801219c:	9805      	ldr	r0, [sp, #20]
 801219e:	b1f0      	cbz	r0, 80121de <_strtod_l+0xaf6>
 80121a0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80121a4:	d81b      	bhi.n	80121de <_strtod_l+0xaf6>
 80121a6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8012230 <_strtod_l+0xb48>
 80121aa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80121ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b2:	d811      	bhi.n	80121d8 <_strtod_l+0xaf0>
 80121b4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80121b8:	ee1d 3a10 	vmov	r3, s26
 80121bc:	2b01      	cmp	r3, #1
 80121be:	bf38      	it	cc
 80121c0:	2301      	movcc	r3, #1
 80121c2:	ee0d 3a10 	vmov	s26, r3
 80121c6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80121ca:	f1ba 0f00 	cmp.w	sl, #0
 80121ce:	d113      	bne.n	80121f8 <_strtod_l+0xb10>
 80121d0:	eeb1 7b4d 	vneg.f64	d7, d13
 80121d4:	ec53 2b17 	vmov	r2, r3, d7
 80121d8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80121dc:	1a43      	subs	r3, r0, r1
 80121de:	eeb0 0b48 	vmov.f64	d0, d8
 80121e2:	ec43 2b1c 	vmov	d12, r2, r3
 80121e6:	910a      	str	r1, [sp, #40]	; 0x28
 80121e8:	f001 fa9a 	bl	8013720 <__ulp>
 80121ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80121ee:	eeac 8b00 	vfma.f64	d8, d12, d0
 80121f2:	ec59 8b18 	vmov	r8, r9, d8
 80121f6:	e7aa      	b.n	801214e <_strtod_l+0xa66>
 80121f8:	eeb0 7b4d 	vmov.f64	d7, d13
 80121fc:	e7ea      	b.n	80121d4 <_strtod_l+0xaec>
 80121fe:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8012202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012206:	f57f af71 	bpl.w	80120ec <_strtod_l+0xa04>
 801220a:	e4b5      	b.n	8011b78 <_strtod_l+0x490>
 801220c:	2300      	movs	r3, #0
 801220e:	9308      	str	r3, [sp, #32]
 8012210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012214:	6013      	str	r3, [r2, #0]
 8012216:	f7ff baa6 	b.w	8011766 <_strtod_l+0x7e>
 801221a:	2a65      	cmp	r2, #101	; 0x65
 801221c:	f43f aba2 	beq.w	8011964 <_strtod_l+0x27c>
 8012220:	2a45      	cmp	r2, #69	; 0x45
 8012222:	f43f ab9f 	beq.w	8011964 <_strtod_l+0x27c>
 8012226:	2101      	movs	r1, #1
 8012228:	f7ff bbd8 	b.w	80119dc <_strtod_l+0x2f4>
 801222c:	f3af 8000 	nop.w
 8012230:	ffc00000 	.word	0xffc00000
 8012234:	41dfffff 	.word	0x41dfffff
 8012238:	000fffff 	.word	0x000fffff
 801223c:	7ff00000 	.word	0x7ff00000
 8012240:	7fefffff 	.word	0x7fefffff
 8012244:	7c9fffff 	.word	0x7c9fffff
 8012248:	7fe00000 	.word	0x7fe00000

0801224c <strtod>:
 801224c:	460a      	mov	r2, r1
 801224e:	4601      	mov	r1, r0
 8012250:	4802      	ldr	r0, [pc, #8]	; (801225c <strtod+0x10>)
 8012252:	4b03      	ldr	r3, [pc, #12]	; (8012260 <strtod+0x14>)
 8012254:	6800      	ldr	r0, [r0, #0]
 8012256:	f7ff ba47 	b.w	80116e8 <_strtod_l>
 801225a:	bf00      	nop
 801225c:	24000208 	.word	0x24000208
 8012260:	24000050 	.word	0x24000050

08012264 <_strtol_l.constprop.0>:
 8012264:	2b01      	cmp	r3, #1
 8012266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801226a:	d001      	beq.n	8012270 <_strtol_l.constprop.0+0xc>
 801226c:	2b24      	cmp	r3, #36	; 0x24
 801226e:	d906      	bls.n	801227e <_strtol_l.constprop.0+0x1a>
 8012270:	f000 fad2 	bl	8012818 <__errno>
 8012274:	2316      	movs	r3, #22
 8012276:	6003      	str	r3, [r0, #0]
 8012278:	2000      	movs	r0, #0
 801227a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801227e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012364 <_strtol_l.constprop.0+0x100>
 8012282:	460d      	mov	r5, r1
 8012284:	462e      	mov	r6, r5
 8012286:	f815 4b01 	ldrb.w	r4, [r5], #1
 801228a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801228e:	f017 0708 	ands.w	r7, r7, #8
 8012292:	d1f7      	bne.n	8012284 <_strtol_l.constprop.0+0x20>
 8012294:	2c2d      	cmp	r4, #45	; 0x2d
 8012296:	d132      	bne.n	80122fe <_strtol_l.constprop.0+0x9a>
 8012298:	782c      	ldrb	r4, [r5, #0]
 801229a:	2701      	movs	r7, #1
 801229c:	1cb5      	adds	r5, r6, #2
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d05b      	beq.n	801235a <_strtol_l.constprop.0+0xf6>
 80122a2:	2b10      	cmp	r3, #16
 80122a4:	d109      	bne.n	80122ba <_strtol_l.constprop.0+0x56>
 80122a6:	2c30      	cmp	r4, #48	; 0x30
 80122a8:	d107      	bne.n	80122ba <_strtol_l.constprop.0+0x56>
 80122aa:	782c      	ldrb	r4, [r5, #0]
 80122ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80122b0:	2c58      	cmp	r4, #88	; 0x58
 80122b2:	d14d      	bne.n	8012350 <_strtol_l.constprop.0+0xec>
 80122b4:	786c      	ldrb	r4, [r5, #1]
 80122b6:	2310      	movs	r3, #16
 80122b8:	3502      	adds	r5, #2
 80122ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80122be:	f108 38ff 	add.w	r8, r8, #4294967295
 80122c2:	f04f 0e00 	mov.w	lr, #0
 80122c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80122ca:	4676      	mov	r6, lr
 80122cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80122d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80122d4:	f1bc 0f09 	cmp.w	ip, #9
 80122d8:	d816      	bhi.n	8012308 <_strtol_l.constprop.0+0xa4>
 80122da:	4664      	mov	r4, ip
 80122dc:	42a3      	cmp	r3, r4
 80122de:	dd24      	ble.n	801232a <_strtol_l.constprop.0+0xc6>
 80122e0:	f1be 3fff 	cmp.w	lr, #4294967295
 80122e4:	d008      	beq.n	80122f8 <_strtol_l.constprop.0+0x94>
 80122e6:	45b1      	cmp	r9, r6
 80122e8:	d31c      	bcc.n	8012324 <_strtol_l.constprop.0+0xc0>
 80122ea:	d101      	bne.n	80122f0 <_strtol_l.constprop.0+0x8c>
 80122ec:	45a2      	cmp	sl, r4
 80122ee:	db19      	blt.n	8012324 <_strtol_l.constprop.0+0xc0>
 80122f0:	fb06 4603 	mla	r6, r6, r3, r4
 80122f4:	f04f 0e01 	mov.w	lr, #1
 80122f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122fc:	e7e8      	b.n	80122d0 <_strtol_l.constprop.0+0x6c>
 80122fe:	2c2b      	cmp	r4, #43	; 0x2b
 8012300:	bf04      	itt	eq
 8012302:	782c      	ldrbeq	r4, [r5, #0]
 8012304:	1cb5      	addeq	r5, r6, #2
 8012306:	e7ca      	b.n	801229e <_strtol_l.constprop.0+0x3a>
 8012308:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801230c:	f1bc 0f19 	cmp.w	ip, #25
 8012310:	d801      	bhi.n	8012316 <_strtol_l.constprop.0+0xb2>
 8012312:	3c37      	subs	r4, #55	; 0x37
 8012314:	e7e2      	b.n	80122dc <_strtol_l.constprop.0+0x78>
 8012316:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801231a:	f1bc 0f19 	cmp.w	ip, #25
 801231e:	d804      	bhi.n	801232a <_strtol_l.constprop.0+0xc6>
 8012320:	3c57      	subs	r4, #87	; 0x57
 8012322:	e7db      	b.n	80122dc <_strtol_l.constprop.0+0x78>
 8012324:	f04f 3eff 	mov.w	lr, #4294967295
 8012328:	e7e6      	b.n	80122f8 <_strtol_l.constprop.0+0x94>
 801232a:	f1be 3fff 	cmp.w	lr, #4294967295
 801232e:	d105      	bne.n	801233c <_strtol_l.constprop.0+0xd8>
 8012330:	2322      	movs	r3, #34	; 0x22
 8012332:	6003      	str	r3, [r0, #0]
 8012334:	4646      	mov	r6, r8
 8012336:	b942      	cbnz	r2, 801234a <_strtol_l.constprop.0+0xe6>
 8012338:	4630      	mov	r0, r6
 801233a:	e79e      	b.n	801227a <_strtol_l.constprop.0+0x16>
 801233c:	b107      	cbz	r7, 8012340 <_strtol_l.constprop.0+0xdc>
 801233e:	4276      	negs	r6, r6
 8012340:	2a00      	cmp	r2, #0
 8012342:	d0f9      	beq.n	8012338 <_strtol_l.constprop.0+0xd4>
 8012344:	f1be 0f00 	cmp.w	lr, #0
 8012348:	d000      	beq.n	801234c <_strtol_l.constprop.0+0xe8>
 801234a:	1e69      	subs	r1, r5, #1
 801234c:	6011      	str	r1, [r2, #0]
 801234e:	e7f3      	b.n	8012338 <_strtol_l.constprop.0+0xd4>
 8012350:	2430      	movs	r4, #48	; 0x30
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1b1      	bne.n	80122ba <_strtol_l.constprop.0+0x56>
 8012356:	2308      	movs	r3, #8
 8012358:	e7af      	b.n	80122ba <_strtol_l.constprop.0+0x56>
 801235a:	2c30      	cmp	r4, #48	; 0x30
 801235c:	d0a5      	beq.n	80122aa <_strtol_l.constprop.0+0x46>
 801235e:	230a      	movs	r3, #10
 8012360:	e7ab      	b.n	80122ba <_strtol_l.constprop.0+0x56>
 8012362:	bf00      	nop
 8012364:	08017ae1 	.word	0x08017ae1

08012368 <_strtol_r>:
 8012368:	f7ff bf7c 	b.w	8012264 <_strtol_l.constprop.0>

0801236c <std>:
 801236c:	2300      	movs	r3, #0
 801236e:	b510      	push	{r4, lr}
 8012370:	4604      	mov	r4, r0
 8012372:	e9c0 3300 	strd	r3, r3, [r0]
 8012376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801237a:	6083      	str	r3, [r0, #8]
 801237c:	8181      	strh	r1, [r0, #12]
 801237e:	6643      	str	r3, [r0, #100]	; 0x64
 8012380:	81c2      	strh	r2, [r0, #14]
 8012382:	6183      	str	r3, [r0, #24]
 8012384:	4619      	mov	r1, r3
 8012386:	2208      	movs	r2, #8
 8012388:	305c      	adds	r0, #92	; 0x5c
 801238a:	f000 f97e 	bl	801268a <memset>
 801238e:	4b0d      	ldr	r3, [pc, #52]	; (80123c4 <std+0x58>)
 8012390:	6263      	str	r3, [r4, #36]	; 0x24
 8012392:	4b0d      	ldr	r3, [pc, #52]	; (80123c8 <std+0x5c>)
 8012394:	62a3      	str	r3, [r4, #40]	; 0x28
 8012396:	4b0d      	ldr	r3, [pc, #52]	; (80123cc <std+0x60>)
 8012398:	62e3      	str	r3, [r4, #44]	; 0x2c
 801239a:	4b0d      	ldr	r3, [pc, #52]	; (80123d0 <std+0x64>)
 801239c:	6323      	str	r3, [r4, #48]	; 0x30
 801239e:	4b0d      	ldr	r3, [pc, #52]	; (80123d4 <std+0x68>)
 80123a0:	6224      	str	r4, [r4, #32]
 80123a2:	429c      	cmp	r4, r3
 80123a4:	d006      	beq.n	80123b4 <std+0x48>
 80123a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80123aa:	4294      	cmp	r4, r2
 80123ac:	d002      	beq.n	80123b4 <std+0x48>
 80123ae:	33d0      	adds	r3, #208	; 0xd0
 80123b0:	429c      	cmp	r4, r3
 80123b2:	d105      	bne.n	80123c0 <std+0x54>
 80123b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80123b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123bc:	f000 ba56 	b.w	801286c <__retarget_lock_init_recursive>
 80123c0:	bd10      	pop	{r4, pc}
 80123c2:	bf00      	nop
 80123c4:	080125ad 	.word	0x080125ad
 80123c8:	080125d3 	.word	0x080125d3
 80123cc:	0801260b 	.word	0x0801260b
 80123d0:	0801262f 	.word	0x0801262f
 80123d4:	24010eac 	.word	0x24010eac

080123d8 <stdio_exit_handler>:
 80123d8:	4a02      	ldr	r2, [pc, #8]	; (80123e4 <stdio_exit_handler+0xc>)
 80123da:	4903      	ldr	r1, [pc, #12]	; (80123e8 <stdio_exit_handler+0x10>)
 80123dc:	4803      	ldr	r0, [pc, #12]	; (80123ec <stdio_exit_handler+0x14>)
 80123de:	f000 b869 	b.w	80124b4 <_fwalk_sglue>
 80123e2:	bf00      	nop
 80123e4:	24000044 	.word	0x24000044
 80123e8:	0801496d 	.word	0x0801496d
 80123ec:	240001bc 	.word	0x240001bc

080123f0 <cleanup_stdio>:
 80123f0:	6841      	ldr	r1, [r0, #4]
 80123f2:	4b0c      	ldr	r3, [pc, #48]	; (8012424 <cleanup_stdio+0x34>)
 80123f4:	4299      	cmp	r1, r3
 80123f6:	b510      	push	{r4, lr}
 80123f8:	4604      	mov	r4, r0
 80123fa:	d001      	beq.n	8012400 <cleanup_stdio+0x10>
 80123fc:	f002 fab6 	bl	801496c <_fflush_r>
 8012400:	68a1      	ldr	r1, [r4, #8]
 8012402:	4b09      	ldr	r3, [pc, #36]	; (8012428 <cleanup_stdio+0x38>)
 8012404:	4299      	cmp	r1, r3
 8012406:	d002      	beq.n	801240e <cleanup_stdio+0x1e>
 8012408:	4620      	mov	r0, r4
 801240a:	f002 faaf 	bl	801496c <_fflush_r>
 801240e:	68e1      	ldr	r1, [r4, #12]
 8012410:	4b06      	ldr	r3, [pc, #24]	; (801242c <cleanup_stdio+0x3c>)
 8012412:	4299      	cmp	r1, r3
 8012414:	d004      	beq.n	8012420 <cleanup_stdio+0x30>
 8012416:	4620      	mov	r0, r4
 8012418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801241c:	f002 baa6 	b.w	801496c <_fflush_r>
 8012420:	bd10      	pop	{r4, pc}
 8012422:	bf00      	nop
 8012424:	24010eac 	.word	0x24010eac
 8012428:	24010f14 	.word	0x24010f14
 801242c:	24010f7c 	.word	0x24010f7c

08012430 <global_stdio_init.part.0>:
 8012430:	b510      	push	{r4, lr}
 8012432:	4b0b      	ldr	r3, [pc, #44]	; (8012460 <global_stdio_init.part.0+0x30>)
 8012434:	4c0b      	ldr	r4, [pc, #44]	; (8012464 <global_stdio_init.part.0+0x34>)
 8012436:	4a0c      	ldr	r2, [pc, #48]	; (8012468 <global_stdio_init.part.0+0x38>)
 8012438:	601a      	str	r2, [r3, #0]
 801243a:	4620      	mov	r0, r4
 801243c:	2200      	movs	r2, #0
 801243e:	2104      	movs	r1, #4
 8012440:	f7ff ff94 	bl	801236c <std>
 8012444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012448:	2201      	movs	r2, #1
 801244a:	2109      	movs	r1, #9
 801244c:	f7ff ff8e 	bl	801236c <std>
 8012450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012454:	2202      	movs	r2, #2
 8012456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801245a:	2112      	movs	r1, #18
 801245c:	f7ff bf86 	b.w	801236c <std>
 8012460:	24010fe4 	.word	0x24010fe4
 8012464:	24010eac 	.word	0x24010eac
 8012468:	080123d9 	.word	0x080123d9

0801246c <__sfp_lock_acquire>:
 801246c:	4801      	ldr	r0, [pc, #4]	; (8012474 <__sfp_lock_acquire+0x8>)
 801246e:	f000 b9fe 	b.w	801286e <__retarget_lock_acquire_recursive>
 8012472:	bf00      	nop
 8012474:	24010fed 	.word	0x24010fed

08012478 <__sfp_lock_release>:
 8012478:	4801      	ldr	r0, [pc, #4]	; (8012480 <__sfp_lock_release+0x8>)
 801247a:	f000 b9f9 	b.w	8012870 <__retarget_lock_release_recursive>
 801247e:	bf00      	nop
 8012480:	24010fed 	.word	0x24010fed

08012484 <__sinit>:
 8012484:	b510      	push	{r4, lr}
 8012486:	4604      	mov	r4, r0
 8012488:	f7ff fff0 	bl	801246c <__sfp_lock_acquire>
 801248c:	6a23      	ldr	r3, [r4, #32]
 801248e:	b11b      	cbz	r3, 8012498 <__sinit+0x14>
 8012490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012494:	f7ff bff0 	b.w	8012478 <__sfp_lock_release>
 8012498:	4b04      	ldr	r3, [pc, #16]	; (80124ac <__sinit+0x28>)
 801249a:	6223      	str	r3, [r4, #32]
 801249c:	4b04      	ldr	r3, [pc, #16]	; (80124b0 <__sinit+0x2c>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d1f5      	bne.n	8012490 <__sinit+0xc>
 80124a4:	f7ff ffc4 	bl	8012430 <global_stdio_init.part.0>
 80124a8:	e7f2      	b.n	8012490 <__sinit+0xc>
 80124aa:	bf00      	nop
 80124ac:	080123f1 	.word	0x080123f1
 80124b0:	24010fe4 	.word	0x24010fe4

080124b4 <_fwalk_sglue>:
 80124b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b8:	4607      	mov	r7, r0
 80124ba:	4688      	mov	r8, r1
 80124bc:	4614      	mov	r4, r2
 80124be:	2600      	movs	r6, #0
 80124c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124c4:	f1b9 0901 	subs.w	r9, r9, #1
 80124c8:	d505      	bpl.n	80124d6 <_fwalk_sglue+0x22>
 80124ca:	6824      	ldr	r4, [r4, #0]
 80124cc:	2c00      	cmp	r4, #0
 80124ce:	d1f7      	bne.n	80124c0 <_fwalk_sglue+0xc>
 80124d0:	4630      	mov	r0, r6
 80124d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124d6:	89ab      	ldrh	r3, [r5, #12]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d907      	bls.n	80124ec <_fwalk_sglue+0x38>
 80124dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124e0:	3301      	adds	r3, #1
 80124e2:	d003      	beq.n	80124ec <_fwalk_sglue+0x38>
 80124e4:	4629      	mov	r1, r5
 80124e6:	4638      	mov	r0, r7
 80124e8:	47c0      	blx	r8
 80124ea:	4306      	orrs	r6, r0
 80124ec:	3568      	adds	r5, #104	; 0x68
 80124ee:	e7e9      	b.n	80124c4 <_fwalk_sglue+0x10>

080124f0 <iprintf>:
 80124f0:	b40f      	push	{r0, r1, r2, r3}
 80124f2:	b507      	push	{r0, r1, r2, lr}
 80124f4:	4906      	ldr	r1, [pc, #24]	; (8012510 <iprintf+0x20>)
 80124f6:	ab04      	add	r3, sp, #16
 80124f8:	6808      	ldr	r0, [r1, #0]
 80124fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80124fe:	6881      	ldr	r1, [r0, #8]
 8012500:	9301      	str	r3, [sp, #4]
 8012502:	f001 fdb5 	bl	8014070 <_vfiprintf_r>
 8012506:	b003      	add	sp, #12
 8012508:	f85d eb04 	ldr.w	lr, [sp], #4
 801250c:	b004      	add	sp, #16
 801250e:	4770      	bx	lr
 8012510:	24000208 	.word	0x24000208

08012514 <siprintf>:
 8012514:	b40e      	push	{r1, r2, r3}
 8012516:	b500      	push	{lr}
 8012518:	b09c      	sub	sp, #112	; 0x70
 801251a:	ab1d      	add	r3, sp, #116	; 0x74
 801251c:	9002      	str	r0, [sp, #8]
 801251e:	9006      	str	r0, [sp, #24]
 8012520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012524:	4809      	ldr	r0, [pc, #36]	; (801254c <siprintf+0x38>)
 8012526:	9107      	str	r1, [sp, #28]
 8012528:	9104      	str	r1, [sp, #16]
 801252a:	4909      	ldr	r1, [pc, #36]	; (8012550 <siprintf+0x3c>)
 801252c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012530:	9105      	str	r1, [sp, #20]
 8012532:	6800      	ldr	r0, [r0, #0]
 8012534:	9301      	str	r3, [sp, #4]
 8012536:	a902      	add	r1, sp, #8
 8012538:	f001 faa0 	bl	8013a7c <_svfiprintf_r>
 801253c:	9b02      	ldr	r3, [sp, #8]
 801253e:	2200      	movs	r2, #0
 8012540:	701a      	strb	r2, [r3, #0]
 8012542:	b01c      	add	sp, #112	; 0x70
 8012544:	f85d eb04 	ldr.w	lr, [sp], #4
 8012548:	b003      	add	sp, #12
 801254a:	4770      	bx	lr
 801254c:	24000208 	.word	0x24000208
 8012550:	ffff0208 	.word	0xffff0208

08012554 <siscanf>:
 8012554:	b40e      	push	{r1, r2, r3}
 8012556:	b510      	push	{r4, lr}
 8012558:	b09f      	sub	sp, #124	; 0x7c
 801255a:	ac21      	add	r4, sp, #132	; 0x84
 801255c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012560:	f854 2b04 	ldr.w	r2, [r4], #4
 8012564:	9201      	str	r2, [sp, #4]
 8012566:	f8ad 101c 	strh.w	r1, [sp, #28]
 801256a:	9004      	str	r0, [sp, #16]
 801256c:	9008      	str	r0, [sp, #32]
 801256e:	f7ed fec1 	bl	80002f4 <strlen>
 8012572:	4b0c      	ldr	r3, [pc, #48]	; (80125a4 <siscanf+0x50>)
 8012574:	9005      	str	r0, [sp, #20]
 8012576:	9009      	str	r0, [sp, #36]	; 0x24
 8012578:	930d      	str	r3, [sp, #52]	; 0x34
 801257a:	480b      	ldr	r0, [pc, #44]	; (80125a8 <siscanf+0x54>)
 801257c:	9a01      	ldr	r2, [sp, #4]
 801257e:	6800      	ldr	r0, [r0, #0]
 8012580:	9403      	str	r4, [sp, #12]
 8012582:	2300      	movs	r3, #0
 8012584:	9311      	str	r3, [sp, #68]	; 0x44
 8012586:	9316      	str	r3, [sp, #88]	; 0x58
 8012588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801258c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012590:	a904      	add	r1, sp, #16
 8012592:	4623      	mov	r3, r4
 8012594:	f001 fbca 	bl	8013d2c <__ssvfiscanf_r>
 8012598:	b01f      	add	sp, #124	; 0x7c
 801259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801259e:	b003      	add	sp, #12
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	080125cf 	.word	0x080125cf
 80125a8:	24000208 	.word	0x24000208

080125ac <__sread>:
 80125ac:	b510      	push	{r4, lr}
 80125ae:	460c      	mov	r4, r1
 80125b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125b4:	f000 f8fc 	bl	80127b0 <_read_r>
 80125b8:	2800      	cmp	r0, #0
 80125ba:	bfab      	itete	ge
 80125bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80125be:	89a3      	ldrhlt	r3, [r4, #12]
 80125c0:	181b      	addge	r3, r3, r0
 80125c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80125c6:	bfac      	ite	ge
 80125c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80125ca:	81a3      	strhlt	r3, [r4, #12]
 80125cc:	bd10      	pop	{r4, pc}

080125ce <__seofread>:
 80125ce:	2000      	movs	r0, #0
 80125d0:	4770      	bx	lr

080125d2 <__swrite>:
 80125d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d6:	461f      	mov	r7, r3
 80125d8:	898b      	ldrh	r3, [r1, #12]
 80125da:	05db      	lsls	r3, r3, #23
 80125dc:	4605      	mov	r5, r0
 80125de:	460c      	mov	r4, r1
 80125e0:	4616      	mov	r6, r2
 80125e2:	d505      	bpl.n	80125f0 <__swrite+0x1e>
 80125e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125e8:	2302      	movs	r3, #2
 80125ea:	2200      	movs	r2, #0
 80125ec:	f000 f8ce 	bl	801278c <_lseek_r>
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125fa:	81a3      	strh	r3, [r4, #12]
 80125fc:	4632      	mov	r2, r6
 80125fe:	463b      	mov	r3, r7
 8012600:	4628      	mov	r0, r5
 8012602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012606:	f000 b8f5 	b.w	80127f4 <_write_r>

0801260a <__sseek>:
 801260a:	b510      	push	{r4, lr}
 801260c:	460c      	mov	r4, r1
 801260e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012612:	f000 f8bb 	bl	801278c <_lseek_r>
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	89a3      	ldrh	r3, [r4, #12]
 801261a:	bf15      	itete	ne
 801261c:	6560      	strne	r0, [r4, #84]	; 0x54
 801261e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012626:	81a3      	strheq	r3, [r4, #12]
 8012628:	bf18      	it	ne
 801262a:	81a3      	strhne	r3, [r4, #12]
 801262c:	bd10      	pop	{r4, pc}

0801262e <__sclose>:
 801262e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012632:	f000 b845 	b.w	80126c0 <_close_r>

08012636 <memcmp>:
 8012636:	b510      	push	{r4, lr}
 8012638:	3901      	subs	r1, #1
 801263a:	4402      	add	r2, r0
 801263c:	4290      	cmp	r0, r2
 801263e:	d101      	bne.n	8012644 <memcmp+0xe>
 8012640:	2000      	movs	r0, #0
 8012642:	e005      	b.n	8012650 <memcmp+0x1a>
 8012644:	7803      	ldrb	r3, [r0, #0]
 8012646:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801264a:	42a3      	cmp	r3, r4
 801264c:	d001      	beq.n	8012652 <memcmp+0x1c>
 801264e:	1b18      	subs	r0, r3, r4
 8012650:	bd10      	pop	{r4, pc}
 8012652:	3001      	adds	r0, #1
 8012654:	e7f2      	b.n	801263c <memcmp+0x6>

08012656 <memmove>:
 8012656:	4288      	cmp	r0, r1
 8012658:	b510      	push	{r4, lr}
 801265a:	eb01 0402 	add.w	r4, r1, r2
 801265e:	d902      	bls.n	8012666 <memmove+0x10>
 8012660:	4284      	cmp	r4, r0
 8012662:	4623      	mov	r3, r4
 8012664:	d807      	bhi.n	8012676 <memmove+0x20>
 8012666:	1e43      	subs	r3, r0, #1
 8012668:	42a1      	cmp	r1, r4
 801266a:	d008      	beq.n	801267e <memmove+0x28>
 801266c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012670:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012674:	e7f8      	b.n	8012668 <memmove+0x12>
 8012676:	4402      	add	r2, r0
 8012678:	4601      	mov	r1, r0
 801267a:	428a      	cmp	r2, r1
 801267c:	d100      	bne.n	8012680 <memmove+0x2a>
 801267e:	bd10      	pop	{r4, pc}
 8012680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012684:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012688:	e7f7      	b.n	801267a <memmove+0x24>

0801268a <memset>:
 801268a:	4402      	add	r2, r0
 801268c:	4603      	mov	r3, r0
 801268e:	4293      	cmp	r3, r2
 8012690:	d100      	bne.n	8012694 <memset+0xa>
 8012692:	4770      	bx	lr
 8012694:	f803 1b01 	strb.w	r1, [r3], #1
 8012698:	e7f9      	b.n	801268e <memset+0x4>

0801269a <strncmp>:
 801269a:	b510      	push	{r4, lr}
 801269c:	b16a      	cbz	r2, 80126ba <strncmp+0x20>
 801269e:	3901      	subs	r1, #1
 80126a0:	1884      	adds	r4, r0, r2
 80126a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d103      	bne.n	80126b6 <strncmp+0x1c>
 80126ae:	42a0      	cmp	r0, r4
 80126b0:	d001      	beq.n	80126b6 <strncmp+0x1c>
 80126b2:	2a00      	cmp	r2, #0
 80126b4:	d1f5      	bne.n	80126a2 <strncmp+0x8>
 80126b6:	1ad0      	subs	r0, r2, r3
 80126b8:	bd10      	pop	{r4, pc}
 80126ba:	4610      	mov	r0, r2
 80126bc:	e7fc      	b.n	80126b8 <strncmp+0x1e>
	...

080126c0 <_close_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	4d06      	ldr	r5, [pc, #24]	; (80126dc <_close_r+0x1c>)
 80126c4:	2300      	movs	r3, #0
 80126c6:	4604      	mov	r4, r0
 80126c8:	4608      	mov	r0, r1
 80126ca:	602b      	str	r3, [r5, #0]
 80126cc:	f7ef fcea 	bl	80020a4 <_close>
 80126d0:	1c43      	adds	r3, r0, #1
 80126d2:	d102      	bne.n	80126da <_close_r+0x1a>
 80126d4:	682b      	ldr	r3, [r5, #0]
 80126d6:	b103      	cbz	r3, 80126da <_close_r+0x1a>
 80126d8:	6023      	str	r3, [r4, #0]
 80126da:	bd38      	pop	{r3, r4, r5, pc}
 80126dc:	24010fe8 	.word	0x24010fe8

080126e0 <_reclaim_reent>:
 80126e0:	4b29      	ldr	r3, [pc, #164]	; (8012788 <_reclaim_reent+0xa8>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4283      	cmp	r3, r0
 80126e6:	b570      	push	{r4, r5, r6, lr}
 80126e8:	4604      	mov	r4, r0
 80126ea:	d04b      	beq.n	8012784 <_reclaim_reent+0xa4>
 80126ec:	69c3      	ldr	r3, [r0, #28]
 80126ee:	b143      	cbz	r3, 8012702 <_reclaim_reent+0x22>
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d144      	bne.n	8012780 <_reclaim_reent+0xa0>
 80126f6:	69e3      	ldr	r3, [r4, #28]
 80126f8:	6819      	ldr	r1, [r3, #0]
 80126fa:	b111      	cbz	r1, 8012702 <_reclaim_reent+0x22>
 80126fc:	4620      	mov	r0, r4
 80126fe:	f000 f8ed 	bl	80128dc <_free_r>
 8012702:	6961      	ldr	r1, [r4, #20]
 8012704:	b111      	cbz	r1, 801270c <_reclaim_reent+0x2c>
 8012706:	4620      	mov	r0, r4
 8012708:	f000 f8e8 	bl	80128dc <_free_r>
 801270c:	69e1      	ldr	r1, [r4, #28]
 801270e:	b111      	cbz	r1, 8012716 <_reclaim_reent+0x36>
 8012710:	4620      	mov	r0, r4
 8012712:	f000 f8e3 	bl	80128dc <_free_r>
 8012716:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012718:	b111      	cbz	r1, 8012720 <_reclaim_reent+0x40>
 801271a:	4620      	mov	r0, r4
 801271c:	f000 f8de 	bl	80128dc <_free_r>
 8012720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012722:	b111      	cbz	r1, 801272a <_reclaim_reent+0x4a>
 8012724:	4620      	mov	r0, r4
 8012726:	f000 f8d9 	bl	80128dc <_free_r>
 801272a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801272c:	b111      	cbz	r1, 8012734 <_reclaim_reent+0x54>
 801272e:	4620      	mov	r0, r4
 8012730:	f000 f8d4 	bl	80128dc <_free_r>
 8012734:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012736:	b111      	cbz	r1, 801273e <_reclaim_reent+0x5e>
 8012738:	4620      	mov	r0, r4
 801273a:	f000 f8cf 	bl	80128dc <_free_r>
 801273e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012740:	b111      	cbz	r1, 8012748 <_reclaim_reent+0x68>
 8012742:	4620      	mov	r0, r4
 8012744:	f000 f8ca 	bl	80128dc <_free_r>
 8012748:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801274a:	b111      	cbz	r1, 8012752 <_reclaim_reent+0x72>
 801274c:	4620      	mov	r0, r4
 801274e:	f000 f8c5 	bl	80128dc <_free_r>
 8012752:	6a23      	ldr	r3, [r4, #32]
 8012754:	b1b3      	cbz	r3, 8012784 <_reclaim_reent+0xa4>
 8012756:	4620      	mov	r0, r4
 8012758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801275c:	4718      	bx	r3
 801275e:	5949      	ldr	r1, [r1, r5]
 8012760:	b941      	cbnz	r1, 8012774 <_reclaim_reent+0x94>
 8012762:	3504      	adds	r5, #4
 8012764:	69e3      	ldr	r3, [r4, #28]
 8012766:	2d80      	cmp	r5, #128	; 0x80
 8012768:	68d9      	ldr	r1, [r3, #12]
 801276a:	d1f8      	bne.n	801275e <_reclaim_reent+0x7e>
 801276c:	4620      	mov	r0, r4
 801276e:	f000 f8b5 	bl	80128dc <_free_r>
 8012772:	e7c0      	b.n	80126f6 <_reclaim_reent+0x16>
 8012774:	680e      	ldr	r6, [r1, #0]
 8012776:	4620      	mov	r0, r4
 8012778:	f000 f8b0 	bl	80128dc <_free_r>
 801277c:	4631      	mov	r1, r6
 801277e:	e7ef      	b.n	8012760 <_reclaim_reent+0x80>
 8012780:	2500      	movs	r5, #0
 8012782:	e7ef      	b.n	8012764 <_reclaim_reent+0x84>
 8012784:	bd70      	pop	{r4, r5, r6, pc}
 8012786:	bf00      	nop
 8012788:	24000208 	.word	0x24000208

0801278c <_lseek_r>:
 801278c:	b538      	push	{r3, r4, r5, lr}
 801278e:	4d07      	ldr	r5, [pc, #28]	; (80127ac <_lseek_r+0x20>)
 8012790:	4604      	mov	r4, r0
 8012792:	4608      	mov	r0, r1
 8012794:	4611      	mov	r1, r2
 8012796:	2200      	movs	r2, #0
 8012798:	602a      	str	r2, [r5, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	f7ef fc8e 	bl	80020bc <_lseek>
 80127a0:	1c43      	adds	r3, r0, #1
 80127a2:	d102      	bne.n	80127aa <_lseek_r+0x1e>
 80127a4:	682b      	ldr	r3, [r5, #0]
 80127a6:	b103      	cbz	r3, 80127aa <_lseek_r+0x1e>
 80127a8:	6023      	str	r3, [r4, #0]
 80127aa:	bd38      	pop	{r3, r4, r5, pc}
 80127ac:	24010fe8 	.word	0x24010fe8

080127b0 <_read_r>:
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	4d07      	ldr	r5, [pc, #28]	; (80127d0 <_read_r+0x20>)
 80127b4:	4604      	mov	r4, r0
 80127b6:	4608      	mov	r0, r1
 80127b8:	4611      	mov	r1, r2
 80127ba:	2200      	movs	r2, #0
 80127bc:	602a      	str	r2, [r5, #0]
 80127be:	461a      	mov	r2, r3
 80127c0:	f7ef fc54 	bl	800206c <_read>
 80127c4:	1c43      	adds	r3, r0, #1
 80127c6:	d102      	bne.n	80127ce <_read_r+0x1e>
 80127c8:	682b      	ldr	r3, [r5, #0]
 80127ca:	b103      	cbz	r3, 80127ce <_read_r+0x1e>
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	bd38      	pop	{r3, r4, r5, pc}
 80127d0:	24010fe8 	.word	0x24010fe8

080127d4 <_sbrk_r>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	4d06      	ldr	r5, [pc, #24]	; (80127f0 <_sbrk_r+0x1c>)
 80127d8:	2300      	movs	r3, #0
 80127da:	4604      	mov	r4, r0
 80127dc:	4608      	mov	r0, r1
 80127de:	602b      	str	r3, [r5, #0]
 80127e0:	f7ef fc6e 	bl	80020c0 <_sbrk>
 80127e4:	1c43      	adds	r3, r0, #1
 80127e6:	d102      	bne.n	80127ee <_sbrk_r+0x1a>
 80127e8:	682b      	ldr	r3, [r5, #0]
 80127ea:	b103      	cbz	r3, 80127ee <_sbrk_r+0x1a>
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	bd38      	pop	{r3, r4, r5, pc}
 80127f0:	24010fe8 	.word	0x24010fe8

080127f4 <_write_r>:
 80127f4:	b538      	push	{r3, r4, r5, lr}
 80127f6:	4d07      	ldr	r5, [pc, #28]	; (8012814 <_write_r+0x20>)
 80127f8:	4604      	mov	r4, r0
 80127fa:	4608      	mov	r0, r1
 80127fc:	4611      	mov	r1, r2
 80127fe:	2200      	movs	r2, #0
 8012800:	602a      	str	r2, [r5, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	f7ef fc40 	bl	8002088 <_write>
 8012808:	1c43      	adds	r3, r0, #1
 801280a:	d102      	bne.n	8012812 <_write_r+0x1e>
 801280c:	682b      	ldr	r3, [r5, #0]
 801280e:	b103      	cbz	r3, 8012812 <_write_r+0x1e>
 8012810:	6023      	str	r3, [r4, #0]
 8012812:	bd38      	pop	{r3, r4, r5, pc}
 8012814:	24010fe8 	.word	0x24010fe8

08012818 <__errno>:
 8012818:	4b01      	ldr	r3, [pc, #4]	; (8012820 <__errno+0x8>)
 801281a:	6818      	ldr	r0, [r3, #0]
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	24000208 	.word	0x24000208

08012824 <__libc_init_array>:
 8012824:	b570      	push	{r4, r5, r6, lr}
 8012826:	4d0d      	ldr	r5, [pc, #52]	; (801285c <__libc_init_array+0x38>)
 8012828:	4c0d      	ldr	r4, [pc, #52]	; (8012860 <__libc_init_array+0x3c>)
 801282a:	1b64      	subs	r4, r4, r5
 801282c:	10a4      	asrs	r4, r4, #2
 801282e:	2600      	movs	r6, #0
 8012830:	42a6      	cmp	r6, r4
 8012832:	d109      	bne.n	8012848 <__libc_init_array+0x24>
 8012834:	4d0b      	ldr	r5, [pc, #44]	; (8012864 <__libc_init_array+0x40>)
 8012836:	4c0c      	ldr	r4, [pc, #48]	; (8012868 <__libc_init_array+0x44>)
 8012838:	f002 fb34 	bl	8014ea4 <_init>
 801283c:	1b64      	subs	r4, r4, r5
 801283e:	10a4      	asrs	r4, r4, #2
 8012840:	2600      	movs	r6, #0
 8012842:	42a6      	cmp	r6, r4
 8012844:	d105      	bne.n	8012852 <__libc_init_array+0x2e>
 8012846:	bd70      	pop	{r4, r5, r6, pc}
 8012848:	f855 3b04 	ldr.w	r3, [r5], #4
 801284c:	4798      	blx	r3
 801284e:	3601      	adds	r6, #1
 8012850:	e7ee      	b.n	8012830 <__libc_init_array+0xc>
 8012852:	f855 3b04 	ldr.w	r3, [r5], #4
 8012856:	4798      	blx	r3
 8012858:	3601      	adds	r6, #1
 801285a:	e7f2      	b.n	8012842 <__libc_init_array+0x1e>
 801285c:	08017e3c 	.word	0x08017e3c
 8012860:	08017e3c 	.word	0x08017e3c
 8012864:	08017e3c 	.word	0x08017e3c
 8012868:	08017e40 	.word	0x08017e40

0801286c <__retarget_lock_init_recursive>:
 801286c:	4770      	bx	lr

0801286e <__retarget_lock_acquire_recursive>:
 801286e:	4770      	bx	lr

08012870 <__retarget_lock_release_recursive>:
 8012870:	4770      	bx	lr

08012872 <memcpy>:
 8012872:	440a      	add	r2, r1
 8012874:	4291      	cmp	r1, r2
 8012876:	f100 33ff 	add.w	r3, r0, #4294967295
 801287a:	d100      	bne.n	801287e <memcpy+0xc>
 801287c:	4770      	bx	lr
 801287e:	b510      	push	{r4, lr}
 8012880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012888:	4291      	cmp	r1, r2
 801288a:	d1f9      	bne.n	8012880 <memcpy+0xe>
 801288c:	bd10      	pop	{r4, pc}
	...

08012890 <nan>:
 8012890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012898 <nan+0x8>
 8012894:	4770      	bx	lr
 8012896:	bf00      	nop
 8012898:	00000000 	.word	0x00000000
 801289c:	7ff80000 	.word	0x7ff80000

080128a0 <__assert_func>:
 80128a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80128a2:	4614      	mov	r4, r2
 80128a4:	461a      	mov	r2, r3
 80128a6:	4b09      	ldr	r3, [pc, #36]	; (80128cc <__assert_func+0x2c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4605      	mov	r5, r0
 80128ac:	68d8      	ldr	r0, [r3, #12]
 80128ae:	b14c      	cbz	r4, 80128c4 <__assert_func+0x24>
 80128b0:	4b07      	ldr	r3, [pc, #28]	; (80128d0 <__assert_func+0x30>)
 80128b2:	9100      	str	r1, [sp, #0]
 80128b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128b8:	4906      	ldr	r1, [pc, #24]	; (80128d4 <__assert_func+0x34>)
 80128ba:	462b      	mov	r3, r5
 80128bc:	f002 f87e 	bl	80149bc <fiprintf>
 80128c0:	f002 f996 	bl	8014bf0 <abort>
 80128c4:	4b04      	ldr	r3, [pc, #16]	; (80128d8 <__assert_func+0x38>)
 80128c6:	461c      	mov	r4, r3
 80128c8:	e7f3      	b.n	80128b2 <__assert_func+0x12>
 80128ca:	bf00      	nop
 80128cc:	24000208 	.word	0x24000208
 80128d0:	08017be9 	.word	0x08017be9
 80128d4:	08017bf6 	.word	0x08017bf6
 80128d8:	08017c24 	.word	0x08017c24

080128dc <_free_r>:
 80128dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128de:	2900      	cmp	r1, #0
 80128e0:	d044      	beq.n	801296c <_free_r+0x90>
 80128e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128e6:	9001      	str	r0, [sp, #4]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f1a1 0404 	sub.w	r4, r1, #4
 80128ee:	bfb8      	it	lt
 80128f0:	18e4      	addlt	r4, r4, r3
 80128f2:	f7fe fe5d 	bl	80115b0 <__malloc_lock>
 80128f6:	4a1e      	ldr	r2, [pc, #120]	; (8012970 <_free_r+0x94>)
 80128f8:	9801      	ldr	r0, [sp, #4]
 80128fa:	6813      	ldr	r3, [r2, #0]
 80128fc:	b933      	cbnz	r3, 801290c <_free_r+0x30>
 80128fe:	6063      	str	r3, [r4, #4]
 8012900:	6014      	str	r4, [r2, #0]
 8012902:	b003      	add	sp, #12
 8012904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012908:	f7fe be58 	b.w	80115bc <__malloc_unlock>
 801290c:	42a3      	cmp	r3, r4
 801290e:	d908      	bls.n	8012922 <_free_r+0x46>
 8012910:	6825      	ldr	r5, [r4, #0]
 8012912:	1961      	adds	r1, r4, r5
 8012914:	428b      	cmp	r3, r1
 8012916:	bf01      	itttt	eq
 8012918:	6819      	ldreq	r1, [r3, #0]
 801291a:	685b      	ldreq	r3, [r3, #4]
 801291c:	1949      	addeq	r1, r1, r5
 801291e:	6021      	streq	r1, [r4, #0]
 8012920:	e7ed      	b.n	80128fe <_free_r+0x22>
 8012922:	461a      	mov	r2, r3
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	b10b      	cbz	r3, 801292c <_free_r+0x50>
 8012928:	42a3      	cmp	r3, r4
 801292a:	d9fa      	bls.n	8012922 <_free_r+0x46>
 801292c:	6811      	ldr	r1, [r2, #0]
 801292e:	1855      	adds	r5, r2, r1
 8012930:	42a5      	cmp	r5, r4
 8012932:	d10b      	bne.n	801294c <_free_r+0x70>
 8012934:	6824      	ldr	r4, [r4, #0]
 8012936:	4421      	add	r1, r4
 8012938:	1854      	adds	r4, r2, r1
 801293a:	42a3      	cmp	r3, r4
 801293c:	6011      	str	r1, [r2, #0]
 801293e:	d1e0      	bne.n	8012902 <_free_r+0x26>
 8012940:	681c      	ldr	r4, [r3, #0]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	6053      	str	r3, [r2, #4]
 8012946:	440c      	add	r4, r1
 8012948:	6014      	str	r4, [r2, #0]
 801294a:	e7da      	b.n	8012902 <_free_r+0x26>
 801294c:	d902      	bls.n	8012954 <_free_r+0x78>
 801294e:	230c      	movs	r3, #12
 8012950:	6003      	str	r3, [r0, #0]
 8012952:	e7d6      	b.n	8012902 <_free_r+0x26>
 8012954:	6825      	ldr	r5, [r4, #0]
 8012956:	1961      	adds	r1, r4, r5
 8012958:	428b      	cmp	r3, r1
 801295a:	bf04      	itt	eq
 801295c:	6819      	ldreq	r1, [r3, #0]
 801295e:	685b      	ldreq	r3, [r3, #4]
 8012960:	6063      	str	r3, [r4, #4]
 8012962:	bf04      	itt	eq
 8012964:	1949      	addeq	r1, r1, r5
 8012966:	6021      	streq	r1, [r4, #0]
 8012968:	6054      	str	r4, [r2, #4]
 801296a:	e7ca      	b.n	8012902 <_free_r+0x26>
 801296c:	b003      	add	sp, #12
 801296e:	bd30      	pop	{r4, r5, pc}
 8012970:	24010ea4 	.word	0x24010ea4

08012974 <rshift>:
 8012974:	6903      	ldr	r3, [r0, #16]
 8012976:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801297a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801297e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012982:	f100 0414 	add.w	r4, r0, #20
 8012986:	dd45      	ble.n	8012a14 <rshift+0xa0>
 8012988:	f011 011f 	ands.w	r1, r1, #31
 801298c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012990:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012994:	d10c      	bne.n	80129b0 <rshift+0x3c>
 8012996:	f100 0710 	add.w	r7, r0, #16
 801299a:	4629      	mov	r1, r5
 801299c:	42b1      	cmp	r1, r6
 801299e:	d334      	bcc.n	8012a0a <rshift+0x96>
 80129a0:	1a9b      	subs	r3, r3, r2
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	1eea      	subs	r2, r5, #3
 80129a6:	4296      	cmp	r6, r2
 80129a8:	bf38      	it	cc
 80129aa:	2300      	movcc	r3, #0
 80129ac:	4423      	add	r3, r4
 80129ae:	e015      	b.n	80129dc <rshift+0x68>
 80129b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80129b4:	f1c1 0820 	rsb	r8, r1, #32
 80129b8:	40cf      	lsrs	r7, r1
 80129ba:	f105 0e04 	add.w	lr, r5, #4
 80129be:	46a1      	mov	r9, r4
 80129c0:	4576      	cmp	r6, lr
 80129c2:	46f4      	mov	ip, lr
 80129c4:	d815      	bhi.n	80129f2 <rshift+0x7e>
 80129c6:	1a9a      	subs	r2, r3, r2
 80129c8:	0092      	lsls	r2, r2, #2
 80129ca:	3a04      	subs	r2, #4
 80129cc:	3501      	adds	r5, #1
 80129ce:	42ae      	cmp	r6, r5
 80129d0:	bf38      	it	cc
 80129d2:	2200      	movcc	r2, #0
 80129d4:	18a3      	adds	r3, r4, r2
 80129d6:	50a7      	str	r7, [r4, r2]
 80129d8:	b107      	cbz	r7, 80129dc <rshift+0x68>
 80129da:	3304      	adds	r3, #4
 80129dc:	1b1a      	subs	r2, r3, r4
 80129de:	42a3      	cmp	r3, r4
 80129e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80129e4:	bf08      	it	eq
 80129e6:	2300      	moveq	r3, #0
 80129e8:	6102      	str	r2, [r0, #16]
 80129ea:	bf08      	it	eq
 80129ec:	6143      	streq	r3, [r0, #20]
 80129ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129f2:	f8dc c000 	ldr.w	ip, [ip]
 80129f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80129fa:	ea4c 0707 	orr.w	r7, ip, r7
 80129fe:	f849 7b04 	str.w	r7, [r9], #4
 8012a02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012a06:	40cf      	lsrs	r7, r1
 8012a08:	e7da      	b.n	80129c0 <rshift+0x4c>
 8012a0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8012a0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012a12:	e7c3      	b.n	801299c <rshift+0x28>
 8012a14:	4623      	mov	r3, r4
 8012a16:	e7e1      	b.n	80129dc <rshift+0x68>

08012a18 <__hexdig_fun>:
 8012a18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012a1c:	2b09      	cmp	r3, #9
 8012a1e:	d802      	bhi.n	8012a26 <__hexdig_fun+0xe>
 8012a20:	3820      	subs	r0, #32
 8012a22:	b2c0      	uxtb	r0, r0
 8012a24:	4770      	bx	lr
 8012a26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012a2a:	2b05      	cmp	r3, #5
 8012a2c:	d801      	bhi.n	8012a32 <__hexdig_fun+0x1a>
 8012a2e:	3847      	subs	r0, #71	; 0x47
 8012a30:	e7f7      	b.n	8012a22 <__hexdig_fun+0xa>
 8012a32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012a36:	2b05      	cmp	r3, #5
 8012a38:	d801      	bhi.n	8012a3e <__hexdig_fun+0x26>
 8012a3a:	3827      	subs	r0, #39	; 0x27
 8012a3c:	e7f1      	b.n	8012a22 <__hexdig_fun+0xa>
 8012a3e:	2000      	movs	r0, #0
 8012a40:	4770      	bx	lr
	...

08012a44 <__gethex>:
 8012a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a48:	4617      	mov	r7, r2
 8012a4a:	680a      	ldr	r2, [r1, #0]
 8012a4c:	b085      	sub	sp, #20
 8012a4e:	f102 0b02 	add.w	fp, r2, #2
 8012a52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012a56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012a5a:	4681      	mov	r9, r0
 8012a5c:	468a      	mov	sl, r1
 8012a5e:	9302      	str	r3, [sp, #8]
 8012a60:	32fe      	adds	r2, #254	; 0xfe
 8012a62:	eb02 030b 	add.w	r3, r2, fp
 8012a66:	46d8      	mov	r8, fp
 8012a68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012a6c:	9301      	str	r3, [sp, #4]
 8012a6e:	2830      	cmp	r0, #48	; 0x30
 8012a70:	d0f7      	beq.n	8012a62 <__gethex+0x1e>
 8012a72:	f7ff ffd1 	bl	8012a18 <__hexdig_fun>
 8012a76:	4604      	mov	r4, r0
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	d138      	bne.n	8012aee <__gethex+0xaa>
 8012a7c:	49a7      	ldr	r1, [pc, #668]	; (8012d1c <__gethex+0x2d8>)
 8012a7e:	2201      	movs	r2, #1
 8012a80:	4640      	mov	r0, r8
 8012a82:	f7ff fe0a 	bl	801269a <strncmp>
 8012a86:	4606      	mov	r6, r0
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d169      	bne.n	8012b60 <__gethex+0x11c>
 8012a8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012a90:	465d      	mov	r5, fp
 8012a92:	f7ff ffc1 	bl	8012a18 <__hexdig_fun>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d064      	beq.n	8012b64 <__gethex+0x120>
 8012a9a:	465a      	mov	r2, fp
 8012a9c:	7810      	ldrb	r0, [r2, #0]
 8012a9e:	2830      	cmp	r0, #48	; 0x30
 8012aa0:	4690      	mov	r8, r2
 8012aa2:	f102 0201 	add.w	r2, r2, #1
 8012aa6:	d0f9      	beq.n	8012a9c <__gethex+0x58>
 8012aa8:	f7ff ffb6 	bl	8012a18 <__hexdig_fun>
 8012aac:	2301      	movs	r3, #1
 8012aae:	fab0 f480 	clz	r4, r0
 8012ab2:	0964      	lsrs	r4, r4, #5
 8012ab4:	465e      	mov	r6, fp
 8012ab6:	9301      	str	r3, [sp, #4]
 8012ab8:	4642      	mov	r2, r8
 8012aba:	4615      	mov	r5, r2
 8012abc:	3201      	adds	r2, #1
 8012abe:	7828      	ldrb	r0, [r5, #0]
 8012ac0:	f7ff ffaa 	bl	8012a18 <__hexdig_fun>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d1f8      	bne.n	8012aba <__gethex+0x76>
 8012ac8:	4994      	ldr	r1, [pc, #592]	; (8012d1c <__gethex+0x2d8>)
 8012aca:	2201      	movs	r2, #1
 8012acc:	4628      	mov	r0, r5
 8012ace:	f7ff fde4 	bl	801269a <strncmp>
 8012ad2:	b978      	cbnz	r0, 8012af4 <__gethex+0xb0>
 8012ad4:	b946      	cbnz	r6, 8012ae8 <__gethex+0xa4>
 8012ad6:	1c6e      	adds	r6, r5, #1
 8012ad8:	4632      	mov	r2, r6
 8012ada:	4615      	mov	r5, r2
 8012adc:	3201      	adds	r2, #1
 8012ade:	7828      	ldrb	r0, [r5, #0]
 8012ae0:	f7ff ff9a 	bl	8012a18 <__hexdig_fun>
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	d1f8      	bne.n	8012ada <__gethex+0x96>
 8012ae8:	1b73      	subs	r3, r6, r5
 8012aea:	009e      	lsls	r6, r3, #2
 8012aec:	e004      	b.n	8012af8 <__gethex+0xb4>
 8012aee:	2400      	movs	r4, #0
 8012af0:	4626      	mov	r6, r4
 8012af2:	e7e1      	b.n	8012ab8 <__gethex+0x74>
 8012af4:	2e00      	cmp	r6, #0
 8012af6:	d1f7      	bne.n	8012ae8 <__gethex+0xa4>
 8012af8:	782b      	ldrb	r3, [r5, #0]
 8012afa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012afe:	2b50      	cmp	r3, #80	; 0x50
 8012b00:	d13d      	bne.n	8012b7e <__gethex+0x13a>
 8012b02:	786b      	ldrb	r3, [r5, #1]
 8012b04:	2b2b      	cmp	r3, #43	; 0x2b
 8012b06:	d02f      	beq.n	8012b68 <__gethex+0x124>
 8012b08:	2b2d      	cmp	r3, #45	; 0x2d
 8012b0a:	d031      	beq.n	8012b70 <__gethex+0x12c>
 8012b0c:	1c69      	adds	r1, r5, #1
 8012b0e:	f04f 0b00 	mov.w	fp, #0
 8012b12:	7808      	ldrb	r0, [r1, #0]
 8012b14:	f7ff ff80 	bl	8012a18 <__hexdig_fun>
 8012b18:	1e42      	subs	r2, r0, #1
 8012b1a:	b2d2      	uxtb	r2, r2
 8012b1c:	2a18      	cmp	r2, #24
 8012b1e:	d82e      	bhi.n	8012b7e <__gethex+0x13a>
 8012b20:	f1a0 0210 	sub.w	r2, r0, #16
 8012b24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012b28:	f7ff ff76 	bl	8012a18 <__hexdig_fun>
 8012b2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012b30:	fa5f fc8c 	uxtb.w	ip, ip
 8012b34:	f1bc 0f18 	cmp.w	ip, #24
 8012b38:	d91d      	bls.n	8012b76 <__gethex+0x132>
 8012b3a:	f1bb 0f00 	cmp.w	fp, #0
 8012b3e:	d000      	beq.n	8012b42 <__gethex+0xfe>
 8012b40:	4252      	negs	r2, r2
 8012b42:	4416      	add	r6, r2
 8012b44:	f8ca 1000 	str.w	r1, [sl]
 8012b48:	b1dc      	cbz	r4, 8012b82 <__gethex+0x13e>
 8012b4a:	9b01      	ldr	r3, [sp, #4]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	bf14      	ite	ne
 8012b50:	f04f 0800 	movne.w	r8, #0
 8012b54:	f04f 0806 	moveq.w	r8, #6
 8012b58:	4640      	mov	r0, r8
 8012b5a:	b005      	add	sp, #20
 8012b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b60:	4645      	mov	r5, r8
 8012b62:	4626      	mov	r6, r4
 8012b64:	2401      	movs	r4, #1
 8012b66:	e7c7      	b.n	8012af8 <__gethex+0xb4>
 8012b68:	f04f 0b00 	mov.w	fp, #0
 8012b6c:	1ca9      	adds	r1, r5, #2
 8012b6e:	e7d0      	b.n	8012b12 <__gethex+0xce>
 8012b70:	f04f 0b01 	mov.w	fp, #1
 8012b74:	e7fa      	b.n	8012b6c <__gethex+0x128>
 8012b76:	230a      	movs	r3, #10
 8012b78:	fb03 0002 	mla	r0, r3, r2, r0
 8012b7c:	e7d0      	b.n	8012b20 <__gethex+0xdc>
 8012b7e:	4629      	mov	r1, r5
 8012b80:	e7e0      	b.n	8012b44 <__gethex+0x100>
 8012b82:	eba5 0308 	sub.w	r3, r5, r8
 8012b86:	3b01      	subs	r3, #1
 8012b88:	4621      	mov	r1, r4
 8012b8a:	2b07      	cmp	r3, #7
 8012b8c:	dc0a      	bgt.n	8012ba4 <__gethex+0x160>
 8012b8e:	4648      	mov	r0, r9
 8012b90:	f000 fa5a 	bl	8013048 <_Balloc>
 8012b94:	4604      	mov	r4, r0
 8012b96:	b940      	cbnz	r0, 8012baa <__gethex+0x166>
 8012b98:	4b61      	ldr	r3, [pc, #388]	; (8012d20 <__gethex+0x2dc>)
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	21e4      	movs	r1, #228	; 0xe4
 8012b9e:	4861      	ldr	r0, [pc, #388]	; (8012d24 <__gethex+0x2e0>)
 8012ba0:	f7ff fe7e 	bl	80128a0 <__assert_func>
 8012ba4:	3101      	adds	r1, #1
 8012ba6:	105b      	asrs	r3, r3, #1
 8012ba8:	e7ef      	b.n	8012b8a <__gethex+0x146>
 8012baa:	f100 0a14 	add.w	sl, r0, #20
 8012bae:	2300      	movs	r3, #0
 8012bb0:	495a      	ldr	r1, [pc, #360]	; (8012d1c <__gethex+0x2d8>)
 8012bb2:	f8cd a004 	str.w	sl, [sp, #4]
 8012bb6:	469b      	mov	fp, r3
 8012bb8:	45a8      	cmp	r8, r5
 8012bba:	d342      	bcc.n	8012c42 <__gethex+0x1fe>
 8012bbc:	9801      	ldr	r0, [sp, #4]
 8012bbe:	f840 bb04 	str.w	fp, [r0], #4
 8012bc2:	eba0 000a 	sub.w	r0, r0, sl
 8012bc6:	1080      	asrs	r0, r0, #2
 8012bc8:	6120      	str	r0, [r4, #16]
 8012bca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012bce:	4658      	mov	r0, fp
 8012bd0:	f000 fb2c 	bl	801322c <__hi0bits>
 8012bd4:	683d      	ldr	r5, [r7, #0]
 8012bd6:	eba8 0000 	sub.w	r0, r8, r0
 8012bda:	42a8      	cmp	r0, r5
 8012bdc:	dd59      	ble.n	8012c92 <__gethex+0x24e>
 8012bde:	eba0 0805 	sub.w	r8, r0, r5
 8012be2:	4641      	mov	r1, r8
 8012be4:	4620      	mov	r0, r4
 8012be6:	f000 feb8 	bl	801395a <__any_on>
 8012bea:	4683      	mov	fp, r0
 8012bec:	b1b8      	cbz	r0, 8012c1e <__gethex+0x1da>
 8012bee:	f108 33ff 	add.w	r3, r8, #4294967295
 8012bf2:	1159      	asrs	r1, r3, #5
 8012bf4:	f003 021f 	and.w	r2, r3, #31
 8012bf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012bfc:	f04f 0b01 	mov.w	fp, #1
 8012c00:	fa0b f202 	lsl.w	r2, fp, r2
 8012c04:	420a      	tst	r2, r1
 8012c06:	d00a      	beq.n	8012c1e <__gethex+0x1da>
 8012c08:	455b      	cmp	r3, fp
 8012c0a:	dd06      	ble.n	8012c1a <__gethex+0x1d6>
 8012c0c:	f1a8 0102 	sub.w	r1, r8, #2
 8012c10:	4620      	mov	r0, r4
 8012c12:	f000 fea2 	bl	801395a <__any_on>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	d138      	bne.n	8012c8c <__gethex+0x248>
 8012c1a:	f04f 0b02 	mov.w	fp, #2
 8012c1e:	4641      	mov	r1, r8
 8012c20:	4620      	mov	r0, r4
 8012c22:	f7ff fea7 	bl	8012974 <rshift>
 8012c26:	4446      	add	r6, r8
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	42b3      	cmp	r3, r6
 8012c2c:	da41      	bge.n	8012cb2 <__gethex+0x26e>
 8012c2e:	4621      	mov	r1, r4
 8012c30:	4648      	mov	r0, r9
 8012c32:	f000 fa49 	bl	80130c8 <_Bfree>
 8012c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c38:	2300      	movs	r3, #0
 8012c3a:	6013      	str	r3, [r2, #0]
 8012c3c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012c40:	e78a      	b.n	8012b58 <__gethex+0x114>
 8012c42:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012c46:	2a2e      	cmp	r2, #46	; 0x2e
 8012c48:	d014      	beq.n	8012c74 <__gethex+0x230>
 8012c4a:	2b20      	cmp	r3, #32
 8012c4c:	d106      	bne.n	8012c5c <__gethex+0x218>
 8012c4e:	9b01      	ldr	r3, [sp, #4]
 8012c50:	f843 bb04 	str.w	fp, [r3], #4
 8012c54:	f04f 0b00 	mov.w	fp, #0
 8012c58:	9301      	str	r3, [sp, #4]
 8012c5a:	465b      	mov	r3, fp
 8012c5c:	7828      	ldrb	r0, [r5, #0]
 8012c5e:	9303      	str	r3, [sp, #12]
 8012c60:	f7ff feda 	bl	8012a18 <__hexdig_fun>
 8012c64:	9b03      	ldr	r3, [sp, #12]
 8012c66:	f000 000f 	and.w	r0, r0, #15
 8012c6a:	4098      	lsls	r0, r3
 8012c6c:	ea4b 0b00 	orr.w	fp, fp, r0
 8012c70:	3304      	adds	r3, #4
 8012c72:	e7a1      	b.n	8012bb8 <__gethex+0x174>
 8012c74:	45a8      	cmp	r8, r5
 8012c76:	d8e8      	bhi.n	8012c4a <__gethex+0x206>
 8012c78:	2201      	movs	r2, #1
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	9303      	str	r3, [sp, #12]
 8012c7e:	f7ff fd0c 	bl	801269a <strncmp>
 8012c82:	4926      	ldr	r1, [pc, #152]	; (8012d1c <__gethex+0x2d8>)
 8012c84:	9b03      	ldr	r3, [sp, #12]
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d1df      	bne.n	8012c4a <__gethex+0x206>
 8012c8a:	e795      	b.n	8012bb8 <__gethex+0x174>
 8012c8c:	f04f 0b03 	mov.w	fp, #3
 8012c90:	e7c5      	b.n	8012c1e <__gethex+0x1da>
 8012c92:	da0b      	bge.n	8012cac <__gethex+0x268>
 8012c94:	eba5 0800 	sub.w	r8, r5, r0
 8012c98:	4621      	mov	r1, r4
 8012c9a:	4642      	mov	r2, r8
 8012c9c:	4648      	mov	r0, r9
 8012c9e:	f000 fc2d 	bl	80134fc <__lshift>
 8012ca2:	eba6 0608 	sub.w	r6, r6, r8
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	f100 0a14 	add.w	sl, r0, #20
 8012cac:	f04f 0b00 	mov.w	fp, #0
 8012cb0:	e7ba      	b.n	8012c28 <__gethex+0x1e4>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	42b3      	cmp	r3, r6
 8012cb6:	dd73      	ble.n	8012da0 <__gethex+0x35c>
 8012cb8:	1b9e      	subs	r6, r3, r6
 8012cba:	42b5      	cmp	r5, r6
 8012cbc:	dc34      	bgt.n	8012d28 <__gethex+0x2e4>
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2b02      	cmp	r3, #2
 8012cc2:	d023      	beq.n	8012d0c <__gethex+0x2c8>
 8012cc4:	2b03      	cmp	r3, #3
 8012cc6:	d025      	beq.n	8012d14 <__gethex+0x2d0>
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d115      	bne.n	8012cf8 <__gethex+0x2b4>
 8012ccc:	42b5      	cmp	r5, r6
 8012cce:	d113      	bne.n	8012cf8 <__gethex+0x2b4>
 8012cd0:	2d01      	cmp	r5, #1
 8012cd2:	d10b      	bne.n	8012cec <__gethex+0x2a8>
 8012cd4:	9a02      	ldr	r2, [sp, #8]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6013      	str	r3, [r2, #0]
 8012cda:	2301      	movs	r3, #1
 8012cdc:	6123      	str	r3, [r4, #16]
 8012cde:	f8ca 3000 	str.w	r3, [sl]
 8012ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ce4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012ce8:	601c      	str	r4, [r3, #0]
 8012cea:	e735      	b.n	8012b58 <__gethex+0x114>
 8012cec:	1e69      	subs	r1, r5, #1
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f000 fe33 	bl	801395a <__any_on>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d1ed      	bne.n	8012cd4 <__gethex+0x290>
 8012cf8:	4621      	mov	r1, r4
 8012cfa:	4648      	mov	r0, r9
 8012cfc:	f000 f9e4 	bl	80130c8 <_Bfree>
 8012d00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d02:	2300      	movs	r3, #0
 8012d04:	6013      	str	r3, [r2, #0]
 8012d06:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012d0a:	e725      	b.n	8012b58 <__gethex+0x114>
 8012d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d1f2      	bne.n	8012cf8 <__gethex+0x2b4>
 8012d12:	e7df      	b.n	8012cd4 <__gethex+0x290>
 8012d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d1dc      	bne.n	8012cd4 <__gethex+0x290>
 8012d1a:	e7ed      	b.n	8012cf8 <__gethex+0x2b4>
 8012d1c:	08017a7f 	.word	0x08017a7f
 8012d20:	08017c25 	.word	0x08017c25
 8012d24:	08017c36 	.word	0x08017c36
 8012d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8012d2c:	f1bb 0f00 	cmp.w	fp, #0
 8012d30:	d133      	bne.n	8012d9a <__gethex+0x356>
 8012d32:	f1b8 0f00 	cmp.w	r8, #0
 8012d36:	d004      	beq.n	8012d42 <__gethex+0x2fe>
 8012d38:	4641      	mov	r1, r8
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f000 fe0d 	bl	801395a <__any_on>
 8012d40:	4683      	mov	fp, r0
 8012d42:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012d46:	2301      	movs	r3, #1
 8012d48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012d4c:	f008 081f 	and.w	r8, r8, #31
 8012d50:	fa03 f308 	lsl.w	r3, r3, r8
 8012d54:	4213      	tst	r3, r2
 8012d56:	4631      	mov	r1, r6
 8012d58:	4620      	mov	r0, r4
 8012d5a:	bf18      	it	ne
 8012d5c:	f04b 0b02 	orrne.w	fp, fp, #2
 8012d60:	1bad      	subs	r5, r5, r6
 8012d62:	f7ff fe07 	bl	8012974 <rshift>
 8012d66:	687e      	ldr	r6, [r7, #4]
 8012d68:	f04f 0802 	mov.w	r8, #2
 8012d6c:	f1bb 0f00 	cmp.w	fp, #0
 8012d70:	d04a      	beq.n	8012e08 <__gethex+0x3c4>
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d016      	beq.n	8012da6 <__gethex+0x362>
 8012d78:	2b03      	cmp	r3, #3
 8012d7a:	d018      	beq.n	8012dae <__gethex+0x36a>
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d109      	bne.n	8012d94 <__gethex+0x350>
 8012d80:	f01b 0f02 	tst.w	fp, #2
 8012d84:	d006      	beq.n	8012d94 <__gethex+0x350>
 8012d86:	f8da 3000 	ldr.w	r3, [sl]
 8012d8a:	ea4b 0b03 	orr.w	fp, fp, r3
 8012d8e:	f01b 0f01 	tst.w	fp, #1
 8012d92:	d10f      	bne.n	8012db4 <__gethex+0x370>
 8012d94:	f048 0810 	orr.w	r8, r8, #16
 8012d98:	e036      	b.n	8012e08 <__gethex+0x3c4>
 8012d9a:	f04f 0b01 	mov.w	fp, #1
 8012d9e:	e7d0      	b.n	8012d42 <__gethex+0x2fe>
 8012da0:	f04f 0801 	mov.w	r8, #1
 8012da4:	e7e2      	b.n	8012d6c <__gethex+0x328>
 8012da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012da8:	f1c3 0301 	rsb	r3, r3, #1
 8012dac:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d0ef      	beq.n	8012d94 <__gethex+0x350>
 8012db4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012db8:	f104 0214 	add.w	r2, r4, #20
 8012dbc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012dc0:	9301      	str	r3, [sp, #4]
 8012dc2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	4694      	mov	ip, r2
 8012dca:	f852 1b04 	ldr.w	r1, [r2], #4
 8012dce:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012dd2:	d01e      	beq.n	8012e12 <__gethex+0x3ce>
 8012dd4:	3101      	adds	r1, #1
 8012dd6:	f8cc 1000 	str.w	r1, [ip]
 8012dda:	f1b8 0f02 	cmp.w	r8, #2
 8012dde:	f104 0214 	add.w	r2, r4, #20
 8012de2:	d13d      	bne.n	8012e60 <__gethex+0x41c>
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	3b01      	subs	r3, #1
 8012de8:	42ab      	cmp	r3, r5
 8012dea:	d10b      	bne.n	8012e04 <__gethex+0x3c0>
 8012dec:	1169      	asrs	r1, r5, #5
 8012dee:	2301      	movs	r3, #1
 8012df0:	f005 051f 	and.w	r5, r5, #31
 8012df4:	fa03 f505 	lsl.w	r5, r3, r5
 8012df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012dfc:	421d      	tst	r5, r3
 8012dfe:	bf18      	it	ne
 8012e00:	f04f 0801 	movne.w	r8, #1
 8012e04:	f048 0820 	orr.w	r8, r8, #32
 8012e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e0a:	601c      	str	r4, [r3, #0]
 8012e0c:	9b02      	ldr	r3, [sp, #8]
 8012e0e:	601e      	str	r6, [r3, #0]
 8012e10:	e6a2      	b.n	8012b58 <__gethex+0x114>
 8012e12:	4290      	cmp	r0, r2
 8012e14:	f842 3c04 	str.w	r3, [r2, #-4]
 8012e18:	d8d6      	bhi.n	8012dc8 <__gethex+0x384>
 8012e1a:	68a2      	ldr	r2, [r4, #8]
 8012e1c:	4593      	cmp	fp, r2
 8012e1e:	db17      	blt.n	8012e50 <__gethex+0x40c>
 8012e20:	6861      	ldr	r1, [r4, #4]
 8012e22:	4648      	mov	r0, r9
 8012e24:	3101      	adds	r1, #1
 8012e26:	f000 f90f 	bl	8013048 <_Balloc>
 8012e2a:	4682      	mov	sl, r0
 8012e2c:	b918      	cbnz	r0, 8012e36 <__gethex+0x3f2>
 8012e2e:	4b1b      	ldr	r3, [pc, #108]	; (8012e9c <__gethex+0x458>)
 8012e30:	4602      	mov	r2, r0
 8012e32:	2184      	movs	r1, #132	; 0x84
 8012e34:	e6b3      	b.n	8012b9e <__gethex+0x15a>
 8012e36:	6922      	ldr	r2, [r4, #16]
 8012e38:	3202      	adds	r2, #2
 8012e3a:	f104 010c 	add.w	r1, r4, #12
 8012e3e:	0092      	lsls	r2, r2, #2
 8012e40:	300c      	adds	r0, #12
 8012e42:	f7ff fd16 	bl	8012872 <memcpy>
 8012e46:	4621      	mov	r1, r4
 8012e48:	4648      	mov	r0, r9
 8012e4a:	f000 f93d 	bl	80130c8 <_Bfree>
 8012e4e:	4654      	mov	r4, sl
 8012e50:	6922      	ldr	r2, [r4, #16]
 8012e52:	1c51      	adds	r1, r2, #1
 8012e54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012e58:	6121      	str	r1, [r4, #16]
 8012e5a:	2101      	movs	r1, #1
 8012e5c:	6151      	str	r1, [r2, #20]
 8012e5e:	e7bc      	b.n	8012dda <__gethex+0x396>
 8012e60:	6921      	ldr	r1, [r4, #16]
 8012e62:	4559      	cmp	r1, fp
 8012e64:	dd0b      	ble.n	8012e7e <__gethex+0x43a>
 8012e66:	2101      	movs	r1, #1
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f7ff fd83 	bl	8012974 <rshift>
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	3601      	adds	r6, #1
 8012e72:	42b3      	cmp	r3, r6
 8012e74:	f6ff aedb 	blt.w	8012c2e <__gethex+0x1ea>
 8012e78:	f04f 0801 	mov.w	r8, #1
 8012e7c:	e7c2      	b.n	8012e04 <__gethex+0x3c0>
 8012e7e:	f015 051f 	ands.w	r5, r5, #31
 8012e82:	d0f9      	beq.n	8012e78 <__gethex+0x434>
 8012e84:	9b01      	ldr	r3, [sp, #4]
 8012e86:	441a      	add	r2, r3
 8012e88:	f1c5 0520 	rsb	r5, r5, #32
 8012e8c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012e90:	f000 f9cc 	bl	801322c <__hi0bits>
 8012e94:	42a8      	cmp	r0, r5
 8012e96:	dbe6      	blt.n	8012e66 <__gethex+0x422>
 8012e98:	e7ee      	b.n	8012e78 <__gethex+0x434>
 8012e9a:	bf00      	nop
 8012e9c:	08017c25 	.word	0x08017c25

08012ea0 <L_shift>:
 8012ea0:	f1c2 0208 	rsb	r2, r2, #8
 8012ea4:	0092      	lsls	r2, r2, #2
 8012ea6:	b570      	push	{r4, r5, r6, lr}
 8012ea8:	f1c2 0620 	rsb	r6, r2, #32
 8012eac:	6843      	ldr	r3, [r0, #4]
 8012eae:	6804      	ldr	r4, [r0, #0]
 8012eb0:	fa03 f506 	lsl.w	r5, r3, r6
 8012eb4:	432c      	orrs	r4, r5
 8012eb6:	40d3      	lsrs	r3, r2
 8012eb8:	6004      	str	r4, [r0, #0]
 8012eba:	f840 3f04 	str.w	r3, [r0, #4]!
 8012ebe:	4288      	cmp	r0, r1
 8012ec0:	d3f4      	bcc.n	8012eac <L_shift+0xc>
 8012ec2:	bd70      	pop	{r4, r5, r6, pc}

08012ec4 <__match>:
 8012ec4:	b530      	push	{r4, r5, lr}
 8012ec6:	6803      	ldr	r3, [r0, #0]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ece:	b914      	cbnz	r4, 8012ed6 <__match+0x12>
 8012ed0:	6003      	str	r3, [r0, #0]
 8012ed2:	2001      	movs	r0, #1
 8012ed4:	bd30      	pop	{r4, r5, pc}
 8012ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012ede:	2d19      	cmp	r5, #25
 8012ee0:	bf98      	it	ls
 8012ee2:	3220      	addls	r2, #32
 8012ee4:	42a2      	cmp	r2, r4
 8012ee6:	d0f0      	beq.n	8012eca <__match+0x6>
 8012ee8:	2000      	movs	r0, #0
 8012eea:	e7f3      	b.n	8012ed4 <__match+0x10>

08012eec <__hexnan>:
 8012eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef0:	680b      	ldr	r3, [r1, #0]
 8012ef2:	6801      	ldr	r1, [r0, #0]
 8012ef4:	115e      	asrs	r6, r3, #5
 8012ef6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012efa:	f013 031f 	ands.w	r3, r3, #31
 8012efe:	b087      	sub	sp, #28
 8012f00:	bf18      	it	ne
 8012f02:	3604      	addne	r6, #4
 8012f04:	2500      	movs	r5, #0
 8012f06:	1f37      	subs	r7, r6, #4
 8012f08:	4682      	mov	sl, r0
 8012f0a:	4690      	mov	r8, r2
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012f12:	46b9      	mov	r9, r7
 8012f14:	463c      	mov	r4, r7
 8012f16:	9502      	str	r5, [sp, #8]
 8012f18:	46ab      	mov	fp, r5
 8012f1a:	784a      	ldrb	r2, [r1, #1]
 8012f1c:	1c4b      	adds	r3, r1, #1
 8012f1e:	9303      	str	r3, [sp, #12]
 8012f20:	b342      	cbz	r2, 8012f74 <__hexnan+0x88>
 8012f22:	4610      	mov	r0, r2
 8012f24:	9105      	str	r1, [sp, #20]
 8012f26:	9204      	str	r2, [sp, #16]
 8012f28:	f7ff fd76 	bl	8012a18 <__hexdig_fun>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d14f      	bne.n	8012fd0 <__hexnan+0xe4>
 8012f30:	9a04      	ldr	r2, [sp, #16]
 8012f32:	9905      	ldr	r1, [sp, #20]
 8012f34:	2a20      	cmp	r2, #32
 8012f36:	d818      	bhi.n	8012f6a <__hexnan+0x7e>
 8012f38:	9b02      	ldr	r3, [sp, #8]
 8012f3a:	459b      	cmp	fp, r3
 8012f3c:	dd13      	ble.n	8012f66 <__hexnan+0x7a>
 8012f3e:	454c      	cmp	r4, r9
 8012f40:	d206      	bcs.n	8012f50 <__hexnan+0x64>
 8012f42:	2d07      	cmp	r5, #7
 8012f44:	dc04      	bgt.n	8012f50 <__hexnan+0x64>
 8012f46:	462a      	mov	r2, r5
 8012f48:	4649      	mov	r1, r9
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f7ff ffa8 	bl	8012ea0 <L_shift>
 8012f50:	4544      	cmp	r4, r8
 8012f52:	d950      	bls.n	8012ff6 <__hexnan+0x10a>
 8012f54:	2300      	movs	r3, #0
 8012f56:	f1a4 0904 	sub.w	r9, r4, #4
 8012f5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f5e:	f8cd b008 	str.w	fp, [sp, #8]
 8012f62:	464c      	mov	r4, r9
 8012f64:	461d      	mov	r5, r3
 8012f66:	9903      	ldr	r1, [sp, #12]
 8012f68:	e7d7      	b.n	8012f1a <__hexnan+0x2e>
 8012f6a:	2a29      	cmp	r2, #41	; 0x29
 8012f6c:	d155      	bne.n	801301a <__hexnan+0x12e>
 8012f6e:	3102      	adds	r1, #2
 8012f70:	f8ca 1000 	str.w	r1, [sl]
 8012f74:	f1bb 0f00 	cmp.w	fp, #0
 8012f78:	d04f      	beq.n	801301a <__hexnan+0x12e>
 8012f7a:	454c      	cmp	r4, r9
 8012f7c:	d206      	bcs.n	8012f8c <__hexnan+0xa0>
 8012f7e:	2d07      	cmp	r5, #7
 8012f80:	dc04      	bgt.n	8012f8c <__hexnan+0xa0>
 8012f82:	462a      	mov	r2, r5
 8012f84:	4649      	mov	r1, r9
 8012f86:	4620      	mov	r0, r4
 8012f88:	f7ff ff8a 	bl	8012ea0 <L_shift>
 8012f8c:	4544      	cmp	r4, r8
 8012f8e:	d934      	bls.n	8012ffa <__hexnan+0x10e>
 8012f90:	f1a8 0204 	sub.w	r2, r8, #4
 8012f94:	4623      	mov	r3, r4
 8012f96:	f853 1b04 	ldr.w	r1, [r3], #4
 8012f9a:	f842 1f04 	str.w	r1, [r2, #4]!
 8012f9e:	429f      	cmp	r7, r3
 8012fa0:	d2f9      	bcs.n	8012f96 <__hexnan+0xaa>
 8012fa2:	1b3b      	subs	r3, r7, r4
 8012fa4:	f023 0303 	bic.w	r3, r3, #3
 8012fa8:	3304      	adds	r3, #4
 8012faa:	3e03      	subs	r6, #3
 8012fac:	3401      	adds	r4, #1
 8012fae:	42a6      	cmp	r6, r4
 8012fb0:	bf38      	it	cc
 8012fb2:	2304      	movcc	r3, #4
 8012fb4:	4443      	add	r3, r8
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f843 2b04 	str.w	r2, [r3], #4
 8012fbc:	429f      	cmp	r7, r3
 8012fbe:	d2fb      	bcs.n	8012fb8 <__hexnan+0xcc>
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	b91b      	cbnz	r3, 8012fcc <__hexnan+0xe0>
 8012fc4:	4547      	cmp	r7, r8
 8012fc6:	d126      	bne.n	8013016 <__hexnan+0x12a>
 8012fc8:	2301      	movs	r3, #1
 8012fca:	603b      	str	r3, [r7, #0]
 8012fcc:	2005      	movs	r0, #5
 8012fce:	e025      	b.n	801301c <__hexnan+0x130>
 8012fd0:	3501      	adds	r5, #1
 8012fd2:	2d08      	cmp	r5, #8
 8012fd4:	f10b 0b01 	add.w	fp, fp, #1
 8012fd8:	dd06      	ble.n	8012fe8 <__hexnan+0xfc>
 8012fda:	4544      	cmp	r4, r8
 8012fdc:	d9c3      	bls.n	8012f66 <__hexnan+0x7a>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fe4:	2501      	movs	r5, #1
 8012fe6:	3c04      	subs	r4, #4
 8012fe8:	6822      	ldr	r2, [r4, #0]
 8012fea:	f000 000f 	and.w	r0, r0, #15
 8012fee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012ff2:	6020      	str	r0, [r4, #0]
 8012ff4:	e7b7      	b.n	8012f66 <__hexnan+0x7a>
 8012ff6:	2508      	movs	r5, #8
 8012ff8:	e7b5      	b.n	8012f66 <__hexnan+0x7a>
 8012ffa:	9b01      	ldr	r3, [sp, #4]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d0df      	beq.n	8012fc0 <__hexnan+0xd4>
 8013000:	f1c3 0320 	rsb	r3, r3, #32
 8013004:	f04f 32ff 	mov.w	r2, #4294967295
 8013008:	40da      	lsrs	r2, r3
 801300a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801300e:	4013      	ands	r3, r2
 8013010:	f846 3c04 	str.w	r3, [r6, #-4]
 8013014:	e7d4      	b.n	8012fc0 <__hexnan+0xd4>
 8013016:	3f04      	subs	r7, #4
 8013018:	e7d2      	b.n	8012fc0 <__hexnan+0xd4>
 801301a:	2004      	movs	r0, #4
 801301c:	b007      	add	sp, #28
 801301e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013022 <__ascii_mbtowc>:
 8013022:	b082      	sub	sp, #8
 8013024:	b901      	cbnz	r1, 8013028 <__ascii_mbtowc+0x6>
 8013026:	a901      	add	r1, sp, #4
 8013028:	b142      	cbz	r2, 801303c <__ascii_mbtowc+0x1a>
 801302a:	b14b      	cbz	r3, 8013040 <__ascii_mbtowc+0x1e>
 801302c:	7813      	ldrb	r3, [r2, #0]
 801302e:	600b      	str	r3, [r1, #0]
 8013030:	7812      	ldrb	r2, [r2, #0]
 8013032:	1e10      	subs	r0, r2, #0
 8013034:	bf18      	it	ne
 8013036:	2001      	movne	r0, #1
 8013038:	b002      	add	sp, #8
 801303a:	4770      	bx	lr
 801303c:	4610      	mov	r0, r2
 801303e:	e7fb      	b.n	8013038 <__ascii_mbtowc+0x16>
 8013040:	f06f 0001 	mvn.w	r0, #1
 8013044:	e7f8      	b.n	8013038 <__ascii_mbtowc+0x16>
	...

08013048 <_Balloc>:
 8013048:	b570      	push	{r4, r5, r6, lr}
 801304a:	69c6      	ldr	r6, [r0, #28]
 801304c:	4604      	mov	r4, r0
 801304e:	460d      	mov	r5, r1
 8013050:	b976      	cbnz	r6, 8013070 <_Balloc+0x28>
 8013052:	2010      	movs	r0, #16
 8013054:	f7fe f9fc 	bl	8011450 <malloc>
 8013058:	4602      	mov	r2, r0
 801305a:	61e0      	str	r0, [r4, #28]
 801305c:	b920      	cbnz	r0, 8013068 <_Balloc+0x20>
 801305e:	4b18      	ldr	r3, [pc, #96]	; (80130c0 <_Balloc+0x78>)
 8013060:	4818      	ldr	r0, [pc, #96]	; (80130c4 <_Balloc+0x7c>)
 8013062:	216b      	movs	r1, #107	; 0x6b
 8013064:	f7ff fc1c 	bl	80128a0 <__assert_func>
 8013068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801306c:	6006      	str	r6, [r0, #0]
 801306e:	60c6      	str	r6, [r0, #12]
 8013070:	69e6      	ldr	r6, [r4, #28]
 8013072:	68f3      	ldr	r3, [r6, #12]
 8013074:	b183      	cbz	r3, 8013098 <_Balloc+0x50>
 8013076:	69e3      	ldr	r3, [r4, #28]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801307e:	b9b8      	cbnz	r0, 80130b0 <_Balloc+0x68>
 8013080:	2101      	movs	r1, #1
 8013082:	fa01 f605 	lsl.w	r6, r1, r5
 8013086:	1d72      	adds	r2, r6, #5
 8013088:	0092      	lsls	r2, r2, #2
 801308a:	4620      	mov	r0, r4
 801308c:	f001 fdb7 	bl	8014bfe <_calloc_r>
 8013090:	b160      	cbz	r0, 80130ac <_Balloc+0x64>
 8013092:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013096:	e00e      	b.n	80130b6 <_Balloc+0x6e>
 8013098:	2221      	movs	r2, #33	; 0x21
 801309a:	2104      	movs	r1, #4
 801309c:	4620      	mov	r0, r4
 801309e:	f001 fdae 	bl	8014bfe <_calloc_r>
 80130a2:	69e3      	ldr	r3, [r4, #28]
 80130a4:	60f0      	str	r0, [r6, #12]
 80130a6:	68db      	ldr	r3, [r3, #12]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d1e4      	bne.n	8013076 <_Balloc+0x2e>
 80130ac:	2000      	movs	r0, #0
 80130ae:	bd70      	pop	{r4, r5, r6, pc}
 80130b0:	6802      	ldr	r2, [r0, #0]
 80130b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80130b6:	2300      	movs	r3, #0
 80130b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80130bc:	e7f7      	b.n	80130ae <_Balloc+0x66>
 80130be:	bf00      	nop
 80130c0:	08017a10 	.word	0x08017a10
 80130c4:	08017c96 	.word	0x08017c96

080130c8 <_Bfree>:
 80130c8:	b570      	push	{r4, r5, r6, lr}
 80130ca:	69c6      	ldr	r6, [r0, #28]
 80130cc:	4605      	mov	r5, r0
 80130ce:	460c      	mov	r4, r1
 80130d0:	b976      	cbnz	r6, 80130f0 <_Bfree+0x28>
 80130d2:	2010      	movs	r0, #16
 80130d4:	f7fe f9bc 	bl	8011450 <malloc>
 80130d8:	4602      	mov	r2, r0
 80130da:	61e8      	str	r0, [r5, #28]
 80130dc:	b920      	cbnz	r0, 80130e8 <_Bfree+0x20>
 80130de:	4b09      	ldr	r3, [pc, #36]	; (8013104 <_Bfree+0x3c>)
 80130e0:	4809      	ldr	r0, [pc, #36]	; (8013108 <_Bfree+0x40>)
 80130e2:	218f      	movs	r1, #143	; 0x8f
 80130e4:	f7ff fbdc 	bl	80128a0 <__assert_func>
 80130e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130ec:	6006      	str	r6, [r0, #0]
 80130ee:	60c6      	str	r6, [r0, #12]
 80130f0:	b13c      	cbz	r4, 8013102 <_Bfree+0x3a>
 80130f2:	69eb      	ldr	r3, [r5, #28]
 80130f4:	6862      	ldr	r2, [r4, #4]
 80130f6:	68db      	ldr	r3, [r3, #12]
 80130f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80130fc:	6021      	str	r1, [r4, #0]
 80130fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013102:	bd70      	pop	{r4, r5, r6, pc}
 8013104:	08017a10 	.word	0x08017a10
 8013108:	08017c96 	.word	0x08017c96

0801310c <__multadd>:
 801310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013110:	690d      	ldr	r5, [r1, #16]
 8013112:	4607      	mov	r7, r0
 8013114:	460c      	mov	r4, r1
 8013116:	461e      	mov	r6, r3
 8013118:	f101 0c14 	add.w	ip, r1, #20
 801311c:	2000      	movs	r0, #0
 801311e:	f8dc 3000 	ldr.w	r3, [ip]
 8013122:	b299      	uxth	r1, r3
 8013124:	fb02 6101 	mla	r1, r2, r1, r6
 8013128:	0c1e      	lsrs	r6, r3, #16
 801312a:	0c0b      	lsrs	r3, r1, #16
 801312c:	fb02 3306 	mla	r3, r2, r6, r3
 8013130:	b289      	uxth	r1, r1
 8013132:	3001      	adds	r0, #1
 8013134:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013138:	4285      	cmp	r5, r0
 801313a:	f84c 1b04 	str.w	r1, [ip], #4
 801313e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013142:	dcec      	bgt.n	801311e <__multadd+0x12>
 8013144:	b30e      	cbz	r6, 801318a <__multadd+0x7e>
 8013146:	68a3      	ldr	r3, [r4, #8]
 8013148:	42ab      	cmp	r3, r5
 801314a:	dc19      	bgt.n	8013180 <__multadd+0x74>
 801314c:	6861      	ldr	r1, [r4, #4]
 801314e:	4638      	mov	r0, r7
 8013150:	3101      	adds	r1, #1
 8013152:	f7ff ff79 	bl	8013048 <_Balloc>
 8013156:	4680      	mov	r8, r0
 8013158:	b928      	cbnz	r0, 8013166 <__multadd+0x5a>
 801315a:	4602      	mov	r2, r0
 801315c:	4b0c      	ldr	r3, [pc, #48]	; (8013190 <__multadd+0x84>)
 801315e:	480d      	ldr	r0, [pc, #52]	; (8013194 <__multadd+0x88>)
 8013160:	21ba      	movs	r1, #186	; 0xba
 8013162:	f7ff fb9d 	bl	80128a0 <__assert_func>
 8013166:	6922      	ldr	r2, [r4, #16]
 8013168:	3202      	adds	r2, #2
 801316a:	f104 010c 	add.w	r1, r4, #12
 801316e:	0092      	lsls	r2, r2, #2
 8013170:	300c      	adds	r0, #12
 8013172:	f7ff fb7e 	bl	8012872 <memcpy>
 8013176:	4621      	mov	r1, r4
 8013178:	4638      	mov	r0, r7
 801317a:	f7ff ffa5 	bl	80130c8 <_Bfree>
 801317e:	4644      	mov	r4, r8
 8013180:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013184:	3501      	adds	r5, #1
 8013186:	615e      	str	r6, [r3, #20]
 8013188:	6125      	str	r5, [r4, #16]
 801318a:	4620      	mov	r0, r4
 801318c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013190:	08017c25 	.word	0x08017c25
 8013194:	08017c96 	.word	0x08017c96

08013198 <__s2b>:
 8013198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801319c:	460c      	mov	r4, r1
 801319e:	4615      	mov	r5, r2
 80131a0:	461f      	mov	r7, r3
 80131a2:	2209      	movs	r2, #9
 80131a4:	3308      	adds	r3, #8
 80131a6:	4606      	mov	r6, r0
 80131a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80131ac:	2100      	movs	r1, #0
 80131ae:	2201      	movs	r2, #1
 80131b0:	429a      	cmp	r2, r3
 80131b2:	db09      	blt.n	80131c8 <__s2b+0x30>
 80131b4:	4630      	mov	r0, r6
 80131b6:	f7ff ff47 	bl	8013048 <_Balloc>
 80131ba:	b940      	cbnz	r0, 80131ce <__s2b+0x36>
 80131bc:	4602      	mov	r2, r0
 80131be:	4b19      	ldr	r3, [pc, #100]	; (8013224 <__s2b+0x8c>)
 80131c0:	4819      	ldr	r0, [pc, #100]	; (8013228 <__s2b+0x90>)
 80131c2:	21d3      	movs	r1, #211	; 0xd3
 80131c4:	f7ff fb6c 	bl	80128a0 <__assert_func>
 80131c8:	0052      	lsls	r2, r2, #1
 80131ca:	3101      	adds	r1, #1
 80131cc:	e7f0      	b.n	80131b0 <__s2b+0x18>
 80131ce:	9b08      	ldr	r3, [sp, #32]
 80131d0:	6143      	str	r3, [r0, #20]
 80131d2:	2d09      	cmp	r5, #9
 80131d4:	f04f 0301 	mov.w	r3, #1
 80131d8:	6103      	str	r3, [r0, #16]
 80131da:	dd16      	ble.n	801320a <__s2b+0x72>
 80131dc:	f104 0909 	add.w	r9, r4, #9
 80131e0:	46c8      	mov	r8, r9
 80131e2:	442c      	add	r4, r5
 80131e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80131e8:	4601      	mov	r1, r0
 80131ea:	3b30      	subs	r3, #48	; 0x30
 80131ec:	220a      	movs	r2, #10
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7ff ff8c 	bl	801310c <__multadd>
 80131f4:	45a0      	cmp	r8, r4
 80131f6:	d1f5      	bne.n	80131e4 <__s2b+0x4c>
 80131f8:	f1a5 0408 	sub.w	r4, r5, #8
 80131fc:	444c      	add	r4, r9
 80131fe:	1b2d      	subs	r5, r5, r4
 8013200:	1963      	adds	r3, r4, r5
 8013202:	42bb      	cmp	r3, r7
 8013204:	db04      	blt.n	8013210 <__s2b+0x78>
 8013206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801320a:	340a      	adds	r4, #10
 801320c:	2509      	movs	r5, #9
 801320e:	e7f6      	b.n	80131fe <__s2b+0x66>
 8013210:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013214:	4601      	mov	r1, r0
 8013216:	3b30      	subs	r3, #48	; 0x30
 8013218:	220a      	movs	r2, #10
 801321a:	4630      	mov	r0, r6
 801321c:	f7ff ff76 	bl	801310c <__multadd>
 8013220:	e7ee      	b.n	8013200 <__s2b+0x68>
 8013222:	bf00      	nop
 8013224:	08017c25 	.word	0x08017c25
 8013228:	08017c96 	.word	0x08017c96

0801322c <__hi0bits>:
 801322c:	0c03      	lsrs	r3, r0, #16
 801322e:	041b      	lsls	r3, r3, #16
 8013230:	b9d3      	cbnz	r3, 8013268 <__hi0bits+0x3c>
 8013232:	0400      	lsls	r0, r0, #16
 8013234:	2310      	movs	r3, #16
 8013236:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801323a:	bf04      	itt	eq
 801323c:	0200      	lsleq	r0, r0, #8
 801323e:	3308      	addeq	r3, #8
 8013240:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013244:	bf04      	itt	eq
 8013246:	0100      	lsleq	r0, r0, #4
 8013248:	3304      	addeq	r3, #4
 801324a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801324e:	bf04      	itt	eq
 8013250:	0080      	lsleq	r0, r0, #2
 8013252:	3302      	addeq	r3, #2
 8013254:	2800      	cmp	r0, #0
 8013256:	db05      	blt.n	8013264 <__hi0bits+0x38>
 8013258:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801325c:	f103 0301 	add.w	r3, r3, #1
 8013260:	bf08      	it	eq
 8013262:	2320      	moveq	r3, #32
 8013264:	4618      	mov	r0, r3
 8013266:	4770      	bx	lr
 8013268:	2300      	movs	r3, #0
 801326a:	e7e4      	b.n	8013236 <__hi0bits+0xa>

0801326c <__lo0bits>:
 801326c:	6803      	ldr	r3, [r0, #0]
 801326e:	f013 0207 	ands.w	r2, r3, #7
 8013272:	d00c      	beq.n	801328e <__lo0bits+0x22>
 8013274:	07d9      	lsls	r1, r3, #31
 8013276:	d422      	bmi.n	80132be <__lo0bits+0x52>
 8013278:	079a      	lsls	r2, r3, #30
 801327a:	bf49      	itett	mi
 801327c:	085b      	lsrmi	r3, r3, #1
 801327e:	089b      	lsrpl	r3, r3, #2
 8013280:	6003      	strmi	r3, [r0, #0]
 8013282:	2201      	movmi	r2, #1
 8013284:	bf5c      	itt	pl
 8013286:	6003      	strpl	r3, [r0, #0]
 8013288:	2202      	movpl	r2, #2
 801328a:	4610      	mov	r0, r2
 801328c:	4770      	bx	lr
 801328e:	b299      	uxth	r1, r3
 8013290:	b909      	cbnz	r1, 8013296 <__lo0bits+0x2a>
 8013292:	0c1b      	lsrs	r3, r3, #16
 8013294:	2210      	movs	r2, #16
 8013296:	b2d9      	uxtb	r1, r3
 8013298:	b909      	cbnz	r1, 801329e <__lo0bits+0x32>
 801329a:	3208      	adds	r2, #8
 801329c:	0a1b      	lsrs	r3, r3, #8
 801329e:	0719      	lsls	r1, r3, #28
 80132a0:	bf04      	itt	eq
 80132a2:	091b      	lsreq	r3, r3, #4
 80132a4:	3204      	addeq	r2, #4
 80132a6:	0799      	lsls	r1, r3, #30
 80132a8:	bf04      	itt	eq
 80132aa:	089b      	lsreq	r3, r3, #2
 80132ac:	3202      	addeq	r2, #2
 80132ae:	07d9      	lsls	r1, r3, #31
 80132b0:	d403      	bmi.n	80132ba <__lo0bits+0x4e>
 80132b2:	085b      	lsrs	r3, r3, #1
 80132b4:	f102 0201 	add.w	r2, r2, #1
 80132b8:	d003      	beq.n	80132c2 <__lo0bits+0x56>
 80132ba:	6003      	str	r3, [r0, #0]
 80132bc:	e7e5      	b.n	801328a <__lo0bits+0x1e>
 80132be:	2200      	movs	r2, #0
 80132c0:	e7e3      	b.n	801328a <__lo0bits+0x1e>
 80132c2:	2220      	movs	r2, #32
 80132c4:	e7e1      	b.n	801328a <__lo0bits+0x1e>
	...

080132c8 <__i2b>:
 80132c8:	b510      	push	{r4, lr}
 80132ca:	460c      	mov	r4, r1
 80132cc:	2101      	movs	r1, #1
 80132ce:	f7ff febb 	bl	8013048 <_Balloc>
 80132d2:	4602      	mov	r2, r0
 80132d4:	b928      	cbnz	r0, 80132e2 <__i2b+0x1a>
 80132d6:	4b05      	ldr	r3, [pc, #20]	; (80132ec <__i2b+0x24>)
 80132d8:	4805      	ldr	r0, [pc, #20]	; (80132f0 <__i2b+0x28>)
 80132da:	f240 1145 	movw	r1, #325	; 0x145
 80132de:	f7ff fadf 	bl	80128a0 <__assert_func>
 80132e2:	2301      	movs	r3, #1
 80132e4:	6144      	str	r4, [r0, #20]
 80132e6:	6103      	str	r3, [r0, #16]
 80132e8:	bd10      	pop	{r4, pc}
 80132ea:	bf00      	nop
 80132ec:	08017c25 	.word	0x08017c25
 80132f0:	08017c96 	.word	0x08017c96

080132f4 <__multiply>:
 80132f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f8:	4691      	mov	r9, r2
 80132fa:	690a      	ldr	r2, [r1, #16]
 80132fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013300:	429a      	cmp	r2, r3
 8013302:	bfb8      	it	lt
 8013304:	460b      	movlt	r3, r1
 8013306:	460c      	mov	r4, r1
 8013308:	bfbc      	itt	lt
 801330a:	464c      	movlt	r4, r9
 801330c:	4699      	movlt	r9, r3
 801330e:	6927      	ldr	r7, [r4, #16]
 8013310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013314:	68a3      	ldr	r3, [r4, #8]
 8013316:	6861      	ldr	r1, [r4, #4]
 8013318:	eb07 060a 	add.w	r6, r7, sl
 801331c:	42b3      	cmp	r3, r6
 801331e:	b085      	sub	sp, #20
 8013320:	bfb8      	it	lt
 8013322:	3101      	addlt	r1, #1
 8013324:	f7ff fe90 	bl	8013048 <_Balloc>
 8013328:	b930      	cbnz	r0, 8013338 <__multiply+0x44>
 801332a:	4602      	mov	r2, r0
 801332c:	4b44      	ldr	r3, [pc, #272]	; (8013440 <__multiply+0x14c>)
 801332e:	4845      	ldr	r0, [pc, #276]	; (8013444 <__multiply+0x150>)
 8013330:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013334:	f7ff fab4 	bl	80128a0 <__assert_func>
 8013338:	f100 0514 	add.w	r5, r0, #20
 801333c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013340:	462b      	mov	r3, r5
 8013342:	2200      	movs	r2, #0
 8013344:	4543      	cmp	r3, r8
 8013346:	d321      	bcc.n	801338c <__multiply+0x98>
 8013348:	f104 0314 	add.w	r3, r4, #20
 801334c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013350:	f109 0314 	add.w	r3, r9, #20
 8013354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013358:	9202      	str	r2, [sp, #8]
 801335a:	1b3a      	subs	r2, r7, r4
 801335c:	3a15      	subs	r2, #21
 801335e:	f022 0203 	bic.w	r2, r2, #3
 8013362:	3204      	adds	r2, #4
 8013364:	f104 0115 	add.w	r1, r4, #21
 8013368:	428f      	cmp	r7, r1
 801336a:	bf38      	it	cc
 801336c:	2204      	movcc	r2, #4
 801336e:	9201      	str	r2, [sp, #4]
 8013370:	9a02      	ldr	r2, [sp, #8]
 8013372:	9303      	str	r3, [sp, #12]
 8013374:	429a      	cmp	r2, r3
 8013376:	d80c      	bhi.n	8013392 <__multiply+0x9e>
 8013378:	2e00      	cmp	r6, #0
 801337a:	dd03      	ble.n	8013384 <__multiply+0x90>
 801337c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013380:	2b00      	cmp	r3, #0
 8013382:	d05b      	beq.n	801343c <__multiply+0x148>
 8013384:	6106      	str	r6, [r0, #16]
 8013386:	b005      	add	sp, #20
 8013388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801338c:	f843 2b04 	str.w	r2, [r3], #4
 8013390:	e7d8      	b.n	8013344 <__multiply+0x50>
 8013392:	f8b3 a000 	ldrh.w	sl, [r3]
 8013396:	f1ba 0f00 	cmp.w	sl, #0
 801339a:	d024      	beq.n	80133e6 <__multiply+0xf2>
 801339c:	f104 0e14 	add.w	lr, r4, #20
 80133a0:	46a9      	mov	r9, r5
 80133a2:	f04f 0c00 	mov.w	ip, #0
 80133a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80133aa:	f8d9 1000 	ldr.w	r1, [r9]
 80133ae:	fa1f fb82 	uxth.w	fp, r2
 80133b2:	b289      	uxth	r1, r1
 80133b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80133b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80133bc:	f8d9 2000 	ldr.w	r2, [r9]
 80133c0:	4461      	add	r1, ip
 80133c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80133ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80133ce:	b289      	uxth	r1, r1
 80133d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80133d4:	4577      	cmp	r7, lr
 80133d6:	f849 1b04 	str.w	r1, [r9], #4
 80133da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80133de:	d8e2      	bhi.n	80133a6 <__multiply+0xb2>
 80133e0:	9a01      	ldr	r2, [sp, #4]
 80133e2:	f845 c002 	str.w	ip, [r5, r2]
 80133e6:	9a03      	ldr	r2, [sp, #12]
 80133e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80133ec:	3304      	adds	r3, #4
 80133ee:	f1b9 0f00 	cmp.w	r9, #0
 80133f2:	d021      	beq.n	8013438 <__multiply+0x144>
 80133f4:	6829      	ldr	r1, [r5, #0]
 80133f6:	f104 0c14 	add.w	ip, r4, #20
 80133fa:	46ae      	mov	lr, r5
 80133fc:	f04f 0a00 	mov.w	sl, #0
 8013400:	f8bc b000 	ldrh.w	fp, [ip]
 8013404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013408:	fb09 220b 	mla	r2, r9, fp, r2
 801340c:	4452      	add	r2, sl
 801340e:	b289      	uxth	r1, r1
 8013410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013414:	f84e 1b04 	str.w	r1, [lr], #4
 8013418:	f85c 1b04 	ldr.w	r1, [ip], #4
 801341c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013420:	f8be 1000 	ldrh.w	r1, [lr]
 8013424:	fb09 110a 	mla	r1, r9, sl, r1
 8013428:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801342c:	4567      	cmp	r7, ip
 801342e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013432:	d8e5      	bhi.n	8013400 <__multiply+0x10c>
 8013434:	9a01      	ldr	r2, [sp, #4]
 8013436:	50a9      	str	r1, [r5, r2]
 8013438:	3504      	adds	r5, #4
 801343a:	e799      	b.n	8013370 <__multiply+0x7c>
 801343c:	3e01      	subs	r6, #1
 801343e:	e79b      	b.n	8013378 <__multiply+0x84>
 8013440:	08017c25 	.word	0x08017c25
 8013444:	08017c96 	.word	0x08017c96

08013448 <__pow5mult>:
 8013448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801344c:	4615      	mov	r5, r2
 801344e:	f012 0203 	ands.w	r2, r2, #3
 8013452:	4606      	mov	r6, r0
 8013454:	460f      	mov	r7, r1
 8013456:	d007      	beq.n	8013468 <__pow5mult+0x20>
 8013458:	4c25      	ldr	r4, [pc, #148]	; (80134f0 <__pow5mult+0xa8>)
 801345a:	3a01      	subs	r2, #1
 801345c:	2300      	movs	r3, #0
 801345e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013462:	f7ff fe53 	bl	801310c <__multadd>
 8013466:	4607      	mov	r7, r0
 8013468:	10ad      	asrs	r5, r5, #2
 801346a:	d03d      	beq.n	80134e8 <__pow5mult+0xa0>
 801346c:	69f4      	ldr	r4, [r6, #28]
 801346e:	b97c      	cbnz	r4, 8013490 <__pow5mult+0x48>
 8013470:	2010      	movs	r0, #16
 8013472:	f7fd ffed 	bl	8011450 <malloc>
 8013476:	4602      	mov	r2, r0
 8013478:	61f0      	str	r0, [r6, #28]
 801347a:	b928      	cbnz	r0, 8013488 <__pow5mult+0x40>
 801347c:	4b1d      	ldr	r3, [pc, #116]	; (80134f4 <__pow5mult+0xac>)
 801347e:	481e      	ldr	r0, [pc, #120]	; (80134f8 <__pow5mult+0xb0>)
 8013480:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013484:	f7ff fa0c 	bl	80128a0 <__assert_func>
 8013488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801348c:	6004      	str	r4, [r0, #0]
 801348e:	60c4      	str	r4, [r0, #12]
 8013490:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013498:	b94c      	cbnz	r4, 80134ae <__pow5mult+0x66>
 801349a:	f240 2171 	movw	r1, #625	; 0x271
 801349e:	4630      	mov	r0, r6
 80134a0:	f7ff ff12 	bl	80132c8 <__i2b>
 80134a4:	2300      	movs	r3, #0
 80134a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80134aa:	4604      	mov	r4, r0
 80134ac:	6003      	str	r3, [r0, #0]
 80134ae:	f04f 0900 	mov.w	r9, #0
 80134b2:	07eb      	lsls	r3, r5, #31
 80134b4:	d50a      	bpl.n	80134cc <__pow5mult+0x84>
 80134b6:	4639      	mov	r1, r7
 80134b8:	4622      	mov	r2, r4
 80134ba:	4630      	mov	r0, r6
 80134bc:	f7ff ff1a 	bl	80132f4 <__multiply>
 80134c0:	4639      	mov	r1, r7
 80134c2:	4680      	mov	r8, r0
 80134c4:	4630      	mov	r0, r6
 80134c6:	f7ff fdff 	bl	80130c8 <_Bfree>
 80134ca:	4647      	mov	r7, r8
 80134cc:	106d      	asrs	r5, r5, #1
 80134ce:	d00b      	beq.n	80134e8 <__pow5mult+0xa0>
 80134d0:	6820      	ldr	r0, [r4, #0]
 80134d2:	b938      	cbnz	r0, 80134e4 <__pow5mult+0x9c>
 80134d4:	4622      	mov	r2, r4
 80134d6:	4621      	mov	r1, r4
 80134d8:	4630      	mov	r0, r6
 80134da:	f7ff ff0b 	bl	80132f4 <__multiply>
 80134de:	6020      	str	r0, [r4, #0]
 80134e0:	f8c0 9000 	str.w	r9, [r0]
 80134e4:	4604      	mov	r4, r0
 80134e6:	e7e4      	b.n	80134b2 <__pow5mult+0x6a>
 80134e8:	4638      	mov	r0, r7
 80134ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ee:	bf00      	nop
 80134f0:	08017de0 	.word	0x08017de0
 80134f4:	08017a10 	.word	0x08017a10
 80134f8:	08017c96 	.word	0x08017c96

080134fc <__lshift>:
 80134fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013500:	460c      	mov	r4, r1
 8013502:	6849      	ldr	r1, [r1, #4]
 8013504:	6923      	ldr	r3, [r4, #16]
 8013506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801350a:	68a3      	ldr	r3, [r4, #8]
 801350c:	4607      	mov	r7, r0
 801350e:	4691      	mov	r9, r2
 8013510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013514:	f108 0601 	add.w	r6, r8, #1
 8013518:	42b3      	cmp	r3, r6
 801351a:	db0b      	blt.n	8013534 <__lshift+0x38>
 801351c:	4638      	mov	r0, r7
 801351e:	f7ff fd93 	bl	8013048 <_Balloc>
 8013522:	4605      	mov	r5, r0
 8013524:	b948      	cbnz	r0, 801353a <__lshift+0x3e>
 8013526:	4602      	mov	r2, r0
 8013528:	4b28      	ldr	r3, [pc, #160]	; (80135cc <__lshift+0xd0>)
 801352a:	4829      	ldr	r0, [pc, #164]	; (80135d0 <__lshift+0xd4>)
 801352c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013530:	f7ff f9b6 	bl	80128a0 <__assert_func>
 8013534:	3101      	adds	r1, #1
 8013536:	005b      	lsls	r3, r3, #1
 8013538:	e7ee      	b.n	8013518 <__lshift+0x1c>
 801353a:	2300      	movs	r3, #0
 801353c:	f100 0114 	add.w	r1, r0, #20
 8013540:	f100 0210 	add.w	r2, r0, #16
 8013544:	4618      	mov	r0, r3
 8013546:	4553      	cmp	r3, sl
 8013548:	db33      	blt.n	80135b2 <__lshift+0xb6>
 801354a:	6920      	ldr	r0, [r4, #16]
 801354c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013550:	f104 0314 	add.w	r3, r4, #20
 8013554:	f019 091f 	ands.w	r9, r9, #31
 8013558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801355c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013560:	d02b      	beq.n	80135ba <__lshift+0xbe>
 8013562:	f1c9 0e20 	rsb	lr, r9, #32
 8013566:	468a      	mov	sl, r1
 8013568:	2200      	movs	r2, #0
 801356a:	6818      	ldr	r0, [r3, #0]
 801356c:	fa00 f009 	lsl.w	r0, r0, r9
 8013570:	4310      	orrs	r0, r2
 8013572:	f84a 0b04 	str.w	r0, [sl], #4
 8013576:	f853 2b04 	ldr.w	r2, [r3], #4
 801357a:	459c      	cmp	ip, r3
 801357c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013580:	d8f3      	bhi.n	801356a <__lshift+0x6e>
 8013582:	ebac 0304 	sub.w	r3, ip, r4
 8013586:	3b15      	subs	r3, #21
 8013588:	f023 0303 	bic.w	r3, r3, #3
 801358c:	3304      	adds	r3, #4
 801358e:	f104 0015 	add.w	r0, r4, #21
 8013592:	4584      	cmp	ip, r0
 8013594:	bf38      	it	cc
 8013596:	2304      	movcc	r3, #4
 8013598:	50ca      	str	r2, [r1, r3]
 801359a:	b10a      	cbz	r2, 80135a0 <__lshift+0xa4>
 801359c:	f108 0602 	add.w	r6, r8, #2
 80135a0:	3e01      	subs	r6, #1
 80135a2:	4638      	mov	r0, r7
 80135a4:	612e      	str	r6, [r5, #16]
 80135a6:	4621      	mov	r1, r4
 80135a8:	f7ff fd8e 	bl	80130c8 <_Bfree>
 80135ac:	4628      	mov	r0, r5
 80135ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80135b6:	3301      	adds	r3, #1
 80135b8:	e7c5      	b.n	8013546 <__lshift+0x4a>
 80135ba:	3904      	subs	r1, #4
 80135bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80135c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80135c4:	459c      	cmp	ip, r3
 80135c6:	d8f9      	bhi.n	80135bc <__lshift+0xc0>
 80135c8:	e7ea      	b.n	80135a0 <__lshift+0xa4>
 80135ca:	bf00      	nop
 80135cc:	08017c25 	.word	0x08017c25
 80135d0:	08017c96 	.word	0x08017c96

080135d4 <__mcmp>:
 80135d4:	b530      	push	{r4, r5, lr}
 80135d6:	6902      	ldr	r2, [r0, #16]
 80135d8:	690c      	ldr	r4, [r1, #16]
 80135da:	1b12      	subs	r2, r2, r4
 80135dc:	d10e      	bne.n	80135fc <__mcmp+0x28>
 80135de:	f100 0314 	add.w	r3, r0, #20
 80135e2:	3114      	adds	r1, #20
 80135e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80135e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80135ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80135f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80135f4:	42a5      	cmp	r5, r4
 80135f6:	d003      	beq.n	8013600 <__mcmp+0x2c>
 80135f8:	d305      	bcc.n	8013606 <__mcmp+0x32>
 80135fa:	2201      	movs	r2, #1
 80135fc:	4610      	mov	r0, r2
 80135fe:	bd30      	pop	{r4, r5, pc}
 8013600:	4283      	cmp	r3, r0
 8013602:	d3f3      	bcc.n	80135ec <__mcmp+0x18>
 8013604:	e7fa      	b.n	80135fc <__mcmp+0x28>
 8013606:	f04f 32ff 	mov.w	r2, #4294967295
 801360a:	e7f7      	b.n	80135fc <__mcmp+0x28>

0801360c <__mdiff>:
 801360c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013610:	460c      	mov	r4, r1
 8013612:	4606      	mov	r6, r0
 8013614:	4611      	mov	r1, r2
 8013616:	4620      	mov	r0, r4
 8013618:	4690      	mov	r8, r2
 801361a:	f7ff ffdb 	bl	80135d4 <__mcmp>
 801361e:	1e05      	subs	r5, r0, #0
 8013620:	d110      	bne.n	8013644 <__mdiff+0x38>
 8013622:	4629      	mov	r1, r5
 8013624:	4630      	mov	r0, r6
 8013626:	f7ff fd0f 	bl	8013048 <_Balloc>
 801362a:	b930      	cbnz	r0, 801363a <__mdiff+0x2e>
 801362c:	4b3a      	ldr	r3, [pc, #232]	; (8013718 <__mdiff+0x10c>)
 801362e:	4602      	mov	r2, r0
 8013630:	f240 2137 	movw	r1, #567	; 0x237
 8013634:	4839      	ldr	r0, [pc, #228]	; (801371c <__mdiff+0x110>)
 8013636:	f7ff f933 	bl	80128a0 <__assert_func>
 801363a:	2301      	movs	r3, #1
 801363c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013644:	bfa4      	itt	ge
 8013646:	4643      	movge	r3, r8
 8013648:	46a0      	movge	r8, r4
 801364a:	4630      	mov	r0, r6
 801364c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013650:	bfa6      	itte	ge
 8013652:	461c      	movge	r4, r3
 8013654:	2500      	movge	r5, #0
 8013656:	2501      	movlt	r5, #1
 8013658:	f7ff fcf6 	bl	8013048 <_Balloc>
 801365c:	b920      	cbnz	r0, 8013668 <__mdiff+0x5c>
 801365e:	4b2e      	ldr	r3, [pc, #184]	; (8013718 <__mdiff+0x10c>)
 8013660:	4602      	mov	r2, r0
 8013662:	f240 2145 	movw	r1, #581	; 0x245
 8013666:	e7e5      	b.n	8013634 <__mdiff+0x28>
 8013668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801366c:	6926      	ldr	r6, [r4, #16]
 801366e:	60c5      	str	r5, [r0, #12]
 8013670:	f104 0914 	add.w	r9, r4, #20
 8013674:	f108 0514 	add.w	r5, r8, #20
 8013678:	f100 0e14 	add.w	lr, r0, #20
 801367c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013680:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013684:	f108 0210 	add.w	r2, r8, #16
 8013688:	46f2      	mov	sl, lr
 801368a:	2100      	movs	r1, #0
 801368c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013694:	fa11 f88b 	uxtah	r8, r1, fp
 8013698:	b299      	uxth	r1, r3
 801369a:	0c1b      	lsrs	r3, r3, #16
 801369c:	eba8 0801 	sub.w	r8, r8, r1
 80136a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80136a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80136a8:	fa1f f888 	uxth.w	r8, r8
 80136ac:	1419      	asrs	r1, r3, #16
 80136ae:	454e      	cmp	r6, r9
 80136b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80136b4:	f84a 3b04 	str.w	r3, [sl], #4
 80136b8:	d8e8      	bhi.n	801368c <__mdiff+0x80>
 80136ba:	1b33      	subs	r3, r6, r4
 80136bc:	3b15      	subs	r3, #21
 80136be:	f023 0303 	bic.w	r3, r3, #3
 80136c2:	3304      	adds	r3, #4
 80136c4:	3415      	adds	r4, #21
 80136c6:	42a6      	cmp	r6, r4
 80136c8:	bf38      	it	cc
 80136ca:	2304      	movcc	r3, #4
 80136cc:	441d      	add	r5, r3
 80136ce:	4473      	add	r3, lr
 80136d0:	469e      	mov	lr, r3
 80136d2:	462e      	mov	r6, r5
 80136d4:	4566      	cmp	r6, ip
 80136d6:	d30e      	bcc.n	80136f6 <__mdiff+0xea>
 80136d8:	f10c 0203 	add.w	r2, ip, #3
 80136dc:	1b52      	subs	r2, r2, r5
 80136de:	f022 0203 	bic.w	r2, r2, #3
 80136e2:	3d03      	subs	r5, #3
 80136e4:	45ac      	cmp	ip, r5
 80136e6:	bf38      	it	cc
 80136e8:	2200      	movcc	r2, #0
 80136ea:	4413      	add	r3, r2
 80136ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80136f0:	b17a      	cbz	r2, 8013712 <__mdiff+0x106>
 80136f2:	6107      	str	r7, [r0, #16]
 80136f4:	e7a4      	b.n	8013640 <__mdiff+0x34>
 80136f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80136fa:	fa11 f288 	uxtah	r2, r1, r8
 80136fe:	1414      	asrs	r4, r2, #16
 8013700:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013704:	b292      	uxth	r2, r2
 8013706:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801370a:	f84e 2b04 	str.w	r2, [lr], #4
 801370e:	1421      	asrs	r1, r4, #16
 8013710:	e7e0      	b.n	80136d4 <__mdiff+0xc8>
 8013712:	3f01      	subs	r7, #1
 8013714:	e7ea      	b.n	80136ec <__mdiff+0xe0>
 8013716:	bf00      	nop
 8013718:	08017c25 	.word	0x08017c25
 801371c:	08017c96 	.word	0x08017c96

08013720 <__ulp>:
 8013720:	b082      	sub	sp, #8
 8013722:	ed8d 0b00 	vstr	d0, [sp]
 8013726:	9a01      	ldr	r2, [sp, #4]
 8013728:	4b0f      	ldr	r3, [pc, #60]	; (8013768 <__ulp+0x48>)
 801372a:	4013      	ands	r3, r2
 801372c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013730:	2b00      	cmp	r3, #0
 8013732:	dc08      	bgt.n	8013746 <__ulp+0x26>
 8013734:	425b      	negs	r3, r3
 8013736:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801373a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801373e:	da04      	bge.n	801374a <__ulp+0x2a>
 8013740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013744:	4113      	asrs	r3, r2
 8013746:	2200      	movs	r2, #0
 8013748:	e008      	b.n	801375c <__ulp+0x3c>
 801374a:	f1a2 0314 	sub.w	r3, r2, #20
 801374e:	2b1e      	cmp	r3, #30
 8013750:	bfda      	itte	le
 8013752:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013756:	40da      	lsrle	r2, r3
 8013758:	2201      	movgt	r2, #1
 801375a:	2300      	movs	r3, #0
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	ec41 0b10 	vmov	d0, r0, r1
 8013764:	b002      	add	sp, #8
 8013766:	4770      	bx	lr
 8013768:	7ff00000 	.word	0x7ff00000

0801376c <__b2d>:
 801376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013770:	6906      	ldr	r6, [r0, #16]
 8013772:	f100 0814 	add.w	r8, r0, #20
 8013776:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801377a:	1f37      	subs	r7, r6, #4
 801377c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013780:	4610      	mov	r0, r2
 8013782:	f7ff fd53 	bl	801322c <__hi0bits>
 8013786:	f1c0 0320 	rsb	r3, r0, #32
 801378a:	280a      	cmp	r0, #10
 801378c:	600b      	str	r3, [r1, #0]
 801378e:	491b      	ldr	r1, [pc, #108]	; (80137fc <__b2d+0x90>)
 8013790:	dc15      	bgt.n	80137be <__b2d+0x52>
 8013792:	f1c0 0c0b 	rsb	ip, r0, #11
 8013796:	fa22 f30c 	lsr.w	r3, r2, ip
 801379a:	45b8      	cmp	r8, r7
 801379c:	ea43 0501 	orr.w	r5, r3, r1
 80137a0:	bf34      	ite	cc
 80137a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80137a6:	2300      	movcs	r3, #0
 80137a8:	3015      	adds	r0, #21
 80137aa:	fa02 f000 	lsl.w	r0, r2, r0
 80137ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80137b2:	4303      	orrs	r3, r0
 80137b4:	461c      	mov	r4, r3
 80137b6:	ec45 4b10 	vmov	d0, r4, r5
 80137ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137be:	45b8      	cmp	r8, r7
 80137c0:	bf3a      	itte	cc
 80137c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80137c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80137ca:	2300      	movcs	r3, #0
 80137cc:	380b      	subs	r0, #11
 80137ce:	d012      	beq.n	80137f6 <__b2d+0x8a>
 80137d0:	f1c0 0120 	rsb	r1, r0, #32
 80137d4:	fa23 f401 	lsr.w	r4, r3, r1
 80137d8:	4082      	lsls	r2, r0
 80137da:	4322      	orrs	r2, r4
 80137dc:	4547      	cmp	r7, r8
 80137de:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80137e2:	bf8c      	ite	hi
 80137e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80137e8:	2200      	movls	r2, #0
 80137ea:	4083      	lsls	r3, r0
 80137ec:	40ca      	lsrs	r2, r1
 80137ee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80137f2:	4313      	orrs	r3, r2
 80137f4:	e7de      	b.n	80137b4 <__b2d+0x48>
 80137f6:	ea42 0501 	orr.w	r5, r2, r1
 80137fa:	e7db      	b.n	80137b4 <__b2d+0x48>
 80137fc:	3ff00000 	.word	0x3ff00000

08013800 <__d2b>:
 8013800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013804:	460f      	mov	r7, r1
 8013806:	2101      	movs	r1, #1
 8013808:	ec59 8b10 	vmov	r8, r9, d0
 801380c:	4616      	mov	r6, r2
 801380e:	f7ff fc1b 	bl	8013048 <_Balloc>
 8013812:	4604      	mov	r4, r0
 8013814:	b930      	cbnz	r0, 8013824 <__d2b+0x24>
 8013816:	4602      	mov	r2, r0
 8013818:	4b24      	ldr	r3, [pc, #144]	; (80138ac <__d2b+0xac>)
 801381a:	4825      	ldr	r0, [pc, #148]	; (80138b0 <__d2b+0xb0>)
 801381c:	f240 310f 	movw	r1, #783	; 0x30f
 8013820:	f7ff f83e 	bl	80128a0 <__assert_func>
 8013824:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801382c:	bb2d      	cbnz	r5, 801387a <__d2b+0x7a>
 801382e:	9301      	str	r3, [sp, #4]
 8013830:	f1b8 0300 	subs.w	r3, r8, #0
 8013834:	d026      	beq.n	8013884 <__d2b+0x84>
 8013836:	4668      	mov	r0, sp
 8013838:	9300      	str	r3, [sp, #0]
 801383a:	f7ff fd17 	bl	801326c <__lo0bits>
 801383e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013842:	b1e8      	cbz	r0, 8013880 <__d2b+0x80>
 8013844:	f1c0 0320 	rsb	r3, r0, #32
 8013848:	fa02 f303 	lsl.w	r3, r2, r3
 801384c:	430b      	orrs	r3, r1
 801384e:	40c2      	lsrs	r2, r0
 8013850:	6163      	str	r3, [r4, #20]
 8013852:	9201      	str	r2, [sp, #4]
 8013854:	9b01      	ldr	r3, [sp, #4]
 8013856:	61a3      	str	r3, [r4, #24]
 8013858:	2b00      	cmp	r3, #0
 801385a:	bf14      	ite	ne
 801385c:	2202      	movne	r2, #2
 801385e:	2201      	moveq	r2, #1
 8013860:	6122      	str	r2, [r4, #16]
 8013862:	b1bd      	cbz	r5, 8013894 <__d2b+0x94>
 8013864:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013868:	4405      	add	r5, r0
 801386a:	603d      	str	r5, [r7, #0]
 801386c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013870:	6030      	str	r0, [r6, #0]
 8013872:	4620      	mov	r0, r4
 8013874:	b003      	add	sp, #12
 8013876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801387a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801387e:	e7d6      	b.n	801382e <__d2b+0x2e>
 8013880:	6161      	str	r1, [r4, #20]
 8013882:	e7e7      	b.n	8013854 <__d2b+0x54>
 8013884:	a801      	add	r0, sp, #4
 8013886:	f7ff fcf1 	bl	801326c <__lo0bits>
 801388a:	9b01      	ldr	r3, [sp, #4]
 801388c:	6163      	str	r3, [r4, #20]
 801388e:	3020      	adds	r0, #32
 8013890:	2201      	movs	r2, #1
 8013892:	e7e5      	b.n	8013860 <__d2b+0x60>
 8013894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801389c:	6038      	str	r0, [r7, #0]
 801389e:	6918      	ldr	r0, [r3, #16]
 80138a0:	f7ff fcc4 	bl	801322c <__hi0bits>
 80138a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80138a8:	e7e2      	b.n	8013870 <__d2b+0x70>
 80138aa:	bf00      	nop
 80138ac:	08017c25 	.word	0x08017c25
 80138b0:	08017c96 	.word	0x08017c96

080138b4 <__ratio>:
 80138b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b8:	4688      	mov	r8, r1
 80138ba:	4669      	mov	r1, sp
 80138bc:	4681      	mov	r9, r0
 80138be:	f7ff ff55 	bl	801376c <__b2d>
 80138c2:	a901      	add	r1, sp, #4
 80138c4:	4640      	mov	r0, r8
 80138c6:	ec55 4b10 	vmov	r4, r5, d0
 80138ca:	ee10 aa10 	vmov	sl, s0
 80138ce:	f7ff ff4d 	bl	801376c <__b2d>
 80138d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80138d6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80138da:	1ad2      	subs	r2, r2, r3
 80138dc:	e9dd 3100 	ldrd	r3, r1, [sp]
 80138e0:	1a5b      	subs	r3, r3, r1
 80138e2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80138e6:	ec57 6b10 	vmov	r6, r7, d0
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	bfd6      	itet	le
 80138ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80138f2:	462a      	movgt	r2, r5
 80138f4:	463a      	movle	r2, r7
 80138f6:	46ab      	mov	fp, r5
 80138f8:	bfd6      	itet	le
 80138fa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80138fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013902:	ee00 3a90 	vmovle	s1, r3
 8013906:	ec4b ab17 	vmov	d7, sl, fp
 801390a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801390e:	b003      	add	sp, #12
 8013910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013914 <__copybits>:
 8013914:	3901      	subs	r1, #1
 8013916:	b570      	push	{r4, r5, r6, lr}
 8013918:	1149      	asrs	r1, r1, #5
 801391a:	6914      	ldr	r4, [r2, #16]
 801391c:	3101      	adds	r1, #1
 801391e:	f102 0314 	add.w	r3, r2, #20
 8013922:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013926:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801392a:	1f05      	subs	r5, r0, #4
 801392c:	42a3      	cmp	r3, r4
 801392e:	d30c      	bcc.n	801394a <__copybits+0x36>
 8013930:	1aa3      	subs	r3, r4, r2
 8013932:	3b11      	subs	r3, #17
 8013934:	f023 0303 	bic.w	r3, r3, #3
 8013938:	3211      	adds	r2, #17
 801393a:	42a2      	cmp	r2, r4
 801393c:	bf88      	it	hi
 801393e:	2300      	movhi	r3, #0
 8013940:	4418      	add	r0, r3
 8013942:	2300      	movs	r3, #0
 8013944:	4288      	cmp	r0, r1
 8013946:	d305      	bcc.n	8013954 <__copybits+0x40>
 8013948:	bd70      	pop	{r4, r5, r6, pc}
 801394a:	f853 6b04 	ldr.w	r6, [r3], #4
 801394e:	f845 6f04 	str.w	r6, [r5, #4]!
 8013952:	e7eb      	b.n	801392c <__copybits+0x18>
 8013954:	f840 3b04 	str.w	r3, [r0], #4
 8013958:	e7f4      	b.n	8013944 <__copybits+0x30>

0801395a <__any_on>:
 801395a:	f100 0214 	add.w	r2, r0, #20
 801395e:	6900      	ldr	r0, [r0, #16]
 8013960:	114b      	asrs	r3, r1, #5
 8013962:	4298      	cmp	r0, r3
 8013964:	b510      	push	{r4, lr}
 8013966:	db11      	blt.n	801398c <__any_on+0x32>
 8013968:	dd0a      	ble.n	8013980 <__any_on+0x26>
 801396a:	f011 011f 	ands.w	r1, r1, #31
 801396e:	d007      	beq.n	8013980 <__any_on+0x26>
 8013970:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013974:	fa24 f001 	lsr.w	r0, r4, r1
 8013978:	fa00 f101 	lsl.w	r1, r0, r1
 801397c:	428c      	cmp	r4, r1
 801397e:	d10b      	bne.n	8013998 <__any_on+0x3e>
 8013980:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013984:	4293      	cmp	r3, r2
 8013986:	d803      	bhi.n	8013990 <__any_on+0x36>
 8013988:	2000      	movs	r0, #0
 801398a:	bd10      	pop	{r4, pc}
 801398c:	4603      	mov	r3, r0
 801398e:	e7f7      	b.n	8013980 <__any_on+0x26>
 8013990:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013994:	2900      	cmp	r1, #0
 8013996:	d0f5      	beq.n	8013984 <__any_on+0x2a>
 8013998:	2001      	movs	r0, #1
 801399a:	e7f6      	b.n	801398a <__any_on+0x30>

0801399c <_malloc_usable_size_r>:
 801399c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139a0:	1f18      	subs	r0, r3, #4
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	bfbc      	itt	lt
 80139a6:	580b      	ldrlt	r3, [r1, r0]
 80139a8:	18c0      	addlt	r0, r0, r3
 80139aa:	4770      	bx	lr

080139ac <__ascii_wctomb>:
 80139ac:	b149      	cbz	r1, 80139c2 <__ascii_wctomb+0x16>
 80139ae:	2aff      	cmp	r2, #255	; 0xff
 80139b0:	bf85      	ittet	hi
 80139b2:	238a      	movhi	r3, #138	; 0x8a
 80139b4:	6003      	strhi	r3, [r0, #0]
 80139b6:	700a      	strbls	r2, [r1, #0]
 80139b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80139bc:	bf98      	it	ls
 80139be:	2001      	movls	r0, #1
 80139c0:	4770      	bx	lr
 80139c2:	4608      	mov	r0, r1
 80139c4:	4770      	bx	lr

080139c6 <__ssputs_r>:
 80139c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139ca:	688e      	ldr	r6, [r1, #8]
 80139cc:	461f      	mov	r7, r3
 80139ce:	42be      	cmp	r6, r7
 80139d0:	680b      	ldr	r3, [r1, #0]
 80139d2:	4682      	mov	sl, r0
 80139d4:	460c      	mov	r4, r1
 80139d6:	4690      	mov	r8, r2
 80139d8:	d82c      	bhi.n	8013a34 <__ssputs_r+0x6e>
 80139da:	898a      	ldrh	r2, [r1, #12]
 80139dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80139e0:	d026      	beq.n	8013a30 <__ssputs_r+0x6a>
 80139e2:	6965      	ldr	r5, [r4, #20]
 80139e4:	6909      	ldr	r1, [r1, #16]
 80139e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80139ea:	eba3 0901 	sub.w	r9, r3, r1
 80139ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80139f2:	1c7b      	adds	r3, r7, #1
 80139f4:	444b      	add	r3, r9
 80139f6:	106d      	asrs	r5, r5, #1
 80139f8:	429d      	cmp	r5, r3
 80139fa:	bf38      	it	cc
 80139fc:	461d      	movcc	r5, r3
 80139fe:	0553      	lsls	r3, r2, #21
 8013a00:	d527      	bpl.n	8013a52 <__ssputs_r+0x8c>
 8013a02:	4629      	mov	r1, r5
 8013a04:	f7fd fd54 	bl	80114b0 <_malloc_r>
 8013a08:	4606      	mov	r6, r0
 8013a0a:	b360      	cbz	r0, 8013a66 <__ssputs_r+0xa0>
 8013a0c:	6921      	ldr	r1, [r4, #16]
 8013a0e:	464a      	mov	r2, r9
 8013a10:	f7fe ff2f 	bl	8012872 <memcpy>
 8013a14:	89a3      	ldrh	r3, [r4, #12]
 8013a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a1e:	81a3      	strh	r3, [r4, #12]
 8013a20:	6126      	str	r6, [r4, #16]
 8013a22:	6165      	str	r5, [r4, #20]
 8013a24:	444e      	add	r6, r9
 8013a26:	eba5 0509 	sub.w	r5, r5, r9
 8013a2a:	6026      	str	r6, [r4, #0]
 8013a2c:	60a5      	str	r5, [r4, #8]
 8013a2e:	463e      	mov	r6, r7
 8013a30:	42be      	cmp	r6, r7
 8013a32:	d900      	bls.n	8013a36 <__ssputs_r+0x70>
 8013a34:	463e      	mov	r6, r7
 8013a36:	6820      	ldr	r0, [r4, #0]
 8013a38:	4632      	mov	r2, r6
 8013a3a:	4641      	mov	r1, r8
 8013a3c:	f7fe fe0b 	bl	8012656 <memmove>
 8013a40:	68a3      	ldr	r3, [r4, #8]
 8013a42:	1b9b      	subs	r3, r3, r6
 8013a44:	60a3      	str	r3, [r4, #8]
 8013a46:	6823      	ldr	r3, [r4, #0]
 8013a48:	4433      	add	r3, r6
 8013a4a:	6023      	str	r3, [r4, #0]
 8013a4c:	2000      	movs	r0, #0
 8013a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a52:	462a      	mov	r2, r5
 8013a54:	f7fd fdfe 	bl	8011654 <_realloc_r>
 8013a58:	4606      	mov	r6, r0
 8013a5a:	2800      	cmp	r0, #0
 8013a5c:	d1e0      	bne.n	8013a20 <__ssputs_r+0x5a>
 8013a5e:	6921      	ldr	r1, [r4, #16]
 8013a60:	4650      	mov	r0, sl
 8013a62:	f7fe ff3b 	bl	80128dc <_free_r>
 8013a66:	230c      	movs	r3, #12
 8013a68:	f8ca 3000 	str.w	r3, [sl]
 8013a6c:	89a3      	ldrh	r3, [r4, #12]
 8013a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a72:	81a3      	strh	r3, [r4, #12]
 8013a74:	f04f 30ff 	mov.w	r0, #4294967295
 8013a78:	e7e9      	b.n	8013a4e <__ssputs_r+0x88>
	...

08013a7c <_svfiprintf_r>:
 8013a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a80:	4698      	mov	r8, r3
 8013a82:	898b      	ldrh	r3, [r1, #12]
 8013a84:	061b      	lsls	r3, r3, #24
 8013a86:	b09d      	sub	sp, #116	; 0x74
 8013a88:	4607      	mov	r7, r0
 8013a8a:	460d      	mov	r5, r1
 8013a8c:	4614      	mov	r4, r2
 8013a8e:	d50e      	bpl.n	8013aae <_svfiprintf_r+0x32>
 8013a90:	690b      	ldr	r3, [r1, #16]
 8013a92:	b963      	cbnz	r3, 8013aae <_svfiprintf_r+0x32>
 8013a94:	2140      	movs	r1, #64	; 0x40
 8013a96:	f7fd fd0b 	bl	80114b0 <_malloc_r>
 8013a9a:	6028      	str	r0, [r5, #0]
 8013a9c:	6128      	str	r0, [r5, #16]
 8013a9e:	b920      	cbnz	r0, 8013aaa <_svfiprintf_r+0x2e>
 8013aa0:	230c      	movs	r3, #12
 8013aa2:	603b      	str	r3, [r7, #0]
 8013aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa8:	e0d0      	b.n	8013c4c <_svfiprintf_r+0x1d0>
 8013aaa:	2340      	movs	r3, #64	; 0x40
 8013aac:	616b      	str	r3, [r5, #20]
 8013aae:	2300      	movs	r3, #0
 8013ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ab2:	2320      	movs	r3, #32
 8013ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013abc:	2330      	movs	r3, #48	; 0x30
 8013abe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013c64 <_svfiprintf_r+0x1e8>
 8013ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ac6:	f04f 0901 	mov.w	r9, #1
 8013aca:	4623      	mov	r3, r4
 8013acc:	469a      	mov	sl, r3
 8013ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ad2:	b10a      	cbz	r2, 8013ad8 <_svfiprintf_r+0x5c>
 8013ad4:	2a25      	cmp	r2, #37	; 0x25
 8013ad6:	d1f9      	bne.n	8013acc <_svfiprintf_r+0x50>
 8013ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8013adc:	d00b      	beq.n	8013af6 <_svfiprintf_r+0x7a>
 8013ade:	465b      	mov	r3, fp
 8013ae0:	4622      	mov	r2, r4
 8013ae2:	4629      	mov	r1, r5
 8013ae4:	4638      	mov	r0, r7
 8013ae6:	f7ff ff6e 	bl	80139c6 <__ssputs_r>
 8013aea:	3001      	adds	r0, #1
 8013aec:	f000 80a9 	beq.w	8013c42 <_svfiprintf_r+0x1c6>
 8013af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013af2:	445a      	add	r2, fp
 8013af4:	9209      	str	r2, [sp, #36]	; 0x24
 8013af6:	f89a 3000 	ldrb.w	r3, [sl]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f000 80a1 	beq.w	8013c42 <_svfiprintf_r+0x1c6>
 8013b00:	2300      	movs	r3, #0
 8013b02:	f04f 32ff 	mov.w	r2, #4294967295
 8013b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b0a:	f10a 0a01 	add.w	sl, sl, #1
 8013b0e:	9304      	str	r3, [sp, #16]
 8013b10:	9307      	str	r3, [sp, #28]
 8013b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b16:	931a      	str	r3, [sp, #104]	; 0x68
 8013b18:	4654      	mov	r4, sl
 8013b1a:	2205      	movs	r2, #5
 8013b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b20:	4850      	ldr	r0, [pc, #320]	; (8013c64 <_svfiprintf_r+0x1e8>)
 8013b22:	f7ec fbf5 	bl	8000310 <memchr>
 8013b26:	9a04      	ldr	r2, [sp, #16]
 8013b28:	b9d8      	cbnz	r0, 8013b62 <_svfiprintf_r+0xe6>
 8013b2a:	06d0      	lsls	r0, r2, #27
 8013b2c:	bf44      	itt	mi
 8013b2e:	2320      	movmi	r3, #32
 8013b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b34:	0711      	lsls	r1, r2, #28
 8013b36:	bf44      	itt	mi
 8013b38:	232b      	movmi	r3, #43	; 0x2b
 8013b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8013b42:	2b2a      	cmp	r3, #42	; 0x2a
 8013b44:	d015      	beq.n	8013b72 <_svfiprintf_r+0xf6>
 8013b46:	9a07      	ldr	r2, [sp, #28]
 8013b48:	4654      	mov	r4, sl
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	f04f 0c0a 	mov.w	ip, #10
 8013b50:	4621      	mov	r1, r4
 8013b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b56:	3b30      	subs	r3, #48	; 0x30
 8013b58:	2b09      	cmp	r3, #9
 8013b5a:	d94d      	bls.n	8013bf8 <_svfiprintf_r+0x17c>
 8013b5c:	b1b0      	cbz	r0, 8013b8c <_svfiprintf_r+0x110>
 8013b5e:	9207      	str	r2, [sp, #28]
 8013b60:	e014      	b.n	8013b8c <_svfiprintf_r+0x110>
 8013b62:	eba0 0308 	sub.w	r3, r0, r8
 8013b66:	fa09 f303 	lsl.w	r3, r9, r3
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	9304      	str	r3, [sp, #16]
 8013b6e:	46a2      	mov	sl, r4
 8013b70:	e7d2      	b.n	8013b18 <_svfiprintf_r+0x9c>
 8013b72:	9b03      	ldr	r3, [sp, #12]
 8013b74:	1d19      	adds	r1, r3, #4
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	9103      	str	r1, [sp, #12]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	bfbb      	ittet	lt
 8013b7e:	425b      	neglt	r3, r3
 8013b80:	f042 0202 	orrlt.w	r2, r2, #2
 8013b84:	9307      	strge	r3, [sp, #28]
 8013b86:	9307      	strlt	r3, [sp, #28]
 8013b88:	bfb8      	it	lt
 8013b8a:	9204      	strlt	r2, [sp, #16]
 8013b8c:	7823      	ldrb	r3, [r4, #0]
 8013b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8013b90:	d10c      	bne.n	8013bac <_svfiprintf_r+0x130>
 8013b92:	7863      	ldrb	r3, [r4, #1]
 8013b94:	2b2a      	cmp	r3, #42	; 0x2a
 8013b96:	d134      	bne.n	8013c02 <_svfiprintf_r+0x186>
 8013b98:	9b03      	ldr	r3, [sp, #12]
 8013b9a:	1d1a      	adds	r2, r3, #4
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	9203      	str	r2, [sp, #12]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	bfb8      	it	lt
 8013ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ba8:	3402      	adds	r4, #2
 8013baa:	9305      	str	r3, [sp, #20]
 8013bac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013c74 <_svfiprintf_r+0x1f8>
 8013bb0:	7821      	ldrb	r1, [r4, #0]
 8013bb2:	2203      	movs	r2, #3
 8013bb4:	4650      	mov	r0, sl
 8013bb6:	f7ec fbab 	bl	8000310 <memchr>
 8013bba:	b138      	cbz	r0, 8013bcc <_svfiprintf_r+0x150>
 8013bbc:	9b04      	ldr	r3, [sp, #16]
 8013bbe:	eba0 000a 	sub.w	r0, r0, sl
 8013bc2:	2240      	movs	r2, #64	; 0x40
 8013bc4:	4082      	lsls	r2, r0
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	3401      	adds	r4, #1
 8013bca:	9304      	str	r3, [sp, #16]
 8013bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bd0:	4825      	ldr	r0, [pc, #148]	; (8013c68 <_svfiprintf_r+0x1ec>)
 8013bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013bd6:	2206      	movs	r2, #6
 8013bd8:	f7ec fb9a 	bl	8000310 <memchr>
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d038      	beq.n	8013c52 <_svfiprintf_r+0x1d6>
 8013be0:	4b22      	ldr	r3, [pc, #136]	; (8013c6c <_svfiprintf_r+0x1f0>)
 8013be2:	bb1b      	cbnz	r3, 8013c2c <_svfiprintf_r+0x1b0>
 8013be4:	9b03      	ldr	r3, [sp, #12]
 8013be6:	3307      	adds	r3, #7
 8013be8:	f023 0307 	bic.w	r3, r3, #7
 8013bec:	3308      	adds	r3, #8
 8013bee:	9303      	str	r3, [sp, #12]
 8013bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bf2:	4433      	add	r3, r6
 8013bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8013bf6:	e768      	b.n	8013aca <_svfiprintf_r+0x4e>
 8013bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013bfc:	460c      	mov	r4, r1
 8013bfe:	2001      	movs	r0, #1
 8013c00:	e7a6      	b.n	8013b50 <_svfiprintf_r+0xd4>
 8013c02:	2300      	movs	r3, #0
 8013c04:	3401      	adds	r4, #1
 8013c06:	9305      	str	r3, [sp, #20]
 8013c08:	4619      	mov	r1, r3
 8013c0a:	f04f 0c0a 	mov.w	ip, #10
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c14:	3a30      	subs	r2, #48	; 0x30
 8013c16:	2a09      	cmp	r2, #9
 8013c18:	d903      	bls.n	8013c22 <_svfiprintf_r+0x1a6>
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d0c6      	beq.n	8013bac <_svfiprintf_r+0x130>
 8013c1e:	9105      	str	r1, [sp, #20]
 8013c20:	e7c4      	b.n	8013bac <_svfiprintf_r+0x130>
 8013c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c26:	4604      	mov	r4, r0
 8013c28:	2301      	movs	r3, #1
 8013c2a:	e7f0      	b.n	8013c0e <_svfiprintf_r+0x192>
 8013c2c:	ab03      	add	r3, sp, #12
 8013c2e:	9300      	str	r3, [sp, #0]
 8013c30:	462a      	mov	r2, r5
 8013c32:	4b0f      	ldr	r3, [pc, #60]	; (8013c70 <_svfiprintf_r+0x1f4>)
 8013c34:	a904      	add	r1, sp, #16
 8013c36:	4638      	mov	r0, r7
 8013c38:	f3af 8000 	nop.w
 8013c3c:	1c42      	adds	r2, r0, #1
 8013c3e:	4606      	mov	r6, r0
 8013c40:	d1d6      	bne.n	8013bf0 <_svfiprintf_r+0x174>
 8013c42:	89ab      	ldrh	r3, [r5, #12]
 8013c44:	065b      	lsls	r3, r3, #25
 8013c46:	f53f af2d 	bmi.w	8013aa4 <_svfiprintf_r+0x28>
 8013c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c4c:	b01d      	add	sp, #116	; 0x74
 8013c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c52:	ab03      	add	r3, sp, #12
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	462a      	mov	r2, r5
 8013c58:	4b05      	ldr	r3, [pc, #20]	; (8013c70 <_svfiprintf_r+0x1f4>)
 8013c5a:	a904      	add	r1, sp, #16
 8013c5c:	4638      	mov	r0, r7
 8013c5e:	f000 fb8f 	bl	8014380 <_printf_i>
 8013c62:	e7eb      	b.n	8013c3c <_svfiprintf_r+0x1c0>
 8013c64:	08017dec 	.word	0x08017dec
 8013c68:	08017df6 	.word	0x08017df6
 8013c6c:	00000000 	.word	0x00000000
 8013c70:	080139c7 	.word	0x080139c7
 8013c74:	08017df2 	.word	0x08017df2

08013c78 <_sungetc_r>:
 8013c78:	b538      	push	{r3, r4, r5, lr}
 8013c7a:	1c4b      	adds	r3, r1, #1
 8013c7c:	4614      	mov	r4, r2
 8013c7e:	d103      	bne.n	8013c88 <_sungetc_r+0x10>
 8013c80:	f04f 35ff 	mov.w	r5, #4294967295
 8013c84:	4628      	mov	r0, r5
 8013c86:	bd38      	pop	{r3, r4, r5, pc}
 8013c88:	8993      	ldrh	r3, [r2, #12]
 8013c8a:	f023 0320 	bic.w	r3, r3, #32
 8013c8e:	8193      	strh	r3, [r2, #12]
 8013c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c92:	6852      	ldr	r2, [r2, #4]
 8013c94:	b2cd      	uxtb	r5, r1
 8013c96:	b18b      	cbz	r3, 8013cbc <_sungetc_r+0x44>
 8013c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	dd08      	ble.n	8013cb0 <_sungetc_r+0x38>
 8013c9e:	6823      	ldr	r3, [r4, #0]
 8013ca0:	1e5a      	subs	r2, r3, #1
 8013ca2:	6022      	str	r2, [r4, #0]
 8013ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013ca8:	6863      	ldr	r3, [r4, #4]
 8013caa:	3301      	adds	r3, #1
 8013cac:	6063      	str	r3, [r4, #4]
 8013cae:	e7e9      	b.n	8013c84 <_sungetc_r+0xc>
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	f000 fece 	bl	8014a52 <__submore>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d0f1      	beq.n	8013c9e <_sungetc_r+0x26>
 8013cba:	e7e1      	b.n	8013c80 <_sungetc_r+0x8>
 8013cbc:	6921      	ldr	r1, [r4, #16]
 8013cbe:	6823      	ldr	r3, [r4, #0]
 8013cc0:	b151      	cbz	r1, 8013cd8 <_sungetc_r+0x60>
 8013cc2:	4299      	cmp	r1, r3
 8013cc4:	d208      	bcs.n	8013cd8 <_sungetc_r+0x60>
 8013cc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013cca:	42a9      	cmp	r1, r5
 8013ccc:	d104      	bne.n	8013cd8 <_sungetc_r+0x60>
 8013cce:	3b01      	subs	r3, #1
 8013cd0:	3201      	adds	r2, #1
 8013cd2:	6023      	str	r3, [r4, #0]
 8013cd4:	6062      	str	r2, [r4, #4]
 8013cd6:	e7d5      	b.n	8013c84 <_sungetc_r+0xc>
 8013cd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8013ce2:	2303      	movs	r3, #3
 8013ce4:	63a3      	str	r3, [r4, #56]	; 0x38
 8013ce6:	4623      	mov	r3, r4
 8013ce8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013cec:	6023      	str	r3, [r4, #0]
 8013cee:	2301      	movs	r3, #1
 8013cf0:	e7dc      	b.n	8013cac <_sungetc_r+0x34>

08013cf2 <__ssrefill_r>:
 8013cf2:	b510      	push	{r4, lr}
 8013cf4:	460c      	mov	r4, r1
 8013cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013cf8:	b169      	cbz	r1, 8013d16 <__ssrefill_r+0x24>
 8013cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cfe:	4299      	cmp	r1, r3
 8013d00:	d001      	beq.n	8013d06 <__ssrefill_r+0x14>
 8013d02:	f7fe fdeb 	bl	80128dc <_free_r>
 8013d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d08:	6063      	str	r3, [r4, #4]
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8013d0e:	b113      	cbz	r3, 8013d16 <__ssrefill_r+0x24>
 8013d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013d12:	6023      	str	r3, [r4, #0]
 8013d14:	bd10      	pop	{r4, pc}
 8013d16:	6923      	ldr	r3, [r4, #16]
 8013d18:	6023      	str	r3, [r4, #0]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	6063      	str	r3, [r4, #4]
 8013d1e:	89a3      	ldrh	r3, [r4, #12]
 8013d20:	f043 0320 	orr.w	r3, r3, #32
 8013d24:	81a3      	strh	r3, [r4, #12]
 8013d26:	f04f 30ff 	mov.w	r0, #4294967295
 8013d2a:	e7f3      	b.n	8013d14 <__ssrefill_r+0x22>

08013d2c <__ssvfiscanf_r>:
 8013d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d30:	460c      	mov	r4, r1
 8013d32:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013d36:	2100      	movs	r1, #0
 8013d38:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013d3c:	49a6      	ldr	r1, [pc, #664]	; (8013fd8 <__ssvfiscanf_r+0x2ac>)
 8013d3e:	91a0      	str	r1, [sp, #640]	; 0x280
 8013d40:	f10d 0804 	add.w	r8, sp, #4
 8013d44:	49a5      	ldr	r1, [pc, #660]	; (8013fdc <__ssvfiscanf_r+0x2b0>)
 8013d46:	4fa6      	ldr	r7, [pc, #664]	; (8013fe0 <__ssvfiscanf_r+0x2b4>)
 8013d48:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013fe4 <__ssvfiscanf_r+0x2b8>
 8013d4c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013d50:	4606      	mov	r6, r0
 8013d52:	91a1      	str	r1, [sp, #644]	; 0x284
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	7813      	ldrb	r3, [r2, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	f000 815a 	beq.w	8014012 <__ssvfiscanf_r+0x2e6>
 8013d5e:	5cf9      	ldrb	r1, [r7, r3]
 8013d60:	f011 0108 	ands.w	r1, r1, #8
 8013d64:	f102 0501 	add.w	r5, r2, #1
 8013d68:	d019      	beq.n	8013d9e <__ssvfiscanf_r+0x72>
 8013d6a:	6863      	ldr	r3, [r4, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	dd0f      	ble.n	8013d90 <__ssvfiscanf_r+0x64>
 8013d70:	6823      	ldr	r3, [r4, #0]
 8013d72:	781a      	ldrb	r2, [r3, #0]
 8013d74:	5cba      	ldrb	r2, [r7, r2]
 8013d76:	0712      	lsls	r2, r2, #28
 8013d78:	d401      	bmi.n	8013d7e <__ssvfiscanf_r+0x52>
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	e7eb      	b.n	8013d56 <__ssvfiscanf_r+0x2a>
 8013d7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013d80:	3201      	adds	r2, #1
 8013d82:	9245      	str	r2, [sp, #276]	; 0x114
 8013d84:	6862      	ldr	r2, [r4, #4]
 8013d86:	3301      	adds	r3, #1
 8013d88:	3a01      	subs	r2, #1
 8013d8a:	6062      	str	r2, [r4, #4]
 8013d8c:	6023      	str	r3, [r4, #0]
 8013d8e:	e7ec      	b.n	8013d6a <__ssvfiscanf_r+0x3e>
 8013d90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013d92:	4621      	mov	r1, r4
 8013d94:	4630      	mov	r0, r6
 8013d96:	4798      	blx	r3
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d0e9      	beq.n	8013d70 <__ssvfiscanf_r+0x44>
 8013d9c:	e7ed      	b.n	8013d7a <__ssvfiscanf_r+0x4e>
 8013d9e:	2b25      	cmp	r3, #37	; 0x25
 8013da0:	d012      	beq.n	8013dc8 <__ssvfiscanf_r+0x9c>
 8013da2:	469a      	mov	sl, r3
 8013da4:	6863      	ldr	r3, [r4, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f340 8091 	ble.w	8013ece <__ssvfiscanf_r+0x1a2>
 8013dac:	6822      	ldr	r2, [r4, #0]
 8013dae:	7813      	ldrb	r3, [r2, #0]
 8013db0:	4553      	cmp	r3, sl
 8013db2:	f040 812e 	bne.w	8014012 <__ssvfiscanf_r+0x2e6>
 8013db6:	6863      	ldr	r3, [r4, #4]
 8013db8:	3b01      	subs	r3, #1
 8013dba:	6063      	str	r3, [r4, #4]
 8013dbc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013dbe:	3201      	adds	r2, #1
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	6022      	str	r2, [r4, #0]
 8013dc4:	9345      	str	r3, [sp, #276]	; 0x114
 8013dc6:	e7d8      	b.n	8013d7a <__ssvfiscanf_r+0x4e>
 8013dc8:	9141      	str	r1, [sp, #260]	; 0x104
 8013dca:	9143      	str	r1, [sp, #268]	; 0x10c
 8013dcc:	7853      	ldrb	r3, [r2, #1]
 8013dce:	2b2a      	cmp	r3, #42	; 0x2a
 8013dd0:	bf02      	ittt	eq
 8013dd2:	2310      	moveq	r3, #16
 8013dd4:	1c95      	addeq	r5, r2, #2
 8013dd6:	9341      	streq	r3, [sp, #260]	; 0x104
 8013dd8:	220a      	movs	r2, #10
 8013dda:	46aa      	mov	sl, r5
 8013ddc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013de0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013de4:	2b09      	cmp	r3, #9
 8013de6:	d91c      	bls.n	8013e22 <__ssvfiscanf_r+0xf6>
 8013de8:	487e      	ldr	r0, [pc, #504]	; (8013fe4 <__ssvfiscanf_r+0x2b8>)
 8013dea:	2203      	movs	r2, #3
 8013dec:	f7ec fa90 	bl	8000310 <memchr>
 8013df0:	b138      	cbz	r0, 8013e02 <__ssvfiscanf_r+0xd6>
 8013df2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013df4:	eba0 0009 	sub.w	r0, r0, r9
 8013df8:	2301      	movs	r3, #1
 8013dfa:	4083      	lsls	r3, r0
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	9341      	str	r3, [sp, #260]	; 0x104
 8013e00:	4655      	mov	r5, sl
 8013e02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013e06:	2b78      	cmp	r3, #120	; 0x78
 8013e08:	d806      	bhi.n	8013e18 <__ssvfiscanf_r+0xec>
 8013e0a:	2b57      	cmp	r3, #87	; 0x57
 8013e0c:	d810      	bhi.n	8013e30 <__ssvfiscanf_r+0x104>
 8013e0e:	2b25      	cmp	r3, #37	; 0x25
 8013e10:	d0c7      	beq.n	8013da2 <__ssvfiscanf_r+0x76>
 8013e12:	d857      	bhi.n	8013ec4 <__ssvfiscanf_r+0x198>
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d065      	beq.n	8013ee4 <__ssvfiscanf_r+0x1b8>
 8013e18:	2303      	movs	r3, #3
 8013e1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8013e1c:	230a      	movs	r3, #10
 8013e1e:	9342      	str	r3, [sp, #264]	; 0x108
 8013e20:	e076      	b.n	8013f10 <__ssvfiscanf_r+0x1e4>
 8013e22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013e24:	fb02 1103 	mla	r1, r2, r3, r1
 8013e28:	3930      	subs	r1, #48	; 0x30
 8013e2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8013e2c:	4655      	mov	r5, sl
 8013e2e:	e7d4      	b.n	8013dda <__ssvfiscanf_r+0xae>
 8013e30:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013e34:	2a20      	cmp	r2, #32
 8013e36:	d8ef      	bhi.n	8013e18 <__ssvfiscanf_r+0xec>
 8013e38:	a101      	add	r1, pc, #4	; (adr r1, 8013e40 <__ssvfiscanf_r+0x114>)
 8013e3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013e3e:	bf00      	nop
 8013e40:	08013ef3 	.word	0x08013ef3
 8013e44:	08013e19 	.word	0x08013e19
 8013e48:	08013e19 	.word	0x08013e19
 8013e4c:	08013f51 	.word	0x08013f51
 8013e50:	08013e19 	.word	0x08013e19
 8013e54:	08013e19 	.word	0x08013e19
 8013e58:	08013e19 	.word	0x08013e19
 8013e5c:	08013e19 	.word	0x08013e19
 8013e60:	08013e19 	.word	0x08013e19
 8013e64:	08013e19 	.word	0x08013e19
 8013e68:	08013e19 	.word	0x08013e19
 8013e6c:	08013f67 	.word	0x08013f67
 8013e70:	08013f4d 	.word	0x08013f4d
 8013e74:	08013ecb 	.word	0x08013ecb
 8013e78:	08013ecb 	.word	0x08013ecb
 8013e7c:	08013ecb 	.word	0x08013ecb
 8013e80:	08013e19 	.word	0x08013e19
 8013e84:	08013f09 	.word	0x08013f09
 8013e88:	08013e19 	.word	0x08013e19
 8013e8c:	08013e19 	.word	0x08013e19
 8013e90:	08013e19 	.word	0x08013e19
 8013e94:	08013e19 	.word	0x08013e19
 8013e98:	08013f77 	.word	0x08013f77
 8013e9c:	08013f45 	.word	0x08013f45
 8013ea0:	08013eeb 	.word	0x08013eeb
 8013ea4:	08013e19 	.word	0x08013e19
 8013ea8:	08013e19 	.word	0x08013e19
 8013eac:	08013f73 	.word	0x08013f73
 8013eb0:	08013e19 	.word	0x08013e19
 8013eb4:	08013f4d 	.word	0x08013f4d
 8013eb8:	08013e19 	.word	0x08013e19
 8013ebc:	08013e19 	.word	0x08013e19
 8013ec0:	08013ef3 	.word	0x08013ef3
 8013ec4:	3b45      	subs	r3, #69	; 0x45
 8013ec6:	2b02      	cmp	r3, #2
 8013ec8:	d8a6      	bhi.n	8013e18 <__ssvfiscanf_r+0xec>
 8013eca:	2305      	movs	r3, #5
 8013ecc:	e01f      	b.n	8013f0e <__ssvfiscanf_r+0x1e2>
 8013ece:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013ed0:	4621      	mov	r1, r4
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	4798      	blx	r3
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	f43f af68 	beq.w	8013dac <__ssvfiscanf_r+0x80>
 8013edc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	f040 808d 	bne.w	8013ffe <__ssvfiscanf_r+0x2d2>
 8013ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee8:	e08f      	b.n	801400a <__ssvfiscanf_r+0x2de>
 8013eea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013eec:	f042 0220 	orr.w	r2, r2, #32
 8013ef0:	9241      	str	r2, [sp, #260]	; 0x104
 8013ef2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013ef8:	9241      	str	r2, [sp, #260]	; 0x104
 8013efa:	2210      	movs	r2, #16
 8013efc:	2b6f      	cmp	r3, #111	; 0x6f
 8013efe:	9242      	str	r2, [sp, #264]	; 0x108
 8013f00:	bf34      	ite	cc
 8013f02:	2303      	movcc	r3, #3
 8013f04:	2304      	movcs	r3, #4
 8013f06:	e002      	b.n	8013f0e <__ssvfiscanf_r+0x1e2>
 8013f08:	2300      	movs	r3, #0
 8013f0a:	9342      	str	r3, [sp, #264]	; 0x108
 8013f0c:	2303      	movs	r3, #3
 8013f0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8013f10:	6863      	ldr	r3, [r4, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	dd3d      	ble.n	8013f92 <__ssvfiscanf_r+0x266>
 8013f16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f18:	0659      	lsls	r1, r3, #25
 8013f1a:	d404      	bmi.n	8013f26 <__ssvfiscanf_r+0x1fa>
 8013f1c:	6823      	ldr	r3, [r4, #0]
 8013f1e:	781a      	ldrb	r2, [r3, #0]
 8013f20:	5cba      	ldrb	r2, [r7, r2]
 8013f22:	0712      	lsls	r2, r2, #28
 8013f24:	d43c      	bmi.n	8013fa0 <__ssvfiscanf_r+0x274>
 8013f26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013f28:	2b02      	cmp	r3, #2
 8013f2a:	dc4b      	bgt.n	8013fc4 <__ssvfiscanf_r+0x298>
 8013f2c:	466b      	mov	r3, sp
 8013f2e:	4622      	mov	r2, r4
 8013f30:	a941      	add	r1, sp, #260	; 0x104
 8013f32:	4630      	mov	r0, r6
 8013f34:	f000 fb46 	bl	80145c4 <_scanf_chars>
 8013f38:	2801      	cmp	r0, #1
 8013f3a:	d06a      	beq.n	8014012 <__ssvfiscanf_r+0x2e6>
 8013f3c:	2802      	cmp	r0, #2
 8013f3e:	f47f af1c 	bne.w	8013d7a <__ssvfiscanf_r+0x4e>
 8013f42:	e7cb      	b.n	8013edc <__ssvfiscanf_r+0x1b0>
 8013f44:	2308      	movs	r3, #8
 8013f46:	9342      	str	r3, [sp, #264]	; 0x108
 8013f48:	2304      	movs	r3, #4
 8013f4a:	e7e0      	b.n	8013f0e <__ssvfiscanf_r+0x1e2>
 8013f4c:	220a      	movs	r2, #10
 8013f4e:	e7d5      	b.n	8013efc <__ssvfiscanf_r+0x1d0>
 8013f50:	4629      	mov	r1, r5
 8013f52:	4640      	mov	r0, r8
 8013f54:	f000 fd44 	bl	80149e0 <__sccl>
 8013f58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f5e:	9341      	str	r3, [sp, #260]	; 0x104
 8013f60:	4605      	mov	r5, r0
 8013f62:	2301      	movs	r3, #1
 8013f64:	e7d3      	b.n	8013f0e <__ssvfiscanf_r+0x1e2>
 8013f66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f6c:	9341      	str	r3, [sp, #260]	; 0x104
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e7cd      	b.n	8013f0e <__ssvfiscanf_r+0x1e2>
 8013f72:	2302      	movs	r3, #2
 8013f74:	e7cb      	b.n	8013f0e <__ssvfiscanf_r+0x1e2>
 8013f76:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013f78:	06c3      	lsls	r3, r0, #27
 8013f7a:	f53f aefe 	bmi.w	8013d7a <__ssvfiscanf_r+0x4e>
 8013f7e:	9b00      	ldr	r3, [sp, #0]
 8013f80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013f82:	1d19      	adds	r1, r3, #4
 8013f84:	9100      	str	r1, [sp, #0]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	07c0      	lsls	r0, r0, #31
 8013f8a:	bf4c      	ite	mi
 8013f8c:	801a      	strhmi	r2, [r3, #0]
 8013f8e:	601a      	strpl	r2, [r3, #0]
 8013f90:	e6f3      	b.n	8013d7a <__ssvfiscanf_r+0x4e>
 8013f92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013f94:	4621      	mov	r1, r4
 8013f96:	4630      	mov	r0, r6
 8013f98:	4798      	blx	r3
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d0bb      	beq.n	8013f16 <__ssvfiscanf_r+0x1ea>
 8013f9e:	e79d      	b.n	8013edc <__ssvfiscanf_r+0x1b0>
 8013fa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013fa2:	3201      	adds	r2, #1
 8013fa4:	9245      	str	r2, [sp, #276]	; 0x114
 8013fa6:	6862      	ldr	r2, [r4, #4]
 8013fa8:	3a01      	subs	r2, #1
 8013faa:	2a00      	cmp	r2, #0
 8013fac:	6062      	str	r2, [r4, #4]
 8013fae:	dd02      	ble.n	8013fb6 <__ssvfiscanf_r+0x28a>
 8013fb0:	3301      	adds	r3, #1
 8013fb2:	6023      	str	r3, [r4, #0]
 8013fb4:	e7b2      	b.n	8013f1c <__ssvfiscanf_r+0x1f0>
 8013fb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013fb8:	4621      	mov	r1, r4
 8013fba:	4630      	mov	r0, r6
 8013fbc:	4798      	blx	r3
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d0ac      	beq.n	8013f1c <__ssvfiscanf_r+0x1f0>
 8013fc2:	e78b      	b.n	8013edc <__ssvfiscanf_r+0x1b0>
 8013fc4:	2b04      	cmp	r3, #4
 8013fc6:	dc0f      	bgt.n	8013fe8 <__ssvfiscanf_r+0x2bc>
 8013fc8:	466b      	mov	r3, sp
 8013fca:	4622      	mov	r2, r4
 8013fcc:	a941      	add	r1, sp, #260	; 0x104
 8013fce:	4630      	mov	r0, r6
 8013fd0:	f000 fb52 	bl	8014678 <_scanf_i>
 8013fd4:	e7b0      	b.n	8013f38 <__ssvfiscanf_r+0x20c>
 8013fd6:	bf00      	nop
 8013fd8:	08013c79 	.word	0x08013c79
 8013fdc:	08013cf3 	.word	0x08013cf3
 8013fe0:	08017ae1 	.word	0x08017ae1
 8013fe4:	08017df2 	.word	0x08017df2
 8013fe8:	4b0b      	ldr	r3, [pc, #44]	; (8014018 <__ssvfiscanf_r+0x2ec>)
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f43f aec5 	beq.w	8013d7a <__ssvfiscanf_r+0x4e>
 8013ff0:	466b      	mov	r3, sp
 8013ff2:	4622      	mov	r2, r4
 8013ff4:	a941      	add	r1, sp, #260	; 0x104
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	f3af 8000 	nop.w
 8013ffc:	e79c      	b.n	8013f38 <__ssvfiscanf_r+0x20c>
 8013ffe:	89a3      	ldrh	r3, [r4, #12]
 8014000:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014004:	bf18      	it	ne
 8014006:	f04f 30ff 	movne.w	r0, #4294967295
 801400a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801400e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014012:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014014:	e7f9      	b.n	801400a <__ssvfiscanf_r+0x2de>
 8014016:	bf00      	nop
 8014018:	00000000 	.word	0x00000000

0801401c <__sfputc_r>:
 801401c:	6893      	ldr	r3, [r2, #8]
 801401e:	3b01      	subs	r3, #1
 8014020:	2b00      	cmp	r3, #0
 8014022:	b410      	push	{r4}
 8014024:	6093      	str	r3, [r2, #8]
 8014026:	da08      	bge.n	801403a <__sfputc_r+0x1e>
 8014028:	6994      	ldr	r4, [r2, #24]
 801402a:	42a3      	cmp	r3, r4
 801402c:	db01      	blt.n	8014032 <__sfputc_r+0x16>
 801402e:	290a      	cmp	r1, #10
 8014030:	d103      	bne.n	801403a <__sfputc_r+0x1e>
 8014032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014036:	f000 bd46 	b.w	8014ac6 <__swbuf_r>
 801403a:	6813      	ldr	r3, [r2, #0]
 801403c:	1c58      	adds	r0, r3, #1
 801403e:	6010      	str	r0, [r2, #0]
 8014040:	7019      	strb	r1, [r3, #0]
 8014042:	4608      	mov	r0, r1
 8014044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014048:	4770      	bx	lr

0801404a <__sfputs_r>:
 801404a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404c:	4606      	mov	r6, r0
 801404e:	460f      	mov	r7, r1
 8014050:	4614      	mov	r4, r2
 8014052:	18d5      	adds	r5, r2, r3
 8014054:	42ac      	cmp	r4, r5
 8014056:	d101      	bne.n	801405c <__sfputs_r+0x12>
 8014058:	2000      	movs	r0, #0
 801405a:	e007      	b.n	801406c <__sfputs_r+0x22>
 801405c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014060:	463a      	mov	r2, r7
 8014062:	4630      	mov	r0, r6
 8014064:	f7ff ffda 	bl	801401c <__sfputc_r>
 8014068:	1c43      	adds	r3, r0, #1
 801406a:	d1f3      	bne.n	8014054 <__sfputs_r+0xa>
 801406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014070 <_vfiprintf_r>:
 8014070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014074:	460d      	mov	r5, r1
 8014076:	b09d      	sub	sp, #116	; 0x74
 8014078:	4614      	mov	r4, r2
 801407a:	4698      	mov	r8, r3
 801407c:	4606      	mov	r6, r0
 801407e:	b118      	cbz	r0, 8014088 <_vfiprintf_r+0x18>
 8014080:	6a03      	ldr	r3, [r0, #32]
 8014082:	b90b      	cbnz	r3, 8014088 <_vfiprintf_r+0x18>
 8014084:	f7fe f9fe 	bl	8012484 <__sinit>
 8014088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801408a:	07d9      	lsls	r1, r3, #31
 801408c:	d405      	bmi.n	801409a <_vfiprintf_r+0x2a>
 801408e:	89ab      	ldrh	r3, [r5, #12]
 8014090:	059a      	lsls	r2, r3, #22
 8014092:	d402      	bmi.n	801409a <_vfiprintf_r+0x2a>
 8014094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014096:	f7fe fbea 	bl	801286e <__retarget_lock_acquire_recursive>
 801409a:	89ab      	ldrh	r3, [r5, #12]
 801409c:	071b      	lsls	r3, r3, #28
 801409e:	d501      	bpl.n	80140a4 <_vfiprintf_r+0x34>
 80140a0:	692b      	ldr	r3, [r5, #16]
 80140a2:	b99b      	cbnz	r3, 80140cc <_vfiprintf_r+0x5c>
 80140a4:	4629      	mov	r1, r5
 80140a6:	4630      	mov	r0, r6
 80140a8:	f000 fd4a 	bl	8014b40 <__swsetup_r>
 80140ac:	b170      	cbz	r0, 80140cc <_vfiprintf_r+0x5c>
 80140ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140b0:	07dc      	lsls	r4, r3, #31
 80140b2:	d504      	bpl.n	80140be <_vfiprintf_r+0x4e>
 80140b4:	f04f 30ff 	mov.w	r0, #4294967295
 80140b8:	b01d      	add	sp, #116	; 0x74
 80140ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140be:	89ab      	ldrh	r3, [r5, #12]
 80140c0:	0598      	lsls	r0, r3, #22
 80140c2:	d4f7      	bmi.n	80140b4 <_vfiprintf_r+0x44>
 80140c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140c6:	f7fe fbd3 	bl	8012870 <__retarget_lock_release_recursive>
 80140ca:	e7f3      	b.n	80140b4 <_vfiprintf_r+0x44>
 80140cc:	2300      	movs	r3, #0
 80140ce:	9309      	str	r3, [sp, #36]	; 0x24
 80140d0:	2320      	movs	r3, #32
 80140d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80140da:	2330      	movs	r3, #48	; 0x30
 80140dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014290 <_vfiprintf_r+0x220>
 80140e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140e4:	f04f 0901 	mov.w	r9, #1
 80140e8:	4623      	mov	r3, r4
 80140ea:	469a      	mov	sl, r3
 80140ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140f0:	b10a      	cbz	r2, 80140f6 <_vfiprintf_r+0x86>
 80140f2:	2a25      	cmp	r2, #37	; 0x25
 80140f4:	d1f9      	bne.n	80140ea <_vfiprintf_r+0x7a>
 80140f6:	ebba 0b04 	subs.w	fp, sl, r4
 80140fa:	d00b      	beq.n	8014114 <_vfiprintf_r+0xa4>
 80140fc:	465b      	mov	r3, fp
 80140fe:	4622      	mov	r2, r4
 8014100:	4629      	mov	r1, r5
 8014102:	4630      	mov	r0, r6
 8014104:	f7ff ffa1 	bl	801404a <__sfputs_r>
 8014108:	3001      	adds	r0, #1
 801410a:	f000 80a9 	beq.w	8014260 <_vfiprintf_r+0x1f0>
 801410e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014110:	445a      	add	r2, fp
 8014112:	9209      	str	r2, [sp, #36]	; 0x24
 8014114:	f89a 3000 	ldrb.w	r3, [sl]
 8014118:	2b00      	cmp	r3, #0
 801411a:	f000 80a1 	beq.w	8014260 <_vfiprintf_r+0x1f0>
 801411e:	2300      	movs	r3, #0
 8014120:	f04f 32ff 	mov.w	r2, #4294967295
 8014124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014128:	f10a 0a01 	add.w	sl, sl, #1
 801412c:	9304      	str	r3, [sp, #16]
 801412e:	9307      	str	r3, [sp, #28]
 8014130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014134:	931a      	str	r3, [sp, #104]	; 0x68
 8014136:	4654      	mov	r4, sl
 8014138:	2205      	movs	r2, #5
 801413a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801413e:	4854      	ldr	r0, [pc, #336]	; (8014290 <_vfiprintf_r+0x220>)
 8014140:	f7ec f8e6 	bl	8000310 <memchr>
 8014144:	9a04      	ldr	r2, [sp, #16]
 8014146:	b9d8      	cbnz	r0, 8014180 <_vfiprintf_r+0x110>
 8014148:	06d1      	lsls	r1, r2, #27
 801414a:	bf44      	itt	mi
 801414c:	2320      	movmi	r3, #32
 801414e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014152:	0713      	lsls	r3, r2, #28
 8014154:	bf44      	itt	mi
 8014156:	232b      	movmi	r3, #43	; 0x2b
 8014158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801415c:	f89a 3000 	ldrb.w	r3, [sl]
 8014160:	2b2a      	cmp	r3, #42	; 0x2a
 8014162:	d015      	beq.n	8014190 <_vfiprintf_r+0x120>
 8014164:	9a07      	ldr	r2, [sp, #28]
 8014166:	4654      	mov	r4, sl
 8014168:	2000      	movs	r0, #0
 801416a:	f04f 0c0a 	mov.w	ip, #10
 801416e:	4621      	mov	r1, r4
 8014170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014174:	3b30      	subs	r3, #48	; 0x30
 8014176:	2b09      	cmp	r3, #9
 8014178:	d94d      	bls.n	8014216 <_vfiprintf_r+0x1a6>
 801417a:	b1b0      	cbz	r0, 80141aa <_vfiprintf_r+0x13a>
 801417c:	9207      	str	r2, [sp, #28]
 801417e:	e014      	b.n	80141aa <_vfiprintf_r+0x13a>
 8014180:	eba0 0308 	sub.w	r3, r0, r8
 8014184:	fa09 f303 	lsl.w	r3, r9, r3
 8014188:	4313      	orrs	r3, r2
 801418a:	9304      	str	r3, [sp, #16]
 801418c:	46a2      	mov	sl, r4
 801418e:	e7d2      	b.n	8014136 <_vfiprintf_r+0xc6>
 8014190:	9b03      	ldr	r3, [sp, #12]
 8014192:	1d19      	adds	r1, r3, #4
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	9103      	str	r1, [sp, #12]
 8014198:	2b00      	cmp	r3, #0
 801419a:	bfbb      	ittet	lt
 801419c:	425b      	neglt	r3, r3
 801419e:	f042 0202 	orrlt.w	r2, r2, #2
 80141a2:	9307      	strge	r3, [sp, #28]
 80141a4:	9307      	strlt	r3, [sp, #28]
 80141a6:	bfb8      	it	lt
 80141a8:	9204      	strlt	r2, [sp, #16]
 80141aa:	7823      	ldrb	r3, [r4, #0]
 80141ac:	2b2e      	cmp	r3, #46	; 0x2e
 80141ae:	d10c      	bne.n	80141ca <_vfiprintf_r+0x15a>
 80141b0:	7863      	ldrb	r3, [r4, #1]
 80141b2:	2b2a      	cmp	r3, #42	; 0x2a
 80141b4:	d134      	bne.n	8014220 <_vfiprintf_r+0x1b0>
 80141b6:	9b03      	ldr	r3, [sp, #12]
 80141b8:	1d1a      	adds	r2, r3, #4
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	9203      	str	r2, [sp, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	bfb8      	it	lt
 80141c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80141c6:	3402      	adds	r4, #2
 80141c8:	9305      	str	r3, [sp, #20]
 80141ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80142a0 <_vfiprintf_r+0x230>
 80141ce:	7821      	ldrb	r1, [r4, #0]
 80141d0:	2203      	movs	r2, #3
 80141d2:	4650      	mov	r0, sl
 80141d4:	f7ec f89c 	bl	8000310 <memchr>
 80141d8:	b138      	cbz	r0, 80141ea <_vfiprintf_r+0x17a>
 80141da:	9b04      	ldr	r3, [sp, #16]
 80141dc:	eba0 000a 	sub.w	r0, r0, sl
 80141e0:	2240      	movs	r2, #64	; 0x40
 80141e2:	4082      	lsls	r2, r0
 80141e4:	4313      	orrs	r3, r2
 80141e6:	3401      	adds	r4, #1
 80141e8:	9304      	str	r3, [sp, #16]
 80141ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ee:	4829      	ldr	r0, [pc, #164]	; (8014294 <_vfiprintf_r+0x224>)
 80141f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141f4:	2206      	movs	r2, #6
 80141f6:	f7ec f88b 	bl	8000310 <memchr>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d03f      	beq.n	801427e <_vfiprintf_r+0x20e>
 80141fe:	4b26      	ldr	r3, [pc, #152]	; (8014298 <_vfiprintf_r+0x228>)
 8014200:	bb1b      	cbnz	r3, 801424a <_vfiprintf_r+0x1da>
 8014202:	9b03      	ldr	r3, [sp, #12]
 8014204:	3307      	adds	r3, #7
 8014206:	f023 0307 	bic.w	r3, r3, #7
 801420a:	3308      	adds	r3, #8
 801420c:	9303      	str	r3, [sp, #12]
 801420e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014210:	443b      	add	r3, r7
 8014212:	9309      	str	r3, [sp, #36]	; 0x24
 8014214:	e768      	b.n	80140e8 <_vfiprintf_r+0x78>
 8014216:	fb0c 3202 	mla	r2, ip, r2, r3
 801421a:	460c      	mov	r4, r1
 801421c:	2001      	movs	r0, #1
 801421e:	e7a6      	b.n	801416e <_vfiprintf_r+0xfe>
 8014220:	2300      	movs	r3, #0
 8014222:	3401      	adds	r4, #1
 8014224:	9305      	str	r3, [sp, #20]
 8014226:	4619      	mov	r1, r3
 8014228:	f04f 0c0a 	mov.w	ip, #10
 801422c:	4620      	mov	r0, r4
 801422e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014232:	3a30      	subs	r2, #48	; 0x30
 8014234:	2a09      	cmp	r2, #9
 8014236:	d903      	bls.n	8014240 <_vfiprintf_r+0x1d0>
 8014238:	2b00      	cmp	r3, #0
 801423a:	d0c6      	beq.n	80141ca <_vfiprintf_r+0x15a>
 801423c:	9105      	str	r1, [sp, #20]
 801423e:	e7c4      	b.n	80141ca <_vfiprintf_r+0x15a>
 8014240:	fb0c 2101 	mla	r1, ip, r1, r2
 8014244:	4604      	mov	r4, r0
 8014246:	2301      	movs	r3, #1
 8014248:	e7f0      	b.n	801422c <_vfiprintf_r+0x1bc>
 801424a:	ab03      	add	r3, sp, #12
 801424c:	9300      	str	r3, [sp, #0]
 801424e:	462a      	mov	r2, r5
 8014250:	4b12      	ldr	r3, [pc, #72]	; (801429c <_vfiprintf_r+0x22c>)
 8014252:	a904      	add	r1, sp, #16
 8014254:	4630      	mov	r0, r6
 8014256:	f3af 8000 	nop.w
 801425a:	4607      	mov	r7, r0
 801425c:	1c78      	adds	r0, r7, #1
 801425e:	d1d6      	bne.n	801420e <_vfiprintf_r+0x19e>
 8014260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014262:	07d9      	lsls	r1, r3, #31
 8014264:	d405      	bmi.n	8014272 <_vfiprintf_r+0x202>
 8014266:	89ab      	ldrh	r3, [r5, #12]
 8014268:	059a      	lsls	r2, r3, #22
 801426a:	d402      	bmi.n	8014272 <_vfiprintf_r+0x202>
 801426c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801426e:	f7fe faff 	bl	8012870 <__retarget_lock_release_recursive>
 8014272:	89ab      	ldrh	r3, [r5, #12]
 8014274:	065b      	lsls	r3, r3, #25
 8014276:	f53f af1d 	bmi.w	80140b4 <_vfiprintf_r+0x44>
 801427a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801427c:	e71c      	b.n	80140b8 <_vfiprintf_r+0x48>
 801427e:	ab03      	add	r3, sp, #12
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	462a      	mov	r2, r5
 8014284:	4b05      	ldr	r3, [pc, #20]	; (801429c <_vfiprintf_r+0x22c>)
 8014286:	a904      	add	r1, sp, #16
 8014288:	4630      	mov	r0, r6
 801428a:	f000 f879 	bl	8014380 <_printf_i>
 801428e:	e7e4      	b.n	801425a <_vfiprintf_r+0x1ea>
 8014290:	08017dec 	.word	0x08017dec
 8014294:	08017df6 	.word	0x08017df6
 8014298:	00000000 	.word	0x00000000
 801429c:	0801404b 	.word	0x0801404b
 80142a0:	08017df2 	.word	0x08017df2

080142a4 <_printf_common>:
 80142a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142a8:	4616      	mov	r6, r2
 80142aa:	4699      	mov	r9, r3
 80142ac:	688a      	ldr	r2, [r1, #8]
 80142ae:	690b      	ldr	r3, [r1, #16]
 80142b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142b4:	4293      	cmp	r3, r2
 80142b6:	bfb8      	it	lt
 80142b8:	4613      	movlt	r3, r2
 80142ba:	6033      	str	r3, [r6, #0]
 80142bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142c0:	4607      	mov	r7, r0
 80142c2:	460c      	mov	r4, r1
 80142c4:	b10a      	cbz	r2, 80142ca <_printf_common+0x26>
 80142c6:	3301      	adds	r3, #1
 80142c8:	6033      	str	r3, [r6, #0]
 80142ca:	6823      	ldr	r3, [r4, #0]
 80142cc:	0699      	lsls	r1, r3, #26
 80142ce:	bf42      	ittt	mi
 80142d0:	6833      	ldrmi	r3, [r6, #0]
 80142d2:	3302      	addmi	r3, #2
 80142d4:	6033      	strmi	r3, [r6, #0]
 80142d6:	6825      	ldr	r5, [r4, #0]
 80142d8:	f015 0506 	ands.w	r5, r5, #6
 80142dc:	d106      	bne.n	80142ec <_printf_common+0x48>
 80142de:	f104 0a19 	add.w	sl, r4, #25
 80142e2:	68e3      	ldr	r3, [r4, #12]
 80142e4:	6832      	ldr	r2, [r6, #0]
 80142e6:	1a9b      	subs	r3, r3, r2
 80142e8:	42ab      	cmp	r3, r5
 80142ea:	dc26      	bgt.n	801433a <_printf_common+0x96>
 80142ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80142f0:	1e13      	subs	r3, r2, #0
 80142f2:	6822      	ldr	r2, [r4, #0]
 80142f4:	bf18      	it	ne
 80142f6:	2301      	movne	r3, #1
 80142f8:	0692      	lsls	r2, r2, #26
 80142fa:	d42b      	bmi.n	8014354 <_printf_common+0xb0>
 80142fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014300:	4649      	mov	r1, r9
 8014302:	4638      	mov	r0, r7
 8014304:	47c0      	blx	r8
 8014306:	3001      	adds	r0, #1
 8014308:	d01e      	beq.n	8014348 <_printf_common+0xa4>
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	6922      	ldr	r2, [r4, #16]
 801430e:	f003 0306 	and.w	r3, r3, #6
 8014312:	2b04      	cmp	r3, #4
 8014314:	bf02      	ittt	eq
 8014316:	68e5      	ldreq	r5, [r4, #12]
 8014318:	6833      	ldreq	r3, [r6, #0]
 801431a:	1aed      	subeq	r5, r5, r3
 801431c:	68a3      	ldr	r3, [r4, #8]
 801431e:	bf0c      	ite	eq
 8014320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014324:	2500      	movne	r5, #0
 8014326:	4293      	cmp	r3, r2
 8014328:	bfc4      	itt	gt
 801432a:	1a9b      	subgt	r3, r3, r2
 801432c:	18ed      	addgt	r5, r5, r3
 801432e:	2600      	movs	r6, #0
 8014330:	341a      	adds	r4, #26
 8014332:	42b5      	cmp	r5, r6
 8014334:	d11a      	bne.n	801436c <_printf_common+0xc8>
 8014336:	2000      	movs	r0, #0
 8014338:	e008      	b.n	801434c <_printf_common+0xa8>
 801433a:	2301      	movs	r3, #1
 801433c:	4652      	mov	r2, sl
 801433e:	4649      	mov	r1, r9
 8014340:	4638      	mov	r0, r7
 8014342:	47c0      	blx	r8
 8014344:	3001      	adds	r0, #1
 8014346:	d103      	bne.n	8014350 <_printf_common+0xac>
 8014348:	f04f 30ff 	mov.w	r0, #4294967295
 801434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014350:	3501      	adds	r5, #1
 8014352:	e7c6      	b.n	80142e2 <_printf_common+0x3e>
 8014354:	18e1      	adds	r1, r4, r3
 8014356:	1c5a      	adds	r2, r3, #1
 8014358:	2030      	movs	r0, #48	; 0x30
 801435a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801435e:	4422      	add	r2, r4
 8014360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014368:	3302      	adds	r3, #2
 801436a:	e7c7      	b.n	80142fc <_printf_common+0x58>
 801436c:	2301      	movs	r3, #1
 801436e:	4622      	mov	r2, r4
 8014370:	4649      	mov	r1, r9
 8014372:	4638      	mov	r0, r7
 8014374:	47c0      	blx	r8
 8014376:	3001      	adds	r0, #1
 8014378:	d0e6      	beq.n	8014348 <_printf_common+0xa4>
 801437a:	3601      	adds	r6, #1
 801437c:	e7d9      	b.n	8014332 <_printf_common+0x8e>
	...

08014380 <_printf_i>:
 8014380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014384:	7e0f      	ldrb	r7, [r1, #24]
 8014386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014388:	2f78      	cmp	r7, #120	; 0x78
 801438a:	4691      	mov	r9, r2
 801438c:	4680      	mov	r8, r0
 801438e:	460c      	mov	r4, r1
 8014390:	469a      	mov	sl, r3
 8014392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014396:	d807      	bhi.n	80143a8 <_printf_i+0x28>
 8014398:	2f62      	cmp	r7, #98	; 0x62
 801439a:	d80a      	bhi.n	80143b2 <_printf_i+0x32>
 801439c:	2f00      	cmp	r7, #0
 801439e:	f000 80d4 	beq.w	801454a <_printf_i+0x1ca>
 80143a2:	2f58      	cmp	r7, #88	; 0x58
 80143a4:	f000 80c0 	beq.w	8014528 <_printf_i+0x1a8>
 80143a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143b0:	e03a      	b.n	8014428 <_printf_i+0xa8>
 80143b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143b6:	2b15      	cmp	r3, #21
 80143b8:	d8f6      	bhi.n	80143a8 <_printf_i+0x28>
 80143ba:	a101      	add	r1, pc, #4	; (adr r1, 80143c0 <_printf_i+0x40>)
 80143bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80143c0:	08014419 	.word	0x08014419
 80143c4:	0801442d 	.word	0x0801442d
 80143c8:	080143a9 	.word	0x080143a9
 80143cc:	080143a9 	.word	0x080143a9
 80143d0:	080143a9 	.word	0x080143a9
 80143d4:	080143a9 	.word	0x080143a9
 80143d8:	0801442d 	.word	0x0801442d
 80143dc:	080143a9 	.word	0x080143a9
 80143e0:	080143a9 	.word	0x080143a9
 80143e4:	080143a9 	.word	0x080143a9
 80143e8:	080143a9 	.word	0x080143a9
 80143ec:	08014531 	.word	0x08014531
 80143f0:	08014459 	.word	0x08014459
 80143f4:	080144eb 	.word	0x080144eb
 80143f8:	080143a9 	.word	0x080143a9
 80143fc:	080143a9 	.word	0x080143a9
 8014400:	08014553 	.word	0x08014553
 8014404:	080143a9 	.word	0x080143a9
 8014408:	08014459 	.word	0x08014459
 801440c:	080143a9 	.word	0x080143a9
 8014410:	080143a9 	.word	0x080143a9
 8014414:	080144f3 	.word	0x080144f3
 8014418:	682b      	ldr	r3, [r5, #0]
 801441a:	1d1a      	adds	r2, r3, #4
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	602a      	str	r2, [r5, #0]
 8014420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014428:	2301      	movs	r3, #1
 801442a:	e09f      	b.n	801456c <_printf_i+0x1ec>
 801442c:	6820      	ldr	r0, [r4, #0]
 801442e:	682b      	ldr	r3, [r5, #0]
 8014430:	0607      	lsls	r7, r0, #24
 8014432:	f103 0104 	add.w	r1, r3, #4
 8014436:	6029      	str	r1, [r5, #0]
 8014438:	d501      	bpl.n	801443e <_printf_i+0xbe>
 801443a:	681e      	ldr	r6, [r3, #0]
 801443c:	e003      	b.n	8014446 <_printf_i+0xc6>
 801443e:	0646      	lsls	r6, r0, #25
 8014440:	d5fb      	bpl.n	801443a <_printf_i+0xba>
 8014442:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014446:	2e00      	cmp	r6, #0
 8014448:	da03      	bge.n	8014452 <_printf_i+0xd2>
 801444a:	232d      	movs	r3, #45	; 0x2d
 801444c:	4276      	negs	r6, r6
 801444e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014452:	485a      	ldr	r0, [pc, #360]	; (80145bc <_printf_i+0x23c>)
 8014454:	230a      	movs	r3, #10
 8014456:	e012      	b.n	801447e <_printf_i+0xfe>
 8014458:	682b      	ldr	r3, [r5, #0]
 801445a:	6820      	ldr	r0, [r4, #0]
 801445c:	1d19      	adds	r1, r3, #4
 801445e:	6029      	str	r1, [r5, #0]
 8014460:	0605      	lsls	r5, r0, #24
 8014462:	d501      	bpl.n	8014468 <_printf_i+0xe8>
 8014464:	681e      	ldr	r6, [r3, #0]
 8014466:	e002      	b.n	801446e <_printf_i+0xee>
 8014468:	0641      	lsls	r1, r0, #25
 801446a:	d5fb      	bpl.n	8014464 <_printf_i+0xe4>
 801446c:	881e      	ldrh	r6, [r3, #0]
 801446e:	4853      	ldr	r0, [pc, #332]	; (80145bc <_printf_i+0x23c>)
 8014470:	2f6f      	cmp	r7, #111	; 0x6f
 8014472:	bf0c      	ite	eq
 8014474:	2308      	moveq	r3, #8
 8014476:	230a      	movne	r3, #10
 8014478:	2100      	movs	r1, #0
 801447a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801447e:	6865      	ldr	r5, [r4, #4]
 8014480:	60a5      	str	r5, [r4, #8]
 8014482:	2d00      	cmp	r5, #0
 8014484:	bfa2      	ittt	ge
 8014486:	6821      	ldrge	r1, [r4, #0]
 8014488:	f021 0104 	bicge.w	r1, r1, #4
 801448c:	6021      	strge	r1, [r4, #0]
 801448e:	b90e      	cbnz	r6, 8014494 <_printf_i+0x114>
 8014490:	2d00      	cmp	r5, #0
 8014492:	d04b      	beq.n	801452c <_printf_i+0x1ac>
 8014494:	4615      	mov	r5, r2
 8014496:	fbb6 f1f3 	udiv	r1, r6, r3
 801449a:	fb03 6711 	mls	r7, r3, r1, r6
 801449e:	5dc7      	ldrb	r7, [r0, r7]
 80144a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80144a4:	4637      	mov	r7, r6
 80144a6:	42bb      	cmp	r3, r7
 80144a8:	460e      	mov	r6, r1
 80144aa:	d9f4      	bls.n	8014496 <_printf_i+0x116>
 80144ac:	2b08      	cmp	r3, #8
 80144ae:	d10b      	bne.n	80144c8 <_printf_i+0x148>
 80144b0:	6823      	ldr	r3, [r4, #0]
 80144b2:	07de      	lsls	r6, r3, #31
 80144b4:	d508      	bpl.n	80144c8 <_printf_i+0x148>
 80144b6:	6923      	ldr	r3, [r4, #16]
 80144b8:	6861      	ldr	r1, [r4, #4]
 80144ba:	4299      	cmp	r1, r3
 80144bc:	bfde      	ittt	le
 80144be:	2330      	movle	r3, #48	; 0x30
 80144c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80144c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80144c8:	1b52      	subs	r2, r2, r5
 80144ca:	6122      	str	r2, [r4, #16]
 80144cc:	f8cd a000 	str.w	sl, [sp]
 80144d0:	464b      	mov	r3, r9
 80144d2:	aa03      	add	r2, sp, #12
 80144d4:	4621      	mov	r1, r4
 80144d6:	4640      	mov	r0, r8
 80144d8:	f7ff fee4 	bl	80142a4 <_printf_common>
 80144dc:	3001      	adds	r0, #1
 80144de:	d14a      	bne.n	8014576 <_printf_i+0x1f6>
 80144e0:	f04f 30ff 	mov.w	r0, #4294967295
 80144e4:	b004      	add	sp, #16
 80144e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ea:	6823      	ldr	r3, [r4, #0]
 80144ec:	f043 0320 	orr.w	r3, r3, #32
 80144f0:	6023      	str	r3, [r4, #0]
 80144f2:	4833      	ldr	r0, [pc, #204]	; (80145c0 <_printf_i+0x240>)
 80144f4:	2778      	movs	r7, #120	; 0x78
 80144f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	6829      	ldr	r1, [r5, #0]
 80144fe:	061f      	lsls	r7, r3, #24
 8014500:	f851 6b04 	ldr.w	r6, [r1], #4
 8014504:	d402      	bmi.n	801450c <_printf_i+0x18c>
 8014506:	065f      	lsls	r7, r3, #25
 8014508:	bf48      	it	mi
 801450a:	b2b6      	uxthmi	r6, r6
 801450c:	07df      	lsls	r7, r3, #31
 801450e:	bf48      	it	mi
 8014510:	f043 0320 	orrmi.w	r3, r3, #32
 8014514:	6029      	str	r1, [r5, #0]
 8014516:	bf48      	it	mi
 8014518:	6023      	strmi	r3, [r4, #0]
 801451a:	b91e      	cbnz	r6, 8014524 <_printf_i+0x1a4>
 801451c:	6823      	ldr	r3, [r4, #0]
 801451e:	f023 0320 	bic.w	r3, r3, #32
 8014522:	6023      	str	r3, [r4, #0]
 8014524:	2310      	movs	r3, #16
 8014526:	e7a7      	b.n	8014478 <_printf_i+0xf8>
 8014528:	4824      	ldr	r0, [pc, #144]	; (80145bc <_printf_i+0x23c>)
 801452a:	e7e4      	b.n	80144f6 <_printf_i+0x176>
 801452c:	4615      	mov	r5, r2
 801452e:	e7bd      	b.n	80144ac <_printf_i+0x12c>
 8014530:	682b      	ldr	r3, [r5, #0]
 8014532:	6826      	ldr	r6, [r4, #0]
 8014534:	6961      	ldr	r1, [r4, #20]
 8014536:	1d18      	adds	r0, r3, #4
 8014538:	6028      	str	r0, [r5, #0]
 801453a:	0635      	lsls	r5, r6, #24
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	d501      	bpl.n	8014544 <_printf_i+0x1c4>
 8014540:	6019      	str	r1, [r3, #0]
 8014542:	e002      	b.n	801454a <_printf_i+0x1ca>
 8014544:	0670      	lsls	r0, r6, #25
 8014546:	d5fb      	bpl.n	8014540 <_printf_i+0x1c0>
 8014548:	8019      	strh	r1, [r3, #0]
 801454a:	2300      	movs	r3, #0
 801454c:	6123      	str	r3, [r4, #16]
 801454e:	4615      	mov	r5, r2
 8014550:	e7bc      	b.n	80144cc <_printf_i+0x14c>
 8014552:	682b      	ldr	r3, [r5, #0]
 8014554:	1d1a      	adds	r2, r3, #4
 8014556:	602a      	str	r2, [r5, #0]
 8014558:	681d      	ldr	r5, [r3, #0]
 801455a:	6862      	ldr	r2, [r4, #4]
 801455c:	2100      	movs	r1, #0
 801455e:	4628      	mov	r0, r5
 8014560:	f7eb fed6 	bl	8000310 <memchr>
 8014564:	b108      	cbz	r0, 801456a <_printf_i+0x1ea>
 8014566:	1b40      	subs	r0, r0, r5
 8014568:	6060      	str	r0, [r4, #4]
 801456a:	6863      	ldr	r3, [r4, #4]
 801456c:	6123      	str	r3, [r4, #16]
 801456e:	2300      	movs	r3, #0
 8014570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014574:	e7aa      	b.n	80144cc <_printf_i+0x14c>
 8014576:	6923      	ldr	r3, [r4, #16]
 8014578:	462a      	mov	r2, r5
 801457a:	4649      	mov	r1, r9
 801457c:	4640      	mov	r0, r8
 801457e:	47d0      	blx	sl
 8014580:	3001      	adds	r0, #1
 8014582:	d0ad      	beq.n	80144e0 <_printf_i+0x160>
 8014584:	6823      	ldr	r3, [r4, #0]
 8014586:	079b      	lsls	r3, r3, #30
 8014588:	d413      	bmi.n	80145b2 <_printf_i+0x232>
 801458a:	68e0      	ldr	r0, [r4, #12]
 801458c:	9b03      	ldr	r3, [sp, #12]
 801458e:	4298      	cmp	r0, r3
 8014590:	bfb8      	it	lt
 8014592:	4618      	movlt	r0, r3
 8014594:	e7a6      	b.n	80144e4 <_printf_i+0x164>
 8014596:	2301      	movs	r3, #1
 8014598:	4632      	mov	r2, r6
 801459a:	4649      	mov	r1, r9
 801459c:	4640      	mov	r0, r8
 801459e:	47d0      	blx	sl
 80145a0:	3001      	adds	r0, #1
 80145a2:	d09d      	beq.n	80144e0 <_printf_i+0x160>
 80145a4:	3501      	adds	r5, #1
 80145a6:	68e3      	ldr	r3, [r4, #12]
 80145a8:	9903      	ldr	r1, [sp, #12]
 80145aa:	1a5b      	subs	r3, r3, r1
 80145ac:	42ab      	cmp	r3, r5
 80145ae:	dcf2      	bgt.n	8014596 <_printf_i+0x216>
 80145b0:	e7eb      	b.n	801458a <_printf_i+0x20a>
 80145b2:	2500      	movs	r5, #0
 80145b4:	f104 0619 	add.w	r6, r4, #25
 80145b8:	e7f5      	b.n	80145a6 <_printf_i+0x226>
 80145ba:	bf00      	nop
 80145bc:	08017dfd 	.word	0x08017dfd
 80145c0:	08017e0e 	.word	0x08017e0e

080145c4 <_scanf_chars>:
 80145c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145c8:	4615      	mov	r5, r2
 80145ca:	688a      	ldr	r2, [r1, #8]
 80145cc:	4680      	mov	r8, r0
 80145ce:	460c      	mov	r4, r1
 80145d0:	b932      	cbnz	r2, 80145e0 <_scanf_chars+0x1c>
 80145d2:	698a      	ldr	r2, [r1, #24]
 80145d4:	2a00      	cmp	r2, #0
 80145d6:	bf0c      	ite	eq
 80145d8:	2201      	moveq	r2, #1
 80145da:	f04f 32ff 	movne.w	r2, #4294967295
 80145de:	608a      	str	r2, [r1, #8]
 80145e0:	6822      	ldr	r2, [r4, #0]
 80145e2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014674 <_scanf_chars+0xb0>
 80145e6:	06d1      	lsls	r1, r2, #27
 80145e8:	bf5f      	itttt	pl
 80145ea:	681a      	ldrpl	r2, [r3, #0]
 80145ec:	1d11      	addpl	r1, r2, #4
 80145ee:	6019      	strpl	r1, [r3, #0]
 80145f0:	6816      	ldrpl	r6, [r2, #0]
 80145f2:	2700      	movs	r7, #0
 80145f4:	69a0      	ldr	r0, [r4, #24]
 80145f6:	b188      	cbz	r0, 801461c <_scanf_chars+0x58>
 80145f8:	2801      	cmp	r0, #1
 80145fa:	d107      	bne.n	801460c <_scanf_chars+0x48>
 80145fc:	682a      	ldr	r2, [r5, #0]
 80145fe:	7811      	ldrb	r1, [r2, #0]
 8014600:	6962      	ldr	r2, [r4, #20]
 8014602:	5c52      	ldrb	r2, [r2, r1]
 8014604:	b952      	cbnz	r2, 801461c <_scanf_chars+0x58>
 8014606:	2f00      	cmp	r7, #0
 8014608:	d031      	beq.n	801466e <_scanf_chars+0xaa>
 801460a:	e022      	b.n	8014652 <_scanf_chars+0x8e>
 801460c:	2802      	cmp	r0, #2
 801460e:	d120      	bne.n	8014652 <_scanf_chars+0x8e>
 8014610:	682b      	ldr	r3, [r5, #0]
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014618:	071b      	lsls	r3, r3, #28
 801461a:	d41a      	bmi.n	8014652 <_scanf_chars+0x8e>
 801461c:	6823      	ldr	r3, [r4, #0]
 801461e:	06da      	lsls	r2, r3, #27
 8014620:	bf5e      	ittt	pl
 8014622:	682b      	ldrpl	r3, [r5, #0]
 8014624:	781b      	ldrbpl	r3, [r3, #0]
 8014626:	f806 3b01 	strbpl.w	r3, [r6], #1
 801462a:	682a      	ldr	r2, [r5, #0]
 801462c:	686b      	ldr	r3, [r5, #4]
 801462e:	3201      	adds	r2, #1
 8014630:	602a      	str	r2, [r5, #0]
 8014632:	68a2      	ldr	r2, [r4, #8]
 8014634:	3b01      	subs	r3, #1
 8014636:	3a01      	subs	r2, #1
 8014638:	606b      	str	r3, [r5, #4]
 801463a:	3701      	adds	r7, #1
 801463c:	60a2      	str	r2, [r4, #8]
 801463e:	b142      	cbz	r2, 8014652 <_scanf_chars+0x8e>
 8014640:	2b00      	cmp	r3, #0
 8014642:	dcd7      	bgt.n	80145f4 <_scanf_chars+0x30>
 8014644:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014648:	4629      	mov	r1, r5
 801464a:	4640      	mov	r0, r8
 801464c:	4798      	blx	r3
 801464e:	2800      	cmp	r0, #0
 8014650:	d0d0      	beq.n	80145f4 <_scanf_chars+0x30>
 8014652:	6823      	ldr	r3, [r4, #0]
 8014654:	f013 0310 	ands.w	r3, r3, #16
 8014658:	d105      	bne.n	8014666 <_scanf_chars+0xa2>
 801465a:	68e2      	ldr	r2, [r4, #12]
 801465c:	3201      	adds	r2, #1
 801465e:	60e2      	str	r2, [r4, #12]
 8014660:	69a2      	ldr	r2, [r4, #24]
 8014662:	b102      	cbz	r2, 8014666 <_scanf_chars+0xa2>
 8014664:	7033      	strb	r3, [r6, #0]
 8014666:	6923      	ldr	r3, [r4, #16]
 8014668:	443b      	add	r3, r7
 801466a:	6123      	str	r3, [r4, #16]
 801466c:	2000      	movs	r0, #0
 801466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014672:	bf00      	nop
 8014674:	08017ae1 	.word	0x08017ae1

08014678 <_scanf_i>:
 8014678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	4698      	mov	r8, r3
 801467e:	4b74      	ldr	r3, [pc, #464]	; (8014850 <_scanf_i+0x1d8>)
 8014680:	460c      	mov	r4, r1
 8014682:	4682      	mov	sl, r0
 8014684:	4616      	mov	r6, r2
 8014686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801468a:	b087      	sub	sp, #28
 801468c:	ab03      	add	r3, sp, #12
 801468e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014692:	4b70      	ldr	r3, [pc, #448]	; (8014854 <_scanf_i+0x1dc>)
 8014694:	69a1      	ldr	r1, [r4, #24]
 8014696:	4a70      	ldr	r2, [pc, #448]	; (8014858 <_scanf_i+0x1e0>)
 8014698:	2903      	cmp	r1, #3
 801469a:	bf18      	it	ne
 801469c:	461a      	movne	r2, r3
 801469e:	68a3      	ldr	r3, [r4, #8]
 80146a0:	9201      	str	r2, [sp, #4]
 80146a2:	1e5a      	subs	r2, r3, #1
 80146a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80146a8:	bf88      	it	hi
 80146aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80146ae:	4627      	mov	r7, r4
 80146b0:	bf82      	ittt	hi
 80146b2:	eb03 0905 	addhi.w	r9, r3, r5
 80146b6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80146ba:	60a3      	strhi	r3, [r4, #8]
 80146bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80146c0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80146c4:	bf98      	it	ls
 80146c6:	f04f 0900 	movls.w	r9, #0
 80146ca:	6023      	str	r3, [r4, #0]
 80146cc:	463d      	mov	r5, r7
 80146ce:	f04f 0b00 	mov.w	fp, #0
 80146d2:	6831      	ldr	r1, [r6, #0]
 80146d4:	ab03      	add	r3, sp, #12
 80146d6:	7809      	ldrb	r1, [r1, #0]
 80146d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80146dc:	2202      	movs	r2, #2
 80146de:	f7eb fe17 	bl	8000310 <memchr>
 80146e2:	b328      	cbz	r0, 8014730 <_scanf_i+0xb8>
 80146e4:	f1bb 0f01 	cmp.w	fp, #1
 80146e8:	d159      	bne.n	801479e <_scanf_i+0x126>
 80146ea:	6862      	ldr	r2, [r4, #4]
 80146ec:	b92a      	cbnz	r2, 80146fa <_scanf_i+0x82>
 80146ee:	6822      	ldr	r2, [r4, #0]
 80146f0:	2308      	movs	r3, #8
 80146f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80146f6:	6063      	str	r3, [r4, #4]
 80146f8:	6022      	str	r2, [r4, #0]
 80146fa:	6822      	ldr	r2, [r4, #0]
 80146fc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014700:	6022      	str	r2, [r4, #0]
 8014702:	68a2      	ldr	r2, [r4, #8]
 8014704:	1e51      	subs	r1, r2, #1
 8014706:	60a1      	str	r1, [r4, #8]
 8014708:	b192      	cbz	r2, 8014730 <_scanf_i+0xb8>
 801470a:	6832      	ldr	r2, [r6, #0]
 801470c:	1c51      	adds	r1, r2, #1
 801470e:	6031      	str	r1, [r6, #0]
 8014710:	7812      	ldrb	r2, [r2, #0]
 8014712:	f805 2b01 	strb.w	r2, [r5], #1
 8014716:	6872      	ldr	r2, [r6, #4]
 8014718:	3a01      	subs	r2, #1
 801471a:	2a00      	cmp	r2, #0
 801471c:	6072      	str	r2, [r6, #4]
 801471e:	dc07      	bgt.n	8014730 <_scanf_i+0xb8>
 8014720:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014724:	4631      	mov	r1, r6
 8014726:	4650      	mov	r0, sl
 8014728:	4790      	blx	r2
 801472a:	2800      	cmp	r0, #0
 801472c:	f040 8085 	bne.w	801483a <_scanf_i+0x1c2>
 8014730:	f10b 0b01 	add.w	fp, fp, #1
 8014734:	f1bb 0f03 	cmp.w	fp, #3
 8014738:	d1cb      	bne.n	80146d2 <_scanf_i+0x5a>
 801473a:	6863      	ldr	r3, [r4, #4]
 801473c:	b90b      	cbnz	r3, 8014742 <_scanf_i+0xca>
 801473e:	230a      	movs	r3, #10
 8014740:	6063      	str	r3, [r4, #4]
 8014742:	6863      	ldr	r3, [r4, #4]
 8014744:	4945      	ldr	r1, [pc, #276]	; (801485c <_scanf_i+0x1e4>)
 8014746:	6960      	ldr	r0, [r4, #20]
 8014748:	1ac9      	subs	r1, r1, r3
 801474a:	f000 f949 	bl	80149e0 <__sccl>
 801474e:	f04f 0b00 	mov.w	fp, #0
 8014752:	68a3      	ldr	r3, [r4, #8]
 8014754:	6822      	ldr	r2, [r4, #0]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d03d      	beq.n	80147d6 <_scanf_i+0x15e>
 801475a:	6831      	ldr	r1, [r6, #0]
 801475c:	6960      	ldr	r0, [r4, #20]
 801475e:	f891 c000 	ldrb.w	ip, [r1]
 8014762:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014766:	2800      	cmp	r0, #0
 8014768:	d035      	beq.n	80147d6 <_scanf_i+0x15e>
 801476a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801476e:	d124      	bne.n	80147ba <_scanf_i+0x142>
 8014770:	0510      	lsls	r0, r2, #20
 8014772:	d522      	bpl.n	80147ba <_scanf_i+0x142>
 8014774:	f10b 0b01 	add.w	fp, fp, #1
 8014778:	f1b9 0f00 	cmp.w	r9, #0
 801477c:	d003      	beq.n	8014786 <_scanf_i+0x10e>
 801477e:	3301      	adds	r3, #1
 8014780:	f109 39ff 	add.w	r9, r9, #4294967295
 8014784:	60a3      	str	r3, [r4, #8]
 8014786:	6873      	ldr	r3, [r6, #4]
 8014788:	3b01      	subs	r3, #1
 801478a:	2b00      	cmp	r3, #0
 801478c:	6073      	str	r3, [r6, #4]
 801478e:	dd1b      	ble.n	80147c8 <_scanf_i+0x150>
 8014790:	6833      	ldr	r3, [r6, #0]
 8014792:	3301      	adds	r3, #1
 8014794:	6033      	str	r3, [r6, #0]
 8014796:	68a3      	ldr	r3, [r4, #8]
 8014798:	3b01      	subs	r3, #1
 801479a:	60a3      	str	r3, [r4, #8]
 801479c:	e7d9      	b.n	8014752 <_scanf_i+0xda>
 801479e:	f1bb 0f02 	cmp.w	fp, #2
 80147a2:	d1ae      	bne.n	8014702 <_scanf_i+0x8a>
 80147a4:	6822      	ldr	r2, [r4, #0]
 80147a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80147aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80147ae:	d1bf      	bne.n	8014730 <_scanf_i+0xb8>
 80147b0:	2310      	movs	r3, #16
 80147b2:	6063      	str	r3, [r4, #4]
 80147b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80147b8:	e7a2      	b.n	8014700 <_scanf_i+0x88>
 80147ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80147be:	6022      	str	r2, [r4, #0]
 80147c0:	780b      	ldrb	r3, [r1, #0]
 80147c2:	f805 3b01 	strb.w	r3, [r5], #1
 80147c6:	e7de      	b.n	8014786 <_scanf_i+0x10e>
 80147c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80147cc:	4631      	mov	r1, r6
 80147ce:	4650      	mov	r0, sl
 80147d0:	4798      	blx	r3
 80147d2:	2800      	cmp	r0, #0
 80147d4:	d0df      	beq.n	8014796 <_scanf_i+0x11e>
 80147d6:	6823      	ldr	r3, [r4, #0]
 80147d8:	05d9      	lsls	r1, r3, #23
 80147da:	d50d      	bpl.n	80147f8 <_scanf_i+0x180>
 80147dc:	42bd      	cmp	r5, r7
 80147de:	d909      	bls.n	80147f4 <_scanf_i+0x17c>
 80147e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80147e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80147e8:	4632      	mov	r2, r6
 80147ea:	4650      	mov	r0, sl
 80147ec:	4798      	blx	r3
 80147ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80147f2:	464d      	mov	r5, r9
 80147f4:	42bd      	cmp	r5, r7
 80147f6:	d028      	beq.n	801484a <_scanf_i+0x1d2>
 80147f8:	6822      	ldr	r2, [r4, #0]
 80147fa:	f012 0210 	ands.w	r2, r2, #16
 80147fe:	d113      	bne.n	8014828 <_scanf_i+0x1b0>
 8014800:	702a      	strb	r2, [r5, #0]
 8014802:	6863      	ldr	r3, [r4, #4]
 8014804:	9e01      	ldr	r6, [sp, #4]
 8014806:	4639      	mov	r1, r7
 8014808:	4650      	mov	r0, sl
 801480a:	47b0      	blx	r6
 801480c:	f8d8 3000 	ldr.w	r3, [r8]
 8014810:	6821      	ldr	r1, [r4, #0]
 8014812:	1d1a      	adds	r2, r3, #4
 8014814:	f8c8 2000 	str.w	r2, [r8]
 8014818:	f011 0f20 	tst.w	r1, #32
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	d00f      	beq.n	8014840 <_scanf_i+0x1c8>
 8014820:	6018      	str	r0, [r3, #0]
 8014822:	68e3      	ldr	r3, [r4, #12]
 8014824:	3301      	adds	r3, #1
 8014826:	60e3      	str	r3, [r4, #12]
 8014828:	6923      	ldr	r3, [r4, #16]
 801482a:	1bed      	subs	r5, r5, r7
 801482c:	445d      	add	r5, fp
 801482e:	442b      	add	r3, r5
 8014830:	6123      	str	r3, [r4, #16]
 8014832:	2000      	movs	r0, #0
 8014834:	b007      	add	sp, #28
 8014836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801483a:	f04f 0b00 	mov.w	fp, #0
 801483e:	e7ca      	b.n	80147d6 <_scanf_i+0x15e>
 8014840:	07ca      	lsls	r2, r1, #31
 8014842:	bf4c      	ite	mi
 8014844:	8018      	strhmi	r0, [r3, #0]
 8014846:	6018      	strpl	r0, [r3, #0]
 8014848:	e7eb      	b.n	8014822 <_scanf_i+0x1aa>
 801484a:	2001      	movs	r0, #1
 801484c:	e7f2      	b.n	8014834 <_scanf_i+0x1bc>
 801484e:	bf00      	nop
 8014850:	08014ec0 	.word	0x08014ec0
 8014854:	08014d11 	.word	0x08014d11
 8014858:	08012369 	.word	0x08012369
 801485c:	08017e2f 	.word	0x08017e2f

08014860 <__sflush_r>:
 8014860:	898a      	ldrh	r2, [r1, #12]
 8014862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014866:	4605      	mov	r5, r0
 8014868:	0710      	lsls	r0, r2, #28
 801486a:	460c      	mov	r4, r1
 801486c:	d458      	bmi.n	8014920 <__sflush_r+0xc0>
 801486e:	684b      	ldr	r3, [r1, #4]
 8014870:	2b00      	cmp	r3, #0
 8014872:	dc05      	bgt.n	8014880 <__sflush_r+0x20>
 8014874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014876:	2b00      	cmp	r3, #0
 8014878:	dc02      	bgt.n	8014880 <__sflush_r+0x20>
 801487a:	2000      	movs	r0, #0
 801487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014882:	2e00      	cmp	r6, #0
 8014884:	d0f9      	beq.n	801487a <__sflush_r+0x1a>
 8014886:	2300      	movs	r3, #0
 8014888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801488c:	682f      	ldr	r7, [r5, #0]
 801488e:	6a21      	ldr	r1, [r4, #32]
 8014890:	602b      	str	r3, [r5, #0]
 8014892:	d032      	beq.n	80148fa <__sflush_r+0x9a>
 8014894:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014896:	89a3      	ldrh	r3, [r4, #12]
 8014898:	075a      	lsls	r2, r3, #29
 801489a:	d505      	bpl.n	80148a8 <__sflush_r+0x48>
 801489c:	6863      	ldr	r3, [r4, #4]
 801489e:	1ac0      	subs	r0, r0, r3
 80148a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148a2:	b10b      	cbz	r3, 80148a8 <__sflush_r+0x48>
 80148a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148a6:	1ac0      	subs	r0, r0, r3
 80148a8:	2300      	movs	r3, #0
 80148aa:	4602      	mov	r2, r0
 80148ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148ae:	6a21      	ldr	r1, [r4, #32]
 80148b0:	4628      	mov	r0, r5
 80148b2:	47b0      	blx	r6
 80148b4:	1c43      	adds	r3, r0, #1
 80148b6:	89a3      	ldrh	r3, [r4, #12]
 80148b8:	d106      	bne.n	80148c8 <__sflush_r+0x68>
 80148ba:	6829      	ldr	r1, [r5, #0]
 80148bc:	291d      	cmp	r1, #29
 80148be:	d82b      	bhi.n	8014918 <__sflush_r+0xb8>
 80148c0:	4a29      	ldr	r2, [pc, #164]	; (8014968 <__sflush_r+0x108>)
 80148c2:	410a      	asrs	r2, r1
 80148c4:	07d6      	lsls	r6, r2, #31
 80148c6:	d427      	bmi.n	8014918 <__sflush_r+0xb8>
 80148c8:	2200      	movs	r2, #0
 80148ca:	6062      	str	r2, [r4, #4]
 80148cc:	04d9      	lsls	r1, r3, #19
 80148ce:	6922      	ldr	r2, [r4, #16]
 80148d0:	6022      	str	r2, [r4, #0]
 80148d2:	d504      	bpl.n	80148de <__sflush_r+0x7e>
 80148d4:	1c42      	adds	r2, r0, #1
 80148d6:	d101      	bne.n	80148dc <__sflush_r+0x7c>
 80148d8:	682b      	ldr	r3, [r5, #0]
 80148da:	b903      	cbnz	r3, 80148de <__sflush_r+0x7e>
 80148dc:	6560      	str	r0, [r4, #84]	; 0x54
 80148de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148e0:	602f      	str	r7, [r5, #0]
 80148e2:	2900      	cmp	r1, #0
 80148e4:	d0c9      	beq.n	801487a <__sflush_r+0x1a>
 80148e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148ea:	4299      	cmp	r1, r3
 80148ec:	d002      	beq.n	80148f4 <__sflush_r+0x94>
 80148ee:	4628      	mov	r0, r5
 80148f0:	f7fd fff4 	bl	80128dc <_free_r>
 80148f4:	2000      	movs	r0, #0
 80148f6:	6360      	str	r0, [r4, #52]	; 0x34
 80148f8:	e7c0      	b.n	801487c <__sflush_r+0x1c>
 80148fa:	2301      	movs	r3, #1
 80148fc:	4628      	mov	r0, r5
 80148fe:	47b0      	blx	r6
 8014900:	1c41      	adds	r1, r0, #1
 8014902:	d1c8      	bne.n	8014896 <__sflush_r+0x36>
 8014904:	682b      	ldr	r3, [r5, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d0c5      	beq.n	8014896 <__sflush_r+0x36>
 801490a:	2b1d      	cmp	r3, #29
 801490c:	d001      	beq.n	8014912 <__sflush_r+0xb2>
 801490e:	2b16      	cmp	r3, #22
 8014910:	d101      	bne.n	8014916 <__sflush_r+0xb6>
 8014912:	602f      	str	r7, [r5, #0]
 8014914:	e7b1      	b.n	801487a <__sflush_r+0x1a>
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801491c:	81a3      	strh	r3, [r4, #12]
 801491e:	e7ad      	b.n	801487c <__sflush_r+0x1c>
 8014920:	690f      	ldr	r7, [r1, #16]
 8014922:	2f00      	cmp	r7, #0
 8014924:	d0a9      	beq.n	801487a <__sflush_r+0x1a>
 8014926:	0793      	lsls	r3, r2, #30
 8014928:	680e      	ldr	r6, [r1, #0]
 801492a:	bf08      	it	eq
 801492c:	694b      	ldreq	r3, [r1, #20]
 801492e:	600f      	str	r7, [r1, #0]
 8014930:	bf18      	it	ne
 8014932:	2300      	movne	r3, #0
 8014934:	eba6 0807 	sub.w	r8, r6, r7
 8014938:	608b      	str	r3, [r1, #8]
 801493a:	f1b8 0f00 	cmp.w	r8, #0
 801493e:	dd9c      	ble.n	801487a <__sflush_r+0x1a>
 8014940:	6a21      	ldr	r1, [r4, #32]
 8014942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014944:	4643      	mov	r3, r8
 8014946:	463a      	mov	r2, r7
 8014948:	4628      	mov	r0, r5
 801494a:	47b0      	blx	r6
 801494c:	2800      	cmp	r0, #0
 801494e:	dc06      	bgt.n	801495e <__sflush_r+0xfe>
 8014950:	89a3      	ldrh	r3, [r4, #12]
 8014952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014956:	81a3      	strh	r3, [r4, #12]
 8014958:	f04f 30ff 	mov.w	r0, #4294967295
 801495c:	e78e      	b.n	801487c <__sflush_r+0x1c>
 801495e:	4407      	add	r7, r0
 8014960:	eba8 0800 	sub.w	r8, r8, r0
 8014964:	e7e9      	b.n	801493a <__sflush_r+0xda>
 8014966:	bf00      	nop
 8014968:	dfbffffe 	.word	0xdfbffffe

0801496c <_fflush_r>:
 801496c:	b538      	push	{r3, r4, r5, lr}
 801496e:	690b      	ldr	r3, [r1, #16]
 8014970:	4605      	mov	r5, r0
 8014972:	460c      	mov	r4, r1
 8014974:	b913      	cbnz	r3, 801497c <_fflush_r+0x10>
 8014976:	2500      	movs	r5, #0
 8014978:	4628      	mov	r0, r5
 801497a:	bd38      	pop	{r3, r4, r5, pc}
 801497c:	b118      	cbz	r0, 8014986 <_fflush_r+0x1a>
 801497e:	6a03      	ldr	r3, [r0, #32]
 8014980:	b90b      	cbnz	r3, 8014986 <_fflush_r+0x1a>
 8014982:	f7fd fd7f 	bl	8012484 <__sinit>
 8014986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d0f3      	beq.n	8014976 <_fflush_r+0xa>
 801498e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014990:	07d0      	lsls	r0, r2, #31
 8014992:	d404      	bmi.n	801499e <_fflush_r+0x32>
 8014994:	0599      	lsls	r1, r3, #22
 8014996:	d402      	bmi.n	801499e <_fflush_r+0x32>
 8014998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801499a:	f7fd ff68 	bl	801286e <__retarget_lock_acquire_recursive>
 801499e:	4628      	mov	r0, r5
 80149a0:	4621      	mov	r1, r4
 80149a2:	f7ff ff5d 	bl	8014860 <__sflush_r>
 80149a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149a8:	07da      	lsls	r2, r3, #31
 80149aa:	4605      	mov	r5, r0
 80149ac:	d4e4      	bmi.n	8014978 <_fflush_r+0xc>
 80149ae:	89a3      	ldrh	r3, [r4, #12]
 80149b0:	059b      	lsls	r3, r3, #22
 80149b2:	d4e1      	bmi.n	8014978 <_fflush_r+0xc>
 80149b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149b6:	f7fd ff5b 	bl	8012870 <__retarget_lock_release_recursive>
 80149ba:	e7dd      	b.n	8014978 <_fflush_r+0xc>

080149bc <fiprintf>:
 80149bc:	b40e      	push	{r1, r2, r3}
 80149be:	b503      	push	{r0, r1, lr}
 80149c0:	4601      	mov	r1, r0
 80149c2:	ab03      	add	r3, sp, #12
 80149c4:	4805      	ldr	r0, [pc, #20]	; (80149dc <fiprintf+0x20>)
 80149c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80149ca:	6800      	ldr	r0, [r0, #0]
 80149cc:	9301      	str	r3, [sp, #4]
 80149ce:	f7ff fb4f 	bl	8014070 <_vfiprintf_r>
 80149d2:	b002      	add	sp, #8
 80149d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80149d8:	b003      	add	sp, #12
 80149da:	4770      	bx	lr
 80149dc:	24000208 	.word	0x24000208

080149e0 <__sccl>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	780b      	ldrb	r3, [r1, #0]
 80149e4:	4604      	mov	r4, r0
 80149e6:	2b5e      	cmp	r3, #94	; 0x5e
 80149e8:	bf0b      	itete	eq
 80149ea:	784b      	ldrbeq	r3, [r1, #1]
 80149ec:	1c4a      	addne	r2, r1, #1
 80149ee:	1c8a      	addeq	r2, r1, #2
 80149f0:	2100      	movne	r1, #0
 80149f2:	bf08      	it	eq
 80149f4:	2101      	moveq	r1, #1
 80149f6:	3801      	subs	r0, #1
 80149f8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80149fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014a00:	42a8      	cmp	r0, r5
 8014a02:	d1fb      	bne.n	80149fc <__sccl+0x1c>
 8014a04:	b90b      	cbnz	r3, 8014a0a <__sccl+0x2a>
 8014a06:	1e50      	subs	r0, r2, #1
 8014a08:	bd70      	pop	{r4, r5, r6, pc}
 8014a0a:	f081 0101 	eor.w	r1, r1, #1
 8014a0e:	54e1      	strb	r1, [r4, r3]
 8014a10:	4610      	mov	r0, r2
 8014a12:	4602      	mov	r2, r0
 8014a14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014a18:	2d2d      	cmp	r5, #45	; 0x2d
 8014a1a:	d005      	beq.n	8014a28 <__sccl+0x48>
 8014a1c:	2d5d      	cmp	r5, #93	; 0x5d
 8014a1e:	d016      	beq.n	8014a4e <__sccl+0x6e>
 8014a20:	2d00      	cmp	r5, #0
 8014a22:	d0f1      	beq.n	8014a08 <__sccl+0x28>
 8014a24:	462b      	mov	r3, r5
 8014a26:	e7f2      	b.n	8014a0e <__sccl+0x2e>
 8014a28:	7846      	ldrb	r6, [r0, #1]
 8014a2a:	2e5d      	cmp	r6, #93	; 0x5d
 8014a2c:	d0fa      	beq.n	8014a24 <__sccl+0x44>
 8014a2e:	42b3      	cmp	r3, r6
 8014a30:	dcf8      	bgt.n	8014a24 <__sccl+0x44>
 8014a32:	3002      	adds	r0, #2
 8014a34:	461a      	mov	r2, r3
 8014a36:	3201      	adds	r2, #1
 8014a38:	4296      	cmp	r6, r2
 8014a3a:	54a1      	strb	r1, [r4, r2]
 8014a3c:	dcfb      	bgt.n	8014a36 <__sccl+0x56>
 8014a3e:	1af2      	subs	r2, r6, r3
 8014a40:	3a01      	subs	r2, #1
 8014a42:	1c5d      	adds	r5, r3, #1
 8014a44:	42b3      	cmp	r3, r6
 8014a46:	bfa8      	it	ge
 8014a48:	2200      	movge	r2, #0
 8014a4a:	18ab      	adds	r3, r5, r2
 8014a4c:	e7e1      	b.n	8014a12 <__sccl+0x32>
 8014a4e:	4610      	mov	r0, r2
 8014a50:	e7da      	b.n	8014a08 <__sccl+0x28>

08014a52 <__submore>:
 8014a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a56:	460c      	mov	r4, r1
 8014a58:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a5e:	4299      	cmp	r1, r3
 8014a60:	d11d      	bne.n	8014a9e <__submore+0x4c>
 8014a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014a66:	f7fc fd23 	bl	80114b0 <_malloc_r>
 8014a6a:	b918      	cbnz	r0, 8014a74 <__submore+0x22>
 8014a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a78:	63a3      	str	r3, [r4, #56]	; 0x38
 8014a7a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8014a80:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014a84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014a88:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014a8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014a90:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014a94:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014a98:	6020      	str	r0, [r4, #0]
 8014a9a:	2000      	movs	r0, #0
 8014a9c:	e7e8      	b.n	8014a70 <__submore+0x1e>
 8014a9e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014aa0:	0077      	lsls	r7, r6, #1
 8014aa2:	463a      	mov	r2, r7
 8014aa4:	f7fc fdd6 	bl	8011654 <_realloc_r>
 8014aa8:	4605      	mov	r5, r0
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d0de      	beq.n	8014a6c <__submore+0x1a>
 8014aae:	eb00 0806 	add.w	r8, r0, r6
 8014ab2:	4601      	mov	r1, r0
 8014ab4:	4632      	mov	r2, r6
 8014ab6:	4640      	mov	r0, r8
 8014ab8:	f7fd fedb 	bl	8012872 <memcpy>
 8014abc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014ac0:	f8c4 8000 	str.w	r8, [r4]
 8014ac4:	e7e9      	b.n	8014a9a <__submore+0x48>

08014ac6 <__swbuf_r>:
 8014ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac8:	460e      	mov	r6, r1
 8014aca:	4614      	mov	r4, r2
 8014acc:	4605      	mov	r5, r0
 8014ace:	b118      	cbz	r0, 8014ad8 <__swbuf_r+0x12>
 8014ad0:	6a03      	ldr	r3, [r0, #32]
 8014ad2:	b90b      	cbnz	r3, 8014ad8 <__swbuf_r+0x12>
 8014ad4:	f7fd fcd6 	bl	8012484 <__sinit>
 8014ad8:	69a3      	ldr	r3, [r4, #24]
 8014ada:	60a3      	str	r3, [r4, #8]
 8014adc:	89a3      	ldrh	r3, [r4, #12]
 8014ade:	071a      	lsls	r2, r3, #28
 8014ae0:	d525      	bpl.n	8014b2e <__swbuf_r+0x68>
 8014ae2:	6923      	ldr	r3, [r4, #16]
 8014ae4:	b31b      	cbz	r3, 8014b2e <__swbuf_r+0x68>
 8014ae6:	6823      	ldr	r3, [r4, #0]
 8014ae8:	6922      	ldr	r2, [r4, #16]
 8014aea:	1a98      	subs	r0, r3, r2
 8014aec:	6963      	ldr	r3, [r4, #20]
 8014aee:	b2f6      	uxtb	r6, r6
 8014af0:	4283      	cmp	r3, r0
 8014af2:	4637      	mov	r7, r6
 8014af4:	dc04      	bgt.n	8014b00 <__swbuf_r+0x3a>
 8014af6:	4621      	mov	r1, r4
 8014af8:	4628      	mov	r0, r5
 8014afa:	f7ff ff37 	bl	801496c <_fflush_r>
 8014afe:	b9e0      	cbnz	r0, 8014b3a <__swbuf_r+0x74>
 8014b00:	68a3      	ldr	r3, [r4, #8]
 8014b02:	3b01      	subs	r3, #1
 8014b04:	60a3      	str	r3, [r4, #8]
 8014b06:	6823      	ldr	r3, [r4, #0]
 8014b08:	1c5a      	adds	r2, r3, #1
 8014b0a:	6022      	str	r2, [r4, #0]
 8014b0c:	701e      	strb	r6, [r3, #0]
 8014b0e:	6962      	ldr	r2, [r4, #20]
 8014b10:	1c43      	adds	r3, r0, #1
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d004      	beq.n	8014b20 <__swbuf_r+0x5a>
 8014b16:	89a3      	ldrh	r3, [r4, #12]
 8014b18:	07db      	lsls	r3, r3, #31
 8014b1a:	d506      	bpl.n	8014b2a <__swbuf_r+0x64>
 8014b1c:	2e0a      	cmp	r6, #10
 8014b1e:	d104      	bne.n	8014b2a <__swbuf_r+0x64>
 8014b20:	4621      	mov	r1, r4
 8014b22:	4628      	mov	r0, r5
 8014b24:	f7ff ff22 	bl	801496c <_fflush_r>
 8014b28:	b938      	cbnz	r0, 8014b3a <__swbuf_r+0x74>
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b2e:	4621      	mov	r1, r4
 8014b30:	4628      	mov	r0, r5
 8014b32:	f000 f805 	bl	8014b40 <__swsetup_r>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d0d5      	beq.n	8014ae6 <__swbuf_r+0x20>
 8014b3a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b3e:	e7f4      	b.n	8014b2a <__swbuf_r+0x64>

08014b40 <__swsetup_r>:
 8014b40:	b538      	push	{r3, r4, r5, lr}
 8014b42:	4b2a      	ldr	r3, [pc, #168]	; (8014bec <__swsetup_r+0xac>)
 8014b44:	4605      	mov	r5, r0
 8014b46:	6818      	ldr	r0, [r3, #0]
 8014b48:	460c      	mov	r4, r1
 8014b4a:	b118      	cbz	r0, 8014b54 <__swsetup_r+0x14>
 8014b4c:	6a03      	ldr	r3, [r0, #32]
 8014b4e:	b90b      	cbnz	r3, 8014b54 <__swsetup_r+0x14>
 8014b50:	f7fd fc98 	bl	8012484 <__sinit>
 8014b54:	89a3      	ldrh	r3, [r4, #12]
 8014b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b5a:	0718      	lsls	r0, r3, #28
 8014b5c:	d422      	bmi.n	8014ba4 <__swsetup_r+0x64>
 8014b5e:	06d9      	lsls	r1, r3, #27
 8014b60:	d407      	bmi.n	8014b72 <__swsetup_r+0x32>
 8014b62:	2309      	movs	r3, #9
 8014b64:	602b      	str	r3, [r5, #0]
 8014b66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b6a:	81a3      	strh	r3, [r4, #12]
 8014b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b70:	e034      	b.n	8014bdc <__swsetup_r+0x9c>
 8014b72:	0758      	lsls	r0, r3, #29
 8014b74:	d512      	bpl.n	8014b9c <__swsetup_r+0x5c>
 8014b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b78:	b141      	cbz	r1, 8014b8c <__swsetup_r+0x4c>
 8014b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b7e:	4299      	cmp	r1, r3
 8014b80:	d002      	beq.n	8014b88 <__swsetup_r+0x48>
 8014b82:	4628      	mov	r0, r5
 8014b84:	f7fd feaa 	bl	80128dc <_free_r>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	6363      	str	r3, [r4, #52]	; 0x34
 8014b8c:	89a3      	ldrh	r3, [r4, #12]
 8014b8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b92:	81a3      	strh	r3, [r4, #12]
 8014b94:	2300      	movs	r3, #0
 8014b96:	6063      	str	r3, [r4, #4]
 8014b98:	6923      	ldr	r3, [r4, #16]
 8014b9a:	6023      	str	r3, [r4, #0]
 8014b9c:	89a3      	ldrh	r3, [r4, #12]
 8014b9e:	f043 0308 	orr.w	r3, r3, #8
 8014ba2:	81a3      	strh	r3, [r4, #12]
 8014ba4:	6923      	ldr	r3, [r4, #16]
 8014ba6:	b94b      	cbnz	r3, 8014bbc <__swsetup_r+0x7c>
 8014ba8:	89a3      	ldrh	r3, [r4, #12]
 8014baa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bb2:	d003      	beq.n	8014bbc <__swsetup_r+0x7c>
 8014bb4:	4621      	mov	r1, r4
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	f000 f8d2 	bl	8014d60 <__smakebuf_r>
 8014bbc:	89a0      	ldrh	r0, [r4, #12]
 8014bbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bc2:	f010 0301 	ands.w	r3, r0, #1
 8014bc6:	d00a      	beq.n	8014bde <__swsetup_r+0x9e>
 8014bc8:	2300      	movs	r3, #0
 8014bca:	60a3      	str	r3, [r4, #8]
 8014bcc:	6963      	ldr	r3, [r4, #20]
 8014bce:	425b      	negs	r3, r3
 8014bd0:	61a3      	str	r3, [r4, #24]
 8014bd2:	6923      	ldr	r3, [r4, #16]
 8014bd4:	b943      	cbnz	r3, 8014be8 <__swsetup_r+0xa8>
 8014bd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014bda:	d1c4      	bne.n	8014b66 <__swsetup_r+0x26>
 8014bdc:	bd38      	pop	{r3, r4, r5, pc}
 8014bde:	0781      	lsls	r1, r0, #30
 8014be0:	bf58      	it	pl
 8014be2:	6963      	ldrpl	r3, [r4, #20]
 8014be4:	60a3      	str	r3, [r4, #8]
 8014be6:	e7f4      	b.n	8014bd2 <__swsetup_r+0x92>
 8014be8:	2000      	movs	r0, #0
 8014bea:	e7f7      	b.n	8014bdc <__swsetup_r+0x9c>
 8014bec:	24000208 	.word	0x24000208

08014bf0 <abort>:
 8014bf0:	b508      	push	{r3, lr}
 8014bf2:	2006      	movs	r0, #6
 8014bf4:	f000 f918 	bl	8014e28 <raise>
 8014bf8:	2001      	movs	r0, #1
 8014bfa:	f7ed fa31 	bl	8002060 <_exit>

08014bfe <_calloc_r>:
 8014bfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c00:	fba1 2402 	umull	r2, r4, r1, r2
 8014c04:	b94c      	cbnz	r4, 8014c1a <_calloc_r+0x1c>
 8014c06:	4611      	mov	r1, r2
 8014c08:	9201      	str	r2, [sp, #4]
 8014c0a:	f7fc fc51 	bl	80114b0 <_malloc_r>
 8014c0e:	9a01      	ldr	r2, [sp, #4]
 8014c10:	4605      	mov	r5, r0
 8014c12:	b930      	cbnz	r0, 8014c22 <_calloc_r+0x24>
 8014c14:	4628      	mov	r0, r5
 8014c16:	b003      	add	sp, #12
 8014c18:	bd30      	pop	{r4, r5, pc}
 8014c1a:	220c      	movs	r2, #12
 8014c1c:	6002      	str	r2, [r0, #0]
 8014c1e:	2500      	movs	r5, #0
 8014c20:	e7f8      	b.n	8014c14 <_calloc_r+0x16>
 8014c22:	4621      	mov	r1, r4
 8014c24:	f7fd fd31 	bl	801268a <memset>
 8014c28:	e7f4      	b.n	8014c14 <_calloc_r+0x16>
	...

08014c2c <_strtoul_l.constprop.0>:
 8014c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c30:	4f36      	ldr	r7, [pc, #216]	; (8014d0c <_strtoul_l.constprop.0+0xe0>)
 8014c32:	4686      	mov	lr, r0
 8014c34:	460d      	mov	r5, r1
 8014c36:	4628      	mov	r0, r5
 8014c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c3c:	5d3e      	ldrb	r6, [r7, r4]
 8014c3e:	f016 0608 	ands.w	r6, r6, #8
 8014c42:	d1f8      	bne.n	8014c36 <_strtoul_l.constprop.0+0xa>
 8014c44:	2c2d      	cmp	r4, #45	; 0x2d
 8014c46:	d130      	bne.n	8014caa <_strtoul_l.constprop.0+0x7e>
 8014c48:	782c      	ldrb	r4, [r5, #0]
 8014c4a:	2601      	movs	r6, #1
 8014c4c:	1c85      	adds	r5, r0, #2
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d057      	beq.n	8014d02 <_strtoul_l.constprop.0+0xd6>
 8014c52:	2b10      	cmp	r3, #16
 8014c54:	d109      	bne.n	8014c6a <_strtoul_l.constprop.0+0x3e>
 8014c56:	2c30      	cmp	r4, #48	; 0x30
 8014c58:	d107      	bne.n	8014c6a <_strtoul_l.constprop.0+0x3e>
 8014c5a:	7828      	ldrb	r0, [r5, #0]
 8014c5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014c60:	2858      	cmp	r0, #88	; 0x58
 8014c62:	d149      	bne.n	8014cf8 <_strtoul_l.constprop.0+0xcc>
 8014c64:	786c      	ldrb	r4, [r5, #1]
 8014c66:	2310      	movs	r3, #16
 8014c68:	3502      	adds	r5, #2
 8014c6a:	f04f 38ff 	mov.w	r8, #4294967295
 8014c6e:	2700      	movs	r7, #0
 8014c70:	fbb8 f8f3 	udiv	r8, r8, r3
 8014c74:	fb03 f908 	mul.w	r9, r3, r8
 8014c78:	ea6f 0909 	mvn.w	r9, r9
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014c82:	f1bc 0f09 	cmp.w	ip, #9
 8014c86:	d815      	bhi.n	8014cb4 <_strtoul_l.constprop.0+0x88>
 8014c88:	4664      	mov	r4, ip
 8014c8a:	42a3      	cmp	r3, r4
 8014c8c:	dd23      	ble.n	8014cd6 <_strtoul_l.constprop.0+0xaa>
 8014c8e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8014c92:	d007      	beq.n	8014ca4 <_strtoul_l.constprop.0+0x78>
 8014c94:	4580      	cmp	r8, r0
 8014c96:	d31b      	bcc.n	8014cd0 <_strtoul_l.constprop.0+0xa4>
 8014c98:	d101      	bne.n	8014c9e <_strtoul_l.constprop.0+0x72>
 8014c9a:	45a1      	cmp	r9, r4
 8014c9c:	db18      	blt.n	8014cd0 <_strtoul_l.constprop.0+0xa4>
 8014c9e:	fb00 4003 	mla	r0, r0, r3, r4
 8014ca2:	2701      	movs	r7, #1
 8014ca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ca8:	e7e9      	b.n	8014c7e <_strtoul_l.constprop.0+0x52>
 8014caa:	2c2b      	cmp	r4, #43	; 0x2b
 8014cac:	bf04      	itt	eq
 8014cae:	782c      	ldrbeq	r4, [r5, #0]
 8014cb0:	1c85      	addeq	r5, r0, #2
 8014cb2:	e7cc      	b.n	8014c4e <_strtoul_l.constprop.0+0x22>
 8014cb4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014cb8:	f1bc 0f19 	cmp.w	ip, #25
 8014cbc:	d801      	bhi.n	8014cc2 <_strtoul_l.constprop.0+0x96>
 8014cbe:	3c37      	subs	r4, #55	; 0x37
 8014cc0:	e7e3      	b.n	8014c8a <_strtoul_l.constprop.0+0x5e>
 8014cc2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014cc6:	f1bc 0f19 	cmp.w	ip, #25
 8014cca:	d804      	bhi.n	8014cd6 <_strtoul_l.constprop.0+0xaa>
 8014ccc:	3c57      	subs	r4, #87	; 0x57
 8014cce:	e7dc      	b.n	8014c8a <_strtoul_l.constprop.0+0x5e>
 8014cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8014cd4:	e7e6      	b.n	8014ca4 <_strtoul_l.constprop.0+0x78>
 8014cd6:	1c7b      	adds	r3, r7, #1
 8014cd8:	d106      	bne.n	8014ce8 <_strtoul_l.constprop.0+0xbc>
 8014cda:	2322      	movs	r3, #34	; 0x22
 8014cdc:	f8ce 3000 	str.w	r3, [lr]
 8014ce0:	4638      	mov	r0, r7
 8014ce2:	b932      	cbnz	r2, 8014cf2 <_strtoul_l.constprop.0+0xc6>
 8014ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ce8:	b106      	cbz	r6, 8014cec <_strtoul_l.constprop.0+0xc0>
 8014cea:	4240      	negs	r0, r0
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	d0f9      	beq.n	8014ce4 <_strtoul_l.constprop.0+0xb8>
 8014cf0:	b107      	cbz	r7, 8014cf4 <_strtoul_l.constprop.0+0xc8>
 8014cf2:	1e69      	subs	r1, r5, #1
 8014cf4:	6011      	str	r1, [r2, #0]
 8014cf6:	e7f5      	b.n	8014ce4 <_strtoul_l.constprop.0+0xb8>
 8014cf8:	2430      	movs	r4, #48	; 0x30
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d1b5      	bne.n	8014c6a <_strtoul_l.constprop.0+0x3e>
 8014cfe:	2308      	movs	r3, #8
 8014d00:	e7b3      	b.n	8014c6a <_strtoul_l.constprop.0+0x3e>
 8014d02:	2c30      	cmp	r4, #48	; 0x30
 8014d04:	d0a9      	beq.n	8014c5a <_strtoul_l.constprop.0+0x2e>
 8014d06:	230a      	movs	r3, #10
 8014d08:	e7af      	b.n	8014c6a <_strtoul_l.constprop.0+0x3e>
 8014d0a:	bf00      	nop
 8014d0c:	08017ae1 	.word	0x08017ae1

08014d10 <_strtoul_r>:
 8014d10:	f7ff bf8c 	b.w	8014c2c <_strtoul_l.constprop.0>

08014d14 <__swhatbuf_r>:
 8014d14:	b570      	push	{r4, r5, r6, lr}
 8014d16:	460c      	mov	r4, r1
 8014d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d1c:	2900      	cmp	r1, #0
 8014d1e:	b096      	sub	sp, #88	; 0x58
 8014d20:	4615      	mov	r5, r2
 8014d22:	461e      	mov	r6, r3
 8014d24:	da0d      	bge.n	8014d42 <__swhatbuf_r+0x2e>
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d2c:	f04f 0100 	mov.w	r1, #0
 8014d30:	bf0c      	ite	eq
 8014d32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014d36:	2340      	movne	r3, #64	; 0x40
 8014d38:	2000      	movs	r0, #0
 8014d3a:	6031      	str	r1, [r6, #0]
 8014d3c:	602b      	str	r3, [r5, #0]
 8014d3e:	b016      	add	sp, #88	; 0x58
 8014d40:	bd70      	pop	{r4, r5, r6, pc}
 8014d42:	466a      	mov	r2, sp
 8014d44:	f000 f878 	bl	8014e38 <_fstat_r>
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	dbec      	blt.n	8014d26 <__swhatbuf_r+0x12>
 8014d4c:	9901      	ldr	r1, [sp, #4]
 8014d4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014d52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014d56:	4259      	negs	r1, r3
 8014d58:	4159      	adcs	r1, r3
 8014d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d5e:	e7eb      	b.n	8014d38 <__swhatbuf_r+0x24>

08014d60 <__smakebuf_r>:
 8014d60:	898b      	ldrh	r3, [r1, #12]
 8014d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d64:	079d      	lsls	r5, r3, #30
 8014d66:	4606      	mov	r6, r0
 8014d68:	460c      	mov	r4, r1
 8014d6a:	d507      	bpl.n	8014d7c <__smakebuf_r+0x1c>
 8014d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014d70:	6023      	str	r3, [r4, #0]
 8014d72:	6123      	str	r3, [r4, #16]
 8014d74:	2301      	movs	r3, #1
 8014d76:	6163      	str	r3, [r4, #20]
 8014d78:	b002      	add	sp, #8
 8014d7a:	bd70      	pop	{r4, r5, r6, pc}
 8014d7c:	ab01      	add	r3, sp, #4
 8014d7e:	466a      	mov	r2, sp
 8014d80:	f7ff ffc8 	bl	8014d14 <__swhatbuf_r>
 8014d84:	9900      	ldr	r1, [sp, #0]
 8014d86:	4605      	mov	r5, r0
 8014d88:	4630      	mov	r0, r6
 8014d8a:	f7fc fb91 	bl	80114b0 <_malloc_r>
 8014d8e:	b948      	cbnz	r0, 8014da4 <__smakebuf_r+0x44>
 8014d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d94:	059a      	lsls	r2, r3, #22
 8014d96:	d4ef      	bmi.n	8014d78 <__smakebuf_r+0x18>
 8014d98:	f023 0303 	bic.w	r3, r3, #3
 8014d9c:	f043 0302 	orr.w	r3, r3, #2
 8014da0:	81a3      	strh	r3, [r4, #12]
 8014da2:	e7e3      	b.n	8014d6c <__smakebuf_r+0xc>
 8014da4:	89a3      	ldrh	r3, [r4, #12]
 8014da6:	6020      	str	r0, [r4, #0]
 8014da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dac:	81a3      	strh	r3, [r4, #12]
 8014dae:	9b00      	ldr	r3, [sp, #0]
 8014db0:	6163      	str	r3, [r4, #20]
 8014db2:	9b01      	ldr	r3, [sp, #4]
 8014db4:	6120      	str	r0, [r4, #16]
 8014db6:	b15b      	cbz	r3, 8014dd0 <__smakebuf_r+0x70>
 8014db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f000 f84d 	bl	8014e5c <_isatty_r>
 8014dc2:	b128      	cbz	r0, 8014dd0 <__smakebuf_r+0x70>
 8014dc4:	89a3      	ldrh	r3, [r4, #12]
 8014dc6:	f023 0303 	bic.w	r3, r3, #3
 8014dca:	f043 0301 	orr.w	r3, r3, #1
 8014dce:	81a3      	strh	r3, [r4, #12]
 8014dd0:	89a3      	ldrh	r3, [r4, #12]
 8014dd2:	431d      	orrs	r5, r3
 8014dd4:	81a5      	strh	r5, [r4, #12]
 8014dd6:	e7cf      	b.n	8014d78 <__smakebuf_r+0x18>

08014dd8 <_raise_r>:
 8014dd8:	291f      	cmp	r1, #31
 8014dda:	b538      	push	{r3, r4, r5, lr}
 8014ddc:	4604      	mov	r4, r0
 8014dde:	460d      	mov	r5, r1
 8014de0:	d904      	bls.n	8014dec <_raise_r+0x14>
 8014de2:	2316      	movs	r3, #22
 8014de4:	6003      	str	r3, [r0, #0]
 8014de6:	f04f 30ff 	mov.w	r0, #4294967295
 8014dea:	bd38      	pop	{r3, r4, r5, pc}
 8014dec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014dee:	b112      	cbz	r2, 8014df6 <_raise_r+0x1e>
 8014df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014df4:	b94b      	cbnz	r3, 8014e0a <_raise_r+0x32>
 8014df6:	4620      	mov	r0, r4
 8014df8:	f000 f852 	bl	8014ea0 <_getpid_r>
 8014dfc:	462a      	mov	r2, r5
 8014dfe:	4601      	mov	r1, r0
 8014e00:	4620      	mov	r0, r4
 8014e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e06:	f000 b839 	b.w	8014e7c <_kill_r>
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	d00a      	beq.n	8014e24 <_raise_r+0x4c>
 8014e0e:	1c59      	adds	r1, r3, #1
 8014e10:	d103      	bne.n	8014e1a <_raise_r+0x42>
 8014e12:	2316      	movs	r3, #22
 8014e14:	6003      	str	r3, [r0, #0]
 8014e16:	2001      	movs	r0, #1
 8014e18:	e7e7      	b.n	8014dea <_raise_r+0x12>
 8014e1a:	2400      	movs	r4, #0
 8014e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014e20:	4628      	mov	r0, r5
 8014e22:	4798      	blx	r3
 8014e24:	2000      	movs	r0, #0
 8014e26:	e7e0      	b.n	8014dea <_raise_r+0x12>

08014e28 <raise>:
 8014e28:	4b02      	ldr	r3, [pc, #8]	; (8014e34 <raise+0xc>)
 8014e2a:	4601      	mov	r1, r0
 8014e2c:	6818      	ldr	r0, [r3, #0]
 8014e2e:	f7ff bfd3 	b.w	8014dd8 <_raise_r>
 8014e32:	bf00      	nop
 8014e34:	24000208 	.word	0x24000208

08014e38 <_fstat_r>:
 8014e38:	b538      	push	{r3, r4, r5, lr}
 8014e3a:	4d07      	ldr	r5, [pc, #28]	; (8014e58 <_fstat_r+0x20>)
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	4604      	mov	r4, r0
 8014e40:	4608      	mov	r0, r1
 8014e42:	4611      	mov	r1, r2
 8014e44:	602b      	str	r3, [r5, #0]
 8014e46:	f7ed f931 	bl	80020ac <_fstat>
 8014e4a:	1c43      	adds	r3, r0, #1
 8014e4c:	d102      	bne.n	8014e54 <_fstat_r+0x1c>
 8014e4e:	682b      	ldr	r3, [r5, #0]
 8014e50:	b103      	cbz	r3, 8014e54 <_fstat_r+0x1c>
 8014e52:	6023      	str	r3, [r4, #0]
 8014e54:	bd38      	pop	{r3, r4, r5, pc}
 8014e56:	bf00      	nop
 8014e58:	24010fe8 	.word	0x24010fe8

08014e5c <_isatty_r>:
 8014e5c:	b538      	push	{r3, r4, r5, lr}
 8014e5e:	4d06      	ldr	r5, [pc, #24]	; (8014e78 <_isatty_r+0x1c>)
 8014e60:	2300      	movs	r3, #0
 8014e62:	4604      	mov	r4, r0
 8014e64:	4608      	mov	r0, r1
 8014e66:	602b      	str	r3, [r5, #0]
 8014e68:	f7ed f926 	bl	80020b8 <_isatty>
 8014e6c:	1c43      	adds	r3, r0, #1
 8014e6e:	d102      	bne.n	8014e76 <_isatty_r+0x1a>
 8014e70:	682b      	ldr	r3, [r5, #0]
 8014e72:	b103      	cbz	r3, 8014e76 <_isatty_r+0x1a>
 8014e74:	6023      	str	r3, [r4, #0]
 8014e76:	bd38      	pop	{r3, r4, r5, pc}
 8014e78:	24010fe8 	.word	0x24010fe8

08014e7c <_kill_r>:
 8014e7c:	b538      	push	{r3, r4, r5, lr}
 8014e7e:	4d07      	ldr	r5, [pc, #28]	; (8014e9c <_kill_r+0x20>)
 8014e80:	2300      	movs	r3, #0
 8014e82:	4604      	mov	r4, r0
 8014e84:	4608      	mov	r0, r1
 8014e86:	4611      	mov	r1, r2
 8014e88:	602b      	str	r3, [r5, #0]
 8014e8a:	f7ed f8e1 	bl	8002050 <_kill>
 8014e8e:	1c43      	adds	r3, r0, #1
 8014e90:	d102      	bne.n	8014e98 <_kill_r+0x1c>
 8014e92:	682b      	ldr	r3, [r5, #0]
 8014e94:	b103      	cbz	r3, 8014e98 <_kill_r+0x1c>
 8014e96:	6023      	str	r3, [r4, #0]
 8014e98:	bd38      	pop	{r3, r4, r5, pc}
 8014e9a:	bf00      	nop
 8014e9c:	24010fe8 	.word	0x24010fe8

08014ea0 <_getpid_r>:
 8014ea0:	f7ed b8d4 	b.w	800204c <_getpid>

08014ea4 <_init>:
 8014ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ea6:	bf00      	nop
 8014ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eaa:	bc08      	pop	{r3}
 8014eac:	469e      	mov	lr, r3
 8014eae:	4770      	bx	lr

08014eb0 <_fini>:
 8014eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eb2:	bf00      	nop
 8014eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014eb6:	bc08      	pop	{r3}
 8014eb8:	469e      	mov	lr, r3
 8014eba:	4770      	bx	lr
