
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017394  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035f4  08017638  08017638  00027638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  0801ac2c  0801ac2c  0002ac2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801ac38  0801ac38  0002ac38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000250  24000000  0801ac3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00037af8  24000250  0801ae8c  00030250  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24037d48  0801ae8c  00037d48  2**0
                  ALLOC
  8 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003027e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00062e41  00000000  00000000  000302c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000cbd9  00000000  00000000  00093102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00026090  00000000  00000000  0009fcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002860  00000000  00000000  000c5d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00004292  00000000  00000000  000c85d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004e717  00000000  00000000  000cc862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005f762  00000000  00000000  0011af79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018dc37  00000000  00000000  0017a6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a194  00000000  00000000  00308314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008c  00000000  00000000  003124a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000250 	.word	0x24000250
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801761c 	.word	0x0801761c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000254 	.word	0x24000254
 80002dc:	0801761c 	.word	0x0801761c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2lz>:
 8000728:	b508      	push	{r3, lr}
 800072a:	4602      	mov	r2, r0
 800072c:	460b      	mov	r3, r1
 800072e:	ec43 2b17 	vmov	d7, r2, r3
 8000732:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d403      	bmi.n	8000744 <__aeabi_d2lz+0x1c>
 800073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000740:	f000 b80a 	b.w	8000758 <__aeabi_d2ulz>
 8000744:	eeb1 7b47 	vneg.f64	d7, d7
 8000748:	ec51 0b17 	vmov	r0, r1, d7
 800074c:	f000 f804 	bl	8000758 <__aeabi_d2ulz>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	bd08      	pop	{r3, pc}

08000758 <__aeabi_d2ulz>:
 8000758:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000788 <__aeabi_d2ulz+0x30>
 800075c:	ec41 0b17 	vmov	d7, r0, r1
 8000760:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000790 <__aeabi_d2ulz+0x38>
 8000764:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000768:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800076c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000770:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee16 1a10 	vmov	r1, s12
 800077c:	ee17 0a90 	vmov	r0, s15
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	00000000 	.word	0x00000000
 800078c:	3df00000 	.word	0x3df00000
 8000790:	00000000 	.word	0x00000000
 8000794:	41f00000 	.word	0x41f00000

08000798 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000798:	b530      	push	{r4, r5, lr}
    unsigned int h = 0;
 800079a:	f04f 0c00 	mov.w	ip, #0
 800079e:	1e41      	subs	r1, r0, #1
 80007a0:	f100 0e03 	add.w	lr, r0, #3
    size_t i = 0;

    for (i = 0; i < 4; i++)
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80007a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80007a8:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
        {
            h += (unsigned int) input[i] - '0';
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80007ac:	f1a2 0441 	sub.w	r4, r2, #65	; 0x41
        if ((input[i] >= '0') && (input[i] <= '9'))
 80007b0:	b2c3      	uxtb	r3, r0
            h += (unsigned int) input[i] - '0';
 80007b2:	4460      	add	r0, ip
        if ((input[i] >= '0') && (input[i] <= '9'))
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	d90b      	bls.n	80007d0 <parse_hex4+0x38>
        {
            h += (unsigned int) 10 + input[i] - 'A';
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80007b8:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80007bc:	2c05      	cmp	r4, #5
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80007be:	f1a2 0561 	sub.w	r5, r2, #97	; 0x61
            h += (unsigned int) 10 + input[i] - 'A';
 80007c2:	f1a2 0237 	sub.w	r2, r2, #55	; 0x37
            h += (unsigned int) 10 + input[i] - 'a';
 80007c6:	eb03 000c 	add.w	r0, r3, ip
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80007ca:	d806      	bhi.n	80007da <parse_hex4+0x42>
            h += (unsigned int) 10 + input[i] - 'A';
 80007cc:	eb02 000c 	add.w	r0, r2, ip
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 80007d0:	458e      	cmp	lr, r1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80007d2:	ea4f 1c00 	mov.w	ip, r0, lsl #4
        if (i < 3)
 80007d6:	d1e5      	bne.n	80007a4 <parse_hex4+0xc>
        }
    }

    return h;
}
 80007d8:	bd30      	pop	{r4, r5, pc}
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80007da:	2d05      	cmp	r5, #5
 80007dc:	d9f8      	bls.n	80007d0 <parse_hex4+0x38>
            return 0;
 80007de:	2000      	movs	r0, #0
}
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	bf00      	nop

080007e4 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80007e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007e8:	680a      	ldr	r2, [r1, #0]
{
 80007ea:	460f      	mov	r7, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007ec:	6889      	ldr	r1, [r1, #8]
{
 80007ee:	4680      	mov	r8, r0
 80007f0:	b083      	sub	sp, #12
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80007f2:	5c54      	ldrb	r4, [r2, r1]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007f4:	1c48      	adds	r0, r1, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80007f6:	4411      	add	r1, r2
 80007f8:	2c22      	cmp	r4, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80007fa:	eb02 0500 	add.w	r5, r2, r0
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80007fe:	d113      	bne.n	8000828 <parse_string+0x44>

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8000800:	687e      	ldr	r6, [r7, #4]
 8000802:	42b0      	cmp	r0, r6
 8000804:	d210      	bcs.n	8000828 <parse_string+0x44>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8000806:	462c      	mov	r4, r5
        size_t skipped_bytes = 0;
 8000808:	2000      	movs	r0, #0
 800080a:	e003      	b.n	8000814 <parse_string+0x30>
                    goto fail;
                }
                skipped_bytes++;
                input_end++;
            }
            input_end++;
 800080c:	3401      	adds	r4, #1
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800080e:	1aa3      	subs	r3, r4, r2
 8000810:	42b3      	cmp	r3, r6
 8000812:	d209      	bcs.n	8000828 <parse_string+0x44>
 8000814:	7823      	ldrb	r3, [r4, #0]
 8000816:	2b22      	cmp	r3, #34	; 0x22
 8000818:	d012      	beq.n	8000840 <parse_string+0x5c>
            if (input_end[0] == '\\')
 800081a:	2b5c      	cmp	r3, #92	; 0x5c
 800081c:	d1f6      	bne.n	800080c <parse_string+0x28>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800081e:	3401      	adds	r4, #1
                skipped_bytes++;
 8000820:	3001      	adds	r0, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8000822:	1aa3      	subs	r3, r4, r2
 8000824:	42b3      	cmp	r3, r6
 8000826:	d3f1      	bcc.n	800080c <parse_string+0x28>
    {
        input_buffer->hooks.deallocate(output);
        output = NULL;
    }

    if (input_pointer != NULL)
 8000828:	b135      	cbz	r5, 8000838 <parse_string+0x54>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800082a:	683b      	ldr	r3, [r7, #0]
    }

    return false;
 800082c:	2000      	movs	r0, #0
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800082e:	1aeb      	subs	r3, r5, r3
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	b003      	add	sp, #12
 8000834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
 8000838:	4628      	mov	r0, r5
}
 800083a:	b003      	add	sp, #12
 800083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8000840:	1a61      	subs	r1, r4, r1
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8000842:	f1c0 0001 	rsb	r0, r0, #1
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4408      	add	r0, r1
 800084a:	4798      	blx	r3
        if (output == NULL)
 800084c:	4606      	mov	r6, r0
 800084e:	2800      	cmp	r0, #0
 8000850:	d0ea      	beq.n	8000828 <parse_string+0x44>
    while (input_pointer < input_end)
 8000852:	42ac      	cmp	r4, r5
 8000854:	4632      	mov	r2, r6
 8000856:	f240 8097 	bls.w	8000988 <parse_string+0x1a4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800085a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80009e8 <parse_string+0x204>
 800085e:	e005      	b.n	800086c <parse_string+0x88>
            *output_pointer++ = *input_pointer++;
 8000860:	3501      	adds	r5, #1
 8000862:	f802 3b01 	strb.w	r3, [r2], #1
    while (input_pointer < input_end)
 8000866:	42ac      	cmp	r4, r5
 8000868:	f240 808e 	bls.w	8000988 <parse_string+0x1a4>
        if (*input_pointer != '\\')
 800086c:	782b      	ldrb	r3, [r5, #0]
 800086e:	2b5c      	cmp	r3, #92	; 0x5c
 8000870:	d1f6      	bne.n	8000860 <parse_string+0x7c>
            if ((input_end - input_pointer) < 1)
 8000872:	1b60      	subs	r0, r4, r5
 8000874:	2800      	cmp	r0, #0
 8000876:	dd1b      	ble.n	80008b0 <parse_string+0xcc>
            switch (input_pointer[1])
 8000878:	786b      	ldrb	r3, [r5, #1]
 800087a:	2b75      	cmp	r3, #117	; 0x75
 800087c:	d818      	bhi.n	80008b0 <parse_string+0xcc>
 800087e:	2b5b      	cmp	r3, #91	; 0x5b
 8000880:	d912      	bls.n	80008a8 <parse_string+0xc4>
 8000882:	f1a3 015c 	sub.w	r1, r3, #92	; 0x5c
 8000886:	2919      	cmp	r1, #25
 8000888:	d812      	bhi.n	80008b0 <parse_string+0xcc>
 800088a:	e8df f001 	tbb	[pc, r1]
 800088e:	1179      	.short	0x1179
 8000890:	11111111 	.word	0x11111111
 8000894:	11111174 	.word	0x11111174
 8000898:	1111116f 	.word	0x1111116f
 800089c:	11111111 	.word	0x11111111
 80008a0:	1111116a 	.word	0x1111116a
 80008a4:	155d1165 	.word	0x155d1165
 80008a8:	2b22      	cmp	r3, #34	; 0x22
 80008aa:	d069      	beq.n	8000980 <parse_string+0x19c>
 80008ac:	2b2f      	cmp	r3, #47	; 0x2f
 80008ae:	d067      	beq.n	8000980 <parse_string+0x19c>
        input_buffer->hooks.deallocate(output);
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4798      	blx	r3
    if (input_pointer != NULL)
 80008b6:	e7b8      	b.n	800082a <parse_string+0x46>
    if ((input_end - first_sequence) < 6)
 80008b8:	2805      	cmp	r0, #5
 80008ba:	9201      	str	r2, [sp, #4]
 80008bc:	ddf8      	ble.n	80008b0 <parse_string+0xcc>
    first_code = parse_hex4(first_sequence + 2);
 80008be:	1ca8      	adds	r0, r5, #2
 80008c0:	f7ff ff6a 	bl	8000798 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80008c4:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
    first_code = parse_hex4(first_sequence + 2);
 80008c8:	4682      	mov	sl, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80008ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ce:	d3ef      	bcc.n	80008b0 <parse_string+0xcc>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80008d0:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 80008d4:	9a01      	ldr	r2, [sp, #4]
 80008d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008da:	d262      	bcs.n	80009a2 <parse_string+0x1be>
        const unsigned char *second_sequence = first_sequence + 6;
 80008dc:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
 80008de:	1ae3      	subs	r3, r4, r3
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	dde5      	ble.n	80008b0 <parse_string+0xcc>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80008e4:	79ab      	ldrb	r3, [r5, #6]
 80008e6:	2b5c      	cmp	r3, #92	; 0x5c
 80008e8:	d1e2      	bne.n	80008b0 <parse_string+0xcc>
 80008ea:	79eb      	ldrb	r3, [r5, #7]
 80008ec:	2b75      	cmp	r3, #117	; 0x75
 80008ee:	d1df      	bne.n	80008b0 <parse_string+0xcc>
        second_code = parse_hex4(second_sequence + 2);
 80008f0:	f105 0008 	add.w	r0, r5, #8
 80008f4:	f7ff ff50 	bl	8000798 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80008f8:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 80008fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000900:	d2d6      	bcs.n	80008b0 <parse_string+0xcc>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8000902:	ea09 2a8a 	and.w	sl, r9, sl, lsl #10
 8000906:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800090a:	f04f 0c0c 	mov.w	ip, #12
 800090e:	9a01      	ldr	r2, [sp, #4]
 8000910:	ea4a 0a00 	orr.w	sl, sl, r0
 8000914:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000918:	2104      	movs	r1, #4
        first_byte_mark = 0xF0; /* 11110000 */
 800091a:	23f0      	movs	r3, #240	; 0xf0
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800091c:	f04f 0e03 	mov.w	lr, #3
 8000920:	eb02 0b0e 	add.w	fp, r2, lr
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8000924:	f00a 003f 	and.w	r0, sl, #63	; 0x3f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000928:	f10e 3eff 	add.w	lr, lr, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800092c:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
 8000930:	f060 007f 	orn	r0, r0, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8000934:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8000938:	f80b 0901 	strb.w	r0, [fp], #-1
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800093c:	d1f2      	bne.n	8000924 <parse_string+0x140>
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800093e:	ea43 000a 	orr.w	r0, r3, sl
    *output_pointer += utf8_length;
 8000942:	4411      	add	r1, r2
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8000944:	b2c3      	uxtb	r3, r0
                    if (sequence_length == 0)
 8000946:	e003      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\t';
 8000948:	1c51      	adds	r1, r2, #1
                    break;
 800094a:	2309      	movs	r3, #9
 800094c:	f04f 0c02 	mov.w	ip, #2
                    *output_pointer++ = '\b';
 8000950:	7013      	strb	r3, [r2, #0]
            input_pointer += sequence_length;
 8000952:	4465      	add	r5, ip
 8000954:	460a      	mov	r2, r1
 8000956:	e786      	b.n	8000866 <parse_string+0x82>
                    *output_pointer++ = '\r';
 8000958:	1c51      	adds	r1, r2, #1
                    break;
 800095a:	230d      	movs	r3, #13
 800095c:	f04f 0c02 	mov.w	ip, #2
 8000960:	e7f6      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\n';
 8000962:	1c51      	adds	r1, r2, #1
                    break;
 8000964:	230a      	movs	r3, #10
 8000966:	f04f 0c02 	mov.w	ip, #2
 800096a:	e7f1      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\f';
 800096c:	1c51      	adds	r1, r2, #1
                    break;
 800096e:	230c      	movs	r3, #12
 8000970:	f04f 0c02 	mov.w	ip, #2
 8000974:	e7ec      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = '\b';
 8000976:	1c51      	adds	r1, r2, #1
                    break;
 8000978:	2308      	movs	r3, #8
 800097a:	f04f 0c02 	mov.w	ip, #2
 800097e:	e7e7      	b.n	8000950 <parse_string+0x16c>
                    *output_pointer++ = input_pointer[1];
 8000980:	1c51      	adds	r1, r2, #1
                    break;
 8000982:	f04f 0c02 	mov.w	ip, #2
 8000986:	e7e3      	b.n	8000950 <parse_string+0x16c>
    *output_pointer = '\0';
 8000988:	2300      	movs	r3, #0
    return true;
 800098a:	2001      	movs	r0, #1
    *output_pointer = '\0';
 800098c:	7013      	strb	r3, [r2, #0]
    item->type = cJSON_String;
 800098e:	2210      	movs	r2, #16
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8000990:	683b      	ldr	r3, [r7, #0]
    item->valuestring = (char*)output;
 8000992:	f8c8 6010 	str.w	r6, [r8, #16]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8000996:	1ae3      	subs	r3, r4, r3
    item->type = cJSON_String;
 8000998:	f8c8 200c 	str.w	r2, [r8, #12]
    input_buffer->offset++;
 800099c:	4403      	add	r3, r0
 800099e:	60bb      	str	r3, [r7, #8]
    return true;
 80009a0:	e747      	b.n	8000832 <parse_string+0x4e>
    if (codepoint < 0x80)
 80009a2:	287f      	cmp	r0, #127	; 0x7f
 80009a4:	d805      	bhi.n	80009b2 <parse_string+0x1ce>
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80009a6:	2101      	movs	r1, #1
 80009a8:	b2c3      	uxtb	r3, r0
 80009aa:	f04f 0c06 	mov.w	ip, #6
    *output_pointer += utf8_length;
 80009ae:	4411      	add	r1, r2
                    if (sequence_length == 0)
 80009b0:	e7ce      	b.n	8000950 <parse_string+0x16c>
    else if (codepoint < 0x800)
 80009b2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80009b6:	d206      	bcs.n	80009c6 <parse_string+0x1e2>
 80009b8:	f04f 0c06 	mov.w	ip, #6
 80009bc:	2102      	movs	r1, #2
        first_byte_mark = 0xC0; /* 11000000 */
 80009be:	23c0      	movs	r3, #192	; 0xc0
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80009c0:	f04f 0e01 	mov.w	lr, #1
 80009c4:	e7ac      	b.n	8000920 <parse_string+0x13c>
    else if (codepoint < 0x10000)
 80009c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80009ca:	d206      	bcs.n	80009da <parse_string+0x1f6>
 80009cc:	f04f 0c06 	mov.w	ip, #6
 80009d0:	2103      	movs	r1, #3
        first_byte_mark = 0xE0; /* 11100000 */
 80009d2:	23e0      	movs	r3, #224	; 0xe0
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80009d4:	f04f 0e02 	mov.w	lr, #2
 80009d8:	e7a2      	b.n	8000920 <parse_string+0x13c>
    else if (codepoint <= 0x10FFFF)
 80009da:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80009de:	f4bf af67 	bcs.w	80008b0 <parse_string+0xcc>
 80009e2:	f04f 0c06 	mov.w	ip, #6
 80009e6:	e797      	b.n	8000918 <parse_string+0x134>
 80009e8:	000ffc00 	.word	0x000ffc00

080009ec <buffer_skip_whitespace>:
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
    if ((buffer == NULL) || (buffer->content == NULL))
 80009ec:	b1d8      	cbz	r0, 8000a26 <buffer_skip_whitespace+0x3a>
 80009ee:	6802      	ldr	r2, [r0, #0]
 80009f0:	b1d2      	cbz	r2, 8000a28 <buffer_skip_whitespace+0x3c>
{
 80009f2:	b410      	push	{r4}
    {
        return NULL;
    }

    if (cannot_access_at_index(buffer, 0))
 80009f4:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80009f8:	42a3      	cmp	r3, r4
 80009fa:	d20c      	bcs.n	8000a16 <buffer_skip_whitespace+0x2a>
    {
        return buffer;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80009fc:	1e59      	subs	r1, r3, #1
 80009fe:	440a      	add	r2, r1
 8000a00:	e003      	b.n	8000a0a <buffer_skip_whitespace+0x1e>
    {
       buffer->offset++;
 8000a02:	3301      	adds	r3, #1
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8000a04:	429c      	cmp	r4, r3
       buffer->offset++;
 8000a06:	6083      	str	r3, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8000a08:	d008      	beq.n	8000a1c <buffer_skip_whitespace+0x30>
 8000a0a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8000a0e:	2920      	cmp	r1, #32
 8000a10:	d9f7      	bls.n	8000a02 <buffer_skip_whitespace+0x16>
    }

    if (buffer->offset == buffer->length)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	d002      	beq.n	8000a1c <buffer_skip_whitespace+0x30>
    {
        buffer->offset--;
    }

    return buffer;
}
 8000a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a1a:	4770      	bx	lr
        buffer->offset--;
 8000a1c:	3c01      	subs	r4, #1
 8000a1e:	6084      	str	r4, [r0, #8]
}
 8000a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	4770      	bx	lr
        return NULL;
 8000a28:	4610      	mov	r0, r2
 8000a2a:	4770      	bx	lr

08000a2c <ensure>:
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
 8000a2e:	4604      	mov	r4, r0
 8000a30:	b300      	cbz	r0, 8000a74 <ensure+0x48>
 8000a32:	6806      	ldr	r6, [r0, #0]
 8000a34:	b1ce      	cbz	r6, 8000a6a <ensure+0x3e>
    if ((p->length > 0) && (p->offset >= p->length))
 8000a36:	6843      	ldr	r3, [r0, #4]
 8000a38:	b9cb      	cbnz	r3, 8000a6e <ensure+0x42>
    if (needed > INT_MAX)
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	db1a      	blt.n	8000a74 <ensure+0x48>
    needed += p->offset + 1;
 8000a3e:	68a2      	ldr	r2, [r4, #8]
 8000a40:	3101      	adds	r1, #1
 8000a42:	4411      	add	r1, r2
    if (needed <= p->length)
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d218      	bcs.n	8000a7a <ensure+0x4e>
    if (p->noalloc) {
 8000a48:	6923      	ldr	r3, [r4, #16]
 8000a4a:	b99b      	cbnz	r3, 8000a74 <ensure+0x48>
    if (needed > (INT_MAX / 2))
 8000a4c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000a50:	d216      	bcs.n	8000a80 <ensure+0x54>
    if (p->hooks.reallocate != NULL)
 8000a52:	6a23      	ldr	r3, [r4, #32]
        newsize = needed * 2;
 8000a54:	004d      	lsls	r5, r1, #1
    if (p->hooks.reallocate != NULL)
 8000a56:	b1d3      	cbz	r3, 8000a8e <ensure+0x62>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000a58:	4630      	mov	r0, r6
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	4798      	blx	r3
        if (newbuffer == NULL)
 8000a5e:	4606      	mov	r6, r0
 8000a60:	b318      	cbz	r0, 8000aaa <ensure+0x7e>
    return newbuffer + p->offset;
 8000a62:	68a3      	ldr	r3, [r4, #8]
    p->length = newsize;
 8000a64:	e9c4 6500 	strd	r6, r5, [r4]
    return newbuffer + p->offset;
 8000a68:	441e      	add	r6, r3
}
 8000a6a:	4630      	mov	r0, r6
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
    if ((p->length > 0) && (p->offset >= p->length))
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d8e2      	bhi.n	8000a3a <ensure+0xe>
        return NULL;
 8000a74:	2600      	movs	r6, #0
}
 8000a76:	4630      	mov	r0, r6
 8000a78:	bd70      	pop	{r4, r5, r6, pc}
        return p->buffer + p->offset;
 8000a7a:	4416      	add	r6, r2
}
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
        if (needed <= INT_MAX)
 8000a80:	2900      	cmp	r1, #0
 8000a82:	dbf7      	blt.n	8000a74 <ensure+0x48>
    if (p->hooks.reallocate != NULL)
 8000a84:	6a23      	ldr	r3, [r4, #32]
            newsize = INT_MAX;
 8000a86:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    if (p->hooks.reallocate != NULL)
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1e4      	bne.n	8000a58 <ensure+0x2c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000a8e:	69a3      	ldr	r3, [r4, #24]
 8000a90:	4628      	mov	r0, r5
 8000a92:	4798      	blx	r3
        if (!newbuffer)
 8000a94:	4606      	mov	r6, r0
 8000a96:	b140      	cbz	r0, 8000aaa <ensure+0x7e>
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000a98:	68a2      	ldr	r2, [r4, #8]
 8000a9a:	6821      	ldr	r1, [r4, #0]
 8000a9c:	3201      	adds	r2, #1
 8000a9e:	f014 faa4 	bl	8014fea <memcpy>
        p->hooks.deallocate(p->buffer);
 8000aa2:	69e3      	ldr	r3, [r4, #28]
 8000aa4:	6820      	ldr	r0, [r4, #0]
 8000aa6:	4798      	blx	r3
 8000aa8:	e7db      	b.n	8000a62 <ensure+0x36>
            p->hooks.deallocate(p->buffer);
 8000aaa:	69e3      	ldr	r3, [r4, #28]
 8000aac:	6820      	ldr	r0, [r4, #0]
 8000aae:	4798      	blx	r3
            p->buffer = NULL;
 8000ab0:	e9c4 6600 	strd	r6, r6, [r4]
            return NULL;
 8000ab4:	e7d9      	b.n	8000a6a <ensure+0x3e>
 8000ab6:	bf00      	nop

08000ab8 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d036      	beq.n	8000b2c <get_object_item+0x74>
 8000abe:	460d      	mov	r5, r1
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	d033      	beq.n	8000b2c <get_object_item+0x74>
    {
        return NULL;
    }

    current_element = object->child;
 8000ac4:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8000ac6:	bb32      	cbnz	r2, 8000b16 <get_object_item+0x5e>
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8000ac8:	b31c      	cbz	r4, 8000b12 <get_object_item+0x5a>
 8000aca:	4f1b      	ldr	r7, [pc, #108]	; (8000b38 <get_object_item+0x80>)
 8000acc:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8000ace:	b1eb      	cbz	r3, 8000b0c <get_object_item+0x54>
    if (string1 == string2)
 8000ad0:	42ab      	cmp	r3, r5
 8000ad2:	d01e      	beq.n	8000b12 <get_object_item+0x5a>
 8000ad4:	1e6e      	subs	r6, r5, #1
 8000ad6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ada:	e000      	b.n	8000ade <get_object_item+0x26>
        if (*string1 == '\0')
 8000adc:	b1cb      	cbz	r3, 8000b12 <get_object_item+0x5a>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ade:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8000ae2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
 8000ae6:	5cfa      	ldrb	r2, [r7, r3]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	4661      	mov	r1, ip
 8000aec:	f002 0203 	and.w	r2, r2, #3
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	f817 200c 	ldrb.w	r2, [r7, ip]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	bf08      	it	eq
 8000afc:	f103 0020 	addeq.w	r0, r3, #32
 8000b00:	2a01      	cmp	r2, #1
 8000b02:	bf08      	it	eq
 8000b04:	f10c 0120 	addeq.w	r1, ip, #32
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	d0e7      	beq.n	8000adc <get_object_item+0x24>
        {
            current_element = current_element->next;
 8000b0c:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8000b0e:	2c00      	cmp	r4, #0
 8000b10:	d1dc      	bne.n	8000acc <get_object_item+0x14>
    if ((current_element == NULL) || (current_element->string == NULL)) {
        return NULL;
    }

    return current_element;
}
 8000b12:	4620      	mov	r0, r4
 8000b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d0fb      	beq.n	8000b12 <get_object_item+0x5a>
 8000b1a:	6a21      	ldr	r1, [r4, #32]
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	b141      	cbz	r1, 8000b32 <get_object_item+0x7a>
 8000b20:	f7ff fbde 	bl	80002e0 <strcmp>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d0f4      	beq.n	8000b12 <get_object_item+0x5a>
            current_element = current_element->next;
 8000b28:	6824      	ldr	r4, [r4, #0]
 8000b2a:	e7f4      	b.n	8000b16 <get_object_item+0x5e>
        return NULL;
 8000b2c:	2400      	movs	r4, #0
}
 8000b2e:	4620      	mov	r0, r4
 8000b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 8000b32:	460c      	mov	r4, r1
}
 8000b34:	4620      	mov	r0, r4
 8000b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b38:	0801a8d1 	.word	0x0801a8d1

08000b3c <print_string_ptr.part.0>:
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	4605      	mov	r5, r0
 8000b42:	4608      	mov	r0, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b44:	782c      	ldrb	r4, [r5, #0]
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	f000 8085 	beq.w	8000c56 <print_string_ptr.part.0+0x11a>
 8000b4c:	462a      	mov	r2, r5
    size_t escape_characters = 0;
 8000b4e:	2700      	movs	r7, #0
        switch (*input_pointer)
 8000b50:	4e4e      	ldr	r6, [pc, #312]	; (8000c8c <print_string_ptr.part.0+0x150>)
 8000b52:	e005      	b.n	8000b60 <print_string_ptr.part.0+0x24>
                if (*input_pointer < 32)
 8000b54:	2c1f      	cmp	r4, #31
                    escape_characters += 5;
 8000b56:	bf98      	it	ls
 8000b58:	3705      	addls	r7, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b5a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8000b5e:	b17c      	cbz	r4, 8000b80 <print_string_ptr.part.0+0x44>
        switch (*input_pointer)
 8000b60:	2c22      	cmp	r4, #34	; 0x22
 8000b62:	d84a      	bhi.n	8000bfa <print_string_ptr.part.0+0xbe>
 8000b64:	f1a4 0308 	sub.w	r3, r4, #8
 8000b68:	2c07      	cmp	r4, #7
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	d9f2      	bls.n	8000b54 <print_string_ptr.part.0+0x18>
 8000b6e:	fa26 f303 	lsr.w	r3, r6, r3
 8000b72:	07db      	lsls	r3, r3, #31
 8000b74:	d5ee      	bpl.n	8000b54 <print_string_ptr.part.0+0x18>
                escape_characters++;
 8000b76:	3701      	adds	r7, #1
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b78:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8000b7c:	2c00      	cmp	r4, #0
 8000b7e:	d1ef      	bne.n	8000b60 <print_string_ptr.part.0+0x24>
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8000b80:	1b56      	subs	r6, r2, r5
 8000b82:	19f4      	adds	r4, r6, r7
    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000b84:	1ce1      	adds	r1, r4, #3
 8000b86:	f7ff ff51 	bl	8000a2c <ensure>
    if (output == NULL)
 8000b8a:	4680      	mov	r8, r0
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d05f      	beq.n	8000c50 <print_string_ptr.part.0+0x114>
    if (escape_characters == 0)
 8000b90:	2f00      	cmp	r7, #0
 8000b92:	d078      	beq.n	8000c86 <print_string_ptr.part.0+0x14a>
    output[0] = '\"';
 8000b94:	2322      	movs	r3, #34	; 0x22
 8000b96:	4606      	mov	r6, r0
 8000b98:	f806 3b01 	strb.w	r3, [r6], #1
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000b9c:	782b      	ldrb	r3, [r5, #0]
 8000b9e:	b3c3      	cbz	r3, 8000c12 <print_string_ptr.part.0+0xd6>
            *output_pointer++ = '\\';
 8000ba0:	275c      	movs	r7, #92	; 0x5c
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8000ba2:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8000c90 <print_string_ptr.part.0+0x154>
                    *output_pointer = 't';
 8000ba6:	f04f 0974 	mov.w	r9, #116	; 0x74
 8000baa:	e006      	b.n	8000bba <print_string_ptr.part.0+0x7e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bac:	2b5c      	cmp	r3, #92	; 0x5c
 8000bae:	d009      	beq.n	8000bc4 <print_string_ptr.part.0+0x88>
            *output_pointer = *input_pointer;
 8000bb0:	7033      	strb	r3, [r6, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000bb2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000bb6:	1c46      	adds	r6, r0, #1
 8000bb8:	b35b      	cbz	r3, 8000c12 <print_string_ptr.part.0+0xd6>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bba:	2b22      	cmp	r3, #34	; 0x22
 8000bbc:	bf18      	it	ne
 8000bbe:	2b1f      	cmpne	r3, #31
            *output_pointer = *input_pointer;
 8000bc0:	4630      	mov	r0, r6
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bc2:	d8f3      	bhi.n	8000bac <print_string_ptr.part.0+0x70>
            *output_pointer++ = '\\';
 8000bc4:	f800 7b01 	strb.w	r7, [r0], #1
            switch (*input_pointer)
 8000bc8:	782a      	ldrb	r2, [r5, #0]
 8000bca:	2a22      	cmp	r2, #34	; 0x22
 8000bcc:	d819      	bhi.n	8000c02 <print_string_ptr.part.0+0xc6>
 8000bce:	2a07      	cmp	r2, #7
 8000bd0:	d927      	bls.n	8000c22 <print_string_ptr.part.0+0xe6>
 8000bd2:	f1a2 0308 	sub.w	r3, r2, #8
 8000bd6:	2b1a      	cmp	r3, #26
 8000bd8:	d823      	bhi.n	8000c22 <print_string_ptr.part.0+0xe6>
 8000bda:	e8df f003 	tbb	[pc, r3]
 8000bde:	3336      	.short	0x3336
 8000be0:	2a2d2230 	.word	0x2a2d2230
 8000be4:	22222222 	.word	0x22222222
 8000be8:	22222222 	.word	0x22222222
 8000bec:	22222222 	.word	0x22222222
 8000bf0:	22222222 	.word	0x22222222
 8000bf4:	22222222 	.word	0x22222222
 8000bf8:	27          	.byte	0x27
 8000bf9:	00          	.byte	0x00
        switch (*input_pointer)
 8000bfa:	2c5c      	cmp	r4, #92	; 0x5c
 8000bfc:	d1ad      	bne.n	8000b5a <print_string_ptr.part.0+0x1e>
                escape_characters++;
 8000bfe:	3701      	adds	r7, #1
                break;
 8000c00:	e7ba      	b.n	8000b78 <print_string_ptr.part.0+0x3c>
            switch (*input_pointer)
 8000c02:	2a5c      	cmp	r2, #92	; 0x5c
 8000c04:	d10d      	bne.n	8000c22 <print_string_ptr.part.0+0xe6>
                    *output_pointer = '\\';
 8000c06:	7072      	strb	r2, [r6, #1]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000c08:	1c46      	adds	r6, r0, #1
 8000c0a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1d3      	bne.n	8000bba <print_string_ptr.part.0+0x7e>
    output[output_length + 1] = '\"';
 8000c12:	4444      	add	r4, r8
 8000c14:	2222      	movs	r2, #34	; 0x22
    output[output_length + 2] = '\0';
 8000c16:	2300      	movs	r3, #0
    return true;
 8000c18:	2001      	movs	r0, #1
    output[output_length + 1] = '\"';
 8000c1a:	7062      	strb	r2, [r4, #1]
    output[output_length + 2] = '\0';
 8000c1c:	70a3      	strb	r3, [r4, #2]
}
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8000c22:	4651      	mov	r1, sl
 8000c24:	f014 f832 	bl	8014c8c <siprintf>
                    output_pointer += 4;
 8000c28:	1d70      	adds	r0, r6, #5
                    break;
 8000c2a:	e7c2      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = '\"';
 8000c2c:	2322      	movs	r3, #34	; 0x22
 8000c2e:	7073      	strb	r3, [r6, #1]
                    break;
 8000c30:	e7bf      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'r';
 8000c32:	2372      	movs	r3, #114	; 0x72
 8000c34:	7073      	strb	r3, [r6, #1]
                    break;
 8000c36:	e7bc      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'f';
 8000c38:	2366      	movs	r3, #102	; 0x66
 8000c3a:	7073      	strb	r3, [r6, #1]
                    break;
 8000c3c:	e7b9      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'n';
 8000c3e:	236e      	movs	r3, #110	; 0x6e
 8000c40:	7073      	strb	r3, [r6, #1]
                    break;
 8000c42:	e7b6      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 't';
 8000c44:	f886 9001 	strb.w	r9, [r6, #1]
                    break;
 8000c48:	e7b3      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
                    *output_pointer = 'b';
 8000c4a:	2362      	movs	r3, #98	; 0x62
 8000c4c:	7073      	strb	r3, [r6, #1]
                    break;
 8000c4e:	e7b0      	b.n	8000bb2 <print_string_ptr.part.0+0x76>
        return false;
 8000c50:	2000      	movs	r0, #0
}
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000c56:	2103      	movs	r1, #3
 8000c58:	f7ff fee8 	bl	8000a2c <ensure>
    if (output == NULL)
 8000c5c:	4680      	mov	r8, r0
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d0f6      	beq.n	8000c50 <print_string_ptr.part.0+0x114>
 8000c62:	2602      	movs	r6, #2
 8000c64:	2701      	movs	r7, #1
        memcpy(output + 1, input, output_length);
 8000c66:	4622      	mov	r2, r4
        output[0] = '\"';
 8000c68:	4640      	mov	r0, r8
 8000c6a:	2422      	movs	r4, #34	; 0x22
        memcpy(output + 1, input, output_length);
 8000c6c:	4629      	mov	r1, r5
        output[0] = '\"';
 8000c6e:	f800 4b01 	strb.w	r4, [r0], #1
        memcpy(output + 1, input, output_length);
 8000c72:	f014 f9ba 	bl	8014fea <memcpy>
        output[output_length + 2] = '\0';
 8000c76:	2300      	movs	r3, #0
        output[output_length + 1] = '\"';
 8000c78:	f808 4007 	strb.w	r4, [r8, r7]
        return true;
 8000c7c:	2001      	movs	r0, #1
        output[output_length + 2] = '\0';
 8000c7e:	f808 3006 	strb.w	r3, [r8, r6]
}
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    output[output_length + 1] = '\"';
 8000c86:	1c77      	adds	r7, r6, #1
    output[output_length + 2] = '\0';
 8000c88:	3602      	adds	r6, #2
 8000c8a:	e7ec      	b.n	8000c66 <print_string_ptr.part.0+0x12a>
 8000c8c:	04000037 	.word	0x04000037
 8000c90:	08017644 	.word	0x08017644
 8000c94:	00000000 	.word	0x00000000

08000c98 <print_value.part.0>:
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
 8000c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch ((item->type) & 0xFF)
 8000c9c:	7b05      	ldrb	r5, [r0, #12]
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460c      	mov	r4, r1
    switch ((item->type) & 0xFF)
 8000ca2:	2d20      	cmp	r5, #32
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
 8000ca4:	ed2d 8b04 	vpush	{d8-d9}
 8000ca8:	b08d      	sub	sp, #52	; 0x34
    switch ((item->type) & 0xFF)
 8000caa:	dc50      	bgt.n	8000d4e <print_value.part.0+0xb6>
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d048      	beq.n	8000d42 <print_value.part.0+0xaa>
 8000cb0:	1e6b      	subs	r3, r5, #1
 8000cb2:	2b1f      	cmp	r3, #31
 8000cb4:	d844      	bhi.n	8000d40 <print_value.part.0+0xa8>
 8000cb6:	e8df f003 	tbb	[pc, r3]
 8000cba:	7063      	.short	0x7063
 8000cbc:	43438343 	.word	0x43438343
 8000cc0:	43431043 	.word	0x43431043
 8000cc4:	43434343 	.word	0x43434343
 8000cc8:	43438c43 	.word	0x43438c43
 8000ccc:	43434343 	.word	0x43434343
 8000cd0:	43434343 	.word	0x43434343
 8000cd4:	43434343 	.word	0x43434343
 8000cd8:	9943      	.short	0x9943
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000cda:	2300      	movs	r3, #0
    double test = 0.0;
 8000cdc:	2200      	movs	r2, #0
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000cde:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000ce2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000ce6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8000cea:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    double test = 0.0;
 8000cee:	2300      	movs	r3, #0
    double d = item->valuedouble;
 8000cf0:	ed90 8b06 	vldr	d8, [r0, #24]
    double test = 0.0;
 8000cf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (output_buffer == NULL)
 8000cf8:	b311      	cbz	r1, 8000d40 <print_value.part.0+0xa8>
    if (isnan(d) || isinf(d))
 8000cfa:	eeb4 8b48 	vcmp.f64	d8, d8
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	f180 8178 	bvs.w	8000ff6 <print_value.part.0+0x35e>
 8000d06:	eeb0 9bc8 	vabs.f64	d9, d8
 8000d0a:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8000ea0 <print_value.part.0+0x208>
 8000d0e:	eeb4 9b47 	vcmp.f64	d9, d7
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	f300 816e 	bgt.w	8000ff6 <print_value.part.0+0x35e>
    else if(d == (double)item->valueint)
 8000d1a:	6942      	ldr	r2, [r0, #20]
 8000d1c:	ee07 2a90 	vmov	s15, r2
 8000d20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d24:	eeb4 8b47 	vcmp.f64	d8, d7
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	f040 81b1 	bne.w	8001092 <print_value.part.0+0x3fa>
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8000d30:	495d      	ldr	r1, [pc, #372]	; (8000ea8 <print_value.part.0+0x210>)
 8000d32:	a805      	add	r0, sp, #20
 8000d34:	f013 ffaa 	bl	8014c8c <siprintf>
 8000d38:	4606      	mov	r6, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000d3a:	2e19      	cmp	r6, #25
 8000d3c:	f240 8162 	bls.w	8001004 <print_value.part.0+0x36c>
    switch ((item->type) & 0xFF)
 8000d40:	2500      	movs	r5, #0
}
 8000d42:	4628      	mov	r0, r5
 8000d44:	b00d      	add	sp, #52	; 0x34
 8000d46:	ecbd 8b04 	vpop	{d8-d9}
 8000d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
 8000d4e:	2d40      	cmp	r5, #64	; 0x40
 8000d50:	f000 80b2 	beq.w	8000eb8 <print_value.part.0+0x220>
 8000d54:	2d80      	cmp	r5, #128	; 0x80
 8000d56:	d1f3      	bne.n	8000d40 <print_value.part.0+0xa8>
            if (item->valuestring == NULL)
 8000d58:	6900      	ldr	r0, [r0, #16]
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d0f0      	beq.n	8000d40 <print_value.part.0+0xa8>
            raw_length = strlen(item->valuestring) + sizeof("");
 8000d5e:	f7ff fac9 	bl	80002f4 <strlen>
 8000d62:	4602      	mov	r2, r0
            output = ensure(output_buffer, raw_length);
 8000d64:	4620      	mov	r0, r4
            raw_length = strlen(item->valuestring) + sizeof("");
 8000d66:	3201      	adds	r2, #1
            output = ensure(output_buffer, raw_length);
 8000d68:	4611      	mov	r1, r2
 8000d6a:	9201      	str	r2, [sp, #4]
 8000d6c:	f7ff fe5e 	bl	8000a2c <ensure>
            if (output == NULL)
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d0e5      	beq.n	8000d40 <print_value.part.0+0xa8>
            memcpy(output, item->valuestring, raw_length);
 8000d74:	9a01      	ldr	r2, [sp, #4]
            return true;
 8000d76:	2501      	movs	r5, #1
            memcpy(output, item->valuestring, raw_length);
 8000d78:	6931      	ldr	r1, [r6, #16]
 8000d7a:	f014 f936 	bl	8014fea <memcpy>
            return true;
 8000d7e:	e7e0      	b.n	8000d42 <print_value.part.0+0xaa>
            output = ensure(output_buffer, 6);
 8000d80:	2106      	movs	r1, #6
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff fe52 	bl	8000a2c <ensure>
            if (output == NULL)
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d0d8      	beq.n	8000d40 <print_value.part.0+0xa8>
            strcpy((char*)output, "false");
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <print_value.part.0+0x214>)
 8000d90:	6810      	ldr	r0, [r2, #0]
 8000d92:	8892      	ldrh	r2, [r2, #4]
 8000d94:	6018      	str	r0, [r3, #0]
 8000d96:	809a      	strh	r2, [r3, #4]
            return true;
 8000d98:	e7d3      	b.n	8000d42 <print_value.part.0+0xaa>
            output = ensure(output_buffer, 5);
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff fe45 	bl	8000a2c <ensure>
            if (output == NULL)
 8000da2:	4603      	mov	r3, r0
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d0cb      	beq.n	8000d40 <print_value.part.0+0xa8>
            strcpy((char*)output, "true");
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <print_value.part.0+0x218>)
 8000daa:	6810      	ldr	r0, [r2, #0]
            return true;
 8000dac:	2501      	movs	r5, #1
            strcpy((char*)output, "true");
 8000dae:	7912      	ldrb	r2, [r2, #4]
 8000db0:	6018      	str	r0, [r3, #0]
}
 8000db2:	4628      	mov	r0, r5
            strcpy((char*)output, "true");
 8000db4:	711a      	strb	r2, [r3, #4]
}
 8000db6:	b00d      	add	sp, #52	; 0x34
 8000db8:	ecbd 8b04 	vpop	{d8-d9}
 8000dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            output = ensure(output_buffer, 5);
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f7ff fe32 	bl	8000a2c <ensure>
            if (output == NULL)
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d0b8      	beq.n	8000d40 <print_value.part.0+0xa8>
            strcpy((char*)output, "null");
 8000dce:	4a39      	ldr	r2, [pc, #228]	; (8000eb4 <print_value.part.0+0x21c>)
 8000dd0:	e7eb      	b.n	8000daa <print_value.part.0+0x112>
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8000dd2:	6900      	ldr	r0, [r0, #16]
    if (output_buffer == NULL)
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d0b3      	beq.n	8000d40 <print_value.part.0+0xa8>
    if (input == NULL)
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	f000 8189 	beq.w	80010f0 <print_value.part.0+0x458>
}
 8000dde:	b00d      	add	sp, #52	; 0x34
 8000de0:	ecbd 8b04 	vpop	{d8-d9}
 8000de4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000de8:	f7ff bea8 	b.w	8000b3c <print_string_ptr.part.0>
            return print_array(item, output_buffer);
 8000dec:	6885      	ldr	r5, [r0, #8]
    if (output_buffer == NULL)
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d0a6      	beq.n	8000d40 <print_value.part.0+0xa8>
    output_pointer = ensure(output_buffer, 1);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff fe19 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d0a0      	beq.n	8000d40 <print_value.part.0+0xa8>
    *output_pointer = '[';
 8000dfe:	235b      	movs	r3, #91	; 0x5b
 8000e00:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
 8000e02:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    output_buffer->offset++;
 8000e06:	3201      	adds	r2, #1
    output_buffer->depth++;
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e9c4 2302 	strd	r2, r3, [r4, #8]
    while (current_element != NULL)
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d033      	beq.n	8000e7a <print_value.part.0+0x1e2>
            *output_pointer++ = ',';
 8000e12:	272c      	movs	r7, #44	; 0x2c
                *output_pointer++ = ' ';
 8000e14:	f04f 0820 	mov.w	r8, #32
            *output_pointer = '\0';
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e006      	b.n	8000e2a <print_value.part.0+0x192>
            *output_pointer++ = ',';
 8000e1c:	3001      	adds	r0, #1
            *output_pointer = '\0';
 8000e1e:	7006      	strb	r6, [r0, #0]
            output_buffer->offset += length;
 8000e20:	68a3      	ldr	r3, [r4, #8]
        current_element = current_element->next;
 8000e22:	682d      	ldr	r5, [r5, #0]
            output_buffer->offset += length;
 8000e24:	444b      	add	r3, r9
 8000e26:	60a3      	str	r3, [r4, #8]
    while (current_element != NULL)
 8000e28:	b33d      	cbz	r5, 8000e7a <print_value.part.0+0x1e2>
    if ((item == NULL) || (output_buffer == NULL))
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f7ff ff33 	bl	8000c98 <print_value.part.0>
        if (!print_value(current_element, output_buffer))
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d084      	beq.n	8000d40 <print_value.part.0+0xa8>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000e36:	6820      	ldr	r0, [r4, #0]
 8000e38:	b130      	cbz	r0, 8000e48 <print_value.part.0+0x1b0>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000e3a:	f8d4 9008 	ldr.w	r9, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000e3e:	4448      	add	r0, r9
 8000e40:	f7ff fa58 	bl	80002f4 <strlen>
 8000e44:	4448      	add	r0, r9
 8000e46:	60a0      	str	r0, [r4, #8]
        if (current_element->next)
 8000e48:	682b      	ldr	r3, [r5, #0]
            output_pointer = ensure(output_buffer, length + 1);
 8000e4a:	4620      	mov	r0, r4
        if (current_element->next)
 8000e4c:	b1ab      	cbz	r3, 8000e7a <print_value.part.0+0x1e2>
            length = (size_t) (output_buffer->format ? 2 : 1);
 8000e4e:	6963      	ldr	r3, [r4, #20]
 8000e50:	2b00      	cmp	r3, #0
            output_pointer = ensure(output_buffer, length + 1);
 8000e52:	bf15      	itete	ne
 8000e54:	2103      	movne	r1, #3
 8000e56:	2102      	moveq	r1, #2
            length = (size_t) (output_buffer->format ? 2 : 1);
 8000e58:	f04f 0902 	movne.w	r9, #2
 8000e5c:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
 8000e60:	f7ff fde4 	bl	8000a2c <ensure>
            if (output_pointer == NULL)
 8000e64:	2800      	cmp	r0, #0
 8000e66:	f43f af6b 	beq.w	8000d40 <print_value.part.0+0xa8>
            *output_pointer++ = ',';
 8000e6a:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
 8000e6c:	6963      	ldr	r3, [r4, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0d4      	beq.n	8000e1c <print_value.part.0+0x184>
                *output_pointer++ = ' ';
 8000e72:	f880 8001 	strb.w	r8, [r0, #1]
 8000e76:	3002      	adds	r0, #2
 8000e78:	e7d1      	b.n	8000e1e <print_value.part.0+0x186>
    output_pointer = ensure(output_buffer, 2);
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff fdd5 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000e82:	2800      	cmp	r0, #0
 8000e84:	f43f af5c 	beq.w	8000d40 <print_value.part.0+0xa8>
    *output_pointer++ = ']';
 8000e88:	225d      	movs	r2, #93	; 0x5d
    *output_pointer = '\0';
 8000e8a:	2300      	movs	r3, #0
    *output_pointer++ = '}';
 8000e8c:	7002      	strb	r2, [r0, #0]
    return true;
 8000e8e:	2501      	movs	r5, #1
    *output_pointer = '\0';
 8000e90:	7043      	strb	r3, [r0, #1]
    output_buffer->depth--;
 8000e92:	68e3      	ldr	r3, [r4, #12]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60e3      	str	r3, [r4, #12]
    return true;
 8000e98:	e753      	b.n	8000d42 <print_value.part.0+0xaa>
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	ffffffff 	.word	0xffffffff
 8000ea4:	7fefffff 	.word	0x7fefffff
 8000ea8:	08017664 	.word	0x08017664
 8000eac:	08017654 	.word	0x08017654
 8000eb0:	0801765c 	.word	0x0801765c
 8000eb4:	0801764c 	.word	0x0801764c
            return print_object(item, output_buffer);
 8000eb8:	6885      	ldr	r5, [r0, #8]
    if (output_buffer == NULL)
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	f43f af40 	beq.w	8000d40 <print_value.part.0+0xa8>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8000ec0:	694b      	ldr	r3, [r1, #20]
    output_pointer = ensure(output_buffer, length + 1);
 8000ec2:	4608      	mov	r0, r1
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8000ec4:	2b00      	cmp	r3, #0
    output_pointer = ensure(output_buffer, length + 1);
 8000ec6:	bf15      	itete	ne
 8000ec8:	2103      	movne	r1, #3
 8000eca:	2102      	moveq	r1, #2
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8000ecc:	2602      	movne	r6, #2
 8000ece:	2601      	moveq	r6, #1
    output_pointer = ensure(output_buffer, length + 1);
 8000ed0:	f7ff fdac 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000ed4:	2800      	cmp	r0, #0
 8000ed6:	f43f af33 	beq.w	8000d40 <print_value.part.0+0xa8>
    *output_pointer++ = '{';
 8000eda:	237b      	movs	r3, #123	; 0x7b
 8000edc:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
 8000ede:	68e3      	ldr	r3, [r4, #12]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60e3      	str	r3, [r4, #12]
    if (output_buffer->format)
 8000ee4:	6963      	ldr	r3, [r4, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 80a6 	bne.w	8001038 <print_value.part.0+0x3a0>
    output_buffer->offset += length;
 8000eec:	68a2      	ldr	r2, [r4, #8]
 8000eee:	4432      	add	r2, r6
 8000ef0:	60a2      	str	r2, [r4, #8]
    while (current_item)
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	f000 810a 	beq.w	800110c <print_value.part.0+0x474>
                *output_pointer++ = '\t';
 8000ef8:	2609      	movs	r6, #9
        strcpy((char*)output, "\"\"");
 8000efa:	4f87      	ldr	r7, [pc, #540]	; (8001118 <print_value.part.0+0x480>)
        if (output_buffer->format)
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f040 80a5 	bne.w	800104c <print_value.part.0+0x3b4>
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8000f02:	6a28      	ldr	r0, [r5, #32]
    if (input == NULL)
 8000f04:	2800      	cmp	r0, #0
 8000f06:	f000 80b8 	beq.w	800107a <print_value.part.0+0x3e2>
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	f7ff fe16 	bl	8000b3c <print_string_ptr.part.0>
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8000f10:	2800      	cmp	r0, #0
 8000f12:	f43f af15 	beq.w	8000d40 <print_value.part.0+0xa8>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000f16:	6820      	ldr	r0, [r4, #0]
 8000f18:	b130      	cbz	r0, 8000f28 <print_value.part.0+0x290>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000f1a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000f1e:	4440      	add	r0, r8
 8000f20:	f7ff f9e8 	bl	80002f4 <strlen>
 8000f24:	4440      	add	r0, r8
 8000f26:	60a0      	str	r0, [r4, #8]
        length = (size_t) (output_buffer->format ? 2 : 1);
 8000f28:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
 8000f2a:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	f04f 0802 	movne.w	r8, #2
 8000f34:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
 8000f38:	4641      	mov	r1, r8
 8000f3a:	f7ff fd77 	bl	8000a2c <ensure>
        if (output_pointer == NULL)
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	f43f aefe 	beq.w	8000d40 <print_value.part.0+0xa8>
        *output_pointer++ = ':';
 8000f44:	233a      	movs	r3, #58	; 0x3a
 8000f46:	7003      	strb	r3, [r0, #0]
        if (output_buffer->format)
 8000f48:	6963      	ldr	r3, [r4, #20]
 8000f4a:	b103      	cbz	r3, 8000f4e <print_value.part.0+0x2b6>
            *output_pointer++ = '\t';
 8000f4c:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
 8000f4e:	68a3      	ldr	r3, [r4, #8]
 8000f50:	4621      	mov	r1, r4
 8000f52:	4628      	mov	r0, r5
 8000f54:	4443      	add	r3, r8
 8000f56:	60a3      	str	r3, [r4, #8]
    if ((item == NULL) || (output_buffer == NULL))
 8000f58:	f7ff fe9e 	bl	8000c98 <print_value.part.0>
        if (!print_value(current_item, output_buffer))
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	f43f aeef 	beq.w	8000d40 <print_value.part.0+0xa8>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000f62:	6820      	ldr	r0, [r4, #0]
 8000f64:	b130      	cbz	r0, 8000f74 <print_value.part.0+0x2dc>
    buffer_pointer = buffer->buffer + buffer->offset;
 8000f66:	f8d4 8008 	ldr.w	r8, [r4, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
 8000f6a:	4440      	add	r0, r8
 8000f6c:	f7ff f9c2 	bl	80002f4 <strlen>
 8000f70:	4440      	add	r0, r8
 8000f72:	60a0      	str	r0, [r4, #8]
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8000f74:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length + 1);
 8000f76:	4620      	mov	r0, r4
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8000f78:	682a      	ldr	r2, [r5, #0]
 8000f7a:	f1b3 0800 	subs.w	r8, r3, #0
 8000f7e:	bf18      	it	ne
 8000f80:	f04f 0801 	movne.w	r8, #1
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	bf18      	it	ne
 8000f88:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
 8000f8c:	f108 0101 	add.w	r1, r8, #1
 8000f90:	f7ff fd4c 	bl	8000a2c <ensure>
        if (output_pointer == NULL)
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f43f aed3 	beq.w	8000d40 <print_value.part.0+0xa8>
        if (current_item->next)
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	b113      	cbz	r3, 8000fa4 <print_value.part.0+0x30c>
            *output_pointer++ = ',';
 8000f9e:	232c      	movs	r3, #44	; 0x2c
 8000fa0:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
 8000fa4:	6963      	ldr	r3, [r4, #20]
 8000fa6:	b113      	cbz	r3, 8000fae <print_value.part.0+0x316>
            *output_pointer++ = '\n';
 8000fa8:	230a      	movs	r3, #10
 8000faa:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
 8000fae:	2300      	movs	r3, #0
 8000fb0:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
 8000fb2:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
 8000fb4:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
 8000fb6:	4443      	add	r3, r8
 8000fb8:	60a3      	str	r3, [r4, #8]
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8000fba:	6963      	ldr	r3, [r4, #20]
    while (current_item)
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d19d      	bne.n	8000efc <print_value.part.0+0x264>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a3 	beq.w	800110c <print_value.part.0+0x474>
 8000fc6:	68e1      	ldr	r1, [r4, #12]
 8000fc8:	3101      	adds	r1, #1
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff fd2e 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	f43f aeb5 	beq.w	8000d40 <print_value.part.0+0xa8>
    if (output_buffer->format)
 8000fd6:	6963      	ldr	r3, [r4, #20]
 8000fd8:	b15b      	cbz	r3, 8000ff2 <print_value.part.0+0x35a>
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d008      	beq.n	8000ff2 <print_value.part.0+0x35a>
 8000fe0:	2200      	movs	r2, #0
            *output_pointer++ = '\t';
 8000fe2:	2109      	movs	r1, #9
 8000fe4:	f800 1b01 	strb.w	r1, [r0], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8000fe8:	3201      	adds	r2, #1
 8000fea:	68e3      	ldr	r3, [r4, #12]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3f8      	bcc.n	8000fe4 <print_value.part.0+0x34c>
    *output_pointer++ = '}';
 8000ff2:	227d      	movs	r2, #125	; 0x7d
 8000ff4:	e749      	b.n	8000e8a <print_value.part.0+0x1f2>
        length = sprintf((char*)number_buffer, "null");
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <print_value.part.0+0x484>)
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000ff8:	2604      	movs	r6, #4
        length = sprintf((char*)number_buffer, "null");
 8000ffa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ffe:	9005      	str	r0, [sp, #20]
 8001000:	f88d 1018 	strb.w	r1, [sp, #24]
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001004:	1c71      	adds	r1, r6, #1
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff fd10 	bl	8000a2c <ensure>
    if (output_pointer == NULL)
 800100c:	2800      	cmp	r0, #0
 800100e:	f43f ae97 	beq.w	8000d40 <print_value.part.0+0xa8>
    for (i = 0; i < ((size_t)length); i++)
 8001012:	b156      	cbz	r6, 800102a <print_value.part.0+0x392>
 8001014:	4603      	mov	r3, r0
 8001016:	ad05      	add	r5, sp, #20
 8001018:	1981      	adds	r1, r0, r6
        if (number_buffer[i] == decimal_point)
 800101a:	f815 2b01 	ldrb.w	r2, [r5], #1
    for (i = 0; i < ((size_t)length); i++)
 800101e:	3301      	adds	r3, #1
            output_pointer[i] = '.';
 8001020:	f803 2c01 	strb.w	r2, [r3, #-1]
    for (i = 0; i < ((size_t)length); i++)
 8001024:	4299      	cmp	r1, r3
 8001026:	d1f8      	bne.n	800101a <print_value.part.0+0x382>
    output_pointer[i] = '\0';
 8001028:	4608      	mov	r0, r1
 800102a:	2300      	movs	r3, #0
    return true;
 800102c:	2501      	movs	r5, #1
    output_pointer[i] = '\0';
 800102e:	7003      	strb	r3, [r0, #0]
    output_buffer->offset += (size_t)length;
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	4433      	add	r3, r6
 8001034:	60a3      	str	r3, [r4, #8]
            return print_number(item, output_buffer);
 8001036:	e684      	b.n	8000d42 <print_value.part.0+0xaa>
        *output_pointer++ = '\n';
 8001038:	230a      	movs	r3, #10
 800103a:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
 800103c:	68a2      	ldr	r2, [r4, #8]
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800103e:	6963      	ldr	r3, [r4, #20]
    output_buffer->offset += length;
 8001040:	4432      	add	r2, r6
 8001042:	60a2      	str	r2, [r4, #8]
    while (current_item)
 8001044:	2d00      	cmp	r5, #0
 8001046:	f47f af57 	bne.w	8000ef8 <print_value.part.0+0x260>
 800104a:	e7b9      	b.n	8000fc0 <print_value.part.0+0x328>
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800104c:	68e1      	ldr	r1, [r4, #12]
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff fcec 	bl	8000a2c <ensure>
            if (output_pointer == NULL)
 8001054:	2800      	cmp	r0, #0
 8001056:	f43f ae73 	beq.w	8000d40 <print_value.part.0+0xa8>
            for (i = 0; i < output_buffer->depth; i++)
 800105a:	68e2      	ldr	r2, [r4, #12]
 800105c:	b132      	cbz	r2, 800106c <print_value.part.0+0x3d4>
 800105e:	2300      	movs	r3, #0
 8001060:	3301      	adds	r3, #1
                *output_pointer++ = '\t';
 8001062:	f800 6b01 	strb.w	r6, [r0], #1
            for (i = 0; i < output_buffer->depth; i++)
 8001066:	68e2      	ldr	r2, [r4, #12]
 8001068:	4293      	cmp	r3, r2
 800106a:	d3f9      	bcc.n	8001060 <print_value.part.0+0x3c8>
            output_buffer->offset += output_buffer->depth;
 800106c:	68a3      	ldr	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800106e:	6a28      	ldr	r0, [r5, #32]
            output_buffer->offset += output_buffer->depth;
 8001070:	4413      	add	r3, r2
 8001072:	60a3      	str	r3, [r4, #8]
    if (input == NULL)
 8001074:	2800      	cmp	r0, #0
 8001076:	f47f af48 	bne.w	8000f0a <print_value.part.0+0x272>
        output = ensure(output_buffer, sizeof("\"\""));
 800107a:	2103      	movs	r1, #3
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fcd5 	bl	8000a2c <ensure>
        if (output == NULL)
 8001082:	2800      	cmp	r0, #0
 8001084:	f43f ae5c 	beq.w	8000d40 <print_value.part.0+0xa8>
        strcpy((char*)output, "\"\"");
 8001088:	883b      	ldrh	r3, [r7, #0]
 800108a:	8003      	strh	r3, [r0, #0]
 800108c:	78bb      	ldrb	r3, [r7, #2]
 800108e:	7083      	strb	r3, [r0, #2]
        return true;
 8001090:	e741      	b.n	8000f16 <print_value.part.0+0x27e>
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001092:	ec53 2b18 	vmov	r2, r3, d8
 8001096:	4922      	ldr	r1, [pc, #136]	; (8001120 <print_value.part.0+0x488>)
 8001098:	a805      	add	r0, sp, #20
 800109a:	f013 fdf7 	bl	8014c8c <siprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800109e:	aa02      	add	r2, sp, #8
 80010a0:	4920      	ldr	r1, [pc, #128]	; (8001124 <print_value.part.0+0x48c>)
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80010a2:	4606      	mov	r6, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80010a4:	a805      	add	r0, sp, #20
 80010a6:	f013 fe11 	bl	8014ccc <siscanf>
 80010aa:	2801      	cmp	r0, #1
 80010ac:	d118      	bne.n	80010e0 <print_value.part.0+0x448>
 80010ae:	ed9d 6b02 	vldr	d6, [sp, #8]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010b2:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8001110 <print_value.part.0+0x478>
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80010b6:	eeb0 7bc6 	vabs.f64	d7, d6
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010ba:	ee36 6b48 	vsub.f64	d6, d6, d8
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80010be:	eeb4 9bc7 	vcmpe.f64	d9, d7
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010c2:	eeb0 6bc6 	vabs.f64	d6, d6
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	bf58      	it	pl
 80010cc:	eeb0 7b49 	vmovpl.f64	d7, d9
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010d0:	ee27 7b05 	vmul.f64	d7, d7, d5
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80010d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	f67f ae2d 	bls.w	8000d3a <print_value.part.0+0xa2>
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80010e0:	4911      	ldr	r1, [pc, #68]	; (8001128 <print_value.part.0+0x490>)
 80010e2:	a805      	add	r0, sp, #20
 80010e4:	ec53 2b18 	vmov	r2, r3, d8
 80010e8:	f013 fdd0 	bl	8014c8c <siprintf>
 80010ec:	4606      	mov	r6, r0
 80010ee:	e624      	b.n	8000d3a <print_value.part.0+0xa2>
        output = ensure(output_buffer, sizeof("\"\""));
 80010f0:	2103      	movs	r1, #3
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff fc9a 	bl	8000a2c <ensure>
        if (output == NULL)
 80010f8:	2800      	cmp	r0, #0
 80010fa:	f43f ae21 	beq.w	8000d40 <print_value.part.0+0xa8>
        strcpy((char*)output, "\"\"");
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <print_value.part.0+0x480>)
        return true;
 8001100:	2501      	movs	r5, #1
        strcpy((char*)output, "\"\"");
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	789b      	ldrb	r3, [r3, #2]
 8001106:	8002      	strh	r2, [r0, #0]
 8001108:	7083      	strb	r3, [r0, #2]
        return true;
 800110a:	e61a      	b.n	8000d42 <print_value.part.0+0xaa>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800110c:	2102      	movs	r1, #2
 800110e:	e75c      	b.n	8000fca <print_value.part.0+0x332>
 8001110:	00000000 	.word	0x00000000
 8001114:	3cb00000 	.word	0x3cb00000
 8001118:	0801767c 	.word	0x0801767c
 800111c:	0801764c 	.word	0x0801764c
 8001120:	08017668 	.word	0x08017668
 8001124:	08017670 	.word	0x08017670
 8001128:	08017674 	.word	0x08017674

0800112c <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	b08b      	sub	sp, #44	; 0x2c
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001130:	4f28      	ldr	r7, [pc, #160]	; (80011d4 <print.constprop.0+0xa8>)
    memset(buffer, 0, sizeof(buffer));
 8001132:	2224      	movs	r2, #36	; 0x24
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
 8001134:	460e      	mov	r6, r1
 8001136:	4605      	mov	r5, r0
    memset(buffer, 0, sizeof(buffer));
 8001138:	2100      	movs	r1, #0
 800113a:	a801      	add	r0, sp, #4
 800113c:	f013 fe61 	bl	8014e02 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	4798      	blx	r3
    buffer->length = default_buffer_size;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800114c:	4604      	mov	r4, r0
 800114e:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
 8001150:	9302      	str	r3, [sp, #8]
    buffer->hooks = *hooks;
 8001152:	ab0a      	add	r3, sp, #40	; 0x28
    buffer->format = format;
 8001154:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
 8001156:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800115a:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if ((item == NULL) || (output_buffer == NULL))
 800115e:	b1ac      	cbz	r4, 800118c <print.constprop.0+0x60>
 8001160:	b1c5      	cbz	r5, 8001194 <print.constprop.0+0x68>
 8001162:	a901      	add	r1, sp, #4
 8001164:	4628      	mov	r0, r5
 8001166:	f7ff fd97 	bl	8000c98 <print_value.part.0>
    if (!print_value(item, buffer))
 800116a:	b190      	cbz	r0, 8001192 <print.constprop.0+0x66>
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800116c:	9d01      	ldr	r5, [sp, #4]
 800116e:	2d00      	cmp	r5, #0
 8001170:	d02e      	beq.n	80011d0 <print.constprop.0+0xa4>
    buffer_pointer = buffer->buffer + buffer->offset;
 8001172:	9c03      	ldr	r4, [sp, #12]
    buffer->offset += strlen((const char*)buffer_pointer);
 8001174:	1928      	adds	r0, r5, r4
 8001176:	f7ff f8bd 	bl	80002f4 <strlen>
 800117a:	4420      	add	r0, r4
 800117c:	9003      	str	r0, [sp, #12]
    if (hooks->reallocate != NULL)
 800117e:	68be      	ldr	r6, [r7, #8]
 8001180:	b18e      	cbz	r6, 80011a6 <print.constprop.0+0x7a>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8001182:	1c41      	adds	r1, r0, #1
 8001184:	4628      	mov	r0, r5
 8001186:	47b0      	blx	r6
        if (printed == NULL) {
 8001188:	4604      	mov	r4, r0
 800118a:	b110      	cbz	r0, 8001192 <print.constprop.0+0x66>
}
 800118c:	4620      	mov	r0, r4
 800118e:	b00b      	add	sp, #44	; 0x2c
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8001192:	9c01      	ldr	r4, [sp, #4]
    if (buffer->buffer != NULL)
 8001194:	2c00      	cmp	r4, #0
 8001196:	d0f9      	beq.n	800118c <print.constprop.0+0x60>
        hooks->deallocate(buffer->buffer);
 8001198:	4620      	mov	r0, r4
    return NULL;
 800119a:	2400      	movs	r4, #0
        hooks->deallocate(buffer->buffer);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4798      	blx	r3
}
 80011a0:	4620      	mov	r0, r4
 80011a2:	b00b      	add	sp, #44	; 0x2c
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3001      	adds	r0, #1
 80011aa:	4798      	blx	r3
        if (printed == NULL)
 80011ac:	4604      	mov	r4, r0
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d0ef      	beq.n	8001192 <print.constprop.0+0x66>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80011b2:	9a03      	ldr	r2, [sp, #12]
 80011b4:	9b02      	ldr	r3, [sp, #8]
 80011b6:	3201      	adds	r2, #1
 80011b8:	9901      	ldr	r1, [sp, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	bf28      	it	cs
 80011be:	461a      	movcs	r2, r3
 80011c0:	f013 ff13 	bl	8014fea <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80011c4:	9b03      	ldr	r3, [sp, #12]
 80011c6:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	9801      	ldr	r0, [sp, #4]
 80011cc:	4798      	blx	r3
        buffer->buffer = NULL;
 80011ce:	e7dd      	b.n	800118c <print.constprop.0+0x60>
    buffer_pointer = buffer->buffer + buffer->offset;
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	e7d4      	b.n	800117e <print.constprop.0+0x52>
 80011d4:	24000000 	.word	0x24000000

080011d8 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
    char *new_key = NULL;
    int new_type = cJSON_Invalid;

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80011d8:	2800      	cmp	r0, #0
 80011da:	d03c      	beq.n	8001256 <add_item_to_object.constprop.0+0x7e>
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011de:	460d      	mov	r5, r1
 80011e0:	b083      	sub	sp, #12
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80011e2:	b1d9      	cbz	r1, 800121c <add_item_to_object.constprop.0+0x44>
 80011e4:	4614      	mov	r4, r2
 80011e6:	b1ca      	cbz	r2, 800121c <add_item_to_object.constprop.0+0x44>
 80011e8:	4290      	cmp	r0, r2
 80011ea:	4606      	mov	r6, r0
 80011ec:	d016      	beq.n	800121c <add_item_to_object.constprop.0+0x44>
    {
        return false;
    }

    if (constant_key)
 80011ee:	b1eb      	cbz	r3, 800122c <add_item_to_object.constprop.0+0x54>
    {
        new_key = (char*)cast_away_const(string);
        new_type = item->type | cJSON_StringIsConst;
 80011f0:	68d3      	ldr	r3, [r2, #12]
 80011f2:	f443 7700 	orr.w	r7, r3, #512	; 0x200
        }

        new_type = item->type & ~cJSON_StringIsConst;
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011f6:	059b      	lsls	r3, r3, #22
 80011f8:	d404      	bmi.n	8001204 <add_item_to_object.constprop.0+0x2c>
 80011fa:	6a20      	ldr	r0, [r4, #32]
 80011fc:	b110      	cbz	r0, 8001204 <add_item_to_object.constprop.0+0x2c>
    {
        hooks->deallocate(item->string);
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <add_item_to_object.constprop.0+0x88>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4798      	blx	r3
    child = array->child;
 8001204:	68b3      	ldr	r3, [r6, #8]
    }

    item->string = new_key;
 8001206:	6225      	str	r5, [r4, #32]
    item->type = new_type;
 8001208:	60e7      	str	r7, [r4, #12]
    if (child == NULL)
 800120a:	b153      	cbz	r3, 8001222 <add_item_to_object.constprop.0+0x4a>
        if (child->prev)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	b322      	cbz	r2, 800125a <add_item_to_object.constprop.0+0x82>
            array->child->prev = item;
 8001210:	2001      	movs	r0, #1
    prev->next = item;
 8001212:	6014      	str	r4, [r2, #0]
    item->prev = prev;
 8001214:	6062      	str	r2, [r4, #4]
            array->child->prev = item;
 8001216:	605c      	str	r4, [r3, #4]

    return add_item_to_array(object, item);
}
 8001218:	b003      	add	sp, #12
 800121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
 800121c:	2000      	movs	r0, #0
}
 800121e:	b003      	add	sp, #12
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        array->child = item;
 8001222:	60b4      	str	r4, [r6, #8]
        item->prev = item;
 8001224:	2001      	movs	r0, #1
        item->next = NULL;
 8001226:	e9c4 3400 	strd	r3, r4, [r4]
 800122a:	e7f8      	b.n	800121e <add_item_to_object.constprop.0+0x46>
    length = strlen((const char*)string) + sizeof("");
 800122c:	4608      	mov	r0, r1
 800122e:	f7ff f861 	bl	80002f4 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <add_item_to_object.constprop.0+0x88>)
    length = strlen((const char*)string) + sizeof("");
 8001234:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4610      	mov	r0, r2
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	4798      	blx	r3
    if (copy == NULL)
 800123e:	4607      	mov	r7, r0
 8001240:	2800      	cmp	r0, #0
 8001242:	d0eb      	beq.n	800121c <add_item_to_object.constprop.0+0x44>
    memcpy(copy, string, length);
 8001244:	4629      	mov	r1, r5
 8001246:	9a01      	ldr	r2, [sp, #4]
 8001248:	f013 fecf 	bl	8014fea <memcpy>
        new_type = item->type & ~cJSON_StringIsConst;
 800124c:	68e3      	ldr	r3, [r4, #12]
 800124e:	463d      	mov	r5, r7
 8001250:	f423 7700 	bic.w	r7, r3, #512	; 0x200
 8001254:	e7cf      	b.n	80011f6 <add_item_to_object.constprop.0+0x1e>
        return false;
 8001256:	2000      	movs	r0, #0
}
 8001258:	4770      	bx	lr
 800125a:	2001      	movs	r0, #1
 800125c:	e7df      	b.n	800121e <add_item_to_object.constprop.0+0x46>
 800125e:	bf00      	nop
 8001260:	24000000 	.word	0x24000000

08001264 <cJSON_Delete>:
    while (item != NULL)
 8001264:	b358      	cbz	r0, 80012be <cJSON_Delete+0x5a>
{
 8001266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126a:	4605      	mov	r5, r0
 800126c:	4f14      	ldr	r7, [pc, #80]	; (80012c0 <cJSON_Delete+0x5c>)
            item->valuestring = NULL;
 800126e:	f04f 0800 	mov.w	r8, #0
        next = item->next;
 8001272:	462c      	mov	r4, r5
 8001274:	682d      	ldr	r5, [r5, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001276:	68e2      	ldr	r2, [r4, #12]
 8001278:	05d1      	lsls	r1, r2, #23
 800127a:	4616      	mov	r6, r2
 800127c:	d40e      	bmi.n	800129c <cJSON_Delete+0x38>
 800127e:	68a0      	ldr	r0, [r4, #8]
 8001280:	b128      	cbz	r0, 800128e <cJSON_Delete+0x2a>
            cJSON_Delete(item->child);
 8001282:	f7ff ffef 	bl	8001264 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001286:	68e2      	ldr	r2, [r4, #12]
 8001288:	05d3      	lsls	r3, r2, #23
 800128a:	4616      	mov	r6, r2
 800128c:	d406      	bmi.n	800129c <cJSON_Delete+0x38>
 800128e:	6920      	ldr	r0, [r4, #16]
 8001290:	b198      	cbz	r0, 80012ba <cJSON_Delete+0x56>
            global_hooks.deallocate(item->valuestring);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4798      	blx	r3
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001296:	68e6      	ldr	r6, [r4, #12]
            item->valuestring = NULL;
 8001298:	f8c4 8010 	str.w	r8, [r4, #16]
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800129c:	f416 7600 	ands.w	r6, r6, #512	; 0x200
 80012a0:	d104      	bne.n	80012ac <cJSON_Delete+0x48>
 80012a2:	6a20      	ldr	r0, [r4, #32]
 80012a4:	b110      	cbz	r0, 80012ac <cJSON_Delete+0x48>
            global_hooks.deallocate(item->string);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4798      	blx	r3
            item->string = NULL;
 80012aa:	6226      	str	r6, [r4, #32]
        global_hooks.deallocate(item);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4620      	mov	r0, r4
 80012b0:	4798      	blx	r3
    while (item != NULL)
 80012b2:	2d00      	cmp	r5, #0
 80012b4:	d1dd      	bne.n	8001272 <cJSON_Delete+0xe>
}
 80012b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80012ba:	4616      	mov	r6, r2
 80012bc:	e7ee      	b.n	800129c <cJSON_Delete+0x38>
 80012be:	4770      	bx	lr
 80012c0:	24000000 	.word	0x24000000
 80012c4:	00000000 	.word	0x00000000

080012c8 <parse_value>:
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d065      	beq.n	8001398 <parse_value+0xd0>
{
 80012cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80012d0:	f8d1 8000 	ldr.w	r8, [r1]
{
 80012d4:	b093      	sub	sp, #76	; 0x4c
 80012d6:	460c      	mov	r4, r1
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80012d8:	f1b8 0f00 	cmp.w	r8, #0
 80012dc:	d033      	beq.n	8001346 <parse_value+0x7e>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80012de:	688e      	ldr	r6, [r1, #8]
 80012e0:	4605      	mov	r5, r0
 80012e2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80012e6:	1d37      	adds	r7, r6, #4
 80012e8:	454f      	cmp	r7, r9
 80012ea:	d830      	bhi.n	800134e <parse_value+0x86>
 80012ec:	eb08 0b06 	add.w	fp, r8, r6
 80012f0:	2204      	movs	r2, #4
 80012f2:	49a5      	ldr	r1, [pc, #660]	; (8001588 <parse_value+0x2c0>)
 80012f4:	4658      	mov	r0, fp
 80012f6:	f013 fd8c 	bl	8014e12 <strncmp>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d04e      	beq.n	800139c <parse_value+0xd4>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80012fe:	f106 0a05 	add.w	sl, r6, #5
 8001302:	45d1      	cmp	r9, sl
 8001304:	d234      	bcs.n	8001370 <parse_value+0xa8>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001306:	4658      	mov	r0, fp
 8001308:	2204      	movs	r2, #4
 800130a:	49a0      	ldr	r1, [pc, #640]	; (800158c <parse_value+0x2c4>)
 800130c:	f013 fd81 	bl	8014e12 <strncmp>
 8001310:	2800      	cmp	r0, #0
 8001312:	d03b      	beq.n	800138c <parse_value+0xc4>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001314:	454e      	cmp	r6, r9
 8001316:	d216      	bcs.n	8001346 <parse_value+0x7e>
 8001318:	f818 3006 	ldrb.w	r3, [r8, r6]
 800131c:	2b22      	cmp	r3, #34	; 0x22
 800131e:	f000 8104 	beq.w	800152a <parse_value+0x262>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001322:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001326:	2a09      	cmp	r2, #9
 8001328:	f240 80ab 	bls.w	8001482 <parse_value+0x1ba>
 800132c:	f1a3 072d 	sub.w	r7, r3, #45	; 0x2d
 8001330:	fab7 f787 	clz	r7, r7
 8001334:	097f      	lsrs	r7, r7, #5
 8001336:	2f00      	cmp	r7, #0
 8001338:	f040 80a3 	bne.w	8001482 <parse_value+0x1ba>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800133c:	2b5b      	cmp	r3, #91	; 0x5b
 800133e:	f000 80fb 	beq.w	8001538 <parse_value+0x270>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001342:	2b7b      	cmp	r3, #123	; 0x7b
 8001344:	d031      	beq.n	80013aa <parse_value+0xe2>
    return false;
 8001346:	2000      	movs	r0, #0
}
 8001348:	b013      	add	sp, #76	; 0x4c
 800134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800134e:	f106 0a05 	add.w	sl, r6, #5
 8001352:	45d1      	cmp	r9, sl
 8001354:	d3de      	bcc.n	8001314 <parse_value+0x4c>
 8001356:	2205      	movs	r2, #5
 8001358:	498d      	ldr	r1, [pc, #564]	; (8001590 <parse_value+0x2c8>)
 800135a:	eb08 0006 	add.w	r0, r8, r6
 800135e:	f013 fd58 	bl	8014e12 <strncmp>
 8001362:	2800      	cmp	r0, #0
 8001364:	d1d6      	bne.n	8001314 <parse_value+0x4c>
        item->type = cJSON_False;
 8001366:	2001      	movs	r0, #1
 8001368:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
 800136a:	f8c4 a008 	str.w	sl, [r4, #8]
        return true;
 800136e:	e7eb      	b.n	8001348 <parse_value+0x80>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001370:	2205      	movs	r2, #5
 8001372:	4987      	ldr	r1, [pc, #540]	; (8001590 <parse_value+0x2c8>)
 8001374:	4658      	mov	r0, fp
 8001376:	f013 fd4c 	bl	8014e12 <strncmp>
 800137a:	2800      	cmp	r0, #0
 800137c:	d0f3      	beq.n	8001366 <parse_value+0x9e>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800137e:	4658      	mov	r0, fp
 8001380:	2204      	movs	r2, #4
 8001382:	4982      	ldr	r1, [pc, #520]	; (800158c <parse_value+0x2c4>)
 8001384:	f013 fd45 	bl	8014e12 <strncmp>
 8001388:	2800      	cmp	r0, #0
 800138a:	d1c3      	bne.n	8001314 <parse_value+0x4c>
        item->valueint = 1;
 800138c:	2001      	movs	r0, #1
        item->type = cJSON_True;
 800138e:	2302      	movs	r3, #2
        item->valueint = 1;
 8001390:	6168      	str	r0, [r5, #20]
        item->type = cJSON_True;
 8001392:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 8001394:	60a7      	str	r7, [r4, #8]
        return true;
 8001396:	e7d7      	b.n	8001348 <parse_value+0x80>
        return false; /* no input */
 8001398:	2000      	movs	r0, #0
}
 800139a:	4770      	bx	lr
        item->type = cJSON_NULL;
 800139c:	2304      	movs	r3, #4
        return true;
 800139e:	2001      	movs	r0, #1
        item->type = cJSON_NULL;
 80013a0:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 80013a2:	60a7      	str	r7, [r4, #8]
}
 80013a4:	b013      	add	sp, #76	; 0x4c
 80013a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80013aa:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80013ae:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 80013b2:	d2c8      	bcs.n	8001346 <parse_value+0x7e>
    input_buffer->depth++;
 80013b4:	f10a 0301 	add.w	r3, sl, #1
 80013b8:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80013ba:	f818 3006 	ldrb.w	r3, [r8, r6]
 80013be:	2b7b      	cmp	r3, #123	; 0x7b
 80013c0:	d1c1      	bne.n	8001346 <parse_value+0x7e>
    input_buffer->offset++;
 80013c2:	3601      	adds	r6, #1
    buffer_skip_whitespace(input_buffer);
 80013c4:	4620      	mov	r0, r4
    input_buffer->offset++;
 80013c6:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 80013c8:	f7ff fb10 	bl	80009ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80013cc:	68a3      	ldr	r3, [r4, #8]
 80013ce:	4599      	cmp	r9, r3
 80013d0:	f240 811c 	bls.w	800160c <parse_value+0x344>
 80013d4:	f818 2003 	ldrb.w	r2, [r8, r3]
 80013d8:	2a7d      	cmp	r2, #125	; 0x7d
 80013da:	f000 813c 	beq.w	8001656 <parse_value+0x38e>
    cJSON *current_item = NULL;
 80013de:	2600      	movs	r6, #0
    input_buffer->offset--;
 80013e0:	3b01      	subs	r3, #1
    cJSON *head = NULL; /* linked list head */
 80013e2:	4637      	mov	r7, r6
        memset(node, '\0', sizeof(cJSON));
 80013e4:	46b0      	mov	r8, r6
    input_buffer->offset--;
 80013e6:	60a3      	str	r3, [r4, #8]
 80013e8:	e03d      	b.n	8001466 <parse_value+0x19e>
        memset(node, '\0', sizeof(cJSON));
 80013ea:	2228      	movs	r2, #40	; 0x28
 80013ec:	2100      	movs	r1, #0
 80013ee:	f013 fd08 	bl	8014e02 <memset>
        if (head == NULL)
 80013f2:	2f00      	cmp	r7, #0
 80013f4:	f000 8108 	beq.w	8001608 <parse_value+0x340>
            current_item->next = new_item;
 80013f8:	f8c9 6000 	str.w	r6, [r9]
            new_item->prev = current_item;
 80013fc:	f8c6 9004 	str.w	r9, [r6, #4]
        if (cannot_access_at_index(input_buffer, 1))
 8001400:	68a3      	ldr	r3, [r4, #8]
 8001402:	6862      	ldr	r2, [r4, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	4293      	cmp	r3, r2
 8001408:	d237      	bcs.n	800147a <parse_value+0x1b2>
        buffer_skip_whitespace(input_buffer);
 800140a:	4620      	mov	r0, r4
        input_buffer->offset++;
 800140c:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 800140e:	f7ff faed 	bl	80009ec <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001412:	4621      	mov	r1, r4
 8001414:	4630      	mov	r0, r6
 8001416:	f7ff f9e5 	bl	80007e4 <parse_string>
 800141a:	b370      	cbz	r0, 800147a <parse_value+0x1b2>
        buffer_skip_whitespace(input_buffer);
 800141c:	4620      	mov	r0, r4
 800141e:	f7ff fae5 	bl	80009ec <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 8001422:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
 8001424:	f8c6 8010 	str.w	r8, [r6, #16]
        current_item->string = current_item->valuestring;
 8001428:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800142a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800142e:	4293      	cmp	r3, r2
 8001430:	d223      	bcs.n	800147a <parse_value+0x1b2>
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	5cd2      	ldrb	r2, [r2, r3]
 8001436:	2a3a      	cmp	r2, #58	; 0x3a
 8001438:	d11f      	bne.n	800147a <parse_value+0x1b2>
        input_buffer->offset++;
 800143a:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
 800143c:	4620      	mov	r0, r4
        input_buffer->offset++;
 800143e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8001440:	f7ff fad4 	bl	80009ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001444:	4621      	mov	r1, r4
 8001446:	4630      	mov	r0, r6
 8001448:	f7ff ff3e 	bl	80012c8 <parse_value>
 800144c:	b1a8      	cbz	r0, 800147a <parse_value+0x1b2>
        buffer_skip_whitespace(input_buffer);
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff facc 	bl	80009ec <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001454:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001458:	4293      	cmp	r3, r2
 800145a:	d20e      	bcs.n	800147a <parse_value+0x1b2>
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	5cd2      	ldrb	r2, [r2, r3]
 8001460:	2a2c      	cmp	r2, #44	; 0x2c
 8001462:	f040 80ea 	bne.w	800163a <parse_value+0x372>
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001466:	6923      	ldr	r3, [r4, #16]
 8001468:	2028      	movs	r0, #40	; 0x28
 800146a:	46b1      	mov	r9, r6
 800146c:	4798      	blx	r3
    if (node)
 800146e:	4606      	mov	r6, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	d1ba      	bne.n	80013ea <parse_value+0x122>
    if (head != NULL)
 8001474:	2f00      	cmp	r7, #0
 8001476:	f43f af66 	beq.w	8001346 <parse_value+0x7e>
        cJSON_Delete(head);
 800147a:	4638      	mov	r0, r7
 800147c:	f7ff fef2 	bl	8001264 <cJSON_Delete>
 8001480:	e761      	b.n	8001346 <parse_value+0x7e>
    unsigned char *after_end = NULL;
 8001482:	eba9 0906 	sub.w	r9, r9, r6
 8001486:	af02      	add	r7, sp, #8
 8001488:	3e01      	subs	r6, #1
 800148a:	2100      	movs	r1, #0
 800148c:	4638      	mov	r0, r7
        switch (buffer_at_offset(input_buffer)[i])
 800148e:	f04f 0e01 	mov.w	lr, #1
 8001492:	4446      	add	r6, r8
 8001494:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8001594 <parse_value+0x2cc>
    unsigned char *after_end = NULL;
 8001498:	9101      	str	r1, [sp, #4]
        switch (buffer_at_offset(input_buffer)[i])
 800149a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800149e:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
 80014a2:	2b45      	cmp	r3, #69	; 0x45
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	d836      	bhi.n	8001516 <parse_value+0x24e>
 80014a8:	2b2a      	cmp	r3, #42	; 0x2a
 80014aa:	fa0e f202 	lsl.w	r2, lr, r2
 80014ae:	d904      	bls.n	80014ba <parse_value+0x1f2>
 80014b0:	ea12 0f0c 	tst.w	r2, ip
 80014b4:	d131      	bne.n	800151a <parse_value+0x252>
 80014b6:	2b2e      	cmp	r3, #46	; 0x2e
 80014b8:	d02f      	beq.n	800151a <parse_value+0x252>
    number_c_string[i] = '\0';
 80014ba:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80014be:	2600      	movs	r6, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80014c0:	4638      	mov	r0, r7
    number_c_string[i] = '\0';
 80014c2:	eb0d 0103 	add.w	r1, sp, r3
 80014c6:	f801 6c40 	strb.w	r6, [r1, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 80014ca:	a901      	add	r1, sp, #4
 80014cc:	f013 fa7a 	bl	80149c4 <strtod>
    if (number_c_string == after_end)
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	42bb      	cmp	r3, r7
 80014d4:	f43f af37 	beq.w	8001346 <parse_value+0x7e>
    if (number >= INT_MAX)
 80014d8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8001578 <parse_value+0x2b0>
 80014dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	f280 8088 	bge.w	80015f8 <parse_value+0x330>
    else if (number <= (double)INT_MIN)
 80014e8:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8001580 <parse_value+0x2b8>
 80014ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	f240 8085 	bls.w	8001602 <parse_value+0x33a>
        item->valueint = (int)number;
 80014f8:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80014fc:	ee17 1a90 	vmov	r1, s15
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001500:	68a2      	ldr	r2, [r4, #8]
 8001502:	1bdb      	subs	r3, r3, r7
        item->valueint = INT_MAX;
 8001504:	6169      	str	r1, [r5, #20]
    item->type = cJSON_Number;
 8001506:	2108      	movs	r1, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001508:	4413      	add	r3, r2
    return true;
 800150a:	2001      	movs	r0, #1
    item->type = cJSON_Number;
 800150c:	60e9      	str	r1, [r5, #12]
    item->valuedouble = number;
 800150e:	ed85 0b06 	vstr	d0, [r5, #24]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001512:	60a3      	str	r3, [r4, #8]
    return true;
 8001514:	e718      	b.n	8001348 <parse_value+0x80>
        switch (buffer_at_offset(input_buffer)[i])
 8001516:	2b65      	cmp	r3, #101	; 0x65
 8001518:	d1cf      	bne.n	80014ba <parse_value+0x1f2>
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800151a:	3101      	adds	r1, #1
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800151c:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001520:	293f      	cmp	r1, #63	; 0x3f
 8001522:	d0ca      	beq.n	80014ba <parse_value+0x1f2>
 8001524:	4549      	cmp	r1, r9
 8001526:	d1b8      	bne.n	800149a <parse_value+0x1d2>
loop_end:
 8001528:	e7c7      	b.n	80014ba <parse_value+0x1f2>
        return parse_string(item, input_buffer);
 800152a:	4621      	mov	r1, r4
 800152c:	4628      	mov	r0, r5
}
 800152e:	b013      	add	sp, #76	; 0x4c
 8001530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return parse_string(item, input_buffer);
 8001534:	f7ff b956 	b.w	80007e4 <parse_string>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001538:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800153c:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 8001540:	f4bf af01 	bcs.w	8001346 <parse_value+0x7e>
    input_buffer->depth++;
 8001544:	f10a 0301 	add.w	r3, sl, #1
 8001548:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 800154a:	f818 3006 	ldrb.w	r3, [r8, r6]
 800154e:	2b5b      	cmp	r3, #91	; 0x5b
 8001550:	f47f aef9 	bne.w	8001346 <parse_value+0x7e>
    input_buffer->offset++;
 8001554:	3601      	adds	r6, #1
    buffer_skip_whitespace(input_buffer);
 8001556:	4620      	mov	r0, r4
    input_buffer->offset++;
 8001558:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 800155a:	f7ff fa47 	bl	80009ec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800155e:	68a3      	ldr	r3, [r4, #8]
 8001560:	4599      	cmp	r9, r3
 8001562:	d953      	bls.n	800160c <parse_value+0x344>
 8001564:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001568:	2a5d      	cmp	r2, #93	; 0x5d
 800156a:	d062      	beq.n	8001632 <parse_value+0x36a>
    input_buffer->offset--;
 800156c:	3b01      	subs	r3, #1
    cJSON *head = NULL; /* head of the linked list */
 800156e:	46b8      	mov	r8, r7
    input_buffer->offset--;
 8001570:	60a3      	str	r3, [r4, #8]
 8001572:	e02f      	b.n	80015d4 <parse_value+0x30c>
 8001574:	f3af 8000 	nop.w
 8001578:	ffc00000 	.word	0xffc00000
 800157c:	41dfffff 	.word	0x41dfffff
 8001580:	00000000 	.word	0x00000000
 8001584:	c1e00000 	.word	0xc1e00000
 8001588:	0801764c 	.word	0x0801764c
 800158c:	0801765c 	.word	0x0801765c
 8001590:	08017654 	.word	0x08017654
 8001594:	04007fe5 	.word	0x04007fe5
        memset(node, '\0', sizeof(cJSON));
 8001598:	f013 fc33 	bl	8014e02 <memset>
        if (head == NULL)
 800159c:	f1b8 0f00 	cmp.w	r8, #0
 80015a0:	d02d      	beq.n	80015fe <parse_value+0x336>
            current_item->next = new_item;
 80015a2:	6037      	str	r7, [r6, #0]
            new_item->prev = current_item;
 80015a4:	607e      	str	r6, [r7, #4]
        input_buffer->offset++;
 80015a6:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 80015a8:	4620      	mov	r0, r4
        input_buffer->offset++;
 80015aa:	3301      	adds	r3, #1
 80015ac:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 80015ae:	f7ff fa1d 	bl	80009ec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80015b2:	4621      	mov	r1, r4
 80015b4:	4638      	mov	r0, r7
 80015b6:	f7ff fe87 	bl	80012c8 <parse_value>
 80015ba:	4603      	mov	r3, r0
        buffer_skip_whitespace(input_buffer);
 80015bc:	4620      	mov	r0, r4
        if (!parse_value(current_item, input_buffer))
 80015be:	b1b3      	cbz	r3, 80015ee <parse_value+0x326>
        buffer_skip_whitespace(input_buffer);
 80015c0:	f7ff fa14 	bl	80009ec <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80015c4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d210      	bcs.n	80015ee <parse_value+0x326>
 80015cc:	6822      	ldr	r2, [r4, #0]
 80015ce:	5cd2      	ldrb	r2, [r2, r3]
 80015d0:	2a2c      	cmp	r2, #44	; 0x2c
 80015d2:	d11f      	bne.n	8001614 <parse_value+0x34c>
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80015d4:	6923      	ldr	r3, [r4, #16]
 80015d6:	2028      	movs	r0, #40	; 0x28
 80015d8:	4798      	blx	r3
    if (node)
 80015da:	463e      	mov	r6, r7
        memset(node, '\0', sizeof(cJSON));
 80015dc:	2228      	movs	r2, #40	; 0x28
 80015de:	2100      	movs	r1, #0
    if (node)
 80015e0:	4607      	mov	r7, r0
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d1d8      	bne.n	8001598 <parse_value+0x2d0>
    if (head != NULL)
 80015e6:	f1b8 0f00 	cmp.w	r8, #0
 80015ea:	f43f aeac 	beq.w	8001346 <parse_value+0x7e>
        cJSON_Delete(head);
 80015ee:	4640      	mov	r0, r8
 80015f0:	f7ff fe38 	bl	8001264 <cJSON_Delete>
    return false;
 80015f4:	2000      	movs	r0, #0
 80015f6:	e6a7      	b.n	8001348 <parse_value+0x80>
 80015f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015fc:	e780      	b.n	8001500 <parse_value+0x238>
 80015fe:	46b8      	mov	r8, r7
 8001600:	e7d1      	b.n	80015a6 <parse_value+0x2de>
 8001602:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001606:	e77b      	b.n	8001500 <parse_value+0x238>
 8001608:	4637      	mov	r7, r6
 800160a:	e6f9      	b.n	8001400 <parse_value+0x138>
        input_buffer->offset--;
 800160c:	3b01      	subs	r3, #1
    return false;
 800160e:	4638      	mov	r0, r7
        input_buffer->offset--;
 8001610:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
 8001612:	e699      	b.n	8001348 <parse_value+0x80>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001614:	2a5d      	cmp	r2, #93	; 0x5d
 8001616:	d1ea      	bne.n	80015ee <parse_value+0x326>
    input_buffer->depth--;
 8001618:	68e2      	ldr	r2, [r4, #12]
 800161a:	3a01      	subs	r2, #1
 800161c:	60e2      	str	r2, [r4, #12]
        head->prev = current_item;
 800161e:	f8c8 7004 	str.w	r7, [r8, #4]
    item->type = cJSON_Array;
 8001622:	2220      	movs	r2, #32
    input_buffer->offset++;
 8001624:	3301      	adds	r3, #1
    item->child = head;
 8001626:	f8c5 8008 	str.w	r8, [r5, #8]
    return true;
 800162a:	2001      	movs	r0, #1
    item->type = cJSON_Array;
 800162c:	60ea      	str	r2, [r5, #12]
    input_buffer->offset++;
 800162e:	60a3      	str	r3, [r4, #8]
    return true;
 8001630:	e68a      	b.n	8001348 <parse_value+0x80>
    cJSON *head = NULL; /* head of the linked list */
 8001632:	46b8      	mov	r8, r7
    input_buffer->depth--;
 8001634:	f8c4 a00c 	str.w	sl, [r4, #12]
    if (head != NULL) {
 8001638:	e7f3      	b.n	8001622 <parse_value+0x35a>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800163a:	2a7d      	cmp	r2, #125	; 0x7d
 800163c:	f47f af1d 	bne.w	800147a <parse_value+0x1b2>
    input_buffer->depth--;
 8001640:	68e2      	ldr	r2, [r4, #12]
 8001642:	3a01      	subs	r2, #1
 8001644:	60e2      	str	r2, [r4, #12]
        head->prev = current_item;
 8001646:	607e      	str	r6, [r7, #4]
    item->type = cJSON_Object;
 8001648:	2240      	movs	r2, #64	; 0x40
    input_buffer->offset++;
 800164a:	3301      	adds	r3, #1
    item->child = head;
 800164c:	60af      	str	r7, [r5, #8]
    return true;
 800164e:	2001      	movs	r0, #1
    item->type = cJSON_Object;
 8001650:	60ea      	str	r2, [r5, #12]
    input_buffer->offset++;
 8001652:	60a3      	str	r3, [r4, #8]
    return true;
 8001654:	e678      	b.n	8001348 <parse_value+0x80>
    cJSON *head = NULL; /* linked list head */
 8001656:	2700      	movs	r7, #0
    input_buffer->depth--;
 8001658:	f8c4 a00c 	str.w	sl, [r4, #12]
    if (head != NULL) {
 800165c:	e7f4      	b.n	8001648 <parse_value+0x380>
 800165e:	bf00      	nop

08001660 <cJSON_ParseWithLengthOpts>:
{
 8001660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001664:	2500      	movs	r5, #0
{
 8001666:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
 8001668:	4f3a      	ldr	r7, [pc, #232]	; (8001754 <cJSON_ParseWithLengthOpts+0xf4>)
{
 800166a:	4616      	mov	r6, r2
    if (value == NULL || 0 == buffer_length)
 800166c:	4604      	mov	r4, r0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800166e:	e9cd 5503 	strd	r5, r5, [sp, #12]
    global_error.position = 0;
 8001672:	e9c7 5500 	strd	r5, r5, [r7]
    if (value == NULL || 0 == buffer_length)
 8001676:	2800      	cmp	r0, #0
 8001678:	d03f      	beq.n	80016fa <cJSON_ParseWithLengthOpts+0x9a>
 800167a:	fab1 f981 	clz	r9, r1
 800167e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8001682:	2900      	cmp	r1, #0
 8001684:	d039      	beq.n	80016fa <cJSON_ParseWithLengthOpts+0x9a>
    buffer.content = (const unsigned char*)value;
 8001686:	4698      	mov	r8, r3
    buffer.hooks = global_hooks;
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <cJSON_ParseWithLengthOpts+0xf8>)
    buffer.content = (const unsigned char*)value;
 800168a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    buffer.hooks = global_hooks;
 800168e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001692:	ab08      	add	r3, sp, #32
 8001694:	e903 0007 	stmdb	r3, {r0, r1, r2}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001698:	4603      	mov	r3, r0
 800169a:	2028      	movs	r0, #40	; 0x28
 800169c:	4798      	blx	r3
    if (node)
 800169e:	4605      	mov	r5, r0
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d045      	beq.n	8001730 <cJSON_ParseWithLengthOpts+0xd0>
        memset(node, '\0', sizeof(cJSON));
 80016a4:	2228      	movs	r2, #40	; 0x28
 80016a6:	4649      	mov	r1, r9
 80016a8:	f013 fbab 	bl	8014e02 <memset>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80016ac:	9801      	ldr	r0, [sp, #4]
 80016ae:	b188      	cbz	r0, 80016d4 <cJSON_ParseWithLengthOpts+0x74>
 80016b0:	9b03      	ldr	r3, [sp, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d145      	bne.n	8001742 <cJSON_ParseWithLengthOpts+0xe2>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80016b6:	9b02      	ldr	r3, [sp, #8]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d940      	bls.n	800173e <cJSON_ParseWithLengthOpts+0xde>
 80016bc:	7803      	ldrb	r3, [r0, #0]
 80016be:	2bef      	cmp	r3, #239	; 0xef
 80016c0:	d13d      	bne.n	800173e <cJSON_ParseWithLengthOpts+0xde>
 80016c2:	7843      	ldrb	r3, [r0, #1]
 80016c4:	2bbb      	cmp	r3, #187	; 0xbb
 80016c6:	d13a      	bne.n	800173e <cJSON_ParseWithLengthOpts+0xde>
 80016c8:	7883      	ldrb	r3, [r0, #2]
 80016ca:	2bbf      	cmp	r3, #191	; 0xbf
 80016cc:	d137      	bne.n	800173e <cJSON_ParseWithLengthOpts+0xde>
        buffer->offset += 3;
 80016ce:	2303      	movs	r3, #3
    return buffer;
 80016d0:	a801      	add	r0, sp, #4
        buffer->offset += 3;
 80016d2:	9303      	str	r3, [sp, #12]
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80016d4:	f7ff f98a 	bl	80009ec <buffer_skip_whitespace>
 80016d8:	4601      	mov	r1, r0
 80016da:	4628      	mov	r0, r5
 80016dc:	f7ff fdf4 	bl	80012c8 <parse_value>
 80016e0:	b318      	cbz	r0, 800172a <cJSON_ParseWithLengthOpts+0xca>
    if (require_null_terminated)
 80016e2:	f1b8 0f00 	cmp.w	r8, #0
 80016e6:	d119      	bne.n	800171c <cJSON_ParseWithLengthOpts+0xbc>
    if (return_parse_end)
 80016e8:	b17e      	cbz	r6, 800170a <cJSON_ParseWithLengthOpts+0xaa>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016ea:	9b01      	ldr	r3, [sp, #4]
}
 80016ec:	4628      	mov	r0, r5
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016ee:	9a03      	ldr	r2, [sp, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	6033      	str	r3, [r6, #0]
}
 80016f4:	b009      	add	sp, #36	; 0x24
 80016f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value != NULL)
 80016fa:	b154      	cbz	r4, 8001712 <cJSON_ParseWithLengthOpts+0xb2>
        local_error.position = 0;
 80016fc:	2300      	movs	r3, #0
        if (return_parse_end != NULL)
 80016fe:	b10e      	cbz	r6, 8001704 <cJSON_ParseWithLengthOpts+0xa4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001700:	18e2      	adds	r2, r4, r3
 8001702:	6032      	str	r2, [r6, #0]
    return NULL;
 8001704:	2500      	movs	r5, #0
        global_error = local_error;
 8001706:	e9c7 4300 	strd	r4, r3, [r7]
}
 800170a:	4628      	mov	r0, r5
 800170c:	b009      	add	sp, #36	; 0x24
 800170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8001712:	4625      	mov	r5, r4
}
 8001714:	4628      	mov	r0, r5
 8001716:	b009      	add	sp, #36	; 0x24
 8001718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buffer_skip_whitespace(&buffer);
 800171c:	a801      	add	r0, sp, #4
 800171e:	f7ff f965 	bl	80009ec <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001726:	4293      	cmp	r3, r2
 8001728:	d30d      	bcc.n	8001746 <cJSON_ParseWithLengthOpts+0xe6>
        cJSON_Delete(item);
 800172a:	4628      	mov	r0, r5
 800172c:	f7ff fd9a 	bl	8001264 <cJSON_Delete>
        if (buffer.offset < buffer.length)
 8001730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8e2      	bhi.n	80016fe <cJSON_ParseWithLengthOpts+0x9e>
        else if (buffer.length > 0)
 8001738:	b152      	cbz	r2, 8001750 <cJSON_ParseWithLengthOpts+0xf0>
            local_error.position = buffer.length - 1;
 800173a:	1e53      	subs	r3, r2, #1
 800173c:	e7df      	b.n	80016fe <cJSON_ParseWithLengthOpts+0x9e>
    return buffer;
 800173e:	a801      	add	r0, sp, #4
 8001740:	e7c8      	b.n	80016d4 <cJSON_ParseWithLengthOpts+0x74>
        return NULL;
 8001742:	4648      	mov	r0, r9
 8001744:	e7c6      	b.n	80016d4 <cJSON_ParseWithLengthOpts+0x74>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001746:	9a01      	ldr	r2, [sp, #4]
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0cc      	beq.n	80016e8 <cJSON_ParseWithLengthOpts+0x88>
 800174e:	e7ec      	b.n	800172a <cJSON_ParseWithLengthOpts+0xca>
        local_error.position = 0;
 8001750:	4613      	mov	r3, r2
 8001752:	e7d4      	b.n	80016fe <cJSON_ParseWithLengthOpts+0x9e>
 8001754:	2400026c 	.word	0x2400026c
 8001758:	24000000 	.word	0x24000000

0800175c <cJSON_Parse>:
    if (NULL == value)
 800175c:	b160      	cbz	r0, 8001778 <cJSON_Parse+0x1c>
{
 800175e:	b510      	push	{r4, lr}
 8001760:	4604      	mov	r4, r0
    buffer_length = strlen(value) + sizeof("");
 8001762:	f7fe fdc7 	bl	80002f4 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001766:	2300      	movs	r3, #0
    buffer_length = strlen(value) + sizeof("");
 8001768:	4601      	mov	r1, r0
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800176a:	4620      	mov	r0, r4
 800176c:	3101      	adds	r1, #1
 800176e:	461a      	mov	r2, r3
}
 8001770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001774:	f7ff bf74 	b.w	8001660 <cJSON_ParseWithLengthOpts>
}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <cJSON_Print>:
    return (char*)print(item, true, &global_hooks);
 800177c:	2101      	movs	r1, #1
 800177e:	f7ff bcd5 	b.w	800112c <print.constprop.0>
 8001782:	bf00      	nop

08001784 <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, true);
 8001784:	2201      	movs	r2, #1
 8001786:	f7ff b997 	b.w	8000ab8 <get_object_item>
 800178a:	bf00      	nop

0800178c <cJSON_AddItemToArray>:
    if ((item == NULL) || (array == NULL) || (array == item))
 800178c:	4288      	cmp	r0, r1
 800178e:	bf18      	it	ne
 8001790:	2800      	cmpne	r0, #0
 8001792:	d009      	beq.n	80017a8 <cJSON_AddItemToArray+0x1c>
 8001794:	b141      	cbz	r1, 80017a8 <cJSON_AddItemToArray+0x1c>
    child = array->child;
 8001796:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
 8001798:	b143      	cbz	r3, 80017ac <cJSON_AddItemToArray+0x20>
        if (child->prev)
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	b15a      	cbz	r2, 80017b6 <cJSON_AddItemToArray+0x2a>
    prev->next = item;
 800179e:	6011      	str	r1, [r2, #0]
            array->child->prev = item;
 80017a0:	2001      	movs	r0, #1
    item->prev = prev;
 80017a2:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
 80017a4:	6059      	str	r1, [r3, #4]
 80017a6:	4770      	bx	lr
        return false;
 80017a8:	2000      	movs	r0, #0
 80017aa:	4770      	bx	lr
        array->child = item;
 80017ac:	6081      	str	r1, [r0, #8]
        item->prev = item;
 80017ae:	2001      	movs	r0, #1
        item->next = NULL;
 80017b0:	e9c1 3100 	strd	r3, r1, [r1]
 80017b4:	4770      	bx	lr
 80017b6:	2001      	movs	r0, #1
}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
    return add_item_to_object(object, string, item, &global_hooks, false);
 80017bc:	2300      	movs	r3, #0
 80017be:	f7ff bd0b 	b.w	80011d8 <add_item_to_object.constprop.0>
 80017c2:	bf00      	nop
 80017c4:	0000      	movs	r0, r0
	...

080017c8 <cJSON_CreateNumber>:
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <cJSON_CreateNumber+0x80>)
 80017ca:	2028      	movs	r0, #40	; 0x28

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80017cc:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80017ce:	681b      	ldr	r3, [r3, #0]
{
 80017d0:	ed2d 8b02 	vpush	{d8}
 80017d4:	eeb0 8b40 	vmov.f64	d8, d0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80017d8:	4798      	blx	r3
    if (node)
 80017da:	4604      	mov	r4, r0
 80017dc:	b188      	cbz	r0, 8001802 <cJSON_CreateNumber+0x3a>
        memset(node, '\0', sizeof(cJSON));
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	f013 fb0e 	bl	8014e02 <memset>
    cJSON *item = cJSON_New_Item(&global_hooks);
    if(item)
    {
        item->type = cJSON_Number;
 80017e6:	2308      	movs	r3, #8
        item->valuedouble = num;

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80017e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001838 <cJSON_CreateNumber+0x70>
        item->valuedouble = num;
 80017ec:	ed84 8b06 	vstr	d8, [r4, #24]
        item->type = cJSON_Number;
 80017f0:	60e3      	str	r3, [r4, #12]
        if (num >= INT_MAX)
 80017f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	db06      	blt.n	800180a <cJSON_CreateNumber+0x42>
        {
            item->valueint = INT_MAX;
 80017fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001800:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
 8001802:	4620      	mov	r0, r4
 8001804:	ecbd 8b02 	vpop	{d8}
 8001808:	bd10      	pop	{r4, pc}
        else if (num <= (double)INT_MIN)
 800180a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001840 <cJSON_CreateNumber+0x78>
 800180e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d806      	bhi.n	8001826 <cJSON_CreateNumber+0x5e>
            item->valueint = INT_MIN;
 8001818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800181c:	4620      	mov	r0, r4
 800181e:	ecbd 8b02 	vpop	{d8}
            item->valueint = INT_MIN;
 8001822:	6163      	str	r3, [r4, #20]
}
 8001824:	bd10      	pop	{r4, pc}
            item->valueint = (int)num;
 8001826:	eebd 8bc8 	vcvt.s32.f64	s16, d8
}
 800182a:	4620      	mov	r0, r4
            item->valueint = (int)num;
 800182c:	ed84 8a05 	vstr	s16, [r4, #20]
}
 8001830:	ecbd 8b02 	vpop	{d8}
 8001834:	bd10      	pop	{r4, pc}
 8001836:	bf00      	nop
 8001838:	ffc00000 	.word	0xffc00000
 800183c:	41dfffff 	.word	0x41dfffff
 8001840:	00000000 	.word	0x00000000
 8001844:	c1e00000 	.word	0xc1e00000
 8001848:	24000000 	.word	0x24000000

0800184c <cJSON_CreateArray>:
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <cJSON_CreateArray+0x20>)
 800184e:	2028      	movs	r0, #40	; 0x28

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8001850:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4798      	blx	r3
    if (node)
 8001856:	4604      	mov	r4, r0
 8001858:	b128      	cbz	r0, 8001866 <cJSON_CreateArray+0x1a>
        memset(node, '\0', sizeof(cJSON));
 800185a:	2228      	movs	r2, #40	; 0x28
 800185c:	2100      	movs	r1, #0
 800185e:	f013 fad0 	bl	8014e02 <memset>
    cJSON *item = cJSON_New_Item(&global_hooks);
    if(item)
    {
        item->type=cJSON_Array;
 8001862:	2320      	movs	r3, #32
 8001864:	60e3      	str	r3, [r4, #12]
    }

    return item;
}
 8001866:	4620      	mov	r0, r4
 8001868:	bd10      	pop	{r4, pc}
 800186a:	bf00      	nop
 800186c:	24000000 	.word	0x24000000

08001870 <cJSON_CreateObject>:
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <cJSON_CreateObject+0x20>)
 8001872:	2028      	movs	r0, #40	; 0x28

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001874:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4798      	blx	r3
    if (node)
 800187a:	4604      	mov	r4, r0
 800187c:	b128      	cbz	r0, 800188a <cJSON_CreateObject+0x1a>
        memset(node, '\0', sizeof(cJSON));
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	f013 fabe 	bl	8014e02 <memset>
    cJSON *item = cJSON_New_Item(&global_hooks);
    if (item)
    {
        item->type = cJSON_Object;
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	60e3      	str	r3, [r4, #12]
    }

    return item;
}
 800188a:	4620      	mov	r0, r4
 800188c:	bd10      	pop	{r4, pc}
 800188e:	bf00      	nop
 8001890:	24000000 	.word	0x24000000

08001894 <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
 8001894:	b128      	cbz	r0, 80018a2 <cJSON_IsNumber+0xe>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
 8001896:	7b00      	ldrb	r0, [r0, #12]
 8001898:	f1a0 0008 	sub.w	r0, r0, #8
 800189c:	fab0 f080 	clz	r0, r0
 80018a0:	0940      	lsrs	r0, r0, #5
}
 80018a2:	4770      	bx	lr

080018a4 <_Z41__static_initialization_and_destruction_0ii>:
}

uint8_t calcCrc(uint64_t data)
{
	return bissCrc.calcCrc_raw(data);
}
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d102      	bne.n	80018c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
	BissCrc6 bissCrc;
 80018be:	4803      	ldr	r0, [pc, #12]	; (80018cc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80018c0:	f001 fe36 	bl	8003530 <_ZN8BissCrc6C1Ev>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24000278 	.word	0x24000278

080018d0 <_GLOBAL__sub_I_bissCrc>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff ffe3 	bl	80018a4 <_Z41__static_initialization_and_destruction_0ii>
 80018de:	bd80      	pop	{r7, pc}

080018e0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
    * Useful for debugging issues.
    */
   __BKPT(0);
 80018e0:	be00      	bkpt	0x0000
}
 80018e2:	4770      	bx	lr

080018e4 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bfb8      	it	lt
 80018f2:	425b      	neglt	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_Z6cordiciPiS_i>:
0x0001FFFF, 0x0000FFFF, 0x00007FFF, 0x00003FFF, 0x00001FFF, 0x00000FFF, 0x000007FF,
0x000003FF, 0x000001FF, 0x000000FF, 0x0000007F, 0x0000003F, 0x0000001F, 0x0000000F,
0x00000008, 0x00000004, 0x00000002, 0x00000001, 0x00000000, };

inline void cordic(int theta, int *s, int *c, int n)
{
 8001900:	b480      	push	{r7}
 8001902:	b08d      	sub	sp, #52	; 0x34
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  int k, d, tx, ty, tz;
  int x=cordic_1K,y=0,z=theta;
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <_Z6cordiciPiS_i+0xa0>)
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	623b      	str	r3, [r7, #32]
  n = (n>CORDIC_NTAB) ? CORDIC_NTAB : n;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b20      	cmp	r3, #32
 800191e:	bfa8      	it	ge
 8001920:	2320      	movge	r3, #32
 8001922:	603b      	str	r3, [r7, #0]
  for (k=0; k<n; ++k)
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001928:	e02a      	b.n	8001980 <_Z6cordiciPiS_i+0x80>
  {
    d = z>>31;
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	17db      	asrs	r3, r3, #31
 800192e:	61fb      	str	r3, [r7, #28]
    //get sign. for other architectures, you might want to use the more portable version
    //d = z>=0 ? 0 : -1;
    tx = x - (((y>>k) ^ d) - d);
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	411a      	asrs	r2, r3
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	405a      	eors	r2, r3
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	61bb      	str	r3, [r7, #24]
    ty = y + (((x>>k) ^ d) - d);
 8001944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	411a      	asrs	r2, r3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	405a      	eors	r2, r3
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	4413      	add	r3, r2
 8001956:	617b      	str	r3, [r7, #20]
    tz = z - ((cordic_ctab[k] ^ d) - d);
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_Z6cordiciPiS_i+0xa4>)
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	405a      	eors	r2, r3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	6a3a      	ldr	r2, [r7, #32]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	613b      	str	r3, [r7, #16]
    x = tx; y = ty; z = tz;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	623b      	str	r3, [r7, #32]
  for (k=0; k<n; ++k)
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	3301      	adds	r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbd0      	blt.n	800192a <_Z6cordiciPiS_i+0x2a>
  }
 *c = x; *s = y;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3734      	adds	r7, #52	; 0x34
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	26dd3b6a 	.word	0x26dd3b6a
 80019a4:	08017680 	.word	0x08017680

080019a8 <_Z13shiftAngle180f>:

inline float shiftAngle180(float phi)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	ed87 0a01 	vstr	s0, [r7, #4]
	while(phi < -M_PI || phi > M_PI)
 80019b2:	e02f      	b.n	8001a14 <_Z13shiftAngle180f+0x6c>
	{
		if (phi < -M_PI)
 80019b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019bc:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001a58 <_Z13shiftAngle180f+0xb0>
 80019c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d50c      	bpl.n	80019e4 <_Z13shiftAngle180f+0x3c>
			phi += two_pi;
 80019ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001a60 <_Z13shiftAngle180f+0xb8>
 80019d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019de:	edc7 7a01 	vstr	s15, [r7, #4]
 80019e2:	e017      	b.n	8001a14 <_Z13shiftAngle180f+0x6c>
		else if (phi > M_PI)
 80019e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ec:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001a68 <_Z13shiftAngle180f+0xc0>
 80019f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	dc00      	bgt.n	80019fc <_Z13shiftAngle180f+0x54>
 80019fa:	e00b      	b.n	8001a14 <_Z13shiftAngle180f+0x6c>
			phi -= two_pi;
 80019fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a04:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001a60 <_Z13shiftAngle180f+0xb8>
 8001a08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a10:	edc7 7a01 	vstr	s15, [r7, #4]
	while(phi < -M_PI || phi > M_PI)
 8001a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a1c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001a58 <_Z13shiftAngle180f+0xb0>
 8001a20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	d4c4      	bmi.n	80019b4 <_Z13shiftAngle180f+0xc>
 8001a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a32:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001a68 <_Z13shiftAngle180f+0xc0>
 8001a36:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	dcb9      	bgt.n	80019b4 <_Z13shiftAngle180f+0xc>
	}

	return phi;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	ee07 3a90 	vmov	s15, r3
}
 8001a46:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	f3af 8000 	nop.w
 8001a58:	54442d18 	.word	0x54442d18
 8001a5c:	c00921fb 	.word	0xc00921fb
 8001a60:	54442d18 	.word	0x54442d18
 8001a64:	401921fb 	.word	0x401921fb
 8001a68:	54442d18 	.word	0x54442d18
 8001a6c:	400921fb 	.word	0x400921fb

08001a70 <_Z12shiftAngle90Pf>:

inline int shiftAngle90(float* phi)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    if (*phi < -half_pi)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a82:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001b00 <_Z12shiftAngle90Pf+0x90>
 8001a86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d510      	bpl.n	8001ab2 <_Z12shiftAngle90Pf+0x42>
    {
        *phi = *phi + M_PI;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a9a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001b08 <_Z12shiftAngle90Pf+0x98>
 8001a9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001aa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
        return -1;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	e01d      	b.n	8001aee <_Z12shiftAngle90Pf+0x7e>
    }
    else if (*phi > half_pi)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001abc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001b10 <_Z12shiftAngle90Pf+0xa0>
 8001ac0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	dd10      	ble.n	8001aec <_Z12shiftAngle90Pf+0x7c>
    {
        *phi = *phi - M_PI;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001b08 <_Z12shiftAngle90Pf+0x98>
 8001ad8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001adc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
        return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e000      	b.n	8001aee <_Z12shiftAngle90Pf+0x7e>
    }
    else
    {
        return 1;
 8001aec:	2301      	movs	r3, #1
    }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	bff921fb 	.word	0xbff921fb
 8001b08:	54442d18 	.word	0x54442d18
 8001b0c:	400921fb 	.word	0x400921fb
 8001b10:	54442d18 	.word	0x54442d18
 8001b14:	3ff921fb 	.word	0x3ff921fb

08001b18 <_Z9sinCordicfPf>:

inline void sinCordic(float theta, float* sinC)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b22:	6038      	str	r0, [r7, #0]
	int s, c, quadAdj;
	float p;
	p = shiftAngle180(theta);
 8001b24:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b28:	f7ff ff3e 	bl	80019a8 <_Z13shiftAngle180f>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	edc7 7a02 	vstr	s15, [r7, #8]
    quadAdj = shiftAngle90(&p);
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff99 	bl	8001a70 <_Z12shiftAngle90Pf>
 8001b3e:	6178      	str	r0, [r7, #20]
	cordic((p*MUL), &s, &c, 32);
 8001b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b48:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001b90 <_Z9sinCordicfPf+0x78>
 8001b4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b50:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b54:	f107 020c 	add.w	r2, r7, #12
 8001b58:	f107 0110 	add.w	r1, r7, #16
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7ff fecd 	bl	8001900 <_Z6cordiciPiS_i>
	*sinC = quadAdj*s/MUL;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b76:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8001b90 <_Z9sinCordicfPf+0x78>
 8001b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	edc3 7a00 	vstr	s15, [r3]
}
 8001b88:	bf00      	nop
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	00000000 	.word	0x00000000
 8001b94:	41d00000 	.word	0x41d00000

08001b98 <_ZN12SinGeneratorC1Ef>:
	uint32_t amp = 0;
	float omega = 0;
	uint32_t pos0 = 0;

public:
	SinGenerator(float Ts): Ts(Ts)
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	ed87 0a00 	vstr	s0, [r7]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
	{

	}
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	0000      	movs	r0, r0
 8001bd4:	0000      	movs	r0, r0
	...

08001bd8 <_ZN12SinGenerator10initializeEmmf>:

	void initialize(uint32_t pos0, uint32_t amp, float freq)
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	ed87 0a00 	vstr	s0, [r7]
	{
		this->pos0 = pos0;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	611a      	str	r2, [r3, #16]
		this->amp = amp;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
		omega = 2 * M_PI * freq;
 8001bf4:	edd7 7a00 	vldr	s15, [r7]
 8001bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bfc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001c20 <_ZN12SinGenerator10initializeEmmf+0x48>
 8001c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edc3 7a03 	vstr	s15, [r3, #12]

		counter = 0;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
	}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	54442d18 	.word	0x54442d18
 8001c24:	401921fb 	.word	0x401921fb

08001c28 <_ZN12SinGenerator4calcEv>:

	uint32_t calc()
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	{
		float sinVal;

		counter++;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
		float t = Ts * counter;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c50:	edc7 7a05 	vstr	s15, [r7, #20]
		sinCordic(omega * t, &sinVal);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4618      	mov	r0, r3
 8001c68:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6c:	f7ff ff54 	bl	8001b18 <_Z9sinCordicfPf>

		uint32_t pos = pos0 + (int32_t)(amp * sinVal);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6892      	ldr	r2, [r2, #8]
 8001c78:	ee07 2a90 	vmov	s15, r2
 8001c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8c:	ee17 2a90 	vmov	r2, s15
 8001c90:	4413      	add	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
		return pos;
 8001c94:	693b      	ldr	r3, [r7, #16]
	}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_ZN19TrajectoryGeneratorC1Ef>:

public:
	TrajMode trajectoryMode = TrajMode::Point;
	uint32_t pos = 0;

	TrajectoryGenerator(float Ts): Ts(Ts)
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	ed87 0a00 	vstr	s0, [r7]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1d1a      	adds	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f7ff ff6a 	bl	8001b98 <_ZN12SinGeneratorC1Ef>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	761a      	strb	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
	{

	}
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN19TrajectoryGenerator4calcEv>:

	uint32_t calc()
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	{
		trajectoryMode = (TrajMode)trajMode;
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <_ZN19TrajectoryGenerator4calcEv+0xa4>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	61da      	str	r2, [r3, #28]
		isInitialized = isTrajInit;
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <_ZN19TrajectoryGenerator4calcEv+0xa8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	761a      	strb	r2, [r3, #24]

		if (!isInitialized)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7e1b      	ldrb	r3, [r3, #24]
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d018      	beq.n	8001d44 <_ZN19TrajectoryGenerator4calcEv+0x64>
		{
			switch(trajectoryMode)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00d      	beq.n	8001d36 <_ZN19TrajectoryGenerator4calcEv+0x56>
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10c      	bne.n	8001d38 <_ZN19TrajectoryGenerator4calcEv+0x58>
			{
			case TrajMode::Point:
				break;
			case TrajMode::Sinus:
				sinGen.initialize(desiredPos, 8000, 0.1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <_ZN19TrajectoryGenerator4calcEv+0xac>)
 8001d24:	6811      	ldr	r1, [r2, #0]
 8001d26:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001d90 <_ZN19TrajectoryGenerator4calcEv+0xb0>
 8001d2a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff52 	bl	8001bd8 <_ZN12SinGenerator10initializeEmmf>
				break;
 8001d34:	e000      	b.n	8001d38 <_ZN19TrajectoryGenerator4calcEv+0x58>
				break;
 8001d36:	bf00      	nop
			}
			isInitialized = true;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	761a      	strb	r2, [r3, #24]
			isTrajInit = 1;
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <_ZN19TrajectoryGenerator4calcEv+0xa8>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
		}

		if (isInitialized)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e1b      	ldrb	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d014      	beq.n	8001d76 <_ZN19TrajectoryGenerator4calcEv+0x96>
		{
			switch(trajectoryMode)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <_ZN19TrajectoryGenerator4calcEv+0x7a>
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d005      	beq.n	8001d64 <_ZN19TrajectoryGenerator4calcEv+0x84>
 8001d58:	e00d      	b.n	8001d76 <_ZN19TrajectoryGenerator4calcEv+0x96>
			{
			case TrajMode::Point:
				pos = desiredPos;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <_ZN19TrajectoryGenerator4calcEv+0xac>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	621a      	str	r2, [r3, #32]
				break;
 8001d62:	e008      	b.n	8001d76 <_ZN19TrajectoryGenerator4calcEv+0x96>
			case TrajMode::Sinus:
				pos = sinGen.calc();
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <_ZN12SinGenerator4calcEv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	621a      	str	r2, [r3, #32]
				break;
 8001d74:	bf00      	nop
			}
		}
		return pos;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
	}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	240275cc 	.word	0x240275cc
 8001d88:	240275b8 	.word	0x240275b8
 8001d8c:	24000014 	.word	0x24000014
 8001d90:	3dcccccd 	.word	0x3dcccccd
 8001d94:	00000000 	.word	0x00000000

08001d98 <_ZN12MotionParamsC1Ev>:
extern "C"
{
	#include "main.h"
}

struct MotionParams
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	a30f      	add	r3, pc, #60	; (adr r3, 8001de0 <_ZN12MotionParamsC1Ev+0x48>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	e9c1 2300 	strd	r2, r3, [r1]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	a30e      	add	r3, pc, #56	; (adr r3, 8001de8 <_ZN12MotionParamsC1Ev+0x50>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001dc6:	615a      	str	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2209      	movs	r2, #9
 8001dcc:	619a      	str	r2, [r3, #24]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	f3af 8000 	nop.w
 8001de0:	eb851eb8 	.word	0xeb851eb8
 8001de4:	3faeb851 	.word	0x3faeb851
 8001de8:	eb851eb8 	.word	0xeb851eb8
 8001dec:	3fceb851 	.word	0x3fceb851

08001df0 <_ZN17StepperControllerC1Ev>:
	uint32_t prescaler;

public:
	int32_t posError = 0;

	StepperController()
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	{
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ffcc 	bl	8001d98 <_ZN12MotionParamsC1Ev>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38

	}
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZN17StepperController9calcInputEmm>:

	void calcInput(uint32_t desPos, uint32_t pos)
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	{
		double u;
		uint32_t u_floor;

		posError = desPos - pos;
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
		posiError = posError;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <_ZN17StepperController9calcInputEmm+0x98>)
 8001e42:	6013      	str	r3, [r2, #0]

		if ((uint32_t)abs(posError) < motionParams.deadZoneRange)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd4b 	bl	80018e4 <_ZSt3absl>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bf34      	ite	cc
 8001e5a:	2301      	movcc	r3, #1
 8001e5c:	2300      	movcs	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <_ZN17StepperController9calcInputEmm+0x50>
		{
			isSignalGenerated = false;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			isClocked = 0; //debug
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <_ZN17StepperController9calcInputEmm+0x9c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e006      	b.n	8001e82 <_ZN17StepperController9calcInputEmm+0x5e>
		}
		else
		{
			isSignalGenerated = true;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			isClocked = 1; //debug
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_ZN17StepperController9calcInputEmm+0x9c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
		}


		if (posError > 0)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	dd06      	ble.n	8001e98 <_ZN17StepperController9calcInputEmm+0x74>
		{
			direction = Direction::Forward;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
			directionToSet = 0; //debug
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <_ZN17StepperController9calcInputEmm+0xa0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e005      	b.n	8001ea4 <_ZN17StepperController9calcInputEmm+0x80>
		}
		else
		{
			direction = Direction::Backward;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	621a      	str	r2, [r3, #32]
			directionToSet = 1; //debug
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <_ZN17StepperController9calcInputEmm+0xa0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
//		if (u_sat < prescaler)
//			counter = MIN(counter, u_sat);
//
//		prescaler = u_sat;
//		frequencyPrescaler = u_sat; //debug
		if (isSignalGenerated) {
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <_ZN17StepperController9calcInputEmm+0x90>
			setDirection();
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f81e 	bl	8001ef0 <_ZN17StepperController12setDirectionEv>
		}
	}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	240275c8 	.word	0x240275c8
 8001ec0:	240275ac 	.word	0x240275ac
 8001ec4:	24027484 	.word	0x24027484

08001ec8 <_ZN17StepperController14generateSignalEv>:

	void generateSignal()
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	{
		if (isSignalGenerated)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <_ZN17StepperController14generateSignalEv+0x1a>
		{
//			if (counter == prescaler)
//			{
				HAL_GPIO_TogglePin(S_CLK_GPIO_Port, S_CLK_Pin);
 8001eda:	2108      	movs	r1, #8
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <_ZN17StepperController14generateSignalEv+0x24>)
 8001ede:	f003 f9b3 	bl	8005248 <HAL_GPIO_TogglePin>
//			{
//				counter++;
//				cntFreq = counter; //debug
//			}
		}
	}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	58021800 	.word	0x58021800

08001ef0 <_ZN17StepperController12setDirectionEv>:

	void setDirection()
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	{
		if (direction != currentDirection)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d007      	beq.n	8001f14 <_ZN17StepperController12setDirectionEv+0x24>
		{
			HAL_GPIO_TogglePin(S_DIR_GPIO_Port, S_DIR_Pin);
 8001f04:	2104      	movs	r1, #4
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <_ZN17StepperController12setDirectionEv+0x2c>)
 8001f08:	f003 f99e 	bl	8005248 <HAL_GPIO_TogglePin>
			currentDirection = direction;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58021800 	.word	0x58021800

08001f20 <TIM5_IRQHandler>:
//	if (htim->Instance == TIM6) {
//	    HAL_IncTick();
//	}
//}

void TIM5_IRQHandler(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim5, TIM_FLAG_UPDATE) != RESET) {
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <TIM5_IRQHandler+0x50>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <TIM5_IRQHandler+0x4c>
        if (__HAL_TIM_GET_IT_SOURCE(&htim5, TIM_IT_UPDATE) != RESET) {
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <TIM5_IRQHandler+0x50>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <TIM5_IRQHandler+0x4c>
            __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <TIM5_IRQHandler+0x50>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f06f 0201 	mvn.w	r2, #1
 8001f66:	611a      	str	r2, [r3, #16]
            TIM5_IRQ_Callback();
 8001f68:	f000 f83e 	bl	8001fe8 <TIM5_IRQ_Callback>
        }
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	24027560 	.word	0x24027560

08001f74 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET) {
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <TIM4_IRQHandler+0x50>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d012      	beq.n	8001fc0 <TIM4_IRQHandler+0x4c>
        if (__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_UPDATE) != RESET) {
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <TIM4_IRQHandler+0x50>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <TIM4_IRQHandler+0x4c>
            __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <TIM4_IRQHandler+0x50>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0201 	mvn.w	r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
            TIM4_IRQ_Callback();
 8001fbc:	f000 f804 	bl	8001fc8 <TIM4_IRQ_Callback>
        }
    }
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	24027514 	.word	0x24027514

08001fc8 <TIM4_IRQ_Callback>:

/* Set clock signal to control stepper motor */
void TIM4_IRQ_Callback()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	if (isEngineEnabled) {
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <TIM4_IRQ_Callback+0x18>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <TIM4_IRQ_Callback+0x12>
		stepperController.generateSignal();
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <TIM4_IRQ_Callback+0x1c>)
 8001fd6:	f7ff ff77 	bl	8001ec8 <_ZN17StepperController14generateSignalEv>
//		else
//		{
//			cntFreq++;
//		}
//	}
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	240275b0 	.word	0x240275b0
 8001fe4:	24000318 	.word	0x24000318

08001fe8 <TIM5_IRQ_Callback>:

/* Read Encoder and set control signal */
void TIM5_IRQ_Callback()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
//	readRequest();
	encDriver.readRequest();
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM5_IRQ_Callback+0x10>)
 8001fee:	f001 fd09 	bl	8003a04 <_ZN13EncoderDriver11readRequestEv>
//	SPI3_ReceiveCompleteCallback();
//	readEncoder();
//	trajectoryGenerator();
//	controller(desiredPos);
//	engineDirectionControl();
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	24000288 	.word	0x24000288

08001ffc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_SPI_RxCpltCallback+0x1c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_SPI_RxCpltCallback+0x14>
	{
		SPI3_ReceiveCompleteCallback();
 800200c:	f000 f828 	bl	8002060 <SPI3_ReceiveCompleteCallback>
	}
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	2402748c 	.word	0x2402748c

0800201c <SPI3_IRQHandler>:

void SPI3_IRQHandler(void) {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8002020:	480e      	ldr	r0, [pc, #56]	; (800205c <SPI3_IRQHandler+0x40>)
 8002022:	f004 ffdf 	bl	8006fe4 <HAL_SPI_IRQHandler>
    if (__HAL_SPI_GET_FLAG(&hspi3, SPI_FLAG_OVR) != RESET) {
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <SPI3_IRQHandler+0x40>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <SPI3_IRQHandler+0x3c>
        __HAL_SPI_CLEAR_OVRFLAG(&hspi3);
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <SPI3_IRQHandler+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <SPI3_IRQHandler+0x40>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002056:	619a      	str	r2, [r3, #24]
    }
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2402748c 	.word	0x2402748c

08002060 <SPI3_ReceiveCompleteCallback>:

void SPI3_ReceiveCompleteCallback()
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	uint32_t pos = encDriver.readEncoder();
 8002066:	4816      	ldr	r0, [pc, #88]	; (80020c0 <SPI3_ReceiveCompleteCallback+0x60>)
 8002068:	f001 fcf2 	bl	8003a50 <_ZN13EncoderDriver11readEncoderEv>
 800206c:	6078      	str	r0, [r7, #4]
	uint32_t desPos = trajGen.calc();
 800206e:	4815      	ldr	r0, [pc, #84]	; (80020c4 <SPI3_ReceiveCompleteCallback+0x64>)
 8002070:	f7ff fe36 	bl	8001ce0 <_ZN19TrajectoryGenerator4calcEv>
 8002074:	6038      	str	r0, [r7, #0]
	if (isFetching) {
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <SPI3_ReceiveCompleteCallback+0x68>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <SPI3_ReceiveCompleteCallback+0x4c>
		probe++;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <SPI3_ReceiveCompleteCallback+0x6c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <SPI3_ReceiveCompleteCallback+0x6c>)
 8002086:	6013      	str	r3, [r2, #0]
		if (probe >= 1000) {
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <SPI3_ReceiveCompleteCallback+0x6c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002090:	db0c      	blt.n	80020ac <SPI3_ReceiveCompleteCallback+0x4c>
			probe = 0;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <SPI3_ReceiveCompleteCallback+0x6c>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
			push(&dataA, pos);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020a2:	eeb0 0b47 	vmov.f64	d0, d7
 80020a6:	480a      	ldr	r0, [pc, #40]	; (80020d0 <SPI3_ReceiveCompleteCallback+0x70>)
 80020a8:	f000 fdc6 	bl	8002c38 <push>
		}
	}
	stepperController.calcInput(desPos, pos);
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6839      	ldr	r1, [r7, #0]
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <SPI3_ReceiveCompleteCallback+0x74>)
 80020b2:	f7ff feb7 	bl	8001e24 <_ZN17StepperController9calcInputEmm>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	24000288 	.word	0x24000288
 80020c4:	240002f0 	.word	0x240002f0
 80020c8:	240275b4 	.word	0x240275b4
 80020cc:	24000280 	.word	0x24000280
 80020d0:	24000368 	.word	0x24000368
 80020d4:	24000318 	.word	0x24000318

080020d8 <_Z41__static_initialization_and_destruction_0ii>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d110      	bne.n	800210a <_Z41__static_initialization_and_destruction_0ii+0x32>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10b      	bne.n	800210a <_Z41__static_initialization_and_destruction_0ii+0x32>
EncoderDriver encDriver(&hspi3);
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80020f6:	f001 fb1f 	bl	8003738 <_ZN13EncoderDriverC1EP19__SPI_HandleTypeDef>
TrajectoryGenerator trajGen(1e-4);
 80020fa:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800211c <_Z41__static_initialization_and_destruction_0ii+0x44>
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002100:	f7ff fdcd 	bl	8001c9e <_ZN19TrajectoryGeneratorC1Ef>
StepperController stepperController;
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002106:	f7ff fe73 	bl	8001df0 <_ZN17StepperControllerC1Ev>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2402748c 	.word	0x2402748c
 8002118:	24000288 	.word	0x24000288
 800211c:	38d1b717 	.word	0x38d1b717
 8002120:	240002f0 	.word	0x240002f0
 8002124:	24000318 	.word	0x24000318

08002128 <_GLOBAL__sub_I_probe>:
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
 800212c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff ffd1 	bl	80020d8 <_Z41__static_initialization_and_destruction_0ii>
 8002136:	bd80      	pop	{r7, pc}

08002138 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <lwiperf_tcp_close+0xf0>)
 800213a:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800213c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002140:	4604      	mov	r4, r0
 8002142:	b087      	sub	sp, #28
 8002144:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8002146:	b91b      	cbnz	r3, 8002150 <lwiperf_tcp_close+0x18>
 8002148:	e01b      	b.n	8002182 <lwiperf_tcp_close+0x4a>
 800214a:	461a      	mov	r2, r3
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b1c3      	cbz	r3, 8002182 <lwiperf_tcp_close+0x4a>
    if (iter == item) {
 8002150:	429c      	cmp	r4, r3
 8002152:	d1fa      	bne.n	800214a <lwiperf_tcp_close+0x12>
        prev->next = iter->next;
 8002154:	6825      	ldr	r5, [r4, #0]
 8002156:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8002158:	b19d      	cbz	r5, 8002182 <lwiperf_tcp_close+0x4a>
        LWIP_ASSERT("duplicate entry", iter != item);
 800215a:	42ac      	cmp	r4, r5
 800215c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002230 <lwiperf_tcp_close+0xf8>
 8002160:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8002238 <lwiperf_tcp_close+0x100>
 8002164:	4f31      	ldr	r7, [pc, #196]	; (800222c <lwiperf_tcp_close+0xf4>)
 8002166:	d003      	beq.n	8002170 <lwiperf_tcp_close+0x38>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8002168:	682d      	ldr	r5, [r5, #0]
 800216a:	b155      	cbz	r5, 8002182 <lwiperf_tcp_close+0x4a>
        LWIP_ASSERT("duplicate entry", iter != item);
 800216c:	42ac      	cmp	r4, r5
 800216e:	d1fb      	bne.n	8002168 <lwiperf_tcp_close+0x30>
 8002170:	464b      	mov	r3, r9
 8002172:	22d0      	movs	r2, #208	; 0xd0
 8002174:	4641      	mov	r1, r8
 8002176:	4638      	mov	r0, r7
 8002178:	f012 fd76 	bl	8014c68 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800217c:	682d      	ldr	r5, [r5, #0]
 800217e:	2d00      	cmp	r5, #0
 8002180:	d1f4      	bne.n	800216c <lwiperf_tcp_close+0x34>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8002182:	b1cc      	cbz	r4, 80021b8 <lwiperf_tcp_close+0x80>
 8002184:	69a3      	ldr	r3, [r4, #24]
 8002186:	b1bb      	cbz	r3, 80021b8 <lwiperf_tcp_close+0x80>
    now = sys_now();
 8002188:	f005 fd7a 	bl	8007c80 <sys_now>
    duration_ms = now - conn->time_started;
 800218c:	6963      	ldr	r3, [r4, #20]
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800218e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    if (duration_ms == 0) {
 8002192:	1ac5      	subs	r5, r0, r3
 8002194:	d046      	beq.n	8002224 <lwiperf_tcp_close+0xec>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 8002196:	fbbc f7f5 	udiv	r7, ip, r5
 800219a:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 800219c:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 800219e:	4631      	mov	r1, r6
 80021a0:	8ad3      	ldrh	r3, [r2, #22]
 80021a2:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 80021a6:	e9cd 5703 	strd	r5, r7, [sp, #12]
 80021aa:	f8cd c008 	str.w	ip, [sp, #8]
 80021ae:	8b15      	ldrh	r5, [r2, #24]
 80021b0:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80021b2:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 80021b4:	9500      	str	r5, [sp, #0]
 80021b6:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 80021b8:	6920      	ldr	r0, [r4, #16]
 80021ba:	b330      	cbz	r0, 800220a <lwiperf_tcp_close+0xd2>
    tcp_arg(conn->conn_pcb, NULL);
 80021bc:	2100      	movs	r1, #0
 80021be:	f00b fe73 	bl	800dea8 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	6920      	ldr	r0, [r4, #16]
 80021c6:	4611      	mov	r1, r2
 80021c8:	f00b fed0 	bl	800df6c <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 80021cc:	2100      	movs	r1, #0
 80021ce:	6920      	ldr	r0, [r4, #16]
 80021d0:	f00b fe8c 	bl	800deec <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 80021d4:	2100      	movs	r1, #0
 80021d6:	6920      	ldr	r0, [r4, #16]
 80021d8:	f00b fe6e 	bl	800deb8 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 80021dc:	6920      	ldr	r0, [r4, #16]
 80021de:	2100      	movs	r1, #0
 80021e0:	f00b fe9e 	bl	800df20 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 80021e4:	6920      	ldr	r0, [r4, #16]
 80021e6:	f00c fd13 	bl	800ec10 <tcp_close>
    if (err != ERR_OK) {
 80021ea:	b928      	cbnz	r0, 80021f8 <lwiperf_tcp_close+0xc0>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80021ec:	4620      	mov	r0, r4
}
 80021ee:	b007      	add	sp, #28
 80021f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80021f4:	f00a b9cc 	b.w	800c590 <mem_free>
      tcp_abort(conn->conn_pcb);
 80021f8:	6920      	ldr	r0, [r4, #16]
 80021fa:	f00c fb23 	bl	800e844 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80021fe:	4620      	mov	r0, r4
}
 8002200:	b007      	add	sp, #28
 8002202:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8002206:	f00a b9c3 	b.w	800c590 <mem_free>
    err = tcp_close(conn->server_pcb);
 800220a:	68e0      	ldr	r0, [r4, #12]
 800220c:	f00c fd00 	bl	800ec10 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8002210:	2800      	cmp	r0, #0
 8002212:	d0eb      	beq.n	80021ec <lwiperf_tcp_close+0xb4>
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <lwiperf_tcp_close+0xf8>)
 8002216:	f240 120d 	movw	r2, #269	; 0x10d
 800221a:	4906      	ldr	r1, [pc, #24]	; (8002234 <lwiperf_tcp_close+0xfc>)
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <lwiperf_tcp_close+0xf4>)
 800221e:	f012 fd23 	bl	8014c68 <iprintf>
 8002222:	e7e3      	b.n	80021ec <lwiperf_tcp_close+0xb4>
      bandwidth_kbitpsec = 0;
 8002224:	462f      	mov	r7, r5
 8002226:	e7b9      	b.n	800219c <lwiperf_tcp_close+0x64>
 8002228:	24000358 	.word	0x24000358
 800222c:	08017728 	.word	0x08017728
 8002230:	08017700 	.word	0x08017700
 8002234:	08017750 	.word	0x08017750
 8002238:	08017718 	.word	0x08017718

0800223c <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 800223c:	2800      	cmp	r0, #0
 800223e:	bf18      	it	ne
 8002240:	2900      	cmpne	r1, #0
 8002242:	f000 8092 	beq.w	800236a <lwiperf_tcp_accept+0x12e>
 8002246:	2a00      	cmp	r2, #0
 8002248:	f040 808f 	bne.w	800236a <lwiperf_tcp_accept+0x12e>
{
 800224c:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 800224e:	7943      	ldrb	r3, [r0, #5]
 8002250:	460e      	mov	r6, r1
 8002252:	4604      	mov	r4, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d06b      	beq.n	8002330 <lwiperf_tcp_accept+0xf4>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8002258:	68e3      	ldr	r3, [r4, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d072      	beq.n	8002344 <lwiperf_tcp_accept+0x108>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 800225e:	6923      	ldr	r3, [r4, #16]
 8002260:	b133      	cbz	r3, 8002270 <lwiperf_tcp_accept+0x34>
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <lwiperf_tcp_accept+0x134>)
 8002264:	f240 225a 	movw	r2, #602	; 0x25a
 8002268:	4942      	ldr	r1, [pc, #264]	; (8002374 <lwiperf_tcp_accept+0x138>)
 800226a:	4843      	ldr	r0, [pc, #268]	; (8002378 <lwiperf_tcp_accept+0x13c>)
 800226c:	f012 fcfc 	bl	8014c68 <iprintf>
  if (s->specific_remote) {
 8002270:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002274:	2b00      	cmp	r3, #0
 8002276:	d138      	bne.n	80022ea <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8002278:	68a3      	ldr	r3, [r4, #8]
 800227a:	b133      	cbz	r3, 800228a <lwiperf_tcp_accept+0x4e>
 800227c:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <lwiperf_tcp_accept+0x134>)
 800227e:	f240 2262 	movw	r2, #610	; 0x262
 8002282:	493e      	ldr	r1, [pc, #248]	; (800237c <lwiperf_tcp_accept+0x140>)
 8002284:	483c      	ldr	r0, [pc, #240]	; (8002378 <lwiperf_tcp_accept+0x13c>)
 8002286:	f012 fcef 	bl	8014c68 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800228a:	2048      	movs	r0, #72	; 0x48
 800228c:	f00a fb24 	bl	800c8d8 <mem_malloc>
  if (conn == NULL) {
 8002290:	4605      	mov	r5, r0
 8002292:	2800      	cmp	r0, #0
 8002294:	d066      	beq.n	8002364 <lwiperf_tcp_accept+0x128>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8002296:	2248      	movs	r2, #72	; 0x48
 8002298:	2100      	movs	r1, #0
 800229a:	f012 fdb2 	bl	8014e02 <memset>
  conn->base.tcp = 1;
 800229e:	f240 1301 	movw	r3, #257	; 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 80022a2:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 80022a4:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 80022a6:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 80022a8:	f005 fcea 	bl	8007c80 <sys_now>
  conn->report_fn = s->report_fn;
 80022ac:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80022ae:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 80022b0:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 80022b4:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 80022b6:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 80022b8:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 80022ba:	f00b fdf5 	bl	800dea8 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 80022be:	4930      	ldr	r1, [pc, #192]	; (8002380 <lwiperf_tcp_accept+0x144>)
 80022c0:	4630      	mov	r0, r6
 80022c2:	f00b fdf9 	bl	800deb8 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 80022c6:	2202      	movs	r2, #2
 80022c8:	492e      	ldr	r1, [pc, #184]	; (8002384 <lwiperf_tcp_accept+0x148>)
 80022ca:	4630      	mov	r0, r6
 80022cc:	f00b fe4e 	bl	800df6c <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 80022d0:	492d      	ldr	r1, [pc, #180]	; (8002388 <lwiperf_tcp_accept+0x14c>)
 80022d2:	6928      	ldr	r0, [r5, #16]
 80022d4:	f00b fe24 	bl	800df20 <tcp_err>

  if (s->specific_remote) {
 80022d8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80022dc:	b97b      	cbnz	r3, 80022fe <lwiperf_tcp_accept+0xc2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80022de:	4e2b      	ldr	r6, [pc, #172]	; (800238c <lwiperf_tcp_accept+0x150>)
 80022e0:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 80022e2:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 80022e4:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 80022e6:	6035      	str	r5, [r6, #0]
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80022ea:	68a3      	ldr	r3, [r4, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <lwiperf_tcp_accept+0x118>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 80022f0:	6872      	ldr	r2, [r6, #4]
 80022f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d0c8      	beq.n	800228a <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 80022f8:	f06f 0005 	mvn.w	r0, #5
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 80022fe:	68a2      	ldr	r2, [r4, #8]
 8002300:	4e22      	ldr	r6, [pc, #136]	; (800238c <lwiperf_tcp_accept+0x150>)
 8002302:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8002304:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002308:	b153      	cbz	r3, 8002320 <lwiperf_tcp_accept+0xe4>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800230a:	6831      	ldr	r1, [r6, #0]
 800230c:	b141      	cbz	r1, 8002320 <lwiperf_tcp_accept+0xe4>
    if (iter == item) {
 800230e:	428a      	cmp	r2, r1
 8002310:	d0e7      	beq.n	80022e2 <lwiperf_tcp_accept+0xa6>
 8002312:	460b      	mov	r3, r1
 8002314:	e001      	b.n	800231a <lwiperf_tcp_accept+0xde>
 8002316:	429a      	cmp	r2, r3
 8002318:	d0e3      	beq.n	80022e2 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1fa      	bne.n	8002316 <lwiperf_tcp_accept+0xda>
      s->report_fn = NULL;
 8002320:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8002322:	2102      	movs	r1, #2
 8002324:	4620      	mov	r0, r4
      s->report_fn = NULL;
 8002326:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8002328:	f7ff ff06 	bl	8002138 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 800232c:	6831      	ldr	r1, [r6, #0]
 800232e:	e7d8      	b.n	80022e2 <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <lwiperf_tcp_accept+0x134>)
 8002332:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002336:	4916      	ldr	r1, [pc, #88]	; (8002390 <lwiperf_tcp_accept+0x154>)
 8002338:	480f      	ldr	r0, [pc, #60]	; (8002378 <lwiperf_tcp_accept+0x13c>)
 800233a:	f012 fc95 	bl	8014c68 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800233e:	68e3      	ldr	r3, [r4, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d18c      	bne.n	800225e <lwiperf_tcp_accept+0x22>
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <lwiperf_tcp_accept+0x134>)
 8002346:	f240 2259 	movw	r2, #601	; 0x259
 800234a:	4912      	ldr	r1, [pc, #72]	; (8002394 <lwiperf_tcp_accept+0x158>)
 800234c:	480a      	ldr	r0, [pc, #40]	; (8002378 <lwiperf_tcp_accept+0x13c>)
 800234e:	f012 fc8b 	bl	8014c68 <iprintf>
 8002352:	e784      	b.n	800225e <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <lwiperf_tcp_accept+0x134>)
 8002356:	f44f 7217 	mov.w	r2, #604	; 0x25c
 800235a:	490f      	ldr	r1, [pc, #60]	; (8002398 <lwiperf_tcp_accept+0x15c>)
 800235c:	4806      	ldr	r0, [pc, #24]	; (8002378 <lwiperf_tcp_accept+0x13c>)
 800235e:	f012 fc83 	bl	8014c68 <iprintf>
 8002362:	e7c5      	b.n	80022f0 <lwiperf_tcp_accept+0xb4>
    return ERR_MEM;
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002368:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800236a:	f06f 0005 	mvn.w	r0, #5
}
 800236e:	4770      	bx	lr
 8002370:	08017700 	.word	0x08017700
 8002374:	0801777c 	.word	0x0801777c
 8002378:	08017728 	.word	0x08017728
 800237c:	080177b8 	.word	0x080177b8
 8002380:	080027a1 	.word	0x080027a1
 8002384:	080024e5 	.word	0x080024e5
 8002388:	0800239d 	.word	0x0800239d
 800238c:	24000358 	.word	0x24000358
 8002390:	08017758 	.word	0x08017758
 8002394:	08017768 	.word	0x08017768
 8002398:	08017790 	.word	0x08017790

0800239c <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800239c:	2105      	movs	r1, #5
 800239e:	f7ff becb 	b.w	8002138 <lwiperf_tcp_close>
 80023a2:	bf00      	nop

080023a4 <lwiperf_tcp_client_send_more>:
{
 80023a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80023a8:	4605      	mov	r5, r0
 80023aa:	b110      	cbz	r0, 80023b2 <lwiperf_tcp_client_send_more+0xe>
 80023ac:	7903      	ldrb	r3, [r0, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d16f      	bne.n	8002492 <lwiperf_tcp_client_send_more+0xee>
 80023b2:	4b3a      	ldr	r3, [pc, #232]	; (800249c <lwiperf_tcp_client_send_more+0xf8>)
 80023b4:	f240 121d 	movw	r2, #285	; 0x11d
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <lwiperf_tcp_client_send_more+0xfc>)
 80023ba:	483a      	ldr	r0, [pc, #232]	; (80024a4 <lwiperf_tcp_client_send_more+0x100>)
 80023bc:	f012 fc54 	bl	8014c68 <iprintf>
      u32_t time_ms = time * 10;
 80023c0:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80023c4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80024ac <lwiperf_tcp_client_send_more+0x108>
 80023c8:	e006      	b.n	80023d8 <lwiperf_tcp_client_send_more+0x34>
    if (err == ERR_OK) {
 80023ca:	bb78      	cbnz	r0, 800242c <lwiperf_tcp_client_send_more+0x88>
      conn->bytes_transferred += txlen;
 80023cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023ce:	4423      	add	r3, r4
 80023d0:	626b      	str	r3, [r5, #36]	; 0x24
  } while (send_more);
 80023d2:	f1b8 0f00 	cmp.w	r8, #0
 80023d6:	d029      	beq.n	800242c <lwiperf_tcp_client_send_more+0x88>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 80023d8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80023da:	0602      	lsls	r2, r0, #24
 80023dc:	d52c      	bpl.n	8002438 <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 80023de:	f005 fc4f 	bl	8007c80 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 80023e2:	696b      	ldr	r3, [r5, #20]
      u32_t now = sys_now();
 80023e4:	4604      	mov	r4, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 80023e6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      u32_t diff_ms = now - conn->time_started;
 80023e8:	1ae4      	subs	r4, r4, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 80023ea:	f00a f817 	bl	800c41c <lwip_htonl>
      u32_t time_ms = time * 10;
 80023ee:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 80023f2:	4284      	cmp	r4, r0
 80023f4:	d225      	bcs.n	8002442 <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 80023f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023f8:	2b17      	cmp	r3, #23
 80023fa:	d93f      	bls.n	800247c <lwiperf_tcp_client_send_more+0xd8>
    } else if (conn->bytes_transferred < 48) {
 80023fc:	2b2f      	cmp	r3, #47	; 0x2f
 80023fe:	d827      	bhi.n	8002450 <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8002400:	18ee      	adds	r6, r5, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8002402:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8002406:	f04f 0a03 	mov.w	sl, #3
      send_more = 1;
 800240a:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800240e:	3610      	adds	r6, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8002410:	b29c      	uxth	r4, r3
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8002412:	f240 27da 	movw	r7, #730	; 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8002416:	4653      	mov	r3, sl
 8002418:	4622      	mov	r2, r4
 800241a:	4631      	mov	r1, r6
 800241c:	6928      	ldr	r0, [r5, #16]
 800241e:	f00e fb21 	bl	8010a64 <tcp_write>
      if (err ==  ERR_MEM) {
 8002422:	1c43      	adds	r3, r0, #1
 8002424:	d1d1      	bne.n	80023ca <lwiperf_tcp_client_send_more+0x26>
        txlen /= 2;
 8002426:	0864      	lsrs	r4, r4, #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8002428:	42bc      	cmp	r4, r7
 800242a:	d0f4      	beq.n	8002416 <lwiperf_tcp_client_send_more+0x72>
  tcp_output(conn->conn_pcb);
 800242c:	6928      	ldr	r0, [r5, #16]
 800242e:	f00f f937 	bl	80116a0 <tcp_output>
}
 8002432:	2000      	movs	r0, #0
 8002434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8002438:	f009 fff0 	bl	800c41c <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 800243c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800243e:	4283      	cmp	r3, r0
 8002440:	d8da      	bhi.n	80023f8 <lwiperf_tcp_client_send_more+0x54>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8002442:	4628      	mov	r0, r5
 8002444:	2101      	movs	r1, #1
 8002446:	f7ff fe77 	bl	8002138 <lwiperf_tcp_close>
}
 800244a:	2000      	movs	r0, #0
 800244c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <lwiperf_tcp_client_send_more+0x104>)
      apiflags = 0; /* no copying needed */
 8002452:	f240 54b4 	movw	r4, #1460	; 0x5b4
 8002456:	f04f 0a00 	mov.w	sl, #0
 800245a:	f04f 0801 	mov.w	r8, #1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800245e:	fba2 1203 	umull	r1, r2, r2, r3
      apiflags = 0; /* no copying needed */
 8002462:	f240 519c 	movw	r1, #1436	; 0x59c
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8002466:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	bf08      	it	eq
 800246c:	460c      	moveq	r4, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800246e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002472:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8002476:	eb0b 0603 	add.w	r6, fp, r3
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 800247a:	e7ca      	b.n	8002412 <lwiperf_tcp_client_send_more+0x6e>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800247c:	f105 0628 	add.w	r6, r5, #40	; 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8002480:	f1c3 0418 	rsb	r4, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 8002484:	f04f 0a01 	mov.w	sl, #1
    send_more = 0;
 8002488:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800248c:	441e      	add	r6, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800248e:	b2a4      	uxth	r4, r4
      apiflags = TCP_WRITE_FLAG_COPY;
 8002490:	e7bf      	b.n	8002412 <lwiperf_tcp_client_send_more+0x6e>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8002492:	7943      	ldrb	r3, [r0, #5]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d093      	beq.n	80023c0 <lwiperf_tcp_client_send_more+0x1c>
 8002498:	e78b      	b.n	80023b2 <lwiperf_tcp_client_send_more+0xe>
 800249a:	bf00      	nop
 800249c:	08017700 	.word	0x08017700
 80024a0:	080177e0 	.word	0x080177e0
 80024a4:	08017728 	.word	0x08017728
 80024a8:	cccccccd 	.word	0xcccccccd
 80024ac:	08017854 	.word	0x08017854

080024b0 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80024b0:	6903      	ldr	r3, [r0, #16]
 80024b2:	428b      	cmp	r3, r1
{
 80024b4:	b510      	push	{r4, lr}
 80024b6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80024b8:	d006      	beq.n	80024c8 <lwiperf_tcp_client_sent+0x18>
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <lwiperf_tcp_client_sent+0x28>)
 80024bc:	f44f 72b3 	mov.w	r2, #358	; 0x166
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <lwiperf_tcp_client_sent+0x2c>)
 80024c2:	4807      	ldr	r0, [pc, #28]	; (80024e0 <lwiperf_tcp_client_sent+0x30>)
 80024c4:	f012 fbd0 	bl	8014c68 <iprintf>
  conn->poll_count = 0;
 80024c8:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 80024ca:	4620      	mov	r0, r4
  conn->poll_count = 0;
 80024cc:	f884 3020 	strb.w	r3, [r4, #32]
}
 80024d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 80024d4:	f7ff bf66 	b.w	80023a4 <lwiperf_tcp_client_send_more>
 80024d8:	08017700 	.word	0x08017700
 80024dc:	08018174 	.word	0x08018174
 80024e0:	08017728 	.word	0x08017728

080024e4 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80024e4:	6903      	ldr	r3, [r0, #16]
 80024e6:	428b      	cmp	r3, r1
{
 80024e8:	b510      	push	{r4, lr}
 80024ea:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80024ec:	d006      	beq.n	80024fc <lwiperf_tcp_poll+0x18>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <lwiperf_tcp_poll+0x48>)
 80024f0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <lwiperf_tcp_poll+0x4c>)
 80024f6:	480f      	ldr	r0, [pc, #60]	; (8002534 <lwiperf_tcp_poll+0x50>)
 80024f8:	f012 fbb6 	bl	8014c68 <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 80024fc:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002500:	3301      	adds	r3, #1
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b09      	cmp	r3, #9
 8002506:	f884 3020 	strb.w	r3, [r4, #32]
 800250a:	d808      	bhi.n	800251e <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 800250c:	7963      	ldrb	r3, [r4, #5]
 800250e:	b10b      	cbz	r3, 8002514 <lwiperf_tcp_poll+0x30>
}
 8002510:	2000      	movs	r0, #0
 8002512:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff ff45 	bl	80023a4 <lwiperf_tcp_client_send_more>
}
 800251a:	2000      	movs	r0, #0
 800251c:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800251e:	4620      	mov	r0, r4
 8002520:	2102      	movs	r1, #2
 8002522:	f7ff fe09 	bl	8002138 <lwiperf_tcp_close>
}
 8002526:	2000      	movs	r0, #0
 8002528:	bd10      	pop	{r4, pc}
 800252a:	bf00      	nop
 800252c:	08017700 	.word	0x08017700
 8002530:	080177f0 	.word	0x080177f0
 8002534:	08017728 	.word	0x08017728

08002538 <lwiperf_tcp_client_connected>:
{
 8002538:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800253a:	6903      	ldr	r3, [r0, #16]
{
 800253c:	4604      	mov	r4, r0
 800253e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8002540:	428b      	cmp	r3, r1
 8002542:	d006      	beq.n	8002552 <lwiperf_tcp_client_connected+0x1a>
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <lwiperf_tcp_client_connected+0x40>)
 8002546:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800254a:	490c      	ldr	r1, [pc, #48]	; (800257c <lwiperf_tcp_client_connected+0x44>)
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <lwiperf_tcp_client_connected+0x48>)
 800254e:	f012 fb8b 	bl	8014c68 <iprintf>
  if (err != ERR_OK) {
 8002552:	b955      	cbnz	r5, 800256a <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 8002554:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 8002558:	f005 fb92 	bl	8007c80 <sys_now>
 800255c:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 800255e:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 8002560:	6163      	str	r3, [r4, #20]
}
 8002562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 8002566:	f7ff bf1d 	b.w	80023a4 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800256a:	4620      	mov	r0, r4
 800256c:	2105      	movs	r1, #5
 800256e:	f7ff fde3 	bl	8002138 <lwiperf_tcp_close>
}
 8002572:	2000      	movs	r0, #0
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	08017700 	.word	0x08017700
 800257c:	08018174 	.word	0x08018174
 8002580:	08017728 	.word	0x08017728

08002584 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 8002584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002588:	4605      	mov	r5, r0
 800258a:	460f      	mov	r7, r1
 800258c:	4690      	mov	r8, r2
 800258e:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8002590:	f005 fcfa 	bl	8007f88 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 8002594:	2d00      	cmp	r5, #0
 8002596:	d037      	beq.n	8002608 <lwiperf_start_tcp_server_impl.constprop.0+0x84>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002598:	2048      	movs	r0, #72	; 0x48
 800259a:	f00a f99d 	bl	800c8d8 <mem_malloc>
  if (s == NULL) {
 800259e:	4604      	mov	r4, r0
 80025a0:	b378      	cbz	r0, 8002602 <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 80025a2:	2248      	movs	r2, #72	; 0x48
 80025a4:	2100      	movs	r1, #0
 80025a6:	f012 fc2c 	bl	8014e02 <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 80025aa:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 80025ac:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 80025ae:	202e      	movs	r0, #46	; 0x2e
  s->base.related_master_state = related_master_state;
 80025b0:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 80025b2:	f240 1301 	movw	r3, #257	; 0x101
  s->report_fn = report_fn;
 80025b6:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 80025ba:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 80025bc:	f00c fa54 	bl	800ea68 <tcp_new_ip_type>
  if (pcb == NULL) {
 80025c0:	4606      	mov	r6, r0
 80025c2:	b1f0      	cbz	r0, 8002602 <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 80025c4:	4629      	mov	r1, r5
 80025c6:	463a      	mov	r2, r7
 80025c8:	f00b fa00 	bl	800d9cc <tcp_bind>
  if (err != ERR_OK) {
 80025cc:	4605      	mov	r5, r0
 80025ce:	b110      	cbz	r0, 80025d6 <lwiperf_start_tcp_server_impl.constprop.0+0x52>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 80025d0:	4628      	mov	r0, r5
 80025d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 80025d6:	2101      	movs	r1, #1
 80025d8:	4630      	mov	r0, r6
 80025da:	f00b fae1 	bl	800dba0 <tcp_listen_with_backlog>
 80025de:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 80025e0:	b1a8      	cbz	r0, 800260e <lwiperf_start_tcp_server_impl.constprop.0+0x8a>
  tcp_arg(s->server_pcb, s);
 80025e2:	4621      	mov	r1, r4
 80025e4:	f00b fc60 	bl	800dea8 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 80025e8:	68e0      	ldr	r0, [r4, #12]
 80025ea:	490d      	ldr	r1, [pc, #52]	; (8002620 <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
 80025ec:	f00b fcb2 	bl	800df54 <tcp_accept>
  item->next = lwiperf_all_connections;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <lwiperf_start_tcp_server_impl.constprop.0+0xa0>)
}
 80025f2:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 80025f4:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 80025f6:	601c      	str	r4, [r3, #0]
  *state = s;
 80025f8:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 80025fa:	6022      	str	r2, [r4, #0]
  *state = s;
 80025fc:	601c      	str	r4, [r3, #0]
}
 80025fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8002602:	f04f 35ff 	mov.w	r5, #4294967295
 8002606:	e7e3      	b.n	80025d0 <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
    return ERR_ARG;
 8002608:	f06f 050f 	mvn.w	r5, #15
 800260c:	e7e0      	b.n	80025d0 <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
      tcp_close(pcb);
 800260e:	4630      	mov	r0, r6
    return ERR_MEM;
 8002610:	f04f 35ff 	mov.w	r5, #4294967295
      tcp_close(pcb);
 8002614:	f00c fafc 	bl	800ec10 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8002618:	4620      	mov	r0, r4
 800261a:	f009 ffb9 	bl	800c590 <mem_free>
    return ERR_MEM;
 800261e:	e7d7      	b.n	80025d0 <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
 8002620:	0800223d 	.word	0x0800223d
 8002624:	24000358 	.word	0x24000358

08002628 <lwiperf_tx_start_impl.constprop.0>:
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
 8002628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800262c:	4688      	mov	r8, r1
 800262e:	b083      	sub	sp, #12
 8002630:	4616      	mov	r6, r2
 8002632:	4699      	mov	r9, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8002634:	4607      	mov	r7, r0
 8002636:	2800      	cmp	r0, #0
 8002638:	d063      	beq.n	8002702 <lwiperf_tx_start_impl.constprop.0+0xda>
  *new_conn = NULL;
 800263a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800263c:	f04f 0b00 	mov.w	fp, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002640:	2048      	movs	r0, #72	; 0x48
  *new_conn = NULL;
 8002642:	f8c3 b000 	str.w	fp, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002646:	f00a f947 	bl	800c8d8 <mem_malloc>
  if (client_conn == NULL) {
 800264a:	4604      	mov	r4, r0
 800264c:	2800      	cmp	r0, #0
 800264e:	d060      	beq.n	8002712 <lwiperf_tx_start_impl.constprop.0+0xea>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8002650:	4658      	mov	r0, fp
 8002652:	f00c fa09 	bl	800ea68 <tcp_new_ip_type>
  if (newpcb == NULL) {
 8002656:	4605      	mov	r5, r0
 8002658:	2800      	cmp	r0, #0
 800265a:	d05d      	beq.n	8002718 <lwiperf_tx_start_impl.constprop.0+0xf0>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 800265c:	2248      	movs	r2, #72	; 0x48
 800265e:	4659      	mov	r1, fp
 8002660:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 8002662:	f04f 0a01 	mov.w	sl, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8002666:	f012 fbcc 	bl	8014e02 <memset>
  client_conn->base.related_master_state = related_master_state;
 800266a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  client_conn->conn_pcb = newpcb;
 800266c:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 800266e:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 8002670:	f884 a004 	strb.w	sl, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8002674:	f005 fb04 	bl	8007c80 <sys_now>
  client_conn->report_arg = report_arg;
 8002678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  client_conn->report_fn = report_fn;
 800267a:	f8c4 9018 	str.w	r9, [r4, #24]
  client_conn->report_arg = report_arg;
 800267e:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8002680:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 8002682:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8002686:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8002688:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800268c:	6832      	ldr	r2, [r6, #0]
 800268e:	6873      	ldr	r3, [r6, #4]
 8002690:	68b0      	ldr	r0, [r6, #8]
 8002692:	68f1      	ldr	r1, [r6, #12]
 8002694:	6320      	str	r0, [r4, #48]	; 0x30
  tcp_arg(newpcb, client_conn);
 8002696:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8002698:	6361      	str	r1, [r4, #52]	; 0x34
  tcp_arg(newpcb, client_conn);
 800269a:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800269c:	62a2      	str	r2, [r4, #40]	; 0x28
 800269e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026a0:	6973      	ldr	r3, [r6, #20]
 80026a2:	6932      	ldr	r2, [r6, #16]
 80026a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80026a6:	63a2      	str	r2, [r4, #56]	; 0x38
  client_conn->have_settings_buf = 1;
 80026a8:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
  tcp_arg(newpcb, client_conn);
 80026ac:	f00b fbfc 	bl	800dea8 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 80026b0:	4628      	mov	r0, r5
 80026b2:	491c      	ldr	r1, [pc, #112]	; (8002724 <lwiperf_tx_start_impl.constprop.0+0xfc>)
 80026b4:	f00b fc1a 	bl	800deec <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 80026b8:	2202      	movs	r2, #2
 80026ba:	4628      	mov	r0, r5
 80026bc:	491a      	ldr	r1, [pc, #104]	; (8002728 <lwiperf_tx_start_impl.constprop.0+0x100>)
 80026be:	f00b fc55 	bl	800df6c <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 80026c2:	4628      	mov	r0, r5
 80026c4:	4919      	ldr	r1, [pc, #100]	; (800272c <lwiperf_tx_start_impl.constprop.0+0x104>)
 80026c6:	f00b fc2b 	bl	800df20 <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 80026ca:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 80026cc:	4628      	mov	r0, r5
 80026ce:	4642      	mov	r2, r8
  ip_addr_copy(remote_addr, *remote_ip);
 80026d0:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 80026d2:	a901      	add	r1, sp, #4
 80026d4:	4b16      	ldr	r3, [pc, #88]	; (8002730 <lwiperf_tx_start_impl.constprop.0+0x108>)
 80026d6:	f00b faef 	bl	800dcb8 <tcp_connect>
  if (err != ERR_OK) {
 80026da:	4605      	mov	r5, r0
 80026dc:	b948      	cbnz	r0, 80026f2 <lwiperf_tx_start_impl.constprop.0+0xca>
  item->next = lwiperf_all_connections;
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <lwiperf_tx_start_impl.constprop.0+0x10c>)
 80026e0:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 80026e2:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 80026e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  item->next = lwiperf_all_connections;
 80026e6:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 80026e8:	601c      	str	r4, [r3, #0]
}
 80026ea:	4628      	mov	r0, r5
 80026ec:	b003      	add	sp, #12
 80026ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 80026f2:	4620      	mov	r0, r4
 80026f4:	2102      	movs	r1, #2
 80026f6:	f7ff fd1f 	bl	8002138 <lwiperf_tcp_close>
}
 80026fa:	4628      	mov	r0, r5
 80026fc:	b003      	add	sp, #12
 80026fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <lwiperf_tx_start_impl.constprop.0+0x110>)
 8002704:	f240 128b 	movw	r2, #395	; 0x18b
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <lwiperf_tx_start_impl.constprop.0+0x114>)
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <lwiperf_tx_start_impl.constprop.0+0x118>)
 800270c:	f012 faac 	bl	8014c68 <iprintf>
 8002710:	e793      	b.n	800263a <lwiperf_tx_start_impl.constprop.0+0x12>
    return ERR_MEM;
 8002712:	f04f 35ff 	mov.w	r5, #4294967295
 8002716:	e7e8      	b.n	80026ea <lwiperf_tx_start_impl.constprop.0+0xc2>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8002718:	4620      	mov	r0, r4
    return ERR_MEM;
 800271a:	f04f 35ff 	mov.w	r5, #4294967295
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800271e:	f009 ff37 	bl	800c590 <mem_free>
    return ERR_MEM;
 8002722:	e7e2      	b.n	80026ea <lwiperf_tx_start_impl.constprop.0+0xc2>
 8002724:	080024b1 	.word	0x080024b1
 8002728:	080024e5 	.word	0x080024e5
 800272c:	0800239d 	.word	0x0800239d
 8002730:	08002539 	.word	0x08002539
 8002734:	24000358 	.word	0x24000358
 8002738:	08017700 	.word	0x08017700
 800273c:	08017800 	.word	0x08017800
 8002740:	08017728 	.word	0x08017728

08002744 <lwiperf_tx_start_passive>:
{
 8002744:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 8002746:	2300      	movs	r3, #0
{
 8002748:	4604      	mov	r4, r0
 800274a:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 800274c:	6b00      	ldr	r0, [r0, #48]	; 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 800274e:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8002750:	f009 fe64 	bl	800c41c <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8002754:	6922      	ldr	r2, [r4, #16]
 8002756:	a905      	add	r1, sp, #20
 8002758:	69e3      	ldr	r3, [r4, #28]
 800275a:	68a5      	ldr	r5, [r4, #8]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	e9cd 5101 	strd	r5, r1, [sp, #4]
 8002762:	b281      	uxth	r1, r0
 8002764:	69a3      	ldr	r3, [r4, #24]
 8002766:	1d10      	adds	r0, r2, #4
 8002768:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800276c:	f7ff ff5c 	bl	8002628 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8002770:	4604      	mov	r4, r0
 8002772:	b918      	cbnz	r0, 800277c <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8002774:	9d05      	ldr	r5, [sp, #20]
 8002776:	b125      	cbz	r5, 8002782 <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8002778:	2300      	movs	r3, #0
 800277a:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800277c:	4620      	mov	r0, r4
 800277e:	b007      	add	sp, #28
 8002780:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <lwiperf_tx_start_passive+0x50>)
 8002784:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <lwiperf_tx_start_passive+0x54>)
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <lwiperf_tx_start_passive+0x58>)
 800278c:	f012 fa6c 	bl	8014c68 <iprintf>
 8002790:	e7f2      	b.n	8002778 <lwiperf_tx_start_passive+0x34>
 8002792:	bf00      	nop
 8002794:	08017700 	.word	0x08017700
 8002798:	08017814 	.word	0x08017814
 800279c:	08017728 	.word	0x08017728

080027a0 <lwiperf_tcp_recv>:
{
 80027a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a4:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80027a6:	6903      	ldr	r3, [r0, #16]
{
 80027a8:	4604      	mov	r4, r0
 80027aa:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80027ac:	428b      	cmp	r3, r1
{
 80027ae:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80027b0:	d006      	beq.n	80027c0 <lwiperf_tcp_recv+0x20>
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <lwiperf_tcp_recv+0x1bc>)
 80027b4:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 80027b8:	4969      	ldr	r1, [pc, #420]	; (8002960 <lwiperf_tcp_recv+0x1c0>)
 80027ba:	486a      	ldr	r0, [pc, #424]	; (8002964 <lwiperf_tcp_recv+0x1c4>)
 80027bc:	f012 fa54 	bl	8014c68 <iprintf>
  if (err != ERR_OK) {
 80027c0:	f1b8 0f00 	cmp.w	r8, #0
 80027c4:	d170      	bne.n	80028a8 <lwiperf_tcp_recv+0x108>
  if (p == NULL) {
 80027c6:	2d00      	cmp	r5, #0
 80027c8:	f000 8098 	beq.w	80028fc <lwiperf_tcp_recv+0x15c>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 80027cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  tot_len = p->tot_len;
 80027d0:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 80027d2:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 80027d6:	b95b      	cbnz	r3, 80027f0 <lwiperf_tcp_recv+0x50>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 80027d8:	2f17      	cmp	r7, #23
 80027da:	d86c      	bhi.n	80028b6 <lwiperf_tcp_recv+0x116>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 80027dc:	4620      	mov	r0, r4
 80027de:	2103      	movs	r1, #3
 80027e0:	f7ff fcaa 	bl	8002138 <lwiperf_tcp_close>
      pbuf_free(p);
 80027e4:	4628      	mov	r0, r5
 80027e6:	f00a fdb7 	bl	800d358 <pbuf_free>
}
 80027ea:	2000      	movs	r0, #0
 80027ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 80027f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f2:	03da      	lsls	r2, r3, #15
 80027f4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80027f8:	d118      	bne.n	800282c <lwiperf_tcp_recv+0x8c>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 80027fa:	2f17      	cmp	r7, #23
 80027fc:	d9ee      	bls.n	80027dc <lwiperf_tcp_recv+0x3c>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 80027fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002800:	0612      	lsls	r2, r2, #24
 8002802:	f100 8087 	bmi.w	8002914 <lwiperf_tcp_recv+0x174>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8002806:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8002808:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800280a:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 800280c:	d968      	bls.n	80028e0 <lwiperf_tcp_recv+0x140>
    conn->next_num = 4; /* 24 bytes received... */
 800280e:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 8002810:	2118      	movs	r1, #24
 8002812:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 8002814:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8002818:	f00a fd32 	bl	800d280 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 800281c:	b130      	cbz	r0, 800282c <lwiperf_tcp_recv+0x8c>
 800281e:	4b4f      	ldr	r3, [pc, #316]	; (800295c <lwiperf_tcp_recv+0x1bc>)
 8002820:	f240 2211 	movw	r2, #529	; 0x211
 8002824:	4950      	ldr	r1, [pc, #320]	; (8002968 <lwiperf_tcp_recv+0x1c8>)
 8002826:	484f      	ldr	r0, [pc, #316]	; (8002964 <lwiperf_tcp_recv+0x1c4>)
 8002828:	f012 fa1e 	bl	8014c68 <iprintf>
{
 800282c:	46ae      	mov	lr, r5
 800282e:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 8002832:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8002836:	f8de 9004 	ldr.w	r9, [lr, #4]
    for (i = 0; i < q->len; i++) {
 800283a:	b1db      	cbz	r3, 8002874 <lwiperf_tcp_recv+0xd4>
      if (num == conn->next_num) {
 800283c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002840:	2200      	movs	r2, #0
 8002842:	e008      	b.n	8002856 <lwiperf_tcp_recv+0xb6>
          conn->next_num = 0;
 8002844:	2b0a      	cmp	r3, #10
 8002846:	bf08      	it	eq
 8002848:	2300      	moveq	r3, #0
 800284a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    for (i = 0; i < q->len; i++) {
 800284e:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8002852:	4281      	cmp	r1, r0
 8002854:	d90d      	bls.n	8002872 <lwiperf_tcp_recv+0xd2>
      u8_t val = payload[i];
 8002856:	b290      	uxth	r0, r2
        conn->next_num++;
 8002858:	1c59      	adds	r1, r3, #1
    for (i = 0; i < q->len; i++) {
 800285a:	3201      	adds	r2, #1
      u8_t num = val - '0';
 800285c:	f819 c000 	ldrb.w	ip, [r9, r0]
    for (i = 0; i < q->len; i++) {
 8002860:	b290      	uxth	r0, r2
      u8_t num = val - '0';
 8002862:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
      if (num == conn->next_num) {
 8002866:	fa5f fc8c 	uxtb.w	ip, ip
 800286a:	459c      	cmp	ip, r3
        conn->next_num++;
 800286c:	b2cb      	uxtb	r3, r1
      if (num == conn->next_num) {
 800286e:	d0e9      	beq.n	8002844 <lwiperf_tcp_recv+0xa4>
 8002870:	e7b4      	b.n	80027dc <lwiperf_tcp_recv+0x3c>
    packet_idx += q->len;
 8002872:	4488      	add	r8, r1
  for (q = p; q != NULL; q = q->next) {
 8002874:	f8de e000 	ldr.w	lr, [lr]
 8002878:	f1be 0f00 	cmp.w	lr, #0
 800287c:	d1d9      	bne.n	8002832 <lwiperf_tcp_recv+0x92>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 800287e:	892b      	ldrh	r3, [r5, #8]
 8002880:	4543      	cmp	r3, r8
 8002882:	d006      	beq.n	8002892 <lwiperf_tcp_recv+0xf2>
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <lwiperf_tcp_recv+0x1bc>)
 8002886:	f240 222b 	movw	r2, #555	; 0x22b
 800288a:	4938      	ldr	r1, [pc, #224]	; (800296c <lwiperf_tcp_recv+0x1cc>)
 800288c:	4835      	ldr	r0, [pc, #212]	; (8002964 <lwiperf_tcp_recv+0x1c4>)
 800288e:	f012 f9eb 	bl	8014c68 <iprintf>
  conn->bytes_transferred += packet_idx;
 8002892:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8002894:	4630      	mov	r0, r6
 8002896:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8002898:	4443      	add	r3, r8
 800289a:	6263      	str	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 800289c:	f00b f9cc 	bl	800dc38 <tcp_recved>
  pbuf_free(p);
 80028a0:	4628      	mov	r0, r5
 80028a2:	f00a fd59 	bl	800d358 <pbuf_free>
  return ERR_OK;
 80028a6:	e7a0      	b.n	80027ea <lwiperf_tcp_recv+0x4a>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80028a8:	4620      	mov	r0, r4
 80028aa:	2105      	movs	r1, #5
 80028ac:	f7ff fc44 	bl	8002138 <lwiperf_tcp_close>
}
 80028b0:	2000      	movs	r0, #0
 80028b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 80028b6:	4643      	mov	r3, r8
 80028b8:	2218      	movs	r2, #24
 80028ba:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80028be:	4628      	mov	r0, r5
 80028c0:	f00a ff42 	bl	800d748 <pbuf_copy_partial>
 80028c4:	2818      	cmp	r0, #24
 80028c6:	d133      	bne.n	8002930 <lwiperf_tcp_recv+0x190>
      conn->have_settings_buf = 1;
 80028c8:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 80028ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      conn->have_settings_buf = 1;
 80028cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <lwiperf_tcp_recv+0x1d0>)
 80028d2:	4393      	bics	r3, r2
 80028d4:	d034      	beq.n	8002940 <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 80028d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028d8:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 80028da:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 80028dc:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 80028de:	d896      	bhi.n	800280e <lwiperf_tcp_recv+0x6e>
      conn->time_started = sys_now();
 80028e0:	f005 f9ce 	bl	8007c80 <sys_now>
 80028e4:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 80028e6:	8929      	ldrh	r1, [r5, #8]
 80028e8:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 80028ea:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 80028ec:	f00b f9a4 	bl	800dc38 <tcp_recved>
      pbuf_free(p);
 80028f0:	4628      	mov	r0, r5
 80028f2:	f00a fd31 	bl	800d358 <pbuf_free>
}
 80028f6:	2000      	movs	r0, #0
 80028f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 80028fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028fe:	0618      	lsls	r0, r3, #24
 8002900:	d501      	bpl.n	8002906 <lwiperf_tcp_recv+0x166>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8002902:	01d9      	lsls	r1, r3, #7
 8002904:	d510      	bpl.n	8002928 <lwiperf_tcp_recv+0x188>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8002906:	4620      	mov	r0, r4
 8002908:	2100      	movs	r1, #0
 800290a:	f7ff fc15 	bl	8002138 <lwiperf_tcp_close>
}
 800290e:	2000      	movs	r0, #0
 8002910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8002914:	4641      	mov	r1, r8
 8002916:	2318      	movs	r3, #24
 8002918:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800291c:	4628      	mov	r0, r5
 800291e:	f00a ff8d 	bl	800d83c <pbuf_memcmp>
 8002922:	2800      	cmp	r0, #0
 8002924:	d0d7      	beq.n	80028d6 <lwiperf_tcp_recv+0x136>
 8002926:	e759      	b.n	80027dc <lwiperf_tcp_recv+0x3c>
        lwiperf_tx_start_passive(conn);
 8002928:	4620      	mov	r0, r4
 800292a:	f7ff ff0b 	bl	8002744 <lwiperf_tx_start_passive>
 800292e:	e7ea      	b.n	8002906 <lwiperf_tcp_recv+0x166>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8002930:	4620      	mov	r0, r4
 8002932:	2102      	movs	r1, #2
 8002934:	f7ff fc00 	bl	8002138 <lwiperf_tcp_close>
        pbuf_free(p);
 8002938:	4628      	mov	r0, r5
 800293a:	f00a fd0d 	bl	800d358 <pbuf_free>
        return ERR_OK;
 800293e:	e754      	b.n	80027ea <lwiperf_tcp_recv+0x4a>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff feff 	bl	8002744 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8002946:	2800      	cmp	r0, #0
 8002948:	d0c5      	beq.n	80028d6 <lwiperf_tcp_recv+0x136>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 800294a:	4620      	mov	r0, r4
 800294c:	2104      	movs	r1, #4
 800294e:	f7ff fbf3 	bl	8002138 <lwiperf_tcp_close>
            pbuf_free(p);
 8002952:	4628      	mov	r0, r5
 8002954:	f00a fd00 	bl	800d358 <pbuf_free>
            return ERR_OK;
 8002958:	e747      	b.n	80027ea <lwiperf_tcp_recv+0x4a>
 800295a:	bf00      	nop
 800295c:	08017700 	.word	0x08017700
 8002960:	080177f0 	.word	0x080177f0
 8002964:	08017728 	.word	0x08017728
 8002968:	08017828 	.word	0x08017828
 800296c:	08017844 	.word	0x08017844
 8002970:	01000080 	.word	0x01000080

08002974 <lwiperf_start_tcp_server_default>:
{
 8002974:	b530      	push	{r4, r5, lr}
 8002976:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8002978:	2400      	movs	r4, #0
{
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 800297e:	ad03      	add	r5, sp, #12
 8002980:	f241 3189 	movw	r1, #5001	; 0x1389
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8002986:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8002988:	e9cd 4500 	strd	r4, r5, [sp]
 800298c:	f7ff fdfa 	bl	8002584 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8002990:	b910      	cbnz	r0, 8002998 <lwiperf_start_tcp_server_default+0x24>
    return state;
 8002992:	9803      	ldr	r0, [sp, #12]
}
 8002994:	b005      	add	sp, #20
 8002996:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8002998:	4620      	mov	r0, r4
}
 800299a:	b005      	add	sp, #20
 800299c:	bd30      	pop	{r4, r5, pc}
 800299e:	bf00      	nop
 80029a0:	0801a600 	.word	0x0801a600
 80029a4:	00000000 	.word	0x00000000

080029a8 <StartEchoTask>:
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_TCP);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2010      	movs	r0, #16
{
 80029ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  conn = netconn_new(NETCONN_TCP);
 80029b0:	4611      	mov	r1, r2
{
 80029b2:	ed2d 8b04 	vpush	{d8-d9}
 80029b6:	b087      	sub	sp, #28
  conn = netconn_new(NETCONN_TCP);
 80029b8:	f008 f866 	bl	800aa88 <netconn_new_with_proto_and_callback>

  if (conn != NULL) {
 80029bc:	2800      	cmp	r0, #0
 80029be:	f000 80e4 	beq.w	8002b8a <StartEchoTask+0x1e2>
    err = netconn_bind(conn, NULL, 5002);
 80029c2:	f241 328a 	movw	r2, #5002	; 0x138a
 80029c6:	2100      	movs	r1, #0
 80029c8:	4604      	mov	r4, r0
 80029ca:	ee09 0a10 	vmov	s18, r0
 80029ce:	f008 f8df 	bl	800ab90 <netconn_bind>

    if (err == ERR_OK) {
 80029d2:	2800      	cmp	r0, #0
 80029d4:	f040 80d6 	bne.w	8002b84 <StartEchoTask+0x1dc>
      netconn_listen(conn);
 80029d8:	21ff      	movs	r1, #255	; 0xff
 80029da:	4620      	mov	r0, r4
 80029dc:	4f76      	ldr	r7, [pc, #472]	; (8002bb8 <StartEchoTask+0x210>)
 80029de:	4e77      	ldr	r6, [pc, #476]	; (8002bbc <StartEchoTask+0x214>)
          while (netconn_recv(newconn, &buf) == ERR_OK) {
            do {
              netbuf_data(buf, &data, &len);
              cJSON *jsonReceived = cJSON_Parse(data);
              if (jsonReceived != NULL) {
			  cJSON *isFetchingItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "isFetching");
 80029e0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8002bf0 <StartEchoTask+0x248>
					}

              cJSON *amplitudeAItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "amplitudeA");
              if (cJSON_IsNumber(amplitudeAItem)) {
            	  amplitudeA = amplitudeAItem->valuedouble;
            	  desiredPos = amplitudeAItem->valuedouble / 5.98364147543706e-9;
 80029e4:	ed9f 8b72 	vldr	d8, [pc, #456]	; 8002bb0 <StartEchoTask+0x208>
      netconn_listen(conn);
 80029e8:	f008 f8fe 	bl	800abe8 <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 80029ec:	a903      	add	r1, sp, #12
 80029ee:	ee19 0a10 	vmov	r0, s18
 80029f2:	f008 f91d 	bl	800ac30 <netconn_accept>
        if (accept_err == ERR_OK) {
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d1f8      	bne.n	80029ec <StartEchoTask+0x44>
          while (netconn_recv(newconn, &buf) == ERR_OK) {
 80029fa:	a904      	add	r1, sp, #16
 80029fc:	9803      	ldr	r0, [sp, #12]
 80029fe:	f008 f97f 	bl	800ad00 <netconn_recv>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	f040 80b7 	bne.w	8002b76 <StartEchoTask+0x1ce>
				 cJSON *isEngineEnabledItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "isEngineEnabled");
 8002a08:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8002bf4 <StartEchoTask+0x24c>
              netbuf_data(buf, &data, &len);
 8002a0c:	f10d 020a 	add.w	r2, sp, #10
 8002a10:	a905      	add	r1, sp, #20
 8002a12:	9804      	ldr	r0, [sp, #16]
 8002a14:	f009 fb78 	bl	800c108 <netbuf_data>
              cJSON *jsonReceived = cJSON_Parse(data);
 8002a18:	9805      	ldr	r0, [sp, #20]
 8002a1a:	f7fe fe9f 	bl	800175c <cJSON_Parse>
              if (jsonReceived != NULL) {
 8002a1e:	4604      	mov	r4, r0
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d03b      	beq.n	8002a9c <StartEchoTask+0xf4>
			  cJSON *isFetchingItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "isFetching");
 8002a24:	4659      	mov	r1, fp
 8002a26:	f7fe fead 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8002a2a:	4605      	mov	r5, r0
				if (cJSON_IsNumber(isFetchingItem)) {
 8002a2c:	f7fe ff32 	bl	8001894 <cJSON_IsNumber>
 8002a30:	b110      	cbz	r0, 8002a38 <StartEchoTask+0x90>
				  isFetching = isFetchingItem->valueint;
 8002a32:	696b      	ldr	r3, [r5, #20]
 8002a34:	4a62      	ldr	r2, [pc, #392]	; (8002bc0 <StartEchoTask+0x218>)
 8002a36:	6013      	str	r3, [r2, #0]
				 cJSON *isEngineEnabledItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "isEngineEnabled");
 8002a38:	4649      	mov	r1, r9
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7fe fea2 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8002a40:	4605      	mov	r5, r0
					if (cJSON_IsNumber(isEngineEnabledItem)) {
 8002a42:	f7fe ff27 	bl	8001894 <cJSON_IsNumber>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	f040 80a4 	bne.w	8002b94 <StartEchoTask+0x1ec>
              cJSON *amplitudeAItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "amplitudeA");
 8002a4c:	495d      	ldr	r1, [pc, #372]	; (8002bc4 <StartEchoTask+0x21c>)
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f7fe fe98 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8002a54:	4605      	mov	r5, r0
              if (cJSON_IsNumber(amplitudeAItem)) {
 8002a56:	f7fe ff1d 	bl	8001894 <cJSON_IsNumber>
 8002a5a:	b168      	cbz	r0, 8002a78 <StartEchoTask+0xd0>
            	  amplitudeA = amplitudeAItem->valuedouble;
 8002a5c:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <StartEchoTask+0x220>)
 8002a5e:	ed95 7b06 	vldr	d7, [r5, #24]
            	  desiredPos = amplitudeAItem->valuedouble / 5.98364147543706e-9;
 8002a62:	ee87 6b08 	vdiv.f64	d6, d7, d8
            	  amplitudeA = amplitudeAItem->valuedouble;
 8002a66:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002a6a:	ed83 7a00 	vstr	s14, [r3]
            	  desiredPos = amplitudeAItem->valuedouble / 5.98364147543706e-9;
 8002a6e:	4b57      	ldr	r3, [pc, #348]	; (8002bcc <StartEchoTask+0x224>)
 8002a70:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8002a74:	ed83 6a00 	vstr	s12, [r3]
              }

              cJSON *amplitudeBItem = cJSON_GetObjectItemCaseSensitive(jsonReceived, "amplitudeB");
 8002a78:	4955      	ldr	r1, [pc, #340]	; (8002bd0 <StartEchoTask+0x228>)
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7fe fe82 	bl	8001784 <cJSON_GetObjectItemCaseSensitive>
 8002a80:	4605      	mov	r5, r0
				if (cJSON_IsNumber(amplitudeBItem)) {
 8002a82:	f7fe ff07 	bl	8001894 <cJSON_IsNumber>
 8002a86:	b130      	cbz	r0, 8002a96 <StartEchoTask+0xee>
				amplitudeB = amplitudeBItem->valuedouble;
 8002a88:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <StartEchoTask+0x22c>)
 8002a8a:	ed95 7b06 	vldr	d7, [r5, #24]
 8002a8e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002a92:	ed83 7a00 	vstr	s14, [r3]
				}

              cJSON_Delete(jsonReceived);
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7fe fbe4 	bl	8001264 <cJSON_Delete>
              }

              cJSON *jsonObject = cJSON_CreateObject();
 8002a9c:	f7fe fee8 	bl	8001870 <cJSON_CreateObject>
 8002aa0:	4680      	mov	r8, r0
              cJSON *jsonArrayA = cJSON_CreateArray();
 8002aa2:	f7fe fed3 	bl	800184c <cJSON_CreateArray>
              for (int i = 0; i < dataA.position; i++) {
 8002aa6:	f8d7 3880 	ldr.w	r3, [r7, #2176]	; 0x880
              cJSON *jsonArrayA = cJSON_CreateArray();
 8002aaa:	4682      	mov	sl, r0
              for (int i = 0; i < dataA.position; i++) {
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	dd14      	ble.n	8002ada <StartEchoTask+0x132>
 8002ab0:	4d49      	ldr	r5, [pc, #292]	; (8002bd8 <StartEchoTask+0x230>)
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	3401      	adds	r4, #1
                     cJSON_AddItemToArray(jsonArrayA, cJSON_CreateNumber((long long int)(dataA.array[i])));
 8002ab6:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002aba:	f7fd fe35 	bl	8000728 <__aeabi_d2lz>
 8002abe:	f7fd fe05 	bl	80006cc <__aeabi_l2d>
 8002ac2:	ec41 0b10 	vmov	d0, r0, r1
 8002ac6:	f7fe fe7f 	bl	80017c8 <cJSON_CreateNumber>
 8002aca:	4601      	mov	r1, r0
 8002acc:	4650      	mov	r0, sl
 8002ace:	f7fe fe5d 	bl	800178c <cJSON_AddItemToArray>
              for (int i = 0; i < dataA.position; i++) {
 8002ad2:	f8d7 3880 	ldr.w	r3, [r7, #2176]	; 0x880
 8002ad6:	42a3      	cmp	r3, r4
 8002ad8:	dcec      	bgt.n	8002ab4 <StartEchoTask+0x10c>
	data->position = 0;
 8002ada:	2400      	movs	r4, #0
              }
              cJSON_AddItemToObject(jsonObject, "dataA", jsonArrayA);
 8002adc:	4652      	mov	r2, sl
 8002ade:	493f      	ldr	r1, [pc, #252]	; (8002bdc <StartEchoTask+0x234>)
 8002ae0:	4640      	mov	r0, r8
 8002ae2:	f7fe fe6b 	bl	80017bc <cJSON_AddItemToObject>
	data->position = 0;
 8002ae6:	f8c7 4880 	str.w	r4, [r7, #2176]	; 0x880
              clear(&dataA);

              cJSON *jsonArrayB = cJSON_CreateArray();
 8002aea:	f7fe feaf 	bl	800184c <cJSON_CreateArray>
              for (int i = 0; i < dataB.position; i++) {
 8002aee:	f8d6 3880 	ldr.w	r3, [r6, #2176]	; 0x880
              cJSON *jsonArrayB = cJSON_CreateArray();
 8002af2:	4682      	mov	sl, r0
              for (int i = 0; i < dataB.position; i++) {
 8002af4:	42a3      	cmp	r3, r4
 8002af6:	dd13      	ble.n	8002b20 <StartEchoTask+0x178>
 8002af8:	4d39      	ldr	r5, [pc, #228]	; (8002be0 <StartEchoTask+0x238>)
 8002afa:	3401      	adds	r4, #1
                      cJSON_AddItemToArray(jsonArrayB, cJSON_CreateNumber((long long int)(dataB.array[i])));
 8002afc:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002b00:	f7fd fe12 	bl	8000728 <__aeabi_d2lz>
 8002b04:	f7fd fde2 	bl	80006cc <__aeabi_l2d>
 8002b08:	ec41 0b10 	vmov	d0, r0, r1
 8002b0c:	f7fe fe5c 	bl	80017c8 <cJSON_CreateNumber>
 8002b10:	4601      	mov	r1, r0
 8002b12:	4650      	mov	r0, sl
 8002b14:	f7fe fe3a 	bl	800178c <cJSON_AddItemToArray>
              for (int i = 0; i < dataB.position; i++) {
 8002b18:	f8d6 3880 	ldr.w	r3, [r6, #2176]	; 0x880
 8002b1c:	42a3      	cmp	r3, r4
 8002b1e:	dcec      	bgt.n	8002afa <StartEchoTask+0x152>
              }
              cJSON_AddItemToObject(jsonObject, "dataB", jsonArrayB);
 8002b20:	4652      	mov	r2, sl
 8002b22:	4930      	ldr	r1, [pc, #192]	; (8002be4 <StartEchoTask+0x23c>)
	data->position = 0;
 8002b24:	2500      	movs	r5, #0
              cJSON_AddItemToObject(jsonObject, "dataB", jsonArrayB);
 8002b26:	4640      	mov	r0, r8
 8002b28:	f7fe fe48 	bl	80017bc <cJSON_AddItemToObject>
              clear(&dataB);

              char *jsonStringifiedSend = cJSON_Print(jsonObject);
 8002b2c:	4640      	mov	r0, r8
	data->position = 0;
 8002b2e:	f8c6 5880 	str.w	r5, [r6, #2176]	; 0x880
              char *jsonStringifiedSend = cJSON_Print(jsonObject);
 8002b32:	f7fe fe23 	bl	800177c <cJSON_Print>
 8002b36:	4604      	mov	r4, r0
              netconn_write(newconn, jsonStringifiedSend, strlen(jsonStringifiedSend), NETCONN_COPY);
 8002b38:	f7fd fbdc 	bl	80002f4 <strlen>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4621      	mov	r1, r4
 8002b42:	9803      	ldr	r0, [sp, #12]
 8002b44:	9500      	str	r5, [sp, #0]
 8002b46:	f008 f9bb 	bl	800aec0 <netconn_write_partly>
              cJSON_Delete(jsonObject);
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	f7fe fb8a 	bl	8001264 <cJSON_Delete>
			  free(jsonStringifiedSend);
 8002b50:	4620      	mov	r0, r4
 8002b52:	f011 f83f 	bl	8013bd4 <free>
            }
            while (netbuf_next(buf) >= 0);
 8002b56:	9804      	ldr	r0, [sp, #16]
 8002b58:	f009 fb0c 	bl	800c174 <netbuf_next>
 8002b5c:	42a8      	cmp	r0, r5
 8002b5e:	f6bf af55 	bge.w	8002a0c <StartEchoTask+0x64>
            netbuf_delete(buf);
 8002b62:	9804      	ldr	r0, [sp, #16]
 8002b64:	f009 fabe 	bl	800c0e4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) {
 8002b68:	a904      	add	r1, sp, #16
 8002b6a:	9803      	ldr	r0, [sp, #12]
 8002b6c:	f008 f8c8 	bl	800ad00 <netconn_recv>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f43f af49 	beq.w	8002a08 <StartEchoTask+0x60>
          }

          netconn_close(newconn);
 8002b76:	9803      	ldr	r0, [sp, #12]
 8002b78:	f008 f9b0 	bl	800aedc <netconn_close>
          netconn_delete(newconn);
 8002b7c:	9803      	ldr	r0, [sp, #12]
 8002b7e:	f007 ffe3 	bl	800ab48 <netconn_delete>
 8002b82:	e733      	b.n	80029ec <StartEchoTask+0x44>
        }
      }
    }
    else {
      netconn_delete(newconn);
 8002b84:	9803      	ldr	r0, [sp, #12]
 8002b86:	f007 ffdf 	bl	800ab48 <netconn_delete>
    }
  }
}
 8002b8a:	b007      	add	sp, #28
 8002b8c:	ecbd 8b04 	vpop	{d8-d9}
 8002b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					  isEngineEnabled = isEngineEnabledItem->valueint;
 8002b94:	696a      	ldr	r2, [r5, #20]
					  HAL_GPIO_WritePin(S_EN_GPIO_Port, S_EN_Pin, isEngineEnabled == 1);
 8002b96:	2104      	movs	r1, #4
					  isEngineEnabled = isEngineEnabledItem->valueint;
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <StartEchoTask+0x240>)
					  HAL_GPIO_WritePin(S_EN_GPIO_Port, S_EN_Pin, isEngineEnabled == 1);
 8002b9a:	4814      	ldr	r0, [pc, #80]	; (8002bec <StartEchoTask+0x244>)
					  isEngineEnabled = isEngineEnabledItem->valueint;
 8002b9c:	601a      	str	r2, [r3, #0]
					  HAL_GPIO_WritePin(S_EN_GPIO_Port, S_EN_Pin, isEngineEnabled == 1);
 8002b9e:	f1a2 0201 	sub.w	r2, r2, #1
 8002ba2:	fab2 f282 	clz	r2, r2
 8002ba6:	0952      	lsrs	r2, r2, #5
 8002ba8:	f002 fb4a 	bl	8005240 <HAL_GPIO_WritePin>
 8002bac:	e74e      	b.n	8002a4c <StartEchoTask+0xa4>
 8002bae:	bf00      	nop
 8002bb0:	584e38a5 	.word	0x584e38a5
 8002bb4:	3e39b315 	.word	0x3e39b315
 8002bb8:	24013368 	.word	0x24013368
 8002bbc:	24026bf0 	.word	0x24026bf0
 8002bc0:	240275b4 	.word	0x240275b4
 8002bc4:	08017eb0 	.word	0x08017eb0
 8002bc8:	2400000c 	.word	0x2400000c
 8002bcc:	24000014 	.word	0x24000014
 8002bd0:	08017ebc 	.word	0x08017ebc
 8002bd4:	24000010 	.word	0x24000010
 8002bd8:	24000368 	.word	0x24000368
 8002bdc:	08017ec8 	.word	0x08017ec8
 8002be0:	24013bf0 	.word	0x24013bf0
 8002be4:	08017ed0 	.word	0x08017ed0
 8002be8:	240275b0 	.word	0x240275b0
 8002bec:	58020c00 	.word	0x58020c00
 8002bf0:	08017e94 	.word	0x08017e94
 8002bf4:	08017ea0 	.word	0x08017ea0

08002bf8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002bf8:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 8002bfa:	f004 fe0b 	bl	8007814 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <StartDefaultTask+0x30>)
 8002c00:	2100      	movs	r1, #0
 8002c02:	480a      	ldr	r0, [pc, #40]	; (8002c2c <StartDefaultTask+0x34>)
 8002c04:	f005 fa3a 	bl	800807c <osThreadNew>
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <StartDefaultTask+0x38>)
//		  push(&dataB, cosValue);
//	  }
//
//	  testValue += 0.1;
//      osDelay(osKernelGetTickFreq() / 10);
	  osDelay(10000000);
 8002c0a:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <StartDefaultTask+0x3c>)
  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 8002c0c:	6018      	str	r0, [r3, #0]
  LOCK_TCPIP_CORE();
 8002c0e:	f005 f933 	bl	8007e78 <sys_lock_tcpip_core>
  lwiperf_start_tcp_server_default(NULL, NULL);
 8002c12:	2100      	movs	r1, #0
 8002c14:	4608      	mov	r0, r1
 8002c16:	f7ff fead 	bl	8002974 <lwiperf_start_tcp_server_default>
  UNLOCK_TCPIP_CORE();
 8002c1a:	f005 f9ab 	bl	8007f74 <sys_unlock_tcpip_core>
	  osDelay(10000000);
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f005 fa7a 	bl	8008118 <osDelay>
  for(;;)
 8002c24:	e7fb      	b.n	8002c1e <StartDefaultTask+0x26>
 8002c26:	bf00      	nop
 8002c28:	08017f14 	.word	0x08017f14
 8002c2c:	080029a9 	.word	0x080029a9
 8002c30:	24027488 	.word	0x24027488
 8002c34:	00989680 	.word	0x00989680

08002c38 <push>:
	if (data->position < ARRAY_SIZE - 10) {
 8002c38:	f500 3298 	add.w	r2, r0, #77824	; 0x13000
 8002c3c:	f242 7105 	movw	r1, #9989	; 0x2705
 8002c40:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
 8002c44:	428b      	cmp	r3, r1
 8002c46:	dc06      	bgt.n	8002c56 <push+0x1e>
		data->array[data->position] = value;
 8002c48:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
		data->position++;
 8002c4c:	3301      	adds	r3, #1
		data->array[data->position] = value;
 8002c4e:	ed80 0b00 	vstr	d0, [r0]
		data->position++;
 8002c52:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
}
 8002c56:	4770      	bx	lr

08002c58 <SystemClock_Config>:
{
 8002c58:	b530      	push	{r4, r5, lr}
 8002c5a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c5c:	224c      	movs	r2, #76	; 0x4c
 8002c5e:	2100      	movs	r1, #0
 8002c60:	a809      	add	r0, sp, #36	; 0x24
 8002c62:	f012 f8ce 	bl	8014e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c66:	2220      	movs	r2, #32
 8002c68:	2100      	movs	r1, #0
 8002c6a:	a801      	add	r0, sp, #4
 8002c6c:	f012 f8c9 	bl	8014e02 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002c70:	2002      	movs	r0, #2
 8002c72:	f002 fb03 	bl	800527c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <SystemClock_Config+0xb4>)
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <SystemClock_Config+0xb8>)
 8002c7c:	9100      	str	r1, [sp, #0]
 8002c7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c80:	f021 0101 	bic.w	r1, r1, #1
 8002c84:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6993      	ldr	r3, [r2, #24]
 8002c90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c98:	6193      	str	r3, [r2, #24]
 8002c9a:	6993      	ldr	r3, [r2, #24]
 8002c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ca4:	6993      	ldr	r3, [r2, #24]
 8002ca6:	049b      	lsls	r3, r3, #18
 8002ca8:	d5fc      	bpl.n	8002ca4 <SystemClock_Config+0x4c>
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002caa:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cac:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cae:	2402      	movs	r4, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb0:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002cb2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb4:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cb6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb8:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cba:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002cbc:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cbe:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002cc0:	221e      	movs	r2, #30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002cc2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002cc4:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002cc6:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002cc8:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002cca:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ccc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cce:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002cd0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cd2:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002cd4:	9217      	str	r2, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cd6:	f002 fb79 	bl	80053cc <HAL_RCC_OscConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	b108      	cbz	r0, 8002ce2 <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cde:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce2:	2203      	movs	r2, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce4:	253f      	movs	r5, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002cea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cec:	e9cd 5201 	strd	r5, r2, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002cf0:	2208      	movs	r2, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002cf2:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002cf6:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002cf8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cfc:	f002 fe5c 	bl	80059b8 <HAL_RCC_ClockConfig>
 8002d00:	b108      	cbz	r0, 8002d06 <SystemClock_Config+0xae>
 8002d02:	b672      	cpsid	i
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <SystemClock_Config+0xac>
}
 8002d06:	b01d      	add	sp, #116	; 0x74
 8002d08:	bd30      	pop	{r4, r5, pc}
 8002d0a:	bf00      	nop
 8002d0c:	58000400 	.word	0x58000400
 8002d10:	58024800 	.word	0x58024800

08002d14 <main>:
{
 8002d14:	b580      	push	{r7, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002d16:	2400      	movs	r4, #0
{
 8002d18:	b092      	sub	sp, #72	; 0x48
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002d1a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002d1c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8002d20:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_MPU_Disable();
 8002d24:	f001 f87a 	bl	8003e1c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002d28:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002d2c:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d30:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002d32:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002d36:	9310      	str	r3, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002d38:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d3c:	f001 f88c 	bl	8003e58 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002d40:	4ac0      	ldr	r2, [pc, #768]	; (8003044 <main+0x330>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002d42:	4bc1      	ldr	r3, [pc, #772]	; (8003048 <main+0x334>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d44:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002d46:	920e      	str	r2, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002d48:	930f      	str	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002d4a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002d4e:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d52:	f001 f881 	bl	8003e58 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002d56:	4bbd      	ldr	r3, [pc, #756]	; (800304c <main+0x338>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002d58:	2202      	movs	r2, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d5a:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002d5c:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002d60:	930e      	str	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002d62:	2308      	movs	r3, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002d64:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8002d68:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002d6c:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002d70:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d74:	f001 f870 	bl	8003e58 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d78:	2004      	movs	r0, #4
 8002d7a:	f001 f85d 	bl	8003e38 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002d7e:	4ab4      	ldr	r2, [pc, #720]	; (8003050 <main+0x33c>)
 8002d80:	6953      	ldr	r3, [r2, #20]
 8002d82:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8002d86:	d111      	bne.n	8002dac <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d8c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002d90:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002d9c:	6953      	ldr	r3, [r2, #20]
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002da8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002dac:	48a8      	ldr	r0, [pc, #672]	; (8003050 <main+0x33c>)
 8002dae:	6943      	ldr	r3, [r0, #20]
 8002db0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8002db4:	d124      	bne.n	8002e00 <main+0xec>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002db6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002dba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002dbe:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002dc2:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002dc6:	f3c3 344e 	ubfx	r4, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002dca:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
 8002dce:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002dd0:	ea04 010e 	and.w	r1, r4, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002dd4:	4663      	mov	r3, ip
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002dd6:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002dde:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8002de2:	d1f8      	bne.n	8002dd6 <main+0xc2>
    } while(sets-- != 0U);
 8002de4:	3c20      	subs	r4, #32
 8002de6:	f114 0f20 	cmn.w	r4, #32
 8002dea:	d1f1      	bne.n	8002dd0 <main+0xbc>
 8002dec:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002df0:	6943      	ldr	r3, [r0, #20]
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df6:	6143      	str	r3, [r0, #20]
 8002df8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dfc:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	2400      	movs	r4, #0
  HAL_Init();
 8002e02:	f000 ff5b 	bl	8003cbc <HAL_Init>
  SystemClock_Config();
 8002e06:	f7ff ff27 	bl	8002c58 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0a:	4b92      	ldr	r3, [pc, #584]	; (8003054 <main+0x340>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002e0e:	f244 0101 	movw	r1, #16385	; 0x4001
 8002e12:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e14:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e18:	2707      	movs	r7, #7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8002e1e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e26:	f040 0004 	orr.w	r0, r0, #4
 8002e2a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002e2e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e32:	f000 0004 	and.w	r0, r0, #4
 8002e36:	9003      	str	r0, [sp, #12]
 8002e38:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e3a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002e42:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002e46:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e4a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002e4e:	9004      	str	r0, [sp, #16]
 8002e50:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e52:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e56:	f040 0001 	orr.w	r0, r0, #1
 8002e5a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002e5e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e62:	f000 0001 	and.w	r0, r0, #1
 8002e66:	9005      	str	r0, [sp, #20]
 8002e68:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e6e:	f040 0002 	orr.w	r0, r0, #2
 8002e72:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002e76:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e7a:	f000 0002 	and.w	r0, r0, #2
 8002e7e:	9006      	str	r0, [sp, #24]
 8002e80:	9806      	ldr	r0, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e82:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e86:	f040 0008 	orr.w	r0, r0, #8
 8002e8a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002e8e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e92:	f000 0008 	and.w	r0, r0, #8
 8002e96:	9007      	str	r0, [sp, #28]
 8002e98:	9807      	ldr	r0, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e9a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002e9e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002ea2:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002ea6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002eaa:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8002eae:	9008      	str	r0, [sp, #32]
 8002eb0:	9808      	ldr	r0, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eb2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8002eb6:	f040 0010 	orr.w	r0, r0, #16
 8002eba:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8002ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002ec2:	4865      	ldr	r0, [pc, #404]	; (8003058 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002ecc:	f002 f9b8 	bl	8005240 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|S_EN_Pin, GPIO_PIN_RESET);
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	f240 4104 	movw	r1, #1028	; 0x404
 8002ed6:	4861      	ldr	r0, [pc, #388]	; (800305c <main+0x348>)
 8002ed8:	f002 f9b2 	bl	8005240 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, S_DIR_Pin|S_CLK_Pin, GPIO_PIN_RESET);
 8002edc:	4622      	mov	r2, r4
 8002ede:	210c      	movs	r1, #12
 8002ee0:	485f      	ldr	r0, [pc, #380]	; (8003060 <main+0x34c>)
 8002ee2:	f002 f9ad 	bl	8005240 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	2102      	movs	r1, #2
 8002eea:	485e      	ldr	r0, [pc, #376]	; (8003064 <main+0x350>)
 8002eec:	f002 f9a8 	bl	8005240 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ef4:	a90d      	add	r1, sp, #52	; 0x34
 8002ef6:	485c      	ldr	r0, [pc, #368]	; (8003068 <main+0x354>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002efa:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f002 f86d 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002f02:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	a90d      	add	r1, sp, #52	; 0x34
 8002f08:	4853      	ldr	r0, [pc, #332]	; (8003058 <main+0x344>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0e:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f12:	f002 f863 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f16:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f1a:	a90d      	add	r1, sp, #52	; 0x34
 8002f1c:	484f      	ldr	r0, [pc, #316]	; (800305c <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f1e:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f28:	f002 f858 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|S_EN_Pin;
 8002f2c:	f240 4304 	movw	r3, #1028	; 0x404
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f30:	a90d      	add	r1, sp, #52	; 0x34
 8002f32:	484a      	ldr	r0, [pc, #296]	; (800305c <main+0x348>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|S_EN_Pin;
 8002f34:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3c:	f002 f84e 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S_DIR_Pin|S_CLK_Pin;
 8002f40:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f42:	a90d      	add	r1, sp, #52	; 0x34
 8002f44:	4846      	ldr	r0, [pc, #280]	; (8003060 <main+0x34c>)
  GPIO_InitStruct.Pin = S_DIR_Pin|S_CLK_Pin;
 8002f46:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f4e:	f002 f845 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f56:	2180      	movs	r1, #128	; 0x80
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002f58:	4841      	ldr	r0, [pc, #260]	; (8003060 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f5c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002f60:	a90d      	add	r1, sp, #52	; 0x34
 8002f62:	f002 f83b 	bl	8004fdc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002f66:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	a90d      	add	r1, sp, #52	; 0x34
 8002f6c:	483f      	ldr	r0, [pc, #252]	; (800306c <main+0x358>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002f6e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f70:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f74:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	e9cd 640e 	strd	r6, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f002 f82f 	bl	8004fdc <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f7e:	a90d      	add	r1, sp, #52	; 0x34
 8002f80:	4838      	ldr	r0, [pc, #224]	; (8003064 <main+0x350>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f82:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	f002 f827 	bl	8004fdc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002f8e:	4622      	mov	r2, r4
 8002f90:	2105      	movs	r1, #5
 8002f92:	2017      	movs	r0, #23
 8002f94:	f000 fef6 	bl	8003d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f98:	2017      	movs	r0, #23
 8002f9a:	f000 ff31 	bl	8003e00 <HAL_NVIC_EnableIRQ>
  hspi3.Instance = SPI3;
 8002f9e:	4834      	ldr	r0, [pc, #208]	; (8003070 <main+0x35c>)
 8002fa0:	4a34      	ldr	r2, [pc, #208]	; (8003074 <main+0x360>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fa6:	60c7      	str	r7, [r0, #12]
  hspi3.Instance = SPI3;
 8002fa8:	6002      	str	r2, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002faa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fae:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002fb0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fb4:	6042      	str	r2, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002fb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi3.Init.CRCPolynomial = 0x0;
 8002fba:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002fbc:	6082      	str	r2, [r0, #8]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002fbe:	e9c0 3407 	strd	r3, r4, [r0, #28]
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8002fc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fc6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002fca:	e9c0 3415 	strd	r3, r4, [r0, #84]	; 0x54
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fce:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002fd2:	e9c0 440d 	strd	r4, r4, [r0, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002fd6:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002fda:	e9c0 4411 	strd	r4, r4, [r0, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002fde:	e9c0 4413 	strd	r4, r4, [r0, #76]	; 0x4c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fe2:	f003 fdb5 	bl	8006b50 <HAL_SPI_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	b108      	cbz	r0, 8002fee <main+0x2da>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fea:	b672      	cpsid	i
  while (1)
 8002fec:	e7fe      	b.n	8002fec <main+0x2d8>
  htim5.Instance = TIM5;
 8002fee:	4c22      	ldr	r4, [pc, #136]	; (8003078 <main+0x364>)
  htim5.Init.Prescaler = 120-1;
 8002ff0:	2277      	movs	r2, #119	; 0x77
  htim5.Instance = TIM5;
 8002ff2:	4922      	ldr	r1, [pc, #136]	; (800307c <main+0x368>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff4:	900a      	str	r0, [sp, #40]	; 0x28
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	60a3      	str	r3, [r4, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff8:	61a3      	str	r3, [r4, #24]
  htim5.Init.Prescaler = 120-1;
 8002ffa:	e9c4 1200 	strd	r1, r2, [r4]
  htim5.Init.Period = 100-1;
 8002ffe:	2263      	movs	r2, #99	; 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003000:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
 8003004:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003008:	4620      	mov	r0, r4
  htim5.Init.Period = 100-1;
 800300a:	e9c4 2303 	strd	r2, r3, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003012:	f004 fb6b 	bl	80076ec <HAL_TIM_Base_Init>
 8003016:	b108      	cbz	r0, 800301c <main+0x308>
 8003018:	b672      	cpsid	i
  while (1)
 800301a:	e7fe      	b.n	800301a <main+0x306>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003020:	a90d      	add	r1, sp, #52	; 0x34
 8003022:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003024:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003026:	f004 f949 	bl	80072bc <HAL_TIM_ConfigClockSource>
 800302a:	b108      	cbz	r0, 8003030 <main+0x31c>
 800302c:	b672      	cpsid	i
  while (1)
 800302e:	e7fe      	b.n	800302e <main+0x31a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003030:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003032:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003034:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003036:	4620      	mov	r0, r4
 8003038:	f004 fb8a 	bl	8007750 <HAL_TIMEx_MasterConfigSynchronization>
 800303c:	4605      	mov	r5, r0
 800303e:	b1f8      	cbz	r0, 8003080 <main+0x36c>
 8003040:	b672      	cpsid	i
  while (1)
 8003042:	e7fe      	b.n	8003042 <main+0x32e>
 8003044:	30020000 	.word	0x30020000
 8003048:	03010010 	.word	0x03010010
 800304c:	30040000 	.word	0x30040000
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	58024400 	.word	0x58024400
 8003058:	58020400 	.word	0x58020400
 800305c:	58020c00 	.word	0x58020c00
 8003060:	58021800 	.word	0x58021800
 8003064:	58021000 	.word	0x58021000
 8003068:	58020800 	.word	0x58020800
 800306c:	58020000 	.word	0x58020000
 8003070:	2402748c 	.word	0x2402748c
 8003074:	40003c00 	.word	0x40003c00
 8003078:	24027560 	.word	0x24027560
 800307c:	40000c00 	.word	0x40000c00
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003080:	4602      	mov	r2, r0
 8003082:	4601      	mov	r1, r0
 8003084:	2032      	movs	r0, #50	; 0x32
 8003086:	f000 fe7d 	bl	8003d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800308a:	2032      	movs	r0, #50	; 0x32
 800308c:	f000 feb8 	bl	8003e00 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim5);
 8003090:	4620      	mov	r0, r4
 8003092:	f004 f8b7 	bl	8007204 <HAL_TIM_Base_Start_IT>
  htim4.Instance = TIM4;
 8003096:	4c23      	ldr	r4, [pc, #140]	; (8003124 <main+0x410>)
  htim4.Init.Prescaler = 60-1;
 8003098:	233b      	movs	r3, #59	; 0x3b
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <main+0x414>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800309c:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309e:	950c      	str	r5, [sp, #48]	; 0x30
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a0:	60a5      	str	r5, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a4:	61a5      	str	r5, [r4, #24]
  htim4.Init.Prescaler = 60-1;
 80030a6:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 500-1;
 80030aa:	f240 13f3 	movw	r3, #499	; 0x1f3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ae:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
 80030b2:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b6:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  htim4.Init.Period = 500-1;
 80030ba:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030bc:	f004 fb16 	bl	80076ec <HAL_TIM_Base_Init>
 80030c0:	b108      	cbz	r0, 80030c6 <main+0x3b2>
 80030c2:	b672      	cpsid	i
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <main+0x3b0>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030c6:	a90d      	add	r1, sp, #52	; 0x34
 80030c8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ca:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030cc:	f004 f8f6 	bl	80072bc <HAL_TIM_ConfigClockSource>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b108      	cbz	r0, 80030d8 <main+0x3c4>
 80030d4:	b672      	cpsid	i
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <main+0x3c2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030d8:	a90a      	add	r1, sp, #40	; 0x28
 80030da:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030dc:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030e0:	f004 fb36 	bl	8007750 <HAL_TIMEx_MasterConfigSynchronization>
 80030e4:	4601      	mov	r1, r0
 80030e6:	b108      	cbz	r0, 80030ec <main+0x3d8>
 80030e8:	b672      	cpsid	i
  while (1)
 80030ea:	e7fe      	b.n	80030ea <main+0x3d6>
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030ec:	4602      	mov	r2, r0
 80030ee:	9001      	str	r0, [sp, #4]
 80030f0:	201e      	movs	r0, #30
 80030f2:	f000 fe47 	bl	8003d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030f6:	201e      	movs	r0, #30
 80030f8:	f000 fe82 	bl	8003e00 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);
 80030fc:	4620      	mov	r0, r4
 80030fe:	f004 f881 	bl	8007204 <HAL_TIM_Base_Start_IT>
  osKernelInitialize();
 8003102:	f004 ff87 	bl	8008014 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003106:	9901      	ldr	r1, [sp, #4]
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <main+0x418>)
 800310a:	4809      	ldr	r0, [pc, #36]	; (8003130 <main+0x41c>)
 800310c:	f004 ffb6 	bl	800807c <osThreadNew>
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <main+0x420>)
 8003112:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003114:	f004 ff90 	bl	8008038 <osKernelStart>
  dataEnc.all = 0;
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <main+0x424>)
 800311a:	2000      	movs	r0, #0
 800311c:	2100      	movs	r1, #0
 800311e:	e9c3 0100 	strd	r0, r1, [r3]
  while (1)
 8003122:	e7fe      	b.n	8003122 <main+0x40e>
 8003124:	24027514 	.word	0x24027514
 8003128:	40000800 	.word	0x40000800
 800312c:	08017ef0 	.word	0x08017ef0
 8003130:	08002bf9 	.word	0x08002bf9
 8003134:	24027480 	.word	0x24027480
 8003138:	24027478 	.word	0x24027478

0800313c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 800313c:	4b03      	ldr	r3, [pc, #12]	; (800314c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800313e:	6802      	ldr	r2, [r0, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d000      	beq.n	8003146 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8003144:	4770      	bx	lr
    HAL_IncTick();
 8003146:	f000 bde9 	b.w	8003d1c <HAL_IncTick>
 800314a:	bf00      	nop
 800314c:	40001000 	.word	0x40001000

08003150 <Error_Handler>:
 8003150:	b672      	cpsid	i
  while (1)
 8003152:	e7fe      	b.n	8003152 <Error_Handler+0x2>

08003154 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	210f      	movs	r1, #15
 800315a:	f06f 0001 	mvn.w	r0, #1
{
 800315e:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003160:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 8003164:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	f044 0402 	orr.w	r4, r4, #2
 800316a:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 800316e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800317a:	f000 fe03 	bl	8003d84 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003180:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003186:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003188:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 800318a:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 800318c:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 800318e:	b002      	add	sp, #8
 8003190:	bd10      	pop	{r4, pc}
 8003192:	bf00      	nop
 8003194:	58024400 	.word	0x58024400
 8003198:	e000ed00 	.word	0xe000ed00
 800319c:	05fa0000 	.word	0x05fa0000

080031a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031a0:	b530      	push	{r4, r5, lr}
 80031a2:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	2100      	movs	r1, #0
{
 80031a6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a8:	22bc      	movs	r2, #188	; 0xbc
 80031aa:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	9106      	str	r1, [sp, #24]
 80031ae:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80031b2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031b6:	f011 fe24 	bl	8014e02 <memset>
  if(hspi->Instance==SPI3)
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_SPI_MspInit+0xa0>)
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031c2:	b037      	add	sp, #220	; 0xdc
 80031c4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80031c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ca:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80031cc:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ce:	f002 fe8d 	bl	8005eec <HAL_RCCEx_PeriphCLKConfig>
 80031d2:	bb88      	cbnz	r0, 8003238 <HAL_SPI_MspInit+0x98>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031d6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2502      	movs	r5, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031de:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e2:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031e4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80031e8:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
 80031ec:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 80031f0:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 80031f4:	9000      	str	r0, [sp, #0]
 80031f6:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 80031fc:	f040 0004 	orr.w	r0, r0, #4
 8003200:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8003204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003208:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320c:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003214:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003216:	2306      	movs	r3, #6
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800321a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	e9cd 4204 	strd	r4, r2, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003220:	f001 fedc 	bl	8004fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003224:	4622      	mov	r2, r4
 8003226:	4621      	mov	r1, r4
 8003228:	2033      	movs	r0, #51	; 0x33
 800322a:	f000 fdab 	bl	8003d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800322e:	2033      	movs	r0, #51	; 0x33
 8003230:	f000 fde6 	bl	8003e00 <HAL_NVIC_EnableIRQ>
}
 8003234:	b037      	add	sp, #220	; 0xdc
 8003236:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003238:	f7ff ff8a 	bl	8003150 <Error_Handler>
 800323c:	e7ca      	b.n	80031d4 <HAL_SPI_MspInit+0x34>
 800323e:	bf00      	nop
 8003240:	40003c00 	.word	0x40003c00
 8003244:	58024400 	.word	0x58024400
 8003248:	58020800 	.word	0x58020800

0800324c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_TIM_Base_MspInit+0x78>)
 800324e:	6803      	ldr	r3, [r0, #0]
 8003250:	4293      	cmp	r3, r2
{
 8003252:	b510      	push	{r4, lr}
 8003254:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 8003256:	d004      	beq.n	8003262 <HAL_TIM_Base_MspInit+0x16>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_TIM_Base_MspInit+0x7c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d019      	beq.n	8003292 <HAL_TIM_Base_MspInit+0x46>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800325e:	b002      	add	sp, #8
 8003260:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003268:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800326c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800326e:	f044 0404 	orr.w	r4, r4, #4
 8003272:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8003276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003282:	f000 fd7f 	bl	8003d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003286:	201e      	movs	r0, #30
}
 8003288:	b002      	add	sp, #8
 800328a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800328e:	f000 bdb7 	b.w	8003e00 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_TIM_Base_MspInit+0x80>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003294:	2200      	movs	r2, #0
 8003296:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003298:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800329c:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 800329e:	f044 0408 	orr.w	r4, r4, #8
 80032a2:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 80032a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80032b2:	f000 fd67 	bl	8003d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032b6:	2032      	movs	r0, #50	; 0x32
}
 80032b8:	b002      	add	sp, #8
 80032ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032be:	f000 bd9f 	b.w	8003e00 <HAL_NVIC_EnableIRQ>
 80032c2:	bf00      	nop
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	58024400 	.word	0x58024400

080032d0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d0:	280f      	cmp	r0, #15
 80032d2:	d901      	bls.n	80032d8 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80032d4:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80032d6:	4770      	bx	lr
{
 80032d8:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80032da:	4601      	mov	r1, r0
{
 80032dc:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80032de:	2200      	movs	r2, #0
 80032e0:	4604      	mov	r4, r0
 80032e2:	2036      	movs	r0, #54	; 0x36
 80032e4:	f000 fd4e 	bl	8003d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032e8:	2036      	movs	r0, #54	; 0x36
 80032ea:	f000 fd89 	bl	8003e00 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032f2:	4669      	mov	r1, sp
 80032f4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80032f6:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032f8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80032fc:	f042 0210 	orr.w	r2, r2, #16
 8003300:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003304:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003310:	f002 fccc 	bl	8005cac <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003314:	9b07      	ldr	r3, [sp, #28]
 8003316:	b9bb      	cbnz	r3, 8003348 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003318:	f002 fcb6 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 800331e:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 8003320:	4c10      	ldr	r4, [pc, #64]	; (8003364 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003322:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 8003326:	4d10      	ldr	r5, [pc, #64]	; (8003368 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003328:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800332c:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800332e:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8003330:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003332:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003334:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003336:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800333a:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800333c:	f004 f9d6 	bl	80076ec <HAL_TIM_Base_Init>
 8003340:	b130      	cbz	r0, 8003350 <HAL_InitTick+0x80>
    return HAL_ERROR;
 8003342:	2001      	movs	r0, #1
}
 8003344:	b00b      	add	sp, #44	; 0x2c
 8003346:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003348:	f002 fc9e 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 800334c:	0040      	lsls	r0, r0, #1
 800334e:	e7e5      	b.n	800331c <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 8003350:	4620      	mov	r0, r4
 8003352:	f003 ff57 	bl	8007204 <HAL_TIM_Base_Start_IT>
 8003356:	e7f5      	b.n	8003344 <HAL_InitTick+0x74>
 8003358:	58024400 	.word	0x58024400
 800335c:	24000064 	.word	0x24000064
 8003360:	431bde83 	.word	0x431bde83
 8003364:	240275d0 	.word	0x240275d0
 8003368:	40001000 	.word	0x40001000

0800336c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800336c:	e7fe      	b.n	800336c <NMI_Handler>
 800336e:	bf00      	nop

08003370 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <HardFault_Handler>
 8003372:	bf00      	nop

08003374 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <MemManage_Handler>
 8003376:	bf00      	nop

08003378 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <BusFault_Handler>
 800337a:	bf00      	nop

0800337c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler>
 800337e:	bf00      	nop

08003380 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_OVCR_Pin);
 8003384:	2080      	movs	r0, #128	; 0x80
 8003386:	f001 bf6b 	b.w	8005260 <HAL_GPIO_EXTI_IRQHandler>
 800338a:	bf00      	nop

0800338c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <TIM6_DAC_IRQHandler+0x8>)
 800338e:	f004 b869 	b.w	8007464 <HAL_TIM_IRQHandler>
 8003392:	bf00      	nop
 8003394:	240275d0 	.word	0x240275d0

08003398 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <ETH_IRQHandler+0x8>)
 800339a:	f001 bad1 	b.w	8004940 <HAL_ETH_IRQHandler>
 800339e:	bf00      	nop
 80033a0:	24027720 	.word	0x24027720

080033a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80033a4:	2001      	movs	r0, #1
 80033a6:	4770      	bx	lr

080033a8 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <_kill+0xc>)
 80033aa:	2216      	movs	r2, #22
	return -1;
}
 80033ac:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	4770      	bx	lr
 80033b4:	24037d40 	.word	0x24037d40

080033b8 <_exit>:
	errno = EINVAL;
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <_exit+0x8>)
 80033ba:	2216      	movs	r2, #22
 80033bc:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80033be:	e7fe      	b.n	80033be <_exit+0x6>
 80033c0:	24037d40 	.word	0x24037d40

080033c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c6:	1e16      	subs	r6, r2, #0
 80033c8:	dd07      	ble.n	80033da <_read+0x16>
 80033ca:	460c      	mov	r4, r1
 80033cc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80033ce:	f3af 8000 	nop.w
 80033d2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d6:	42a5      	cmp	r5, r4
 80033d8:	d1f9      	bne.n	80033ce <_read+0xa>
	}

return len;
}
 80033da:	4630      	mov	r0, r6
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	bf00      	nop

080033e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033e0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e2:	1e16      	subs	r6, r2, #0
 80033e4:	dd07      	ble.n	80033f6 <_write+0x16>
 80033e6:	460c      	mov	r4, r1
 80033e8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80033ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f2:	42a5      	cmp	r5, r4
 80033f4:	d1f9      	bne.n	80033ea <_write+0xa>
	}
	return len;
}
 80033f6:	4630      	mov	r0, r6
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	bf00      	nop

080033fc <_close>:

int _close(int file)
{
	return -1;
}
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003408:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800340a:	604b      	str	r3, [r1, #4]
}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop

08003410 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003410:	2001      	movs	r0, #1
 8003412:	4770      	bx	lr

08003414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003414:	2000      	movs	r0, #0
 8003416:	4770      	bx	lr

08003418 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003418:	490d      	ldr	r1, [pc, #52]	; (8003450 <_sbrk+0x38>)
{
 800341a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800341c:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800341e:	6808      	ldr	r0, [r1, #0]
{
 8003420:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003422:	4c0d      	ldr	r4, [pc, #52]	; (8003458 <_sbrk+0x40>)
 8003424:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003426:	b170      	cbz	r0, 8003446 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003428:	4403      	add	r3, r0
 800342a:	4293      	cmp	r3, r2
 800342c:	d803      	bhi.n	8003436 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800342e:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8003432:	600b      	str	r3, [r1, #0]
}
 8003434:	4770      	bx	lr
    errno = ENOMEM;
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <_sbrk+0x44>)
 8003438:	220c      	movs	r2, #12
    return (void *)-1;
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800343e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8003442:	601a      	str	r2, [r3, #0]
}
 8003444:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8003446:	4c06      	ldr	r4, [pc, #24]	; (8003460 <_sbrk+0x48>)
 8003448:	4620      	mov	r0, r4
 800344a:	600c      	str	r4, [r1, #0]
 800344c:	e7ec      	b.n	8003428 <_sbrk+0x10>
 800344e:	bf00      	nop
 8003450:	2402761c 	.word	0x2402761c
 8003454:	24080000 	.word	0x24080000
 8003458:	00000400 	.word	0x00000400
 800345c:	24037d40 	.word	0x24037d40
 8003460:	24037d48 	.word	0x24037d48

08003464 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003464:	4927      	ldr	r1, [pc, #156]	; (8003504 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003466:	4a28      	ldr	r2, [pc, #160]	; (8003508 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003468:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800346c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8003470:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	2b06      	cmp	r3, #6
 800347e:	d805      	bhi.n	800348c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f023 030f 	bic.w	r3, r3, #15
 8003486:	f043 0307 	orr.w	r3, r3, #7
 800348a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800348e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003492:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003494:	481c      	ldr	r0, [pc, #112]	; (8003508 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8003496:	f041 0101 	orr.w	r1, r1, #1
 800349a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800349c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	400a      	ands	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034a4:	6803      	ldr	r3, [r0, #0]
 80034a6:	071b      	lsls	r3, r3, #28
 80034a8:	d505      	bpl.n	80034b6 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034aa:	6803      	ldr	r3, [r0, #0]
 80034ac:	f023 030f 	bic.w	r3, r3, #15
 80034b0:	f043 0307 	orr.w	r3, r3, #7
 80034b4:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <SystemInit+0xa8>)
 80034b8:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80034ba:	4916      	ldr	r1, [pc, #88]	; (8003514 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 80034bc:	4c16      	ldr	r4, [pc, #88]	; (8003518 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 80034be:	4817      	ldr	r0, [pc, #92]	; (800351c <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80034c0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80034c2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80034c4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80034c6:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80034c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80034ca:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034ce:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034d2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034d6:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034d8:	4c11      	ldr	r4, [pc, #68]	; (8003520 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 80034da:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034de:	4911      	ldr	r1, [pc, #68]	; (8003524 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 80034e0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	4019      	ands	r1, r3
 80034e8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80034ec:	d203      	bcs.n	80034f6 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <SystemInit+0xc4>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <SystemInit+0xc8>)
 80034f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00
 8003508:	52002000 	.word	0x52002000
 800350c:	58024400 	.word	0x58024400
 8003510:	eaf6ed7f 	.word	0xeaf6ed7f
 8003514:	01010280 	.word	0x01010280
 8003518:	02020200 	.word	0x02020200
 800351c:	01ff0000 	.word	0x01ff0000
 8003520:	5c001000 	.word	0x5c001000
 8003524:	ffff0000 	.word	0xffff0000
 8003528:	51008000 	.word	0x51008000
 800352c:	52004000 	.word	0x52004000

08003530 <_ZN8BissCrc6C1Ev>:
	0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32,
	0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A,
	0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02
};

BissCrc6::BissCrc6()
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
{
	dataNoCrc.all = 0;
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZN8BissCrc611calcCrc_rawEy>:

uint8_t BissCrc6::calcCrc_raw(uint64_t data)
{
 8003554:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t crc;
    uint64_t tmp;
    tmp = ((data >> 30) & 0x3F);
 8003562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	0f82      	lsrs	r2, r0, #30
 8003570:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8003574:	0f8b      	lsrs	r3, r1, #30
 8003576:	f002 083f 	and.w	r8, r2, #63	; 0x3f
 800357a:	f04f 0900 	mov.w	r9, #0
 800357e:	e9c7 8906 	strd	r8, r9, [r7, #24]

    for (int shift = 24; shift >=0; shift -= 6)
 8003582:	2318      	movs	r3, #24
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	e024      	b.n	80035d2 <_ZN8BissCrc611calcCrc_rawEy+0x7e>
    {
        crc = ((data >> shift) & 0x3F);
 8003588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800358c:	6979      	ldr	r1, [r7, #20]
 800358e:	f1c1 0620 	rsb	r6, r1, #32
 8003592:	f1a1 0020 	sub.w	r0, r1, #32
 8003596:	fa22 f401 	lsr.w	r4, r2, r1
 800359a:	fa03 f606 	lsl.w	r6, r3, r6
 800359e:	4334      	orrs	r4, r6
 80035a0:	fa23 f000 	lsr.w	r0, r3, r0
 80035a4:	4304      	orrs	r4, r0
 80035a6:	fa23 f501 	lsr.w	r5, r3, r1
 80035aa:	b2e3      	uxtb	r3, r4
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	74fb      	strb	r3, [r7, #19]
        tmp = crc ^ tableCRC6[tmp];
 80035b2:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <_ZN8BissCrc611calcCrc_rawEy+0xa4>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	4053      	eors	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2200      	movs	r2, #0
 80035c4:	469a      	mov	sl, r3
 80035c6:	4693      	mov	fp, r2
 80035c8:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    for (int shift = 24; shift >=0; shift -= 6)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3b06      	subs	r3, #6
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	dad7      	bge.n	8003588 <_ZN8BissCrc611calcCrc_rawEy+0x34>
    }

    crc = tableCRC6[tmp];
 80035d8:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <_ZN8BissCrc611calcCrc_rawEy+0xa4>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	74fb      	strb	r3, [r7, #19]
    crc = crc ^ 0x3F;
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	f083 033f 	eor.w	r3, r3, #63	; 0x3f
 80035e8:	74fb      	strb	r3, [r7, #19]
    return crc;
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035f6:	4770      	bx	lr
 80035f8:	24000020 	.word	0x24000020

080035fc <_ZN8BissCrc67calcCrcE8EncFrame>:

uint8_t BissCrc6::calcCrc(EncFrame data)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	e9c7 2300 	strd	r2, r3, [r7]
	dataNoCrc.bit.pos = data.bit.pos;
 8003608:	f8d7 2001 	ldr.w	r2, [r7, #1]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f022 4140 	bic.w	r1, r2, #3221225472	; 0xc0000000
 8003612:	0089      	lsls	r1, r1, #2
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f000 0003 	and.w	r0, r0, #3
 800361a:	4301      	orrs	r1, r0
 800361c:	6019      	str	r1, [r3, #0]
 800361e:	0f92      	lsrs	r2, r2, #30
 8003620:	f002 0003 	and.w	r0, r2, #3
 8003624:	791a      	ldrb	r2, [r3, #4]
 8003626:	f022 0203 	bic.w	r2, r2, #3
 800362a:	4611      	mov	r1, r2
 800362c:	4602      	mov	r2, r0
 800362e:	430a      	orrs	r2, r1
 8003630:	711a      	strb	r2, [r3, #4]
	dataNoCrc.bit.warn = data.bit.warn;
 8003632:	783b      	ldrb	r3, [r7, #0]
 8003634:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003638:	b2d9      	uxtb	r1, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	7813      	ldrb	r3, [r2, #0]
 800363e:	f361 0300 	bfi	r3, r1, #0, #1
 8003642:	7013      	strb	r3, [r2, #0]
	dataNoCrc.bit.err = data.bit.err;
 8003644:	783b      	ldrb	r3, [r7, #0]
 8003646:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800364a:	b2d9      	uxtb	r1, r3
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	7813      	ldrb	r3, [r2, #0]
 8003650:	f361 0341 	bfi	r3, r1, #1, #1
 8003654:	7013      	strb	r3, [r2, #0]

	return calcCrc_raw(dataNoCrc.all);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ff79 	bl	8003554 <_ZN8BissCrc611calcCrc_rawEy>
 8003662:	4603      	mov	r3, r0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_ZN8BissCrc68checkCrcE8EncFrame>:

bool BissCrc6::checkCrc(EncFrame data)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t crc = calcCrc(data);
 8003678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff ffbd 	bl	80035fc <_ZN8BissCrc67calcCrcE8EncFrame>
 8003682:	4603      	mov	r3, r0
 8003684:	75fb      	strb	r3, [r7, #23]
	crcC = crc;
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <_ZN8BissCrc68checkCrcE8EncFrame+0x40>)
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	7013      	strb	r3, [r2, #0]
	return crc == data.bit.crc;
 800368c:	783b      	ldrb	r3, [r7, #0]
 800368e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	4293      	cmp	r3, r2
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	24000360 	.word	0x24000360

080036b0 <_ZN13EncoderParamsC1Ev>:
#pragma once

struct EncoderParams
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	a319      	add	r3, pc, #100	; (adr r3, 8003720 <_ZN13EncoderParamsC1Ev+0x70>)
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	e9c1 2300 	strd	r2, r3, [r1]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	ed93 6b00 	vldr	d6, [r3]
 80036ca:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80036ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	ed83 7b02 	vstr	d7, [r3, #8]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	a313      	add	r3, pc, #76	; (adr r3, 8003728 <_ZN13EncoderParamsC1Ev+0x78>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	ed93 6b04 	vldr	d6, [r3, #16]
 80036ea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80036ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	ed83 7b06 	vstr	d7, [r3, #24]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	a30d      	add	r3, pc, #52	; (adr r3, 8003730 <_ZN13EncoderParamsC1Ev+0x80>)
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	584e38a5 	.word	0x584e38a5
 8003724:	3e39b315 	.word	0x3e39b315
 8003728:	30553261 	.word	0x30553261
 800372c:	3f53a92a 	.word	0x3f53a92a
 8003730:	e826d695 	.word	0xe826d695
 8003734:	3e112e0b 	.word	0x3e112e0b

08003738 <_ZN13EncoderDriverC1EP19__SPI_HandleTypeDef>:
}

uint8_t EncoderDriver::dataBuff[dataBuffLen] = {0};
uint8_t EncoderDriver::frameBuff[8] = {0};

EncoderDriver::EncoderDriver(SPI_HandleTypeDef * spi): spi(spi)
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3308      	adds	r3, #8
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ffaf 	bl	80036b0 <_ZN13EncoderParamsC1Ev>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3338      	adds	r3, #56	; 0x38
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff feea 	bl	8003530 <_ZN8BissCrc6C1Ev>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
{

}
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <_ZN13EncoderDriver8checkAckEv>:

/* check if ACK is correct in first byte (1110 0000) */
void EncoderDriver::checkAck()
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	isAckDetected = false;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	for (int i = 0; i < 8; i++)
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e016      	b.n	80037f8 <_ZN13EncoderDriver8checkAckEv+0x44>
	{
		uint8_t check = (dataBuff[0] << i) ^ 0x80;
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <_ZN13EncoderDriver8checkAckEv+0x58>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	b25a      	sxtb	r2, r3
 80037d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80037dc:	4053      	eors	r3, r2
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	72fb      	strb	r3, [r7, #11]
		if (check == 0x00)
 80037e2:	7afb      	ldrb	r3, [r7, #11]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <_ZN13EncoderDriver8checkAckEv+0x3e>
		{
			isAckDetected = true;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			break;
 80037f0:	e006      	b.n	8003800 <_ZN13EncoderDriver8checkAckEv+0x4c>
	for (int i = 0; i < 8; i++)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	3301      	adds	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b07      	cmp	r3, #7
 80037fc:	dde5      	ble.n	80037ca <_ZN13EncoderDriver8checkAckEv+0x16>
	}
//	if (dataBuff[0] == 0xE0)
//		isAckDetected = true;
//	else
//		isAckDetected = false;
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	24027620 	.word	0x24027620

08003810 <_ZN13EncoderDriver13getStartIndexEv>:

/* check from which byte we have start (10) */
void EncoderDriver::getStartIndex()
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < dataBuffLen; i++)
 8003818:	2301      	movs	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e00e      	b.n	800383c <_ZN13EncoderDriver13getStartIndexEv+0x2c>
	{
		if (dataBuff[i] != 0x00)
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <_ZN13EncoderDriver13getStartIndexEv+0x40>)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <_ZN13EncoderDriver13getStartIndexEv+0x26>
		{
			startIndex = i;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			break;
 8003834:	e006      	b.n	8003844 <_ZN13EncoderDriver13getStartIndexEv+0x34>
	for (int i = 1; i < dataBuffLen; i++)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3301      	adds	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b1d      	cmp	r3, #29
 8003840:	dded      	ble.n	800381e <_ZN13EncoderDriver13getStartIndexEv+0xe>
		}
	}
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	24027620 	.word	0x24027620

08003854 <_ZN13EncoderDriver8getShiftEv>:

/* get bit shift value and check if start (10) is correct */
void EncoderDriver::getShift()
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++)
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e04b      	b.n	80038fa <_ZN13EncoderDriver8getShiftEv+0xa6>
	{
		if (((dataBuff[startIndex] << i) & 0x80) == 0x80)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003868:	461a      	mov	r2, r3
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <_ZN13EncoderDriver8getShiftEv+0xbc>)
 800386c:	5c9b      	ldrb	r3, [r3, r2]
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d03a      	beq.n	80038f4 <_ZN13EncoderDriver8getShiftEv+0xa0>
		{
			 if ((((dataBuff[startIndex] << i) | (dataBuff[startIndex+1] >> (8-i))) & 0xC0) == 0x80)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003884:	461a      	mov	r2, r3
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <_ZN13EncoderDriver8getShiftEv+0xbc>)
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	409a      	lsls	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003896:	3301      	adds	r3, #1
 8003898:	491d      	ldr	r1, [pc, #116]	; (8003910 <_ZN13EncoderDriver8getShiftEv+0xbc>)
 800389a:	5ccb      	ldrb	r3, [r1, r3]
 800389c:	4619      	mov	r1, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f1c3 0308 	rsb	r3, r3, #8
 80038a4:	fa41 f303 	asr.w	r3, r1, r3
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d103      	bne.n	80038ba <_ZN13EncoderDriver8getShiftEv+0x66>
				 isStartDeteted = 1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			 shift = i + 2;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3302      	adds	r3, #2
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

			 if (shift > 7)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038ce:	2b07      	cmp	r3, #7
 80038d0:	d917      	bls.n	8003902 <_ZN13EncoderDriver8getShiftEv+0xae>
			 {
				 startIndex++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038d8:	3301      	adds	r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				 shift = shift - 8;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038e8:	3b08      	subs	r3, #8
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			 }

			 break;
 80038f2:	e006      	b.n	8003902 <_ZN13EncoderDriver8getShiftEv+0xae>
	for (int i = 0; i < 8; i++)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b07      	cmp	r3, #7
 80038fe:	ddb0      	ble.n	8003862 <_ZN13EncoderDriver8getShiftEv+0xe>
		}
	}
}
 8003900:	e000      	b.n	8003904 <_ZN13EncoderDriver8getShiftEv+0xb0>
			 break;
 8003902:	bf00      	nop
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	24027620 	.word	0x24027620

08003914 <_ZN13EncoderDriver10assignDataEv>:

/* shift data and assign data to structure (crc warn err pos) */
void EncoderDriver::assignData()
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < frameBuffLen; i++)
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	e029      	b.n	8003976 <_ZN13EncoderDriver10assignDataEv+0x62>
	{
		int j = startIndex + i;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
		frameBuff[frameBuffLen - 1 - i] = (dataBuff[j] << shift) | (dataBuff[j+1] >> (8-shift));
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <_ZN13EncoderDriver10assignDataEv+0x8c>)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4413      	add	r3, r2
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	b25a      	sxtb	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3301      	adds	r3, #1
 800394a:	4915      	ldr	r1, [pc, #84]	; (80039a0 <_ZN13EncoderDriver10assignDataEv+0x8c>)
 800394c:	5ccb      	ldrb	r3, [r1, r3]
 800394e:	4619      	mov	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003956:	f1c3 0308 	rsb	r3, r3, #8
 800395a:	fa41 f303 	asr.w	r3, r1, r3
 800395e:	b25b      	sxtb	r3, r3
 8003960:	4313      	orrs	r3, r2
 8003962:	b25a      	sxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f1c3 0304 	rsb	r3, r3, #4
 800396a:	b2d1      	uxtb	r1, r2
 800396c:	4a0d      	ldr	r2, [pc, #52]	; (80039a4 <_ZN13EncoderDriver10assignDataEv+0x90>)
 800396e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < frameBuffLen; i++)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b04      	cmp	r3, #4
 800397a:	ddd2      	ble.n	8003922 <_ZN13EncoderDriver10assignDataEv+0xe>
	}

	dataWithCrc = *((union EncFrame*)(frameBuff));
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <_ZN13EncoderDriver10assignDataEv+0x90>)
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	dataEnc.all = dataWithCrc.all; //debug
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800398e:	4906      	ldr	r1, [pc, #24]	; (80039a8 <_ZN13EncoderDriver10assignDataEv+0x94>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	24027620 	.word	0x24027620
 80039a4:	24027640 	.word	0x24027640
 80039a8:	24027478 	.word	0x24027478

080039ac <_ZN13EncoderDriver7calcPosEv>:

/* calculate position */
void EncoderDriver::calcPos()
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	posRaw = encParams.imp2rad * (double)dataWithCrc.bit.pos;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	ed93 6b02 	vldr	d6, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80039c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	posCalibrated = posRaw - encParams.mechanicalOffset;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80039de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60

	posAngle = posRaw; //debug
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80039ee:	4904      	ldr	r1, [pc, #16]	; (8003a00 <_ZN13EncoderDriver7calcPosEv+0x54>)
 80039f0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	240275c0 	.word	0x240275c0

08003a04 <_ZN13EncoderDriver11readRequestEv>:

void EncoderDriver::readRequest()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
//	HAL_SPI_Receive(spi, dataBuff, dataBuffLen, HAL_MAX_DELAY);
	if (!isTransfer)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a12:	f083 0301 	eor.w	r3, r3, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <_ZN13EncoderDriver11readRequestEv+0x30>
	{
		HAL_SPI_Receive_IT(spi, dataBuff, dataBuffLen);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	221e      	movs	r2, #30
 8003a22:	4909      	ldr	r1, [pc, #36]	; (8003a48 <_ZN13EncoderDriver11readRequestEv+0x44>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fa59 	bl	8006edc <HAL_SPI_Receive_IT>
		isTransfer = true;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	else
	{
		cntErr++;
	}
}
 8003a32:	e004      	b.n	8003a3e <_ZN13EncoderDriver11readRequestEv+0x3a>
		cntErr++;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <_ZN13EncoderDriver11readRequestEv+0x48>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <_ZN13EncoderDriver11readRequestEv+0x48>)
 8003a3c:	6013      	str	r3, [r2, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	24027620 	.word	0x24027620
 8003a4c:	2400035c 	.word	0x2400035c

08003a50 <_ZN13EncoderDriver11readEncoderEv>:

uint32_t EncoderDriver::readEncoder()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
//	for (int i = 0; i < dataBuffLen; i++)
//	{
//		dataBuff[i] = buff[i];
//	}
	checkAck();
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff feab 	bl	80037b4 <_ZN13EncoderDriver8checkAckEv>
	getStartIndex();
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fed6 	bl	8003810 <_ZN13EncoderDriver13getStartIndexEv>
	getShift();
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fef5 	bl	8003854 <_ZN13EncoderDriver8getShiftEv>
	assignData();
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff52 	bl	8003914 <_ZN13EncoderDriver10assignDataEv>
	isCrcOk = bissCrc.checkCrc(dataWithCrc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	f7ff fdf5 	bl	800366c <_ZN8BissCrc68checkCrcE8EncFrame>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (isCrcOk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <_ZN13EncoderDriver11readEncoderEv+0x4c>
		calcPos();
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff88 	bl	80039ac <_ZN13EncoderDriver7calcPosEv>
	crcOk = (uint8_t)isCrcOk; //debug
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <_ZN13EncoderDriver11readEncoderEv+0x70>)
 8003aa6:	701a      	strb	r2, [r3, #0]
	isTransfer = false;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
//	pos[cntP] = posError; //debug
//	cntP++; //debug
//	cntP = cntP % BUF_POS_LEN; //debug

//	return posCalibrated;
	return dataWithCrc.bit.pos;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24000361 	.word	0x24000361

08003ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003afc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ac8:	f7ff fccc 	bl	8003464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003acc:	480c      	ldr	r0, [pc, #48]	; (8003b00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ace:	490d      	ldr	r1, [pc, #52]	; (8003b04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ad0:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad4:	e002      	b.n	8003adc <LoopCopyDataInit>

08003ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ada:	3304      	adds	r3, #4

08003adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae0:	d3f9      	bcc.n	8003ad6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ae4:	4c0a      	ldr	r4, [pc, #40]	; (8003b10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae8:	e001      	b.n	8003aee <LoopFillZerobss>

08003aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aec:	3204      	adds	r2, #4

08003aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af0:	d3fb      	bcc.n	8003aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003af2:	f011 fa53 	bl	8014f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af6:	f7ff f90d 	bl	8002d14 <main>
  bx  lr
 8003afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003afc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003b00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003b04:	24000250 	.word	0x24000250
  ldr r2, =_sidata
 8003b08:	0801ac3c 	.word	0x0801ac3c
  ldr r2, =_sbss
 8003b0c:	24000250 	.word	0x24000250
  ldr r4, =_ebss
 8003b10:	24037d48 	.word	0x24037d48

08003b14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b14:	e7fe      	b.n	8003b14 <ADC3_IRQHandler>
	...

08003b18 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003b18:	b188      	cbz	r0, 8003b3e <LAN8742_RegisterBusIO+0x26>
 8003b1a:	68ca      	ldr	r2, [r1, #12]
 8003b1c:	b17a      	cbz	r2, 8003b3e <LAN8742_RegisterBusIO+0x26>
{
 8003b1e:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003b20:	688c      	ldr	r4, [r1, #8]
 8003b22:	b17c      	cbz	r4, 8003b44 <LAN8742_RegisterBusIO+0x2c>
 8003b24:	690d      	ldr	r5, [r1, #16]
 8003b26:	b16d      	cbz	r5, 8003b44 <LAN8742_RegisterBusIO+0x2c>
 8003b28:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8003b2a:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8003b2c:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8003b2e:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8003b30:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003b32:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 8003b34:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003b36:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8003b3a:	bc30      	pop	{r4, r5}
 8003b3c:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003b42:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e7f7      	b.n	8003b3a <LAN8742_RegisterBusIO+0x22>
 8003b4a:	bf00      	nop

08003b4c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003b4c:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003b4e:	2300      	movs	r3, #0
 {
 8003b50:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8003b52:	6844      	ldr	r4, [r0, #4]
 {
 8003b54:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003b56:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8003b58:	2c00      	cmp	r4, #0
 8003b5a:	d146      	bne.n	8003bea <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8003b5c:	6883      	ldr	r3, [r0, #8]
 8003b5e:	b103      	cbz	r3, 8003b62 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003b60:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b62:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8003b64:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b66:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b68:	e007      	b.n	8003b7a <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b6a:	9b01      	ldr	r3, [sp, #4]
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d016      	beq.n	8003ba2 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b74:	3401      	adds	r4, #1
 8003b76:	2c20      	cmp	r4, #32
 8003b78:	d00b      	beq.n	8003b92 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	696b      	ldr	r3, [r5, #20]
 8003b7e:	aa01      	add	r2, sp, #4
 8003b80:	2112      	movs	r1, #18
 8003b82:	4798      	blx	r3
 8003b84:	2800      	cmp	r0, #0
 8003b86:	daf0      	bge.n	8003b6a <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b88:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8003b8a:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b8e:	2c20      	cmp	r4, #32
 8003b90:	d1f3      	bne.n	8003b7a <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003b92:	682c      	ldr	r4, [r5, #0]
 8003b94:	2c1f      	cmp	r4, #31
 8003b96:	d937      	bls.n	8003c08 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003b98:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	b002      	add	sp, #8
 8003ba0:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8003ba2:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003ba4:	692b      	ldr	r3, [r5, #16]
 8003ba6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003baa:	4620      	mov	r0, r4
 8003bac:	2100      	movs	r1, #0
 8003bae:	4798      	blx	r3
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	db2c      	blt.n	8003c0e <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003bb4:	696b      	ldr	r3, [r5, #20]
 8003bb6:	aa01      	add	r2, sp, #4
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6828      	ldr	r0, [r5, #0]
 8003bbc:	4798      	blx	r3
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	db2b      	blt.n	8003c1a <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8003bc2:	69ab      	ldr	r3, [r5, #24]
 8003bc4:	4798      	blx	r3
 8003bc6:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003bc8:	e00c      	b.n	8003be4 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003bca:	69ab      	ldr	r3, [r5, #24]
 8003bcc:	4798      	blx	r3
 8003bce:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003bd0:	aa01      	add	r2, sp, #4
 8003bd2:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003bd4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003bd8:	d81c      	bhi.n	8003c14 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003bda:	696b      	ldr	r3, [r5, #20]
 8003bdc:	6828      	ldr	r0, [r5, #0]
 8003bde:	4798      	blx	r3
 8003be0:	2800      	cmp	r0, #0
 8003be2:	db1a      	blt.n	8003c1a <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003be4:	9b01      	ldr	r3, [sp, #4]
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	d4ef      	bmi.n	8003bca <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8003bea:	69ab      	ldr	r3, [r5, #24]
 8003bec:	4798      	blx	r3
 8003bee:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003bf0:	69ab      	ldr	r3, [r5, #24]
 8003bf2:	4798      	blx	r3
 8003bf4:	1b03      	subs	r3, r0, r4
 8003bf6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003bfa:	d9f9      	bls.n	8003bf0 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	2600      	movs	r6, #0
 8003c00:	606b      	str	r3, [r5, #4]
 }
 8003c02:	4630      	mov	r0, r6
 8003c04:	b002      	add	sp, #8
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8003c08:	2e00      	cmp	r6, #0
 8003c0a:	d1fa      	bne.n	8003c02 <LAN8742_Init+0xb6>
 8003c0c:	e7ca      	b.n	8003ba4 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 8003c0e:	f06f 0603 	mvn.w	r6, #3
 8003c12:	e7f6      	b.n	8003c02 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003c14:	f06f 0601 	mvn.w	r6, #1
   return status;
 8003c18:	e7f3      	b.n	8003c02 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 8003c1a:	f06f 0604 	mvn.w	r6, #4
 8003c1e:	e7f0      	b.n	8003c02 <LAN8742_Init+0xb6>

08003c20 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c20:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8003c22:	2500      	movs	r5, #0
{
 8003c24:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c26:	6943      	ldr	r3, [r0, #20]
{
 8003c28:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c2a:	aa01      	add	r2, sp, #4
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8003c30:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c32:	4798      	blx	r3
 8003c34:	42a8      	cmp	r0, r5
 8003c36:	db3d      	blt.n	8003cb4 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c38:	6963      	ldr	r3, [r4, #20]
 8003c3a:	aa01      	add	r2, sp, #4
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	4798      	blx	r3
 8003c42:	2800      	cmp	r0, #0
 8003c44:	db36      	blt.n	8003cb4 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	075b      	lsls	r3, r3, #29
 8003c4a:	d52a      	bpl.n	8003ca2 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003c4c:	6963      	ldr	r3, [r4, #20]
 8003c4e:	aa01      	add	r2, sp, #4
 8003c50:	4629      	mov	r1, r5
 8003c52:	6820      	ldr	r0, [r4, #0]
 8003c54:	4798      	blx	r3
 8003c56:	2800      	cmp	r0, #0
 8003c58:	db2c      	blt.n	8003cb4 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003c5a:	9b01      	ldr	r3, [sp, #4]
 8003c5c:	04dd      	lsls	r5, r3, #19
 8003c5e:	d514      	bpl.n	8003c8a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003c60:	6963      	ldr	r3, [r4, #20]
 8003c62:	aa01      	add	r2, sp, #4
 8003c64:	211f      	movs	r1, #31
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	4798      	blx	r3
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	db22      	blt.n	8003cb4 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003c6e:	9b01      	ldr	r3, [sp, #4]
 8003c70:	04da      	lsls	r2, r3, #19
 8003c72:	d51d      	bpl.n	8003cb0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003c74:	f003 031c 	and.w	r3, r3, #28
 8003c78:	2b18      	cmp	r3, #24
 8003c7a:	d017      	beq.n	8003cac <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d013      	beq.n	8003ca8 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003c80:	2b14      	cmp	r3, #20
 8003c82:	d10b      	bne.n	8003c9c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003c84:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8003c86:	b003      	add	sp, #12
 8003c88:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003c8a:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8003c8e:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8003c92:	d00b      	beq.n	8003cac <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003c94:	0498      	lsls	r0, r3, #18
 8003c96:	d407      	bmi.n	8003ca8 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003c98:	05d9      	lsls	r1, r3, #23
 8003c9a:	d4f3      	bmi.n	8003c84 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003c9c:	2005      	movs	r0, #5
}
 8003c9e:	b003      	add	sp, #12
 8003ca0:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8003ca2:	2001      	movs	r0, #1
}
 8003ca4:	b003      	add	sp, #12
 8003ca6:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003ca8:	2003      	movs	r0, #3
 8003caa:	e7f8      	b.n	8003c9e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003cac:	2002      	movs	r0, #2
 8003cae:	e7f6      	b.n	8003c9e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003cb0:	2006      	movs	r0, #6
 8003cb2:	e7f4      	b.n	8003c9e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8003cb4:	f06f 0004 	mvn.w	r0, #4
 8003cb8:	e7f1      	b.n	8003c9e <LAN8742_GetLinkState+0x7e>
 8003cba:	bf00      	nop

08003cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cbc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cbe:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc0:	4c12      	ldr	r4, [pc, #72]	; (8003d0c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc2:	f000 f84d 	bl	8003d60 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cc6:	f001 fe55 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_Init+0x54>)
 8003ccc:	4911      	ldr	r1, [pc, #68]	; (8003d14 <HAL_Init+0x58>)
 8003cce:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cd2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cd6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cda:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003cde:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ce4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ce8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cea:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003cee:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cf0:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cf2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cf4:	f7ff faec 	bl	80032d0 <HAL_InitTick>
 8003cf8:	b110      	cbz	r0, 8003d00 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8003cfa:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	bd10      	pop	{r4, pc}
 8003d00:	4604      	mov	r4, r0
  HAL_MspInit();
 8003d02:	f7ff fa27 	bl	8003154 <HAL_MspInit>
}
 8003d06:	4620      	mov	r0, r4
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	bf00      	nop
 8003d0c:	2400001c 	.word	0x2400001c
 8003d10:	58024400 	.word	0x58024400
 8003d14:	08017f38 	.word	0x08017f38
 8003d18:	24000018 	.word	0x24000018

08003d1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003d1c:	4a03      	ldr	r2, [pc, #12]	; (8003d2c <HAL_IncTick+0x10>)
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <HAL_IncTick+0x14>)
 8003d20:	6811      	ldr	r1, [r2, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	440b      	add	r3, r1
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	24027648 	.word	0x24027648
 8003d30:	24000060 	.word	0x24000060

08003d34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <HAL_GetTick+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
}
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	24027648 	.word	0x24027648

08003d40 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003d40:	4b01      	ldr	r3, [pc, #4]	; (8003d48 <HAL_GetREVID+0x8>)
 8003d42:	6818      	ldr	r0, [r3, #0]
}
 8003d44:	0c00      	lsrs	r0, r0, #16
 8003d46:	4770      	bx	lr
 8003d48:	5c001000 	.word	0x5c001000

08003d4c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003d4c:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8003d4e:	6853      	ldr	r3, [r2, #4]
 8003d50:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8003d54:	4318      	orrs	r0, r3
 8003d56:	6050      	str	r0, [r2, #4]
}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	58000400 	.word	0x58000400

08003d60 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d60:	4906      	ldr	r1, [pc, #24]	; (8003d7c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d62:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d66:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d6a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d6c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d70:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d74:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003d76:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003d78:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00
 8003d80:	05fa0000 	.word	0x05fa0000

08003d84 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_NVIC_SetPriority+0x70>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d8e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d92:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d96:	f1be 0f04 	cmp.w	lr, #4
 8003d9a:	bf28      	it	cs
 8003d9c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da0:	f1bc 0f06 	cmp.w	ip, #6
 8003da4:	d91a      	bls.n	8003ddc <HAL_NVIC_SetPriority+0x58>
 8003da6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da8:	f04f 3cff 	mov.w	ip, #4294967295
 8003dac:	fa0c fc03 	lsl.w	ip, ip, r3
 8003db0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8003db8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dba:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003dbe:	ea21 010c 	bic.w	r1, r1, ip
 8003dc2:	fa01 f103 	lsl.w	r1, r1, r3
 8003dc6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003dca:	db0a      	blt.n	8003de2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	0109      	lsls	r1, r1, #4
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_NVIC_SetPriority+0x74>)
 8003dd0:	b2c9      	uxtb	r1, r1
 8003dd2:	4403      	add	r3, r0
 8003dd4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ddc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	4613      	mov	r3, r2
 8003de0:	e7e8      	b.n	8003db4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de2:	f000 000f 	and.w	r0, r0, #15
 8003de6:	0109      	lsls	r1, r1, #4
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_NVIC_SetPriority+0x78>)
 8003dea:	b2c9      	uxtb	r1, r1
 8003dec:	4403      	add	r3, r0
 8003dee:	7619      	strb	r1, [r3, #24]
 8003df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003df4:	e000ed00 	.word	0xe000ed00
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ecfc 	.word	0xe000ecfc

08003e00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e00:	2800      	cmp	r0, #0
 8003e02:	db07      	blt.n	8003e14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e04:	2301      	movs	r3, #1
 8003e06:	f000 011f 	and.w	r1, r0, #31
 8003e0a:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <HAL_NVIC_EnableIRQ+0x18>)
 8003e0c:	0940      	lsrs	r0, r0, #5
 8003e0e:	408b      	lsls	r3, r1
 8003e10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e1c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e22:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8003e2c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_MPU_Enable+0x1c>)
 8003e3a:	f040 0001 	orr.w	r0, r0, #1
 8003e3e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e4e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e52:	4770      	bx	lr
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003e58:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_MPU_ConfigRegion+0x60>)
 8003e5a:	7843      	ldrb	r3, [r0, #1]
 8003e5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8003e60:	7801      	ldrb	r1, [r0, #0]
 8003e62:	b321      	cbz	r1, 8003eae <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003e64:	6843      	ldr	r3, [r0, #4]
{
 8003e66:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8003e68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e6c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e6e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003e72:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003e74:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003e78:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003e7c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e80:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003e82:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e84:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003e88:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e8c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003e90:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003e94:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003e98:	7a01      	ldrb	r1, [r0, #8]
 8003e9a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8003e9e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003ea2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ea6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8003eae:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003eb2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d05f      	beq.n	8003f80 <HAL_DMA_Abort_IT+0xc4>
{
 8003ec0:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec2:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2a02      	cmp	r2, #2
 8003eca:	d155      	bne.n	8003f78 <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ecc:	6801      	ldr	r1, [r0, #0]
 8003ece:	4a57      	ldr	r2, [pc, #348]	; (800402c <HAL_DMA_Abort_IT+0x170>)
 8003ed0:	4291      	cmp	r1, r2
 8003ed2:	d048      	beq.n	8003f66 <HAL_DMA_Abort_IT+0xaa>
 8003ed4:	3218      	adds	r2, #24
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	d045      	beq.n	8003f66 <HAL_DMA_Abort_IT+0xaa>
 8003eda:	3230      	adds	r2, #48	; 0x30
 8003edc:	4c54      	ldr	r4, [pc, #336]	; (8004030 <HAL_DMA_Abort_IT+0x174>)
 8003ede:	4855      	ldr	r0, [pc, #340]	; (8004034 <HAL_DMA_Abort_IT+0x178>)
 8003ee0:	42a1      	cmp	r1, r4
 8003ee2:	bf18      	it	ne
 8003ee4:	4291      	cmpne	r1, r2
 8003ee6:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8003eea:	bf0c      	ite	eq
 8003eec:	2201      	moveq	r2, #1
 8003eee:	2200      	movne	r2, #0
 8003ef0:	4281      	cmp	r1, r0
 8003ef2:	bf08      	it	eq
 8003ef4:	f042 0201 	orreq.w	r2, r2, #1
 8003ef8:	3030      	adds	r0, #48	; 0x30
 8003efa:	42a1      	cmp	r1, r4
 8003efc:	bf08      	it	eq
 8003efe:	f042 0201 	orreq.w	r2, r2, #1
 8003f02:	3430      	adds	r4, #48	; 0x30
 8003f04:	4281      	cmp	r1, r0
 8003f06:	bf08      	it	eq
 8003f08:	f042 0201 	orreq.w	r2, r2, #1
 8003f0c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003f10:	42a1      	cmp	r1, r4
 8003f12:	bf08      	it	eq
 8003f14:	f042 0201 	orreq.w	r2, r2, #1
 8003f18:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003f1c:	4281      	cmp	r1, r0
 8003f1e:	bf08      	it	eq
 8003f20:	f042 0201 	orreq.w	r2, r2, #1
 8003f24:	3030      	adds	r0, #48	; 0x30
 8003f26:	42a1      	cmp	r1, r4
 8003f28:	bf08      	it	eq
 8003f2a:	f042 0201 	orreq.w	r2, r2, #1
 8003f2e:	3430      	adds	r4, #48	; 0x30
 8003f30:	4281      	cmp	r1, r0
 8003f32:	bf08      	it	eq
 8003f34:	f042 0201 	orreq.w	r2, r2, #1
 8003f38:	3030      	adds	r0, #48	; 0x30
 8003f3a:	42a1      	cmp	r1, r4
 8003f3c:	bf08      	it	eq
 8003f3e:	f042 0201 	orreq.w	r2, r2, #1
 8003f42:	3430      	adds	r4, #48	; 0x30
 8003f44:	4281      	cmp	r1, r0
 8003f46:	bf08      	it	eq
 8003f48:	f042 0201 	orreq.w	r2, r2, #1
 8003f4c:	3030      	adds	r0, #48	; 0x30
 8003f4e:	42a1      	cmp	r1, r4
 8003f50:	bf08      	it	eq
 8003f52:	f042 0201 	orreq.w	r2, r2, #1
 8003f56:	4281      	cmp	r1, r0
 8003f58:	bf08      	it	eq
 8003f5a:	f042 0201 	orreq.w	r2, r2, #1
 8003f5e:	b912      	cbnz	r2, 8003f66 <HAL_DMA_Abort_IT+0xaa>
 8003f60:	4a35      	ldr	r2, [pc, #212]	; (8004038 <HAL_DMA_Abort_IT+0x17c>)
 8003f62:	4291      	cmp	r1, r2
 8003f64:	d10e      	bne.n	8003f84 <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f66:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8003f68:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003f6e:	680b      	ldr	r3, [r1, #0]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	600b      	str	r3, [r1, #0]
}
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f78:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8003f7a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f80:	2001      	movs	r0, #1
}
 8003f82:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_DMA_Abort_IT+0x180>)
 8003f86:	4d2e      	ldr	r5, [pc, #184]	; (8004040 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f88:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f8a:	42a9      	cmp	r1, r5
 8003f8c:	bf18      	it	ne
 8003f8e:	4291      	cmpne	r1, r2
 8003f90:	4c2c      	ldr	r4, [pc, #176]	; (8004044 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f92:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f96:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2201      	moveq	r2, #1
 8003f9e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fa0:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fa2:	42a1      	cmp	r1, r4
 8003fa4:	bf08      	it	eq
 8003fa6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003faa:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fac:	3428      	adds	r4, #40	; 0x28
 8003fae:	42a9      	cmp	r1, r5
 8003fb0:	bf08      	it	eq
 8003fb2:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8003fb6:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fba:	42a1      	cmp	r1, r4
 8003fbc:	bf08      	it	eq
 8003fbe:	f042 0201 	orreq.w	r2, r2, #1
 8003fc2:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8003fc4:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fc6:	42a1      	cmp	r1, r4
 8003fc8:	bf08      	it	eq
 8003fca:	f042 0201 	orreq.w	r2, r2, #1
 8003fce:	481e      	ldr	r0, [pc, #120]	; (8004048 <HAL_DMA_Abort_IT+0x18c>)
 8003fd0:	4281      	cmp	r1, r0
 8003fd2:	bf08      	it	eq
 8003fd4:	f042 0201 	orreq.w	r2, r2, #1
 8003fd8:	b912      	cbnz	r2, 8003fe0 <HAL_DMA_Abort_IT+0x124>
 8003fda:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_DMA_Abort_IT+0x190>)
 8003fdc:	4291      	cmp	r1, r2
 8003fde:	d117      	bne.n	8004010 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fe0:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fe4:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fe8:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fea:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fee:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ff2:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ff4:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ff6:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003ff8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ffa:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8003ffe:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004000:	b132      	cbz	r2, 8004010 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004002:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004004:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004008:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800400c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800400e:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004010:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8004012:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8004014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8004016:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800401a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800401e:	b11a      	cbz	r2, 8004028 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8004020:	4618      	mov	r0, r3
 8004022:	4790      	blx	r2
  return HAL_OK;
 8004024:	4620      	mov	r0, r4
}
 8004026:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004028:	4610      	mov	r0, r2
}
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	40020010 	.word	0x40020010
 8004030:	40020040 	.word	0x40020040
 8004034:	40020070 	.word	0x40020070
 8004038:	400204b8 	.word	0x400204b8
 800403c:	5802541c 	.word	0x5802541c
 8004040:	58025408 	.word	0x58025408
 8004044:	58025430 	.word	0x58025430
 8004048:	58025480 	.word	0x58025480
 800404c:	58025494 	.word	0x58025494

08004050 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004050:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004052:	688b      	ldr	r3, [r1, #8]
 8004054:	680d      	ldr	r5, [r1, #0]
 8004056:	694c      	ldr	r4, [r1, #20]
 8004058:	432b      	orrs	r3, r5
 800405a:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800405c:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004060:	4323      	orrs	r3, r4
 8004062:	698c      	ldr	r4, [r1, #24]
 8004064:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004066:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800406a:	4323      	orrs	r3, r4
 800406c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800406e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004072:	4d52      	ldr	r5, [pc, #328]	; (80041bc <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004074:	4323      	orrs	r3, r4
 8004076:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004078:	4323      	orrs	r3, r4
 800407a:	4c51      	ldr	r4, [pc, #324]	; (80041c0 <ETH_SetMACConfig+0x170>)
 800407c:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800407e:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004080:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004082:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004084:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004088:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800408a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800408e:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004090:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004094:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004096:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 800409a:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800409c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 80040a0:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80040a6:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040a8:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80040ac:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040ae:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 80040b2:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040b6:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80040ba:	7c08      	ldrb	r0, [r1, #16]
 80040bc:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040c0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040c4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80040c6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040c8:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80040cc:	7f88      	ldrb	r0, [r1, #30]
 80040ce:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040d2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80040d6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040d8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80040dc:	f891 0020 	ldrb.w	r0, [r1, #32]
 80040e0:	fab0 f080 	clz	r0, r0
 80040e4:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040ea:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80040ec:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040ee:	6853      	ldr	r3, [r2, #4]
 80040f0:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80040f2:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040f6:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040fa:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040fe:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004100:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004104:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004108:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800410c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004110:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8004114:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004118:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800411c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800411e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004122:	4828      	ldr	r0, [pc, #160]	; (80041c4 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004124:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004126:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8004128:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800412a:	4018      	ands	r0, r3
 800412c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800412e:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004130:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004134:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004138:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800413a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800413c:	6d08      	ldr	r0, [r1, #80]	; 0x50
 800413e:	402b      	ands	r3, r5
 8004140:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004144:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004148:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800414a:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 800414e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004152:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004156:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004158:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800415c:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004162:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004166:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800416a:	f020 0003 	bic.w	r0, r0, #3
 800416e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004170:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004174:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800417c:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8004180:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8004184:	432b      	orrs	r3, r5
 8004186:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800418a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800418e:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004192:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004196:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800419a:	4323      	orrs	r3, r4
 800419c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041a0:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 80041a4:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80041a8:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041ac:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80041ae:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 80041b2:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80041b4:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	c0f88000 	.word	0xc0f88000
 80041c0:	00048083 	.word	0x00048083
 80041c4:	fffffef0 	.word	0xfffffef0

080041c8 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80041c8:	6803      	ldr	r3, [r0, #0]
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <ETH_SetDMAConfig+0x7c>)
 80041cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d0:	6808      	ldr	r0, [r1, #0]
{
 80041d2:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80041d4:	681c      	ldr	r4, [r3, #0]
 80041d6:	4022      	ands	r2, r4
 80041d8:	4302      	orrs	r2, r0
 80041da:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80041dc:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041de:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80041e0:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80041e2:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041e4:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80041e8:	688c      	ldr	r4, [r1, #8]
 80041ea:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80041ec:	4c16      	ldr	r4, [pc, #88]	; (8004248 <ETH_SetDMAConfig+0x80>)
 80041ee:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041f0:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80041f2:	4322      	orrs	r2, r4
 80041f4:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041f6:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80041f8:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80041fc:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004200:	4812      	ldr	r0, [pc, #72]	; (800424c <ETH_SetDMAConfig+0x84>)
 8004202:	4020      	ands	r0, r4
 8004204:	4302      	orrs	r2, r0
 8004206:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800420a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800420c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800420e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004210:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8004214:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8004218:	690c      	ldr	r4, [r1, #16]
 800421a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800421c:	4c0c      	ldr	r4, [pc, #48]	; (8004250 <ETH_SetDMAConfig+0x88>)
 800421e:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004220:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004222:	4322      	orrs	r2, r4
 8004224:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004228:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800422c:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800422e:	4909      	ldr	r1, [pc, #36]	; (8004254 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004230:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004234:	4021      	ands	r1, r4
}
 8004236:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800423a:	430a      	orrs	r2, r1
 800423c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	ffff87fd 	.word	0xffff87fd
 8004248:	ffff2ffe 	.word	0xffff2ffe
 800424c:	fffec000 	.word	0xfffec000
 8004250:	ffc0efef 	.word	0xffc0efef
 8004254:	7fc0ffff 	.word	0x7fc0ffff

08004258 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800425c:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 800425e:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004260:	688e      	ldr	r6, [r1, #8]
 8004262:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 8004266:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004268:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	2a00      	cmp	r2, #0
 8004270:	f2c0 8124 	blt.w	80044bc <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004274:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8004278:	2a00      	cmp	r2, #0
 800427a:	f040 811f 	bne.w	80044bc <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800427e:	f8d1 c000 	ldr.w	ip, [r1]
 8004282:	f01c 0704 	ands.w	r7, ip, #4
 8004286:	d02d      	beq.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004288:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800428a:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800428e:	4dae      	ldr	r5, [pc, #696]	; (8004548 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 8004290:	ea05 0502 	and.w	r5, r5, r2
 8004294:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004296:	ea45 0502 	orr.w	r5, r5, r2
 800429a:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800429c:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800429e:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80042a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042a4:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80042a6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80042a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80042ac:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80042ae:	d019      	beq.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	fa1f fe82 	uxth.w	lr, r2
 80042b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80042b8:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80042bc:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80042c4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 80042cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042ce:	ea4e 0202 	orr.w	r2, lr, r2
 80042d2:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80042d4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80042d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80042da:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80042dc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80042de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80042e2:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80042e4:	f01c 0810 	ands.w	r8, ip, #16
 80042e8:	d009      	beq.n	80042fe <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	4d97      	ldr	r5, [pc, #604]	; (800454c <ETH_Prepare_Tx_Descriptors+0x2f4>)
 80042ee:	4015      	ands	r5, r2
 80042f0:	698a      	ldr	r2, [r1, #24]
 80042f2:	4315      	orrs	r5, r2
 80042f4:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80042fc:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80042fe:	f01c 0f14 	tst.w	ip, #20
 8004302:	f040 80df 	bne.w	80044c4 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004306:	4622      	mov	r2, r4
 8004308:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800430c:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800430e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 800454c <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004312:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004314:	689d      	ldr	r5, [r3, #8]
 8004316:	ea05 0a0a 	and.w	sl, r5, sl
 800431a:	6875      	ldr	r5, [r6, #4]
 800431c:	ea4a 0505 	orr.w	r5, sl, r5
 8004320:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 8004322:	68b5      	ldr	r5, [r6, #8]
 8004324:	2d00      	cmp	r5, #0
 8004326:	f000 8133 	beq.w	8004590 <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800432a:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800432c:	f8df a220 	ldr.w	sl, [pc, #544]	; 8004550 <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004330:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004332:	689e      	ldr	r6, [r3, #8]
 8004334:	ea06 0a0a 	and.w	sl, r6, sl
 8004338:	686e      	ldr	r6, [r5, #4]
 800433a:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 800433e:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004340:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004342:	f1b8 0f00 	cmp.w	r8, #0
 8004346:	f000 80e0 	beq.w	800450a <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800434a:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 800434e:	6a0e      	ldr	r6, [r1, #32]
 8004350:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004354:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8004554 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004358:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800435a:	68de      	ldr	r6, [r3, #12]
 800435c:	ea06 0c0c 	and.w	ip, r6, ip
 8004360:	69ce      	ldr	r6, [r1, #28]
 8004362:	ea4c 0606 	orr.w	r6, ip, r6
 8004366:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004368:	68de      	ldr	r6, [r3, #12]
 800436a:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 800436e:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004370:	b12f      	cbz	r7, 800437e <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004372:	689f      	ldr	r7, [r3, #8]
 8004374:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004376:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 800437a:	433e      	orrs	r6, r7
 800437c:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800437e:	68de      	ldr	r6, [r3, #12]
 8004380:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8004384:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004386:	68de      	ldr	r6, [r3, #12]
 8004388:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 800438c:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800438e:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004392:	68de      	ldr	r6, [r3, #12]
 8004394:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004398:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800439a:	680e      	ldr	r6, [r1, #0]
 800439c:	07b6      	lsls	r6, r6, #30
 800439e:	d505      	bpl.n	80043ac <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80043a0:	68df      	ldr	r7, [r3, #12]
 80043a2:	68ce      	ldr	r6, [r1, #12]
 80043a4:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 80043a8:	433e      	orrs	r6, r7
 80043aa:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80043ac:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80043b0:	f1b8 0f00 	cmp.w	r8, #0
 80043b4:	f000 80d2 	beq.w	800455c <ETH_Prepare_Tx_Descriptors+0x304>
 80043b8:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80043bc:	4d63      	ldr	r5, [pc, #396]	; (800454c <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80043be:	4e64      	ldr	r6, [pc, #400]	; (8004550 <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80043c0:	46a2      	mov	sl, r4
 80043c2:	e01d      	b.n	8004400 <ETH_Prepare_Tx_Descriptors+0x1a8>
 80043c4:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004554 <ETH_Prepare_Tx_Descriptors+0x2fc>
 80043c8:	ea04 0808 	and.w	r8, r4, r8
 80043cc:	69cc      	ldr	r4, [r1, #28]
 80043ce:	ea48 0404 	orr.w	r4, r8, r4
 80043d2:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80043d4:	68dc      	ldr	r4, [r3, #12]
 80043d6:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 80043da:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 80043dc:	f10c 0c01 	add.w	ip, ip, #1
 80043e0:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80043e4:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 80043e6:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80043ea:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80043ee:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80043f0:	68dc      	ldr	r4, [r3, #12]
 80043f2:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 80043f6:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 80043f8:	f1b8 0f00 	cmp.w	r8, #0
 80043fc:	f000 80af 	beq.w	800455e <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004400:	68dc      	ldr	r4, [r3, #12]
 8004402:	eb0e 0b0c 	add.w	fp, lr, ip
 8004406:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 800440a:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800440c:	1c53      	adds	r3, r2, #1
 800440e:	2b03      	cmp	r3, #3
 8004410:	bf94      	ite	ls
 8004412:	461a      	movls	r2, r3
 8004414:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004416:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800441a:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800441c:	68dc      	ldr	r4, [r3, #12]
 800441e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8004422:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8004424:	68dc      	ldr	r4, [r3, #12]
 8004426:	2c00      	cmp	r4, #0
 8004428:	db30      	blt.n	800448c <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800442a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800442c:	bb74      	cbnz	r4, 800448c <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800442e:	f8d8 4000 	ldr.w	r4, [r8]
 8004432:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004434:	689f      	ldr	r7, [r3, #8]
 8004436:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800443a:	402f      	ands	r7, r5
 800443c:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 800443e:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004442:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8004444:	2f00      	cmp	r7, #0
 8004446:	d05a      	beq.n	80044fe <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004448:	683c      	ldr	r4, [r7, #0]
 800444a:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800444c:	689c      	ldr	r4, [r3, #8]
 800444e:	ea04 0806 	and.w	r8, r4, r6
 8004452:	687c      	ldr	r4, [r7, #4]
 8004454:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8004458:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800445a:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800445e:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004460:	f018 0f10 	tst.w	r8, #16
 8004464:	d1ae      	bne.n	80043c4 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004466:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8004558 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800446a:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800446e:	ea04 0b0b 	and.w	fp, r4, fp
 8004472:	684c      	ldr	r4, [r1, #4]
 8004474:	ea4b 0404 	orr.w	r4, fp, r4
 8004478:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800447a:	d0af      	beq.n	80043dc <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800447c:	68dc      	ldr	r4, [r3, #12]
 800447e:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8004482:	694c      	ldr	r4, [r1, #20]
 8004484:	ea48 0404 	orr.w	r4, r8, r4
 8004488:	60dc      	str	r4, [r3, #12]
 800448a:	e7a7      	b.n	80043dc <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800448c:	4654      	mov	r4, sl
 800448e:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8004492:	f1bb 0f00 	cmp.w	fp, #0
 8004496:	d011      	beq.n	80044bc <ETH_Prepare_Tx_Descriptors+0x264>
 8004498:	2100      	movs	r1, #0
 800449a:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 800449e:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80044a0:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 80044a2:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 80044a4:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 80044a6:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80044a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044ac:	bf98      	it	ls
 80044ae:	462c      	movls	r4, r5
 80044b0:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 80044b2:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044b4:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 80044b8:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80044ba:	d1ee      	bne.n	800449a <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 80044bc:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 80044be:	b003      	add	sp, #12
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044d6:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80044d8:	1c62      	adds	r2, r4, #1
 80044da:	2a03      	cmp	r2, #3
 80044dc:	bf88      	it	hi
 80044de:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044e0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80044e4:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80044e6:	68dd      	ldr	r5, [r3, #12]
 80044e8:	2d00      	cmp	r5, #0
 80044ea:	db5f      	blt.n	80045ac <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80044ec:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80044f0:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80044f4:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80044f8:	f00c 0704 	and.w	r7, ip, #4
 80044fc:	e706      	b.n	800430c <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80044fe:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004500:	4647      	mov	r7, r8
 8004502:	689c      	ldr	r4, [r3, #8]
 8004504:	4034      	ands	r4, r6
 8004506:	609c      	str	r4, [r3, #8]
 8004508:	e7a7      	b.n	800445a <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800450a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8004558 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800450e:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004512:	ea06 0808 	and.w	r8, r6, r8
 8004516:	684e      	ldr	r6, [r1, #4]
 8004518:	ea48 0606 	orr.w	r6, r8, r6
 800451c:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800451e:	d006      	beq.n	800452e <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004520:	68de      	ldr	r6, [r3, #12]
 8004522:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 8004526:	694e      	ldr	r6, [r1, #20]
 8004528:	ea48 0606 	orr.w	r6, r8, r6
 800452c:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800452e:	f01c 0f20 	tst.w	ip, #32
 8004532:	f43f af1d 	beq.w	8004370 <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004536:	68de      	ldr	r6, [r3, #12]
 8004538:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 800453c:	690e      	ldr	r6, [r1, #16]
 800453e:	ea4c 0606 	orr.w	r6, ip, r6
 8004542:	60de      	str	r6, [r3, #12]
 8004544:	e714      	b.n	8004370 <ETH_Prepare_Tx_Descriptors+0x118>
 8004546:	bf00      	nop
 8004548:	ffff0000 	.word	0xffff0000
 800454c:	ffffc000 	.word	0xffffc000
 8004550:	c000ffff 	.word	0xc000ffff
 8004554:	fffc0000 	.word	0xfffc0000
 8004558:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 800455c:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 800455e:	9901      	ldr	r1, [sp, #4]
 8004560:	b1f9      	cbz	r1, 80045a2 <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004562:	6899      	ldr	r1, [r3, #8]
 8004564:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004568:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800456a:	68d9      	ldr	r1, [r3, #12]
 800456c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004570:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004572:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8004576:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004578:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 800457a:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800457c:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800457e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004580:	3301      	adds	r3, #1
 8004582:	4463      	add	r3, ip
 8004584:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004586:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8004588:	2000      	movs	r0, #0
}
 800458a:	b003      	add	sp, #12
 800458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004590:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004592:	4635      	mov	r5, r6
 8004594:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8004598:	4e09      	ldr	r6, [pc, #36]	; (80045c0 <ETH_Prepare_Tx_Descriptors+0x368>)
 800459a:	ea0a 0606 	and.w	r6, sl, r6
 800459e:	609e      	str	r6, [r3, #8]
 80045a0:	e6ce      	b.n	8004340 <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80045a2:	6899      	ldr	r1, [r3, #8]
 80045a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80045a8:	6099      	str	r1, [r3, #8]
 80045aa:	e7de      	b.n	800456a <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80045ac:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80045b0:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80045b4:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 80045b6:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80045b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 80045be:	e77e      	b.n	80044be <ETH_Prepare_Tx_Descriptors+0x266>
 80045c0:	c000ffff 	.word	0xc000ffff

080045c4 <ETH_UpdateDescriptor>:
{
 80045c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 80045c8:	2300      	movs	r3, #0
{
 80045ca:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 80045cc:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 80045d0:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045d2:	f104 0312 	add.w	r3, r4, #18
 80045d6:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 80045da:	b37e      	cbz	r6, 800463c <ETH_UpdateDescriptor+0x78>
 80045dc:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80045de:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80045e2:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 80045e6:	e00c      	b.n	8004602 <ETH_UpdateDescriptor+0x3e>
 80045e8:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 80045ec:	1c63      	adds	r3, r4, #1
 80045ee:	3c03      	subs	r4, #3
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	bf98      	it	ls
 80045f4:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 80045f6:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045f8:	f104 0312 	add.w	r3, r4, #18
 80045fc:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004600:	d011      	beq.n	8004626 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004602:	692b      	ldr	r3, [r5, #16]
 8004604:	b13b      	cbz	r3, 8004616 <ETH_UpdateDescriptor+0x52>
 8004606:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 800460a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1eb      	bne.n	80045e8 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004610:	f8c5 900c 	str.w	r9, [r5, #12]
 8004614:	e7ea      	b.n	80045ec <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 8004616:	a801      	add	r0, sp, #4
 8004618:	f003 fbd8 	bl	8007dcc <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	b113      	cbz	r3, 8004626 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004620:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004622:	602b      	str	r3, [r5, #0]
 8004624:	e7ef      	b.n	8004606 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004628:	42b3      	cmp	r3, r6
 800462a:	d007      	beq.n	800463c <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004634:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004638:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 800463c:	b003      	add	sp, #12
 800463e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004642:	bf00      	nop

08004644 <HAL_ETH_Start_IT>:
{
 8004644:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8004646:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800464a:	2b10      	cmp	r3, #16
 800464c:	d001      	beq.n	8004652 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 800464e:	2001      	movs	r0, #1
}
 8004650:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004652:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8004654:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8004656:	2201      	movs	r2, #1
 8004658:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 800465a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 800465e:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004660:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8004664:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <HAL_ETH_Start_IT+0x98>)
 8004666:	430a      	orrs	r2, r1
 8004668:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800466c:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <HAL_ETH_Start_IT+0x9c>)
 800466e:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004678:	2304      	movs	r3, #4
 800467a:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 800467c:	f7ff ffa2 	bl	80045c4 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004680:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8004682:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004684:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004686:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800468a:	f041 0102 	orr.w	r1, r1, #2
 800468e:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004690:	6811      	ldr	r1, [r2, #0]
 8004692:	f041 0101 	orr.w	r1, r1, #1
 8004696:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004698:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 800469c:	f041 0101 	orr.w	r1, r1, #1
 80046a0:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80046a4:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80046a8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 80046ac:	f041 0101 	orr.w	r1, r1, #1
 80046b0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80046b4:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80046b8:	f041 0101 	orr.w	r1, r1, #1
 80046bc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80046c0:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 80046c4:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 80046c8:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80046cc:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80046d0:	430a      	orrs	r2, r1
 80046d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 80046d6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	0c020060 	.word	0x0c020060
 80046e0:	0c20c000 	.word	0x0c20c000

080046e4 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80046e4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80046e8:	2a23      	cmp	r2, #35	; 0x23
 80046ea:	d001      	beq.n	80046f0 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 80046ec:	2001      	movs	r0, #1
}
 80046ee:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80046f0:	4601      	mov	r1, r0
 80046f2:	4603      	mov	r3, r0
{
 80046f4:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 80046f6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80046fa:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 80046fe:	f851 2b44 	ldr.w	r2, [r1], #68
 8004702:	4c19      	ldr	r4, [pc, #100]	; (8004768 <HAL_ETH_Stop_IT+0x84>)
 8004704:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8004708:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 800470c:	402c      	ands	r4, r5
 800470e:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8004712:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8004716:	f024 0401 	bic.w	r4, r4, #1
 800471a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800471e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8004722:	f024 0401 	bic.w	r4, r4, #1
 8004726:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800472a:	6810      	ldr	r0, [r2, #0]
 800472c:	f020 0001 	bic.w	r0, r0, #1
 8004730:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004732:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 8004736:	f040 0001 	orr.w	r0, r0, #1
 800473a:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800473e:	6810      	ldr	r0, [r2, #0]
 8004740:	f020 0002 	bic.w	r0, r0, #2
 8004744:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004746:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800474a:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800474c:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800474e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004752:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004754:	d1f7      	bne.n	8004746 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8004756:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8004758:	2110      	movs	r1, #16
    return HAL_OK;
 800475a:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 800475c:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 800475e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8004762:	bc30      	pop	{r4, r5}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	ffff2f3e 	.word	0xffff2f3e

0800476c <HAL_ETH_Transmit_IT>:
{
 800476c:	b510      	push	{r4, lr}
 800476e:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8004770:	b329      	cbz	r1, 80047be <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004772:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8004776:	2a23      	cmp	r2, #35	; 0x23
 8004778:	d001      	beq.n	800477e <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 800477a:	2001      	movs	r0, #1
}
 800477c:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800477e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004780:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004782:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004784:	f7ff fd68 	bl	8004258 <ETH_Prepare_Tx_Descriptors>
 8004788:	b138      	cbz	r0, 800479a <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800478a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 800478e:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004790:	f043 0302 	orr.w	r3, r3, #2
 8004794:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8004798:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 800479a:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800479e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 80047a0:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80047a2:	1c53      	adds	r3, r2, #1
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	bf88      	it	hi
 80047a8:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80047aa:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80047ac:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80047ae:	3306      	adds	r3, #6
 80047b0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80047b4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80047b8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 80047bc:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80047be:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80047c2:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80047c4:	4303      	orrs	r3, r0
 80047c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80047ca:	bd10      	pop	{r4, pc}

080047cc <HAL_ETH_ReadData>:
{
 80047cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d0:	b085      	sub	sp, #20
 80047d2:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 80047d4:	9103      	str	r1, [sp, #12]
 80047d6:	2900      	cmp	r1, #0
 80047d8:	d06d      	beq.n	80048b6 <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80047da:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80047de:	2b23      	cmp	r3, #35	; 0x23
 80047e0:	d15e      	bne.n	80048a0 <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 80047e2:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047e6:	f108 0312 	add.w	r3, r8, #18
 80047ea:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80047ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80047f0:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80047f2:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 80047f6:	2a00      	cmp	r2, #0
 80047f8:	db6a      	blt.n	80048d0 <HAL_ETH_ReadData+0x104>
 80047fa:	f1bb 0f00 	cmp.w	fp, #0
 80047fe:	d069      	beq.n	80048d4 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8004800:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004804:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8004808:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 800480a:	46ca      	mov	sl, r9
 800480c:	e003      	b.n	8004816 <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 800480e:	45cb      	cmp	fp, r9
 8004810:	d93f      	bls.n	8004892 <HAL_ETH_ReadData+0xc6>
 8004812:	2e00      	cmp	r6, #0
 8004814:	d13d      	bne.n	8004892 <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004816:	68eb      	ldr	r3, [r5, #12]
 8004818:	005e      	lsls	r6, r3, #1
 800481a:	d503      	bpl.n	8004824 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800481c:	686b      	ldr	r3, [r5, #4]
 800481e:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004824:	68eb      	ldr	r3, [r5, #12]
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	d401      	bmi.n	800482e <HAL_ETH_ReadData+0x62>
 800482a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800482c:	b30e      	cbz	r6, 8004872 <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800482e:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004830:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004832:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 8004834:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 8004836:	bf48      	it	mi
 8004838:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800483c:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 8004840:	d007      	beq.n	8004852 <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004842:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8004844:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004848:	f3c7 070e 	ubfx	r7, r7, #0, #15
 800484c:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800484e:	68eb      	ldr	r3, [r5, #12]
 8004850:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004852:	b2bb      	uxth	r3, r7
 8004854:	692a      	ldr	r2, [r5, #16]
 8004856:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800485a:	f003 fadb 	bl	8007e14 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 800485e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004860:	3301      	adds	r3, #1
 8004862:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004866:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 800486a:	443b      	add	r3, r7
 800486c:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 800486e:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004872:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8004876:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 800487a:	2b03      	cmp	r3, #3
 800487c:	bf8c      	ite	hi
 800487e:	f1a8 0803 	subhi.w	r8, r8, #3
 8004882:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004884:	f108 0312 	add.w	r3, r8, #18
 8004888:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800488c:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 800488e:	2b00      	cmp	r3, #0
 8004890:	dabd      	bge.n	800480e <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004892:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004894:	444b      	add	r3, r9
 8004896:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004898:	b9b3      	cbnz	r3, 80048c8 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 800489a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800489e:	b91e      	cbnz	r6, 80048a8 <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 80048a0:	2001      	movs	r0, #1
}
 80048a2:	b005      	add	sp, #20
 80048a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 80048a8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 80048aa:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 80048ac:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 80048ae:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 80048b0:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 80048b2:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80048b4:	e7f5      	b.n	80048a2 <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80048b6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80048ba:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80048bc:	4303      	orrs	r3, r0
 80048be:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80048c2:	b005      	add	sp, #20
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 80048c8:	4620      	mov	r0, r4
 80048ca:	f7ff fe7b 	bl	80045c4 <ETH_UpdateDescriptor>
 80048ce:	e7e4      	b.n	800489a <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0e5      	beq.n	80048a0 <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 80048d4:	f7ff fe76 	bl	80045c4 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 80048d8:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 80048dc:	e7e0      	b.n	80048a0 <HAL_ETH_ReadData+0xd4>
 80048de:	bf00      	nop

080048e0 <HAL_ETH_ReleaseTxPacket>:
{
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80048e4:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048e8:	b17d      	cbz	r5, 800490a <HAL_ETH_ReleaseTxPacket+0x2a>
 80048ea:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048ec:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80048ee:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 80048f2:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80048f4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80048f8:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 80048fc:	b140      	cbz	r0, 8004910 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80048fe:	68f3      	ldr	r3, [r6, #12]
 8004900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	da08      	bge.n	800491c <HAL_ETH_ReleaseTxPacket+0x3c>
}
 800490a:	2000      	movs	r0, #0
 800490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004910:	3401      	adds	r4, #1
 8004912:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004916:	2d00      	cmp	r5, #0
 8004918:	d1e9      	bne.n	80048ee <HAL_ETH_ReleaseTxPacket+0xe>
 800491a:	e7f6      	b.n	800490a <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800491c:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800491e:	f003 faa9 	bl	8007e74 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004922:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004926:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 800492a:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 800492c:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800492e:	2d00      	cmp	r5, #0
 8004930:	d1dd      	bne.n	80048ee <HAL_ETH_ReleaseTxPacket+0xe>
 8004932:	e7ea      	b.n	800490a <HAL_ETH_ReleaseTxPacket+0x2a>

08004934 <HAL_ETH_PMTCallback>:
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <HAL_ETH_EEECallback>:
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <HAL_ETH_WakeUpCallback>:
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004940:	6803      	ldr	r3, [r0, #0]
 8004942:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8004946:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 800494a:	0649      	lsls	r1, r1, #25
{
 800494c:	b510      	push	{r4, lr}
 800494e:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004950:	d504      	bpl.n	800495c <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004952:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8004956:	0649      	lsls	r1, r1, #25
 8004958:	f100 808a 	bmi.w	8004a70 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800495c:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8004960:	07c8      	lsls	r0, r1, #31
 8004962:	d503      	bpl.n	800496c <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004964:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8004968:	07c9      	lsls	r1, r1, #31
 800496a:	d476      	bmi.n	8004a5a <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800496c:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8004970:	0448      	lsls	r0, r1, #17
 8004972:	d503      	bpl.n	800497c <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004974:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8004978:	0449      	lsls	r1, r1, #17
 800497a:	d41b      	bmi.n	80049b4 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 800497c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004980:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8004984:	d133      	bne.n	80049ee <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004986:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800498a:	06d0      	lsls	r0, r2, #27
 800498c:	d447      	bmi.n	8004a1e <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800498e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004992:	0691      	lsls	r1, r2, #26
 8004994:	d454      	bmi.n	8004a40 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800499e:	0252      	lsls	r2, r2, #9
 80049a0:	d400      	bmi.n	80049a4 <HAL_ETH_IRQHandler+0x64>
}
 80049a2:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80049a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 80049a8:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80049aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 80049ae:	f7ff ffc5 	bl	800493c <HAL_ETH_WakeUpCallback>
}
 80049b2:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049b4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80049c0:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 80049c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80049c8:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80049cc:	d15a      	bne.n	8004a84 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80049ce:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80049d2:	400b      	ands	r3, r1
 80049d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80049d8:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 80049dc:	4620      	mov	r0, r4
 80049de:	f003 f853 	bl	8007a88 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80049e8:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 80049ec:	d0cb      	beq.n	8004986 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80049ee:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 80049f2:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 80049f4:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80049f6:	f042 0210 	orr.w	r2, r2, #16
 80049fa:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80049fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a02:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8004a06:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8004a0a:	f003 f83d 	bl	8007a88 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004a0e:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004a10:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004a12:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004a16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a1a:	06d0      	lsls	r0, r2, #27
 8004a1c:	d5b7      	bpl.n	800498e <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004a1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 8004a22:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004a24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a28:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8004a2c:	f7ff ff82 	bl	8004934 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a30:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004a32:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a34:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004a38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a3c:	0691      	lsls	r1, r2, #26
 8004a3e:	d5aa      	bpl.n	8004996 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004a40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 8004a44:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 8004a4e:	f7ff ff73 	bl	8004938 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8004a58:	e79d      	b.n	8004996 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004a5a:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 8004a5e:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004a60:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 8004a64:	f003 f80a 	bl	8007a7c <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8004a6e:	e77d      	b.n	800496c <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004a70:	f248 0340 	movw	r3, #32832	; 0x8040
 8004a74:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 8004a78:	f002 fffa 	bl	8007a70 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8004a82:	e76b      	b.n	800495c <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004a84:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8004a88:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004a8a:	4003      	ands	r3, r0
 8004a8c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004a90:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8004a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a98:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8004a9c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8004aa0:	e79c      	b.n	80049dc <HAL_ETH_IRQHandler+0x9c>
 8004aa2:	bf00      	nop

08004aa4 <HAL_ETH_ReadPHYRegister>:
{
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004aa8:	6800      	ldr	r0, [r0, #0]
{
 8004aaa:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004aac:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004ab0:	07db      	lsls	r3, r3, #31
 8004ab2:	d501      	bpl.n	8004ab8 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8004ab4:	2001      	movs	r0, #1
}
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004ab8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004abc:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8004ac0:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004ac4:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 8004ac8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004acc:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004ad0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8004ad4:	f7ff f92e 	bl	8003d34 <HAL_GetTick>
 8004ad8:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ada:	e005      	b.n	8004ae8 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004adc:	f7ff f92a 	bl	8003d34 <HAL_GetTick>
 8004ae0:	1b82      	subs	r2, r0, r6
 8004ae2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8004ae6:	d8e5      	bhi.n	8004ab4 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ae8:	6821      	ldr	r1, [r4, #0]
 8004aea:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 8004aee:	f012 0201 	ands.w	r2, r2, #1
 8004af2:	d1f3      	bne.n	8004adc <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004af4:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8004af8:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	602b      	str	r3, [r5, #0]
}
 8004afe:	bd70      	pop	{r4, r5, r6, pc}

08004b00 <HAL_ETH_WritePHYRegister>:
{
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004b04:	6800      	ldr	r0, [r0, #0]
 8004b06:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8004b0a:	07ed      	lsls	r5, r5, #31
 8004b0c:	d501      	bpl.n	8004b12 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8004b0e:	2001      	movs	r0, #1
}
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004b12:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8004b1c:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004b20:	480f      	ldr	r0, [pc, #60]	; (8004b60 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b22:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004b26:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004b2a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004b2e:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004b32:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004b36:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8004b3a:	f7ff f8fb 	bl	8003d34 <HAL_GetTick>
 8004b3e:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b40:	e005      	b.n	8004b4e <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004b42:	f7ff f8f7 	bl	8003d34 <HAL_GetTick>
 8004b46:	1b43      	subs	r3, r0, r5
 8004b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b4c:	d8df      	bhi.n	8004b0e <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b54:	f013 0301 	ands.w	r3, r3, #1
 8004b58:	d1f3      	bne.n	8004b42 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8004b5a:	4618      	mov	r0, r3
}
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	bf00      	nop
 8004b60:	40028000 	.word	0x40028000

08004b64 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8004b64:	2900      	cmp	r1, #0
 8004b66:	f000 80c4 	beq.w	8004cf2 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b6a:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8004b6c:	2000      	movs	r0, #0
{
 8004b6e:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b70:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004b72:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b74:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004b78:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004b7c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004b80:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004b82:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004b84:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004b88:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8004b90:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8004b94:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004b98:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8004b9a:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004b9e:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8004ba6:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8004baa:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004bac:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004bae:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004bb2:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8004bba:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004bbc:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004bbe:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004bc0:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004bc4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004bc8:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8004bd2:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8004bda:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8004bde:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004be6:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8004bea:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8004bf2:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8004bfa:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8004c02:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c04:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004c06:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c0a:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c0c:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c0e:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c10:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c14:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c18:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c1a:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c1c:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c1e:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c20:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c24:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c28:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c2a:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8004c32:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8004c36:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8004c40:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c44:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004c46:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c4a:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004c4e:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8004c50:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004c54:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c58:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c5a:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c5c:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c60:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c64:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c66:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c6a:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c6e:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c72:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c76:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c78:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c7e:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8004c82:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8004c86:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c8a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c8e:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c92:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c94:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c96:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004c98:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004c9c:	f002 0201 	and.w	r2, r2, #1
 8004ca0:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004ca4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 8004ca8:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004cac:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004cb0:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004cb4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004cb8:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004cbc:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8004cc0:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004cc4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 8004cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004ccc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004cd0:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004cd4:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8004cd8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004cdc:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ce0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004ce4:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8004ce8:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004cec:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 8004cf0:	4770      	bx	lr
    return HAL_ERROR;
 8004cf2:	2001      	movs	r0, #1
}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8004cf8:	b131      	cbz	r1, 8004d08 <HAL_ETH_SetMACConfig+0x10>
{
 8004cfa:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8004cfc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d003      	beq.n	8004d0c <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8004d04:	2001      	movs	r0, #1
}
 8004d06:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004d08:	2001      	movs	r0, #1
}
 8004d0a:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8004d0c:	f7ff f9a0 	bl	8004050 <ETH_SetMACConfig>
    return HAL_OK;
 8004d10:	2000      	movs	r0, #0
}
 8004d12:	bd08      	pop	{r3, pc}

08004d14 <HAL_ETH_SetMDIOClockRange>:
{
 8004d14:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d16:	6803      	ldr	r3, [r0, #0]
{
 8004d18:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d1a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8004d1e:	f000 ff73 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_ETH_SetMDIOClockRange+0x64>)
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004d26:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004d2a:	4403      	add	r3, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d205      	bcs.n	8004d3c <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004d30:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8004d3e:	4a11      	ldr	r2, [pc, #68]	; (8004d84 <HAL_ETH_SetMDIOClockRange+0x70>)
 8004d40:	4403      	add	r3, r0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d805      	bhi.n	8004d52 <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004d46:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8004d50:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <HAL_ETH_SetMDIOClockRange+0x78>)
 8004d56:	4403      	add	r3, r0
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d3eb      	bcc.n	8004d34 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	; (8004d94 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004d60:	4403      	add	r3, r0
 8004d62:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d64:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004d66:	bf94      	ite	ls
 8004d68:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d6c:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d70:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8004d74:	bd38      	pop	{r3, r4, r5, pc}
 8004d76:	bf00      	nop
 8004d78:	feced300 	.word	0xfeced300
 8004d7c:	00e4e1c0 	.word	0x00e4e1c0
 8004d80:	fde9f140 	.word	0xfde9f140
 8004d84:	017d783f 	.word	0x017d783f
 8004d88:	fc6c7900 	.word	0xfc6c7900
 8004d8c:	02625a00 	.word	0x02625a00
 8004d90:	fa0a1f00 	.word	0xfa0a1f00
 8004d94:	02faf07f 	.word	0x02faf07f

08004d98 <HAL_ETH_Init>:
  if (heth == NULL)
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	f000 810e 	beq.w	8004fba <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004d9e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8004da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da4:	4605      	mov	r5, r0
 8004da6:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80b2 	beq.w	8004f12 <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dae:	4b84      	ldr	r3, [pc, #528]	; (8004fc0 <HAL_ETH_Init+0x228>)
 8004db0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8004db4:	f042 0202 	orr.w	r2, r2, #2
 8004db8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8004dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004dc0:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	f040 8095 	bne.w	8004efa <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004dd0:	f7fe ffbc 	bl	8003d4c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dd4:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8004dd6:	4a7b      	ldr	r2, [pc, #492]	; (8004fc4 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8004ddc:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004de6:	f7fe ffa5 	bl	8003d34 <HAL_GetTick>
 8004dea:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004dec:	e006      	b.n	8004dfc <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004dee:	f7fe ffa1 	bl	8003d34 <HAL_GetTick>
 8004df2:	1b83      	subs	r3, r0, r6
 8004df4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004df8:	f200 8082 	bhi.w	8004f00 <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e02:	681c      	ldr	r4, [r3, #0]
 8004e04:	f014 0401 	ands.w	r4, r4, #1
 8004e08:	d1f1      	bne.n	8004dee <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8004e0a:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e0c:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8004e0e:	f7ff ff81 	bl	8004d14 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e12:	f000 fef9 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8004e16:	4b6c      	ldr	r3, [pc, #432]	; (8004fc8 <HAL_ETH_Init+0x230>)
 8004e18:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e1a:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e1e:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e26:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e28:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e2a:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8004e2c:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004e30:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e34:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004e36:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8004e38:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004e3e:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004e42:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004e46:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e48:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e4c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e50:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 8004e56:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004e5a:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004e5e:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004e62:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e64:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e68:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004e6c:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e6e:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004e72:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004e76:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8004e78:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e7c:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e7e:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e82:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8004e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e8a:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 8004e8c:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e8e:	2320      	movs	r3, #32
 8004e90:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004e94:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_ETH_Init+0x234>)
 8004e96:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8004e98:	f240 1301 	movw	r3, #257	; 0x101
 8004e9c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004ea0:	f7ff f8d6 	bl	8004050 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ea8:	a902      	add	r1, sp, #8
 8004eaa:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004eac:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004eb0:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004eb2:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004eb4:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004eb8:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004eba:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ebc:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004ebe:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004ec2:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004ec6:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004eca:	f7ff f97d 	bl	80041c8 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004ece:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004ed2:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8004ed6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ede:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004ee2:	696b      	ldr	r3, [r5, #20]
 8004ee4:	f013 0203 	ands.w	r2, r3, #3
 8004ee8:	d019      	beq.n	8004f1e <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 8004eea:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8004eec:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004eee:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8004ef2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8004ef6:	b025      	add	sp, #148	; 0x94
 8004ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004efa:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004efe:	e767      	b.n	8004dd0 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f00:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f02:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f06:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f0a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8004f0e:	b025      	add	sp, #148	; 0x94
 8004f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f12:	2323      	movs	r3, #35	; 0x23
 8004f14:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8004f18:	f002 feb4 	bl	8007c84 <HAL_ETH_MspInit>
 8004f1c:	e747      	b.n	8004dae <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004f1e:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 8004f22:	482b      	ldr	r0, [pc, #172]	; (8004fd0 <HAL_ETH_Init+0x238>)
 8004f24:	68ee      	ldr	r6, [r5, #12]
 8004f26:	4020      	ands	r0, r4
 8004f28:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8004f2c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8004f30:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004f32:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f36:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f3e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f40:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f42:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f46:	3318      	adds	r3, #24
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d1f6      	bne.n	8004f3a <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 8004f4c:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004f4e:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8004f50:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004f52:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8004f56:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004f5a:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004f5c:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8004f60:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004f62:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f66:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004f6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004f6c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004f6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004f70:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004f72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004f74:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004f76:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f7a:	42b0      	cmp	r0, r6
 8004f7c:	f103 0318 	add.w	r3, r3, #24
 8004f80:	d1f3      	bne.n	8004f6a <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004f82:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004f84:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004f86:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004f88:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004f8c:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004f90:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 8004f94:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004f96:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004f9a:	3448      	adds	r4, #72	; 0x48
 8004f9c:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004fa0:	8899      	ldrh	r1, [r3, #4]
 8004fa2:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8004fa6:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004fa8:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004faa:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004fae:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004fb2:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8004fb6:	b025      	add	sp, #148	; 0x94
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004fba:	2001      	movs	r0, #1
}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	58000400 	.word	0x58000400
 8004fc8:	431bde83 	.word	0x431bde83
 8004fcc:	01010000 	.word	0x01010000
 8004fd0:	ffff8001 	.word	0xffff8001

08004fd4 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8004fd4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop

08004fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fe0:	680c      	ldr	r4, [r1, #0]
{
 8004fe2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fe4:	2c00      	cmp	r4, #0
 8004fe6:	f000 80a7 	beq.w	8005138 <HAL_GPIO_Init+0x15c>
 8004fea:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fee:	4f8a      	ldr	r7, [pc, #552]	; (8005218 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8004ff0:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8004ff6:	ea12 0e04 	ands.w	lr, r2, r4
 8004ffa:	f000 8096 	beq.w	800512a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ffe:	684d      	ldr	r5, [r1, #4]
 8005000:	f005 0903 	and.w	r9, r5, #3
 8005004:	f109 36ff 	add.w	r6, r9, #4294967295
 8005008:	2e01      	cmp	r6, #1
 800500a:	f240 8098 	bls.w	800513e <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800500e:	f1b9 0f03 	cmp.w	r9, #3
 8005012:	f040 80d2 	bne.w	80051ba <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005016:	fa09 f20c 	lsl.w	r2, r9, ip
 800501a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800501e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005020:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005024:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005028:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800502c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800502e:	d07c      	beq.n	800512a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005030:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005034:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005038:	f003 0903 	and.w	r9, r3, #3
 800503c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503e:	f042 0202 	orr.w	r2, r2, #2
 8005042:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005046:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800504a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800504e:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8005052:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005056:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	f002 0202 	and.w	r2, r2, #2
 800505e:	9201      	str	r2, [sp, #4]
 8005060:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005062:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005066:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800506a:	4e6c      	ldr	r6, [pc, #432]	; (800521c <HAL_GPIO_Init+0x240>)
 800506c:	42b0      	cmp	r0, r6
 800506e:	d028      	beq.n	80050c2 <HAL_GPIO_Init+0xe6>
 8005070:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005074:	42b0      	cmp	r0, r6
 8005076:	f000 80ac 	beq.w	80051d2 <HAL_GPIO_Init+0x1f6>
 800507a:	4e69      	ldr	r6, [pc, #420]	; (8005220 <HAL_GPIO_Init+0x244>)
 800507c:	42b0      	cmp	r0, r6
 800507e:	f000 80ad 	beq.w	80051dc <HAL_GPIO_Init+0x200>
 8005082:	4e68      	ldr	r6, [pc, #416]	; (8005224 <HAL_GPIO_Init+0x248>)
 8005084:	42b0      	cmp	r0, r6
 8005086:	f000 809f 	beq.w	80051c8 <HAL_GPIO_Init+0x1ec>
 800508a:	4e67      	ldr	r6, [pc, #412]	; (8005228 <HAL_GPIO_Init+0x24c>)
 800508c:	42b0      	cmp	r0, r6
 800508e:	f000 80af 	beq.w	80051f0 <HAL_GPIO_Init+0x214>
 8005092:	4e66      	ldr	r6, [pc, #408]	; (800522c <HAL_GPIO_Init+0x250>)
 8005094:	42b0      	cmp	r0, r6
 8005096:	f000 80b0 	beq.w	80051fa <HAL_GPIO_Init+0x21e>
 800509a:	4e65      	ldr	r6, [pc, #404]	; (8005230 <HAL_GPIO_Init+0x254>)
 800509c:	42b0      	cmp	r0, r6
 800509e:	f000 80a2 	beq.w	80051e6 <HAL_GPIO_Init+0x20a>
 80050a2:	4e64      	ldr	r6, [pc, #400]	; (8005234 <HAL_GPIO_Init+0x258>)
 80050a4:	42b0      	cmp	r0, r6
 80050a6:	f000 80ad 	beq.w	8005204 <HAL_GPIO_Init+0x228>
 80050aa:	4e63      	ldr	r6, [pc, #396]	; (8005238 <HAL_GPIO_Init+0x25c>)
 80050ac:	42b0      	cmp	r0, r6
 80050ae:	f000 80ae 	beq.w	800520e <HAL_GPIO_Init+0x232>
 80050b2:	4e62      	ldr	r6, [pc, #392]	; (800523c <HAL_GPIO_Init+0x260>)
 80050b4:	42b0      	cmp	r0, r6
 80050b6:	bf0c      	ite	eq
 80050b8:	2609      	moveq	r6, #9
 80050ba:	260a      	movne	r6, #10
 80050bc:	fa06 f609 	lsl.w	r6, r6, r9
 80050c0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050c2:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ca:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80050ce:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 80050d2:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80050d4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80050d8:	bf0c      	ite	eq
 80050da:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80050dc:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050e0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 80050e4:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 80050e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80050ec:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80050f0:	bf0c      	ite	eq
 80050f2:	4032      	andeq	r2, r6
          temp |= iocurrent;
 80050f4:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050f8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 80050fc:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005100:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005104:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8005108:	bf0c      	ite	eq
 800510a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800510c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005110:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005112:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8005116:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800511a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 800511e:	bf54      	ite	pl
 8005120:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8005122:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8005126:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 800512a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800512c:	f10c 0c02 	add.w	ip, ip, #2
 8005130:	fa34 f203 	lsrs.w	r2, r4, r3
 8005134:	f47f af5d 	bne.w	8004ff2 <HAL_GPIO_Init+0x16>
  }
}
 8005138:	b003      	add	sp, #12
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800513e:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8005142:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005144:	fa08 f80c 	lsl.w	r8, r8, ip
 8005148:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800514c:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800514e:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005152:	fa06 f60c 	lsl.w	r6, r6, ip
 8005156:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 800515a:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515c:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8005160:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005164:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005166:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516a:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800516c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800516e:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005170:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005174:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005176:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800517a:	fa06 f60c 	lsl.w	r6, r6, ip
 800517e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8005182:	fa09 f20c 	lsl.w	r2, r9, ip
 8005186:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005188:	f47f af49 	bne.w	800501e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800518c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005190:	f003 0b07 	and.w	fp, r3, #7
 8005194:	260f      	movs	r6, #15
 8005196:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800519a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800519e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051a2:	fa06 f60b 	lsl.w	r6, r6, fp
 80051a6:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051aa:	690e      	ldr	r6, [r1, #16]
 80051ac:	fa06 f60b 	lsl.w	r6, r6, fp
 80051b0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80051b4:	f8c9 6020 	str.w	r6, [r9, #32]
 80051b8:	e731      	b.n	800501e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051ba:	f04f 0803 	mov.w	r8, #3
 80051be:	fa08 f80c 	lsl.w	r8, r8, ip
 80051c2:	ea6f 0808 	mvn.w	r8, r8
 80051c6:	e7d2      	b.n	800516e <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051c8:	2603      	movs	r6, #3
 80051ca:	fa06 f609 	lsl.w	r6, r6, r9
 80051ce:	4332      	orrs	r2, r6
 80051d0:	e777      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 80051d2:	2601      	movs	r6, #1
 80051d4:	fa06 f609 	lsl.w	r6, r6, r9
 80051d8:	4332      	orrs	r2, r6
 80051da:	e772      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 80051dc:	2602      	movs	r6, #2
 80051de:	fa06 f609 	lsl.w	r6, r6, r9
 80051e2:	4332      	orrs	r2, r6
 80051e4:	e76d      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 80051e6:	2606      	movs	r6, #6
 80051e8:	fa06 f609 	lsl.w	r6, r6, r9
 80051ec:	4332      	orrs	r2, r6
 80051ee:	e768      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 80051f0:	2604      	movs	r6, #4
 80051f2:	fa06 f609 	lsl.w	r6, r6, r9
 80051f6:	4332      	orrs	r2, r6
 80051f8:	e763      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 80051fa:	2605      	movs	r6, #5
 80051fc:	fa06 f609 	lsl.w	r6, r6, r9
 8005200:	4332      	orrs	r2, r6
 8005202:	e75e      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 8005204:	2607      	movs	r6, #7
 8005206:	fa06 f609 	lsl.w	r6, r6, r9
 800520a:	4332      	orrs	r2, r6
 800520c:	e759      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 800520e:	2608      	movs	r6, #8
 8005210:	fa06 f609 	lsl.w	r6, r6, r9
 8005214:	4332      	orrs	r2, r6
 8005216:	e754      	b.n	80050c2 <HAL_GPIO_Init+0xe6>
 8005218:	58024400 	.word	0x58024400
 800521c:	58020000 	.word	0x58020000
 8005220:	58020800 	.word	0x58020800
 8005224:	58020c00 	.word	0x58020c00
 8005228:	58021000 	.word	0x58021000
 800522c:	58021400 	.word	0x58021400
 8005230:	58021800 	.word	0x58021800
 8005234:	58021c00 	.word	0x58021c00
 8005238:	58022000 	.word	0x58022000
 800523c:	58022400 	.word	0x58022400

08005240 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005240:	b902      	cbnz	r2, 8005244 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005242:	0409      	lsls	r1, r1, #16
 8005244:	6181      	str	r1, [r0, #24]
  }
}
 8005246:	4770      	bx	lr

08005248 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005248:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800524a:	ea01 0203 	and.w	r2, r1, r3
 800524e:	ea21 0103 	bic.w	r1, r1, r3
 8005252:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005256:	6181      	str	r1, [r0, #24]
}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop

0800525c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005264:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005268:	4201      	tst	r1, r0
 800526a:	d100      	bne.n	800526e <HAL_GPIO_EXTI_IRQHandler+0xe>
 800526c:	4770      	bx	lr
{
 800526e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005270:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005274:	f7ff fff2 	bl	800525c <HAL_GPIO_EXTI_Callback>
}
 8005278:	bd08      	pop	{r3, pc}
 800527a:	bf00      	nop

0800527c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800527c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800527e:	4c10      	ldr	r4, [pc, #64]	; (80052c0 <HAL_PWREx_ConfigSupply+0x44>)
 8005280:	68e3      	ldr	r3, [r4, #12]
 8005282:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005286:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005288:	d105      	bne.n	8005296 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800528a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800528e:	1a18      	subs	r0, r3, r0
 8005290:	bf18      	it	ne
 8005292:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005294:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	4303      	orrs	r3, r0
 800529c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800529e:	f7fe fd49 	bl	8003d34 <HAL_GetTick>
 80052a2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052a4:	e005      	b.n	80052b2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052a6:	f7fe fd45 	bl	8003d34 <HAL_GetTick>
 80052aa:	1b40      	subs	r0, r0, r5
 80052ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80052b0:	d804      	bhi.n	80052bc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	049b      	lsls	r3, r3, #18
 80052b6:	d5f6      	bpl.n	80052a6 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 80052b8:	2000      	movs	r0, #0
}
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80052bc:	2001      	movs	r0, #1
}
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	58024800 	.word	0x58024800

080052c4 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052c4:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80052c6:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80052ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80052ce:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80052d4:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80052d8:	d038      	beq.n	800534c <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052da:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052de:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e2:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052e6:	fb05 f101 	mul.w	r1, r5, r1
 80052ea:	2a01      	cmp	r2, #1
 80052ec:	ee07 1a90 	vmov	s15, r1
 80052f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80052f4:	d002      	beq.n	80052fc <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80052f6:	2a02      	cmp	r2, #2
 80052f8:	d04e      	beq.n	8005398 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80052fa:	b34a      	cbz	r2, 8005350 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052fc:	ee07 0a90 	vmov	s15, r0
 8005300:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 80053b8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8005304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800530e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80053bc <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800531e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005322:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005326:	ee77 7a86 	vadd.f32	s15, s15, s12
 800532a:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005336:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005348:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800534c:	bc30      	pop	{r4, r5}
 800534e:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	0692      	lsls	r2, r2, #26
 8005354:	d527      	bpl.n	80053a6 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005356:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005358:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800535c:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800535e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005364:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80053bc <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8005370:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005374:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005376:	ee06 3a90 	vmov	s13, r3
 800537a:	ee06 2a10 	vmov	s12, r2
 800537e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005382:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005386:	eee7 6a05 	vfma.f32	s13, s14, s10
 800538a:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800538e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005392:	ee66 6a87 	vmul.f32	s13, s13, s14
 8005396:	e7ca      	b.n	800532e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005398:	ee07 0a90 	vmov	s15, r0
 800539c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80053c4 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80053a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a4:	e7b0      	b.n	8005308 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053a6:	ee07 0a90 	vmov	s15, r0
 80053aa:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80053c8 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80053ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b2:	e7a9      	b.n	8005308 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80053b4:	58024400 	.word	0x58024400
 80053b8:	4a742400 	.word	0x4a742400
 80053bc:	39000000 	.word	0x39000000
 80053c0:	03d09000 	.word	0x03d09000
 80053c4:	4bbebc20 	.word	0x4bbebc20
 80053c8:	4c742400 	.word	0x4c742400

080053cc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f000 81e8 	beq.w	80057a2 <HAL_RCC_OscConfig+0x3d6>
{
 80053d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d4:	6803      	ldr	r3, [r0, #0]
 80053d6:	4604      	mov	r4, r0
 80053d8:	07d9      	lsls	r1, r3, #31
 80053da:	d52e      	bpl.n	800543a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053dc:	49a4      	ldr	r1, [pc, #656]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 80053de:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053e0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053e6:	2a10      	cmp	r2, #16
 80053e8:	f000 8107 	beq.w	80055fa <HAL_RCC_OscConfig+0x22e>
 80053ec:	2a18      	cmp	r2, #24
 80053ee:	f000 80ff 	beq.w	80055f0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f8:	f000 812a 	beq.w	8005650 <HAL_RCC_OscConfig+0x284>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8168 	beq.w	80056d2 <HAL_RCC_OscConfig+0x306>
 8005402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005406:	4b9a      	ldr	r3, [pc, #616]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	f000 8269 	beq.w	80058e0 <HAL_RCC_OscConfig+0x514>
 800540e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800541a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800541c:	f7fe fc8a 	bl	8003d34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005420:	4e93      	ldr	r6, [pc, #588]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8005422:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005424:	e005      	b.n	8005432 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005426:	f7fe fc85 	bl	8003d34 <HAL_GetTick>
 800542a:	1b40      	subs	r0, r0, r5
 800542c:	2864      	cmp	r0, #100	; 0x64
 800542e:	f200 814e 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005432:	6833      	ldr	r3, [r6, #0]
 8005434:	039b      	lsls	r3, r3, #14
 8005436:	d5f6      	bpl.n	8005426 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	079d      	lsls	r5, r3, #30
 800543c:	f100 808a 	bmi.w	8005554 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005440:	06d9      	lsls	r1, r3, #27
 8005442:	d533      	bpl.n	80054ac <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005444:	4a8a      	ldr	r2, [pc, #552]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005446:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005448:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800544e:	2b08      	cmp	r3, #8
 8005450:	f000 80e3 	beq.w	800561a <HAL_RCC_OscConfig+0x24e>
 8005454:	2b18      	cmp	r3, #24
 8005456:	f000 80db 	beq.w	8005610 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800545a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800545c:	4d84      	ldr	r5, [pc, #528]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 816f 	beq.w	8005742 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800546c:	f7fe fc62 	bl	8003d34 <HAL_GetTick>
 8005470:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005472:	e005      	b.n	8005480 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005474:	f7fe fc5e 	bl	8003d34 <HAL_GetTick>
 8005478:	1b80      	subs	r0, r0, r6
 800547a:	2802      	cmp	r0, #2
 800547c:	f200 8127 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	05db      	lsls	r3, r3, #23
 8005484:	d5f6      	bpl.n	8005474 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005486:	f7fe fc5b 	bl	8003d40 <HAL_GetREVID>
 800548a:	f241 0303 	movw	r3, #4099	; 0x1003
 800548e:	4298      	cmp	r0, r3
 8005490:	f200 8247 	bhi.w	8005922 <HAL_RCC_OscConfig+0x556>
 8005494:	6a22      	ldr	r2, [r4, #32]
 8005496:	686b      	ldr	r3, [r5, #4]
 8005498:	2a20      	cmp	r2, #32
 800549a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800549e:	bf0c      	ite	eq
 80054a0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80054a4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80054a8:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	071d      	lsls	r5, r3, #28
 80054ae:	d516      	bpl.n	80054de <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054b0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80054b2:	4d6f      	ldr	r5, [pc, #444]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8122 	beq.w	80056fe <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 80054ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80054c2:	f7fe fc37 	bl	8003d34 <HAL_GetTick>
 80054c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054c8:	e005      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ca:	f7fe fc33 	bl	8003d34 <HAL_GetTick>
 80054ce:	1b80      	subs	r0, r0, r6
 80054d0:	2802      	cmp	r0, #2
 80054d2:	f200 80fc 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80054d8:	0798      	lsls	r0, r3, #30
 80054da:	d5f6      	bpl.n	80054ca <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	069a      	lsls	r2, r3, #26
 80054e0:	d516      	bpl.n	8005510 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80054e2:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80054e4:	4d62      	ldr	r5, [pc, #392]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 811a 	beq.w	8005720 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054f2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80054f4:	f7fe fc1e 	bl	8003d34 <HAL_GetTick>
 80054f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054fa:	e005      	b.n	8005508 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054fc:	f7fe fc1a 	bl	8003d34 <HAL_GetTick>
 8005500:	1b80      	subs	r0, r0, r6
 8005502:	2802      	cmp	r0, #2
 8005504:	f200 80e3 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	049f      	lsls	r7, r3, #18
 800550c:	d5f6      	bpl.n	80054fc <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	0759      	lsls	r1, r3, #29
 8005512:	f100 80a3 	bmi.w	800565c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005516:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005518:	b1d0      	cbz	r0, 8005550 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800551a:	4d55      	ldr	r5, [pc, #340]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 800551c:	692b      	ldr	r3, [r5, #16]
 800551e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005522:	2b18      	cmp	r3, #24
 8005524:	f000 81ae 	beq.w	8005884 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8005528:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800552c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005530:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005532:	f000 8142 	beq.w	80057ba <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8005536:	f7fe fbfd 	bl	8003d34 <HAL_GetTick>
 800553a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800553c:	e005      	b.n	800554a <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800553e:	f7fe fbf9 	bl	8003d34 <HAL_GetTick>
 8005542:	1b00      	subs	r0, r0, r4
 8005544:	2802      	cmp	r0, #2
 8005546:	f200 80c2 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	d4f6      	bmi.n	800553e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8005550:	2000      	movs	r0, #0
}
 8005552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005554:	4a46      	ldr	r2, [pc, #280]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005556:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005558:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800555a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800555e:	d12d      	bne.n	80055bc <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005562:	68e2      	ldr	r2, [r4, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	0759      	lsls	r1, r3, #29
 8005568:	d501      	bpl.n	800556e <HAL_RCC_OscConfig+0x1a2>
 800556a:	2a00      	cmp	r2, #0
 800556c:	d04e      	beq.n	800560c <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800556e:	4d40      	ldr	r5, [pc, #256]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	f023 0319 	bic.w	r3, r3, #25
 8005576:	4313      	orrs	r3, r2
 8005578:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 800557a:	f7fe fbdb 	bl	8003d34 <HAL_GetTick>
 800557e:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005580:	e005      	b.n	800558e <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005582:	f7fe fbd7 	bl	8003d34 <HAL_GetTick>
 8005586:	1b80      	subs	r0, r0, r6
 8005588:	2802      	cmp	r0, #2
 800558a:	f200 80a0 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800558e:	682b      	ldr	r3, [r5, #0]
 8005590:	075b      	lsls	r3, r3, #29
 8005592:	d5f6      	bpl.n	8005582 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005594:	f7fe fbd4 	bl	8003d40 <HAL_GetREVID>
 8005598:	f241 0303 	movw	r3, #4099	; 0x1003
 800559c:	4298      	cmp	r0, r3
 800559e:	f200 80f7 	bhi.w	8005790 <HAL_RCC_OscConfig+0x3c4>
 80055a2:	6922      	ldr	r2, [r4, #16]
 80055a4:	686b      	ldr	r3, [r5, #4]
 80055a6:	2a40      	cmp	r2, #64	; 0x40
 80055a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055ac:	bf0c      	ite	eq
 80055ae:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80055b2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80055b6:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	e741      	b.n	8005440 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055bc:	2b18      	cmp	r3, #24
 80055be:	f000 80e3 	beq.w	8005788 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055c2:	4d2b      	ldr	r5, [pc, #172]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055c6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c8:	2a00      	cmp	r2, #0
 80055ca:	f000 80cc 	beq.w	8005766 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055ce:	f023 0319 	bic.w	r3, r3, #25
 80055d2:	4313      	orrs	r3, r2
 80055d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80055d6:	f7fe fbad 	bl	8003d34 <HAL_GetTick>
 80055da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055dc:	e004      	b.n	80055e8 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055de:	f7fe fba9 	bl	8003d34 <HAL_GetTick>
 80055e2:	1b80      	subs	r0, r0, r6
 80055e4:	2802      	cmp	r0, #2
 80055e6:	d872      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	075f      	lsls	r7, r3, #29
 80055ec:	d5f7      	bpl.n	80055de <HAL_RCC_OscConfig+0x212>
 80055ee:	e7d1      	b.n	8005594 <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055f0:	f001 0103 	and.w	r1, r1, #3
 80055f4:	2902      	cmp	r1, #2
 80055f6:	f47f aefc 	bne.w	80053f2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fa:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	0392      	lsls	r2, r2, #14
 8005600:	f57f af1b 	bpl.w	800543a <HAL_RCC_OscConfig+0x6e>
 8005604:	6862      	ldr	r2, [r4, #4]
 8005606:	2a00      	cmp	r2, #0
 8005608:	f47f af17 	bne.w	800543a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800560c:	2001      	movs	r0, #1
}
 800560e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005610:	f002 0203 	and.w	r2, r2, #3
 8005614:	2a01      	cmp	r2, #1
 8005616:	f47f af20 	bne.w	800545a <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	05da      	lsls	r2, r3, #23
 8005620:	d502      	bpl.n	8005628 <HAL_RCC_OscConfig+0x25c>
 8005622:	69e3      	ldr	r3, [r4, #28]
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d1f1      	bne.n	800560c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005628:	f7fe fb8a 	bl	8003d40 <HAL_GetREVID>
 800562c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005630:	4298      	cmp	r0, r3
 8005632:	f200 80b8 	bhi.w	80057a6 <HAL_RCC_OscConfig+0x3da>
 8005636:	6a22      	ldr	r2, [r4, #32]
 8005638:	2a20      	cmp	r2, #32
 800563a:	f000 8187 	beq.w	800594c <HAL_RCC_OscConfig+0x580>
 800563e:	490c      	ldr	r1, [pc, #48]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005640:	684b      	ldr	r3, [r1, #4]
 8005642:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005646:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800564a:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	e72d      	b.n	80054ac <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_RCC_OscConfig+0x2a4>)
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800565a:	e6df      	b.n	800541c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800565c:	4d05      	ldr	r5, [pc, #20]	; (8005674 <HAL_RCC_OscConfig+0x2a8>)
 800565e:	682b      	ldr	r3, [r5, #0]
 8005660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005664:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005666:	f7fe fb65 	bl	8003d34 <HAL_GetTick>
 800566a:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800566c:	e009      	b.n	8005682 <HAL_RCC_OscConfig+0x2b6>
 800566e:	bf00      	nop
 8005670:	58024400 	.word	0x58024400
 8005674:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005678:	f7fe fb5c 	bl	8003d34 <HAL_GetTick>
 800567c:	1b80      	subs	r0, r0, r6
 800567e:	2864      	cmp	r0, #100	; 0x64
 8005680:	d825      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005682:	682b      	ldr	r3, [r5, #0]
 8005684:	05da      	lsls	r2, r3, #23
 8005686:	d5f7      	bpl.n	8005678 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005688:	68a3      	ldr	r3, [r4, #8]
 800568a:	2b01      	cmp	r3, #1
 800568c:	f000 8158 	beq.w	8005940 <HAL_RCC_OscConfig+0x574>
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 812d 	beq.w	80058f0 <HAL_RCC_OscConfig+0x524>
 8005696:	2b05      	cmp	r3, #5
 8005698:	4ba6      	ldr	r3, [pc, #664]	; (8005934 <HAL_RCC_OscConfig+0x568>)
 800569a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800569c:	f000 815f 	beq.w	800595e <HAL_RCC_OscConfig+0x592>
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	671a      	str	r2, [r3, #112]	; 0x70
 80056a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056a8:	f022 0204 	bic.w	r2, r2, #4
 80056ac:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80056ae:	f7fe fb41 	bl	8003d34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b2:	4ea0      	ldr	r6, [pc, #640]	; (8005934 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80056b8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ba:	e004      	b.n	80056c6 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fe fb3a 	bl	8003d34 <HAL_GetTick>
 80056c0:	1b40      	subs	r0, r0, r5
 80056c2:	42b8      	cmp	r0, r7
 80056c4:	d803      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056c6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80056c8:	079b      	lsls	r3, r3, #30
 80056ca:	d5f7      	bpl.n	80056bc <HAL_RCC_OscConfig+0x2f0>
 80056cc:	e723      	b.n	8005516 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 80056ce:	2003      	movs	r0, #3
}
 80056d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d2:	4d98      	ldr	r5, [pc, #608]	; (8005934 <HAL_RCC_OscConfig+0x568>)
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056e4:	f7fe fb26 	bl	8003d34 <HAL_GetTick>
 80056e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ea:	e004      	b.n	80056f6 <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ec:	f7fe fb22 	bl	8003d34 <HAL_GetTick>
 80056f0:	1b80      	subs	r0, r0, r6
 80056f2:	2864      	cmp	r0, #100	; 0x64
 80056f4:	d8eb      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	039f      	lsls	r7, r3, #14
 80056fa:	d4f7      	bmi.n	80056ec <HAL_RCC_OscConfig+0x320>
 80056fc:	e69c      	b.n	8005438 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80056fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005706:	f7fe fb15 	bl	8003d34 <HAL_GetTick>
 800570a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800570c:	e004      	b.n	8005718 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570e:	f7fe fb11 	bl	8003d34 <HAL_GetTick>
 8005712:	1b80      	subs	r0, r0, r6
 8005714:	2802      	cmp	r0, #2
 8005716:	d8da      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005718:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800571a:	0799      	lsls	r1, r3, #30
 800571c:	d4f7      	bmi.n	800570e <HAL_RCC_OscConfig+0x342>
 800571e:	e6dd      	b.n	80054dc <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005726:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005728:	f7fe fb04 	bl	8003d34 <HAL_GetTick>
 800572c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800572e:	e004      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005730:	f7fe fb00 	bl	8003d34 <HAL_GetTick>
 8005734:	1b80      	subs	r0, r0, r6
 8005736:	2802      	cmp	r0, #2
 8005738:	d8c9      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	0498      	lsls	r0, r3, #18
 800573e:	d4f7      	bmi.n	8005730 <HAL_RCC_OscConfig+0x364>
 8005740:	e6e5      	b.n	800550e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800574a:	f7fe faf3 	bl	8003d34 <HAL_GetTick>
 800574e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005750:	e004      	b.n	800575c <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005752:	f7fe faef 	bl	8003d34 <HAL_GetTick>
 8005756:	1b80      	subs	r0, r0, r6
 8005758:	2802      	cmp	r0, #2
 800575a:	d8b8      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	05df      	lsls	r7, r3, #23
 8005760:	d4f7      	bmi.n	8005752 <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	e6a2      	b.n	80054ac <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800576c:	f7fe fae2 	bl	8003d34 <HAL_GetTick>
 8005770:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005772:	e004      	b.n	800577e <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005774:	f7fe fade 	bl	8003d34 <HAL_GetTick>
 8005778:	1b80      	subs	r0, r0, r6
 800577a:	2802      	cmp	r0, #2
 800577c:	d8a7      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	0758      	lsls	r0, r3, #29
 8005782:	d4f7      	bmi.n	8005774 <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	e65b      	b.n	8005440 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005788:	0790      	lsls	r0, r2, #30
 800578a:	f47f af1a 	bne.w	80055c2 <HAL_RCC_OscConfig+0x1f6>
 800578e:	e6e7      	b.n	8005560 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005790:	686b      	ldr	r3, [r5, #4]
 8005792:	6922      	ldr	r2, [r4, #16]
 8005794:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005798:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800579c:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	e64e      	b.n	8005440 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 80057a2:	2001      	movs	r0, #1
}
 80057a4:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057a6:	4a63      	ldr	r2, [pc, #396]	; (8005934 <HAL_RCC_OscConfig+0x568>)
 80057a8:	6a21      	ldr	r1, [r4, #32]
 80057aa:	68d3      	ldr	r3, [r2, #12]
 80057ac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80057b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80057b4:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	e678      	b.n	80054ac <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 80057ba:	f7fe fabb 	bl	8003d34 <HAL_GetTick>
 80057be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057c0:	e004      	b.n	80057cc <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c2:	f7fe fab7 	bl	8003d34 <HAL_GetTick>
 80057c6:	1b80      	subs	r0, r0, r6
 80057c8:	2802      	cmp	r0, #2
 80057ca:	d880      	bhi.n	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	0199      	lsls	r1, r3, #6
 80057d0:	d4f7      	bmi.n	80057c2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057d2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80057d4:	4b58      	ldr	r3, [pc, #352]	; (8005938 <HAL_RCC_OscConfig+0x56c>)
 80057d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80057d8:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057da:	4958      	ldr	r1, [pc, #352]	; (800593c <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057dc:	4e55      	ldr	r6, [pc, #340]	; (8005934 <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057de:	4313      	orrs	r3, r2
 80057e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057e2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80057e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80057e8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80057ec:	3b01      	subs	r3, #1
 80057ee:	3a01      	subs	r2, #1
 80057f0:	025b      	lsls	r3, r3, #9
 80057f2:	0412      	lsls	r2, r2, #16
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80057fa:	4313      	orrs	r3, r2
 80057fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057fe:	3a01      	subs	r2, #1
 8005800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005804:	4313      	orrs	r3, r2
 8005806:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005808:	3a01      	subs	r2, #1
 800580a:	0612      	lsls	r2, r2, #24
 800580c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005810:	4313      	orrs	r3, r2
 8005812:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8005814:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800581c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800581e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005820:	4011      	ands	r1, r2
 8005822:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8005826:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005828:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800582a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800582c:	f023 030c 	bic.w	r3, r3, #12
 8005830:	4313      	orrs	r3, r2
 8005832:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005834:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005836:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005838:	f023 0302 	bic.w	r3, r3, #2
 800583c:	4313      	orrs	r3, r2
 800583e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005840:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005846:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005848:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800584a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005850:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005856:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8005858:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005866:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005868:	f7fe fa64 	bl	8003d34 <HAL_GetTick>
 800586c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800586e:	e005      	b.n	800587c <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005870:	f7fe fa60 	bl	8003d34 <HAL_GetTick>
 8005874:	1b00      	subs	r0, r0, r4
 8005876:	2802      	cmp	r0, #2
 8005878:	f63f af29 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800587c:	6833      	ldr	r3, [r6, #0]
 800587e:	019a      	lsls	r2, r3, #6
 8005880:	d5f6      	bpl.n	8005870 <HAL_RCC_OscConfig+0x4a4>
 8005882:	e665      	b.n	8005550 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005884:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005886:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005888:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800588a:	f43f ae62 	beq.w	8005552 <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588e:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005892:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005894:	428b      	cmp	r3, r1
 8005896:	f47f aeb9 	bne.w	800560c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800589a:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058a0:	429a      	cmp	r2, r3
 80058a2:	f47f aeb3 	bne.w	800560c <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80058a8:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80058ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	f47f aeac 	bne.w	800560c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058b6:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80058ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	f47f aea5 	bne.w	800560c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058c4:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80058c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	f47f ae9e 	bne.w	800560c <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80058d2:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80058d6:	3801      	subs	r0, #1
    return HAL_ERROR;
 80058d8:	1a28      	subs	r0, r5, r0
 80058da:	bf18      	it	ne
 80058dc:	2001      	movne	r0, #1
}
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e595      	b.n	800541c <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f0:	4d10      	ldr	r5, [pc, #64]	; (8005934 <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	672b      	str	r3, [r5, #112]	; 0x70
 80058fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005900:	f023 0304 	bic.w	r3, r3, #4
 8005904:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005906:	f7fe fa15 	bl	8003d34 <HAL_GetTick>
 800590a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800590c:	e005      	b.n	800591a <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590e:	f7fe fa11 	bl	8003d34 <HAL_GetTick>
 8005912:	1b80      	subs	r0, r0, r6
 8005914:	42b8      	cmp	r0, r7
 8005916:	f63f aeda 	bhi.w	80056ce <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800591a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800591c:	0798      	lsls	r0, r3, #30
 800591e:	d4f6      	bmi.n	800590e <HAL_RCC_OscConfig+0x542>
 8005920:	e5f9      	b.n	8005516 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005922:	68eb      	ldr	r3, [r5, #12]
 8005924:	6a22      	ldr	r2, [r4, #32]
 8005926:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800592a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800592e:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	e5bb      	b.n	80054ac <HAL_RCC_OscConfig+0xe0>
 8005934:	58024400 	.word	0x58024400
 8005938:	fffffc0c 	.word	0xfffffc0c
 800593c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005940:	4a0b      	ldr	r2, [pc, #44]	; (8005970 <HAL_RCC_OscConfig+0x5a4>)
 8005942:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594a:	e6b0      	b.n	80056ae <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800594c:	4a08      	ldr	r2, [pc, #32]	; (8005970 <HAL_RCC_OscConfig+0x5a4>)
 800594e:	6853      	ldr	r3, [r2, #4]
 8005950:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	e5a6      	b.n	80054ac <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595e:	f042 0204 	orr.w	r2, r2, #4
 8005962:	671a      	str	r2, [r3, #112]	; 0x70
 8005964:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	671a      	str	r2, [r3, #112]	; 0x70
 800596c:	e69f      	b.n	80056ae <HAL_RCC_OscConfig+0x2e2>
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400

08005974 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005974:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x34>)
 8005976:	6913      	ldr	r3, [r2, #16]
 8005978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800597c:	2b10      	cmp	r3, #16
 800597e:	d004      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x16>
 8005980:	2b18      	cmp	r3, #24
 8005982:	d00d      	beq.n	80059a0 <HAL_RCC_GetSysClockFreq+0x2c>
 8005984:	b11b      	cbz	r3, 800598e <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8005986:	4809      	ldr	r0, [pc, #36]	; (80059ac <HAL_RCC_GetSysClockFreq+0x38>)
 8005988:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800598a:	4809      	ldr	r0, [pc, #36]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800598c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	069b      	lsls	r3, r3, #26
 8005992:	d507      	bpl.n	80059a4 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005994:	6813      	ldr	r3, [r2, #0]
 8005996:	4807      	ldr	r0, [pc, #28]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x40>)
 8005998:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800599c:	40d8      	lsrs	r0, r3
 800599e:	4770      	bx	lr
 80059a0:	f7ff bc90 	b.w	80052c4 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059a4:	4803      	ldr	r0, [pc, #12]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80059a6:	4770      	bx	lr
 80059a8:	58024400 	.word	0x58024400
 80059ac:	003d0900 	.word	0x003d0900
 80059b0:	017d7840 	.word	0x017d7840
 80059b4:	03d09000 	.word	0x03d09000

080059b8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f000 810c 	beq.w	8005bd6 <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059be:	4a8c      	ldr	r2, [pc, #560]	; (8005bf0 <HAL_RCC_ClockConfig+0x238>)
 80059c0:	6813      	ldr	r3, [r2, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	428b      	cmp	r3, r1
{
 80059c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059cc:	4604      	mov	r4, r0
 80059ce:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d0:	d20c      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	f023 030f 	bic.w	r3, r3, #15
 80059d8:	430b      	orrs	r3, r1
 80059da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	428b      	cmp	r3, r1
 80059e4:	d002      	beq.n	80059ec <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80059e6:	2001      	movs	r0, #1
}
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	075f      	lsls	r7, r3, #29
 80059f0:	d50b      	bpl.n	8005a0a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059f2:	4980      	ldr	r1, [pc, #512]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 80059f4:	6920      	ldr	r0, [r4, #16]
 80059f6:	698a      	ldr	r2, [r1, #24]
 80059f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80059fc:	4290      	cmp	r0, r2
 80059fe:	d904      	bls.n	8005a0a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a00:	698a      	ldr	r2, [r1, #24]
 8005a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a06:	4302      	orrs	r2, r0
 8005a08:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0a:	071e      	lsls	r6, r3, #28
 8005a0c:	d50b      	bpl.n	8005a26 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a0e:	4979      	ldr	r1, [pc, #484]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005a10:	6960      	ldr	r0, [r4, #20]
 8005a12:	69ca      	ldr	r2, [r1, #28]
 8005a14:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005a18:	4290      	cmp	r0, r2
 8005a1a:	d904      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a1c:	69ca      	ldr	r2, [r1, #28]
 8005a1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a22:	4302      	orrs	r2, r0
 8005a24:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a26:	06d8      	lsls	r0, r3, #27
 8005a28:	d50b      	bpl.n	8005a42 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a2a:	4972      	ldr	r1, [pc, #456]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005a2c:	69a0      	ldr	r0, [r4, #24]
 8005a2e:	69ca      	ldr	r2, [r1, #28]
 8005a30:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005a34:	4290      	cmp	r0, r2
 8005a36:	d904      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a38:	69ca      	ldr	r2, [r1, #28]
 8005a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a3e:	4302      	orrs	r2, r0
 8005a40:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a42:	0699      	lsls	r1, r3, #26
 8005a44:	d50b      	bpl.n	8005a5e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a46:	496b      	ldr	r1, [pc, #428]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005a48:	69e0      	ldr	r0, [r4, #28]
 8005a4a:	6a0a      	ldr	r2, [r1, #32]
 8005a4c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005a50:	4290      	cmp	r0, r2
 8005a52:	d904      	bls.n	8005a5e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a54:	6a0a      	ldr	r2, [r1, #32]
 8005a56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a5a:	4302      	orrs	r2, r0
 8005a5c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5e:	079a      	lsls	r2, r3, #30
 8005a60:	f140 80ab 	bpl.w	8005bba <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a64:	4863      	ldr	r0, [pc, #396]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005a66:	68e1      	ldr	r1, [r4, #12]
 8005a68:	6982      	ldr	r2, [r0, #24]
 8005a6a:	f002 020f 	and.w	r2, r2, #15
 8005a6e:	4291      	cmp	r1, r2
 8005a70:	d904      	bls.n	8005a7c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a72:	6982      	ldr	r2, [r0, #24]
 8005a74:	f022 020f 	bic.w	r2, r2, #15
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7c:	07d8      	lsls	r0, r3, #31
 8005a7e:	d530      	bpl.n	8005ae2 <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a80:	4a5c      	ldr	r2, [pc, #368]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005a82:	68a1      	ldr	r1, [r4, #8]
 8005a84:	6993      	ldr	r3, [r2, #24]
 8005a86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a90:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a92:	2902      	cmp	r1, #2
 8005a94:	f000 80a1 	beq.w	8005bda <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a98:	2903      	cmp	r1, #3
 8005a9a:	f000 8098 	beq.w	8005bce <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a9e:	2901      	cmp	r1, #1
 8005aa0:	f000 80a1 	beq.w	8005be6 <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aa4:	0758      	lsls	r0, r3, #29
 8005aa6:	d59e      	bpl.n	80059e6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aa8:	4e52      	ldr	r6, [pc, #328]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aaa:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aae:	6933      	ldr	r3, [r6, #16]
 8005ab0:	f023 0307 	bic.w	r3, r3, #7
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8005ab8:	f7fe f93c 	bl	8003d34 <HAL_GetTick>
 8005abc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	e005      	b.n	8005acc <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7fe f938 	bl	8003d34 <HAL_GetTick>
 8005ac4:	1bc0      	subs	r0, r0, r7
 8005ac6:	4540      	cmp	r0, r8
 8005ac8:	f200 808b 	bhi.w	8005be2 <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005acc:	6933      	ldr	r3, [r6, #16]
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005ad8:	d1f2      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0799      	lsls	r1, r3, #30
 8005ade:	d506      	bpl.n	8005aee <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ae0:	68e1      	ldr	r1, [r4, #12]
 8005ae2:	4844      	ldr	r0, [pc, #272]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005ae4:	6982      	ldr	r2, [r0, #24]
 8005ae6:	f002 020f 	and.w	r2, r2, #15
 8005aea:	428a      	cmp	r2, r1
 8005aec:	d869      	bhi.n	8005bc2 <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aee:	4940      	ldr	r1, [pc, #256]	; (8005bf0 <HAL_RCC_ClockConfig+0x238>)
 8005af0:	680a      	ldr	r2, [r1, #0]
 8005af2:	f002 020f 	and.w	r2, r2, #15
 8005af6:	42aa      	cmp	r2, r5
 8005af8:	d90a      	bls.n	8005b10 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	680a      	ldr	r2, [r1, #0]
 8005afc:	f022 020f 	bic.w	r2, r2, #15
 8005b00:	432a      	orrs	r2, r5
 8005b02:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b04:	680a      	ldr	r2, [r1, #0]
 8005b06:	f002 020f 	and.w	r2, r2, #15
 8005b0a:	42aa      	cmp	r2, r5
 8005b0c:	f47f af6b 	bne.w	80059e6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b10:	075a      	lsls	r2, r3, #29
 8005b12:	d50b      	bpl.n	8005b2c <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b14:	4937      	ldr	r1, [pc, #220]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005b16:	6920      	ldr	r0, [r4, #16]
 8005b18:	698a      	ldr	r2, [r1, #24]
 8005b1a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005b1e:	4290      	cmp	r0, r2
 8005b20:	d204      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b22:	698a      	ldr	r2, [r1, #24]
 8005b24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b28:	4302      	orrs	r2, r0
 8005b2a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	071f      	lsls	r7, r3, #28
 8005b2e:	d50b      	bpl.n	8005b48 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b30:	4930      	ldr	r1, [pc, #192]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005b32:	6960      	ldr	r0, [r4, #20]
 8005b34:	69ca      	ldr	r2, [r1, #28]
 8005b36:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005b3a:	4290      	cmp	r0, r2
 8005b3c:	d204      	bcs.n	8005b48 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b3e:	69ca      	ldr	r2, [r1, #28]
 8005b40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b44:	4302      	orrs	r2, r0
 8005b46:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b48:	06de      	lsls	r6, r3, #27
 8005b4a:	d50b      	bpl.n	8005b64 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b4c:	4929      	ldr	r1, [pc, #164]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005b4e:	69a0      	ldr	r0, [r4, #24]
 8005b50:	69ca      	ldr	r2, [r1, #28]
 8005b52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005b56:	4290      	cmp	r0, r2
 8005b58:	d204      	bcs.n	8005b64 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b5a:	69ca      	ldr	r2, [r1, #28]
 8005b5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b60:	4302      	orrs	r2, r0
 8005b62:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b64:	069d      	lsls	r5, r3, #26
 8005b66:	d50b      	bpl.n	8005b80 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b68:	4a22      	ldr	r2, [pc, #136]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005b6a:	69e1      	ldr	r1, [r4, #28]
 8005b6c:	6a13      	ldr	r3, [r2, #32]
 8005b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b72:	4299      	cmp	r1, r3
 8005b74:	d204      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b76:	6a13      	ldr	r3, [r2, #32]
 8005b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b80:	f7ff fef8 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8005b84:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <HAL_RCC_ClockConfig+0x23c>)
 8005b86:	4603      	mov	r3, r0
 8005b88:	481b      	ldr	r0, [pc, #108]	; (8005bf8 <HAL_RCC_ClockConfig+0x240>)
 8005b8a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b8c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b8e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005b92:	4d1a      	ldr	r5, [pc, #104]	; (8005bfc <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b94:	f002 020f 	and.w	r2, r2, #15
 8005b98:	4c19      	ldr	r4, [pc, #100]	; (8005c00 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b9a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b9c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b9e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8005ba2:	4818      	ldr	r0, [pc, #96]	; (8005c04 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ba4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ba8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8005baa:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005bac:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bae:	40d3      	lsrs	r3, r2
 8005bb0:	6023      	str	r3, [r4, #0]
}
 8005bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8005bb6:	f7fd bb8b 	b.w	80032d0 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	07da      	lsls	r2, r3, #31
 8005bbc:	f53f af60 	bmi.w	8005a80 <HAL_RCC_ClockConfig+0xc8>
 8005bc0:	e795      	b.n	8005aee <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc2:	6982      	ldr	r2, [r0, #24]
 8005bc4:	f022 020f 	bic.w	r2, r2, #15
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	6182      	str	r2, [r0, #24]
 8005bcc:	e78f      	b.n	8005aee <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bce:	019f      	lsls	r7, r3, #6
 8005bd0:	f53f af6a 	bmi.w	8005aa8 <HAL_RCC_ClockConfig+0xf0>
 8005bd4:	e707      	b.n	80059e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005bd6:	2001      	movs	r0, #1
}
 8005bd8:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bda:	039b      	lsls	r3, r3, #14
 8005bdc:	f53f af64 	bmi.w	8005aa8 <HAL_RCC_ClockConfig+0xf0>
 8005be0:	e701      	b.n	80059e6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8005be2:	2003      	movs	r0, #3
 8005be4:	e700      	b.n	80059e8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005be6:	05de      	lsls	r6, r3, #23
 8005be8:	f53f af5e 	bmi.w	8005aa8 <HAL_RCC_ClockConfig+0xf0>
 8005bec:	e6fb      	b.n	80059e6 <HAL_RCC_ClockConfig+0x2e>
 8005bee:	bf00      	nop
 8005bf0:	52002000 	.word	0x52002000
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	08017f38 	.word	0x08017f38
 8005bfc:	24000018 	.word	0x24000018
 8005c00:	2400001c 	.word	0x2400001c
 8005c04:	24000064 	.word	0x24000064

08005c08 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c08:	4a18      	ldr	r2, [pc, #96]	; (8005c6c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c0c:	6913      	ldr	r3, [r2, #16]
 8005c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d01a      	beq.n	8005c4c <HAL_RCC_GetHCLKFreq+0x44>
 8005c16:	2b18      	cmp	r3, #24
 8005c18:	d023      	beq.n	8005c62 <HAL_RCC_GetHCLKFreq+0x5a>
 8005c1a:	b1cb      	cbz	r3, 8005c50 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8005c1c:	4814      	ldr	r0, [pc, #80]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c1e:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <HAL_RCC_GetHCLKFreq+0x64>)
 8005c20:	4914      	ldr	r1, [pc, #80]	; (8005c74 <HAL_RCC_GetHCLKFreq+0x6c>)
 8005c22:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c24:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c26:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c2a:	4c13      	ldr	r4, [pc, #76]	; (8005c78 <HAL_RCC_GetHCLKFreq+0x70>)
 8005c2c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c30:	4d12      	ldr	r5, [pc, #72]	; (8005c7c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c32:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c34:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c36:	f002 021f 	and.w	r2, r2, #31
 8005c3a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c3e:	f003 001f 	and.w	r0, r3, #31
 8005c42:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8005c46:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c48:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c4c:	480c      	ldr	r0, [pc, #48]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x78>)
 8005c4e:	e7e6      	b.n	8005c1e <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	069b      	lsls	r3, r3, #26
 8005c54:	d508      	bpl.n	8005c68 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c56:	6813      	ldr	r3, [r2, #0]
 8005c58:	480a      	ldr	r0, [pc, #40]	; (8005c84 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005c5a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005c5e:	40d8      	lsrs	r0, r3
 8005c60:	e7dd      	b.n	8005c1e <HAL_RCC_GetHCLKFreq+0x16>
 8005c62:	f7ff fb2f 	bl	80052c4 <HAL_RCC_GetSysClockFreq.part.0>
 8005c66:	e7da      	b.n	8005c1e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c68:	4806      	ldr	r0, [pc, #24]	; (8005c84 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005c6a:	e7d8      	b.n	8005c1e <HAL_RCC_GetHCLKFreq+0x16>
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	003d0900 	.word	0x003d0900
 8005c74:	08017f38 	.word	0x08017f38
 8005c78:	2400001c 	.word	0x2400001c
 8005c7c:	24000018 	.word	0x24000018
 8005c80:	017d7840 	.word	0x017d7840
 8005c84:	03d09000 	.word	0x03d09000

08005c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c88:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c8a:	f7ff ffbd 	bl	8005c08 <HAL_RCC_GetHCLKFreq>
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c90:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005c98:	5cd3      	ldrb	r3, [r2, r3]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c9e:	40d8      	lsrs	r0, r3
 8005ca0:	bd08      	pop	{r3, pc}
 8005ca2:	bf00      	nop
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	08017f38 	.word	0x08017f38

08005cac <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005cae:	223f      	movs	r2, #63	; 0x3f
 8005cb0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	f002 0207 	and.w	r2, r2, #7
 8005cb8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8005cc0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	f002 020f 	and.w	r2, r2, #15
 8005cc8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005cd0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005cd8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005ce0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
{
 8005ce4:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cea:	4c05      	ldr	r4, [pc, #20]	; (8005d00 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005cec:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cee:	6823      	ldr	r3, [r4, #0]
}
 8005cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	600b      	str	r3, [r1, #0]
}
 8005cfa:	4770      	bx	lr
 8005cfc:	58024400 	.word	0x58024400
 8005d00:	52002000 	.word	0x52002000

08005d04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d06:	4c3a      	ldr	r4, [pc, #232]	; (8005df0 <RCCEx_PLL2_Config+0xec>)
 8005d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d067      	beq.n	8005de2 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1e:	f7fe f809 	bl	8003d34 <HAL_GetTick>
 8005d22:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d24:	e004      	b.n	8005d30 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d26:	f7fe f805 	bl	8003d34 <HAL_GetTick>
 8005d2a:	1b43      	subs	r3, r0, r5
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d856      	bhi.n	8005dde <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	011a      	lsls	r2, r3, #4
 8005d34:	d4f7      	bmi.n	8005d26 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d38:	6832      	ldr	r2, [r6, #0]
 8005d3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d3e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005d42:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d44:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	025b      	lsls	r3, r3, #9
 8005d4e:	0412      	lsls	r2, r2, #16
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005d56:	4313      	orrs	r3, r2
 8005d58:	6872      	ldr	r2, [r6, #4]
 8005d5a:	3a01      	subs	r2, #1
 8005d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d60:	4313      	orrs	r3, r2
 8005d62:	6932      	ldr	r2, [r6, #16]
 8005d64:	3a01      	subs	r2, #1
 8005d66:	0612      	lsls	r2, r2, #24
 8005d68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005d72:	6972      	ldr	r2, [r6, #20]
 8005d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d7e:	69b3      	ldr	r3, [r6, #24]
 8005d80:	f022 0220 	bic.w	r2, r2, #32
 8005d84:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d8c:	f022 0210 	bic.w	r2, r2, #16
 8005d90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d92:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005d94:	69f2      	ldr	r2, [r6, #28]
 8005d96:	400b      	ands	r3, r1
 8005d98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005d9c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005da0:	f043 0310 	orr.w	r3, r3, #16
 8005da4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005da8:	b1ef      	cbz	r7, 8005de6 <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005daa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005dac:	bf0c      	ite	eq
 8005dae:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005db2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005db6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005db8:	4c0d      	ldr	r4, [pc, #52]	; (8005df0 <RCCEx_PLL2_Config+0xec>)
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dc0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc2:	f7fd ffb7 	bl	8003d34 <HAL_GetTick>
 8005dc6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dc8:	e004      	b.n	8005dd4 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dca:	f7fd ffb3 	bl	8003d34 <HAL_GetTick>
 8005dce:	1b40      	subs	r0, r0, r5
 8005dd0:	2802      	cmp	r0, #2
 8005dd2:	d804      	bhi.n	8005dde <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	d5f7      	bpl.n	8005dca <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8005dda:	2000      	movs	r0, #0
}
 8005ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005dde:	2003      	movs	r0, #3
}
 8005de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005de2:	2001      	movs	r0, #1
}
 8005de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dec:	e7e4      	b.n	8005db8 <RCCEx_PLL2_Config+0xb4>
 8005dee:	bf00      	nop
 8005df0:	58024400 	.word	0x58024400
 8005df4:	ffff0007 	.word	0xffff0007

08005df8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dfa:	4c3a      	ldr	r4, [pc, #232]	; (8005ee4 <RCCEx_PLL3_Config+0xec>)
 8005dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d067      	beq.n	8005ed6 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	4606      	mov	r6, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e12:	f7fd ff8f 	bl	8003d34 <HAL_GetTick>
 8005e16:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e18:	e004      	b.n	8005e24 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e1a:	f7fd ff8b 	bl	8003d34 <HAL_GetTick>
 8005e1e:	1b43      	subs	r3, r0, r5
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d856      	bhi.n	8005ed2 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	009a      	lsls	r2, r3, #2
 8005e28:	d4f7      	bmi.n	8005e1a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e2c:	6832      	ldr	r2, [r6, #0]
 8005e2e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005e32:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005e36:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e38:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	3a01      	subs	r2, #1
 8005e40:	025b      	lsls	r3, r3, #9
 8005e42:	0412      	lsls	r2, r2, #16
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	6872      	ldr	r2, [r6, #4]
 8005e4e:	3a01      	subs	r2, #1
 8005e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e54:	4313      	orrs	r3, r2
 8005e56:	6932      	ldr	r2, [r6, #16]
 8005e58:	3a01      	subs	r2, #1
 8005e5a:	0612      	lsls	r2, r2, #24
 8005e5c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005e60:	4313      	orrs	r3, r2
 8005e62:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e66:	6972      	ldr	r2, [r6, #20]
 8005e68:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e72:	69b3      	ldr	r3, [r6, #24]
 8005e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e78:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e84:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e88:	69f2      	ldr	r2, [r6, #28]
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005e90:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e98:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005e9c:	b1ef      	cbz	r7, 8005eda <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e9e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ea0:	bf0c      	ite	eq
 8005ea2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ea6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005eac:	4c0d      	ldr	r4, [pc, #52]	; (8005ee4 <RCCEx_PLL3_Config+0xec>)
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fd ff3d 	bl	8003d34 <HAL_GetTick>
 8005eba:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ebc:	e004      	b.n	8005ec8 <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ebe:	f7fd ff39 	bl	8003d34 <HAL_GetTick>
 8005ec2:	1b40      	subs	r0, r0, r5
 8005ec4:	2802      	cmp	r0, #2
 8005ec6:	d804      	bhi.n	8005ed2 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	d5f7      	bpl.n	8005ebe <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8005ece:	2000      	movs	r0, #0
}
 8005ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005ed2:	2003      	movs	r0, #3
}
 8005ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005ed6:	2001      	movs	r0, #1
}
 8005ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ede:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee0:	e7e4      	b.n	8005eac <RCCEx_PLL3_Config+0xb4>
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	ffff0007 	.word	0xffff0007

08005eec <HAL_RCCEx_PeriphCLKConfig>:
{
 8005eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ef0:	6803      	ldr	r3, [r0, #0]
{
 8005ef2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ef4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8005ef8:	d022      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005efa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005efc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005f00:	f000 8498 	beq.w	8006834 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8005f04:	d811      	bhi.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8005f06:	2a00      	cmp	r2, #0
 8005f08:	f000 8506 	beq.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005f0c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005f10:	f040 84ff 	bne.w	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa26>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f14:	2102      	movs	r1, #2
 8005f16:	3004      	adds	r0, #4
 8005f18:	f7ff fef4 	bl	8005d04 <RCCEx_PLL2_Config>
 8005f1c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005f1e:	2e00      	cmp	r6, #0
 8005f20:	f040 8490 	bne.w	8006844 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f24:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	e003      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f2a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8005f2e:	f040 84f0 	bne.w	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa26>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f32:	48a8      	ldr	r0, [pc, #672]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f34:	2600      	movs	r6, #0
 8005f36:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005f38:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f40:	05dd      	lsls	r5, r3, #23
 8005f42:	d50a      	bpl.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005f44:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f46:	2a04      	cmp	r2, #4
 8005f48:	d806      	bhi.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005f4a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005f4e:	04ad      	.short	0x04ad
 8005f50:	0493048c 	.word	0x0493048c
 8005f54:	02fc02fc 	.word	0x02fc02fc
 8005f58:	2601      	movs	r6, #1
 8005f5a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f5c:	0598      	lsls	r0, r3, #22
 8005f5e:	d51b      	bpl.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 8005f60:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005f62:	2a80      	cmp	r2, #128	; 0x80
 8005f64:	f000 8497 	beq.w	8006896 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8005f68:	f200 80ec 	bhi.w	8006144 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	f000 83a6 	beq.w	80066be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005f72:	2a40      	cmp	r2, #64	; 0x40
 8005f74:	f040 80ed 	bne.w	8006152 <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f78:	2100      	movs	r1, #0
 8005f7a:	1d20      	adds	r0, r4, #4
 8005f7c:	f7ff fec2 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f80:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f82:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	f040 8380 	bne.w	800668a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005f8a:	4992      	ldr	r1, [pc, #584]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f8e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005f90:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8005f94:	4302      	orrs	r2, r0
 8005f96:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f98:	0559      	lsls	r1, r3, #21
 8005f9a:	d51f      	bpl.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8005f9c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8005fa0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005fa4:	f000 8456 	beq.w	8006854 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005fa8:	f200 80d6 	bhi.w	8006158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	f000 838c 	beq.w	80066ca <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8005fb2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005fb6:	f040 80d7 	bne.w	8006168 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	1d20      	adds	r0, r4, #4
 8005fbe:	f7ff fea1 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fc2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fc4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	f040 8363 	bne.w	8006692 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fcc:	4981      	ldr	r1, [pc, #516]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005fce:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8005fd2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8005fd4:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8005fd8:	4302      	orrs	r2, r0
 8005fda:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fdc:	051a      	lsls	r2, r3, #20
 8005fde:	d51f      	bpl.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 8005fe0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8005fe4:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8005fe8:	f000 8465 	beq.w	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8005fec:	f200 80bf 	bhi.w	800616e <HAL_RCCEx_PeriphCLKConfig+0x282>
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	f000 8370 	beq.w	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
 8005ff6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8005ffa:	f040 80c0 	bne.w	800617e <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ffe:	2100      	movs	r1, #0
 8006000:	1d20      	adds	r0, r4, #4
 8006002:	f7ff fe7f 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006006:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006008:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800600a:	2d00      	cmp	r5, #0
 800600c:	f040 8345 	bne.w	800669a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006010:	4970      	ldr	r1, [pc, #448]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006012:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8006016:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006018:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800601c:	4302      	orrs	r2, r0
 800601e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006020:	019f      	lsls	r7, r3, #6
 8006022:	d518      	bpl.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 8006024:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006026:	2a20      	cmp	r2, #32
 8006028:	f000 83cd 	beq.w	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800602c:	f200 80aa 	bhi.w	8006184 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006030:	b13a      	cbz	r2, 8006042 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8006032:	2a10      	cmp	r2, #16
 8006034:	f040 80a9 	bne.w	800618a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006038:	4966      	ldr	r1, [pc, #408]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800603a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800603c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006040:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006042:	2d00      	cmp	r5, #0
 8006044:	f040 835f 	bne.w	8006706 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006048:	4962      	ldr	r1, [pc, #392]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800604a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800604c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800604e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006052:	4302      	orrs	r2, r0
 8006054:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006056:	04d8      	lsls	r0, r3, #19
 8006058:	d51d      	bpl.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 800605a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800605c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006060:	f000 8410 	beq.w	8006884 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8006064:	f200 8094 	bhi.w	8006190 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8006068:	2a00      	cmp	r2, #0
 800606a:	f000 833a 	beq.w	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800606e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006072:	f040 8095 	bne.w	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006076:	2100      	movs	r1, #0
 8006078:	1d20      	adds	r0, r4, #4
 800607a:	f7ff fe43 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800607e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006080:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006082:	2d00      	cmp	r5, #0
 8006084:	f040 8303 	bne.w	800668e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006088:	4952      	ldr	r1, [pc, #328]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800608a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800608c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800608e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006092:	4302      	orrs	r2, r0
 8006094:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006096:	0499      	lsls	r1, r3, #18
 8006098:	d51a      	bpl.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 800609a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800609c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80060a0:	f000 8375 	beq.w	800678e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80060a4:	d87f      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80060a6:	b14a      	cbz	r2, 80060bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80060a8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80060ac:	f040 8083 	bne.w	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060b0:	2101      	movs	r1, #1
 80060b2:	1d20      	adds	r0, r4, #4
 80060b4:	f7ff fe26 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060b8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060ba:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80060bc:	2d00      	cmp	r5, #0
 80060be:	f040 8324 	bne.w	800670a <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060c2:	4944      	ldr	r1, [pc, #272]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80060c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80060c6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80060c8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80060cc:	4302      	orrs	r2, r0
 80060ce:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060d0:	045a      	lsls	r2, r3, #17
 80060d2:	d51b      	bpl.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 80060d4:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80060d8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80060dc:	f000 8361 	beq.w	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80060e0:	d86c      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80060e2:	b142      	cbz	r2, 80060f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060e4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80060e8:	d170      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060ea:	2101      	movs	r1, #1
 80060ec:	1d20      	adds	r0, r4, #4
 80060ee:	f7ff fe09 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	f040 8309 	bne.w	800670e <HAL_RCCEx_PeriphCLKConfig+0x822>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060fc:	4935      	ldr	r1, [pc, #212]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80060fe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8006102:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006104:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006108:	4302      	orrs	r2, r0
 800610a:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800610c:	041f      	lsls	r7, r3, #16
 800610e:	d50d      	bpl.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 8006110:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006112:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006116:	f000 834e 	beq.w	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800611a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800611e:	f000 821e 	beq.w	800655e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006122:	2a00      	cmp	r2, #0
 8006124:	f000 8221 	beq.w	800656a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006128:	2601      	movs	r6, #1
 800612a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800612c:	01d8      	lsls	r0, r3, #7
 800612e:	d562      	bpl.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    switch(PeriphClkInit->FmcClockSelection)
 8006130:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006132:	2a03      	cmp	r2, #3
 8006134:	f200 841b 	bhi.w	800696e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006138:	e8df f012 	tbh	[pc, r2, lsl #1]
 800613c:	004e0053 	.word	0x004e0053
 8006140:	00530358 	.word	0x00530358
    switch(PeriphClkInit->Sai23ClockSelection)
 8006144:	2ac0      	cmp	r2, #192	; 0xc0
 8006146:	f43f af1d 	beq.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800614a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800614e:	f43f af19 	beq.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006152:	2601      	movs	r6, #1
 8006154:	4635      	mov	r5, r6
 8006156:	e71f      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006158:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800615c:	f43f af33 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006160:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8006164:	f43f af2f 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006168:	2601      	movs	r6, #1
 800616a:	4635      	mov	r5, r6
 800616c:	e736      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 800616e:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8006172:	f43f af4a 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8006176:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800617a:	f43f af46 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800617e:	2601      	movs	r6, #1
 8006180:	4635      	mov	r5, r6
 8006182:	e74d      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 8006184:	2a30      	cmp	r2, #48	; 0x30
 8006186:	f43f af5c 	beq.w	8006042 <HAL_RCCEx_PeriphCLKConfig+0x156>
 800618a:	2601      	movs	r6, #1
 800618c:	4635      	mov	r5, r6
 800618e:	e762      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006190:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8006194:	f43f af75 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006198:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800619c:	f43f af71 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061a0:	2601      	movs	r6, #1
 80061a2:	4635      	mov	r5, r6
 80061a4:	e777      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 80061a6:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80061aa:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80061ae:	d085      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80061b0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80061b4:	d082      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80061b6:	2601      	movs	r6, #1
 80061b8:	4635      	mov	r5, r6
 80061ba:	e789      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 80061bc:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80061c0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80061c4:	d097      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80061c6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80061ca:	d094      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80061cc:	2601      	movs	r6, #1
 80061ce:	4635      	mov	r5, r6
 80061d0:	e79c      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x220>
 80061d2:	bf00      	nop
 80061d4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4938      	ldr	r1, [pc, #224]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80061da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80061dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80061e0:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	f040 8285 	bne.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061e8:	4934      	ldr	r1, [pc, #208]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80061ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80061ec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80061ee:	f022 0203 	bic.w	r2, r2, #3
 80061f2:	4302      	orrs	r2, r0
 80061f4:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f6:	0259      	lsls	r1, r3, #9
 80061f8:	f100 81fb 	bmi.w	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061fc:	07df      	lsls	r7, r3, #31
 80061fe:	d52f      	bpl.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006200:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006202:	2a28      	cmp	r2, #40	; 0x28
 8006204:	d82a      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8006206:	e8df f012 	tbh	[pc, r2, lsl #1]
 800620a:	01e9      	.short	0x01e9
 800620c:	00290029 	.word	0x00290029
 8006210:	00290029 	.word	0x00290029
 8006214:	00290029 	.word	0x00290029
 8006218:	01e30029 	.word	0x01e30029
 800621c:	00290029 	.word	0x00290029
 8006220:	00290029 	.word	0x00290029
 8006224:	00290029 	.word	0x00290029
 8006228:	03750029 	.word	0x03750029
 800622c:	00290029 	.word	0x00290029
 8006230:	00290029 	.word	0x00290029
 8006234:	00290029 	.word	0x00290029
 8006238:	01e90029 	.word	0x01e90029
 800623c:	00290029 	.word	0x00290029
 8006240:	00290029 	.word	0x00290029
 8006244:	00290029 	.word	0x00290029
 8006248:	01e90029 	.word	0x01e90029
 800624c:	00290029 	.word	0x00290029
 8006250:	00290029 	.word	0x00290029
 8006254:	00290029 	.word	0x00290029
 8006258:	01e90029 	.word	0x01e90029
 800625c:	2601      	movs	r6, #1
 800625e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006260:	0798      	lsls	r0, r3, #30
 8006262:	d51b      	bpl.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006264:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006266:	2a05      	cmp	r2, #5
 8006268:	f200 837e 	bhi.w	8006968 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
 800626c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006270:	0006000c 	.word	0x0006000c
 8006274:	000c032c 	.word	0x000c032c
 8006278:	000c000c 	.word	0x000c000c
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800627c:	2101      	movs	r1, #1
 800627e:	1d20      	adds	r0, r4, #4
 8006280:	f7ff fd40 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006284:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006286:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006288:	2d00      	cmp	r5, #0
 800628a:	f040 8236 	bne.w	80066fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800628e:	490b      	ldr	r1, [pc, #44]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006290:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006292:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006294:	f022 0207 	bic.w	r2, r2, #7
 8006298:	4302      	orrs	r2, r0
 800629a:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800629c:	0759      	lsls	r1, r3, #29
 800629e:	d520      	bpl.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80062a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80062a4:	2a05      	cmp	r2, #5
 80062a6:	f200 8365 	bhi.w	8006974 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 80062aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80062ae:	000f      	.short	0x000f
 80062b0:	03180009 	.word	0x03180009
 80062b4:	000f000f 	.word	0x000f000f
 80062b8:	000f      	.short	0x000f
 80062ba:	bf00      	nop
 80062bc:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062c0:	2101      	movs	r1, #1
 80062c2:	1d20      	adds	r0, r4, #4
 80062c4:	f7ff fd1e 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062c8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062ca:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	f040 8216 	bne.w	80066fe <HAL_RCCEx_PeriphCLKConfig+0x812>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062d2:	49ab      	ldr	r1, [pc, #684]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80062d4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80062d8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80062da:	f022 0207 	bic.w	r2, r2, #7
 80062de:	4302      	orrs	r2, r0
 80062e0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062e2:	069a      	lsls	r2, r3, #26
 80062e4:	d51d      	bpl.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80062e6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80062ea:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80062ee:	f000 8273 	beq.w	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80062f2:	f200 80e6 	bhi.w	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 80062f6:	b14a      	cbz	r2, 800630c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80062f8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80062fc:	f040 80eb 	bne.w	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006300:	2100      	movs	r1, #0
 8006302:	1d20      	adds	r0, r4, #4
 8006304:	f7ff fcfe 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006308:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800630a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800630c:	2d00      	cmp	r5, #0
 800630e:	f040 81ee 	bne.w	80066ee <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006312:	499b      	ldr	r1, [pc, #620]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006314:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8006318:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800631a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800631e:	4302      	orrs	r2, r0
 8006320:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006322:	065f      	lsls	r7, r3, #25
 8006324:	d51d      	bpl.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x476>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006326:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800632a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800632e:	f000 821a 	beq.w	8006766 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8006332:	f200 80d3 	bhi.w	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8006336:	b14a      	cbz	r2, 800634c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006338:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800633c:	f040 80d8 	bne.w	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006340:	2100      	movs	r1, #0
 8006342:	1d20      	adds	r0, r4, #4
 8006344:	f7ff fcde 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006348:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800634a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800634c:	2d00      	cmp	r5, #0
 800634e:	f040 81e0 	bne.w	8006712 <HAL_RCCEx_PeriphCLKConfig+0x826>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006352:	498b      	ldr	r1, [pc, #556]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006354:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8006358:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800635a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800635e:	4302      	orrs	r2, r0
 8006360:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006362:	0618      	lsls	r0, r3, #24
 8006364:	d51d      	bpl.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006366:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800636a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800636e:	f000 8204 	beq.w	800677a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8006372:	f200 80c0 	bhi.w	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8006376:	b14a      	cbz	r2, 800638c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006378:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800637c:	f040 80c5 	bne.w	800650a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006380:	2100      	movs	r1, #0
 8006382:	1d20      	adds	r0, r4, #4
 8006384:	f7ff fcbe 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006388:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800638a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800638c:	2d00      	cmp	r5, #0
 800638e:	f040 81b2 	bne.w	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006392:	497b      	ldr	r1, [pc, #492]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006394:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8006398:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800639a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800639e:	4302      	orrs	r2, r0
 80063a0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063a2:	0719      	lsls	r1, r3, #28
 80063a4:	d50b      	bpl.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80063a6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80063aa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80063ae:	f000 8227 	beq.w	8006800 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80063b2:	4873      	ldr	r0, [pc, #460]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80063b4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80063b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063ba:	430a      	orrs	r2, r1
 80063bc:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063be:	06da      	lsls	r2, r3, #27
 80063c0:	d50b      	bpl.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80063c2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80063c6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80063ca:	f000 8226 	beq.w	800681a <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ce:	486c      	ldr	r0, [pc, #432]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80063d0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80063d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80063d6:	430a      	orrs	r2, r1
 80063d8:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063da:	031f      	lsls	r7, r3, #12
 80063dc:	d50e      	bpl.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch(PeriphClkInit->AdcClockSelection)
 80063de:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80063e2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80063e6:	f000 80e0 	beq.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x6be>
 80063ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80063ee:	f000 80e3 	beq.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80063f2:	2900      	cmp	r1, #0
 80063f4:	f000 81af 	beq.w	8006756 <HAL_RCCEx_PeriphCLKConfig+0x86a>
 80063f8:	2601      	movs	r6, #1
 80063fa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063fc:	0358      	lsls	r0, r3, #13
 80063fe:	d50f      	bpl.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch(PeriphClkInit->UsbClockSelection)
 8006400:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006404:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006408:	f000 80bc 	beq.w	8006584 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800640c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006410:	f000 80bf 	beq.w	8006592 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8006414:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006418:	f000 8195 	beq.w	8006746 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 800641c:	2601      	movs	r6, #1
 800641e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006420:	03d9      	lsls	r1, r3, #15
 8006422:	d509      	bpl.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch(PeriphClkInit->SdmmcClockSelection)
 8006424:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006426:	2a00      	cmp	r2, #0
 8006428:	f000 817b 	beq.w	8006722 <HAL_RCCEx_PeriphCLKConfig+0x836>
 800642c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006430:	f000 8135 	beq.w	800669e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8006434:	2601      	movs	r6, #1
 8006436:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006438:	009a      	lsls	r2, r3, #2
 800643a:	f100 811b 	bmi.w	8006674 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800643e:	039f      	lsls	r7, r3, #14
 8006440:	d466      	bmi.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x624>
    return HAL_OK;
 8006442:	1e30      	subs	r0, r6, #0
 8006444:	bf18      	it	ne
 8006446:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006448:	02de      	lsls	r6, r3, #11
 800644a:	d506      	bpl.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800644c:	494c      	ldr	r1, [pc, #304]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800644e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8006450:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006456:	432a      	orrs	r2, r5
 8006458:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800645a:	00dd      	lsls	r5, r3, #3
 800645c:	d507      	bpl.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x582>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800645e:	4948      	ldr	r1, [pc, #288]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006460:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8006464:	690a      	ldr	r2, [r1, #16]
 8006466:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800646a:	432a      	orrs	r2, r5
 800646c:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800646e:	0299      	lsls	r1, r3, #10
 8006470:	d506      	bpl.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x594>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006472:	4943      	ldr	r1, [pc, #268]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006474:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8006476:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006478:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800647c:	432a      	orrs	r2, r5
 800647e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006480:	005a      	lsls	r2, r3, #1
 8006482:	d509      	bpl.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006484:	4a3e      	ldr	r2, [pc, #248]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006486:	6911      	ldr	r1, [r2, #16]
 8006488:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800648c:	6111      	str	r1, [r2, #16]
 800648e:	6911      	ldr	r1, [r2, #16]
 8006490:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8006494:	4329      	orrs	r1, r5
 8006496:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006498:	2b00      	cmp	r3, #0
 800649a:	da06      	bge.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800649c:	4938      	ldr	r1, [pc, #224]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 800649e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80064a0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80064a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064a6:	432a      	orrs	r2, r5
 80064a8:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064aa:	021b      	lsls	r3, r3, #8
 80064ac:	d507      	bpl.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064ae:	4a34      	ldr	r2, [pc, #208]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 80064b0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80064b4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80064b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6553      	str	r3, [r2, #84]	; 0x54
}
 80064be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80064c2:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80064c6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80064ca:	f43f af1f 	beq.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80064ce:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80064d2:	f43f af1b 	beq.w	800630c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80064d6:	2601      	movs	r6, #1
 80064d8:	4635      	mov	r5, r6
 80064da:	e722      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x436>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80064dc:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80064e0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80064e4:	f43f af32 	beq.w	800634c <HAL_RCCEx_PeriphCLKConfig+0x460>
 80064e8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80064ec:	f43f af2e 	beq.w	800634c <HAL_RCCEx_PeriphCLKConfig+0x460>
 80064f0:	2601      	movs	r6, #1
 80064f2:	4635      	mov	r5, r6
 80064f4:	e735      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x476>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80064f6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80064fa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80064fe:	f43f af45 	beq.w	800638c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006502:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8006506:	f43f af41 	beq.w	800638c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800650a:	2601      	movs	r6, #1
 800650c:	4635      	mov	r5, r6
 800650e:	e748      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch(PeriphClkInit->RngClockSelection)
 8006510:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006512:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006516:	f000 810d 	beq.w	8006734 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800651a:	d906      	bls.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800651c:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8006520:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006524:	d003      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006526:	2001      	movs	r0, #1
 8006528:	e78e      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 800652a:	2a00      	cmp	r2, #0
 800652c:	d1fb      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if(ret == HAL_OK)
 800652e:	2d00      	cmp	r5, #0
 8006530:	d1f9      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006532:	4d13      	ldr	r5, [pc, #76]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
    return HAL_OK;
 8006534:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006536:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_OK;
 8006538:	bf18      	it	ne
 800653a:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800653c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006540:	430a      	orrs	r2, r1
 8006542:	656a      	str	r2, [r5, #84]	; 0x54
 8006544:	e780      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006546:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8006548:	2d00      	cmp	r5, #0
 800654a:	f040 80a4 	bne.w	8006696 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654e:	490c      	ldr	r1, [pc, #48]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006550:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006552:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006554:	f022 0207 	bic.w	r2, r2, #7
 8006558:	4302      	orrs	r2, r0
 800655a:	650a      	str	r2, [r1, #80]	; 0x50
 800655c:	e4fe      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800655e:	2101      	movs	r1, #1
 8006560:	1d20      	adds	r0, r4, #4
 8006562:	f7ff fbcf 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006566:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006568:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800656a:	2d00      	cmp	r5, #0
 800656c:	f040 80c9 	bne.w	8006702 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006570:	4903      	ldr	r1, [pc, #12]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x694>)
 8006572:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006574:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006576:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800657a:	4302      	orrs	r2, r0
 800657c:	650a      	str	r2, [r1, #80]	; 0x50
 800657e:	e5d5      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006580:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006584:	2101      	movs	r1, #1
 8006586:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800658a:	f7ff fc35 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800658e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006590:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006592:	2d00      	cmp	r5, #0
 8006594:	f040 80c3 	bne.w	800671e <HAL_RCCEx_PeriphCLKConfig+0x832>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006598:	49ac      	ldr	r1, [pc, #688]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800659a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800659e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80065a0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80065a4:	4302      	orrs	r2, r0
 80065a6:	654a      	str	r2, [r1, #84]	; 0x54
 80065a8:	e73a      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x534>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065aa:	2102      	movs	r1, #2
 80065ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80065b0:	f7ff fc22 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065b4:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80065b8:	2d00      	cmp	r5, #0
 80065ba:	f040 80ae 	bne.w	800671a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065be:	49a3      	ldr	r1, [pc, #652]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065c0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80065c4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80065c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80065ca:	4302      	orrs	r2, r0
 80065cc:	658a      	str	r2, [r1, #88]	; 0x58
 80065ce:	e715      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065d0:	2101      	movs	r1, #1
 80065d2:	1d20      	adds	r0, r4, #4
 80065d4:	f7ff fb96 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065d8:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80065dc:	2d00      	cmp	r5, #0
 80065de:	f040 809a 	bne.w	8006716 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065e2:	499a      	ldr	r1, [pc, #616]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80065e4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80065e6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80065e8:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80065ec:	4302      	orrs	r2, r0
 80065ee:	654a      	str	r2, [r1, #84]	; 0x54
 80065f0:	e636      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x374>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065f2:	4f97      	ldr	r7, [pc, #604]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80065fc:	f7fd fb9a 	bl	8003d34 <HAL_GetTick>
 8006600:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006602:	e006      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x726>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006604:	f7fd fb96 	bl	8003d34 <HAL_GetTick>
 8006608:	eba0 0008 	sub.w	r0, r0, r8
 800660c:	2864      	cmp	r0, #100	; 0x64
 800660e:	f200 817c 	bhi.w	800690a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	05da      	lsls	r2, r3, #23
 8006616:	d5f5      	bpl.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x718>
    if(ret == HAL_OK)
 8006618:	2d00      	cmp	r5, #0
 800661a:	f040 81a2 	bne.w	8006962 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800661e:	4a8b      	ldr	r2, [pc, #556]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006620:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006624:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006626:	4059      	eors	r1, r3
 8006628:	f411 7f40 	tst.w	r1, #768	; 0x300
 800662c:	d00b      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800662e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8006630:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006632:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006636:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800663a:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800663c:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800663e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8006642:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8006644:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664a:	f000 816c 	beq.w	8006926 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800664e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006652:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006656:	f000 817a 	beq.w	800694e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800665a:	497c      	ldr	r1, [pc, #496]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800665c:	690a      	ldr	r2, [r1, #16]
 800665e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8006662:	610a      	str	r2, [r1, #16]
 8006664:	4a79      	ldr	r2, [pc, #484]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800666a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800666c:	430b      	orrs	r3, r1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	e5c3      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x310>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006674:	2102      	movs	r1, #2
 8006676:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800667a:	f7ff fbbd 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800667e:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006680:	2800      	cmp	r0, #0
 8006682:	f43f aedc 	beq.w	800643e <HAL_RCCEx_PeriphCLKConfig+0x552>
      status=HAL_ERROR;
 8006686:	2601      	movs	r6, #1
 8006688:	e6d9      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x552>
 800668a:	462e      	mov	r6, r5
 800668c:	e484      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800668e:	462e      	mov	r6, r5
 8006690:	e501      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006692:	462e      	mov	r6, r5
 8006694:	e4a2      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8006696:	462e      	mov	r6, r5
 8006698:	e460      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x70>
 800669a:	462e      	mov	r6, r5
 800669c:	e4c0      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800669e:	2102      	movs	r1, #2
 80066a0:	1d20      	adds	r0, r4, #4
 80066a2:	f7ff fb2f 	bl	8005d04 <RCCEx_PLL2_Config>
 80066a6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066a8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	d140      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066ae:	4967      	ldr	r1, [pc, #412]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066b0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80066b2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80066b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066b8:	4302      	orrs	r2, r0
 80066ba:	64ca      	str	r2, [r1, #76]	; 0x4c
 80066bc:	e6bc      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066be:	4963      	ldr	r1, [pc, #396]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80066c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066c6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80066c8:	e45c      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ca:	4960      	ldr	r1, [pc, #384]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066cc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80066ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066d2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80066d4:	e477      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d6:	495d      	ldr	r1, [pc, #372]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80066da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066de:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80066e0:	e493      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e2:	495a      	ldr	r1, [pc, #360]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80066e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80066e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80066ea:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80066ec:	e4c9      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80066ee:	462e      	mov	r6, r5
 80066f0:	e617      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80066f2:	462e      	mov	r6, r5
 80066f4:	e57f      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80066f6:	462e      	mov	r6, r5
 80066f8:	e653      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80066fa:	462e      	mov	r6, r5
 80066fc:	e5ce      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80066fe:	462e      	mov	r6, r5
 8006700:	e5ef      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8006702:	462e      	mov	r6, r5
 8006704:	e512      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006706:	462e      	mov	r6, r5
 8006708:	e4a5      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800670a:	462e      	mov	r6, r5
 800670c:	e4e0      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800670e:	462e      	mov	r6, r5
 8006710:	e4fc      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006712:	462e      	mov	r6, r5
 8006714:	e625      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006716:	462e      	mov	r6, r5
 8006718:	e5a2      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800671a:	462e      	mov	r6, r5
 800671c:	e66e      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x510>
 800671e:	462e      	mov	r6, r5
 8006720:	e67e      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x534>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006722:	494a      	ldr	r1, [pc, #296]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006724:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006726:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800672a:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800672c:	2d00      	cmp	r5, #0
 800672e:	d0be      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8006730:	462e      	mov	r6, r5
 8006732:	e681      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006734:	4845      	ldr	r0, [pc, #276]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006736:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006738:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800673c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800673e:	2d00      	cmp	r5, #0
 8006740:	f47f aef1 	bne.w	8006526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 8006744:	e6f5      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x646>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006746:	4941      	ldr	r1, [pc, #260]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006748:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800674a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800674e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8006750:	2d00      	cmp	r5, #0
 8006752:	d1e4      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006754:	e720      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006756:	1d20      	adds	r0, r4, #4
 8006758:	f7ff fad4 	bl	8005d04 <RCCEx_PLL2_Config>
 800675c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800675e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006760:	2d00      	cmp	r5, #0
 8006762:	d1da      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006764:	e72b      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006766:	2102      	movs	r1, #2
 8006768:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800676c:	f7ff fb44 	bl	8005df8 <RCCEx_PLL3_Config>
 8006770:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006772:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006774:	2d00      	cmp	r5, #0
 8006776:	d1cc      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x826>
 8006778:	e5eb      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x466>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800677a:	2102      	movs	r1, #2
 800677c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006780:	f7ff fb3a 	bl	8005df8 <RCCEx_PLL3_Config>
 8006784:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006786:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006788:	2d00      	cmp	r5, #0
 800678a:	d1b4      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800678c:	e601      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800678e:	2101      	movs	r1, #1
 8006790:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006794:	f7ff fb30 	bl	8005df8 <RCCEx_PLL3_Config>
 8006798:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800679a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800679c:	2d00      	cmp	r5, #0
 800679e:	d1b4      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80067a0:	e48f      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067a2:	2101      	movs	r1, #1
 80067a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067a8:	f7ff fb26 	bl	8005df8 <RCCEx_PLL3_Config>
 80067ac:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067ae:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	d1ac      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x822>
 80067b4:	e4a2      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b6:	4925      	ldr	r1, [pc, #148]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80067b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80067ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80067be:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	d19e      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80067c4:	e6d4      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067c6:	2102      	movs	r1, #2
 80067c8:	1d20      	adds	r0, r4, #4
 80067ca:	f7ff fa9b 	bl	8005d04 <RCCEx_PLL2_Config>
 80067ce:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067d0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	d197      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80067d6:	e437      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067d8:	2102      	movs	r1, #2
 80067da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067de:	f7ff fb0b 	bl	8005df8 <RCCEx_PLL3_Config>
 80067e2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067e4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	d181      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x802>
 80067ea:	e592      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x426>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067ec:	2102      	movs	r1, #2
 80067ee:	1d20      	adds	r0, r4, #4
 80067f0:	f7ff fa88 	bl	8005d04 <RCCEx_PLL2_Config>
 80067f4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067f6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	f47f af7a 	bne.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
 80067fe:	e4f3      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006800:	2102      	movs	r1, #2
 8006802:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006806:	f7ff faf7 	bl	8005df8 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800680a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800680e:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006810:	2800      	cmp	r0, #0
 8006812:	f43f adce 	beq.w	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
          status = HAL_ERROR;
 8006816:	2601      	movs	r6, #1
 8006818:	e5cb      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800681a:	2102      	movs	r1, #2
 800681c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006820:	f7ff faea 	bl	8005df8 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006824:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006828:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800682a:	2800      	cmp	r0, #0
 800682c:	f43f adcf 	beq.w	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        status = HAL_ERROR;
 8006830:	2601      	movs	r6, #1
 8006832:	e5cc      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006834:	2102      	movs	r1, #2
 8006836:	3024      	adds	r0, #36	; 0x24
 8006838:	f7ff fade 	bl	8005df8 <RCCEx_PLL3_Config>
 800683c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800683e:	2e00      	cmp	r6, #0
 8006840:	f43f ab70 	beq.w	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	f7ff bb7b 	b.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400
 8006850:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006854:	2100      	movs	r1, #0
 8006856:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800685a:	f7ff facd 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800685e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006860:	4605      	mov	r5, r0
      break;
 8006862:	f7ff bbb0 	b.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006866:	2100      	movs	r1, #0
 8006868:	1d20      	adds	r0, r4, #4
 800686a:	f7ff fa4b 	bl	8005d04 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800686e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006870:	4605      	mov	r5, r0
      break;
 8006872:	e669      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006874:	2100      	movs	r1, #0
 8006876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800687a:	f7ff fabd 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800687e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006880:	4605      	mov	r5, r0
      break;
 8006882:	e661      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006884:	2100      	movs	r1, #0
 8006886:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800688a:	f7ff fab5 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800688e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006890:	4605      	mov	r5, r0
      break;
 8006892:	f7ff bbf6 	b.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006896:	2100      	movs	r1, #0
 8006898:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800689c:	f7ff faac 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80068a0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068a2:	4605      	mov	r5, r0
      break;
 80068a4:	f7ff bb6e 	b.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4934      	ldr	r1, [pc, #208]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
      break;
 80068aa:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ac:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80068ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80068b2:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80068b4:	e648      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068b6:	2100      	movs	r1, #0
 80068b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068bc:	f7ff fa9c 	bl	8005df8 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068c0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068c2:	4605      	mov	r5, r0
      break;
 80068c4:	f7ff bba1 	b.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c8:	2101      	movs	r1, #1
 80068ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068ce:	f7ff fa93 	bl	8005df8 <RCCEx_PLL3_Config>
 80068d2:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068d4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	f47f af0f 	bne.w	80066fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80068dc:	e4d7      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068de:	2101      	movs	r1, #1
 80068e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068e4:	f7ff fa88 	bl	8005df8 <RCCEx_PLL3_Config>
 80068e8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80068ec:	2d00      	cmp	r5, #0
 80068ee:	f47f af06 	bne.w	80066fe <HAL_RCCEx_PeriphCLKConfig+0x812>
 80068f2:	e4ee      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068f4:	2101      	movs	r1, #1
 80068f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068fa:	f7ff fa7d 	bl	8005df8 <RCCEx_PLL3_Config>
 80068fe:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006900:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006902:	2d00      	cmp	r5, #0
 8006904:	f47f af07 	bne.w	8006716 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8006908:	e66b      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        status = ret;
 800690a:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	4635      	mov	r5, r6
 8006910:	e474      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x310>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006912:	2601      	movs	r6, #1
 8006914:	f7ff bb14 	b.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006918:	4818      	ldr	r0, [pc, #96]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 800691a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800691c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006920:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8006922:	f7ff bb06 	b.w	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8006926:	f7fd fa05 	bl	8003d34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800692a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800697c <HAL_RCCEx_PeriphCLKConfig+0xa90>
        tickstart = HAL_GetTick();
 800692e:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006934:	e004      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xa54>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006936:	f7fd f9fd 	bl	8003d34 <HAL_GetTick>
 800693a:	1bc0      	subs	r0, r0, r7
 800693c:	4548      	cmp	r0, r9
 800693e:	d8e4      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006940:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006944:	079b      	lsls	r3, r3, #30
 8006946:	d5f6      	bpl.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006948:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800694c:	e67f      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x762>
 800694e:	480b      	ldr	r0, [pc, #44]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8006950:	4a0b      	ldr	r2, [pc, #44]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006952:	6901      	ldr	r1, [r0, #16]
 8006954:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8006958:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 800695c:	430a      	orrs	r2, r1
 800695e:	6102      	str	r2, [r0, #16]
 8006960:	e680      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x778>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	462e      	mov	r6, r5
 8006966:	e449      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x310>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006968:	2601      	movs	r6, #1
 800696a:	4635      	mov	r5, r6
 800696c:	e496      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    switch(PeriphClkInit->FmcClockSelection)
 800696e:	2601      	movs	r6, #1
 8006970:	4635      	mov	r5, r6
 8006972:	e440      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006974:	2601      	movs	r6, #1
 8006976:	4635      	mov	r5, r6
 8006978:	e4b3      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800697a:	bf00      	nop
 800697c:	58024400 	.word	0x58024400
 8006980:	00ffffcf 	.word	0x00ffffcf

08006984 <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006984:	6801      	ldr	r1, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006986:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006988:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 800698a:	f822 3b02 	strh.w	r3, [r2], #2
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
  hspi->RxXferCount--;
 800698e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006992:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8006994:	3b01      	subs	r3, #1
 8006996:	b29b      	uxth	r3, r3
 8006998:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800699c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	b91b      	cbnz	r3, 80069ac <SPI_RxISR_16BIT+0x28>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80069a4:	690b      	ldr	r3, [r1, #16]
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop

080069b0 <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80069b0:	6801      	ldr	r1, [r0, #0]
 80069b2:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 80069b4:	b410      	push	{r4}
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80069b6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hspi->pRxBuffPtr += sizeof(uint32_t);
  hspi->RxXferCount--;
 80069b8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80069bc:	f842 4b04 	str.w	r4, [r2], #4
  hspi->RxXferCount--;
 80069c0:	3b01      	subs	r3, #1
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80069c2:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80069ca:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	b91b      	cbnz	r3, 80069da <SPI_RxISR_32BIT+0x2a>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80069da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <SPI_TxISR_16BIT>:
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80069e0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80069e2:	6801      	ldr	r1, [r0, #0]
  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80069e4:	f832 3b02 	ldrh.w	r3, [r2], #2
 80069e8:	840b      	strh	r3, [r1, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
  hspi->TxXferCount--;
 80069ea:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ee:	65c2      	str	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80069f8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	b91b      	cbnz	r3, 8006a08 <SPI_TxISR_16BIT+0x28>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8006a00:	690b      	ldr	r3, [r1, #16]
 8006a02:	f023 0302 	bic.w	r3, r3, #2
 8006a06:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop

08006a0c <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006a0c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006a0e:	6801      	ldr	r1, [r0, #0]
 8006a10:	f852 3b04 	ldr.w	r3, [r2], #4
 8006a14:	620b      	str	r3, [r1, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
  hspi->TxXferCount--;
 8006a16:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a1a:	65c2      	str	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8006a24:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	b91b      	cbnz	r3, 8006a34 <SPI_TxISR_32BIT+0x28>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8006a2c:	690b      	ldr	r3, [r1, #16]
 8006a2e:	f023 0302 	bic.w	r3, r3, #2
 8006a32:	610b      	str	r3, [r1, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop

08006a38 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8006a38:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a3a:	492c      	ldr	r1, [pc, #176]	; (8006aec <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8006a3c:	695a      	ldr	r2, [r3, #20]
{
 8006a3e:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a40:	699c      	ldr	r4, [r3, #24]
 8006a42:	f044 0408 	orr.w	r4, r4, #8
 8006a46:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a48:	699c      	ldr	r4, [r3, #24]
 8006a4a:	f044 0410 	orr.w	r4, r4, #16
 8006a4e:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8006a50:	681c      	ldr	r4, [r3, #0]
 8006a52:	f024 0401 	bic.w	r4, r4, #1
 8006a56:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a58:	691c      	ldr	r4, [r3, #16]
 8006a5a:	4021      	ands	r1, r4
 8006a5c:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a5e:	6899      	ldr	r1, [r3, #8]
 8006a60:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8006a64:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a66:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8006a6a:	2904      	cmp	r1, #4
 8006a6c:	d001      	beq.n	8006a72 <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a6e:	0691      	lsls	r1, r2, #26
 8006a70:	d430      	bmi.n	8006ad4 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a72:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8006a76:	2903      	cmp	r1, #3
 8006a78:	d001      	beq.n	8006a7e <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a7a:	0654      	lsls	r4, r2, #25
 8006a7c:	d41f      	bmi.n	8006abe <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a7e:	0591      	lsls	r1, r2, #22
 8006a80:	d509      	bpl.n	8006a96 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a82:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006a86:	f041 0101 	orr.w	r1, r1, #1
 8006a8a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a8e:	6999      	ldr	r1, [r3, #24]
 8006a90:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006a94:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a96:	05d2      	lsls	r2, r2, #23
 8006a98:	d509      	bpl.n	8006aae <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a9a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8006a9e:	f042 0208 	orr.w	r2, r2, #8
 8006aa2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aac:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006aae:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8006ab4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ab8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8006abc:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006abe:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006ac2:	f041 0104 	orr.w	r1, r1, #4
 8006ac6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aca:	6999      	ldr	r1, [r3, #24]
 8006acc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006ad0:	6199      	str	r1, [r3, #24]
 8006ad2:	e7d4      	b.n	8006a7e <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ad4:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8006ad8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006adc:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ae0:	6999      	ldr	r1, [r3, #24]
 8006ae2:	f041 0120 	orr.w	r1, r1, #32
 8006ae6:	6199      	str	r1, [r3, #24]
 8006ae8:	e7c3      	b.n	8006a72 <SPI_CloseTransfer+0x3a>
 8006aea:	bf00      	nop
 8006aec:	fffffc90 	.word	0xfffffc90

08006af0 <SPI_RxISR_8BIT>:
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 8006af0:	6802      	ldr	r2, [r0, #0]
 8006af2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006af4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006af8:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8006afa:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8006afe:	6e42      	ldr	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8006b00:	3b01      	subs	r3, #1
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b02:	3201      	adds	r2, #1
  hspi->RxXferCount--;
 8006b04:	b29b      	uxth	r3, r3
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b06:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 8006b08:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  if (hspi->RxXferCount == 0UL)
 8006b0c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	b923      	cbnz	r3, 8006b1e <SPI_RxISR_8BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8006b14:	6802      	ldr	r2, [r0, #0]
 8006b16:	6913      	ldr	r3, [r2, #16]
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	6113      	str	r3, [r2, #16]
}
 8006b1e:	4770      	bx	lr

08006b20 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8006b20:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006b22:	6803      	ldr	r3, [r0, #0]
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->TxXferCount--;
 8006b2a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 8006b30:	3b01      	subs	r3, #1
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b32:	3201      	adds	r2, #1
  hspi->TxXferCount--;
 8006b34:	b29b      	uxth	r3, r3
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b36:	65c2      	str	r2, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 8006b38:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->TxXferCount == 0UL)
 8006b3c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	b923      	cbnz	r3, 8006b4e <SPI_TxISR_8BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8006b44:	6802      	ldr	r2, [r0, #0]
 8006b46:	6913      	ldr	r3, [r2, #16]
 8006b48:	f023 0302 	bic.w	r3, r3, #2
 8006b4c:	6113      	str	r3, [r2, #16]
}
 8006b4e:	4770      	bx	lr

08006b50 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006b50:	2800      	cmp	r0, #0
 8006b52:	f000 80b3 	beq.w	8006cbc <HAL_SPI_Init+0x16c>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b56:	4a5c      	ldr	r2, [pc, #368]	; (8006cc8 <HAL_SPI_Init+0x178>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b58:	2100      	movs	r1, #0
{
 8006b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b5c:	6803      	ldr	r3, [r0, #0]
 8006b5e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b60:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d016      	beq.n	8006b94 <HAL_SPI_Init+0x44>
 8006b66:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d012      	beq.n	8006b94 <HAL_SPI_Init+0x44>
 8006b6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b72:	68c1      	ldr	r1, [r0, #12]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	f000 8099 	beq.w	8006cac <HAL_SPI_Init+0x15c>
 8006b7a:	290f      	cmp	r1, #15
 8006b7c:	d808      	bhi.n	8006b90 <HAL_SPI_Init+0x40>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b7e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b80:	f101 0208 	add.w	r2, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b84:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8006b86:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 8006b88:	fb05 2202 	mla	r2, r5, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b8c:	2a08      	cmp	r2, #8
 8006b8e:	d915      	bls.n	8006bbc <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8006b90:	2001      	movs	r0, #1
}
 8006b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  data_size = (data_size + 7UL) / 8UL;
 8006b94:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8006b98:	f101 0208 	add.w	r2, r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b9c:	4e4a      	ldr	r6, [pc, #296]	; (8006cc8 <HAL_SPI_Init+0x178>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b9e:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8006ba0:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8006ba2:	fb05 2202 	mla	r2, r5, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ba6:	4d49      	ldr	r5, [pc, #292]	; (8006ccc <HAL_SPI_Init+0x17c>)
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	bf18      	it	ne
 8006bac:	42b3      	cmpne	r3, r6
 8006bae:	d003      	beq.n	8006bb8 <HAL_SPI_Init+0x68>
 8006bb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	d101      	bne.n	8006bbc <HAL_SPI_Init+0x6c>
 8006bb8:	2a10      	cmp	r2, #16
 8006bba:	d8e9      	bhi.n	8006b90 <HAL_SPI_Init+0x40>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bbc:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006bc0:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	d067      	beq.n	8006c98 <HAL_SPI_Init+0x148>
 8006bc8:	2700      	movs	r7, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8006bca:	2202      	movs	r2, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bcc:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8006bd0:	6865      	ldr	r5, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bd6:	f1be 6f80 	cmp.w	lr, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8006bda:	681a      	ldr	r2, [r3, #0]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006bdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8006bde:	f022 0201 	bic.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	f402 1cf8 	and.w	ip, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bea:	d048      	beq.n	8006c7e <HAL_SPI_Init+0x12e>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006bec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006bee:	ea4e 0e02 	orr.w	lr, lr, r2
 8006bf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bf4:	ea4e 0e02 	orr.w	lr, lr, r2
 8006bf8:	6922      	ldr	r2, [r4, #16]
 8006bfa:	ea4e 0e02 	orr.w	lr, lr, r2
 8006bfe:	6962      	ldr	r2, [r4, #20]
 8006c00:	ea4e 0e02 	orr.w	lr, lr, r2
 8006c04:	6a22      	ldr	r2, [r4, #32]
 8006c06:	ea4e 0e02 	orr.w	lr, lr, r2
 8006c0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006c0c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006c10:	68a2      	ldr	r2, [r4, #8]
 8006c12:	ea4e 0e02 	orr.w	lr, lr, r2
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c16:	69e2      	ldr	r2, [r4, #28]
 8006c18:	4302      	orrs	r2, r0
 8006c1a:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c1c:	6da1      	ldr	r1, [r4, #88]	; 0x58
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c1e:	433a      	orrs	r2, r7
 8006c20:	ea42 020c 	orr.w	r2, r2, ip
 8006c24:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006c28:	ea4e 0202 	orr.w	r2, lr, r2
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	432a      	orrs	r2, r5
 8006c30:	4332      	orrs	r2, r6
 8006c32:	60da      	str	r2, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006c34:	b9b5      	cbnz	r5, 8006c64 <HAL_SPI_Init+0x114>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8006c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8006c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c4c:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c56:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006c58:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c5a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006c5e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c66:	f022 0201 	bic.w	r2, r2, #1
 8006c6a:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006c6c:	026a      	lsls	r2, r5, #9
 8006c6e:	d5f2      	bpl.n	8006c56 <HAL_SPI_Init+0x106>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006c74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	e7eb      	b.n	8006c56 <HAL_SPI_Init+0x106>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c7e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8006c82:	d01d      	beq.n	8006cc0 <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	d1b1      	bne.n	8006bec <HAL_SPI_Init+0x9c>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c88:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 8006c8c:	d1ae      	bne.n	8006bec <HAL_SPI_Init+0x9c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e7a9      	b.n	8006bec <HAL_SPI_Init+0x9c>
    HAL_SPI_MspInit(hspi);
 8006c98:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006c9a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006c9e:	f7fc fa7f 	bl	80031a0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006ca2:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006ca4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006ca6:	68e1      	ldr	r1, [r4, #12]
 8006ca8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006caa:	e78e      	b.n	8006bca <HAL_SPI_Init+0x7a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006cac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8006cae:	f101 0208 	add.w	r2, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006cb2:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8006cb4:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8006cb6:	fb05 2202 	mla	r2, r5, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cba:	e77d      	b.n	8006bb8 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8006cbc:	2001      	movs	r0, #1
}
 8006cbe:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006cc0:	2e00      	cmp	r6, #0
 8006cc2:	d0e4      	beq.n	8006c8e <HAL_SPI_Init+0x13e>
 8006cc4:	e792      	b.n	8006bec <HAL_SPI_Init+0x9c>
 8006cc6:	bf00      	nop
 8006cc8:	40013000 	.word	0x40013000
 8006ccc:	40003800 	.word	0x40003800

08006cd0 <HAL_SPI_TransmitReceive_IT>:
{
 8006cd0:	4684      	mov	ip, r0
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006cd2:	6800      	ldr	r0, [r0, #0]
{
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8006cd6:	f89c 4080 	ldrb.w	r4, [ip, #128]	; 0x80
 8006cda:	2c01      	cmp	r4, #1
 8006cdc:	f000 80d3 	beq.w	8006e86 <HAL_SPI_TransmitReceive_IT+0x1b6>
  tmp_state  = hspi->State;
 8006ce0:	f89c 4081 	ldrb.w	r4, [ip, #129]	; 0x81
  __HAL_LOCK(hspi);
 8006ce4:	2501      	movs	r5, #1
 8006ce6:	4686      	mov	lr, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ce8:	2c01      	cmp	r4, #1
  __HAL_LOCK(hspi);
 8006cea:	f88c 5080 	strb.w	r5, [ip, #128]	; 0x80
  tmp_state  = hspi->State;
 8006cee:	b2e6      	uxtb	r6, r4
  tmp_mode   = hspi->Init.Mode;
 8006cf0:	f8dc 5004 	ldr.w	r5, [ip, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cf4:	d008      	beq.n	8006d08 <HAL_SPI_TransmitReceive_IT+0x38>
 8006cf6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8006cfa:	d178      	bne.n	8006dee <HAL_SPI_TransmitReceive_IT+0x11e>
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006cfc:	f8dc 4008 	ldr.w	r4, [ip, #8]
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006d00:	2c00      	cmp	r4, #0
 8006d02:	d174      	bne.n	8006dee <HAL_SPI_TransmitReceive_IT+0x11e>
 8006d04:	2e04      	cmp	r6, #4
 8006d06:	d172      	bne.n	8006dee <HAL_SPI_TransmitReceive_IT+0x11e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf18      	it	ne
 8006d0c:	2a00      	cmpne	r2, #0
 8006d0e:	d073      	beq.n	8006df8 <HAL_SPI_TransmitReceive_IT+0x128>
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d071      	beq.n	8006df8 <HAL_SPI_TransmitReceive_IT+0x128>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d14:	f89c 4081 	ldrb.w	r4, [ip, #129]	; 0x81
 8006d18:	2c04      	cmp	r4, #4
 8006d1a:	d002      	beq.n	8006d22 <HAL_SPI_TransmitReceive_IT+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d1c:	2405      	movs	r4, #5
 8006d1e:	f88c 4081 	strb.w	r4, [ip, #129]	; 0x81
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d22:	f8dc 400c 	ldr.w	r4, [ip, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d26:	f8cc 2064 	str.w	r2, [ip, #100]	; 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2a:	2200      	movs	r2, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d2c:	2c0f      	cmp	r4, #15
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d2e:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d32:	f8cc 2084 	str.w	r2, [ip, #132]	; 0x84
  hspi->TxXferCount = Size;
 8006d36:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->RxXferCount = Size;
 8006d3a:	f8ac 306a 	strh.w	r3, [ip, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8006d3e:	f8bc 2062 	ldrh.w	r2, [ip, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006d42:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  tmp_TxXferCount   = hspi->TxXferCount;
 8006d46:	b297      	uxth	r7, r2
  hspi->RxXferSize  = Size;
 8006d48:	f8ac 3068 	strh.w	r3, [ip, #104]	; 0x68
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d4c:	d859      	bhi.n	8006e02 <HAL_SPI_TransmitReceive_IT+0x132>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d4e:	2c07      	cmp	r4, #7
 8006d50:	f240 80af 	bls.w	8006eb2 <HAL_SPI_TransmitReceive_IT+0x1e2>
    hspi->RxISR     = SPI_RxISR_16BIT;
 8006d54:	4a5a      	ldr	r2, [pc, #360]	; (8006ec0 <HAL_SPI_TransmitReceive_IT+0x1f0>)
 8006d56:	f8cc 2070 	str.w	r2, [ip, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8006d5a:	4a5a      	ldr	r2, [pc, #360]	; (8006ec4 <HAL_SPI_TransmitReceive_IT+0x1f4>)
 8006d5c:	f8cc 2074 	str.w	r2, [ip, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006d60:	6846      	ldr	r6, [r0, #4]
 8006d62:	4a59      	ldr	r2, [pc, #356]	; (8006ec8 <HAL_SPI_TransmitReceive_IT+0x1f8>)
 8006d64:	4032      	ands	r2, r6
 8006d66:	431a      	orrs	r2, r3
 8006d68:	6042      	str	r2, [r0, #4]
  __HAL_SPI_ENABLE(hspi);
 8006d6a:	6803      	ldr	r3, [r0, #0]
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6003      	str	r3, [r0, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8006d72:	6943      	ldr	r3, [r0, #20]
 8006d74:	079e      	lsls	r6, r3, #30
 8006d76:	f140 808a 	bpl.w	8006e8e <HAL_SPI_TransmitReceive_IT+0x1be>
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	f000 8087 	beq.w	8006e8e <HAL_SPI_TransmitReceive_IT+0x1be>
 8006d80:	2210      	movs	r2, #16
 8006d82:	e018      	b.n	8006db6 <HAL_SPI_TransmitReceive_IT+0xe6>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006d84:	f851 3b04 	ldr.w	r3, [r1], #4
 8006d88:	6203      	str	r3, [r0, #32]
          hspi->TxXferCount--;
 8006d8a:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8e:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount--;
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8006d9a:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8006d9e:	b29b      	uxth	r3, r3
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8006da0:	6941      	ldr	r1, [r0, #20]
 8006da2:	0789      	lsls	r1, r1, #30
 8006da4:	d571      	bpl.n	8006e8a <HAL_SPI_TransmitReceive_IT+0x1ba>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d06f      	beq.n	8006e8a <HAL_SPI_TransmitReceive_IT+0x1ba>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 8006daa:	3a01      	subs	r2, #1
 8006dac:	d01f      	beq.n	8006dee <HAL_SPI_TransmitReceive_IT+0x11e>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006dae:	f8dc 400c 	ldr.w	r4, [ip, #12]
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006db2:	f8dc 105c 	ldr.w	r1, [ip, #92]	; 0x5c
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006db6:	2c0f      	cmp	r4, #15
 8006db8:	d8e4      	bhi.n	8006d84 <HAL_SPI_TransmitReceive_IT+0xb4>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006dba:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dbe:	2c07      	cmp	r4, #7
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006dc0:	b29b      	uxth	r3, r3
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dc2:	d925      	bls.n	8006e10 <HAL_SPI_TransmitReceive_IT+0x140>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d945      	bls.n	8006e54 <HAL_SPI_TransmitReceive_IT+0x184>
 8006dc8:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d041      	beq.n	8006e54 <HAL_SPI_TransmitReceive_IT+0x184>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006dd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006dd4:	6203      	str	r3, [r0, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8006dd6:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dda:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006dde:	3b02      	subs	r3, #2
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8006de6:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	e7d8      	b.n	8006da0 <HAL_SPI_TransmitReceive_IT+0xd0>
    __HAL_UNLOCK(hspi);
 8006dee:	2300      	movs	r3, #0
    return errorcode;
 8006df0:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8006df2:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8006df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006df8:	2300      	movs	r3, #0
    return errorcode;
 8006dfa:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8006dfc:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8006e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->TxISR     = SPI_TxISR_32BIT;
 8006e02:	4a32      	ldr	r2, [pc, #200]	; (8006ecc <HAL_SPI_TransmitReceive_IT+0x1fc>)
 8006e04:	f8cc 2074 	str.w	r2, [ip, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8006e08:	4a31      	ldr	r2, [pc, #196]	; (8006ed0 <HAL_SPI_TransmitReceive_IT+0x200>)
 8006e0a:	f8cc 2070 	str.w	r2, [ip, #112]	; 0x70
 8006e0e:	e7a7      	b.n	8006d60 <HAL_SPI_TransmitReceive_IT+0x90>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d912      	bls.n	8006e3a <HAL_SPI_TransmitReceive_IT+0x16a>
 8006e14:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d90e      	bls.n	8006e3a <HAL_SPI_TransmitReceive_IT+0x16a>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006e20:	6203      	str	r3, [r0, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 8006e22:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e26:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006e2a:	3b04      	subs	r3, #4
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8006e32:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	e7b2      	b.n	8006da0 <HAL_SPI_TransmitReceive_IT+0xd0>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006e3a:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d90c      	bls.n	8006e5e <HAL_SPI_TransmitReceive_IT+0x18e>
 8006e44:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 8006e48:	b14b      	cbz	r3, 8006e5e <HAL_SPI_TransmitReceive_IT+0x18e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006e4e:	f8ae 3020 	strh.w	r3, [lr, #32]
 8006e52:	e7c0      	b.n	8006dd6 <HAL_SPI_TransmitReceive_IT+0x106>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006e54:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006e58:	f8ae 3020 	strh.w	r3, [lr, #32]
 8006e5c:	e795      	b.n	8006d8a <HAL_SPI_TransmitReceive_IT+0xba>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006e5e:	780b      	ldrb	r3, [r1, #0]
 8006e60:	f880 3020 	strb.w	r3, [r0, #32]
          hspi->TxXferCount--;
 8006e64:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e68:	f8dc 105c 	ldr.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount--;
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f8dc 0000 	ldr.w	r0, [ip]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e72:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8006e74:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e76:	f8cc 105c 	str.w	r1, [ip, #92]	; 0x5c
          hspi->TxXferCount--;
 8006e7a:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8006e7e:	f8bc 3062 	ldrh.w	r3, [ip, #98]	; 0x62
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	e78c      	b.n	8006da0 <HAL_SPI_TransmitReceive_IT+0xd0>
  __HAL_LOCK(hspi);
 8006e86:	2002      	movs	r0, #2
}
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8a:	f8dc 5004 	ldr.w	r5, [ip, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8006e8e:	6902      	ldr	r2, [r0, #16]
 8006e90:	f240 736c 	movw	r3, #1900	; 0x76c
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e94:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8006e98:	ea43 0302 	orr.w	r3, r3, r2
 8006e9c:	6103      	str	r3, [r0, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e9e:	d103      	bne.n	8006ea8 <HAL_SPI_TransmitReceive_IT+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006ea0:	6803      	ldr	r3, [r0, #0]
 8006ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ea6:	6003      	str	r3, [r0, #0]
  __HAL_UNLOCK(hspi);
 8006ea8:	2300      	movs	r3, #0
  return errorcode;
 8006eaa:	4618      	mov	r0, r3
  __HAL_UNLOCK(hspi);
 8006eac:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->RxISR     = SPI_RxISR_8BIT;
 8006eb2:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <HAL_SPI_TransmitReceive_IT+0x204>)
 8006eb4:	f8cc 2070 	str.w	r2, [ip, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8006eb8:	4a07      	ldr	r2, [pc, #28]	; (8006ed8 <HAL_SPI_TransmitReceive_IT+0x208>)
 8006eba:	f8cc 2074 	str.w	r2, [ip, #116]	; 0x74
 8006ebe:	e74f      	b.n	8006d60 <HAL_SPI_TransmitReceive_IT+0x90>
 8006ec0:	08006985 	.word	0x08006985
 8006ec4:	080069e1 	.word	0x080069e1
 8006ec8:	ffff0000 	.word	0xffff0000
 8006ecc:	08006a0d 	.word	0x08006a0d
 8006ed0:	080069b1 	.word	0x080069b1
 8006ed4:	08006af1 	.word	0x08006af1
 8006ed8:	08006b21 	.word	0x08006b21

08006edc <HAL_SPI_Receive_IT>:
{
 8006edc:	b430      	push	{r4, r5}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006ede:	6885      	ldr	r5, [r0, #8]
{
 8006ee0:	4684      	mov	ip, r0
 8006ee2:	460c      	mov	r4, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006ee4:	b91d      	cbnz	r5, 8006eee <HAL_SPI_Receive_IT+0x12>
 8006ee6:	6843      	ldr	r3, [r0, #4]
 8006ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eec:	d060      	beq.n	8006fb0 <HAL_SPI_Receive_IT+0xd4>
  __HAL_LOCK(hspi);
 8006eee:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d064      	beq.n	8006fc0 <HAL_SPI_Receive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006ef6:	f89c 3081 	ldrb.w	r3, [ip, #129]	; 0x81
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	b2d8      	uxtb	r0, r3
 8006efe:	d14a      	bne.n	8006f96 <HAL_SPI_Receive_IT+0xba>
  if ((pData == NULL) || (Size == 0UL))
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d050      	beq.n	8006fa6 <HAL_SPI_Receive_IT+0xca>
 8006f04:	fab2 f382 	clz	r3, r2
 8006f08:	095b      	lsrs	r3, r3, #5
 8006f0a:	2a00      	cmp	r2, #0
 8006f0c:	d04b      	beq.n	8006fa6 <HAL_SPI_Receive_IT+0xca>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f0e:	f8dc 100c 	ldr.w	r1, [ip, #12]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f12:	2004      	movs	r0, #4
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f14:	f8cc 4064 	str.w	r4, [ip, #100]	; 0x64
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f18:	290f      	cmp	r1, #15
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f1a:	f88c 0081 	strb.w	r0, [ip, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8006f1e:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f22:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pTxBuffPtr  = NULL;
 8006f26:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->RxXferCount = Size;
 8006f2a:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006f2e:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxISR       = NULL;
 8006f32:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  hspi->TxXferCount = (uint16_t) 0UL;
 8006f36:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f3a:	d832      	bhi.n	8006fa2 <HAL_SPI_Receive_IT+0xc6>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f3c:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <HAL_SPI_Receive_IT+0xec>)
 8006f3e:	4823      	ldr	r0, [pc, #140]	; (8006fcc <HAL_SPI_Receive_IT+0xf0>)
 8006f40:	2907      	cmp	r1, #7
 8006f42:	bf88      	it	hi
 8006f44:	4603      	movhi	r3, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f46:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
    hspi->RxISR = SPI_RxISR_32BIT;
 8006f4a:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
    SPI_1LINE_RX(hspi);
 8006f4e:	f8dc 3000 	ldr.w	r3, [ip]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f52:	d103      	bne.n	8006f5c <HAL_SPI_Receive_IT+0x80>
    SPI_1LINE_RX(hspi);
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006f5a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006f5c:	6858      	ldr	r0, [r3, #4]
 8006f5e:	491c      	ldr	r1, [pc, #112]	; (8006fd0 <HAL_SPI_Receive_IT+0xf4>)
 8006f60:	4001      	ands	r1, r0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8006f62:	f240 7049 	movw	r0, #1865	; 0x749
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006f66:	4311      	orrs	r1, r2
 8006f68:	6059      	str	r1, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f042 0201 	orr.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	4310      	orrs	r0, r2
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f76:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8006f7a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8006f7e:	6118      	str	r0, [r3, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f80:	d103      	bne.n	8006f8a <HAL_SPI_Receive_IT+0xae>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f88:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006f8a:	2300      	movs	r3, #0
  return errorcode;
 8006f8c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hspi);
 8006f8e:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8006f92:	bc30      	pop	{r4, r5}
 8006f94:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 8006f96:	2300      	movs	r3, #0
    return errorcode;
 8006f98:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8006f9a:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8006f9e:	bc30      	pop	{r4, r5}
 8006fa0:	4770      	bx	lr
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <HAL_SPI_Receive_IT+0xf8>)
 8006fa4:	e7cf      	b.n	8006f46 <HAL_SPI_Receive_IT+0x6a>
    __HAL_UNLOCK(hspi);
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
}
 8006fac:	bc30      	pop	{r4, r5}
 8006fae:	4770      	bx	lr
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fb0:	2404      	movs	r4, #4
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fb6:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
}
 8006fba:	bc30      	pop	{r4, r5}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006fbc:	f7ff be88 	b.w	8006cd0 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8006fc0:	2002      	movs	r0, #2
}
 8006fc2:	bc30      	pop	{r4, r5}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	08006af1 	.word	0x08006af1
 8006fcc:	08006985 	.word	0x08006985
 8006fd0:	ffff0000 	.word	0xffff0000
 8006fd4:	080069b1 	.word	0x080069b1

08006fd8 <HAL_SPI_TxCpltCallback>:
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop

08006fdc <HAL_SPI_TxRxCpltCallback>:
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop

08006fe0 <HAL_SPI_ErrorCallback>:
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8006fe4:	6803      	ldr	r3, [r0, #0]
 8006fe6:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006fe8:	695a      	ldr	r2, [r3, #20]
{
 8006fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t trigger  = itsource & itflag;
 8006fee:	ea01 0502 	and.w	r5, r1, r2
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006ff2:	689f      	ldr	r7, [r3, #8]
{
 8006ff4:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 8006ff6:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006ffa:	f005 0c64 	and.w	ip, r5, #100	; 0x64
 8006ffe:	f1bc 0f04 	cmp.w	ip, #4
 8007002:	d050      	beq.n	80070a6 <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007004:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8007008:	2801      	cmp	r0, #1
 800700a:	d055      	beq.n	80070b8 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800700c:	f005 0026 	and.w	r0, r5, #38	; 0x26
 8007010:	2802      	cmp	r0, #2
 8007012:	f000 80cc 	beq.w	80071ae <HAL_SPI_IRQHandler+0x1ca>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007016:	0728      	lsls	r0, r5, #28
 8007018:	d55f      	bpl.n	80070da <HAL_SPI_IRQHandler+0xf6>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800701a:	699a      	ldr	r2, [r3, #24]
 800701c:	b2f6      	uxtb	r6, r6
 800701e:	f042 0208 	orr.w	r2, r2, #8
 8007022:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	f042 0210 	orr.w	r2, r2, #16
 800702a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007032:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	f022 0208 	bic.w	r2, r2, #8
 800703a:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8007042:	d021      	beq.n	8007088 <HAL_SPI_IRQHandler+0xa4>
    SPI_CloseTransfer(hspi);
 8007044:	4620      	mov	r0, r4
 8007046:	f7ff fcf7 	bl	8006a38 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800704a:	2301      	movs	r3, #1
 800704c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007050:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 80b3 	bne.w	80071c0 <HAL_SPI_IRQHandler+0x1dc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800705a:	2e05      	cmp	r6, #5
 800705c:	f000 80b9 	beq.w	80071d2 <HAL_SPI_IRQHandler+0x1ee>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007060:	2e04      	cmp	r6, #4
 8007062:	f000 80b9 	beq.w	80071d8 <HAL_SPI_IRQHandler+0x1f4>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007066:	2e03      	cmp	r6, #3
 8007068:	d12d      	bne.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
      HAL_SPI_TxCpltCallback(hspi);
 800706a:	f7ff ffb5 	bl	8006fd8 <HAL_SPI_TxCpltCallback>
 800706e:	e02a      	b.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007074:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007076:	f841 2b04 	str.w	r2, [r1], #4
        hspi->RxXferCount--;
 800707a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800707e:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8007080:	3a01      	subs	r2, #1
 8007082:	b292      	uxth	r2, r2
 8007084:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007088:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800708c:	b292      	uxth	r2, r2
 800708e:	2a00      	cmp	r2, #0
 8007090:	d0d8      	beq.n	8007044 <HAL_SPI_IRQHandler+0x60>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007092:	68e2      	ldr	r2, [r4, #12]
 8007094:	2a0f      	cmp	r2, #15
 8007096:	d8eb      	bhi.n	8007070 <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007098:	2a07      	cmp	r2, #7
 800709a:	d916      	bls.n	80070ca <HAL_SPI_IRQHandler+0xe6>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800709c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800709e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80070a0:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a4:	e7e9      	b.n	800707a <HAL_SPI_IRQHandler+0x96>
    hspi->TxISR(hspi);
 80070a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80070a8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80070aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070ac:	4620      	mov	r0, r4
 80070ae:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80070b0:	f005 0345 	and.w	r3, r5, #69	; 0x45
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d102      	bne.n	80070be <HAL_SPI_IRQHandler+0xda>
    hspi->RxISR(hspi);
 80070b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80070ba:	4620      	mov	r0, r4
 80070bc:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80070be:	f005 0526 	and.w	r5, r5, #38	; 0x26
 80070c2:	2d02      	cmp	r5, #2
 80070c4:	d073      	beq.n	80071ae <HAL_SPI_IRQHandler+0x1ca>
}
 80070c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80070ca:	6821      	ldr	r1, [r4, #0]
 80070cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070ce:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 80070d2:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80070d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80070d6:	3101      	adds	r1, #1
 80070d8:	e7cf      	b.n	800707a <HAL_SPI_IRQHandler+0x96>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80070da:	0510      	lsls	r0, r2, #20
 80070dc:	d501      	bpl.n	80070e2 <HAL_SPI_IRQHandler+0xfe>
 80070de:	070a      	lsls	r2, r1, #28
 80070e0:	d472      	bmi.n	80071c8 <HAL_SPI_IRQHandler+0x1e4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80070e2:	f415 7f58 	tst.w	r5, #864	; 0x360
 80070e6:	d0ee      	beq.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80070e8:	066e      	lsls	r6, r5, #25
 80070ea:	d509      	bpl.n	8007100 <HAL_SPI_IRQHandler+0x11c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80070ec:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80070f0:	f042 0204 	orr.w	r2, r2, #4
 80070f4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fe:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007100:	05a8      	lsls	r0, r5, #22
 8007102:	d509      	bpl.n	8007118 <HAL_SPI_IRQHandler+0x134>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007104:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007108:	f042 0201 	orr.w	r2, r2, #1
 800710c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007116:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007118:	05e9      	lsls	r1, r5, #23
 800711a:	d509      	bpl.n	8007130 <HAL_SPI_IRQHandler+0x14c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800711c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007120:	f042 0208 	orr.w	r2, r2, #8
 8007124:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800712e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007130:	06aa      	lsls	r2, r5, #26
 8007132:	d509      	bpl.n	8007148 <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007134:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800713c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	f042 0220 	orr.w	r2, r2, #32
 8007146:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007148:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800714c:	2a00      	cmp	r2, #0
 800714e:	d0ba      	beq.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE(hspi);
 8007150:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007152:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007156:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <HAL_SPI_IRQHandler+0x1fc>)
      __HAL_SPI_DISABLE(hspi);
 8007158:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800715c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8007160:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007162:	6919      	ldr	r1, [r3, #16]
 8007164:	ea02 0201 	and.w	r2, r2, r1
 8007168:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800716a:	d125      	bne.n	80071b8 <HAL_SPI_IRQHandler+0x1d4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800716c:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 800716e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007170:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007174:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 8007176:	b150      	cbz	r0, 800718e <HAL_SPI_IRQHandler+0x1aa>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <HAL_SPI_IRQHandler+0x200>)
 800717a:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800717c:	f7fc fe9e 	bl	8003ebc <HAL_DMA_Abort_IT>
 8007180:	b128      	cbz	r0, 800718e <HAL_SPI_IRQHandler+0x1aa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007182:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800718e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007190:	2800      	cmp	r0, #0
 8007192:	d098      	beq.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007194:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <HAL_SPI_IRQHandler+0x200>)
 8007196:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007198:	f7fc fe90 	bl	8003ebc <HAL_DMA_Abort_IT>
 800719c:	2800      	cmp	r0, #0
 800719e:	d092      	beq.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80071a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80071ac:	e78b      	b.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 80071ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80071b0:	4620      	mov	r0, r4
}
 80071b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 80071b6:	4718      	bx	r3
        hspi->State = HAL_SPI_STATE_READY;
 80071b8:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 80071ba:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 80071bc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80071c0:	f7ff ff0e 	bl	8006fe0 <HAL_SPI_ErrorCallback>
}
 80071c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ce:	619a      	str	r2, [r3, #24]
    return;
 80071d0:	e779      	b.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
      HAL_SPI_TxRxCpltCallback(hspi);
 80071d2:	f7ff ff03 	bl	8006fdc <HAL_SPI_TxRxCpltCallback>
 80071d6:	e776      	b.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
      HAL_SPI_RxCpltCallback(hspi);
 80071d8:	f7fa ff10 	bl	8001ffc <HAL_SPI_RxCpltCallback>
 80071dc:	e773      	b.n	80070c6 <HAL_SPI_IRQHandler+0xe2>
 80071de:	bf00      	nop
 80071e0:	fffffc94 	.word	0xfffffc94
 80071e4:	080071e9 	.word	0x080071e9

080071e8 <SPI_DMAAbortOnError>:
{
 80071e8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 80071ec:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80071ee:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 80071f0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80071f4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 80071f8:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 80071fc:	f7ff fef0 	bl	8006fe0 <HAL_SPI_ErrorCallback>
}
 8007200:	bd08      	pop	{r3, pc}
 8007202:	bf00      	nop

08007204 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007204:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007208:	2b01      	cmp	r3, #1
 800720a:	d141      	bne.n	8007290 <HAL_TIM_Base_Start_IT+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800720c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800720e:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007210:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007212:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007216:	bf18      	it	ne
 8007218:	429a      	cmpne	r2, r3
{
 800721a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721c:	bf0c      	ite	eq
 800721e:	2301      	moveq	r3, #1
 8007220:	2300      	movne	r3, #0
 8007222:	4d21      	ldr	r5, [pc, #132]	; (80072a8 <HAL_TIM_Base_Start_IT+0xa4>)
 8007224:	4c21      	ldr	r4, [pc, #132]	; (80072ac <HAL_TIM_Base_Start_IT+0xa8>)
 8007226:	42aa      	cmp	r2, r5
 8007228:	bf08      	it	eq
 800722a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800722e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007232:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	42a2      	cmp	r2, r4
 8007236:	bf08      	it	eq
 8007238:	f043 0301 	orreq.w	r3, r3, #1
 800723c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007240:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007244:	481a      	ldr	r0, [pc, #104]	; (80072b0 <HAL_TIM_Base_Start_IT+0xac>)
 8007246:	42a2      	cmp	r2, r4
 8007248:	bf08      	it	eq
 800724a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800724e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007250:	4282      	cmp	r2, r0
 8007252:	bf08      	it	eq
 8007254:	f043 0301 	orreq.w	r3, r3, #1
 8007258:	4916      	ldr	r1, [pc, #88]	; (80072b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800725a:	428a      	cmp	r2, r1
 800725c:	bf08      	it	eq
 800725e:	f043 0301 	orreq.w	r3, r3, #1
 8007262:	b933      	cbnz	r3, 8007272 <HAL_TIM_Base_Start_IT+0x6e>
 8007264:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8007268:	1a10      	subs	r0, r2, r0
 800726a:	fab0 f080 	clz	r0, r0
 800726e:	0940      	lsrs	r0, r0, #5
 8007270:	b198      	cbz	r0, 800729a <HAL_TIM_Base_Start_IT+0x96>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007272:	6891      	ldr	r1, [r2, #8]
 8007274:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007276:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	2b06      	cmp	r3, #6
 800727a:	d00b      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0x90>
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007280:	d008      	beq.n	8007294 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007282:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007284:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	6013      	str	r3, [r2, #0]
}
 800728c:	bc30      	pop	{r4, r5}
 800728e:	4770      	bx	lr
    return HAL_ERROR;
 8007290:	2001      	movs	r0, #1
}
 8007292:	4770      	bx	lr
  return HAL_OK;
 8007294:	2000      	movs	r0, #0
}
 8007296:	bc30      	pop	{r4, r5}
 8007298:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800729a:	6813      	ldr	r3, [r2, #0]
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e7f3      	b.n	800728c <HAL_TIM_Base_Start_IT+0x88>
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40001800 	.word	0x40001800
 80072b8:	00010007 	.word	0x00010007

080072bc <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	f000 8081 	beq.w	80073c8 <HAL_TIM_ConfigClockSource+0x10c>
 80072c6:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	2302      	movs	r3, #2
{
 80072ca:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072cc:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(htim);
 80072ce:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80072d0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80072d4:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d8:	4b5a      	ldr	r3, [pc, #360]	; (8007444 <HAL_TIM_ConfigClockSource+0x188>)
  tmpsmcr = htim->Instance->SMCR;
 80072da:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072dc:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80072de:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 80072e0:	680b      	ldr	r3, [r1, #0]
 80072e2:	2b70      	cmp	r3, #112	; 0x70
 80072e4:	f000 809c 	beq.w	8007420 <HAL_TIM_ConfigClockSource+0x164>
 80072e8:	d825      	bhi.n	8007336 <HAL_TIM_ConfigClockSource+0x7a>
 80072ea:	2b50      	cmp	r3, #80	; 0x50
 80072ec:	d06e      	beq.n	80073cc <HAL_TIM_ConfigClockSource+0x110>
 80072ee:	d939      	bls.n	8007364 <HAL_TIM_ConfigClockSource+0xa8>
 80072f0:	2b60      	cmp	r3, #96	; 0x60
 80072f2:	d118      	bne.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f4:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f6:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f8:	f023 0310 	bic.w	r3, r3, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072fc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fe:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007300:	69a3      	ldr	r3, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007306:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccer = TIMx->CCER;
 800730a:	6a21      	ldr	r1, [r4, #32]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730c:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007310:	61a3      	str	r3, [r4, #24]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007312:	4b4d      	ldr	r3, [pc, #308]	; (8007448 <HAL_TIM_ConfigClockSource+0x18c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8007314:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  HAL_StatusTypeDef status = HAL_OK;
 8007318:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800731a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800731c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800731e:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007320:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007324:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007326:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8007328:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800732a:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800732e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8007332:	bc30      	pop	{r4, r5}
 8007334:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733a:	d060      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x142>
 800733c:	d933      	bls.n	80073a6 <HAL_TIM_ConfigClockSource+0xea>
 800733e:	4943      	ldr	r1, [pc, #268]	; (800744c <HAL_TIM_ConfigClockSource+0x190>)
 8007340:	428b      	cmp	r3, r1
 8007342:	d006      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x96>
 8007344:	d929      	bls.n	800739a <HAL_TIM_ConfigClockSource+0xde>
 8007346:	4942      	ldr	r1, [pc, #264]	; (8007450 <HAL_TIM_ConfigClockSource+0x194>)
 8007348:	428b      	cmp	r3, r1
 800734a:	d002      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x96>
 800734c:	3110      	adds	r1, #16
 800734e:	428b      	cmp	r3, r1
 8007350:	d1e9      	bne.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr = TIMx->SMCR;
 8007352:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007354:	493c      	ldr	r1, [pc, #240]	; (8007448 <HAL_TIM_ConfigClockSource+0x18c>)
 8007356:	4001      	ands	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8007358:	2000      	movs	r0, #0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800735a:	4319      	orrs	r1, r3
 800735c:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8007360:	60a1      	str	r1, [r4, #8]
}
 8007362:	e7e0      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d123      	bne.n	80073b0 <HAL_TIM_ConfigClockSource+0xf4>
  tmpccer = TIMx->CCER;
 8007368:	6a23      	ldr	r3, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800736a:	6848      	ldr	r0, [r1, #4]
 800736c:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736e:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007372:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 8007374:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 8007376:	4b34      	ldr	r3, [pc, #208]	; (8007448 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007378:	f021 0101 	bic.w	r1, r1, #1
 800737c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737e:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007380:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007384:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007388:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800738a:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800738c:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 800738e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007390:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007392:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007396:	60a3      	str	r3, [r4, #8]
}
 8007398:	e7c5      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800739a:	f023 0110 	bic.w	r1, r3, #16
 800739e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80073a2:	d1c0      	bne.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
 80073a4:	e7d5      	b.n	8007352 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80073a6:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 80073aa:	bf18      	it	ne
 80073ac:	2001      	movne	r0, #1
 80073ae:	e7ba      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80073b0:	d8b9      	bhi.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d0cd      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x96>
 80073b6:	d903      	bls.n	80073c0 <HAL_TIM_ConfigClockSource+0x104>
 80073b8:	2b30      	cmp	r3, #48	; 0x30
 80073ba:	d0ca      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x96>
 80073bc:	2001      	movs	r0, #1
 80073be:	e7b2      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
 80073c0:	f033 0110 	bics.w	r1, r3, #16
 80073c4:	d1af      	bne.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
 80073c6:	e7c4      	b.n	8007352 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80073c8:	2002      	movs	r0, #2
}
 80073ca:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80073cc:	6a23      	ldr	r3, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	6848      	ldr	r0, [r1, #4]
 80073d0:	68cd      	ldr	r5, [r1, #12]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d2:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d6:	6a21      	ldr	r1, [r4, #32]
  tmpccer |= TIM_ICPolarity;
 80073d8:	4318      	orrs	r0, r3
  tmpsmcr &= ~TIM_SMCR_TS;
 80073da:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <HAL_TIM_ConfigClockSource+0x18c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073dc:	f021 0101 	bic.w	r1, r1, #1
 80073e0:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e2:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e4:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073e8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80073ec:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80073ee:	6220      	str	r0, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2000      	movs	r0, #0
  tmpsmcr = TIMx->SMCR;
 80073f2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f4:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073f6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80073fa:	60a3      	str	r3, [r4, #8]
}
 80073fc:	e793      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073fe:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007402:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007404:	432b      	orrs	r3, r5
 8007406:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007408:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800740e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007412:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007414:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800741c:	60a3      	str	r3, [r4, #8]
      break;
 800741e:	e782      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007420:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8007424:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007426:	432b      	orrs	r3, r5
 8007428:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800742a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  HAL_StatusTypeDef status = HAL_OK;
 800742e:	2000      	movs	r0, #0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007430:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007434:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8007436:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007438:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800743a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800743e:	60a3      	str	r3, [r4, #8]
      break;
 8007440:	e771      	b.n	8007326 <HAL_TIM_ConfigClockSource+0x6a>
 8007442:	bf00      	nop
 8007444:	ffce0088 	.word	0xffce0088
 8007448:	ffcfff8f 	.word	0xffcfff8f
 800744c:	00100020 	.word	0x00100020
 8007450:	00100030 	.word	0x00100030

08007454 <HAL_TIM_OC_DelayElapsedCallback>:
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop

08007458 <HAL_TIM_IC_CaptureCallback>:
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop

0800745c <HAL_TIM_PWM_PulseFinishedCallback>:
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop

08007460 <HAL_TIM_TriggerCallback>:
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007464:	6803      	ldr	r3, [r0, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	0791      	lsls	r1, r2, #30
{
 800746a:	b510      	push	{r4, lr}
 800746c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800746e:	d502      	bpl.n	8007476 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	0792      	lsls	r2, r2, #30
 8007474:	d468      	bmi.n	8007548 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	0752      	lsls	r2, r2, #29
 800747a:	d502      	bpl.n	8007482 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	0750      	lsls	r0, r2, #29
 8007480:	d44f      	bmi.n	8007522 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	0711      	lsls	r1, r2, #28
 8007486:	d502      	bpl.n	800748e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	0712      	lsls	r2, r2, #28
 800748c:	d437      	bmi.n	80074fe <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	06d0      	lsls	r0, r2, #27
 8007492:	d502      	bpl.n	800749a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	06d1      	lsls	r1, r2, #27
 8007498:	d41e      	bmi.n	80074d8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	07d2      	lsls	r2, r2, #31
 800749e:	d502      	bpl.n	80074a6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	07d0      	lsls	r0, r2, #31
 80074a4:	d469      	bmi.n	800757a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	0611      	lsls	r1, r2, #24
 80074aa:	d502      	bpl.n	80074b2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	0612      	lsls	r2, r2, #24
 80074b0:	d46b      	bmi.n	800758a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	05d0      	lsls	r0, r2, #23
 80074b6:	d502      	bpl.n	80074be <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	0611      	lsls	r1, r2, #24
 80074bc:	d46d      	bmi.n	800759a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	0652      	lsls	r2, r2, #25
 80074c2:	d502      	bpl.n	80074ca <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074c4:	68da      	ldr	r2, [r3, #12]
 80074c6:	0650      	lsls	r0, r2, #25
 80074c8:	d46f      	bmi.n	80075aa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	0691      	lsls	r1, r2, #26
 80074ce:	d502      	bpl.n	80074d6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	0692      	lsls	r2, r2, #26
 80074d4:	d449      	bmi.n	800756a <HAL_TIM_IRQHandler+0x106>
}
 80074d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074d8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074dc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074e2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80074ea:	d16f      	bne.n	80075cc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ec:	f7ff ffb2 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7ff ffb3 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074f8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	7722      	strb	r2, [r4, #28]
 80074fc:	e7cd      	b.n	800749a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074fe:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007502:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8007504:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007506:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007508:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	079b      	lsls	r3, r3, #30
 800750e:	d15a      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007510:	f7ff ffa0 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007514:	4620      	mov	r0, r4
 8007516:	f7ff ffa1 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800751c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	7722      	strb	r2, [r4, #28]
 8007520:	e7b5      	b.n	800748e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007522:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007526:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007528:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800752a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800752c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007534:	d144      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007536:	f7ff ff8d 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800753a:	4620      	mov	r0, r4
 800753c:	f7ff ff8e 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007540:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007542:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007544:	7722      	strb	r2, [r4, #28]
 8007546:	e79c      	b.n	8007482 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007548:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800754c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800754e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007550:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	0799      	lsls	r1, r3, #30
 8007556:	d130      	bne.n	80075ba <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007558:	f7ff ff7c 	bl	8007454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755c:	4620      	mov	r0, r4
 800755e:	f7ff ff7d 	bl	800745c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007562:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007564:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007566:	7722      	strb	r2, [r4, #28]
 8007568:	e785      	b.n	8007476 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800756e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007570:	611a      	str	r2, [r3, #16]
}
 8007572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007576:	f000 b945 	b.w	8007804 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800757a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800757e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007580:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007582:	f7fb fddb 	bl	800313c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	e78d      	b.n	80074a6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800758a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800758e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007590:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007592:	f000 f939 	bl	8007808 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	e78b      	b.n	80074b2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800759a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800759e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80075a2:	f000 f933 	bl	800780c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	e789      	b.n	80074be <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80075ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80075b2:	f7ff ff55 	bl	8007460 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	e787      	b.n	80074ca <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	f7ff ff4d 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 80075be:	e7d0      	b.n	8007562 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80075c0:	f7ff ff4a 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e7bc      	b.n	8007540 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80075c6:	f7ff ff47 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 80075ca:	e7a6      	b.n	800751a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80075cc:	f7ff ff44 	bl	8007458 <HAL_TIM_IC_CaptureCallback>
 80075d0:	e791      	b.n	80074f6 <HAL_TIM_IRQHandler+0x92>
 80075d2:	bf00      	nop

080075d4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d4:	4a3f      	ldr	r2, [pc, #252]	; (80076d4 <TIM_Base_SetConfig+0x100>)
 80075d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80075da:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075dc:	eba0 0202 	sub.w	r2, r0, r2
 80075e0:	fab2 f282 	clz	r2, r2
{
 80075e4:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80075ea:	d023      	beq.n	8007634 <TIM_Base_SetConfig+0x60>
 80075ec:	bb12      	cbnz	r2, 8007634 <TIM_Base_SetConfig+0x60>
 80075ee:	4c3a      	ldr	r4, [pc, #232]	; (80076d8 <TIM_Base_SetConfig+0x104>)
 80075f0:	42a0      	cmp	r0, r4
 80075f2:	d047      	beq.n	8007684 <TIM_Base_SetConfig+0xb0>
 80075f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	d043      	beq.n	8007684 <TIM_Base_SetConfig+0xb0>
 80075fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007600:	42a0      	cmp	r0, r4
 8007602:	d049      	beq.n	8007698 <TIM_Base_SetConfig+0xc4>
 8007604:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8007608:	42a0      	cmp	r0, r4
 800760a:	d045      	beq.n	8007698 <TIM_Base_SetConfig+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800760c:	4c33      	ldr	r4, [pc, #204]	; (80076dc <TIM_Base_SetConfig+0x108>)
 800760e:	4a34      	ldr	r2, [pc, #208]	; (80076e0 <TIM_Base_SetConfig+0x10c>)
 8007610:	4290      	cmp	r0, r2
 8007612:	bf18      	it	ne
 8007614:	42a0      	cmpne	r0, r4
 8007616:	d04f      	beq.n	80076b8 <TIM_Base_SetConfig+0xe4>
 8007618:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800761c:	4290      	cmp	r0, r2
 800761e:	d04b      	beq.n	80076b8 <TIM_Base_SetConfig+0xe4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007620:	694d      	ldr	r5, [r1, #20]
 8007622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007626:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8007628:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800762a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800762c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800762e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007630:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007632:	e023      	b.n	800767c <TIM_Base_SetConfig+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8007634:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800763a:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800763c:	4c29      	ldr	r4, [pc, #164]	; (80076e4 <TIM_Base_SetConfig+0x110>)
 800763e:	1b04      	subs	r4, r0, r4
 8007640:	fab4 f484 	clz	r4, r4
 8007644:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007646:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800764c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800764e:	694d      	ldr	r5, [r1, #20]
 8007650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007654:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007656:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007658:	688b      	ldr	r3, [r1, #8]
 800765a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800765c:	680b      	ldr	r3, [r1, #0]
 800765e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007660:	b952      	cbnz	r2, 8007678 <TIM_Base_SetConfig+0xa4>
 8007662:	b94c      	cbnz	r4, 8007678 <TIM_Base_SetConfig+0xa4>
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <TIM_Base_SetConfig+0x108>)
 8007666:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <TIM_Base_SetConfig+0x10c>)
 8007668:	4298      	cmp	r0, r3
 800766a:	bf18      	it	ne
 800766c:	4290      	cmpne	r0, r2
 800766e:	d003      	beq.n	8007678 <TIM_Base_SetConfig+0xa4>
 8007670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007674:	4298      	cmp	r0, r3
 8007676:	d101      	bne.n	800767c <TIM_Base_SetConfig+0xa8>
    TIMx->RCR = Structure->RepetitionCounter;
 8007678:	690b      	ldr	r3, [r1, #16]
 800767a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800767c:	2301      	movs	r3, #1
}
 800767e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8007680:	6143      	str	r3, [r0, #20]
}
 8007682:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007684:	4c17      	ldr	r4, [pc, #92]	; (80076e4 <TIM_Base_SetConfig+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800768a:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800768c:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800768e:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007690:	fab4 f484 	clz	r4, r4
 8007694:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007696:	e7d6      	b.n	8007646 <TIM_Base_SetConfig+0x72>
    tmpcr1 |= Structure->CounterMode;
 8007698:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800769a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800769e:	4c11      	ldr	r4, [pc, #68]	; (80076e4 <TIM_Base_SetConfig+0x110>)
    tmpcr1 |= Structure->CounterMode;
 80076a0:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a2:	4d11      	ldr	r5, [pc, #68]	; (80076e8 <TIM_Base_SetConfig+0x114>)
 80076a4:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a8:	fab4 f484 	clz	r4, r4
 80076ac:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b0:	d0c9      	beq.n	8007646 <TIM_Base_SetConfig+0x72>
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	d1c7      	bne.n	8007646 <TIM_Base_SetConfig+0x72>
 80076b6:	e7a9      	b.n	800760c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076b8:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076be:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c0:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c2:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c8:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80076ca:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80076cc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076ce:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80076d0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d2:	e7c7      	b.n	8007664 <TIM_Base_SetConfig+0x90>
 80076d4:	40010000 	.word	0x40010000
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40014400 	.word	0x40014400
 80076e4:	40010400 	.word	0x40010400
 80076e8:	40000c00 	.word	0x40000c00

080076ec <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80076ec:	b370      	cbz	r0, 800774c <HAL_TIM_Base_Init+0x60>
{
 80076ee:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80076f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80076f4:	4604      	mov	r4, r0
 80076f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80076fa:	b313      	cbz	r3, 8007742 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076fc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80076fe:	2302      	movs	r3, #2
 8007700:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007704:	f851 0b04 	ldr.w	r0, [r1], #4
 8007708:	f7ff ff64 	bl	80075d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800770c:	2301      	movs	r3, #1
  return HAL_OK;
 800770e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007710:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007718:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800771c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007720:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007734:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007738:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800773c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007740:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007742:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007746:	f7fb fd81 	bl	800324c <HAL_TIM_Base_MspInit>
 800774a:	e7d7      	b.n	80076fc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800774c:	2001      	movs	r0, #1
}
 800774e:	4770      	bx	lr

08007750 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007750:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d04b      	beq.n	80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007758:	6803      	ldr	r3, [r0, #0]
 800775a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	2002      	movs	r0, #2
{
 800775e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007760:	4d24      	ldr	r5, [pc, #144]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007762:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007766:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007768:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800776a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800776c:	d029      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800776e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007772:	42ab      	cmp	r3, r5
 8007774:	d025      	beq.n	80077c2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007776:	4d20      	ldr	r5, [pc, #128]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007778:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777c:	42ab      	cmp	r3, r5
 800777e:	bf18      	it	ne
 8007780:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8007784:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007788:	bf0c      	ite	eq
 800778a:	f04f 0c01 	moveq.w	ip, #1
 800778e:	f04f 0c00 	movne.w	ip, #0
 8007792:	42ab      	cmp	r3, r5
 8007794:	bf08      	it	eq
 8007796:	f04c 0c01 	orreq.w	ip, ip, #1
 800779a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800779e:	42ab      	cmp	r3, r5
 80077a0:	bf08      	it	eq
 80077a2:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a6:	680d      	ldr	r5, [r1, #0]
 80077a8:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077aa:	4d14      	ldr	r5, [pc, #80]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80077ac:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	bf14      	ite	ne
 80077b2:	4660      	movne	r0, ip
 80077b4:	f04c 0001 	orreq.w	r0, ip, #1
 80077b8:	b960      	cbnz	r0, 80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80077ba:	4811      	ldr	r0, [pc, #68]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80077bc:	4283      	cmp	r3, r0
 80077be:	d009      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80077c0:	e00d      	b.n	80077de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077c2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077c4:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077c8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077ca:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80077cc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077d0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80077d2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077da:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077dc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80077de:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	2101      	movs	r1, #1

  return HAL_OK;
 80077e2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80077e8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80077ec:	bc30      	pop	{r4, r5}
 80077ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80077f0:	2002      	movs	r0, #2
}
 80077f2:	4770      	bx	lr
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40001800 	.word	0x40001800
 8007800:	40014000 	.word	0x40014000

08007804 <HAL_TIMEx_CommutCallback>:
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop

08007808 <HAL_TIMEx_BreakCallback>:
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <HAL_TIMEx_Break2Callback>:
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop

08007810 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop

08007814 <MX_LWIP_Init>:
{
 8007814:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 8007816:	4b25      	ldr	r3, [pc, #148]	; (80078ac <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 8007818:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 800781a:	4f25      	ldr	r7, [pc, #148]	; (80078b0 <MX_LWIP_Init+0x9c>)
{
 800781c:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 800781e:	4e25      	ldr	r6, [pc, #148]	; (80078b4 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 8007820:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 8007822:	4d25      	ldr	r5, [pc, #148]	; (80078b8 <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 8007824:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 8007826:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 8007828:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 800782c:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 800782e:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 8007830:	f004 fdaa 	bl	800c388 <tcpip_init>
	LOCK_TCPIP_CORE();
 8007834:	f000 fb20 	bl	8007e78 <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007838:	4920      	ldr	r1, [pc, #128]	; (80078bc <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800783a:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800783c:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800783e:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007840:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007842:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007844:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007846:	6828      	ldr	r0, [r5, #0]
 8007848:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800784a:	4c1f      	ldr	r4, [pc, #124]	; (80078c8 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800784c:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800784e:	481f      	ldr	r0, [pc, #124]	; (80078cc <MX_LWIP_Init+0xb8>)
 8007850:	9002      	str	r0, [sp, #8]
 8007852:	481f      	ldr	r0, [pc, #124]	; (80078d0 <MX_LWIP_Init+0xbc>)
 8007854:	9001      	str	r0, [sp, #4]
 8007856:	4620      	mov	r0, r4
 8007858:	f005 fa70 	bl	800cd3c <netif_add>
  netif_set_default(&gnetif);
 800785c:	4620      	mov	r0, r4
 800785e:	f005 fb23 	bl	800cea8 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8007862:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 8007866:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8007868:	075b      	lsls	r3, r3, #29
 800786a:	d51c      	bpl.n	80078a6 <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 800786c:	f005 fb26 	bl	800cebc <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007870:	4c18      	ldr	r4, [pc, #96]	; (80078d4 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007872:	4919      	ldr	r1, [pc, #100]	; (80078d8 <MX_LWIP_Init+0xc4>)
 8007874:	4814      	ldr	r0, [pc, #80]	; (80078c8 <MX_LWIP_Init+0xb4>)
 8007876:	f005 fbb5 	bl	800cfe4 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800787a:	2220      	movs	r2, #32
 800787c:	2100      	movs	r1, #0
 800787e:	1d20      	adds	r0, r4, #4
 8007880:	f00d fabf 	bl	8014e02 <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007884:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 8007888:	4814      	ldr	r0, [pc, #80]	; (80078dc <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 800788a:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800788c:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800788e:	4622      	mov	r2, r4
 8007890:	490d      	ldr	r1, [pc, #52]	; (80078c8 <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 8007892:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007894:	4812      	ldr	r0, [pc, #72]	; (80078e0 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 8007896:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007898:	f000 fbf0 	bl	800807c <osThreadNew>
}
 800789c:	b005      	add	sp, #20
 800789e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 80078a2:	f000 bb67 	b.w	8007f74 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 80078a6:	f005 fb2d 	bl	800cf04 <netif_set_down>
 80078aa:	e7e1      	b.n	8007870 <MX_LWIP_Init+0x5c>
 80078ac:	0a01a8c0 	.word	0x0a01a8c0
 80078b0:	24027650 	.word	0x24027650
 80078b4:	24027654 	.word	0x24027654
 80078b8:	2402764c 	.word	0x2402764c
 80078bc:	240276b4 	.word	0x240276b4
 80078c0:	240276b8 	.word	0x240276b8
 80078c4:	240276b0 	.word	0x240276b0
 80078c8:	2402767c 	.word	0x2402767c
 80078cc:	0800c2ed 	.word	0x0800c2ed
 80078d0:	08007aa5 	.word	0x08007aa5
 80078d4:	24027658 	.word	0x24027658
 80078d8:	08007811 	.word	0x08007811
 80078dc:	08017f48 	.word	0x08017f48
 80078e0:	08007e95 	.word	0x08007e95

080078e4 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80078e4:	2000      	movs	r0, #0
 80078e6:	4770      	bx	lr

080078e8 <low_level_output>:
{
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	b08c      	sub	sp, #48	; 0x30
 80078ec:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80078ee:	2230      	movs	r2, #48	; 0x30
 80078f0:	2100      	movs	r1, #0
 80078f2:	4668      	mov	r0, sp
 80078f4:	f00d fa85 	bl	8014e02 <memset>
  for(q = p; q != NULL; q = q->next)
 80078f8:	b1fc      	cbz	r4, 800793a <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 80078fa:	8962      	ldrh	r2, [r4, #10]
 80078fc:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 80078fe:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 8007900:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 8007904:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 8007906:	e9cd 1200 	strd	r1, r2, [sp]
 800790a:	4622      	mov	r2, r4
    if(q->next == NULL)
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	b16a      	cbz	r2, 800792c <low_level_output+0x44>
    i++;
 8007910:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8007914:	f1bc 0f04 	cmp.w	ip, #4
 8007918:	d02b      	beq.n	8007972 <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 800791a:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 800791c:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 800791e:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8007920:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 8007922:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 8007926:	330c      	adds	r3, #12
    if(q->next == NULL)
 8007928:	2a00      	cmp	r2, #0
 800792a:	d1f1      	bne.n	8007910 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 800792c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8007930:	ab0c      	add	r3, sp, #48	; 0x30
 8007932:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007936:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 800793a:	4e10      	ldr	r6, [pc, #64]	; (800797c <low_level_output+0x94>)
  pbuf_ref(p);
 800793c:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 800793e:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 8007940:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 8007944:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 8007946:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 8007948:	f005 fe88 	bl	800d65c <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800794c:	4631      	mov	r1, r6
 800794e:	480c      	ldr	r0, [pc, #48]	; (8007980 <low_level_output+0x98>)
 8007950:	4d0c      	ldr	r5, [pc, #48]	; (8007984 <low_level_output+0x9c>)
 8007952:	f7fc ff0b 	bl	800476c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8007956:	f04f 31ff 	mov.w	r1, #4294967295
 800795a:	6828      	ldr	r0, [r5, #0]
 800795c:	f000 fcc0 	bl	80082e0 <osSemaphoreAcquire>
 8007960:	4604      	mov	r4, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	d1f7      	bne.n	8007956 <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8007966:	4806      	ldr	r0, [pc, #24]	; (8007980 <low_level_output+0x98>)
 8007968:	f7fc ffba 	bl	80048e0 <HAL_ETH_ReleaseTxPacket>
  return errval;
 800796c:	4620      	mov	r0, r4
}
 800796e:	b00c      	add	sp, #48	; 0x30
 8007970:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8007972:	f06f 000b 	mvn.w	r0, #11
}
 8007976:	b00c      	add	sp, #48	; 0x30
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	bf00      	nop
 800797c:	240276e4 	.word	0x240276e4
 8007980:	24027720 	.word	0x24027720
 8007984:	2402771c 	.word	0x2402771c

08007988 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8007988:	f7fc b9d4 	b.w	8003d34 <HAL_GetTick>

0800798c <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 800798c:	4802      	ldr	r0, [pc, #8]	; (8007998 <ETH_PHY_IO_Init+0xc>)
{
 800798e:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8007990:	f7fd f9c0 	bl	8004d14 <HAL_ETH_SetMDIOClockRange>
}
 8007994:	2000      	movs	r0, #0
 8007996:	bd08      	pop	{r3, pc}
 8007998:	24027720 	.word	0x24027720

0800799c <ETH_PHY_IO_ReadReg>:
{
 800799c:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800799e:	4806      	ldr	r0, [pc, #24]	; (80079b8 <ETH_PHY_IO_ReadReg+0x1c>)
{
 80079a0:	b508      	push	{r3, lr}
 80079a2:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80079a4:	460a      	mov	r2, r1
 80079a6:	4661      	mov	r1, ip
 80079a8:	f7fd f87c 	bl	8004aa4 <HAL_ETH_ReadPHYRegister>
 80079ac:	3800      	subs	r0, #0
 80079ae:	bf18      	it	ne
 80079b0:	2001      	movne	r0, #1
}
 80079b2:	4240      	negs	r0, r0
 80079b4:	bd08      	pop	{r3, pc}
 80079b6:	bf00      	nop
 80079b8:	24027720 	.word	0x24027720

080079bc <ETH_PHY_IO_WriteReg>:
{
 80079bc:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80079be:	4806      	ldr	r0, [pc, #24]	; (80079d8 <ETH_PHY_IO_WriteReg+0x1c>)
{
 80079c0:	b508      	push	{r3, lr}
 80079c2:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80079c4:	460a      	mov	r2, r1
 80079c6:	4661      	mov	r1, ip
 80079c8:	f7fd f89a 	bl	8004b00 <HAL_ETH_WritePHYRegister>
 80079cc:	3800      	subs	r0, #0
 80079ce:	bf18      	it	ne
 80079d0:	2001      	movne	r0, #1
}
 80079d2:	4240      	negs	r0, r0
 80079d4:	bd08      	pop	{r3, pc}
 80079d6:	bf00      	nop
 80079d8:	24027720 	.word	0x24027720

080079dc <pbuf_free_custom>:
{
 80079dc:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80079de:	4808      	ldr	r0, [pc, #32]	; (8007a00 <pbuf_free_custom+0x24>)
{
 80079e0:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80079e2:	f005 f8c9 	bl	800cb78 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80079e6:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <pbuf_free_custom+0x28>)
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	2a01      	cmp	r2, #1
 80079ec:	d000      	beq.n	80079f0 <pbuf_free_custom+0x14>
}
 80079ee:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 80079f0:	4905      	ldr	r1, [pc, #20]	; (8007a08 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 80079f2:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 80079f4:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 80079f6:	701a      	strb	r2, [r3, #0]
}
 80079f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 80079fc:	f000 bca4 	b.w	8008348 <osSemaphoreRelease>
 8007a00:	08018008 	.word	0x08018008
 8007a04:	240276dc 	.word	0x240276dc
 8007a08:	240276e0 	.word	0x240276e0

08007a0c <ethernetif_input>:
{
 8007a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a10:	4c14      	ldr	r4, [pc, #80]	; (8007a64 <ethernetif_input+0x58>)
 8007a12:	b083      	sub	sp, #12
 8007a14:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007a68 <ethernetif_input+0x5c>
 8007a18:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8007a1a:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007a1c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8007a6c <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007a20:	f04f 31ff 	mov.w	r1, #4294967295
 8007a24:	6820      	ldr	r0, [r4, #0]
 8007a26:	f000 fc5b 	bl	80082e0 <osSemaphoreAcquire>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d1f8      	bne.n	8007a20 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8007a2e:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8007a32:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f3      	bne.n	8007a20 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007a38:	a901      	add	r1, sp, #4
 8007a3a:	4648      	mov	r0, r9
 8007a3c:	f7fc fec6 	bl	80047cc <HAL_ETH_ReadData>
  return p;
 8007a40:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
        if (p != NULL)
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	d0ea      	beq.n	8007a20 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8007a4a:	6933      	ldr	r3, [r6, #16]
 8007a4c:	4798      	blx	r3
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d0ed      	beq.n	8007a2e <ethernetif_input+0x22>
            pbuf_free(p);
 8007a52:	4628      	mov	r0, r5
 8007a54:	f005 fc80 	bl	800d358 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8007a58:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8007a5c:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1de      	bne.n	8007a20 <ethernetif_input+0x14>
 8007a62:	e7e9      	b.n	8007a38 <ethernetif_input+0x2c>
 8007a64:	240276e0 	.word	0x240276e0
 8007a68:	240276dc 	.word	0x240276dc
 8007a6c:	24027720 	.word	0x24027720

08007a70 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8007a70:	4b01      	ldr	r3, [pc, #4]	; (8007a78 <HAL_ETH_RxCpltCallback+0x8>)
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	f000 bc68 	b.w	8008348 <osSemaphoreRelease>
 8007a78:	240276e0 	.word	0x240276e0

08007a7c <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8007a7c:	4b01      	ldr	r3, [pc, #4]	; (8007a84 <HAL_ETH_TxCpltCallback+0x8>)
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	f000 bc62 	b.w	8008348 <osSemaphoreRelease>
 8007a84:	2402771c 	.word	0x2402771c

08007a88 <HAL_ETH_ErrorCallback>:
{
 8007a88:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8007a8a:	f7fd faa3 	bl	8004fd4 <HAL_ETH_GetDMAError>
 8007a8e:	0603      	lsls	r3, r0, #24
 8007a90:	d400      	bmi.n	8007a94 <HAL_ETH_ErrorCallback+0xc>
}
 8007a92:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <HAL_ETH_ErrorCallback+0x18>)
 8007a96:	6818      	ldr	r0, [r3, #0]
}
 8007a98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8007a9c:	f000 bc54 	b.w	8008348 <osSemaphoreRelease>
 8007aa0:	240276e0 	.word	0x240276e0

08007aa4 <ethernetif_init>:
{
 8007aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007aa8:	4604      	mov	r4, r0
{
 8007aaa:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f000 80b7 	beq.w	8007c20 <ethernetif_init+0x17c>
  netif->linkoutput = low_level_output;
 8007ab2:	4b5f      	ldr	r3, [pc, #380]	; (8007c30 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8007ab4:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 8007ab8:	4a5e      	ldr	r2, [pc, #376]	; (8007c34 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8007aba:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 8007abc:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8007abe:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8007ac0:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8007ac2:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 8007ac4:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8007ac6:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8007ac8:	f00d f99b 	bl	8014e02 <memset>
  heth.Instance = ETH;
 8007acc:	4d5a      	ldr	r5, [pc, #360]	; (8007c38 <ethernetif_init+0x194>)
 8007ace:	4b5b      	ldr	r3, [pc, #364]	; (8007c3c <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007ad0:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007ad2:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8007c7c <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007ad6:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8007ad8:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8007ada:	4b59      	ldr	r3, [pc, #356]	; (8007c40 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8007adc:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8007ae0:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8007ae2:	4b58      	ldr	r3, [pc, #352]	; (8007c44 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8007ae4:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8007ae8:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007aea:	4b57      	ldr	r3, [pc, #348]	; (8007c48 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007aec:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8007aee:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8007af0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007af4:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007af6:	f7fd f94f 	bl	8004d98 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007afa:	2234      	movs	r2, #52	; 0x34
 8007afc:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007afe:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007b00:	f109 0004 	add.w	r0, r9, #4
 8007b04:	f00d f97d 	bl	8014e02 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007b08:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007b0a:	4850      	ldr	r0, [pc, #320]	; (8007c4c <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007b0c:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007b10:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007b14:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007b18:	f004 ffb6 	bl	800ca88 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007b1c:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007b1e:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b20:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007b22:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007b26:	781a      	ldrb	r2, [r3, #0]
 8007b28:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007b2c:	785a      	ldrb	r2, [r3, #1]
 8007b2e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007b32:	789a      	ldrb	r2, [r3, #2]
 8007b34:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007b38:	78da      	ldrb	r2, [r3, #3]
 8007b3a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007b3e:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007b40:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007b44:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b48:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007b4a:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007b4c:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007b50:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8007b54:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007b58:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b5c:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8007b5e:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b60:	f000 fb6e 	bl	8008240 <osSemaphoreNew>
 8007b64:	4b3a      	ldr	r3, [pc, #232]	; (8007c50 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b66:	4632      	mov	r2, r6
 8007b68:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b6a:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f000 fb67 	bl	8008240 <osSemaphoreNew>
 8007b72:	4b38      	ldr	r3, [pc, #224]	; (8007c54 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007b74:	4631      	mov	r1, r6
 8007b76:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007b78:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007b7a:	a803      	add	r0, sp, #12
 8007b7c:	f00d f941 	bl	8014e02 <memset>
  attributes.name = "EthIf";
 8007b80:	4b35      	ldr	r3, [pc, #212]	; (8007c58 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8007b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8007b86:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8007b88:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8007b8a:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8007b8c:	4833      	ldr	r0, [pc, #204]	; (8007c5c <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8007b8e:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8007b92:	4621      	mov	r1, r4
 8007b94:	f000 fa72 	bl	800807c <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007b98:	4931      	ldr	r1, [pc, #196]	; (8007c60 <ethernetif_init+0x1bc>)
 8007b9a:	4832      	ldr	r0, [pc, #200]	; (8007c64 <ethernetif_init+0x1c0>)
 8007b9c:	f7fb ffbc 	bl	8003b18 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8007ba0:	4830      	ldr	r0, [pc, #192]	; (8007c64 <ethernetif_init+0x1c0>)
 8007ba2:	f7fb ffd3 	bl	8003b4c <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8007ba6:	f1b8 0f00 	cmp.w	r8, #0
 8007baa:	d124      	bne.n	8007bf6 <ethernetif_init+0x152>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007bac:	482d      	ldr	r0, [pc, #180]	; (8007c64 <ethernetif_init+0x1c0>)
 8007bae:	f7fc f837 	bl	8003c20 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007bb2:	42b8      	cmp	r0, r7
 8007bb4:	dd2a      	ble.n	8007c0c <ethernetif_init+0x168>
      switch (PHYLinkState)
 8007bb6:	3803      	subs	r0, #3
 8007bb8:	2802      	cmp	r0, #2
 8007bba:	d822      	bhi.n	8007c02 <ethernetif_init+0x15e>
 8007bbc:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <ethernetif_init+0x1c4>)
 8007bbe:	4b2b      	ldr	r3, [pc, #172]	; (8007c6c <ethernetif_init+0x1c8>)
 8007bc0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8007bc4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007bc8:	a90b      	add	r1, sp, #44	; 0x2c
 8007bca:	481b      	ldr	r0, [pc, #108]	; (8007c38 <ethernetif_init+0x194>)
 8007bcc:	f7fc ffca 	bl	8004b64 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007bd0:	a90b      	add	r1, sp, #44	; 0x2c
 8007bd2:	4819      	ldr	r0, [pc, #100]	; (8007c38 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8007bd4:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007bd8:	f7fd f88e 	bl	8004cf8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8007bdc:	4816      	ldr	r0, [pc, #88]	; (8007c38 <ethernetif_init+0x194>)
 8007bde:	f7fc fd31 	bl	8004644 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007be2:	4620      	mov	r0, r4
 8007be4:	f005 f96a 	bl	800cebc <netif_set_up>
    netif_set_link_up(netif);
 8007be8:	4620      	mov	r0, r4
 8007bea:	f005 f9af 	bl	800cf4c <netif_set_link_up>
}
 8007bee:	2000      	movs	r0, #0
 8007bf0:	b025      	add	sp, #148	; 0x94
 8007bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8007bf6:	f7fb faab 	bl	8003150 <Error_Handler>
}
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	b025      	add	sp, #148	; 0x94
 8007bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8007c02:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8007c06:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8007c0a:	e7dd      	b.n	8007bc8 <ethernetif_init+0x124>
      netif_set_link_down(netif);
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f005 f9c5 	bl	800cf9c <netif_set_link_down>
      netif_set_down(netif);
 8007c12:	4620      	mov	r0, r4
 8007c14:	f005 f976 	bl	800cf04 <netif_set_down>
}
 8007c18:	2000      	movs	r0, #0
 8007c1a:	b025      	add	sp, #148	; 0x94
 8007c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007c20:	4b13      	ldr	r3, [pc, #76]	; (8007c70 <ethernetif_init+0x1cc>)
 8007c22:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007c26:	4913      	ldr	r1, [pc, #76]	; (8007c74 <ethernetif_init+0x1d0>)
 8007c28:	4813      	ldr	r0, [pc, #76]	; (8007c78 <ethernetif_init+0x1d4>)
 8007c2a:	f00d f81d 	bl	8014c68 <iprintf>
 8007c2e:	e740      	b.n	8007ab2 <ethernetif_init+0xe>
 8007c30:	080078e9 	.word	0x080078e9
 8007c34:	08012909 	.word	0x08012909
 8007c38:	24027720 	.word	0x24027720
 8007c3c:	40028000 	.word	0x40028000
 8007c40:	00e18000 	.word	0x00e18000
 8007c44:	30040060 	.word	0x30040060
 8007c48:	30040000 	.word	0x30040000
 8007c4c:	08018008 	.word	0x08018008
 8007c50:	240276e0 	.word	0x240276e0
 8007c54:	2402771c 	.word	0x2402771c
 8007c58:	08017f7c 	.word	0x08017f7c
 8007c5c:	08007a0d 	.word	0x08007a0d
 8007c60:	24000068 	.word	0x24000068
 8007c64:	240276bc 	.word	0x240276bc
 8007c68:	08017fd0 	.word	0x08017fd0
 8007c6c:	08017fdc 	.word	0x08017fdc
 8007c70:	08017f50 	.word	0x08017f50
 8007c74:	08017f6c 	.word	0x08017f6c
 8007c78:	08017728 	.word	0x08017728
 8007c7c:	240276e4 	.word	0x240276e4

08007c80 <sys_now>:
  return HAL_GetTick();
 8007c80:	f7fc b858 	b.w	8003d34 <HAL_GetTick>

08007c84 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8007c84:	4b4b      	ldr	r3, [pc, #300]	; (8007db4 <HAL_ETH_MspInit+0x130>)
 8007c86:	6802      	ldr	r2, [r0, #0]
{
 8007c88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8007c8a:	429a      	cmp	r2, r3
{
 8007c8c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8e:	f04f 0400 	mov.w	r4, #0
 8007c92:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8007c96:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8007c9a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8007c9c:	d001      	beq.n	8007ca2 <HAL_ETH_MspInit+0x1e>
}
 8007c9e:	b00d      	add	sp, #52	; 0x34
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007ca2:	4b45      	ldr	r3, [pc, #276]	; (8007db8 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007ca6:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca8:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007caa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007cae:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cb0:	4842      	ldr	r0, [pc, #264]	; (8007dbc <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cb6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007cba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007cbe:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8007cc2:	9200      	str	r2, [sp, #0]
 8007cc4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007cc6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007cca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007cce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007cd2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007cd6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8007cda:	9201      	str	r2, [sp, #4]
 8007cdc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007cde:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007ce2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007ce6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007cea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007cee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007cf2:	9202      	str	r2, [sp, #8]
 8007cf4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007cfa:	f042 0204 	orr.w	r2, r2, #4
 8007cfe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007d02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d06:	f002 0204 	and.w	r2, r2, #4
 8007d0a:	9203      	str	r2, [sp, #12]
 8007d0c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007d1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d1e:	f002 0201 	and.w	r2, r2, #1
 8007d22:	9204      	str	r2, [sp, #16]
 8007d24:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d2a:	433a      	orrs	r2, r7
 8007d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d34:	403a      	ands	r2, r7
 8007d36:	9205      	str	r2, [sp, #20]
 8007d38:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d4a:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d50:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d52:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d56:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d58:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d5a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d5c:	f7fd f93e 	bl	8004fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007d60:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d62:	a907      	add	r1, sp, #28
 8007d64:	4816      	ldr	r0, [pc, #88]	; (8007dc0 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007d66:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d68:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d6c:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d70:	f7fd f934 	bl	8004fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d78:	a907      	add	r1, sp, #28
 8007d7a:	4812      	ldr	r0, [pc, #72]	; (8007dc4 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007d7c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d7e:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d82:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d86:	f7fd f929 	bl	8004fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007d8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d8e:	a907      	add	r1, sp, #28
 8007d90:	480d      	ldr	r0, [pc, #52]	; (8007dc8 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007d92:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d94:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d96:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d98:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d9c:	f7fd f91e 	bl	8004fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007da0:	4622      	mov	r2, r4
 8007da2:	2105      	movs	r1, #5
 8007da4:	203d      	movs	r0, #61	; 0x3d
 8007da6:	f7fb ffed 	bl	8003d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007daa:	203d      	movs	r0, #61	; 0x3d
 8007dac:	f7fc f828 	bl	8003e00 <HAL_NVIC_EnableIRQ>
}
 8007db0:	b00d      	add	sp, #52	; 0x34
 8007db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db4:	40028000 	.word	0x40028000
 8007db8:	58024400 	.word	0x58024400
 8007dbc:	58020800 	.word	0x58020800
 8007dc0:	58020000 	.word	0x58020000
 8007dc4:	58020400 	.word	0x58020400
 8007dc8:	58021800 	.word	0x58021800

08007dcc <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007dcc:	b530      	push	{r4, r5, lr}
 8007dce:	4604      	mov	r4, r0
 8007dd0:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007dd2:	480d      	ldr	r0, [pc, #52]	; (8007e08 <HAL_ETH_RxAllocateCallback+0x3c>)
 8007dd4:	f004 fea0 	bl	800cb18 <memp_malloc_pool>
  if (p)
 8007dd8:	4603      	mov	r3, r0
 8007dda:	b178      	cbz	r0, 8007dfc <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007ddc:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8007de0:	4a0a      	ldr	r2, [pc, #40]	; (8007e0c <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007de2:	2100      	movs	r1, #0
 8007de4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007de8:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8007dea:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007dec:	2241      	movs	r2, #65	; 0x41
 8007dee:	9001      	str	r0, [sp, #4]
 8007df0:	4608      	mov	r0, r1
 8007df2:	9500      	str	r5, [sp, #0]
 8007df4:	f005 f9f4 	bl	800d1e0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007df8:	b003      	add	sp, #12
 8007dfa:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8007dfc:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <HAL_ETH_RxAllocateCallback+0x44>)
 8007dfe:	2101      	movs	r1, #1
    *buff = NULL;
 8007e00:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8007e02:	7011      	strb	r1, [r2, #0]
}
 8007e04:	b003      	add	sp, #12
 8007e06:	bd30      	pop	{r4, r5, pc}
 8007e08:	08018008 	.word	0x08018008
 8007e0c:	080079dd 	.word	0x080079dd
 8007e10:	240276dc 	.word	0x240276dc

08007e14 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007e14:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8007e16:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007e18:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8007e1c:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8007e20:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8007e24:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8007e28:	6805      	ldr	r5, [r0, #0]
 8007e2a:	b1f5      	cbz	r5, 8007e6a <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007e2c:	680d      	ldr	r5, [r1, #0]
 8007e2e:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8007e30:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007e32:	6801      	ldr	r1, [r0, #0]
 8007e34:	b129      	cbz	r1, 8007e42 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8007e36:	8908      	ldrh	r0, [r1, #8]
 8007e38:	4418      	add	r0, r3
 8007e3a:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007e3c:	6809      	ldr	r1, [r1, #0]
 8007e3e:	2900      	cmp	r1, #0
 8007e40:	d1f9      	bne.n	8007e36 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8007e42:	b183      	cbz	r3, 8007e66 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007e44:	f002 011f 	and.w	r1, r2, #31
 8007e48:	4419      	add	r1, r3
 8007e4a:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007e4e:	4808      	ldr	r0, [pc, #32]	; (8007e70 <HAL_ETH_RxLinkCallback+0x5c>)
 8007e50:	4411      	add	r1, r2
 8007e52:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007e56:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8007e58:	1a8b      	subs	r3, r1, r2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dcf9      	bgt.n	8007e52 <HAL_ETH_RxLinkCallback+0x3e>
 8007e5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e62:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007e66:	bc30      	pop	{r4, r5}
 8007e68:	4770      	bx	lr
    *ppStart = p;
 8007e6a:	6004      	str	r4, [r0, #0]
 8007e6c:	e7e0      	b.n	8007e30 <HAL_ETH_RxLinkCallback+0x1c>
 8007e6e:	bf00      	nop
 8007e70:	e000ed00 	.word	0xe000ed00

08007e74 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007e74:	f005 ba70 	b.w	800d358 <pbuf_free>

08007e78 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8007e78:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8007e7a:	4804      	ldr	r0, [pc, #16]	; (8007e8c <sys_lock_tcpip_core+0x14>)
 8007e7c:	f00b fe70 	bl	8013b60 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8007e80:	f000 f948 	bl	8008114 <osThreadGetId>
 8007e84:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <sys_lock_tcpip_core+0x18>)
 8007e86:	6018      	str	r0, [r3, #0]
}
 8007e88:	bd08      	pop	{r3, pc}
 8007e8a:	bf00      	nop
 8007e8c:	24030fc0 	.word	0x24030fc0
 8007e90:	240277d0 	.word	0x240277d0

08007e94 <ethernet_link_thread>:
{
 8007e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007e9a:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8007e9e:	2264      	movs	r2, #100	; 0x64
 8007ea0:	2100      	movs	r1, #0
{
 8007ea2:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8007ea4:	a801      	add	r0, sp, #4
 8007ea6:	f00c ffac 	bl	8014e02 <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007eaa:	46cb      	mov	fp, r9
 8007eac:	46ca      	mov	sl, r9
 8007eae:	4d2b      	ldr	r5, [pc, #172]	; (8007f5c <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007eb0:	4f2b      	ldr	r7, [pc, #172]	; (8007f60 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8007eb2:	f7ff ffe1 	bl	8007e78 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007eb6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8007f70 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8007eba:	4c2a      	ldr	r4, [pc, #168]	; (8007f64 <ethernet_link_thread+0xd0>)
 8007ebc:	e018      	b.n	8007ef0 <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007ebe:	2801      	cmp	r0, #1
 8007ec0:	dc42      	bgt.n	8007f48 <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	f7fc fc0e 	bl	80046e4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f005 f81b 	bl	800cf04 <netif_set_down>
    netif_set_link_down(netif);
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f005 f864 	bl	800cf9c <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 8007ed4:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8007ed6:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8007ed8:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8007eda:	f00b fe47 	bl	8013b6c <sys_mutex_unlock>
  osDelay(100);
 8007ede:	2064      	movs	r0, #100	; 0x64
 8007ee0:	f000 f91a 	bl	8008118 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f00b fe3b 	bl	8013b60 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8007eea:	f000 f913 	bl	8008114 <osThreadGetId>
 8007eee:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7fb fe95 	bl	8003c20 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007ef6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8007efa:	0759      	lsls	r1, r3, #29
 8007efc:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8007f00:	d4dd      	bmi.n	8007ebe <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007f02:	07d2      	lsls	r2, r2, #31
 8007f04:	d4e6      	bmi.n	8007ed4 <ethernet_link_thread+0x40>
 8007f06:	2801      	cmp	r0, #1
 8007f08:	dde4      	ble.n	8007ed4 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8007f0a:	3802      	subs	r0, #2
 8007f0c:	2803      	cmp	r0, #3
 8007f0e:	d820      	bhi.n	8007f52 <ethernet_link_thread+0xbe>
 8007f10:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <ethernet_link_thread+0xd4>)
 8007f12:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8007f16:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <ethernet_link_thread+0xd8>)
 8007f18:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007f1c:	a901      	add	r1, sp, #4
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7fc fe20 	bl	8004b64 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007f24:	a901      	add	r1, sp, #4
 8007f26:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8007f28:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8007f2c:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007f30:	f7fc fee2 	bl	8004cf8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007f34:	4640      	mov	r0, r8
 8007f36:	f7fc fb85 	bl	8004644 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f004 ffbe 	bl	800cebc <netif_set_up>
      netif_set_link_up(netif);
 8007f40:	4630      	mov	r0, r6
 8007f42:	f005 f803 	bl	800cf4c <netif_set_link_up>
 8007f46:	e7c5      	b.n	8007ed4 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007f48:	075b      	lsls	r3, r3, #29
 8007f4a:	d4c3      	bmi.n	8007ed4 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8007f4c:	3802      	subs	r0, #2
 8007f4e:	2803      	cmp	r0, #3
 8007f50:	d9de      	bls.n	8007f10 <ethernet_link_thread+0x7c>
    if(linkchanged)
 8007f52:	f1ba 0f00 	cmp.w	sl, #0
 8007f56:	d0bd      	beq.n	8007ed4 <ethernet_link_thread+0x40>
 8007f58:	e7e0      	b.n	8007f1c <ethernet_link_thread+0x88>
 8007f5a:	bf00      	nop
 8007f5c:	240277d0 	.word	0x240277d0
 8007f60:	240276bc 	.word	0x240276bc
 8007f64:	24030fc0 	.word	0x24030fc0
 8007f68:	08017fe8 	.word	0x08017fe8
 8007f6c:	08017ff8 	.word	0x08017ff8
 8007f70:	24027720 	.word	0x24027720

08007f74 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <sys_unlock_tcpip_core+0xc>)
 8007f76:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8007f78:	4802      	ldr	r0, [pc, #8]	; (8007f84 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8007f7a:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8007f7c:	f00b bdf6 	b.w	8013b6c <sys_mutex_unlock>
 8007f80:	240277d0 	.word	0x240277d0
 8007f84:	24030fc0 	.word	0x24030fc0

08007f88 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8007f88:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <sys_check_core_locking+0x44>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
void sys_check_core_locking(void){
 8007f90:	b510      	push	{r4, lr}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8007f92:	b993      	cbnz	r3, 8007fba <sys_check_core_locking+0x32>

  if (lwip_tcpip_thread_id != 0) {
 8007f94:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <sys_check_core_locking+0x48>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	b173      	cbz	r3, 8007fb8 <sys_check_core_locking+0x30>
	  osThreadId_t current_thread_id = osThreadGetId();
 8007f9a:	f000 f8bb 	bl	8008114 <osThreadGetId>

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <sys_check_core_locking+0x4c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4283      	cmp	r3, r0
 8007fa4:	d008      	beq.n	8007fb8 <sys_check_core_locking+0x30>
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <sys_check_core_locking+0x50>)
 8007fa8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007fac:	490b      	ldr	r1, [pc, #44]	; (8007fdc <sys_check_core_locking+0x54>)
 8007fae:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <sys_check_core_locking+0x58>)
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8007fb4:	f00c be58 	b.w	8014c68 <iprintf>
}
 8007fb8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <sys_check_core_locking+0x50>)
 8007fbc:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8007fc0:	4908      	ldr	r1, [pc, #32]	; (8007fe4 <sys_check_core_locking+0x5c>)
 8007fc2:	4807      	ldr	r0, [pc, #28]	; (8007fe0 <sys_check_core_locking+0x58>)
 8007fc4:	f00c fe50 	bl	8014c68 <iprintf>
 8007fc8:	e7e4      	b.n	8007f94 <sys_check_core_locking+0xc>
 8007fca:	bf00      	nop
 8007fcc:	e000ed00 	.word	0xe000ed00
 8007fd0:	240277d4 	.word	0x240277d4
 8007fd4:	240277d0 	.word	0x240277d0
 8007fd8:	08017f50 	.word	0x08017f50
 8007fdc:	08017fac 	.word	0x08017fac
 8007fe0:	08017728 	.word	0x08017728
 8007fe4:	08017f84 	.word	0x08017f84

08007fe8 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8007fe8:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8007fea:	f000 f893 	bl	8008114 <osThreadGetId>
 8007fee:	4b01      	ldr	r3, [pc, #4]	; (8007ff4 <sys_mark_tcpip_thread+0xc>)
 8007ff0:	6018      	str	r0, [r3, #0]
}
 8007ff2:	bd08      	pop	{r3, pc}
 8007ff4:	240277d4 	.word	0x240277d4

08007ff8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ff8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ffa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ffe:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008000:	f001 fe6e 	bl	8009ce0 <xTaskGetSchedulerState>
 8008004:	2801      	cmp	r0, #1
 8008006:	d100      	bne.n	800800a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008008:	bd08      	pop	{r3, pc}
 800800a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800800e:	f002 ba49 	b.w	800a4a4 <xPortSysTickHandler>
 8008012:	bf00      	nop

08008014 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008014:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008018:	b92b      	cbnz	r3, 8008026 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800801a:	4b06      	ldr	r3, [pc, #24]	; (8008034 <osKernelInitialize+0x20>)
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	b928      	cbnz	r0, 800802c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008024:	4770      	bx	lr
    stat = osErrorISR;
 8008026:	f06f 0005 	mvn.w	r0, #5
 800802a:	4770      	bx	lr
    } else {
      stat = osError;
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	24028084 	.word	0x24028084

08008038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008038:	b510      	push	{r4, lr}
 800803a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800803e:	b974      	cbnz	r4, 800805e <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008040:	4b08      	ldr	r3, [pc, #32]	; (8008064 <osKernelStart+0x2c>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	2a01      	cmp	r2, #1
 8008046:	d107      	bne.n	8008058 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008048:	4907      	ldr	r1, [pc, #28]	; (8008068 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800804a:	2202      	movs	r2, #2
 800804c:	77cc      	strb	r4, [r1, #31]
 800804e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008050:	f001 fb2a 	bl	80096a8 <vTaskStartScheduler>
      stat = osOK;
 8008054:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008056:	bd10      	pop	{r4, pc}
      stat = osError;
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
}
 800805c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800805e:	f06f 0005 	mvn.w	r0, #5
}
 8008062:	bd10      	pop	{r4, pc}
 8008064:	24028084 	.word	0x24028084
 8008068:	e000ed00 	.word	0xe000ed00

0800806c <osKernelGetTickCount>:
 800806c:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8008070:	b10b      	cbz	r3, 8008076 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8008072:	f001 bb77 	b.w	8009764 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8008076:	f001 bb6f 	b.w	8009758 <xTaskGetTickCount>
 800807a:	bf00      	nop

0800807c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800807c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800807e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008080:	b087      	sub	sp, #28
 8008082:	4614      	mov	r4, r2
  hTask = NULL;
 8008084:	9505      	str	r5, [sp, #20]
 8008086:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800808a:	bb62      	cbnz	r2, 80080e6 <osThreadNew+0x6a>
 800808c:	4606      	mov	r6, r0
 800808e:	b350      	cbz	r0, 80080e6 <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008090:	b1e4      	cbz	r4, 80080cc <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008092:	69a7      	ldr	r7, [r4, #24]
 8008094:	bb57      	cbnz	r7, 80080ec <osThreadNew+0x70>
 8008096:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	07db      	lsls	r3, r3, #31
 800809c:	d423      	bmi.n	80080e6 <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800809e:	6963      	ldr	r3, [r4, #20]
 80080a0:	b343      	cbz	r3, 80080f4 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080a2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080a6:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
 80080a8:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080aa:	b340      	cbz	r0, 80080fe <osThreadNew+0x82>
 80080ac:	68e2      	ldr	r2, [r4, #12]
 80080ae:	2aa7      	cmp	r2, #167	; 0xa7
 80080b0:	d919      	bls.n	80080e6 <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080b2:	6924      	ldr	r4, [r4, #16]
 80080b4:	b1bb      	cbz	r3, 80080e6 <osThreadNew+0x6a>
 80080b6:	b1b4      	cbz	r4, 80080e6 <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080b8:	460b      	mov	r3, r1
 80080ba:	4662      	mov	r2, ip
 80080bc:	4629      	mov	r1, r5
 80080be:	9700      	str	r7, [sp, #0]
 80080c0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80080c4:	4630      	mov	r0, r6
 80080c6:	f001 fa83 	bl	80095d0 <xTaskCreateStatic>
 80080ca:	e00d      	b.n	80080e8 <osThreadNew+0x6c>
 80080cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 80080d0:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080d2:	460b      	mov	r3, r1
 80080d4:	4621      	mov	r1, r4
 80080d6:	ac05      	add	r4, sp, #20
 80080d8:	4630      	mov	r0, r6
 80080da:	9700      	str	r7, [sp, #0]
 80080dc:	9401      	str	r4, [sp, #4]
 80080de:	f001 fab1 	bl	8009644 <xTaskCreate>
 80080e2:	2801      	cmp	r0, #1
 80080e4:	d009      	beq.n	80080fa <osThreadNew+0x7e>
        return (NULL);
 80080e6:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80080e8:	b007      	add	sp, #28
 80080ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080ec:	1e7a      	subs	r2, r7, #1
 80080ee:	2a37      	cmp	r2, #55	; 0x37
 80080f0:	d9d2      	bls.n	8008098 <osThreadNew+0x1c>
 80080f2:	e7f8      	b.n	80080e6 <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
 80080f4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80080f8:	e7d5      	b.n	80080a6 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
 80080fa:	9805      	ldr	r0, [sp, #20]
 80080fc:	e7f4      	b.n	80080e8 <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f1      	bne.n	80080e8 <osThreadNew+0x6c>
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1ee      	bne.n	80080e8 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800810a:	fa1f f28c 	uxth.w	r2, ip
 800810e:	462c      	mov	r4, r5
 8008110:	e7df      	b.n	80080d2 <osThreadNew+0x56>
 8008112:	bf00      	nop

08008114 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8008114:	f001 bdde 	b.w	8009cd4 <xTaskGetCurrentTaskHandle>

08008118 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008118:	b510      	push	{r4, lr}
 800811a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800811e:	b92c      	cbnz	r4, 800812c <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008120:	b900      	cbnz	r0, 8008124 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008122:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8008124:	f001 fc74 	bl	8009a10 <vTaskDelay>
    stat = osOK;
 8008128:	4620      	mov	r0, r4
}
 800812a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800812c:	f06f 0005 	mvn.w	r0, #5
}
 8008130:	bd10      	pop	{r4, pc}
 8008132:	bf00      	nop

08008134 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800813a:	b9db      	cbnz	r3, 8008174 <osMutexNew+0x40>
    if (attr != NULL) {
 800813c:	4604      	mov	r4, r0
 800813e:	b1e0      	cbz	r0, 800817a <osMutexNew+0x46>
      type = attr->attr_bits;
 8008140:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008142:	0733      	lsls	r3, r6, #28
 8008144:	d416      	bmi.n	8008174 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008146:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008148:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800814c:	68c3      	ldr	r3, [r0, #12]
 800814e:	b181      	cbz	r1, 8008172 <osMutexNew+0x3e>
 8008150:	2b4f      	cmp	r3, #79	; 0x4f
 8008152:	d90f      	bls.n	8008174 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008154:	b31e      	cbz	r6, 800819e <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008156:	2004      	movs	r0, #4
 8008158:	f000 fccc 	bl	8008af4 <xQueueCreateMutexStatic>
 800815c:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800815e:	b14d      	cbz	r5, 8008174 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8008160:	6821      	ldr	r1, [r4, #0]
 8008162:	4628      	mov	r0, r5
 8008164:	f001 f866 	bl	8009234 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008168:	b12e      	cbz	r6, 8008176 <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800816a:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800816e:	4628      	mov	r0, r5
 8008170:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008172:	b163      	cbz	r3, 800818e <osMutexNew+0x5a>
  hMutex = NULL;
 8008174:	2500      	movs	r5, #0
}
 8008176:	4628      	mov	r0, r5
 8008178:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
 800817a:	2001      	movs	r0, #1
 800817c:	f000 fd10 	bl	8008ba0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8008180:	4605      	mov	r5, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d0f6      	beq.n	8008174 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
 8008186:	4621      	mov	r1, r4
 8008188:	f001 f854 	bl	8009234 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800818c:	e7f3      	b.n	8008176 <osMutexNew+0x42>
            if (rmtx != 0U) {
 800818e:	b15e      	cbz	r6, 80081a8 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008190:	2004      	movs	r0, #4
 8008192:	f000 fd05 	bl	8008ba0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8008196:	4605      	mov	r5, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d1e1      	bne.n	8008160 <osMutexNew+0x2c>
 800819c:	e7ea      	b.n	8008174 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800819e:	2001      	movs	r0, #1
 80081a0:	f000 fca8 	bl	8008af4 <xQueueCreateMutexStatic>
 80081a4:	4605      	mov	r5, r0
 80081a6:	e7da      	b.n	800815e <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 80081a8:	2001      	movs	r0, #1
 80081aa:	f000 fcf9 	bl	8008ba0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80081ae:	4605      	mov	r5, r0
 80081b0:	e7d5      	b.n	800815e <osMutexNew+0x2a>
 80081b2:	bf00      	nop

080081b4 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80081b4:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80081b8:	f000 0301 	and.w	r3, r0, #1
 80081bc:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80081c0:	b9a8      	cbnz	r0, 80081ee <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80081c2:	b1ba      	cbz	r2, 80081f4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80081c4:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80081c6:	b510      	push	{r4, lr}
 80081c8:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 80081ca:	b953      	cbnz	r3, 80081e2 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80081cc:	f000 fe8a 	bl	8008ee4 <xQueueSemaphoreTake>
 80081d0:	2801      	cmp	r0, #1
 80081d2:	d00a      	beq.n	80081ea <osMutexAcquire+0x36>
          stat = osErrorResource;
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	bf14      	ite	ne
 80081d8:	f06f 0001 	mvnne.w	r0, #1
 80081dc:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 80081e0:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80081e2:	f000 ff5b 	bl	800909c <xQueueTakeMutexRecursive>
 80081e6:	2801      	cmp	r0, #1
 80081e8:	d1f4      	bne.n	80081d4 <osMutexAcquire+0x20>
  stat = osOK;
 80081ea:	2000      	movs	r0, #0
}
 80081ec:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80081ee:	f06f 0005 	mvn.w	r0, #5
 80081f2:	4770      	bx	lr
    stat = osErrorParameter;
 80081f4:	f06f 0003 	mvn.w	r0, #3
}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop

080081fc <osMutexRelease>:
 80081fc:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8008200:	b9ba      	cbnz	r2, 8008232 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008202:	b510      	push	{r4, lr}
 8008204:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008208:	b1b4      	cbz	r4, 8008238 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800820a:	f000 0301 	and.w	r3, r0, #1
 800820e:	b943      	cbnz	r3, 8008222 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008210:	461a      	mov	r2, r3
 8008212:	4619      	mov	r1, r3
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fba9 	bl	800896c <xQueueGenericSend>
 800821a:	2801      	cmp	r0, #1
 800821c:	d106      	bne.n	800822c <osMutexRelease+0x30>
  stat = osOK;
 800821e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008220:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fc9c 	bl	8008b60 <xQueueGiveMutexRecursive>
 8008228:	2801      	cmp	r0, #1
 800822a:	d0f8      	beq.n	800821e <osMutexRelease+0x22>
        stat = osErrorResource;
 800822c:	f06f 0002 	mvn.w	r0, #2
}
 8008230:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008232:	f06f 0005 	mvn.w	r0, #5
}
 8008236:	4770      	bx	lr
    stat = osErrorParameter;
 8008238:	f06f 0003 	mvn.w	r0, #3
}
 800823c:	bd10      	pop	{r4, pc}
 800823e:	bf00      	nop

08008240 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008242:	b083      	sub	sp, #12
 8008244:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008248:	b98e      	cbnz	r6, 800826e <osSemaphoreNew+0x2e>
 800824a:	4605      	mov	r5, r0
 800824c:	b178      	cbz	r0, 800826e <osSemaphoreNew+0x2e>
 800824e:	4288      	cmp	r0, r1
 8008250:	460f      	mov	r7, r1
 8008252:	d30c      	bcc.n	800826e <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8008254:	4614      	mov	r4, r2
 8008256:	b182      	cbz	r2, 800827a <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008258:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 800825c:	b15a      	cbz	r2, 8008276 <osSemaphoreNew+0x36>
 800825e:	2b4f      	cmp	r3, #79	; 0x4f
 8008260:	d905      	bls.n	800826e <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8008262:	2801      	cmp	r0, #1
 8008264:	d032      	beq.n	80082cc <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008266:	f000 fb3f 	bl	80088e8 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800826a:	4605      	mov	r5, r0
 800826c:	b978      	cbnz	r0, 800828e <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 800826e:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8008270:	4628      	mov	r0, r5
 8008272:	b003      	add	sp, #12
 8008274:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f9      	bne.n	800826e <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 800827a:	2d01      	cmp	r5, #1
 800827c:	d00f      	beq.n	800829e <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800827e:	4628      	mov	r0, r5
 8008280:	4639      	mov	r1, r7
 8008282:	f000 fb55 	bl	8008930 <xQueueCreateCountingSemaphore>
 8008286:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8008288:	2d00      	cmp	r5, #0
 800828a:	d0f0      	beq.n	800826e <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 800828c:	b104      	cbz	r4, 8008290 <osSemaphoreNew+0x50>
          name = attr->name;
 800828e:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8008290:	4628      	mov	r0, r5
 8008292:	4621      	mov	r1, r4
 8008294:	f000 ffce 	bl	8009234 <vQueueAddToRegistry>
}
 8008298:	4628      	mov	r0, r5
 800829a:	b003      	add	sp, #12
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 800829e:	4628      	mov	r0, r5
 80082a0:	2203      	movs	r2, #3
 80082a2:	2100      	movs	r1, #0
 80082a4:	f000 faf8 	bl	8008898 <xQueueGenericCreate>
 80082a8:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	d0df      	beq.n	800826e <osSemaphoreNew+0x2e>
 80082ae:	2f00      	cmp	r7, #0
 80082b0:	d0ea      	beq.n	8008288 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80082b2:	2300      	movs	r3, #0
 80082b4:	4628      	mov	r0, r5
 80082b6:	461a      	mov	r2, r3
 80082b8:	4619      	mov	r1, r3
 80082ba:	f000 fb57 	bl	800896c <xQueueGenericSend>
 80082be:	2801      	cmp	r0, #1
 80082c0:	d0e4      	beq.n	800828c <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80082c2:	4628      	mov	r0, r5
            hSemaphore = NULL;
 80082c4:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 80082c6:	f000 ff8b 	bl	80091e0 <vQueueDelete>
      if (hSemaphore != NULL) {
 80082ca:	e7d1      	b.n	8008270 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80082cc:	4613      	mov	r3, r2
 80082ce:	2203      	movs	r2, #3
 80082d0:	4631      	mov	r1, r6
 80082d2:	9200      	str	r2, [sp, #0]
 80082d4:	4632      	mov	r2, r6
 80082d6:	f000 fa8d 	bl	80087f4 <xQueueGenericCreateStatic>
 80082da:	4605      	mov	r5, r0
 80082dc:	e7e5      	b.n	80082aa <osSemaphoreNew+0x6a>
 80082de:	bf00      	nop

080082e0 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80082e0:	b370      	cbz	r0, 8008340 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80082e2:	b510      	push	{r4, lr}
 80082e4:	460c      	mov	r4, r1
 80082e6:	b082      	sub	sp, #8
 80082e8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80082ec:	b1c3      	cbz	r3, 8008320 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 80082ee:	bb21      	cbnz	r1, 800833a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80082f0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80082f2:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80082f4:	f000 fef2 	bl	80090dc <xQueueReceiveFromISR>
 80082f8:	2801      	cmp	r0, #1
 80082fa:	d11a      	bne.n	8008332 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	b913      	cbnz	r3, 8008306 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8008300:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008302:	b002      	add	sp, #8
 8008304:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8008306:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800831a:	4620      	mov	r0, r4
}
 800831c:	b002      	add	sp, #8
 800831e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008320:	f000 fde0 	bl	8008ee4 <xQueueSemaphoreTake>
 8008324:	2801      	cmp	r0, #1
 8008326:	d0eb      	beq.n	8008300 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8008328:	b11c      	cbz	r4, 8008332 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 800832a:	f06f 0001 	mvn.w	r0, #1
}
 800832e:	b002      	add	sp, #8
 8008330:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8008332:	f06f 0002 	mvn.w	r0, #2
}
 8008336:	b002      	add	sp, #8
 8008338:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 800833a:	f06f 0003 	mvn.w	r0, #3
 800833e:	e7e0      	b.n	8008302 <osSemaphoreAcquire+0x22>
 8008340:	f06f 0003 	mvn.w	r0, #3
}
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8008348:	b330      	cbz	r0, 8008398 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800834a:	b510      	push	{r4, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8008352:	b1ab      	cbz	r3, 8008380 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8008354:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008356:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8008358:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800835a:	f000 fca9 	bl	8008cb0 <xQueueGiveFromISR>
 800835e:	2801      	cmp	r0, #1
 8008360:	d117      	bne.n	8008392 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	b193      	cbz	r3, 800838c <osSemaphoreRelease+0x44>
 8008366:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800837a:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800837c:	b002      	add	sp, #8
 800837e:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008380:	461a      	mov	r2, r3
 8008382:	4619      	mov	r1, r3
 8008384:	f000 faf2 	bl	800896c <xQueueGenericSend>
 8008388:	2801      	cmp	r0, #1
 800838a:	d102      	bne.n	8008392 <osSemaphoreRelease+0x4a>
  stat = osOK;
 800838c:	2000      	movs	r0, #0
}
 800838e:	b002      	add	sp, #8
 8008390:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 8008392:	f06f 0002 	mvn.w	r0, #2
 8008396:	e7fa      	b.n	800838e <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8008398:	f06f 0003 	mvn.w	r0, #3
}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	f3ef 8405 	mrs	r4, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80083a6:	b944      	cbnz	r4, 80083ba <osSemaphoreDelete+0x1a>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 80083a8:	4605      	mov	r5, r0
 80083aa:	b148      	cbz	r0, 80083c0 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80083ac:	f000 ff58 	bl	8009260 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 ff15 	bl	80091e0 <vQueueDelete>
    stat = osOK;
 80083b6:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 80083ba:	f06f 0005 	mvn.w	r0, #5
}
 80083be:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 80083c0:	f06f 0003 	mvn.w	r0, #3
}
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	bf00      	nop

080083c8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80083c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ca:	b083      	sub	sp, #12
 80083cc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80083d0:	b987      	cbnz	r7, 80083f4 <osMessageQueueNew+0x2c>
 80083d2:	4605      	mov	r5, r0
 80083d4:	b170      	cbz	r0, 80083f4 <osMessageQueueNew+0x2c>
 80083d6:	b169      	cbz	r1, 80083f4 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 80083d8:	4614      	mov	r4, r2
 80083da:	b17a      	cbz	r2, 80083fc <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80083dc:	6893      	ldr	r3, [r2, #8]
 80083de:	b1cb      	cbz	r3, 8008414 <osMessageQueueNew+0x4c>
 80083e0:	68d2      	ldr	r2, [r2, #12]
 80083e2:	2a4f      	cmp	r2, #79	; 0x4f
 80083e4:	d906      	bls.n	80083f4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80083e6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80083e8:	b122      	cbz	r2, 80083f4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80083ea:	fb01 f505 	mul.w	r5, r1, r5
 80083ee:	6966      	ldr	r6, [r4, #20]
 80083f0:	42ae      	cmp	r6, r5
 80083f2:	d21f      	bcs.n	8008434 <osMessageQueueNew+0x6c>
  hQueue = NULL;
 80083f4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80083f6:	4628      	mov	r0, r5
 80083f8:	b003      	add	sp, #12
 80083fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 80083fc:	f000 fa4c 	bl	8008898 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8008400:	4605      	mov	r5, r0
 8008402:	2800      	cmp	r0, #0
 8008404:	d0f6      	beq.n	80083f4 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8008406:	4628      	mov	r0, r5
 8008408:	4621      	mov	r1, r4
 800840a:	f000 ff13 	bl	8009234 <vQueueAddToRegistry>
}
 800840e:	4628      	mov	r0, r5
 8008410:	b003      	add	sp, #12
 8008412:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008414:	68d3      	ldr	r3, [r2, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1ec      	bne.n	80083f4 <osMessageQueueNew+0x2c>
 800841a:	6913      	ldr	r3, [r2, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e9      	bne.n	80083f4 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008420:	6952      	ldr	r2, [r2, #20]
 8008422:	2a00      	cmp	r2, #0
 8008424:	d1e6      	bne.n	80083f4 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8008426:	f000 fa37 	bl	8008898 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800842a:	4605      	mov	r5, r0
 800842c:	2800      	cmp	r0, #0
 800842e:	d0e1      	beq.n	80083f4 <osMessageQueueNew+0x2c>
        name = attr->name;
 8008430:	6824      	ldr	r4, [r4, #0]
 8008432:	e7e8      	b.n	8008406 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008434:	9700      	str	r7, [sp, #0]
 8008436:	f000 f9dd 	bl	80087f4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800843a:	4605      	mov	r5, r0
 800843c:	2800      	cmp	r0, #0
 800843e:	d1f7      	bne.n	8008430 <osMessageQueueNew+0x68>
 8008440:	e7d8      	b.n	80083f4 <osMessageQueueNew+0x2c>
 8008442:	bf00      	nop

08008444 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008444:	b530      	push	{r4, r5, lr}
 8008446:	461c      	mov	r4, r3
 8008448:	b083      	sub	sp, #12
 800844a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800844e:	b30b      	cbz	r3, 8008494 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008450:	3c00      	subs	r4, #0
 8008452:	bf18      	it	ne
 8008454:	2401      	movne	r4, #1
 8008456:	2900      	cmp	r1, #0
 8008458:	bf08      	it	eq
 800845a:	f044 0401 	orreq.w	r4, r4, #1
 800845e:	bb7c      	cbnz	r4, 80084c0 <osMessageQueuePut+0x7c>
 8008460:	fab0 f480 	clz	r4, r0
 8008464:	0964      	lsrs	r4, r4, #5
 8008466:	b358      	cbz	r0, 80084c0 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008468:	4623      	mov	r3, r4
 800846a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800846c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800846e:	f000 fbb5 	bl	8008bdc <xQueueGenericSendFromISR>
 8008472:	2801      	cmp	r0, #1
 8008474:	d120      	bne.n	80084b8 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	b1db      	cbz	r3, 80084b2 <osMessageQueuePut+0x6e>
 800847a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800847e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008482:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800848e:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8008490:	b003      	add	sp, #12
 8008492:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008494:	b1a0      	cbz	r0, 80084c0 <osMessageQueuePut+0x7c>
 8008496:	fab1 f381 	clz	r3, r1
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	b181      	cbz	r1, 80084c0 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800849e:	4622      	mov	r2, r4
 80084a0:	f000 fa64 	bl	800896c <xQueueGenericSend>
 80084a4:	2801      	cmp	r0, #1
 80084a6:	d004      	beq.n	80084b2 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 80084a8:	b134      	cbz	r4, 80084b8 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 80084aa:	f06f 0001 	mvn.w	r0, #1
}
 80084ae:	b003      	add	sp, #12
 80084b0:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 80084b2:	2000      	movs	r0, #0
}
 80084b4:	b003      	add	sp, #12
 80084b6:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 80084b8:	f06f 0002 	mvn.w	r0, #2
}
 80084bc:	b003      	add	sp, #12
 80084be:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 80084c0:	f06f 0003 	mvn.w	r0, #3
 80084c4:	e7e4      	b.n	8008490 <osMessageQueuePut+0x4c>
 80084c6:	bf00      	nop

080084c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80084c8:	b530      	push	{r4, r5, lr}
 80084ca:	461c      	mov	r4, r3
 80084cc:	b083      	sub	sp, #12
 80084ce:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80084d2:	b303      	cbz	r3, 8008516 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084d4:	3c00      	subs	r4, #0
 80084d6:	bf18      	it	ne
 80084d8:	2401      	movne	r4, #1
 80084da:	2900      	cmp	r1, #0
 80084dc:	bf08      	it	eq
 80084de:	f044 0401 	orreq.w	r4, r4, #1
 80084e2:	bb5c      	cbnz	r4, 800853c <osMessageQueueGet+0x74>
 80084e4:	fab0 f480 	clz	r4, r0
 80084e8:	0964      	lsrs	r4, r4, #5
 80084ea:	b338      	cbz	r0, 800853c <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084ec:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80084ee:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084f0:	f000 fdf4 	bl	80090dc <xQueueReceiveFromISR>
 80084f4:	2801      	cmp	r0, #1
 80084f6:	d11d      	bne.n	8008534 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	b1c3      	cbz	r3, 800852e <osMessageQueueGet+0x66>
 80084fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008504:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008510:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8008512:	b003      	add	sp, #12
 8008514:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008516:	b188      	cbz	r0, 800853c <osMessageQueueGet+0x74>
 8008518:	b181      	cbz	r1, 800853c <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800851a:	4622      	mov	r2, r4
 800851c:	f000 fc20 	bl	8008d60 <xQueueReceive>
 8008520:	2801      	cmp	r0, #1
 8008522:	d004      	beq.n	800852e <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 8008524:	b134      	cbz	r4, 8008534 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 8008526:	f06f 0001 	mvn.w	r0, #1
}
 800852a:	b003      	add	sp, #12
 800852c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 800852e:	2000      	movs	r0, #0
}
 8008530:	b003      	add	sp, #12
 8008532:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8008534:	f06f 0002 	mvn.w	r0, #2
}
 8008538:	b003      	add	sp, #12
 800853a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 800853c:	f06f 0003 	mvn.w	r0, #3
 8008540:	e7e7      	b.n	8008512 <osMessageQueueGet+0x4a>
 8008542:	bf00      	nop

08008544 <osMessageQueueGetCount>:
 8008544:	b130      	cbz	r0, 8008554 <osMessageQueueGetCount+0x10>
 8008546:	f3ef 8305 	mrs	r3, IPSR
 800854a:	b10b      	cbz	r3, 8008550 <osMessageQueueGetCount+0xc>
 800854c:	f000 be3c 	b.w	80091c8 <uxQueueMessagesWaitingFromISR>
 8008550:	f000 be24 	b.w	800919c <uxQueueMessagesWaiting>
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <osMessageQueueDelete>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	f3ef 8405 	mrs	r4, IPSR
 800855e:	b944      	cbnz	r4, 8008572 <osMessageQueueDelete+0x1a>
 8008560:	4605      	mov	r5, r0
 8008562:	b148      	cbz	r0, 8008578 <osMessageQueueDelete+0x20>
 8008564:	f000 fe7c 	bl	8009260 <vQueueUnregisterQueue>
 8008568:	4628      	mov	r0, r5
 800856a:	f000 fe39 	bl	80091e0 <vQueueDelete>
 800856e:	4620      	mov	r0, r4
 8008570:	bd38      	pop	{r3, r4, r5, pc}
 8008572:	f06f 0005 	mvn.w	r0, #5
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	f06f 0003 	mvn.w	r0, #3
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	bf00      	nop

08008580 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008582:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008584:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008586:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800858a:	4c04      	ldr	r4, [pc, #16]	; (800859c <vApplicationGetIdleTaskMemory+0x1c>)
 800858c:	600c      	str	r4, [r1, #0]
}
 800858e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008592:	6013      	str	r3, [r2, #0]
}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	24027fdc 	.word	0x24027fdc
 800859c:	240277dc 	.word	0x240277dc

080085a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085a2:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085a4:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085aa:	4c04      	ldr	r4, [pc, #16]	; (80085bc <vApplicationGetTimerTaskMemory+0x1c>)
 80085ac:	600c      	str	r4, [r1, #0]
}
 80085ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085b2:	6013      	str	r3, [r2, #0]
}
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	24029088 	.word	0x24029088
 80085bc:	24028088 	.word	0x24028088

080085c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085c0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085c4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085c8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085ca:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085cc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ce:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop

080085d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop

080085e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80085e0:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80085e2:	6802      	ldr	r2, [r0, #0]
{
 80085e4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085e6:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80085e8:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80085ea:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085ec:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085ee:	689c      	ldr	r4, [r3, #8]
 80085f0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085f2:	6099      	str	r1, [r3, #8]
}
 80085f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80085f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80085fa:	6002      	str	r2, [r0, #0]
}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop

08008600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008600:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008602:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008604:	1c6b      	adds	r3, r5, #1
 8008606:	d010      	beq.n	800862a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008608:	f100 0308 	add.w	r3, r0, #8
 800860c:	461c      	mov	r4, r3
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	42aa      	cmp	r2, r5
 8008614:	d9fa      	bls.n	800860c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008616:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8008618:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800861a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800861c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800861e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008620:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8008622:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008624:	6002      	str	r2, [r0, #0]
}
 8008626:	bc30      	pop	{r4, r5}
 8008628:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800862a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	e7f2      	b.n	8008616 <vListInsert+0x16>

08008630 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008630:	6903      	ldr	r3, [r0, #16]
{
 8008632:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008634:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008636:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 800863a:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800863c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008640:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008642:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8008644:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008648:	bf08      	it	eq
 800864a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800864c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800864e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008650:	3a01      	subs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8008654:	6818      	ldr	r0, [r3, #0]
}
 8008656:	4770      	bx	lr

08008658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800865c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800865e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008660:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008662:	b92a      	cbnz	r2, 8008670 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008664:	6805      	ldr	r5, [r0, #0]
 8008666:	b365      	cbz	r5, 80086c2 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008668:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800866a:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800866c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800866e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008670:	b97d      	cbnz	r5, 8008692 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008672:	6840      	ldr	r0, [r0, #4]
 8008674:	f00c fcb9 	bl	8014fea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800867c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800867e:	68a2      	ldr	r2, [r4, #8]
 8008680:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008682:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008684:	d319      	bcc.n	80086ba <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008686:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008688:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800868a:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800868c:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800868e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008690:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008692:	68c0      	ldr	r0, [r0, #12]
 8008694:	f00c fca9 	bl	8014fea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008698:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	4251      	negs	r1, r2
 800869e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086a0:	6822      	ldr	r2, [r4, #0]
 80086a2:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086a4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086a6:	d202      	bcs.n	80086ae <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086a8:	68a3      	ldr	r3, [r4, #8]
 80086aa:	440b      	add	r3, r1
 80086ac:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80086ae:	2d02      	cmp	r5, #2
 80086b0:	d00d      	beq.n	80086ce <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086b2:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80086b4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086b6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ba:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80086bc:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086be:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086c2:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086c4:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086c6:	f001 fb61 	bl	8009d8c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086ca:	60a5      	str	r5, [r4, #8]
 80086cc:	e7ce      	b.n	800866c <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086ce:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80086d0:	f04f 0000 	mov.w	r0, #0
 80086d4:	bf38      	it	cc
 80086d6:	2601      	movcc	r6, #1
 80086d8:	e7c8      	b.n	800866c <prvCopyDataToQueue+0x14>
 80086da:	bf00      	nop

080086dc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086e0:	f001 fe78 	bl	800a3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086e4:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80086e8:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	dd14      	ble.n	8008718 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086ee:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80086f2:	e003      	b.n	80086fc <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086f4:	1e63      	subs	r3, r4, #1
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086fa:	b16a      	cbz	r2, 8008718 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086fe:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008700:	b153      	cbz	r3, 8008718 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008702:	f001 fa43 	bl	8009b8c <xTaskRemoveFromEventList>
 8008706:	2800      	cmp	r0, #0
 8008708:	d0f4      	beq.n	80086f4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800870a:	f001 fadd 	bl	8009cc8 <vTaskMissedYield>
			--cTxLock;
 800870e:	1e63      	subs	r3, r4, #1
 8008710:	b2da      	uxtb	r2, r3
 8008712:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008714:	2a00      	cmp	r2, #0
 8008716:	d1f1      	bne.n	80086fc <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008718:	23ff      	movs	r3, #255	; 0xff
 800871a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800871e:	f001 fe7b 	bl	800a418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008722:	f001 fe57 	bl	800a3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008726:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800872a:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800872c:	2c00      	cmp	r4, #0
 800872e:	dd14      	ble.n	800875a <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008730:	f105 0610 	add.w	r6, r5, #16
 8008734:	e003      	b.n	800873e <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008736:	1e63      	subs	r3, r4, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800873c:	b16a      	cbz	r2, 800875a <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800873e:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008740:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008742:	b153      	cbz	r3, 800875a <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008744:	f001 fa22 	bl	8009b8c <xTaskRemoveFromEventList>
 8008748:	2800      	cmp	r0, #0
 800874a:	d0f4      	beq.n	8008736 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800874c:	f001 fabc 	bl	8009cc8 <vTaskMissedYield>
				--cRxLock;
 8008750:	1e63      	subs	r3, r4, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008756:	2a00      	cmp	r2, #0
 8008758:	d1f1      	bne.n	800873e <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800875a:	23ff      	movs	r3, #255	; 0xff
 800875c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8008760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008764:	f001 be58 	b.w	800a418 <vPortExitCritical>

08008768 <xQueueGenericReset>:
{
 8008768:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800876a:	b1e0      	cbz	r0, 80087a6 <xQueueGenericReset+0x3e>
 800876c:	4604      	mov	r4, r0
 800876e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8008770:	f001 fe30 	bl	800a3d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800877a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800877c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008780:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008782:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008784:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008786:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008788:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800878a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800878c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800878e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8008790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008798:	b975      	cbnz	r5, 80087b8 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	b9c3      	cbnz	r3, 80087d0 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 800879e:	f001 fe3b 	bl	800a418 <vPortExitCritical>
}
 80087a2:	2001      	movs	r0, #1
 80087a4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80087b6:	e7fe      	b.n	80087b6 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087b8:	f104 0010 	add.w	r0, r4, #16
 80087bc:	f7ff ff00 	bl	80085c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087c4:	f7ff fefc 	bl	80085c0 <vListInitialise>
	taskEXIT_CRITICAL();
 80087c8:	f001 fe26 	bl	800a418 <vPortExitCritical>
}
 80087cc:	2001      	movs	r0, #1
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087d0:	f104 0010 	add.w	r0, r4, #16
 80087d4:	f001 f9da 	bl	8009b8c <xTaskRemoveFromEventList>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d0e0      	beq.n	800879e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80087dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	e7d5      	b.n	800879e <xQueueGenericReset+0x36>
 80087f2:	bf00      	nop

080087f4 <xQueueGenericCreateStatic>:
	{
 80087f4:	b530      	push	{r4, r5, lr}
 80087f6:	b085      	sub	sp, #20
 80087f8:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087fc:	b940      	cbnz	r0, 8008810 <xQueueGenericCreateStatic+0x1c>
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	e7fe      	b.n	800880e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8008810:	b153      	cbz	r3, 8008828 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008812:	b30a      	cbz	r2, 8008858 <xQueueGenericCreateStatic+0x64>
 8008814:	b989      	cbnz	r1, 800883a <xQueueGenericCreateStatic+0x46>
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	e7fe      	b.n	8008826 <xQueueGenericCreateStatic+0x32>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8008838:	e7fe      	b.n	8008838 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800883a:	b16a      	cbz	r2, 8008858 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800883c:	2550      	movs	r5, #80	; 0x50
 800883e:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008840:	9d03      	ldr	r5, [sp, #12]
 8008842:	2d50      	cmp	r5, #80	; 0x50
 8008844:	d013      	beq.n	800886e <xQueueGenericCreateStatic+0x7a>
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	e7fe      	b.n	8008856 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008858:	2900      	cmp	r1, #0
 800885a:	d0ef      	beq.n	800883c <xQueueGenericCreateStatic+0x48>
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	e7fe      	b.n	800886c <xQueueGenericCreateStatic+0x78>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800886e:	2900      	cmp	r1, #0
 8008870:	bf08      	it	eq
 8008872:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8008874:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008876:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8008878:	63d8      	str	r0, [r3, #60]	; 0x3c
 800887a:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800887c:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800887e:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8008882:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008884:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008886:	f7ff ff6f 	bl	8008768 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800888a:	9b01      	ldr	r3, [sp, #4]
	}
 800888c:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 800888e:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 8008892:	b005      	add	sp, #20
 8008894:	bd30      	pop	{r4, r5, pc}
 8008896:	bf00      	nop

08008898 <xQueueGenericCreate>:
	{
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800889a:	b940      	cbnz	r0, 80088ae <xQueueGenericCreate+0x16>
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	e7fe      	b.n	80088ac <xQueueGenericCreate+0x14>
 80088ae:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b0:	fb01 f000 	mul.w	r0, r1, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088b8:	3050      	adds	r0, #80	; 0x50
 80088ba:	f001 ff07 	bl	800a6cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80088be:	4607      	mov	r7, r0
 80088c0:	b170      	cbz	r0, 80088e0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80088c8:	b165      	cbz	r5, 80088e4 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ca:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ce:	2101      	movs	r1, #1
 80088d0:	4638      	mov	r0, r7
 80088d2:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80088d4:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088d8:	f7ff ff46 	bl	8008768 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80088dc:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 80088e0:	4638      	mov	r0, r7
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	4603      	mov	r3, r0
 80088e6:	e7f2      	b.n	80088ce <xQueueGenericCreate+0x36>

080088e8 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80088e8:	b940      	cbnz	r0, 80088fc <xQueueCreateCountingSemaphoreStatic+0x14>
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	e7fe      	b.n	80088fa <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80088fc:	4288      	cmp	r0, r1
	{
 80088fe:	b510      	push	{r4, lr}
 8008900:	460c      	mov	r4, r1
 8008902:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8008904:	d208      	bcs.n	8008918 <xQueueCreateCountingSemaphoreStatic+0x30>
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	e7fe      	b.n	8008916 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008918:	2102      	movs	r1, #2
 800891a:	4613      	mov	r3, r2
 800891c:	2200      	movs	r2, #0
 800891e:	9100      	str	r1, [sp, #0]
 8008920:	4611      	mov	r1, r2
 8008922:	f7ff ff67 	bl	80087f4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8008926:	b100      	cbz	r0, 800892a <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008928:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800892a:	b002      	add	sp, #8
 800892c:	bd10      	pop	{r4, pc}
 800892e:	bf00      	nop

08008930 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8008930:	b940      	cbnz	r0, 8008944 <xQueueCreateCountingSemaphore+0x14>
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	e7fe      	b.n	8008942 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008944:	4288      	cmp	r0, r1
	{
 8008946:	b510      	push	{r4, lr}
 8008948:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800894a:	d208      	bcs.n	800895e <xQueueCreateCountingSemaphore+0x2e>
 800894c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	e7fe      	b.n	800895c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800895e:	2202      	movs	r2, #2
 8008960:	2100      	movs	r1, #0
 8008962:	f7ff ff99 	bl	8008898 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008966:	b100      	cbz	r0, 800896a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008968:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800896a:	bd10      	pop	{r4, pc}

0800896c <xQueueGenericSend>:
{
 800896c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008970:	b085      	sub	sp, #20
 8008972:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008974:	2800      	cmp	r0, #0
 8008976:	d07e      	beq.n	8008a76 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008978:	460f      	mov	r7, r1
 800897a:	4604      	mov	r4, r0
 800897c:	461e      	mov	r6, r3
 800897e:	2900      	cmp	r1, #0
 8008980:	d069      	beq.n	8008a56 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008982:	2e02      	cmp	r6, #2
 8008984:	d10b      	bne.n	800899e <xQueueGenericSend+0x32>
 8008986:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008988:	2b01      	cmp	r3, #1
 800898a:	d008      	beq.n	800899e <xQueueGenericSend+0x32>
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	e7fe      	b.n	800899c <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800899e:	f001 f99f 	bl	8009ce0 <xTaskGetSchedulerState>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d070      	beq.n	8008a88 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089a6:	f1a6 0802 	sub.w	r8, r6, #2
 80089aa:	2500      	movs	r5, #0
 80089ac:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80089b0:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089b2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80089b6:	e007      	b.n	80089c8 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80089b8:	f001 fd2e 	bl	800a418 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80089bc:	4620      	mov	r0, r4
 80089be:	f7ff fe8d 	bl	80086dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089c2:	f001 f815 	bl	80099f0 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089c6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80089c8:	f001 fd04 	bl	800a3d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80089ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80089d0:	4290      	cmp	r0, r2
 80089d2:	d365      	bcc.n	8008aa0 <xQueueGenericSend+0x134>
 80089d4:	f1b8 0f00 	cmp.w	r8, #0
 80089d8:	d162      	bne.n	8008aa0 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 80089da:	9b01      	ldr	r3, [sp, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d077      	beq.n	8008ad0 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	d044      	beq.n	8008a6e <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 80089e4:	f001 fd18 	bl	800a418 <vPortExitCritical>
		vTaskSuspendAll();
 80089e8:	f000 feae 	bl	8009748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089ec:	f001 fcf2 	bl	800a3d4 <vPortEnterCritical>
 80089f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089f4:	2bff      	cmp	r3, #255	; 0xff
 80089f6:	d101      	bne.n	80089fc <xQueueGenericSend+0x90>
 80089f8:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80089fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a00:	2bff      	cmp	r3, #255	; 0xff
 8008a02:	d101      	bne.n	8008a08 <xQueueGenericSend+0x9c>
 8008a04:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8008a08:	f001 fd06 	bl	800a418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a0c:	a901      	add	r1, sp, #4
 8008a0e:	a802      	add	r0, sp, #8
 8008a10:	f001 f912 	bl	8009c38 <xTaskCheckForTimeOut>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d15f      	bne.n	8008ad8 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8008a18:	f001 fcdc 	bl	800a3d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008a1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d1c9      	bne.n	80089b8 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8008a24:	f001 fcf8 	bl	800a418 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a28:	9901      	ldr	r1, [sp, #4]
 8008a2a:	f104 0010 	add.w	r0, r4, #16
 8008a2e:	f001 f875 	bl	8009b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff fe52 	bl	80086dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a38:	f000 ffda 	bl	80099f0 <xTaskResumeAll>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d1c2      	bne.n	80089c6 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8008a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	e7b7      	b.n	80089c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d092      	beq.n	8008982 <xQueueGenericSend+0x16>
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	e7fe      	b.n	8008a6c <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a6e:	a802      	add	r0, sp, #8
 8008a70:	f001 f8d6 	bl	8009c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a74:	e7b6      	b.n	80089e4 <xQueueGenericSend+0x78>
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008a86:	e7fe      	b.n	8008a86 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d08b      	beq.n	80089a6 <xQueueGenericSend+0x3a>
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	e7fe      	b.n	8008a9e <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff fdd7 	bl	8008658 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aac:	b9db      	cbnz	r3, 8008ae6 <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 8008aae:	b148      	cbz	r0, 8008ac4 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8008ab0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008ac4:	f001 fca8 	bl	800a418 <vPortExitCritical>
				return pdPASS;
 8008ac8:	2001      	movs	r0, #1
}
 8008aca:	b005      	add	sp, #20
 8008acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8008ad0:	f001 fca2 	bl	800a418 <vPortExitCritical>
					return errQUEUE_FULL;
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	e7f8      	b.n	8008aca <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7ff fdff 	bl	80086dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ade:	f000 ff87 	bl	80099f0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e7f1      	b.n	8008aca <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008aea:	f001 f84f 	bl	8009b8c <xTaskRemoveFromEventList>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0e8      	beq.n	8008ac4 <xQueueGenericSend+0x158>
 8008af2:	e7dd      	b.n	8008ab0 <xQueueGenericSend+0x144>

08008af4 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8008af4:	b179      	cbz	r1, 8008b16 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008af6:	2350      	movs	r3, #80	; 0x50
	{
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008afc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	2b50      	cmp	r3, #80	; 0x50
 8008b02:	d011      	beq.n	8008b28 <xQueueCreateMutexStatic+0x34>
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	e7fe      	b.n	8008b14 <xQueueCreateMutexStatic+0x20>
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8008b26:	e7fe      	b.n	8008b26 <xQueueCreateMutexStatic+0x32>
 8008b28:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 8008b2a:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b30:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b32:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b34:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b38:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 8008b3a:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b3e:	f7ff fe13 	bl	8008768 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b42:	4633      	mov	r3, r6
 8008b44:	4632      	mov	r2, r6
 8008b46:	4631      	mov	r1, r6
 8008b48:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008b4a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b4e:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b50:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008b52:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b54:	f7ff ff0a 	bl	800896c <xQueueGenericSend>
	}
 8008b58:	4620      	mov	r0, r4
 8008b5a:	b002      	add	sp, #8
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	bf00      	nop

08008b60 <xQueueGiveMutexRecursive>:
	{
 8008b60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8008b62:	b138      	cbz	r0, 8008b74 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008b64:	6885      	ldr	r5, [r0, #8]
 8008b66:	4604      	mov	r4, r0
 8008b68:	f001 f8b4 	bl	8009cd4 <xTaskGetCurrentTaskHandle>
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	d00a      	beq.n	8008b86 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8008b70:	2000      	movs	r0, #0
	}
 8008b72:	bd38      	pop	{r3, r4, r5, pc}
 8008b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8008b84:	e7fe      	b.n	8008b84 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008b86:	68e3      	ldr	r3, [r4, #12]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008b8c:	b10b      	cbz	r3, 8008b92 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8008b8e:	2001      	movs	r0, #1
	}
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008b92:	461a      	mov	r2, r3
 8008b94:	4619      	mov	r1, r3
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7ff fee8 	bl	800896c <xQueueGenericSend>
			xReturn = pdPASS;
 8008b9c:	2001      	movs	r0, #1
	}
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}

08008ba0 <xQueueCreateMutex>:
	{
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ba4:	2050      	movs	r0, #80	; 0x50
 8008ba6:	f001 fd91 	bl	800a6cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008baa:	4604      	mov	r4, r0
 8008bac:	b198      	cbz	r0, 8008bd6 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008bae:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008bb0:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bb2:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008bb4:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008bb8:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bbc:	f7ff fdd4 	bl	8008768 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	4632      	mov	r2, r6
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008bc8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bcc:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008bce:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008bd0:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008bd2:	f7ff fecb 	bl	800896c <xQueueGenericSend>
	}
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	bf00      	nop

08008bdc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d04e      	beq.n	8008c7e <xQueueGenericSendFromISR+0xa2>
{
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	460e      	mov	r6, r1
 8008be6:	4604      	mov	r4, r0
 8008be8:	4617      	mov	r7, r2
 8008bea:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bec:	b339      	cbz	r1, 8008c3e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bee:	2d02      	cmp	r5, #2
 8008bf0:	d10b      	bne.n	8008c0a <xQueueGenericSendFromISR+0x2e>
 8008bf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d008      	beq.n	8008c0a <xQueueGenericSendFromISR+0x2e>
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	e7fe      	b.n	8008c08 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c0a:	f001 fcff 	bl	800a60c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c0e:	f3ef 8811 	mrs	r8, BASEPRI
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d315      	bcc.n	8008c56 <xQueueGenericSendFromISR+0x7a>
 8008c2a:	f1a5 0002 	sub.w	r0, r5, #2
 8008c2e:	fab0 f080 	clz	r0, r0
 8008c32:	0940      	lsrs	r0, r0, #5
 8008c34:	b978      	cbnz	r0, 8008c56 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c36:	f388 8811 	msr	BASEPRI, r8
}
 8008c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0d4      	beq.n	8008bee <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	e7fe      	b.n	8008c54 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c56:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c58:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c60:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c64:	f7ff fcf8 	bl	8008658 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008c68:	1c6b      	adds	r3, r5, #1
 8008c6a:	d011      	beq.n	8008c90 <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c6c:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8008c6e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c70:	b25b      	sxtb	r3, r3
 8008c72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8008c76:	f388 8811 	msr	BASEPRI, r8
}
 8008c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008c8e:	e7fe      	b.n	8008c8e <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c92:	b90b      	cbnz	r3, 8008c98 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8008c94:	2001      	movs	r0, #1
 8008c96:	e7ce      	b.n	8008c36 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c9c:	f000 ff76 	bl	8009b8c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d0f7      	beq.n	8008c94 <xQueueGenericSendFromISR+0xb8>
 8008ca4:	2f00      	cmp	r7, #0
 8008ca6:	d0f5      	beq.n	8008c94 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ca8:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8008caa:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	e7c2      	b.n	8008c36 <xQueueGenericSendFromISR+0x5a>

08008cb0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008cb0:	b360      	cbz	r0, 8008d0c <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cb8:	b143      	cbz	r3, 8008ccc <xQueueGiveFromISR+0x1c>
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	e7fe      	b.n	8008cca <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ccc:	6803      	ldr	r3, [r0, #0]
 8008cce:	460d      	mov	r5, r1
 8008cd0:	b32b      	cbz	r3, 8008d1e <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cd2:	f001 fc9b 	bl	800a60c <vPortValidateInterruptPriority>
	__asm volatile
 8008cd6:	f3ef 8611 	mrs	r6, BASEPRI
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008cec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d921      	bls.n	8008d36 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cf2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cf6:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8008cf8:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cfa:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8008cfc:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8008cfe:	d01e      	beq.n	8008d3e <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d00:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8008d02:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d04:	b25b      	sxtb	r3, r3
 8008d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d0a:	e015      	b.n	8008d38 <xQueueGiveFromISR+0x88>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008d1c:	e7fe      	b.n	8008d1c <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008d1e:	6883      	ldr	r3, [r0, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0d6      	beq.n	8008cd2 <xQueueGiveFromISR+0x22>
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	e7fe      	b.n	8008d34 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8008d36:	2000      	movs	r0, #0
	__asm volatile
 8008d38:	f386 8811 	msr	BASEPRI, r6
}
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d40:	b90b      	cbnz	r3, 8008d46 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7f8      	b.n	8008d38 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008d4a:	f000 ff1f 	bl	8009b8c <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	d0f7      	beq.n	8008d42 <xQueueGiveFromISR+0x92>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0f5      	beq.n	8008d42 <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d56:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8008d58:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	e7ec      	b.n	8008d38 <xQueueGiveFromISR+0x88>
 8008d5e:	bf00      	nop

08008d60 <xQueueReceive>:
{
 8008d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d64:	b085      	sub	sp, #20
 8008d66:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f000 80a0 	beq.w	8008eae <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d6e:	460d      	mov	r5, r1
 8008d70:	4604      	mov	r4, r0
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d047      	beq.n	8008e06 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d76:	f000 ffb3 	bl	8009ce0 <xTaskGetSchedulerState>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d04f      	beq.n	8008e1e <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8008d7e:	f001 fb29 	bl	800a3d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d82:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d84:	2e00      	cmp	r6, #0
 8008d86:	d17d      	bne.n	8008e84 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d88:	9b01      	ldr	r3, [sp, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d035      	beq.n	8008dfa <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8008d8e:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d90:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8008d94:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d98:	a802      	add	r0, sp, #8
 8008d9a:	f000 ff41 	bl	8009c20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008d9e:	f001 fb3b 	bl	800a418 <vPortExitCritical>
		vTaskSuspendAll();
 8008da2:	f000 fcd1 	bl	8009748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008da6:	f001 fb15 	bl	800a3d4 <vPortEnterCritical>
 8008daa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008dae:	2bff      	cmp	r3, #255	; 0xff
 8008db0:	d101      	bne.n	8008db6 <xQueueReceive+0x56>
 8008db2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008db6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008dba:	2bff      	cmp	r3, #255	; 0xff
 8008dbc:	d101      	bne.n	8008dc2 <xQueueReceive+0x62>
 8008dbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dc2:	f001 fb29 	bl	800a418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dc6:	a901      	add	r1, sp, #4
 8008dc8:	a802      	add	r0, sp, #8
 8008dca:	f000 ff35 	bl	8009c38 <xTaskCheckForTimeOut>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d131      	bne.n	8008e36 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8008dd2:	f001 faff 	bl	800a3d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d039      	beq.n	8008e50 <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8008ddc:	f001 fb1c 	bl	800a418 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008de0:	4620      	mov	r0, r4
 8008de2:	f7ff fc7b 	bl	80086dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008de6:	f000 fe03 	bl	80099f0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008dea:	f001 faf3 	bl	800a3d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008df0:	2e00      	cmp	r6, #0
 8008df2:	d147      	bne.n	8008e84 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008df4:	9b01      	ldr	r3, [sp, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1d1      	bne.n	8008d9e <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8008dfa:	f001 fb0d 	bl	800a418 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008dfe:	2000      	movs	r0, #0
}
 8008e00:	b005      	add	sp, #20
 8008e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0b4      	beq.n	8008d76 <xQueueReceive+0x16>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	e7fe      	b.n	8008e1c <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0ac      	beq.n	8008d7e <xQueueReceive+0x1e>
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	e7fe      	b.n	8008e34 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff fc50 	bl	80086dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e3c:	f000 fdd8 	bl	80099f0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008e40:	f001 fac8 	bl	800a3d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0d7      	beq.n	8008dfa <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8008e4a:	f001 fae5 	bl	800a418 <vPortExitCritical>
 8008e4e:	e7cc      	b.n	8008dea <xQueueReceive+0x8a>
 8008e50:	f001 fae2 	bl	800a418 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e54:	9901      	ldr	r1, [sp, #4]
 8008e56:	4640      	mov	r0, r8
 8008e58:	f000 fe60 	bl	8009b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7ff fc3d 	bl	80086dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e62:	f000 fdc5 	bl	80099f0 <xTaskResumeAll>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d1bf      	bne.n	8008dea <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 8008e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e6e:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8008e7a:	f001 faab 	bl	800a3d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e7e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	d0b7      	beq.n	8008df4 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e86:	b152      	cbz	r2, 8008e9e <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e88:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e8a:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e8c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e8e:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e90:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e92:	d301      	bcc.n	8008e98 <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e94:	6821      	ldr	r1, [r4, #0]
 8008e96:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e98:	4628      	mov	r0, r5
 8008e9a:	f00c f8a6 	bl	8014fea <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e9e:	3e01      	subs	r6, #1
 8008ea0:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	b963      	cbnz	r3, 8008ec0 <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8008ea6:	f001 fab7 	bl	800a418 <vPortExitCritical>
				return pdPASS;
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7a8      	b.n	8008e00 <xQueueReceive+0xa0>
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008ebe:	e7fe      	b.n	8008ebe <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec0:	f104 0010 	add.w	r0, r4, #16
 8008ec4:	f000 fe62 	bl	8009b8c <xTaskRemoveFromEventList>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d0ec      	beq.n	8008ea6 <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8008ecc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	e7e1      	b.n	8008ea6 <xQueueReceive+0x146>
 8008ee2:	bf00      	nop

08008ee4 <xQueueSemaphoreTake>:
{
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d055      	beq.n	8008f9a <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008eee:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	b146      	cbz	r6, 8008f06 <xQueueSemaphoreTake+0x22>
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	e7fe      	b.n	8008f04 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f06:	f000 feeb 	bl	8009ce0 <xTaskGetSchedulerState>
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d04d      	beq.n	8008fac <xQueueSemaphoreTake+0xc8>
 8008f10:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8008f12:	f001 fa5f 	bl	800a3d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8008f18:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f1a:	bb8b      	cbnz	r3, 8008f80 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f1c:	9b01      	ldr	r3, [sp, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 809b 	beq.w	800905a <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8008f24:	2d00      	cmp	r5, #0
 8008f26:	d059      	beq.n	8008fdc <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8008f28:	f001 fa76 	bl	800a418 <vPortExitCritical>
		vTaskSuspendAll();
 8008f2c:	f000 fc0c 	bl	8009748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f30:	f001 fa50 	bl	800a3d4 <vPortEnterCritical>
 8008f34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008f38:	2bff      	cmp	r3, #255	; 0xff
 8008f3a:	d101      	bne.n	8008f40 <xQueueSemaphoreTake+0x5c>
 8008f3c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008f40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008f44:	2bff      	cmp	r3, #255	; 0xff
 8008f46:	d101      	bne.n	8008f4c <xQueueSemaphoreTake+0x68>
 8008f48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f4c:	f001 fa64 	bl	800a418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f50:	a901      	add	r1, sp, #4
 8008f52:	a802      	add	r0, sp, #8
 8008f54:	f000 fe70 	bl	8009c38 <xTaskCheckForTimeOut>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d133      	bne.n	8008fc4 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 8008f5c:	f001 fa3a 	bl	800a3d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d03e      	beq.n	8008fe4 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8008f66:	f001 fa57 	bl	800a418 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7ff fbb6 	bl	80086dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f70:	f000 fd3e 	bl	80099f0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008f74:	f001 fa2e 	bl	800a3d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f7a:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0cd      	beq.n	8008f1c <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f80:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f82:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f84:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	f000 8083 	beq.w	8009092 <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d16e      	bne.n	8009070 <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 8008f92:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8008f94:	f001 fa40 	bl	800a418 <vPortExitCritical>
				return pdPASS;
 8008f98:	e042      	b.n	8009020 <xQueueSemaphoreTake+0x13c>
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008faa:	e7fe      	b.n	8008faa <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d039      	beq.n	8009026 <xQueueSemaphoreTake+0x142>
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	e7fe      	b.n	8008fc2 <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7ff fb89 	bl	80086dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fca:	f000 fd11 	bl	80099f0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8008fce:	f001 fa01 	bl	800a3d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008fd4:	b30b      	cbz	r3, 800901a <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8008fd6:	f001 fa1f 	bl	800a418 <vPortExitCritical>
	return xReturn;
 8008fda:	e7cb      	b.n	8008f74 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fdc:	a802      	add	r0, sp, #8
 8008fde:	f000 fe1f 	bl	8009c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fe2:	e7a1      	b.n	8008f28 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8008fe4:	f001 fa18 	bl	800a418 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	b36b      	cbz	r3, 8009048 <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fec:	9901      	ldr	r1, [sp, #4]
 8008fee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ff2:	f000 fd93 	bl	8009b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7ff fb70 	bl	80086dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ffc:	f000 fcf8 	bl	80099f0 <xTaskResumeAll>
 8009000:	2800      	cmp	r0, #0
 8009002:	d1b7      	bne.n	8008f74 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8009004:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	e7ac      	b.n	8008f74 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 800901a:	f001 f9fd 	bl	800a418 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800901e:	b926      	cbnz	r6, 800902a <xQueueSemaphoreTake+0x146>
}
 8009020:	4630      	mov	r0, r6
 8009022:	b005      	add	sp, #20
 8009024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009026:	4606      	mov	r6, r0
 8009028:	e773      	b.n	8008f12 <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 800902a:	f001 f9d3 	bl	800a3d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800902e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009030:	b119      	cbz	r1, 800903a <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009034:	6819      	ldr	r1, [r3, #0]
 8009036:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800903a:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800903c:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800903e:	f000 feeb 	bl	8009e18 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8009042:	f001 f9e9 	bl	800a418 <vPortExitCritical>
 8009046:	e7eb      	b.n	8009020 <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8009048:	f001 f9c4 	bl	800a3d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800904c:	68a0      	ldr	r0, [r4, #8]
 800904e:	f000 fe57 	bl	8009d00 <xTaskPriorityInherit>
 8009052:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8009054:	f001 f9e0 	bl	800a418 <vPortExitCritical>
 8009058:	e7c8      	b.n	8008fec <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800905a:	2e00      	cmp	r6, #0
 800905c:	d0f1      	beq.n	8009042 <xQueueSemaphoreTake+0x15e>
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	e7fe      	b.n	800906e <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009070:	f104 0010 	add.w	r0, r4, #16
 8009074:	f000 fd8a 	bl	8009b8c <xTaskRemoveFromEventList>
 8009078:	2800      	cmp	r0, #0
 800907a:	d08a      	beq.n	8008f92 <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 800907c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009084:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	e77f      	b.n	8008f92 <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009092:	f000 ff15 	bl	8009ec0 <pvTaskIncrementMutexHeldCount>
 8009096:	60a0      	str	r0, [r4, #8]
 8009098:	e778      	b.n	8008f8c <xQueueSemaphoreTake+0xa8>
 800909a:	bf00      	nop

0800909c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800909c:	b1a8      	cbz	r0, 80090ca <xQueueTakeMutexRecursive+0x2e>
	{
 800909e:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80090a0:	6886      	ldr	r6, [r0, #8]
 80090a2:	4604      	mov	r4, r0
 80090a4:	460d      	mov	r5, r1
 80090a6:	f000 fe15 	bl	8009cd4 <xTaskGetCurrentTaskHandle>
 80090aa:	4286      	cmp	r6, r0
 80090ac:	d008      	beq.n	80090c0 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80090ae:	4629      	mov	r1, r5
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7ff ff17 	bl	8008ee4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80090b6:	b110      	cbz	r0, 80090be <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80090b8:	68e3      	ldr	r3, [r4, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60e3      	str	r3, [r4, #12]
	}
 80090be:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80090c0:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80090c2:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80090c4:	4403      	add	r3, r0
 80090c6:	60e3      	str	r3, [r4, #12]
	}
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80090da:	e7fe      	b.n	80090da <xQueueTakeMutexRecursive+0x3e>

080090dc <xQueueReceiveFromISR>:
{
 80090dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80090e0:	b310      	cbz	r0, 8009128 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090e2:	460e      	mov	r6, r1
 80090e4:	4604      	mov	r4, r0
 80090e6:	4617      	mov	r7, r2
 80090e8:	b191      	cbz	r1, 8009110 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090ea:	f001 fa8f 	bl	800a60c <vPortValidateInterruptPriority>
	__asm volatile
 80090ee:	f3ef 8911 	mrs	r9, BASEPRI
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009102:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009104:	b9cd      	cbnz	r5, 800913a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8009106:	4628      	mov	r0, r5
	__asm volatile
 8009108:	f389 8811 	msr	BASEPRI, r9
}
 800910c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009110:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0e9      	beq.n	80090ea <xQueueReceiveFromISR+0xe>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	e7fe      	b.n	8009126 <xQueueReceiveFromISR+0x4a>
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009138:	e7fe      	b.n	8009138 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800913a:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800913e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8009140:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009144:	b142      	cbz	r2, 8009158 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009146:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009148:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800914a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800914c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800914e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009150:	d215      	bcs.n	800917e <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009152:	4630      	mov	r0, r6
 8009154:	f00b ff49 	bl	8014fea <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009158:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800915a:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800915e:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009160:	d009      	beq.n	8009176 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009162:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8009166:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009168:	b25b      	sxtb	r3, r3
 800916a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 800916e:	f389 8811 	msr	BASEPRI, r9
}
 8009172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	b923      	cbnz	r3, 8009184 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 800917a:	2001      	movs	r0, #1
 800917c:	e7c4      	b.n	8009108 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800917e:	6821      	ldr	r1, [r4, #0]
 8009180:	60e1      	str	r1, [r4, #12]
 8009182:	e7e6      	b.n	8009152 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009184:	f104 0010 	add.w	r0, r4, #16
 8009188:	f000 fd00 	bl	8009b8c <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800918c:	2f00      	cmp	r7, #0
 800918e:	d0f4      	beq.n	800917a <xQueueReceiveFromISR+0x9e>
 8009190:	2800      	cmp	r0, #0
 8009192:	d0f2      	beq.n	800917a <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009194:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8009196:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009198:	603b      	str	r3, [r7, #0]
 800919a:	e7b5      	b.n	8009108 <xQueueReceiveFromISR+0x2c>

0800919c <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 800919c:	b158      	cbz	r0, 80091b6 <uxQueueMessagesWaiting+0x1a>
{
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 80091a4:	f001 f916 	bl	800a3d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80091a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091aa:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80091ac:	f001 f934 	bl	800a418 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80091b0:	9801      	ldr	r0, [sp, #4]
 80091b2:	b002      	add	sp, #8
 80091b4:	bd10      	pop	{r4, pc}
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80091c6:	e7fe      	b.n	80091c6 <uxQueueMessagesWaiting+0x2a>

080091c8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80091c8:	b108      	cbz	r0, 80091ce <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80091ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80091cc:	4770      	bx	lr
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80091de:	e7fe      	b.n	80091de <uxQueueMessagesWaitingFromISR+0x16>

080091e0 <vQueueDelete>:
	configASSERT( pxQueue );
 80091e0:	b180      	cbz	r0, 8009204 <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091e2:	2300      	movs	r3, #0
{
 80091e4:	b410      	push	{r4}
 80091e6:	4c12      	ldr	r4, [pc, #72]	; (8009230 <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80091e8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80091ec:	6851      	ldr	r1, [r2, #4]
 80091ee:	4288      	cmp	r0, r1
 80091f0:	d015      	beq.n	800921e <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091f2:	3301      	adds	r3, #1
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d1f7      	bne.n	80091e8 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091f8:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80091fc:	b15b      	cbz	r3, 8009216 <vQueueDelete+0x36>
}
 80091fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009214:	e7fe      	b.n	8009214 <vQueueDelete+0x34>
}
 8009216:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 800921a:	f001 baed 	b.w	800a7f8 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800921e:	2100      	movs	r1, #0
 8009220:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009224:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009228:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e7      	bne.n	80091fe <vQueueDelete+0x1e>
 800922e:	e7f2      	b.n	8009216 <vQueueDelete+0x36>
 8009230:	24029130 	.word	0x24029130

08009234 <vQueueAddToRegistry>:
	{
 8009234:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009236:	2300      	movs	r3, #0
 8009238:	4c08      	ldr	r4, [pc, #32]	; (800925c <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800923a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800923e:	b12a      	cbz	r2, 800924c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009240:	3301      	adds	r3, #1
 8009242:	2b08      	cmp	r3, #8
 8009244:	d1f9      	bne.n	800923a <vQueueAddToRegistry+0x6>
	}
 8009246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800924a:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 800924c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009250:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8009254:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009258:	6050      	str	r0, [r2, #4]
	}
 800925a:	4770      	bx	lr
 800925c:	24029130 	.word	0x24029130

08009260 <vQueueUnregisterQueue>:
	{
 8009260:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009262:	2300      	movs	r3, #0
 8009264:	4c09      	ldr	r4, [pc, #36]	; (800928c <vQueueUnregisterQueue+0x2c>)
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009266:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800926a:	6851      	ldr	r1, [r2, #4]
 800926c:	4281      	cmp	r1, r0
 800926e:	d005      	beq.n	800927c <vQueueUnregisterQueue+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009270:	3301      	adds	r3, #1
 8009272:	2b08      	cmp	r3, #8
 8009274:	d1f7      	bne.n	8009266 <vQueueUnregisterQueue+0x6>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927a:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800927c:	2100      	movs	r1, #0
 800927e:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009282:	6051      	str	r1, [r2, #4]
	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	24029130 	.word	0x24029130

08009290 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4604      	mov	r4, r0
 8009294:	460e      	mov	r6, r1
 8009296:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009298:	f001 f89c 	bl	800a3d4 <vPortEnterCritical>
 800929c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80092a0:	2bff      	cmp	r3, #255	; 0xff
 80092a2:	d102      	bne.n	80092aa <vQueueWaitForMessageRestricted+0x1a>
 80092a4:	2300      	movs	r3, #0
 80092a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80092aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80092ae:	2bff      	cmp	r3, #255	; 0xff
 80092b0:	d102      	bne.n	80092b8 <vQueueWaitForMessageRestricted+0x28>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092b8:	f001 f8ae 	bl	800a418 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092be:	b123      	cbz	r3, 80092ca <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092c0:	4620      	mov	r0, r4
	}
 80092c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80092c6:	f7ff ba09 	b.w	80086dc <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80092ce:	462a      	mov	r2, r5
 80092d0:	4631      	mov	r1, r6
 80092d2:	f000 fc3d 	bl	8009b50 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80092d6:	4620      	mov	r0, r4
	}
 80092d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80092dc:	f7ff b9fe 	b.w	80086dc <prvUnlockQueue>

080092e0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e4:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092e6:	f001 f875 	bl	800a3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092ea:	4a34      	ldr	r2, [pc, #208]	; (80093bc <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80092ec:	4e34      	ldr	r6, [pc, #208]	; (80093c0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80092ee:	6813      	ldr	r3, [r2, #0]
 80092f0:	3301      	adds	r3, #1
 80092f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092f4:	6833      	ldr	r3, [r6, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d032      	beq.n	8009360 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092fa:	4c32      	ldr	r4, [pc, #200]	; (80093c4 <prvAddNewTaskToReadyList+0xe4>)
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	b33b      	cbz	r3, 8009350 <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009300:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009302:	4f31      	ldr	r7, [pc, #196]	; (80093c8 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009304:	4a31      	ldr	r2, [pc, #196]	; (80093cc <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009306:	4932      	ldr	r1, [pc, #200]	; (80093d0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8009308:	6813      	ldr	r3, [r2, #0]
 800930a:	3301      	adds	r3, #1
 800930c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800930e:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009310:	680b      	ldr	r3, [r1, #0]
 8009312:	4283      	cmp	r3, r0
 8009314:	d200      	bcs.n	8009318 <prvAddNewTaskToReadyList+0x38>
 8009316:	6008      	str	r0, [r1, #0]
 8009318:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800931c:	1d29      	adds	r1, r5, #4
 800931e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8009322:	f7ff f95d 	bl	80085e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009326:	f001 f877 	bl	800a418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	b173      	cbz	r3, 800934c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800932e:	6832      	ldr	r2, [r6, #0]
 8009330:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009332:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d209      	bcs.n	800934c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009338:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800933c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009340:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800934c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	4f1c      	ldr	r7, [pc, #112]	; (80093c8 <prvAddNewTaskToReadyList+0xe8>)
 8009358:	4283      	cmp	r3, r0
 800935a:	d8d3      	bhi.n	8009304 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 800935c:	6035      	str	r5, [r6, #0]
 800935e:	e7d1      	b.n	8009304 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8009360:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d003      	beq.n	8009370 <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009368:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800936a:	4f17      	ldr	r7, [pc, #92]	; (80093c8 <prvAddNewTaskToReadyList+0xe8>)
 800936c:	4c15      	ldr	r4, [pc, #84]	; (80093c4 <prvAddNewTaskToReadyList+0xe4>)
 800936e:	e7c9      	b.n	8009304 <prvAddNewTaskToReadyList+0x24>
 8009370:	4f15      	ldr	r7, [pc, #84]	; (80093c8 <prvAddNewTaskToReadyList+0xe8>)
 8009372:	463c      	mov	r4, r7
 8009374:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009378:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800937a:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800937c:	f7ff f920 	bl	80085c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009380:	45a0      	cmp	r8, r4
 8009382:	d1f9      	bne.n	8009378 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009384:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80093e8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8009388:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80093ec <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 800938c:	4648      	mov	r0, r9
 800938e:	4c0d      	ldr	r4, [pc, #52]	; (80093c4 <prvAddNewTaskToReadyList+0xe4>)
 8009390:	f7ff f916 	bl	80085c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009394:	4640      	mov	r0, r8
 8009396:	f7ff f913 	bl	80085c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800939a:	480e      	ldr	r0, [pc, #56]	; (80093d4 <prvAddNewTaskToReadyList+0xf4>)
 800939c:	f7ff f910 	bl	80085c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093a0:	480d      	ldr	r0, [pc, #52]	; (80093d8 <prvAddNewTaskToReadyList+0xf8>)
 80093a2:	f7ff f90d 	bl	80085c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093a6:	480d      	ldr	r0, [pc, #52]	; (80093dc <prvAddNewTaskToReadyList+0xfc>)
 80093a8:	f7ff f90a 	bl	80085c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093ac:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80093ae:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80093b0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093b4:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <prvAddNewTaskToReadyList+0x104>)
 80093b6:	f8c3 8000 	str.w	r8, [r3]
}
 80093ba:	e7a3      	b.n	8009304 <prvAddNewTaskToReadyList+0x24>
 80093bc:	240295dc 	.word	0x240295dc
 80093c0:	24029170 	.word	0x24029170
 80093c4:	24029638 	.word	0x24029638
 80093c8:	2402917c 	.word	0x2402917c
 80093cc:	240295e8 	.word	0x240295e8
 80093d0:	240295ec 	.word	0x240295ec
 80093d4:	24029624 	.word	0x24029624
 80093d8:	24029650 	.word	0x24029650
 80093dc:	2402963c 	.word	0x2402963c
 80093e0:	24029174 	.word	0x24029174
 80093e4:	24029178 	.word	0x24029178
 80093e8:	240295f0 	.word	0x240295f0
 80093ec:	24029604 	.word	0x24029604

080093f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093f2:	4b15      	ldr	r3, [pc, #84]	; (8009448 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80093f4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093f6:	4e15      	ldr	r6, [pc, #84]	; (800944c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80093f8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80093fa:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	1d18      	adds	r0, r3, #4
 8009400:	f7ff f916 	bl	8008630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009404:	1c63      	adds	r3, r4, #1
 8009406:	d100      	bne.n	800940a <prvAddCurrentTaskToDelayedList+0x1a>
 8009408:	b9bf      	cbnz	r7, 800943a <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800940a:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800940c:	6833      	ldr	r3, [r6, #0]
 800940e:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8009410:	d307      	bcc.n	8009422 <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <prvAddCurrentTaskToDelayedList+0x60>)
 8009414:	6818      	ldr	r0, [r3, #0]
 8009416:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800941c:	3104      	adds	r1, #4
 800941e:	f7ff b8ef 	b.w	8008600 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009422:	4b0c      	ldr	r3, [pc, #48]	; (8009454 <prvAddCurrentTaskToDelayedList+0x64>)
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	6831      	ldr	r1, [r6, #0]
 8009428:	3104      	adds	r1, #4
 800942a:	f7ff f8e9 	bl	8008600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <prvAddCurrentTaskToDelayedList+0x68>)
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	42aa      	cmp	r2, r5
 8009434:	d900      	bls.n	8009438 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8009436:	601d      	str	r5, [r3, #0]
}
 8009438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800943a:	6831      	ldr	r1, [r6, #0]
 800943c:	4807      	ldr	r0, [pc, #28]	; (800945c <prvAddCurrentTaskToDelayedList+0x6c>)
 800943e:	3104      	adds	r1, #4
}
 8009440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009444:	f7ff b8cc 	b.w	80085e0 <vListInsertEnd>
 8009448:	24029664 	.word	0x24029664
 800944c:	24029170 	.word	0x24029170
 8009450:	24029178 	.word	0x24029178
 8009454:	24029174 	.word	0x24029174
 8009458:	24029618 	.word	0x24029618
 800945c:	2402963c 	.word	0x2402963c

08009460 <prvDeleteTCB>:
	{
 8009460:	b510      	push	{r4, lr}
 8009462:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009464:	3054      	adds	r0, #84	; 0x54
 8009466:	f00b fcf7 	bl	8014e58 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800946a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800946e:	b163      	cbz	r3, 800948a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009470:	2b01      	cmp	r3, #1
 8009472:	d013      	beq.n	800949c <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009474:	2b02      	cmp	r3, #2
 8009476:	d010      	beq.n	800949a <prvDeleteTCB+0x3a>
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	e7fe      	b.n	8009488 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800948a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800948c:	f001 f9b4 	bl	800a7f8 <vPortFree>
				vPortFree( pxTCB );
 8009490:	4620      	mov	r0, r4
	}
 8009492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009496:	f001 b9af 	b.w	800a7f8 <vPortFree>
	}
 800949a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800949c:	4620      	mov	r0, r4
	}
 800949e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80094a2:	f001 b9a9 	b.w	800a7f8 <vPortFree>
 80094a6:	bf00      	nop

080094a8 <prvIdleTask>:
{
 80094a8:	4c15      	ldr	r4, [pc, #84]	; (8009500 <prvIdleTask+0x58>)
				taskYIELD();
 80094aa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80094ae:	4e15      	ldr	r6, [pc, #84]	; (8009504 <prvIdleTask+0x5c>)
 80094b0:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80094b4:	4d14      	ldr	r5, [pc, #80]	; (8009508 <prvIdleTask+0x60>)
 80094b6:	f8df a054 	ldr.w	sl, [pc, #84]	; 800950c <prvIdleTask+0x64>
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	e011      	b.n	80094e2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80094be:	f000 ff89 	bl	800a3d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c2:	68f3      	ldr	r3, [r6, #12]
 80094c4:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094c6:	1d38      	adds	r0, r7, #4
 80094c8:	f7ff f8b2 	bl	8008630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80094d8:	f000 ff9e 	bl	800a418 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff ffbf 	bl	8009460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1ea      	bne.n	80094be <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094e8:	f8da 3000 	ldr.w	r3, [sl]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d9f8      	bls.n	80094e2 <prvIdleTask+0x3a>
				taskYIELD();
 80094f0:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	e7f1      	b.n	80094e2 <prvIdleTask+0x3a>
 80094fe:	bf00      	nop
 8009500:	240295e0 	.word	0x240295e0
 8009504:	24029650 	.word	0x24029650
 8009508:	240295dc 	.word	0x240295dc
 800950c:	2402917c 	.word	0x2402917c

08009510 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009516:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800951a:	4606      	mov	r6, r0
 800951c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800951e:	464a      	mov	r2, r9
 8009520:	21a5      	movs	r1, #165	; 0xa5
 8009522:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009524:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009526:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800952a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800952e:	f00b fc68 	bl	8014e02 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009534:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009536:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 800953a:	2d00      	cmp	r5, #0
 800953c:	d043      	beq.n	80095c6 <prvInitialiseNewTask.constprop.0+0xb6>
 800953e:	f105 3cff 	add.w	ip, r5, #4294967295
 8009542:	f105 030f 	add.w	r3, r5, #15
 8009546:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800954a:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800954e:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8009552:	b10d      	cbz	r5, 8009558 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009554:	459c      	cmp	ip, r3
 8009556:	d1f8      	bne.n	800954a <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009558:	2300      	movs	r3, #0
 800955a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800955e:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8009560:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009564:	1d20      	adds	r0, r4, #4
 8009566:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8009568:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800956c:	bf28      	it	cs
 800956e:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009570:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009572:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009574:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009578:	f7ff f82e 	bl	80085d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800957c:	f104 0018 	add.w	r0, r4, #24
 8009580:	f7ff f82a 	bl	80085d8 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009584:	4651      	mov	r1, sl
 8009586:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009588:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800958a:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800958e:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009592:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009594:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009596:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800959a:	f00b fc32 	bl	8014e02 <memset>
 800959e:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095a0:	463a      	mov	r2, r7
 80095a2:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095a4:	f103 0568 	add.w	r5, r3, #104	; 0x68
 80095a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80095aa:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095ac:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095ae:	65e5      	str	r5, [r4, #92]	; 0x5c
 80095b0:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095b2:	f000 fee5 	bl	800a380 <pxPortInitialiseStack>
 80095b6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80095b8:	f1b8 0f00 	cmp.w	r8, #0
 80095bc:	d001      	beq.n	80095c2 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095be:	f8c8 4000 	str.w	r4, [r8]
}
 80095c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095c6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80095ca:	e7c8      	b.n	800955e <prvInitialiseNewTask.constprop.0+0x4e>
 80095cc:	24037c04 	.word	0x24037c04

080095d0 <xTaskCreateStatic>:
	{
 80095d0:	b530      	push	{r4, r5, lr}
 80095d2:	b087      	sub	sp, #28
 80095d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80095d6:	b1c4      	cbz	r4, 800960a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80095d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095da:	b16d      	cbz	r5, 80095f8 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80095dc:	25a8      	movs	r5, #168	; 0xa8
 80095de:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095e0:	9d05      	ldr	r5, [sp, #20]
 80095e2:	2da8      	cmp	r5, #168	; 0xa8
 80095e4:	d01a      	beq.n	800961c <xTaskCreateStatic+0x4c>
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	e7fe      	b.n	80095f6 <xTaskCreateStatic+0x26>
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009608:	e7fe      	b.n	8009608 <xTaskCreateStatic+0x38>
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800961a:	e7fe      	b.n	800961a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800961c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800961e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009620:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009622:	9502      	str	r5, [sp, #8]
 8009624:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009626:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800962a:	f885 40a5 	strb.w	r4, [r5, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800962e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009630:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009632:	9401      	str	r4, [sp, #4]
 8009634:	f7ff ff6c 	bl	8009510 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009638:	980c      	ldr	r0, [sp, #48]	; 0x30
 800963a:	f7ff fe51 	bl	80092e0 <prvAddNewTaskToReadyList>
	}
 800963e:	9804      	ldr	r0, [sp, #16]
 8009640:	b007      	add	sp, #28
 8009642:	bd30      	pop	{r4, r5, pc}

08009644 <xTaskCreate>:
	{
 8009644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009648:	4607      	mov	r7, r0
 800964a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800964c:	0090      	lsls	r0, r2, #2
	{
 800964e:	4615      	mov	r5, r2
 8009650:	4688      	mov	r8, r1
 8009652:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009654:	f001 f83a 	bl	800a6cc <pvPortMalloc>
			if( pxStack != NULL )
 8009658:	b1d8      	cbz	r0, 8009692 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800965a:	4604      	mov	r4, r0
 800965c:	20a8      	movs	r0, #168	; 0xa8
 800965e:	f001 f835 	bl	800a6cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009662:	4606      	mov	r6, r0
 8009664:	b1d0      	cbz	r0, 800969c <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8009666:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009668:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800966a:	464b      	mov	r3, r9
 800966c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800966e:	f886 40a5 	strb.w	r4, [r6, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009672:	4641      	mov	r1, r8
 8009674:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8009676:	4638      	mov	r0, r7
 8009678:	9602      	str	r6, [sp, #8]
 800967a:	9401      	str	r4, [sp, #4]
 800967c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800967e:	9400      	str	r4, [sp, #0]
 8009680:	f7ff ff46 	bl	8009510 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009684:	4630      	mov	r0, r6
 8009686:	f7ff fe2b 	bl	80092e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800968a:	2001      	movs	r0, #1
	}
 800968c:	b005      	add	sp, #20
 800968e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009696:	b005      	add	sp, #20
 8009698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800969c:	4620      	mov	r0, r4
 800969e:	f001 f8ab 	bl	800a7f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096a2:	f04f 30ff 	mov.w	r0, #4294967295
 80096a6:	e7f1      	b.n	800968c <xTaskCreate+0x48>

080096a8 <vTaskStartScheduler>:
{
 80096a8:	b510      	push	{r4, lr}
 80096aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ac:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096ae:	aa07      	add	r2, sp, #28
 80096b0:	a906      	add	r1, sp, #24
 80096b2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096b8:	f7fe ff62 	bl	8008580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096bc:	4623      	mov	r3, r4
 80096be:	9a07      	ldr	r2, [sp, #28]
 80096c0:	9400      	str	r4, [sp, #0]
 80096c2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80096c6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80096ca:	4918      	ldr	r1, [pc, #96]	; (800972c <vTaskStartScheduler+0x84>)
 80096cc:	4818      	ldr	r0, [pc, #96]	; (8009730 <vTaskStartScheduler+0x88>)
 80096ce:	f7ff ff7f 	bl	80095d0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80096d2:	b1e8      	cbz	r0, 8009710 <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 80096d4:	f000 fc36 	bl	8009f44 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80096d8:	2801      	cmp	r0, #1
 80096da:	d11b      	bne.n	8009714 <vTaskStartScheduler+0x6c>
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096ec:	4b11      	ldr	r3, [pc, #68]	; (8009734 <vTaskStartScheduler+0x8c>)
 80096ee:	4a12      	ldr	r2, [pc, #72]	; (8009738 <vTaskStartScheduler+0x90>)
 80096f0:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80096f2:	4912      	ldr	r1, [pc, #72]	; (800973c <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096f4:	3354      	adds	r3, #84	; 0x54
 80096f6:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80096f8:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80096fc:	4a10      	ldr	r2, [pc, #64]	; (8009740 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80096fe:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009700:	4b10      	ldr	r3, [pc, #64]	; (8009744 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 8009702:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009704:	601c      	str	r4, [r3, #0]
}
 8009706:	b008      	add	sp, #32
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800970c:	f000 bef4 	b.w	800a4f8 <xPortStartScheduler>
}
 8009710:	b008      	add	sp, #32
 8009712:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009714:	3001      	adds	r0, #1
 8009716:	d1fb      	bne.n	8009710 <vTaskStartScheduler+0x68>
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	e7fe      	b.n	8009728 <vTaskStartScheduler+0x80>
 800972a:	bf00      	nop
 800972c:	08018014 	.word	0x08018014
 8009730:	080094a9 	.word	0x080094a9
 8009734:	24029170 	.word	0x24029170
 8009738:	2400024c 	.word	0x2400024c
 800973c:	24029618 	.word	0x24029618
 8009740:	24029638 	.word	0x24029638
 8009744:	24029664 	.word	0x24029664

08009748 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009748:	4a02      	ldr	r2, [pc, #8]	; (8009754 <vTaskSuspendAll+0xc>)
 800974a:	6813      	ldr	r3, [r2, #0]
 800974c:	3301      	adds	r3, #1
 800974e:	6013      	str	r3, [r2, #0]
}
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	240295e4 	.word	0x240295e4

08009758 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009758:	4b01      	ldr	r3, [pc, #4]	; (8009760 <xTaskGetTickCount+0x8>)
 800975a:	6818      	ldr	r0, [r3, #0]
}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	24029664 	.word	0x24029664

08009764 <xTaskGetTickCountFromISR>:
{
 8009764:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009766:	f000 ff51 	bl	800a60c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800976a:	4b01      	ldr	r3, [pc, #4]	; (8009770 <xTaskGetTickCountFromISR+0xc>)
 800976c:	6818      	ldr	r0, [r3, #0]
}
 800976e:	bd08      	pop	{r3, pc}
 8009770:	24029664 	.word	0x24029664

08009774 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009774:	4b50      	ldr	r3, [pc, #320]	; (80098b8 <xTaskIncrementTick+0x144>)
 8009776:	681b      	ldr	r3, [r3, #0]
{
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800977e:	2b00      	cmp	r3, #0
 8009780:	d146      	bne.n	8009810 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009782:	4b4e      	ldr	r3, [pc, #312]	; (80098bc <xTaskIncrementTick+0x148>)
 8009784:	681e      	ldr	r6, [r3, #0]
 8009786:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8009788:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800978a:	2e00      	cmp	r6, #0
 800978c:	d049      	beq.n	8009822 <xTaskIncrementTick+0xae>
 800978e:	f8df b144 	ldr.w	fp, [pc, #324]	; 80098d4 <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009792:	f8db 3000 	ldr.w	r3, [fp]
 8009796:	429e      	cmp	r6, r3
 8009798:	d350      	bcc.n	800983c <xTaskIncrementTick+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800979a:	4f49      	ldr	r7, [pc, #292]	; (80098c0 <xTaskIncrementTick+0x14c>)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681d      	ldr	r5, [r3, #0]
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	d077      	beq.n	8009894 <xTaskIncrementTick+0x120>
BaseType_t xSwitchRequired = pdFALSE;
 80097a4:	2500      	movs	r5, #0
 80097a6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80098d8 <xTaskIncrementTick+0x164>
 80097aa:	f8df a130 	ldr.w	sl, [pc, #304]	; 80098dc <xTaskIncrementTick+0x168>
					prvAddTaskToReadyList( pxTCB );
 80097ae:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80098e0 <xTaskIncrementTick+0x16c>
 80097b2:	e022      	b.n	80097fa <xTaskIncrementTick+0x86>
 80097b4:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b6:	f7fe ff3b 	bl	8008630 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097bc:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097c0:	9901      	ldr	r1, [sp, #4]
 80097c2:	b113      	cbz	r3, 80097ca <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c4:	f7fe ff34 	bl	8008630 <uxListRemove>
 80097c8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80097ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80097cc:	f8d8 3000 	ldr.w	r3, [r8]
 80097d0:	4298      	cmp	r0, r3
 80097d2:	d901      	bls.n	80097d8 <xTaskIncrementTick+0x64>
 80097d4:	f8c8 0000 	str.w	r0, [r8]
 80097d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80097dc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80097e0:	f7fe fefe 	bl	80085e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097e4:	f8da 3000 	ldr.w	r3, [sl]
 80097e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80097ec:	429a      	cmp	r2, r3
 80097ee:	bf28      	it	cs
 80097f0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d050      	beq.n	800989c <xTaskIncrementTick+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009800:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009802:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8009804:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009806:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8009808:	d2d4      	bcs.n	80097b4 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 800980a:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800980e:	e01a      	b.n	8009846 <xTaskIncrementTick+0xd2>
		++xPendedTicks;
 8009810:	4a2c      	ldr	r2, [pc, #176]	; (80098c4 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8009812:	2500      	movs	r5, #0
		++xPendedTicks;
 8009814:	6813      	ldr	r3, [r2, #0]
}
 8009816:	4628      	mov	r0, r5
		++xPendedTicks;
 8009818:	3301      	adds	r3, #1
 800981a:	6013      	str	r3, [r2, #0]
}
 800981c:	b003      	add	sp, #12
 800981e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8009822:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <xTaskIncrementTick+0x14c>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	b30a      	cbz	r2, 800986e <xTaskIncrementTick+0xfa>
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	e7fe      	b.n	800983a <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 800983c:	2500      	movs	r5, #0
 800983e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80098d8 <xTaskIncrementTick+0x164>
 8009842:	f8df a098 	ldr.w	sl, [pc, #152]	; 80098dc <xTaskIncrementTick+0x168>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009846:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 800984a:	491f      	ldr	r1, [pc, #124]	; (80098c8 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800984c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8009858:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800985a:	2a02      	cmp	r2, #2
 800985c:	bf28      	it	cs
 800985e:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8009860:	2b00      	cmp	r3, #0
 8009862:	bf18      	it	ne
 8009864:	2501      	movne	r5, #1
}
 8009866:	4628      	mov	r0, r5
 8009868:	b003      	add	sp, #12
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800986e:	4a17      	ldr	r2, [pc, #92]	; (80098cc <xTaskIncrementTick+0x158>)
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	6811      	ldr	r1, [r2, #0]
 8009874:	6019      	str	r1, [r3, #0]
 8009876:	4916      	ldr	r1, [pc, #88]	; (80098d0 <xTaskIncrementTick+0x15c>)
 8009878:	6010      	str	r0, [r2, #0]
 800987a:	680a      	ldr	r2, [r1, #0]
 800987c:	3201      	adds	r2, #1
 800987e:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	6812      	ldr	r2, [r2, #0]
 8009884:	b97a      	cbnz	r2, 80098a6 <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009886:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80098d4 <xTaskIncrementTick+0x160>
 800988a:	f04f 33ff 	mov.w	r3, #4294967295
 800988e:	f8cb 3000 	str.w	r3, [fp]
 8009892:	e77e      	b.n	8009792 <xTaskIncrementTick+0x1e>
 8009894:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80098d8 <xTaskIncrementTick+0x164>
 8009898:	f8df a040 	ldr.w	sl, [pc, #64]	; 80098dc <xTaskIncrementTick+0x168>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989c:	f04f 33ff 	mov.w	r3, #4294967295
 80098a0:	f8cb 3000 	str.w	r3, [fp]
					break;
 80098a4:	e7cf      	b.n	8009846 <xTaskIncrementTick+0xd2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098a6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098a8:	f8df b028 	ldr.w	fp, [pc, #40]	; 80098d4 <xTaskIncrementTick+0x160>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ac:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f8cb 3000 	str.w	r3, [fp]
}
 80098b6:	e76c      	b.n	8009792 <xTaskIncrementTick+0x1e>
 80098b8:	240295e4 	.word	0x240295e4
 80098bc:	24029664 	.word	0x24029664
 80098c0:	24029174 	.word	0x24029174
 80098c4:	24029620 	.word	0x24029620
 80098c8:	24029668 	.word	0x24029668
 80098cc:	24029178 	.word	0x24029178
 80098d0:	2402961c 	.word	0x2402961c
 80098d4:	24029618 	.word	0x24029618
 80098d8:	2402917c 	.word	0x2402917c
 80098dc:	24029170 	.word	0x24029170
 80098e0:	240295ec 	.word	0x240295ec

080098e4 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80098e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80098ea:	f000 fd73 	bl	800a3d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80098ee:	4b36      	ldr	r3, [pc, #216]	; (80099c8 <xTaskResumeAll.part.0+0xe4>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	3a01      	subs	r2, #1
 80098f4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d155      	bne.n	80099a8 <xTaskResumeAll.part.0+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098fc:	4b33      	ldr	r3, [pc, #204]	; (80099cc <xTaskResumeAll.part.0+0xe8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d051      	beq.n	80099a8 <xTaskResumeAll.part.0+0xc4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009904:	4d32      	ldr	r5, [pc, #200]	; (80099d0 <xTaskResumeAll.part.0+0xec>)
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d05a      	beq.n	80099c2 <xTaskResumeAll.part.0+0xde>
 800990c:	4e31      	ldr	r6, [pc, #196]	; (80099d4 <xTaskResumeAll.part.0+0xf0>)
						xYieldPending = pdTRUE;
 800990e:	f04f 0a01 	mov.w	sl, #1
 8009912:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80099e8 <xTaskResumeAll.part.0+0x104>
 8009916:	4f30      	ldr	r7, [pc, #192]	; (80099d8 <xTaskResumeAll.part.0+0xf4>)
 8009918:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80099ec <xTaskResumeAll.part.0+0x108>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991c:	68eb      	ldr	r3, [r5, #12]
 800991e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009920:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009924:	f104 0018 	add.w	r0, r4, #24
 8009928:	f7fe fe82 	bl	8008630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800992c:	4658      	mov	r0, fp
 800992e:	f7fe fe7f 	bl	8008630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009934:	6832      	ldr	r2, [r6, #0]
 8009936:	4659      	mov	r1, fp
 8009938:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800993c:	4293      	cmp	r3, r2
 800993e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8009942:	d900      	bls.n	8009946 <xTaskResumeAll.part.0+0x62>
 8009944:	6033      	str	r3, [r6, #0]
 8009946:	f7fe fe4b 	bl	80085e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	429a      	cmp	r2, r3
 8009952:	d301      	bcc.n	8009958 <xTaskResumeAll.part.0+0x74>
						xYieldPending = pdTRUE;
 8009954:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1de      	bne.n	800991c <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800995e:	4b1f      	ldr	r3, [pc, #124]	; (80099dc <xTaskResumeAll.part.0+0xf8>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	6812      	ldr	r2, [r2, #0]
 8009964:	b342      	cbz	r2, 80099b8 <xTaskResumeAll.part.0+0xd4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009966:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009968:	4b1d      	ldr	r3, [pc, #116]	; (80099e0 <xTaskResumeAll.part.0+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800996c:	68d2      	ldr	r2, [r2, #12]
 800996e:	6852      	ldr	r2, [r2, #4]
 8009970:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009972:	4e1c      	ldr	r6, [pc, #112]	; (80099e4 <xTaskResumeAll.part.0+0x100>)
 8009974:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009976:	b144      	cbz	r4, 800998a <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8009978:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800997a:	f7ff fefb 	bl	8009774 <xTaskIncrementTick>
 800997e:	b108      	cbz	r0, 8009984 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 8009980:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009984:	3c01      	subs	r4, #1
 8009986:	d1f8      	bne.n	800997a <xTaskResumeAll.part.0+0x96>
						xPendedTicks = 0;
 8009988:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800998a:	f8d9 3000 	ldr.w	r3, [r9]
 800998e:	b15b      	cbz	r3, 80099a8 <xTaskResumeAll.part.0+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8009990:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009998:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80099a4:	2001      	movs	r0, #1
 80099a6:	e000      	b.n	80099aa <xTaskResumeAll.part.0+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 80099a8:	2000      	movs	r0, #0
 80099aa:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80099ac:	f000 fd34 	bl	800a418 <vPortExitCritical>
}
 80099b0:	9801      	ldr	r0, [sp, #4]
 80099b2:	b003      	add	sp, #12
 80099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <xTaskResumeAll.part.0+0xfc>)
 80099ba:	f04f 32ff 	mov.w	r2, #4294967295
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	e7d7      	b.n	8009972 <xTaskResumeAll.part.0+0x8e>
 80099c2:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80099ec <xTaskResumeAll.part.0+0x108>
 80099c6:	e7d4      	b.n	8009972 <xTaskResumeAll.part.0+0x8e>
 80099c8:	240295e4 	.word	0x240295e4
 80099cc:	240295dc 	.word	0x240295dc
 80099d0:	24029624 	.word	0x24029624
 80099d4:	240295ec 	.word	0x240295ec
 80099d8:	24029170 	.word	0x24029170
 80099dc:	24029174 	.word	0x24029174
 80099e0:	24029618 	.word	0x24029618
 80099e4:	24029620 	.word	0x24029620
 80099e8:	2402917c 	.word	0x2402917c
 80099ec:	24029668 	.word	0x24029668

080099f0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <xTaskResumeAll+0x1c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	b943      	cbnz	r3, 8009a08 <xTaskResumeAll+0x18>
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	e7fe      	b.n	8009a06 <xTaskResumeAll+0x16>
 8009a08:	f7ff bf6c 	b.w	80098e4 <xTaskResumeAll.part.0>
 8009a0c:	240295e4 	.word	0x240295e4

08009a10 <vTaskDelay>:
	{
 8009a10:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a12:	b950      	cbnz	r0, 8009a2a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009a14:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	f3bf 8f6f 	isb	sy
	}
 8009a28:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009a2a:	4c10      	ldr	r4, [pc, #64]	; (8009a6c <vTaskDelay+0x5c>)
 8009a2c:	6821      	ldr	r1, [r4, #0]
 8009a2e:	b141      	cbz	r1, 8009a42 <vTaskDelay+0x32>
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	e7fe      	b.n	8009a40 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a48:	f7ff fcd2 	bl	80093f0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	b943      	cbnz	r3, 8009a62 <vTaskDelay+0x52>
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	e7fe      	b.n	8009a60 <vTaskDelay+0x50>
 8009a62:	f7ff ff3f 	bl	80098e4 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d0d4      	beq.n	8009a14 <vTaskDelay+0x4>
	}
 8009a6a:	bd10      	pop	{r4, pc}
 8009a6c:	240295e4 	.word	0x240295e4

08009a70 <vTaskSwitchContext>:
{
 8009a70:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <vTaskSwitchContext+0x94>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	b11b      	cbz	r3, 8009a80 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009a78:	4b23      	ldr	r3, [pc, #140]	; (8009b08 <vTaskSwitchContext+0x98>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]
}
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8009a80:	4c22      	ldr	r4, [pc, #136]	; (8009b0c <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8009a82:	4a21      	ldr	r2, [pc, #132]	; (8009b08 <vTaskSwitchContext+0x98>)
 8009a84:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	6812      	ldr	r2, [r2, #0]
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d92e      	bls.n	8009af0 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a92:	4d1f      	ldr	r5, [pc, #124]	; (8009b10 <vTaskSwitchContext+0xa0>)
 8009a94:	491f      	ldr	r1, [pc, #124]	; (8009b14 <vTaskSwitchContext+0xa4>)
 8009a96:	682b      	ldr	r3, [r5, #0]
 8009a98:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009a9c:	0098      	lsls	r0, r3, #2
 8009a9e:	0092      	lsls	r2, r2, #2
 8009aa0:	588a      	ldr	r2, [r1, r2]
 8009aa2:	b942      	cbnz	r2, 8009ab6 <vTaskSwitchContext+0x46>
 8009aa4:	b1db      	cbz	r3, 8009ade <vTaskSwitchContext+0x6e>
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009aac:	0098      	lsls	r0, r3, #2
 8009aae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009ab2:	2a00      	cmp	r2, #0
 8009ab4:	d0f6      	beq.n	8009aa4 <vTaskSwitchContext+0x34>
 8009ab6:	4418      	add	r0, r3
 8009ab8:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8009abc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ac0:	4662      	mov	r2, ip
 8009ac2:	6849      	ldr	r1, [r1, #4]
 8009ac4:	3208      	adds	r2, #8
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	f8cc 1004 	str.w	r1, [ip, #4]
 8009acc:	d016      	beq.n	8009afc <vTaskSwitchContext+0x8c>
 8009ace:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ad0:	4a11      	ldr	r2, [pc, #68]	; (8009b18 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad2:	6021      	str	r1, [r4, #0]
 8009ad4:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	3354      	adds	r3, #84	; 0x54
 8009ada:	6013      	str	r3, [r2, #0]
}
 8009adc:	bd38      	pop	{r3, r4, r5, pc}
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aee:	e7fe      	b.n	8009aee <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	6821      	ldr	r1, [r4, #0]
 8009af4:	3134      	adds	r1, #52	; 0x34
 8009af6:	f7f7 fef3 	bl	80018e0 <vApplicationStackOverflowHook>
 8009afa:	e7ca      	b.n	8009a92 <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afc:	6849      	ldr	r1, [r1, #4]
 8009afe:	f8cc 1004 	str.w	r1, [ip, #4]
 8009b02:	e7e4      	b.n	8009ace <vTaskSwitchContext+0x5e>
 8009b04:	240295e4 	.word	0x240295e4
 8009b08:	24029668 	.word	0x24029668
 8009b0c:	24029170 	.word	0x24029170
 8009b10:	240295ec 	.word	0x240295ec
 8009b14:	2402917c 	.word	0x2402917c
 8009b18:	2400024c 	.word	0x2400024c

08009b1c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009b1c:	b160      	cbz	r0, 8009b38 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <vTaskPlaceOnEventList+0x30>)
{
 8009b20:	b510      	push	{r4, lr}
 8009b22:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b24:	6819      	ldr	r1, [r3, #0]
 8009b26:	3118      	adds	r1, #24
 8009b28:	f7fe fd6a 	bl	8008600 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	2101      	movs	r1, #1
}
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b34:	f7ff bc5c 	b.w	80093f0 <prvAddCurrentTaskToDelayedList>
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009b48:	e7fe      	b.n	8009b48 <vTaskPlaceOnEventList+0x2c>
 8009b4a:	bf00      	nop
 8009b4c:	24029170 	.word	0x24029170

08009b50 <vTaskPlaceOnEventListRestricted>:
	{
 8009b50:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009b52:	b180      	cbz	r0, 8009b76 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b54:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <vTaskPlaceOnEventListRestricted+0x38>)
 8009b56:	460d      	mov	r5, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	6819      	ldr	r1, [r3, #0]
 8009b5c:	3118      	adds	r1, #24
 8009b5e:	f7fe fd3f 	bl	80085e0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009b62:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b64:	4621      	mov	r1, r4
 8009b66:	bf0c      	ite	eq
 8009b68:	4628      	moveq	r0, r5
 8009b6a:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8009b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b72:	f7ff bc3d 	b.w	80093f0 <prvAddCurrentTaskToDelayedList>
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8009b86:	e7fe      	b.n	8009b86 <vTaskPlaceOnEventListRestricted+0x36>
 8009b88:	24029170 	.word	0x24029170

08009b8c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8c:	68c3      	ldr	r3, [r0, #12]
{
 8009b8e:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b90:	68dc      	ldr	r4, [r3, #12]
{
 8009b92:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8009b94:	b35c      	cbz	r4, 8009bee <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b96:	f104 0518 	add.w	r5, r4, #24
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7fe fd48 	bl	8008630 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba0:	4b19      	ldr	r3, [pc, #100]	; (8009c08 <xTaskRemoveFromEventList+0x7c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	b17b      	cbz	r3, 8009bc6 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4818      	ldr	r0, [pc, #96]	; (8009c0c <xTaskRemoveFromEventList+0x80>)
 8009baa:	f7fe fd19 	bl	80085e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bae:	4b18      	ldr	r3, [pc, #96]	; (8009c10 <xTaskRemoveFromEventList+0x84>)
 8009bb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d922      	bls.n	8009c00 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8009bbe:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8009bc0:	6013      	str	r3, [r2, #0]
}
 8009bc2:	b003      	add	sp, #12
 8009bc4:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bc6:	1d21      	adds	r1, r4, #4
 8009bc8:	4608      	mov	r0, r1
 8009bca:	9101      	str	r1, [sp, #4]
 8009bcc:	f7fe fd30 	bl	8008630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bd0:	4a11      	ldr	r2, [pc, #68]	; (8009c18 <xTaskRemoveFromEventList+0x8c>)
 8009bd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009bd4:	6810      	ldr	r0, [r2, #0]
 8009bd6:	9901      	ldr	r1, [sp, #4]
 8009bd8:	4283      	cmp	r3, r0
 8009bda:	d900      	bls.n	8009bde <xTaskRemoveFromEventList+0x52>
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009be2:	480e      	ldr	r0, [pc, #56]	; (8009c1c <xTaskRemoveFromEventList+0x90>)
 8009be4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009be8:	f7fe fcfa 	bl	80085e0 <vListInsertEnd>
 8009bec:	e7df      	b.n	8009bae <xTaskRemoveFromEventList+0x22>
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009bfe:	e7fe      	b.n	8009bfe <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8009c00:	2000      	movs	r0, #0
}
 8009c02:	b003      	add	sp, #12
 8009c04:	bd30      	pop	{r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	240295e4 	.word	0x240295e4
 8009c0c:	24029624 	.word	0x24029624
 8009c10:	24029170 	.word	0x24029170
 8009c14:	24029668 	.word	0x24029668
 8009c18:	240295ec 	.word	0x240295ec
 8009c1c:	2402917c 	.word	0x2402917c

08009c20 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c20:	4a03      	ldr	r2, [pc, #12]	; (8009c30 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c22:	4b04      	ldr	r3, [pc, #16]	; (8009c34 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c24:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	e9c0 2300 	strd	r2, r3, [r0]
}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	2402961c 	.word	0x2402961c
 8009c34:	24029664 	.word	0x24029664

08009c38 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8009c38:	b328      	cbz	r0, 8009c86 <xTaskCheckForTimeOut+0x4e>
{
 8009c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8009c40:	b1c1      	cbz	r1, 8009c74 <xTaskCheckForTimeOut+0x3c>
 8009c42:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009c44:	f000 fbc6 	bl	800a3d4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8009c48:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8009c4a:	4a1d      	ldr	r2, [pc, #116]	; (8009cc0 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8009c4c:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8009c4e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009c50:	d030      	beq.n	8009cb4 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c52:	f8df c070 	ldr.w	ip, [pc, #112]	; 8009cc4 <xTaskCheckForTimeOut+0x8c>
 8009c56:	6826      	ldr	r6, [r4, #0]
 8009c58:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c5c:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c5e:	42be      	cmp	r6, r7
 8009c60:	d01a      	beq.n	8009c98 <xTaskCheckForTimeOut+0x60>
 8009c62:	4288      	cmp	r0, r1
 8009c64:	d818      	bhi.n	8009c98 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8009c66:	2001      	movs	r0, #1
 8009c68:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8009c6a:	f000 fbd5 	bl	800a418 <vPortExitCritical>
}
 8009c6e:	9801      	ldr	r0, [sp, #4]
 8009c70:	b003      	add	sp, #12
 8009c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009c84:	e7fe      	b.n	8009c84 <xTaskCheckForTimeOut+0x4c>
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009c96:	e7fe      	b.n	8009c96 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c98:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c9c:	4573      	cmp	r3, lr
 8009c9e:	d90b      	bls.n	8009cb8 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8009ca0:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ca2:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ca6:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8009ca8:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8009caa:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8009cac:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cae:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8009cb2:	e7d9      	b.n	8009c68 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e7d7      	b.n	8009c68 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8009cb8:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8009cba:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8009cbc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8009cbe:	e7d3      	b.n	8009c68 <xTaskCheckForTimeOut+0x30>
 8009cc0:	24029664 	.word	0x24029664
 8009cc4:	2402961c 	.word	0x2402961c

08009cc8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009cc8:	4b01      	ldr	r3, [pc, #4]	; (8009cd0 <vTaskMissedYield+0x8>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
}
 8009cce:	4770      	bx	lr
 8009cd0:	24029668 	.word	0x24029668

08009cd4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009cd4:	4b01      	ldr	r3, [pc, #4]	; (8009cdc <xTaskGetCurrentTaskHandle+0x8>)
 8009cd6:	6818      	ldr	r0, [r3, #0]
	}
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	24029170 	.word	0x24029170

08009ce0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <xTaskGetSchedulerState+0x18>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	b133      	cbz	r3, 8009cf4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <xTaskGetSchedulerState+0x1c>)
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	fab0 f080 	clz	r0, r0
 8009cee:	0940      	lsrs	r0, r0, #5
 8009cf0:	0040      	lsls	r0, r0, #1
 8009cf2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cf4:	2001      	movs	r0, #1
	}
 8009cf6:	4770      	bx	lr
 8009cf8:	24029638 	.word	0x24029638
 8009cfc:	240295e4 	.word	0x240295e4

08009d00 <xTaskPriorityInherit>:
	{
 8009d00:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8009d02:	4604      	mov	r4, r0
	{
 8009d04:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8009d06:	b1c8      	cbz	r0, 8009d3c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d08:	4d1d      	ldr	r5, [pc, #116]	; (8009d80 <xTaskPriorityInherit+0x80>)
 8009d0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009d0c:	682a      	ldr	r2, [r5, #0]
 8009d0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d215      	bcs.n	8009d40 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d14:	6982      	ldr	r2, [r0, #24]
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	db04      	blt.n	8009d24 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d1a:	682a      	ldr	r2, [r5, #0]
 8009d1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d1e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009d22:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d24:	4e17      	ldr	r6, [pc, #92]	; (8009d84 <xTaskPriorityInherit+0x84>)
 8009d26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d2a:	6962      	ldr	r2, [r4, #20]
 8009d2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d00e      	beq.n	8009d52 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d34:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8009d36:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8009d3c:	b002      	add	sp, #8
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d46:	4298      	cmp	r0, r3
 8009d48:	bf2c      	ite	cs
 8009d4a:	2000      	movcs	r0, #0
 8009d4c:	2001      	movcc	r0, #1
	}
 8009d4e:	b002      	add	sp, #8
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d52:	1d21      	adds	r1, r4, #4
 8009d54:	4608      	mov	r0, r1
 8009d56:	9101      	str	r1, [sp, #4]
 8009d58:	f7fe fc6a 	bl	8008630 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d5c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d5e:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d60:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	9901      	ldr	r1, [sp, #4]
 8009d66:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d68:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d6a:	d900      	bls.n	8009d6e <xTaskPriorityInherit+0x6e>
 8009d6c:	6018      	str	r0, [r3, #0]
 8009d6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009d72:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8009d76:	f7fe fc33 	bl	80085e0 <vListInsertEnd>
				xReturn = pdTRUE;
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	e7de      	b.n	8009d3c <xTaskPriorityInherit+0x3c>
 8009d7e:	bf00      	nop
 8009d80:	24029170 	.word	0x24029170
 8009d84:	2402917c 	.word	0x2402917c
 8009d88:	240295ec 	.word	0x240295ec

08009d8c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009d8c:	b318      	cbz	r0, 8009dd6 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 8009d8e:	4b1f      	ldr	r3, [pc, #124]	; (8009e0c <xTaskPriorityDisinherit+0x80>)
	{
 8009d90:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8009d92:	681c      	ldr	r4, [r3, #0]
	{
 8009d94:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8009d96:	4284      	cmp	r4, r0
 8009d98:	d008      	beq.n	8009dac <xTaskPriorityDisinherit+0x20>
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	e7fe      	b.n	8009daa <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009dae:	b14b      	cbz	r3, 8009dc4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009db0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009db2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009db4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009db6:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009db8:	4291      	cmp	r1, r2
 8009dba:	d000      	beq.n	8009dbe <xTaskPriorityDisinherit+0x32>
 8009dbc:	b16b      	cbz	r3, 8009dda <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8009dbe:	2000      	movs	r0, #0
	}
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd10      	pop	{r4, pc}
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8009dd4:	e7fe      	b.n	8009dd4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8009dd6:	2000      	movs	r0, #0
	}
 8009dd8:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dda:	1d21      	adds	r1, r4, #4
 8009ddc:	4608      	mov	r0, r1
 8009dde:	9101      	str	r1, [sp, #4]
 8009de0:	f7fe fc26 	bl	8008630 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009de4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de8:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8009dec:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009dee:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4290      	cmp	r0, r2
 8009df6:	d900      	bls.n	8009dfa <xTaskPriorityDisinherit+0x6e>
 8009df8:	6018      	str	r0, [r3, #0]
 8009dfa:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <xTaskPriorityDisinherit+0x88>)
 8009dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e04:	f7fe fbec 	bl	80085e0 <vListInsertEnd>
					xReturn = pdTRUE;
 8009e08:	2001      	movs	r0, #1
		return xReturn;
 8009e0a:	e7d9      	b.n	8009dc0 <xTaskPriorityDisinherit+0x34>
 8009e0c:	24029170 	.word	0x24029170
 8009e10:	240295ec 	.word	0x240295ec
 8009e14:	2402917c 	.word	0x2402917c

08009e18 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	d040      	beq.n	8009e9e <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8009e1e:	b530      	push	{r4, r5, lr}
 8009e20:	4604      	mov	r4, r0
 8009e22:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8009e24:	b153      	cbz	r3, 8009e3c <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e2a:	4281      	cmp	r1, r0
 8009e2c:	bf38      	it	cc
 8009e2e:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8009e34:	428a      	cmp	r2, r1
 8009e36:	d10a      	bne.n	8009e4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8009e38:	b003      	add	sp, #12
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8009e4c:	e7fe      	b.n	8009e4c <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8009e4e:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	d024      	beq.n	8009ea0 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e56:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e58:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	db02      	blt.n	8009e64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8009e62:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e64:	4d14      	ldr	r5, [pc, #80]	; (8009eb8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8009e66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009e6a:	6961      	ldr	r1, [r4, #20]
 8009e6c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8009e70:	4299      	cmp	r1, r3
 8009e72:	d1e1      	bne.n	8009e38 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e74:	1d21      	adds	r1, r4, #4
 8009e76:	4608      	mov	r0, r1
 8009e78:	9101      	str	r1, [sp, #4]
 8009e7a:	f7fe fbd9 	bl	8008630 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8009e80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	9901      	ldr	r1, [sp, #4]
 8009e86:	4290      	cmp	r0, r2
 8009e88:	d900      	bls.n	8009e8c <vTaskPriorityDisinheritAfterTimeout+0x74>
 8009e8a:	6018      	str	r0, [r3, #0]
 8009e8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e90:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8009e94:	b003      	add	sp, #12
 8009e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8009e9a:	f7fe bba1 	b.w	80085e0 <vListInsertEnd>
 8009e9e:	4770      	bx	lr
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8009eb0:	e7fe      	b.n	8009eb0 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8009eb2:	bf00      	nop
 8009eb4:	24029170 	.word	0x24029170
 8009eb8:	2402917c 	.word	0x2402917c
 8009ebc:	240295ec 	.word	0x240295ec

08009ec0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009ec0:	4b04      	ldr	r3, [pc, #16]	; (8009ed4 <pvTaskIncrementMutexHeldCount+0x14>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	b11a      	cbz	r2, 8009ece <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009ec6:	6819      	ldr	r1, [r3, #0]
 8009ec8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009eca:	3201      	adds	r2, #1
 8009ecc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8009ece:	6818      	ldr	r0, [r3, #0]
	}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	24029170 	.word	0x24029170

08009ed8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009eda:	4c12      	ldr	r4, [pc, #72]	; (8009f24 <prvCheckForValidListAndQueue+0x4c>)
{
 8009edc:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8009ede:	f000 fa79 	bl	800a3d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009ee2:	6825      	ldr	r5, [r4, #0]
 8009ee4:	b125      	cbz	r5, 8009ef0 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009ee6:	b003      	add	sp, #12
 8009ee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009eec:	f000 ba94 	b.w	800a418 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8009ef0:	4f0d      	ldr	r7, [pc, #52]	; (8009f28 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8009ef2:	4e0e      	ldr	r6, [pc, #56]	; (8009f2c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f7fe fb63 	bl	80085c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7fe fb60 	bl	80085c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f00:	4a0b      	ldr	r2, [pc, #44]	; (8009f30 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f02:	9500      	str	r5, [sp, #0]
 8009f04:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009f06:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f08:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009f0a:	4a0a      	ldr	r2, [pc, #40]	; (8009f34 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8009f0e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f10:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <prvCheckForValidListAndQueue+0x64>)
 8009f12:	f7fe fc6f 	bl	80087f4 <xQueueGenericCreateStatic>
 8009f16:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d0e4      	beq.n	8009ee6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f1c:	4908      	ldr	r1, [pc, #32]	; (8009f40 <prvCheckForValidListAndQueue+0x68>)
 8009f1e:	f7ff f989 	bl	8009234 <vQueueAddToRegistry>
 8009f22:	e7e0      	b.n	8009ee6 <prvCheckForValidListAndQueue+0xe>
 8009f24:	24029790 	.word	0x24029790
 8009f28:	24029714 	.word	0x24029714
 8009f2c:	24029728 	.word	0x24029728
 8009f30:	2402966c 	.word	0x2402966c
 8009f34:	24029670 	.word	0x24029670
 8009f38:	24029740 	.word	0x24029740
 8009f3c:	24029674 	.word	0x24029674
 8009f40:	0801801c 	.word	0x0801801c

08009f44 <xTimerCreateTimerTask>:
{
 8009f44:	b530      	push	{r4, r5, lr}
 8009f46:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8009f48:	f7ff ffc6 	bl	8009ed8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009f4c:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <xTimerCreateTimerTask+0x54>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	b1cb      	cbz	r3, 8009f86 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f52:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f54:	aa07      	add	r2, sp, #28
 8009f56:	a906      	add	r1, sp, #24
 8009f58:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f5a:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f5c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f60:	f7fe fb1e 	bl	80085a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f64:	4623      	mov	r3, r4
 8009f66:	9a07      	ldr	r2, [sp, #28]
 8009f68:	9500      	str	r5, [sp, #0]
 8009f6a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8009f6e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8009f72:	490a      	ldr	r1, [pc, #40]	; (8009f9c <xTimerCreateTimerTask+0x58>)
 8009f74:	480a      	ldr	r0, [pc, #40]	; (8009fa0 <xTimerCreateTimerTask+0x5c>)
 8009f76:	f7ff fb2b 	bl	80095d0 <xTaskCreateStatic>
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <xTimerCreateTimerTask+0x60>)
 8009f7c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009f7e:	b110      	cbz	r0, 8009f86 <xTimerCreateTimerTask+0x42>
}
 8009f80:	2001      	movs	r0, #1
 8009f82:	b009      	add	sp, #36	; 0x24
 8009f84:	bd30      	pop	{r4, r5, pc}
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009f96:	e7fe      	b.n	8009f96 <xTimerCreateTimerTask+0x52>
 8009f98:	24029790 	.word	0x24029790
 8009f9c:	08018024 	.word	0x08018024
 8009fa0:	0800a095 	.word	0x0800a095
 8009fa4:	24029794 	.word	0x24029794

08009fa8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009fa8:	b1c8      	cbz	r0, 8009fde <xTimerGenericCommand+0x36>
{
 8009faa:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8009fac:	4e17      	ldr	r6, [pc, #92]	; (800a00c <xTimerGenericCommand+0x64>)
{
 8009fae:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8009fb0:	6834      	ldr	r4, [r6, #0]
 8009fb2:	b18c      	cbz	r4, 8009fd8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fb4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009fb6:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8009fb8:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fbc:	dc18      	bgt.n	8009ff0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fbe:	f7ff fe8f 	bl	8009ce0 <xTaskGetSchedulerState>
 8009fc2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fc4:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fc8:	d01a      	beq.n	800a000 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fca:	4669      	mov	r1, sp
 8009fcc:	461a      	mov	r2, r3
 8009fce:	6830      	ldr	r0, [r6, #0]
 8009fd0:	f7fe fccc 	bl	800896c <xQueueGenericSend>
}
 8009fd4:	b004      	add	sp, #16
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8009fd8:	4620      	mov	r0, r4
}
 8009fda:	b004      	add	sp, #16
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009fee:	e7fe      	b.n	8009fee <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4669      	mov	r1, sp
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f7fe fdf0 	bl	8008bdc <xQueueGenericSendFromISR>
}
 8009ffc:	b004      	add	sp, #16
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a000:	9a08      	ldr	r2, [sp, #32]
 800a002:	4669      	mov	r1, sp
 800a004:	6830      	ldr	r0, [r6, #0]
 800a006:	f7fe fcb1 	bl	800896c <xQueueGenericSend>
 800a00a:	e7e6      	b.n	8009fda <xTimerGenericCommand+0x32>
 800a00c:	24029790 	.word	0x24029790

0800a010 <prvSwitchTimerLists>:
{
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	4e1d      	ldr	r6, [pc, #116]	; (800a08c <prvSwitchTimerLists+0x7c>)
 800a016:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a018:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a01c:	e00d      	b.n	800a03a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a01e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a020:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a022:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a024:	1d25      	adds	r5, r4, #4
 800a026:	4628      	mov	r0, r5
 800a028:	f7fe fb02 	bl	8008630 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a02c:	6a23      	ldr	r3, [r4, #32]
 800a02e:	4620      	mov	r0, r4
 800a030:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a032:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a036:	075b      	lsls	r3, r3, #29
 800a038:	d40a      	bmi.n	800a050 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a03a:	6833      	ldr	r3, [r6, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	2a00      	cmp	r2, #0
 800a040:	d1ed      	bne.n	800a01e <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 800a042:	4a13      	ldr	r2, [pc, #76]	; (800a090 <prvSwitchTimerLists+0x80>)
 800a044:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a046:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800a048:	6031      	str	r1, [r6, #0]
}
 800a04a:	b002      	add	sp, #8
 800a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a050:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a052:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a054:	2300      	movs	r3, #0
 800a056:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a058:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a05a:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 800a05c:	42af      	cmp	r7, r5
 800a05e:	d205      	bcs.n	800a06c <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a060:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a062:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a064:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a066:	f7fe facb 	bl	8008600 <vListInsert>
 800a06a:	e7e6      	b.n	800a03a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a06c:	4619      	mov	r1, r3
 800a06e:	f8cd 8000 	str.w	r8, [sp]
 800a072:	f7ff ff99 	bl	8009fa8 <xTimerGenericCommand>
				configASSERT( xResult );
 800a076:	2800      	cmp	r0, #0
 800a078:	d1df      	bne.n	800a03a <prvSwitchTimerLists+0x2a>
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	e7fe      	b.n	800a08a <prvSwitchTimerLists+0x7a>
 800a08c:	2402966c 	.word	0x2402966c
 800a090:	24029670 	.word	0x24029670

0800a094 <prvTimerTask>:
{
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	4e96      	ldr	r6, [pc, #600]	; (800a2f4 <prvTimerTask+0x260>)
 800a09a:	b087      	sub	sp, #28
 800a09c:	4d96      	ldr	r5, [pc, #600]	; (800a2f8 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 800a09e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 800a0a2:	4c96      	ldr	r4, [pc, #600]	; (800a2fc <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0a4:	6833      	ldr	r3, [r6, #0]
 800a0a6:	681f      	ldr	r7, [r3, #0]
 800a0a8:	2f00      	cmp	r7, #0
 800a0aa:	f000 80a9 	beq.w	800a200 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800a0b2:	f7ff fb49 	bl	8009748 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800a0b6:	f7ff fb4f 	bl	8009758 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a0ba:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800a0bc:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800a0be:	4290      	cmp	r0, r2
 800a0c0:	f0c0 80a6 	bcc.w	800a210 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0c4:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 800a0c6:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0c8:	f200 80c7 	bhi.w	800a25a <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 800a0cc:	f7ff fc90 	bl	80099f0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d0:	6832      	ldr	r2, [r6, #0]
 800a0d2:	68d2      	ldr	r2, [r2, #12]
 800a0d4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0d8:	f10b 0804 	add.w	r8, fp, #4
 800a0dc:	4640      	mov	r0, r8
 800a0de:	f7fe faa7 	bl	8008630 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0e2:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 800a0e6:	0743      	lsls	r3, r0, #29
 800a0e8:	f100 80c6 	bmi.w	800a278 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0ec:	f020 0001 	bic.w	r0, r0, #1
 800a0f0:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0f4:	f8db 3020 	ldr.w	r3, [fp, #32]
 800a0f8:	4658      	mov	r0, fp
 800a0fa:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	a902      	add	r1, sp, #8
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	f7fe fe2d 	bl	8008d60 <xQueueReceive>
 800a106:	2800      	cmp	r0, #0
 800a108:	d0cc      	beq.n	800a0a4 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	db6e      	blt.n	800a1ee <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a110:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	b113      	cbz	r3, 800a11c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a116:	1d38      	adds	r0, r7, #4
 800a118:	f7fe fa8a 	bl	8008630 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800a11c:	f7ff fb1c 	bl	8009758 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a120:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800a122:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800a124:	4298      	cmp	r0, r3
 800a126:	d37a      	bcc.n	800a21e <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 800a128:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800a12a:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 800a12e:	2b09      	cmp	r3, #9
 800a130:	d8e4      	bhi.n	800a0fc <prvTimerTask+0x68>
 800a132:	e8df f003 	tbb	[pc, r3]
 800a136:	0505      	.short	0x0505
 800a138:	53364c05 	.word	0x53364c05
 800a13c:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a140:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a144:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a146:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a14a:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a14c:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a14e:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a152:	185a      	adds	r2, r3, r1
 800a154:	bf2c      	ite	cs
 800a156:	2001      	movcs	r0, #1
 800a158:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 800a15a:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a15c:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800a15e:	d87e      	bhi.n	800a25e <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a160:	eba8 0303 	sub.w	r3, r8, r3
 800a164:	4299      	cmp	r1, r3
 800a166:	f200 80b0 	bhi.w	800a2ca <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	4638      	mov	r0, r7
 800a16e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a170:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a174:	0759      	lsls	r1, r3, #29
 800a176:	d5c1      	bpl.n	800a0fc <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a178:	2200      	movs	r2, #0
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	4638      	mov	r0, r7
 800a17e:	9200      	str	r2, [sp, #0]
 800a180:	9a03      	ldr	r2, [sp, #12]
 800a182:	441a      	add	r2, r3
 800a184:	2300      	movs	r3, #0
 800a186:	4619      	mov	r1, r3
 800a188:	f7ff ff0e 	bl	8009fa8 <xTimerGenericCommand>
							configASSERT( xResult );
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1b5      	bne.n	800a0fc <prvTimerTask+0x68>
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	e7fe      	b.n	800a1a0 <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1a2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1a6:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1ac:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1ae:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 8095 	beq.w	800a2e2 <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1b8:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1ba:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1bc:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800a1be:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1c0:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800a1c2:	d855      	bhi.n	800a270 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1c4:	4b4e      	ldr	r3, [pc, #312]	; (800a300 <prvTimerTask+0x26c>)
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	f7fe fa1a 	bl	8008600 <vListInsert>
	return xProcessTimerNow;
 800a1cc:	e796      	b.n	800a0fc <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1d2:	f023 0301 	bic.w	r3, r3, #1
 800a1d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 800a1da:	e78f      	b.n	800a0fc <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1e0:	079a      	lsls	r2, r3, #30
 800a1e2:	d569      	bpl.n	800a2b8 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800a1ec:	e786      	b.n	800a0fc <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1f4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f6ff af7f 	blt.w	800a0fc <prvTimerTask+0x68>
 800a1fe:	e787      	b.n	800a110 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800a200:	f7ff faa2 	bl	8009748 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800a204:	f7ff faa8 	bl	8009758 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a208:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800a20a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800a20c:	4290      	cmp	r0, r2
 800a20e:	d209      	bcs.n	800a224 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 800a210:	f7ff fefe 	bl	800a010 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800a214:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 800a218:	f7ff fbea 	bl	80099f0 <xTaskResumeAll>
 800a21c:	e76e      	b.n	800a0fc <prvTimerTask+0x68>
		prvSwitchTimerLists();
 800a21e:	f7ff fef7 	bl	800a010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a222:	e781      	b.n	800a128 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a224:	4b36      	ldr	r3, [pc, #216]	; (800a300 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 800a226:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	fab2 f282 	clz	r2, r2
 800a232:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a234:	eba7 010a 	sub.w	r1, r7, sl
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	f7ff f829 	bl	8009290 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a23e:	f7ff fbd7 	bl	80099f0 <xTaskResumeAll>
 800a242:	2800      	cmp	r0, #0
 800a244:	f47f af5a 	bne.w	800a0fc <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 800a248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a24c:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	e750      	b.n	800a0fc <prvTimerTask+0x68>
 800a25a:	2200      	movs	r2, #0
 800a25c:	e7ea      	b.n	800a234 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a25e:	4543      	cmp	r3, r8
 800a260:	d901      	bls.n	800a266 <prvTimerTask+0x1d2>
 800a262:	2800      	cmp	r0, #0
 800a264:	d081      	beq.n	800a16a <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a266:	1d39      	adds	r1, r7, #4
 800a268:	6830      	ldr	r0, [r6, #0]
 800a26a:	f7fe f9c9 	bl	8008600 <vListInsert>
	return xProcessTimerNow;
 800a26e:	e745      	b.n	800a0fc <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a270:	6830      	ldr	r0, [r6, #0]
 800a272:	f7fe f9c5 	bl	8008600 <vListInsert>
 800a276:	e741      	b.n	800a0fc <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a278:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a27c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a280:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800a282:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a284:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800a288:	d31a      	bcc.n	800a2c0 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a28a:	ebaa 0307 	sub.w	r3, sl, r7
 800a28e:	429a      	cmp	r2, r3
 800a290:	d821      	bhi.n	800a2d6 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a292:	2300      	movs	r3, #0
 800a294:	463a      	mov	r2, r7
 800a296:	4658      	mov	r0, fp
 800a298:	4619      	mov	r1, r3
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	f7ff fe84 	bl	8009fa8 <xTimerGenericCommand>
			configASSERT( xResult );
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f47f af27 	bne.w	800a0f4 <prvTimerTask+0x60>
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	e7fe      	b.n	800a2b6 <prvTimerTask+0x222>
							vPortFree( pxTimer );
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f000 fa9d 	bl	800a7f8 <vPortFree>
 800a2be:	e71d      	b.n	800a0fc <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	6830      	ldr	r0, [r6, #0]
 800a2c4:	f7fe f99c 	bl	8008600 <vListInsert>
	return xProcessTimerNow;
 800a2c8:	e714      	b.n	800a0f4 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <prvTimerTask+0x26c>)
 800a2cc:	1d39      	adds	r1, r7, #4
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	f7fe f996 	bl	8008600 <vListInsert>
	return xProcessTimerNow;
 800a2d4:	e712      	b.n	800a0fc <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2d6:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <prvTimerTask+0x26c>)
 800a2d8:	4641      	mov	r1, r8
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	f7fe f990 	bl	8008600 <vListInsert>
	return xProcessTimerNow;
 800a2e0:	e708      	b.n	800a0f4 <prvTimerTask+0x60>
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2f2:	e7fe      	b.n	800a2f2 <prvTimerTask+0x25e>
 800a2f4:	2402966c 	.word	0x2402966c
 800a2f8:	2402973c 	.word	0x2402973c
 800a2fc:	24029790 	.word	0x24029790
 800a300:	24029670 	.word	0x24029670

0800a304 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a304:	4808      	ldr	r0, [pc, #32]	; (800a328 <prvPortStartFirstTask+0x24>)
 800a306:	6800      	ldr	r0, [r0, #0]
 800a308:	6800      	ldr	r0, [r0, #0]
 800a30a:	f380 8808 	msr	MSP, r0
 800a30e:	f04f 0000 	mov.w	r0, #0
 800a312:	f380 8814 	msr	CONTROL, r0
 800a316:	b662      	cpsie	i
 800a318:	b661      	cpsie	f
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	df00      	svc	0
 800a324:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a326:	0000      	.short	0x0000
 800a328:	e000ed08 	.word	0xe000ed08

0800a32c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a32c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a33c <vPortEnableVFP+0x10>
 800a330:	6801      	ldr	r1, [r0, #0]
 800a332:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a336:	6001      	str	r1, [r0, #0]
 800a338:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a33a:	0000      	.short	0x0000
 800a33c:	e000ed88 	.word	0xe000ed88

0800a340 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800a340:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <prvTaskExitError+0x3c>)
{
 800a342:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a344:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800a346:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 800a348:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a34a:	3301      	adds	r3, #1
 800a34c:	d008      	beq.n	800a360 <prvTaskExitError+0x20>
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	e7fe      	b.n	800a35e <prvTaskExitError+0x1e>
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a370:	9b01      	ldr	r3, [sp, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0fc      	beq.n	800a370 <prvTaskExitError+0x30>
}
 800a376:	b002      	add	sp, #8
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	2400007c 	.word	0x2400007c

0800a380 <pxPortInitialiseStack>:
{
 800a380:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a382:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a386:	4809      	ldr	r0, [pc, #36]	; (800a3ac <pxPortInitialiseStack+0x2c>)
{
 800a388:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a38a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a38e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a392:	f843 2c20 	str.w	r2, [r3, #-32]
}
 800a396:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a39a:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a39e:	f06f 0102 	mvn.w	r1, #2
}
 800a3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3a6:	f843 1c24 	str.w	r1, [r3, #-36]
}
 800a3aa:	4770      	bx	lr
 800a3ac:	0800a341 	.word	0x0800a341

0800a3b0 <SVC_Handler>:
	__asm volatile (
 800a3b0:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <pxCurrentTCBConst2>)
 800a3b2:	6819      	ldr	r1, [r3, #0]
 800a3b4:	6808      	ldr	r0, [r1, #0]
 800a3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ba:	f380 8809 	msr	PSP, r0
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f04f 0000 	mov.w	r0, #0
 800a3c6:	f380 8811 	msr	BASEPRI, r0
 800a3ca:	4770      	bx	lr
 800a3cc:	f3af 8000 	nop.w

0800a3d0 <pxCurrentTCBConst2>:
 800a3d0:	24029170 	.word	0x24029170

0800a3d4 <vPortEnterCritical>:
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a3e4:	4a0b      	ldr	r2, [pc, #44]	; (800a414 <vPortEnterCritical+0x40>)
 800a3e6:	6813      	ldr	r3, [r2, #0]
 800a3e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a3ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a3ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a3ee:	d000      	beq.n	800a3f2 <vPortEnterCritical+0x1e>
}
 800a3f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a3f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0f7      	beq.n	800a3f0 <vPortEnterCritical+0x1c>
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	e7fe      	b.n	800a410 <vPortEnterCritical+0x3c>
 800a412:	bf00      	nop
 800a414:	2400007c 	.word	0x2400007c

0800a418 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a418:	4a08      	ldr	r2, [pc, #32]	; (800a43c <vPortExitCritical+0x24>)
 800a41a:	6813      	ldr	r3, [r2, #0]
 800a41c:	b943      	cbnz	r3, 800a430 <vPortExitCritical+0x18>
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	e7fe      	b.n	800a42e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a430:	3b01      	subs	r3, #1
 800a432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a434:	b90b      	cbnz	r3, 800a43a <vPortExitCritical+0x22>
	__asm volatile
 800a436:	f383 8811 	msr	BASEPRI, r3
}
 800a43a:	4770      	bx	lr
 800a43c:	2400007c 	.word	0x2400007c

0800a440 <PendSV_Handler>:
	__asm volatile
 800a440:	f3ef 8009 	mrs	r0, PSP
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <pxCurrentTCBConst>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	f01e 0f10 	tst.w	lr, #16
 800a450:	bf08      	it	eq
 800a452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45a:	6010      	str	r0, [r2, #0]
 800a45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a460:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a464:	f380 8811 	msr	BASEPRI, r0
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f7ff fafe 	bl	8009a70 <vTaskSwitchContext>
 800a474:	f04f 0000 	mov.w	r0, #0
 800a478:	f380 8811 	msr	BASEPRI, r0
 800a47c:	bc09      	pop	{r0, r3}
 800a47e:	6819      	ldr	r1, [r3, #0]
 800a480:	6808      	ldr	r0, [r1, #0]
 800a482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a486:	f01e 0f10 	tst.w	lr, #16
 800a48a:	bf08      	it	eq
 800a48c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a490:	f380 8809 	msr	PSP, r0
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	f3af 8000 	nop.w

0800a4a0 <pxCurrentTCBConst>:
 800a4a0:	24029170 	.word	0x24029170

0800a4a4 <xPortSysTickHandler>:
{
 800a4a4:	b508      	push	{r3, lr}
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a4b6:	f7ff f95d 	bl	8009774 <xTaskIncrementTick>
 800a4ba:	b128      	cbz	r0, 800a4c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f383 8811 	msr	BASEPRI, r3
}
 800a4ce:	bd08      	pop	{r3, pc}

0800a4d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a4d4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4d6:	4806      	ldr	r0, [pc, #24]	; (800a4f0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4d8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4da:	4906      	ldr	r1, [pc, #24]	; (800a4f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4dc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4de:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4e0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4e2:	fba1 1303 	umull	r1, r3, r1, r3
 800a4e6:	099b      	lsrs	r3, r3, #6
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4ec:	6110      	str	r0, [r2, #16]
}
 800a4ee:	4770      	bx	lr
 800a4f0:	24000018 	.word	0x24000018
 800a4f4:	10624dd3 	.word	0x10624dd3

0800a4f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a4fc:	4a3d      	ldr	r2, [pc, #244]	; (800a5f4 <xPortStartScheduler+0xfc>)
 800a4fe:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800a502:	4291      	cmp	r1, r2
 800a504:	d041      	beq.n	800a58a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a506:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a50a:	4b3b      	ldr	r3, [pc, #236]	; (800a5f8 <xPortStartScheduler+0x100>)
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d033      	beq.n	800a578 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a510:	4b3a      	ldr	r3, [pc, #232]	; (800a5fc <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a512:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a514:	493a      	ldr	r1, [pc, #232]	; (800a600 <xPortStartScheduler+0x108>)
{
 800a516:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a518:	781a      	ldrb	r2, [r3, #0]
{
 800a51a:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a51c:	4c39      	ldr	r4, [pc, #228]	; (800a604 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a522:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a524:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a526:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a528:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a530:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a534:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a538:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a53c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a53e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a540:	d511      	bpl.n	800a566 <xPortStartScheduler+0x6e>
 800a542:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a544:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a548:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a54a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a554:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800a558:	0609      	lsls	r1, r1, #24
 800a55a:	d4f3      	bmi.n	800a544 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a55c:	2803      	cmp	r0, #3
 800a55e:	6020      	str	r0, [r4, #0]
 800a560:	f88d 3003 	strb.w	r3, [sp, #3]
 800a564:	d01a      	beq.n	800a59c <xPortStartScheduler+0xa4>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	e7fe      	b.n	800a576 <xPortStartScheduler+0x7e>
 800a578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a588:	e7fe      	b.n	800a588 <xPortStartScheduler+0x90>
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a59a:	e7fe      	b.n	800a59a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a59c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a59e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5a2:	4a16      	ldr	r2, [pc, #88]	; (800a5fc <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5a4:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5a8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5aa:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 800a5ac:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5b0:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 800a5b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5b8:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5bc:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 800a5c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5c4:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a5c8:	f7ff ff82 	bl	800a4d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a5cc:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <xPortStartScheduler+0x110>)
 800a5ce:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800a5d0:	f7ff feac 	bl	800a32c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5d4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 800a5d8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5dc:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 800a5e0:	f7ff fe90 	bl	800a304 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a5e4:	f7ff fa44 	bl	8009a70 <vTaskSwitchContext>
}
 800a5e8:	4620      	mov	r0, r4
	prvTaskExitError();
 800a5ea:	f7ff fea9 	bl	800a340 <prvTaskExitError>
}
 800a5ee:	b003      	add	sp, #12
 800a5f0:	bd30      	pop	{r4, r5, pc}
 800a5f2:	bf00      	nop
 800a5f4:	410fc271 	.word	0x410fc271
 800a5f8:	410fc270 	.word	0x410fc270
 800a5fc:	e000e400 	.word	0xe000e400
 800a600:	24029798 	.word	0x24029798
 800a604:	2402979c 	.word	0x2402979c
 800a608:	2400007c 	.word	0x2400007c

0800a60c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a60c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a610:	2b0f      	cmp	r3, #15
 800a612:	d90e      	bls.n	800a632 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a614:	4911      	ldr	r1, [pc, #68]	; (800a65c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a616:	4a12      	ldr	r2, [pc, #72]	; (800a660 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a618:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d908      	bls.n	800a632 <vPortValidateInterruptPriority+0x26>
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	e7fe      	b.n	800a630 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a636:	4a0b      	ldr	r2, [pc, #44]	; (800a664 <vPortValidateInterruptPriority+0x58>)
 800a638:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a642:	4293      	cmp	r3, r2
 800a644:	d908      	bls.n	800a658 <vPortValidateInterruptPriority+0x4c>
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	e7fe      	b.n	800a656 <vPortValidateInterruptPriority+0x4a>
	}
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	e000e3f0 	.word	0xe000e3f0
 800a660:	24029798 	.word	0x24029798
 800a664:	2402979c 	.word	0x2402979c

0800a668 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <prvInsertBlockIntoFreeList+0x5c>)
 800a66a:	461a      	mov	r2, r3
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4283      	cmp	r3, r0
 800a670:	d3fb      	bcc.n	800a66a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a672:	6851      	ldr	r1, [r2, #4]
 800a674:	eb02 0c01 	add.w	ip, r2, r1
 800a678:	4560      	cmp	r0, ip
 800a67a:	d01a      	beq.n	800a6b2 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a67c:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a67e:	eb00 0c01 	add.w	ip, r0, r1
 800a682:	4563      	cmp	r3, ip
 800a684:	d005      	beq.n	800a692 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a686:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a688:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a68a:	bf18      	it	ne
 800a68c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800a68e:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a690:	4610      	mov	r0, r2
{
 800a692:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a694:	4c0c      	ldr	r4, [pc, #48]	; (800a6c8 <prvInsertBlockIntoFreeList+0x60>)
 800a696:	6824      	ldr	r4, [r4, #0]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d003      	beq.n	800a6a4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a69c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6a0:	4421      	add	r1, r4
 800a6a2:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 800a6a4:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6a6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800a6a8:	d000      	beq.n	800a6ac <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6aa:	6010      	str	r0, [r2, #0]
	}
}
 800a6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6b2:	6840      	ldr	r0, [r0, #4]
 800a6b4:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6b6:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6b8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ba:	4283      	cmp	r3, r0
 800a6bc:	d0e8      	beq.n	800a690 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6be:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	24030fb8 	.word	0x24030fb8
 800a6c8:	240297a0 	.word	0x240297a0

0800a6cc <pvPortMalloc>:
{
 800a6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800a6d0:	4e42      	ldr	r6, [pc, #264]	; (800a7dc <pvPortMalloc+0x110>)
{
 800a6d2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a6d4:	f7ff f838 	bl	8009748 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a6d8:	6833      	ldr	r3, [r6, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d05a      	beq.n	800a794 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6de:	4b40      	ldr	r3, [pc, #256]	; (800a7e0 <pvPortMalloc+0x114>)
 800a6e0:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 800a6e2:	422c      	tst	r4, r5
 800a6e4:	d12e      	bne.n	800a744 <pvPortMalloc+0x78>
 800a6e6:	b36c      	cbz	r4, 800a744 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6e8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 800a6ea:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6ee:	d002      	beq.n	800a6f6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6f0:	f021 0107 	bic.w	r1, r1, #7
 800a6f4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6f6:	b329      	cbz	r1, 800a744 <pvPortMalloc+0x78>
 800a6f8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a7f4 <pvPortMalloc+0x128>
 800a6fc:	f8d8 7000 	ldr.w	r7, [r8]
 800a700:	428f      	cmp	r7, r1
 800a702:	d31f      	bcc.n	800a744 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800a704:	4837      	ldr	r0, [pc, #220]	; (800a7e4 <pvPortMalloc+0x118>)
 800a706:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a708:	e003      	b.n	800a712 <pvPortMalloc+0x46>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	b123      	cbz	r3, 800a718 <pvPortMalloc+0x4c>
 800a70e:	4620      	mov	r0, r4
 800a710:	461c      	mov	r4, r3
 800a712:	6862      	ldr	r2, [r4, #4]
 800a714:	428a      	cmp	r2, r1
 800a716:	d3f8      	bcc.n	800a70a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800a718:	6833      	ldr	r3, [r6, #0]
 800a71a:	42a3      	cmp	r3, r4
 800a71c:	d012      	beq.n	800a744 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a71e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a720:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a722:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a724:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a726:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a728:	2b10      	cmp	r3, #16
 800a72a:	d916      	bls.n	800a75a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a72c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a72e:	0742      	lsls	r2, r0, #29
 800a730:	d00e      	beq.n	800a750 <pvPortMalloc+0x84>
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	e7fe      	b.n	800a742 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800a744:	2600      	movs	r6, #0
 800a746:	f7ff f953 	bl	80099f0 <xTaskResumeAll>
}
 800a74a:	4630      	mov	r0, r6
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a750:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a752:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a754:	f7ff ff88 	bl	800a668 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a758:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a75c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 800a75e:	4923      	ldr	r1, [pc, #140]	; (800a7ec <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a760:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a762:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a764:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a766:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a76a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a76c:	bf38      	it	cc
 800a76e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a770:	680b      	ldr	r3, [r1, #0]
 800a772:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 800a774:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 800a778:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800a77a:	f7ff f939 	bl	80099f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a77e:	0773      	lsls	r3, r6, #29
 800a780:	d0e3      	beq.n	800a74a <pvPortMalloc+0x7e>
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	e7fe      	b.n	800a792 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 800a794:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a796:	075d      	lsls	r5, r3, #29
 800a798:	d119      	bne.n	800a7ce <pvPortMalloc+0x102>
 800a79a:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
 800a79e:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 800a7a0:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 800a7a2:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7a4:	4d0f      	ldr	r5, [pc, #60]	; (800a7e4 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7a6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7aa:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ae:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 800a7b0:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7b2:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 800a7b6:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ba:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7be:	4a0a      	ldr	r2, [pc, #40]	; (800a7e8 <pvPortMalloc+0x11c>)
}
 800a7c0:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c4:	4a0b      	ldr	r2, [pc, #44]	; (800a7f4 <pvPortMalloc+0x128>)
 800a7c6:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <pvPortMalloc+0x114>)
 800a7ca:	601f      	str	r7, [r3, #0]
}
 800a7cc:	e789      	b.n	800a6e2 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ce:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7d0:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7d4:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7d8:	460b      	mov	r3, r1
 800a7da:	e7e1      	b.n	800a7a0 <pvPortMalloc+0xd4>
 800a7dc:	240297a0 	.word	0x240297a0
 800a7e0:	24030fa4 	.word	0x24030fa4
 800a7e4:	24030fb8 	.word	0x24030fb8
 800a7e8:	24030fac 	.word	0x24030fac
 800a7ec:	24030fb0 	.word	0x24030fb0
 800a7f0:	240297a4 	.word	0x240297a4
 800a7f4:	24030fa8 	.word	0x24030fa8

0800a7f8 <vPortFree>:
	if( pv != NULL )
 800a7f8:	b1d0      	cbz	r0, 800a830 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7fa:	4a1c      	ldr	r2, [pc, #112]	; (800a86c <vPortFree+0x74>)
 800a7fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	4213      	tst	r3, r2
 800a804:	d00b      	beq.n	800a81e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a806:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a80a:	b191      	cbz	r1, 800a832 <vPortFree+0x3a>
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	e7fe      	b.n	800a81c <vPortFree+0x24>
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a82e:	e7fe      	b.n	800a82e <vPortFree+0x36>
 800a830:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a832:	ea23 0302 	bic.w	r3, r3, r2
{
 800a836:	b500      	push	{lr}
 800a838:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a83a:	f840 3c04 	str.w	r3, [r0, #-4]
 800a83e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800a840:	f7fe ff82 	bl	8009748 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a844:	4a0a      	ldr	r2, [pc, #40]	; (800a870 <vPortFree+0x78>)
 800a846:	9801      	ldr	r0, [sp, #4]
 800a848:	6811      	ldr	r1, [r2, #0]
 800a84a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a84e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a850:	440b      	add	r3, r1
 800a852:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a854:	f7ff ff08 	bl	800a668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a858:	4a06      	ldr	r2, [pc, #24]	; (800a874 <vPortFree+0x7c>)
 800a85a:	6813      	ldr	r3, [r2, #0]
 800a85c:	3301      	adds	r3, #1
 800a85e:	6013      	str	r3, [r2, #0]
}
 800a860:	b003      	add	sp, #12
 800a862:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 800a866:	f7ff b8c3 	b.w	80099f0 <xTaskResumeAll>
 800a86a:	bf00      	nop
 800a86c:	24030fa4 	.word	0x24030fa4
 800a870:	24030fa8 	.word	0x24030fa8
 800a874:	24030fb4 	.word	0x24030fb4

0800a878 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 800a87c:	2300      	movs	r3, #0
{
 800a87e:	b082      	sub	sp, #8
  void *buf = NULL;
 800a880:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a882:	2900      	cmp	r1, #0
 800a884:	d075      	beq.n	800a972 <netconn_recv_data+0xfa>
  *new_buf = NULL;
 800a886:	4604      	mov	r4, r0
 800a888:	460d      	mov	r5, r1
 800a88a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d066      	beq.n	800a95e <netconn_recv_data+0xe6>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a890:	f100 0810 	add.w	r8, r0, #16
 800a894:	4616      	mov	r6, r2
 800a896:	4640      	mov	r0, r8
 800a898:	f009 f8fe 	bl	8013a98 <sys_mbox_valid>
 800a89c:	4607      	mov	r7, r0
 800a89e:	b310      	cbz	r0, 800a8e6 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a8a0:	7f23      	ldrb	r3, [r4, #28]
 800a8a2:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a8a6:	a901      	add	r1, sp, #4
 800a8a8:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	d025      	beq.n	800a8fe <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a8b2:	f009 f8e5 	bl	8013a80 <sys_arch_mbox_tryfetch>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d035      	beq.n	800a926 <netconn_recv_data+0xae>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a8ba:	7823      	ldrb	r3, [r4, #0]
 800a8bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c0:	2b10      	cmp	r3, #16
 800a8c2:	d023      	beq.n	800a90c <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a8c4:	9b01      	ldr	r3, [sp, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d03d      	beq.n	800a946 <netconn_recv_data+0xce>
    len = netbuf_len((struct netbuf *)buf);
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	8912      	ldrh	r2, [r2, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a8ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8d0:	b11e      	cbz	r6, 800a8da <netconn_recv_data+0x62>
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	47b0      	blx	r6
 800a8d8:	9b01      	ldr	r3, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a8da:	2600      	movs	r6, #0
  *new_buf = buf;
 800a8dc:	602b      	str	r3, [r5, #0]
}
 800a8de:	4630      	mov	r0, r6
 800a8e0:	b002      	add	sp, #8
 800a8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800a8e6:	f009 f95b 	bl	8013ba0 <sys_arch_protect>
  err = conn->pending_err;
 800a8ea:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 800a8ee:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a8f0:	f009 f962 	bl	8013bb8 <sys_arch_unprotect>
    if (err != ERR_OK) {
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	d1f2      	bne.n	800a8de <netconn_recv_data+0x66>
    return ERR_CONN;
 800a8f8:	f06f 060a 	mvn.w	r6, #10
 800a8fc:	e7ef      	b.n	800a8de <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a8fe:	f994 2008 	ldrsb.w	r2, [r4, #8]
 800a902:	2a00      	cmp	r2, #0
 800a904:	d1d5      	bne.n	800a8b2 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a906:	f009 f89b 	bl	8013a40 <sys_arch_mbox_fetch>
 800a90a:	e7d6      	b.n	800a8ba <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a90c:	f10d 0103 	add.w	r1, sp, #3
 800a910:	9801      	ldr	r0, [sp, #4]
 800a912:	f001 f81d 	bl	800b950 <lwip_netconn_is_err_msg>
 800a916:	b1f8      	cbz	r0, 800a958 <netconn_recv_data+0xe0>
      if (err == ERR_CLSD) {
 800a918:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 800a91c:	f116 0f0f 	cmn.w	r6, #15
 800a920:	bf08      	it	eq
 800a922:	2600      	moveq	r6, #0
 800a924:	e7db      	b.n	800a8de <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 800a926:	f009 f93b 	bl	8013ba0 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800a92a:	2300      	movs	r3, #0
  err = conn->pending_err;
 800a92c:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 800a930:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a932:	f009 f941 	bl	8013bb8 <sys_arch_unprotect>
      if (err != ERR_OK) {
 800a936:	2e00      	cmp	r6, #0
 800a938:	d1d1      	bne.n	800a8de <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a93a:	7f23      	ldrb	r3, [r4, #28]
 800a93c:	07db      	lsls	r3, r3, #31
 800a93e:	d4db      	bmi.n	800a8f8 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 800a940:	f06f 0606 	mvn.w	r6, #6
 800a944:	e7cb      	b.n	800a8de <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a946:	4b10      	ldr	r3, [pc, #64]	; (800a988 <netconn_recv_data+0x110>)
 800a948:	f240 2291 	movw	r2, #657	; 0x291
 800a94c:	490f      	ldr	r1, [pc, #60]	; (800a98c <netconn_recv_data+0x114>)
 800a94e:	4810      	ldr	r0, [pc, #64]	; (800a990 <netconn_recv_data+0x118>)
 800a950:	f00a f98a 	bl	8014c68 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a954:	9b01      	ldr	r3, [sp, #4]
 800a956:	e7b8      	b.n	800a8ca <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	891a      	ldrh	r2, [r3, #8]
 800a95c:	e7b7      	b.n	800a8ce <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a95e:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <netconn_recv_data+0x110>)
 800a960:	f240 224a 	movw	r2, #586	; 0x24a
 800a964:	490b      	ldr	r1, [pc, #44]	; (800a994 <netconn_recv_data+0x11c>)
 800a966:	f06f 060f 	mvn.w	r6, #15
 800a96a:	4809      	ldr	r0, [pc, #36]	; (800a990 <netconn_recv_data+0x118>)
 800a96c:	f00a f97c 	bl	8014c68 <iprintf>
 800a970:	e7b5      	b.n	800a8de <netconn_recv_data+0x66>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <netconn_recv_data+0x110>)
 800a974:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a978:	4907      	ldr	r1, [pc, #28]	; (800a998 <netconn_recv_data+0x120>)
 800a97a:	f06f 060f 	mvn.w	r6, #15
 800a97e:	4804      	ldr	r0, [pc, #16]	; (800a990 <netconn_recv_data+0x118>)
 800a980:	f00a f972 	bl	8014c68 <iprintf>
 800a984:	e7ab      	b.n	800a8de <netconn_recv_data+0x66>
 800a986:	bf00      	nop
 800a988:	0801802c 	.word	0x0801802c
 800a98c:	0801809c 	.word	0x0801809c
 800a990:	08017728 	.word	0x08017728
 800a994:	08018080 	.word	0x08018080
 800a998:	08018060 	.word	0x08018060

0800a99c <netconn_recv_data_tcp>:
{
 800a99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a99e:	4604      	mov	r4, r0
 800a9a0:	b091      	sub	sp, #68	; 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a9a2:	3010      	adds	r0, #16
{
 800a9a4:	460e      	mov	r6, r1
 800a9a6:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a9a8:	f009 f876 	bl	8013a98 <sys_mbox_valid>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d053      	beq.n	800aa58 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a9b0:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800a9b4:	7f23      	ldrb	r3, [r4, #28]
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	db1c      	blt.n	800a9f4 <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a9ba:	463a      	mov	r2, r7
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f7ff ff5a 	bl	800a878 <netconn_recv_data>
  if (err != ERR_OK) {
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	b990      	cbnz	r0, 800a9ee <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a9c8:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 800a9ca:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a9cc:	d40e      	bmi.n	800a9ec <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 800a9ce:	b39e      	cbz	r6, 800aa38 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a9d0:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a9d2:	7823      	ldrb	r3, [r4, #0]
 800a9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d8:	2b10      	cmp	r3, #16
 800a9da:	d140      	bne.n	800aa5e <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 800a9dc:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a9de:	4669      	mov	r1, sp
 800a9e0:	f104 020c 	add.w	r2, r4, #12
 800a9e4:	4823      	ldr	r0, [pc, #140]	; (800aa74 <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 800a9e6:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a9e8:	f001 fcc0 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 800a9ec:	b1de      	cbz	r6, 800aa26 <netconn_recv_data_tcp+0x8a>
}
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	b011      	add	sp, #68	; 0x44
 800a9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f8:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9fc:	b11b      	cbz	r3, 800aa06 <netconn_recv_data_tcp+0x6a>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2101      	movs	r1, #1
 800aa02:	4620      	mov	r0, r4
 800aa04:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800aa06:	6866      	ldr	r6, [r4, #4]
 800aa08:	b9c6      	cbnz	r6, 800aa3c <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 800aa0a:	f009 f8c9 	bl	8013ba0 <sys_arch_protect>
  err = conn->pending_err;
 800aa0e:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800aa12:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800aa14:	f009 f8d0 	bl	8013bb8 <sys_arch_unprotect>
        return ERR_RST;
 800aa18:	2d00      	cmp	r5, #0
 800aa1a:	bf08      	it	eq
 800aa1c:	f06f 050d 	mvneq.w	r5, #13
}
 800aa20:	4628      	mov	r0, r5
 800aa22:	b011      	add	sp, #68	; 0x44
 800aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 800aa26:	06fb      	lsls	r3, r7, #27
 800aa28:	d5e7      	bpl.n	800a9fa <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800aa2a:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800aa2c:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800aa30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa34:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800aa36:	e7da      	b.n	800a9ee <netconn_recv_data_tcp+0x52>
 800aa38:	2201      	movs	r2, #1
 800aa3a:	e7ca      	b.n	800a9d2 <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aa3c:	f642 1301 	movw	r3, #10497	; 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aa40:	f104 020c 	add.w	r2, r4, #12
 800aa44:	a908      	add	r1, sp, #32
 800aa46:	480c      	ldr	r0, [pc, #48]	; (800aa78 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 800aa48:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 800aa4c:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aa4e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aa52:	f001 fc8b 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800aa56:	e7ca      	b.n	800a9ee <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 800aa58:	f06f 050a 	mvn.w	r5, #10
 800aa5c:	e7c7      	b.n	800a9ee <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800aa5e:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <netconn_recv_data_tcp+0xe0>)
 800aa60:	f240 22a7 	movw	r2, #679	; 0x2a7
 800aa64:	4906      	ldr	r1, [pc, #24]	; (800aa80 <netconn_recv_data_tcp+0xe4>)
 800aa66:	4807      	ldr	r0, [pc, #28]	; (800aa84 <netconn_recv_data_tcp+0xe8>)
 800aa68:	f00a f8fe 	bl	8014c68 <iprintf>
  if (buf == NULL) {
 800aa6c:	2e00      	cmp	r6, #0
 800aa6e:	d1be      	bne.n	800a9ee <netconn_recv_data_tcp+0x52>
 800aa70:	e7d9      	b.n	800aa26 <netconn_recv_data_tcp+0x8a>
 800aa72:	bf00      	nop
 800aa74:	0800bf25 	.word	0x0800bf25
 800aa78:	0800c02d 	.word	0x0800c02d
 800aa7c:	0801802c 	.word	0x0801802c
 800aa80:	080180a8 	.word	0x080180a8
 800aa84:	08017728 	.word	0x08017728

0800aa88 <netconn_new_with_proto_and_callback>:
{
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 800aa8e:	4611      	mov	r1, r2
 800aa90:	f000 ffc0 	bl	800ba14 <netconn_alloc>
  if (conn != NULL) {
 800aa94:	4604      	mov	r4, r0
 800aa96:	b170      	cbz	r0, 800aab6 <netconn_new_with_proto_and_callback+0x2e>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aa98:	f100 060c 	add.w	r6, r0, #12
 800aa9c:	4669      	mov	r1, sp
 800aa9e:	4823      	ldr	r0, [pc, #140]	; (800ab2c <netconn_new_with_proto_and_callback+0xa4>)
 800aaa0:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800aaa2:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 800aaa6:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aaa8:	f001 fc60 	bl	800c36c <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 800aaac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aab0:	4318      	orrs	r0, r3
 800aab2:	b240      	sxtb	r0, r0
 800aab4:	b910      	cbnz	r0, 800aabc <netconn_new_with_proto_and_callback+0x34>
}
 800aab6:	4620      	mov	r0, r4
 800aab8:	b008      	add	sp, #32
 800aaba:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	b12b      	cbz	r3, 800aacc <netconn_new_with_proto_and_callback+0x44>
 800aac0:	4b1b      	ldr	r3, [pc, #108]	; (800ab30 <netconn_new_with_proto_and_callback+0xa8>)
 800aac2:	22a3      	movs	r2, #163	; 0xa3
 800aac4:	491b      	ldr	r1, [pc, #108]	; (800ab34 <netconn_new_with_proto_and_callback+0xac>)
 800aac6:	481c      	ldr	r0, [pc, #112]	; (800ab38 <netconn_new_with_proto_and_callback+0xb0>)
 800aac8:	f00a f8ce 	bl	8014c68 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800aacc:	f104 0510 	add.w	r5, r4, #16
 800aad0:	4628      	mov	r0, r5
 800aad2:	f008 ffe1 	bl	8013a98 <sys_mbox_valid>
 800aad6:	b310      	cbz	r0, 800ab1e <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800aad8:	f104 0014 	add.w	r0, r4, #20
 800aadc:	f008 ffdc 	bl	8013a98 <sys_mbox_valid>
 800aae0:	b9b0      	cbnz	r0, 800ab10 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800aae2:	4630      	mov	r0, r6
 800aae4:	f009 f81c 	bl	8013b20 <sys_sem_valid>
 800aae8:	b158      	cbz	r0, 800ab02 <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 800aaea:	4630      	mov	r0, r6
 800aaec:	f009 f814 	bl	8013b18 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f008 ff8b 	bl	8013a0c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	2007      	movs	r0, #7
      return NULL;
 800aafa:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 800aafc:	f002 f866 	bl	800cbcc <memp_free>
      return NULL;
 800ab00:	e7d9      	b.n	800aab6 <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ab02:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <netconn_new_with_proto_and_callback+0xa8>)
 800ab04:	22a9      	movs	r2, #169	; 0xa9
 800ab06:	490d      	ldr	r1, [pc, #52]	; (800ab3c <netconn_new_with_proto_and_callback+0xb4>)
 800ab08:	480b      	ldr	r0, [pc, #44]	; (800ab38 <netconn_new_with_proto_and_callback+0xb0>)
 800ab0a:	f00a f8ad 	bl	8014c68 <iprintf>
 800ab0e:	e7ec      	b.n	800aaea <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ab10:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <netconn_new_with_proto_and_callback+0xa8>)
 800ab12:	22a6      	movs	r2, #166	; 0xa6
 800ab14:	490a      	ldr	r1, [pc, #40]	; (800ab40 <netconn_new_with_proto_and_callback+0xb8>)
 800ab16:	4808      	ldr	r0, [pc, #32]	; (800ab38 <netconn_new_with_proto_and_callback+0xb0>)
 800ab18:	f00a f8a6 	bl	8014c68 <iprintf>
 800ab1c:	e7e1      	b.n	800aae2 <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <netconn_new_with_proto_and_callback+0xa8>)
 800ab20:	22a4      	movs	r2, #164	; 0xa4
 800ab22:	4908      	ldr	r1, [pc, #32]	; (800ab44 <netconn_new_with_proto_and_callback+0xbc>)
 800ab24:	4804      	ldr	r0, [pc, #16]	; (800ab38 <netconn_new_with_proto_and_callback+0xb0>)
 800ab26:	f00a f89f 	bl	8014c68 <iprintf>
 800ab2a:	e7d5      	b.n	800aad8 <netconn_new_with_proto_and_callback+0x50>
 800ab2c:	0800b9ad 	.word	0x0800b9ad
 800ab30:	0801802c 	.word	0x0801802c
 800ab34:	080180cc 	.word	0x080180cc
 800ab38:	08017728 	.word	0x08017728
 800ab3c:	0801812c 	.word	0x0801812c
 800ab40:	08018108 	.word	0x08018108
 800ab44:	080180f0 	.word	0x080180f0

0800ab48 <netconn_delete>:
{
 800ab48:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 800ab4a:	4604      	mov	r4, r0
{
 800ab4c:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 800ab4e:	b1c0      	cbz	r0, 800ab82 <netconn_delete+0x3a>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ab50:	2329      	movs	r3, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ab52:	f100 020c 	add.w	r2, r0, #12
 800ab56:	4669      	mov	r1, sp
 800ab58:	480c      	ldr	r0, [pc, #48]	; (800ab8c <netconn_delete+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 800ab5a:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ab5c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ab60:	f001 fc04 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800ab64:	4605      	mov	r5, r0
 800ab66:	b110      	cbz	r0, 800ab6e <netconn_delete+0x26>
}
 800ab68:	4628      	mov	r0, r5
 800ab6a:	b009      	add	sp, #36	; 0x24
 800ab6c:	bd30      	pop	{r4, r5, pc}
    return apimsg->err;
 800ab6e:	f99d 5004 	ldrsb.w	r5, [sp, #4]
  if (err != ERR_OK) {
 800ab72:	2d00      	cmp	r5, #0
 800ab74:	d1f8      	bne.n	800ab68 <netconn_delete+0x20>
    netconn_free(conn);
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 ff92 	bl	800baa0 <netconn_free>
}
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	b009      	add	sp, #36	; 0x24
 800ab80:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 800ab82:	4605      	mov	r5, r0
}
 800ab84:	4628      	mov	r0, r5
 800ab86:	b009      	add	sp, #36	; 0x24
 800ab88:	bd30      	pop	{r4, r5, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800bd0d 	.word	0x0800bd0d

0800ab90 <netconn_bind>:
{
 800ab90:	b500      	push	{lr}
 800ab92:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ab94:	b1a0      	cbz	r0, 800abc0 <netconn_bind+0x30>
  if (addr == NULL) {
 800ab96:	460b      	mov	r3, r1
 800ab98:	4694      	mov	ip, r2
 800ab9a:	b179      	cbz	r1, 800abbc <netconn_bind+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ab9c:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800aba0:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aba2:	4669      	mov	r1, sp
 800aba4:	480b      	ldr	r0, [pc, #44]	; (800abd4 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aba6:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aba8:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800abac:	f001 fbde 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800abb0:	b908      	cbnz	r0, 800abb6 <netconn_bind+0x26>
    return apimsg->err;
 800abb2:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 800abb6:	b009      	add	sp, #36	; 0x24
 800abb8:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 800abbc:	4b06      	ldr	r3, [pc, #24]	; (800abd8 <netconn_bind+0x48>)
 800abbe:	e7ed      	b.n	800ab9c <netconn_bind+0xc>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800abc0:	4b06      	ldr	r3, [pc, #24]	; (800abdc <netconn_bind+0x4c>)
 800abc2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800abc6:	4906      	ldr	r1, [pc, #24]	; (800abe0 <netconn_bind+0x50>)
 800abc8:	4806      	ldr	r0, [pc, #24]	; (800abe4 <netconn_bind+0x54>)
 800abca:	f00a f84d 	bl	8014c68 <iprintf>
 800abce:	f06f 000f 	mvn.w	r0, #15
 800abd2:	e7f0      	b.n	800abb6 <netconn_bind+0x26>
 800abd4:	0800be21 	.word	0x0800be21
 800abd8:	0801a600 	.word	0x0801a600
 800abdc:	0801802c 	.word	0x0801802c
 800abe0:	08018148 	.word	0x08018148
 800abe4:	08017728 	.word	0x08017728

0800abe8 <netconn_listen_with_backlog>:
{
 800abe8:	b500      	push	{lr}
 800abea:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800abec:	b168      	cbz	r0, 800ac0a <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 800abee:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800abf0:	f100 020c 	add.w	r2, r0, #12
 800abf4:	4669      	mov	r1, sp
 800abf6:	480a      	ldr	r0, [pc, #40]	; (800ac20 <netconn_listen_with_backlog+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 800abf8:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800abfa:	f001 fbb7 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800abfe:	b908      	cbnz	r0, 800ac04 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 800ac00:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 800ac04:	b009      	add	sp, #36	; 0x24
 800ac06:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <netconn_listen_with_backlog+0x3c>)
 800ac0c:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ac10:	4905      	ldr	r1, [pc, #20]	; (800ac28 <netconn_listen_with_backlog+0x40>)
 800ac12:	4806      	ldr	r0, [pc, #24]	; (800ac2c <netconn_listen_with_backlog+0x44>)
 800ac14:	f00a f828 	bl	8014c68 <iprintf>
 800ac18:	f06f 000f 	mvn.w	r0, #15
 800ac1c:	e7f2      	b.n	800ac04 <netconn_listen_with_backlog+0x1c>
 800ac1e:	bf00      	nop
 800ac20:	0800be59 	.word	0x0800be59
 800ac24:	0801802c 	.word	0x0801802c
 800ac28:	08018164 	.word	0x08018164
 800ac2c:	08017728 	.word	0x08017728

0800ac30 <netconn_accept>:
{
 800ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac32:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d04d      	beq.n	800acd4 <netconn_accept+0xa4>
  *new_conn = NULL;
 800ac38:	2500      	movs	r5, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	600d      	str	r5, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d03d      	beq.n	800acc0 <netconn_accept+0x90>
  SYS_ARCH_PROTECT(lev);
 800ac44:	f008 ffac 	bl	8013ba0 <sys_arch_protect>
  err = conn->pending_err;
 800ac48:	f994 7008 	ldrsb.w	r7, [r4, #8]
  conn->pending_err = ERR_OK;
 800ac4c:	7225      	strb	r5, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ac4e:	f008 ffb3 	bl	8013bb8 <sys_arch_unprotect>
  err = netconn_err(conn);
 800ac52:	f88d 7003 	strb.w	r7, [sp, #3]
  if (err != ERR_OK) {
 800ac56:	b117      	cbz	r7, 800ac5e <netconn_accept+0x2e>
}
 800ac58:	4638      	mov	r0, r7
 800ac5a:	b003      	add	sp, #12
 800ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ac5e:	f104 0514 	add.w	r5, r4, #20
 800ac62:	4628      	mov	r0, r5
 800ac64:	f008 ff18 	bl	8013a98 <sys_mbox_valid>
 800ac68:	b338      	cbz	r0, 800acba <netconn_accept+0x8a>
 800ac6a:	7f23      	ldrb	r3, [r4, #28]
 800ac6c:	07da      	lsls	r2, r3, #31
 800ac6e:	d424      	bmi.n	800acba <netconn_accept+0x8a>
  if (netconn_is_nonblocking(conn)) {
 800ac70:	079b      	lsls	r3, r3, #30
 800ac72:	d517      	bpl.n	800aca4 <netconn_accept+0x74>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ac74:	a901      	add	r1, sp, #4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f008 ff02 	bl	8013a80 <sys_arch_mbox_tryfetch>
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d033      	beq.n	800ace8 <netconn_accept+0xb8>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ac80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac82:	b11b      	cbz	r3, 800ac8c <netconn_accept+0x5c>
 800ac84:	2200      	movs	r2, #0
 800ac86:	4620      	mov	r0, r4
 800ac88:	2101      	movs	r1, #1
 800ac8a:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ac8c:	f10d 0103 	add.w	r1, sp, #3
 800ac90:	9801      	ldr	r0, [sp, #4]
 800ac92:	f000 fe5d 	bl	800b950 <lwip_netconn_is_err_msg>
 800ac96:	b958      	cbnz	r0, 800acb0 <netconn_accept+0x80>
  if (accept_ptr == NULL) {
 800ac98:	9b01      	ldr	r3, [sp, #4]
 800ac9a:	b173      	cbz	r3, 800acba <netconn_accept+0x8a>
}
 800ac9c:	4638      	mov	r0, r7
  *new_conn = newconn;
 800ac9e:	6033      	str	r3, [r6, #0]
}
 800aca0:	b003      	add	sp, #12
 800aca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800aca4:	463a      	mov	r2, r7
 800aca6:	4628      	mov	r0, r5
 800aca8:	a901      	add	r1, sp, #4
 800acaa:	f008 fec9 	bl	8013a40 <sys_arch_mbox_fetch>
 800acae:	e7e7      	b.n	800ac80 <netconn_accept+0x50>
    return err;
 800acb0:	f99d 7003 	ldrsb.w	r7, [sp, #3]
}
 800acb4:	4638      	mov	r0, r7
 800acb6:	b003      	add	sp, #12
 800acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_CLSD;
 800acba:	f06f 070e 	mvn.w	r7, #14
 800acbe:	e7cb      	b.n	800ac58 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800acc0:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <netconn_accept+0xc0>)
 800acc2:	f240 12e3 	movw	r2, #483	; 0x1e3
 800acc6:	490b      	ldr	r1, [pc, #44]	; (800acf4 <netconn_accept+0xc4>)
 800acc8:	f06f 070f 	mvn.w	r7, #15
 800accc:	480a      	ldr	r0, [pc, #40]	; (800acf8 <netconn_accept+0xc8>)
 800acce:	f009 ffcb 	bl	8014c68 <iprintf>
 800acd2:	e7c1      	b.n	800ac58 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <netconn_accept+0xc0>)
 800acd6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800acda:	4908      	ldr	r1, [pc, #32]	; (800acfc <netconn_accept+0xcc>)
 800acdc:	f06f 070f 	mvn.w	r7, #15
 800ace0:	4805      	ldr	r0, [pc, #20]	; (800acf8 <netconn_accept+0xc8>)
 800ace2:	f009 ffc1 	bl	8014c68 <iprintf>
 800ace6:	e7b7      	b.n	800ac58 <netconn_accept+0x28>
      return ERR_WOULDBLOCK;
 800ace8:	f06f 0706 	mvn.w	r7, #6
 800acec:	e7b4      	b.n	800ac58 <netconn_accept+0x28>
 800acee:	bf00      	nop
 800acf0:	0801802c 	.word	0x0801802c
 800acf4:	080181a4 	.word	0x080181a4
 800acf8:	08017728 	.word	0x08017728
 800acfc:	08018184 	.word	0x08018184

0800ad00 <netconn_recv>:
{
 800ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad02:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ad04:	2900      	cmp	r1, #0
 800ad06:	d046      	beq.n	800ad96 <netconn_recv+0x96>
  *new_buf = NULL;
 800ad08:	2600      	movs	r6, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d036      	beq.n	800ad82 <netconn_recv+0x82>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ad14:	7803      	ldrb	r3, [r0, #0]
 800ad16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad1a:	2b10      	cmp	r3, #16
 800ad1c:	d117      	bne.n	800ad4e <netconn_recv+0x4e>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ad1e:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 800ad20:	9601      	str	r6, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ad22:	f001 ff0d 	bl	800cb40 <memp_malloc>
    if (buf == NULL) {
 800ad26:	4607      	mov	r7, r0
 800ad28:	b1b8      	cbz	r0, 800ad5a <netconn_recv+0x5a>
    err = netconn_recv_data_tcp(conn, &p, 0);
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	a901      	add	r1, sp, #4
 800ad30:	f7ff fe34 	bl	800a99c <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800ad34:	4604      	mov	r4, r0
 800ad36:	b9a8      	cbnz	r0, 800ad64 <netconn_recv+0x64>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ad38:	9e01      	ldr	r6, [sp, #4]
 800ad3a:	b1d6      	cbz	r6, 800ad72 <netconn_recv+0x72>
    buf->port = 0;
 800ad3c:	2300      	movs	r3, #0
    buf->ptr = p;
 800ad3e:	e9c7 6600 	strd	r6, r6, [r7]
    buf->port = 0;
 800ad42:	81bb      	strh	r3, [r7, #12]
    ip_addr_set_zero(&buf->addr);
 800ad44:	60bb      	str	r3, [r7, #8]
    *new_buf = buf;
 800ad46:	602f      	str	r7, [r5, #0]
}
 800ad48:	4620      	mov	r0, r4
 800ad4a:	b003      	add	sp, #12
 800ad4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ad4e:	4632      	mov	r2, r6
}
 800ad50:	b003      	add	sp, #12
 800ad52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ad56:	f7ff bd8f 	b.w	800a878 <netconn_recv_data>
      return ERR_MEM;
 800ad5a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800ad5e:	4620      	mov	r0, r4
 800ad60:	b003      	add	sp, #12
 800ad62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memp_free(MEMP_NETBUF, buf);
 800ad64:	4639      	mov	r1, r7
 800ad66:	2006      	movs	r0, #6
 800ad68:	f001 ff30 	bl	800cbcc <memp_free>
}
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	b003      	add	sp, #12
 800ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("p != NULL", p != NULL);
 800ad72:	4b0e      	ldr	r3, [pc, #56]	; (800adac <netconn_recv+0xac>)
 800ad74:	f240 3279 	movw	r2, #889	; 0x379
 800ad78:	490d      	ldr	r1, [pc, #52]	; (800adb0 <netconn_recv+0xb0>)
 800ad7a:	480e      	ldr	r0, [pc, #56]	; (800adb4 <netconn_recv+0xb4>)
 800ad7c:	f009 ff74 	bl	8014c68 <iprintf>
 800ad80:	e7dc      	b.n	800ad3c <netconn_recv+0x3c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ad82:	4b0a      	ldr	r3, [pc, #40]	; (800adac <netconn_recv+0xac>)
 800ad84:	f240 3265 	movw	r2, #869	; 0x365
 800ad88:	490b      	ldr	r1, [pc, #44]	; (800adb8 <netconn_recv+0xb8>)
 800ad8a:	f06f 040f 	mvn.w	r4, #15
 800ad8e:	4809      	ldr	r0, [pc, #36]	; (800adb4 <netconn_recv+0xb4>)
 800ad90:	f009 ff6a 	bl	8014c68 <iprintf>
 800ad94:	e7d8      	b.n	800ad48 <netconn_recv+0x48>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <netconn_recv+0xac>)
 800ad98:	f240 3263 	movw	r2, #867	; 0x363
 800ad9c:	4907      	ldr	r1, [pc, #28]	; (800adbc <netconn_recv+0xbc>)
 800ad9e:	f06f 040f 	mvn.w	r4, #15
 800ada2:	4804      	ldr	r0, [pc, #16]	; (800adb4 <netconn_recv+0xb4>)
 800ada4:	f009 ff60 	bl	8014c68 <iprintf>
 800ada8:	e7ce      	b.n	800ad48 <netconn_recv+0x48>
 800adaa:	bf00      	nop
 800adac:	0801802c 	.word	0x0801802c
 800adb0:	08018324 	.word	0x08018324
 800adb4:	08017728 	.word	0x08017728
 800adb8:	08018080 	.word	0x08018080
 800adbc:	08018060 	.word	0x08018060

0800adc0 <netconn_write_vectors_partly>:
{
 800adc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adc2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d064      	beq.n	800ae92 <netconn_write_vectors_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800adc8:	7805      	ldrb	r5, [r0, #0]
 800adca:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800adce:	2d10      	cmp	r5, #16
 800add0:	d155      	bne.n	800ae7e <netconn_write_vectors_partly+0xbe>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800add2:	7f05      	ldrb	r5, [r0, #28]
 800add4:	f003 0604 	and.w	r6, r3, #4
 800add8:	f005 0502 	and.w	r5, r5, #2
 800addc:	4335      	orrs	r5, r6
 800adde:	d018      	beq.n	800ae12 <netconn_write_vectors_partly+0x52>
  if (dontblock && !bytes_written) {
 800ade0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ade2:	b18c      	cbz	r4, 800ae08 <netconn_write_vectors_partly+0x48>
 800ade4:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d03d      	beq.n	800ae66 <netconn_write_vectors_partly+0xa6>
    size += vectors[i].len;
 800adea:	460e      	mov	r6, r1
 800adec:	f04f 0e00 	mov.w	lr, #0
 800adf0:	f856 5f04 	ldr.w	r5, [r6, #4]!
  for (i = 0; i < vectorcnt; i++) {
 800adf4:	f10e 0e01 	add.w	lr, lr, #1
 800adf8:	4572      	cmp	r2, lr
 800adfa:	d00c      	beq.n	800ae16 <netconn_write_vectors_partly+0x56>
 800adfc:	f856 403e 	ldr.w	r4, [r6, lr, lsl #3]
 800ae00:	eb14 0c05 	adds.w	ip, r4, r5
    size += vectors[i].len;
 800ae04:	4665      	mov	r5, ip
    if (size < vectors[i].len) {
 800ae06:	d3f5      	bcc.n	800adf4 <netconn_write_vectors_partly+0x34>
    return ERR_VAL;
 800ae08:	f06f 0605 	mvn.w	r6, #5
}
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	b009      	add	sp, #36	; 0x24
 800ae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ae12:	462f      	mov	r7, r5
 800ae14:	e7e7      	b.n	800ade6 <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 800ae16:	2d00      	cmp	r5, #0
 800ae18:	d025      	beq.n	800ae66 <netconn_write_vectors_partly+0xa6>
  } else if (size > SSIZE_MAX) {
 800ae1a:	da04      	bge.n	800ae26 <netconn_write_vectors_partly+0x66>
    if (!bytes_written) {
 800ae1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ae1e:	2c00      	cmp	r4, #0
 800ae20:	d0f2      	beq.n	800ae08 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 800ae22:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ae26:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ae2a:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ae2c:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ae2e:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ae30:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ae34:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800ae38:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ae3a:	481b      	ldr	r0, [pc, #108]	; (800aea8 <netconn_write_vectors_partly+0xe8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ae3c:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ae3e:	e9cd 3504 	strd	r3, r5, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ae42:	f001 fa93 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800ae46:	4606      	mov	r6, r0
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1df      	bne.n	800ae0c <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 800ae4c:	f99d 6004 	ldrsb.w	r6, [sp, #4]
  if (err == ERR_OK) {
 800ae50:	2e00      	cmp	r6, #0
 800ae52:	d1db      	bne.n	800ae0c <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 800ae54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae56:	b113      	cbz	r3, 800ae5e <netconn_write_vectors_partly+0x9e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ae58:	9b06      	ldr	r3, [sp, #24]
 800ae5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae5c:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 800ae5e:	b917      	cbnz	r7, 800ae66 <netconn_write_vectors_partly+0xa6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ae60:	9b06      	ldr	r3, [sp, #24]
 800ae62:	42ab      	cmp	r3, r5
 800ae64:	d103      	bne.n	800ae6e <netconn_write_vectors_partly+0xae>
    return ERR_OK;
 800ae66:	2600      	movs	r6, #0
}
 800ae68:	4630      	mov	r0, r6
 800ae6a:	b009      	add	sp, #36	; 0x24
 800ae6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <netconn_write_vectors_partly+0xec>)
 800ae70:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ae74:	490e      	ldr	r1, [pc, #56]	; (800aeb0 <netconn_write_vectors_partly+0xf0>)
 800ae76:	480f      	ldr	r0, [pc, #60]	; (800aeb4 <netconn_write_vectors_partly+0xf4>)
 800ae78:	f009 fef6 	bl	8014c68 <iprintf>
 800ae7c:	e7c6      	b.n	800ae0c <netconn_write_vectors_partly+0x4c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <netconn_write_vectors_partly+0xec>)
 800ae80:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800ae84:	490c      	ldr	r1, [pc, #48]	; (800aeb8 <netconn_write_vectors_partly+0xf8>)
 800ae86:	f06f 0605 	mvn.w	r6, #5
 800ae8a:	480a      	ldr	r0, [pc, #40]	; (800aeb4 <netconn_write_vectors_partly+0xf4>)
 800ae8c:	f009 feec 	bl	8014c68 <iprintf>
 800ae90:	e7bc      	b.n	800ae0c <netconn_write_vectors_partly+0x4c>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ae92:	4b06      	ldr	r3, [pc, #24]	; (800aeac <netconn_write_vectors_partly+0xec>)
 800ae94:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ae98:	4908      	ldr	r1, [pc, #32]	; (800aebc <netconn_write_vectors_partly+0xfc>)
 800ae9a:	f06f 060f 	mvn.w	r6, #15
 800ae9e:	4805      	ldr	r0, [pc, #20]	; (800aeb4 <netconn_write_vectors_partly+0xf4>)
 800aea0:	f009 fee2 	bl	8014c68 <iprintf>
 800aea4:	e7b2      	b.n	800ae0c <netconn_write_vectors_partly+0x4c>
 800aea6:	bf00      	nop
 800aea8:	0800bf61 	.word	0x0800bf61
 800aeac:	0801802c 	.word	0x0801802c
 800aeb0:	08018204 	.word	0x08018204
 800aeb4:	08017728 	.word	0x08017728
 800aeb8:	080181e0 	.word	0x080181e0
 800aebc:	080181c4 	.word	0x080181c4

0800aec0 <netconn_write_partly>:
{
 800aec0:	b510      	push	{r4, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800aec6:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 800aec8:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800aecc:	9200      	str	r2, [sp, #0]
 800aece:	a902      	add	r1, sp, #8
 800aed0:	2201      	movs	r2, #1
 800aed2:	f7ff ff75 	bl	800adc0 <netconn_write_vectors_partly>
}
 800aed6:	b004      	add	sp, #16
 800aed8:	bd10      	pop	{r4, pc}
 800aeda:	bf00      	nop

0800aedc <netconn_close>:
{
 800aedc:	b500      	push	{lr}
 800aede:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800aee0:	b188      	cbz	r0, 800af06 <netconn_close+0x2a>
  API_MSG_VAR_REF(msg).conn = conn;
 800aee2:	4603      	mov	r3, r0
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aee4:	f642 1c03 	movw	ip, #10499	; 0x2903
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aee8:	f100 020c 	add.w	r2, r0, #12
 800aeec:	4669      	mov	r1, sp
 800aeee:	480b      	ldr	r0, [pc, #44]	; (800af1c <netconn_close+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 800aef0:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aef2:	f8ad c008 	strh.w	ip, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aef6:	f001 fa39 	bl	800c36c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800aefa:	b908      	cbnz	r0, 800af00 <netconn_close+0x24>
    return apimsg->err;
 800aefc:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 800af00:	b009      	add	sp, #36	; 0x24
 800af02:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800af06:	4b06      	ldr	r3, [pc, #24]	; (800af20 <netconn_close+0x44>)
 800af08:	f240 4247 	movw	r2, #1095	; 0x447
 800af0c:	4905      	ldr	r1, [pc, #20]	; (800af24 <netconn_close+0x48>)
 800af0e:	4806      	ldr	r0, [pc, #24]	; (800af28 <netconn_close+0x4c>)
 800af10:	f009 feaa 	bl	8014c68 <iprintf>
 800af14:	f06f 000f 	mvn.w	r0, #15
 800af18:	e7f2      	b.n	800af00 <netconn_close+0x24>
 800af1a:	bf00      	nop
 800af1c:	0800c02d 	.word	0x0800c02d
 800af20:	0801802c 	.word	0x0801802c
 800af24:	08018228 	.word	0x08018228
 800af28:	08017728 	.word	0x08017728

0800af2c <netconn_err>:
{
 800af2c:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 800af2e:	4604      	mov	r4, r0
 800af30:	b148      	cbz	r0, 800af46 <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 800af32:	f008 fe35 	bl	8013ba0 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800af36:	2300      	movs	r3, #0
  err = conn->pending_err;
 800af38:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 800af3c:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800af3e:	f008 fe3b 	bl	8013bb8 <sys_arch_unprotect>
  return err;
}
 800af42:	4628      	mov	r0, r5
 800af44:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800af46:	4605      	mov	r5, r0
}
 800af48:	4628      	mov	r0, r5
 800af4a:	bd38      	pop	{r3, r4, r5, pc}

0800af4c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800af4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	4604      	mov	r4, r0
 800af52:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 800af56:	4616      	mov	r6, r2
 800af58:	461f      	mov	r7, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800af5a:	460d      	mov	r5, r1
 800af5c:	b379      	cbz	r1, 800afbe <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800af5e:	2c00      	cmp	r4, #0
 800af60:	d035      	beq.n	800afce <recv_udp+0x82>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800af62:	6863      	ldr	r3, [r4, #4]
 800af64:	42ab      	cmp	r3, r5
 800af66:	d005      	beq.n	800af74 <recv_udp+0x28>
 800af68:	4b22      	ldr	r3, [pc, #136]	; (800aff4 <recv_udp+0xa8>)
 800af6a:	22ee      	movs	r2, #238	; 0xee
 800af6c:	4922      	ldr	r1, [pc, #136]	; (800aff8 <recv_udp+0xac>)
 800af6e:	4823      	ldr	r0, [pc, #140]	; (800affc <recv_udp+0xb0>)
 800af70:	f009 fe7a 	bl	8014c68 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800af74:	f104 0910 	add.w	r9, r4, #16
 800af78:	4648      	mov	r0, r9
 800af7a:	f008 fd8d 	bl	8013a98 <sys_mbox_valid>
 800af7e:	b1c8      	cbz	r0, 800afb4 <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800af80:	2006      	movs	r0, #6
 800af82:	f001 fddd 	bl	800cb40 <memp_malloc>
  if (buf == NULL) {
 800af86:	4605      	mov	r5, r0
 800af88:	b1a0      	cbz	r0, 800afb4 <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 800af8a:	e9c0 6600 	strd	r6, r6, [r0]
    ip_addr_set(&buf->addr, addr);
 800af8e:	b107      	cbz	r7, 800af92 <recv_udp+0x46>
 800af90:	683f      	ldr	r7, [r7, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800af92:	4629      	mov	r1, r5
 800af94:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 800af96:	60af      	str	r7, [r5, #8]
    buf->port = port;
 800af98:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 800af9c:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800af9e:	f008 fd3f 	bl	8013a20 <sys_mbox_trypost>
 800afa2:	4601      	mov	r1, r0
 800afa4:	b9f0      	cbnz	r0, 800afe4 <recv_udp+0x98>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800afa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afa8:	b30b      	cbz	r3, 800afee <recv_udp+0xa2>
 800afaa:	4632      	mov	r2, r6
 800afac:	4620      	mov	r0, r4
  }
}
 800afae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800afb2:	4718      	bx	r3
    pbuf_free(p);
 800afb4:	4630      	mov	r0, r6
}
 800afb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800afba:	f002 b9cd 	b.w	800d358 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <recv_udp+0xa8>)
 800afc0:	22e5      	movs	r2, #229	; 0xe5
 800afc2:	490f      	ldr	r1, [pc, #60]	; (800b000 <recv_udp+0xb4>)
 800afc4:	480d      	ldr	r0, [pc, #52]	; (800affc <recv_udp+0xb0>)
 800afc6:	f009 fe4f 	bl	8014c68 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800afca:	2c00      	cmp	r4, #0
 800afcc:	d1c9      	bne.n	800af62 <recv_udp+0x16>
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <recv_udp+0xa8>)
 800afd0:	22e6      	movs	r2, #230	; 0xe6
 800afd2:	490c      	ldr	r1, [pc, #48]	; (800b004 <recv_udp+0xb8>)
 800afd4:	4809      	ldr	r0, [pc, #36]	; (800affc <recv_udp+0xb0>)
 800afd6:	f009 fe47 	bl	8014c68 <iprintf>
    pbuf_free(p);
 800afda:	4630      	mov	r0, r6
}
 800afdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800afe0:	f002 b9ba 	b.w	800d358 <pbuf_free>
    netbuf_delete(buf);
 800afe4:	4628      	mov	r0, r5
}
 800afe6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 800afea:	f001 b87b 	b.w	800c0e4 <netbuf_delete>
}
 800afee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff2:	bf00      	nop
 800aff4:	08018244 	.word	0x08018244
 800aff8:	080182bc 	.word	0x080182bc
 800affc:	08017728 	.word	0x08017728
 800b000:	08018278 	.word	0x08018278
 800b004:	0801829c 	.word	0x0801829c

0800b008 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b008:	b500      	push	{lr}
 800b00a:	4601      	mov	r1, r0
 800b00c:	b083      	sub	sp, #12
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b00e:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 800b010:	9001      	str	r0, [sp, #4]
 800b012:	f002 ff49 	bl	800dea8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b016:	9801      	ldr	r0, [sp, #4]
 800b018:	4909      	ldr	r1, [pc, #36]	; (800b040 <setup_tcp+0x38>)
 800b01a:	f002 ff4d 	bl	800deb8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b01e:	9801      	ldr	r0, [sp, #4]
 800b020:	4908      	ldr	r1, [pc, #32]	; (800b044 <setup_tcp+0x3c>)
 800b022:	f002 ff63 	bl	800deec <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b026:	9801      	ldr	r0, [sp, #4]
 800b028:	4907      	ldr	r1, [pc, #28]	; (800b048 <setup_tcp+0x40>)
 800b02a:	2202      	movs	r2, #2
 800b02c:	f002 ff9e 	bl	800df6c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b030:	4906      	ldr	r1, [pc, #24]	; (800b04c <setup_tcp+0x44>)
 800b032:	9801      	ldr	r0, [sp, #4]
}
 800b034:	b003      	add	sp, #12
 800b036:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 800b03a:	f002 bf71 	b.w	800df20 <tcp_err>
 800b03e:	bf00      	nop
 800b040:	0800b6f9 	.word	0x0800b6f9
 800b044:	0800b67d 	.word	0x0800b67d
 800b048:	0800b5fd 	.word	0x0800b5fd
 800b04c:	0800b7e9 	.word	0x0800b7e9

0800b050 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	b083      	sub	sp, #12
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b056:	4680      	mov	r8, r0
{
 800b058:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f000 811b 	beq.w	800b296 <lwip_netconn_do_writemore+0x246>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b060:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d006      	beq.n	800b076 <lwip_netconn_do_writemore+0x26>
 800b068:	4ba4      	ldr	r3, [pc, #656]	; (800b2fc <lwip_netconn_do_writemore+0x2ac>)
 800b06a:	f240 6274 	movw	r2, #1652	; 0x674
 800b06e:	49a4      	ldr	r1, [pc, #656]	; (800b300 <lwip_netconn_do_writemore+0x2b0>)
 800b070:	48a4      	ldr	r0, [pc, #656]	; (800b304 <lwip_netconn_do_writemore+0x2b4>)
 800b072:	f009 fdf9 	bl	8014c68 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b076:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 8113 	beq.w	800b2a6 <lwip_netconn_do_writemore+0x256>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 811a 	beq.w	800b2be <lwip_netconn_do_writemore+0x26e>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b08a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b08e:	e9d2 3105 	ldrd	r3, r1, [r2, #20]
 800b092:	4299      	cmp	r1, r3
 800b094:	f080 80cf 	bcs.w	800b236 <lwip_netconn_do_writemore+0x1e6>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b098:	8993      	ldrh	r3, [r2, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 80c1 	beq.w	800b222 <lwip_netconn_do_writemore+0x1d2>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b0a0:	7f17      	ldrb	r7, [r2, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b0a2:	f898 301c 	ldrb.w	r3, [r8, #28]
 800b0a6:	f007 0104 	and.w	r1, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b0aa:	f8df b250 	ldr.w	fp, [pc, #592]	; 800b2fc <lwip_netconn_do_writemore+0x2ac>
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	f8df a268 	ldr.w	sl, [pc, #616]	; 800b31c <lwip_netconn_do_writemore+0x2cc>
 800b0b6:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b304 <lwip_netconn_do_writemore+0x2b4>
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	9300      	str	r3, [sp, #0]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b0be:	6891      	ldr	r1, [r2, #8]
 800b0c0:	6913      	ldr	r3, [r2, #16]
 800b0c2:	e9d1 6c00 	ldrd	r6, ip, [r1]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b0c6:	ebac 0503 	sub.w	r5, ip, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b0ca:	441e      	add	r6, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 800b0cc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800b0d0:	d338      	bcc.n	800b144 <lwip_netconn_do_writemore+0xf4>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b0d2:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 800b0d6:	f64f 74ff 	movw	r4, #65535	; 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 800b0da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b0de:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
      if (available < len) {
 800b0e2:	428c      	cmp	r4, r1
 800b0e4:	d906      	bls.n	800b0f4 <lwip_netconn_do_writemore+0xa4>
        if (dontblock) {
 800b0e6:	9c00      	ldr	r4, [sp, #0]
 800b0e8:	2c00      	cmp	r4, #0
 800b0ea:	d058      	beq.n	800b19e <lwip_netconn_do_writemore+0x14e>
          if (!len) {
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	f000 8086 	beq.w	800b1fe <lwip_netconn_do_writemore+0x1ae>
 800b0f2:	460c      	mov	r4, r1
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b0f4:	4423      	add	r3, r4
 800b0f6:	459c      	cmp	ip, r3
 800b0f8:	d347      	bcc.n	800b18a <lwip_netconn_do_writemore+0x13a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b0fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0fe:	429c      	cmp	r4, r3
 800b100:	d13e      	bne.n	800b180 <lwip_netconn_do_writemore+0x130>
 800b102:	429d      	cmp	r5, r3
 800b104:	d93c      	bls.n	800b180 <lwip_netconn_do_writemore+0x130>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b106:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 800b10a:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b10c:	463b      	mov	r3, r7
 800b10e:	4622      	mov	r2, r4
 800b110:	4631      	mov	r1, r6
 800b112:	f005 fca7 	bl	8010a64 <tcp_write>
      if (err == ERR_OK) {
 800b116:	b1b8      	cbz	r0, 800b148 <lwip_netconn_do_writemore+0xf8>
          }
        }
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	4606      	mov	r6, r0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d947      	bls.n	800b1b2 <lwip_netconn_do_writemore+0x162>
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b122:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b126:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 800b128:	2400      	movs	r4, #0
    conn->current_msg->err = err;
 800b12a:	711e      	strb	r6, [r3, #4]
    conn->state = NETCONN_NONE;
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b12c:	9b01      	ldr	r3, [sp, #4]
    conn->current_msg = NULL;
 800b12e:	f8c8 4020 	str.w	r4, [r8, #32]
    conn->state = NETCONN_NONE;
 800b132:	f888 4001 	strb.w	r4, [r8, #1]
    if (delayed)
 800b136:	2b00      	cmp	r3, #0
 800b138:	f040 8087 	bne.w	800b24a <lwip_netconn_do_writemore+0x1fa>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800b13c:	9801      	ldr	r0, [sp, #4]
}
 800b13e:	b003      	add	sp, #12
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        len = (u16_t)diff;
 800b144:	b2ac      	uxth	r4, r5
 800b146:	e7c8      	b.n	800b0da <lwip_netconn_do_writemore+0x8a>
        conn->current_msg->msg.w.offset += len;
 800b148:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b14c:	6993      	ldr	r3, [r2, #24]
 800b14e:	4423      	add	r3, r4
 800b150:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b152:	6913      	ldr	r3, [r2, #16]
 800b154:	441c      	add	r4, r3
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b156:	6893      	ldr	r3, [r2, #8]
 800b158:	6859      	ldr	r1, [r3, #4]
        conn->current_msg->msg.w.vector_off += len;
 800b15a:	6114      	str	r4, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b15c:	428c      	cmp	r4, r1
 800b15e:	d003      	beq.n	800b168 <lwip_netconn_do_writemore+0x118>
    } while (write_more && err == ERR_OK);
 800b160:	2d00      	cmp	r5, #0
 800b162:	d1ac      	bne.n	800b0be <lwip_netconn_do_writemore+0x6e>
 800b164:	4606      	mov	r6, r0
 800b166:	e026      	b.n	800b1b6 <lwip_netconn_do_writemore+0x166>
          conn->current_msg->msg.w.vector_cnt--;
 800b168:	8991      	ldrh	r1, [r2, #12]
 800b16a:	3901      	subs	r1, #1
 800b16c:	b289      	uxth	r1, r1
 800b16e:	8191      	strh	r1, [r2, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b170:	2900      	cmp	r1, #0
 800b172:	d0f5      	beq.n	800b160 <lwip_netconn_do_writemore+0x110>
            conn->current_msg->msg.w.vector++;
 800b174:	3308      	adds	r3, #8
            conn->current_msg->msg.w.vector_off = 0;
 800b176:	6110      	str	r0, [r2, #16]
            conn->current_msg->msg.w.vector++;
 800b178:	6093      	str	r3, [r2, #8]
    } while (write_more && err == ERR_OK);
 800b17a:	2d00      	cmp	r5, #0
 800b17c:	d19f      	bne.n	800b0be <lwip_netconn_do_writemore+0x6e>
 800b17e:	e7f1      	b.n	800b164 <lwip_netconn_do_writemore+0x114>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b180:	b2ad      	uxth	r5, r5
 800b182:	42a5      	cmp	r5, r4
 800b184:	d00f      	beq.n	800b1a6 <lwip_netconn_do_writemore+0x156>
        write_more = 0;
 800b186:	2500      	movs	r5, #0
 800b188:	e7c0      	b.n	800b10c <lwip_netconn_do_writemore+0xbc>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b18a:	465b      	mov	r3, fp
 800b18c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b190:	4651      	mov	r1, sl
 800b192:	4648      	mov	r0, r9
 800b194:	f009 fd68 	bl	8014c68 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b198:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b19c:	e7ad      	b.n	800b0fa <lwip_netconn_do_writemore+0xaa>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b19e:	f047 0702 	orr.w	r7, r7, #2
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	e7a6      	b.n	800b0f4 <lwip_netconn_do_writemore+0xa4>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b1a6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800b1aa:	899b      	ldrh	r3, [r3, #12]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d8aa      	bhi.n	800b106 <lwip_netconn_do_writemore+0xb6>
 800b1b0:	e7e9      	b.n	800b186 <lwip_netconn_do_writemore+0x136>
err_mem:
 800b1b2:	f04f 36ff 	mov.w	r6, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b1b6:	9b00      	ldr	r3, [sp, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d158      	bne.n	800b26e <lwip_netconn_do_writemore+0x21e>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b1bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1c0:	f640 3269 	movw	r2, #2921	; 0xb69
 800b1c4:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800b1c8:	4291      	cmp	r1, r2
 800b1ca:	d921      	bls.n	800b210 <lwip_netconn_do_writemore+0x1c0>
 800b1cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1d0:	2b07      	cmp	r3, #7
 800b1d2:	d81d      	bhi.n	800b210 <lwip_netconn_do_writemore+0x1c0>
    if (err == ERR_OK) {
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	d17a      	bne.n	800b2ce <lwip_netconn_do_writemore+0x27e>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b1d8:	f8d8 3020 	ldr.w	r3, [r8, #32]
      out_err = tcp_output(conn->pcb.tcp);
 800b1dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b1e0:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d002      	beq.n	800b1ee <lwip_netconn_do_writemore+0x19e>
 800b1e8:	9b00      	ldr	r3, [sp, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d034      	beq.n	800b258 <lwip_netconn_do_writemore+0x208>
      out_err = tcp_output(conn->pcb.tcp);
 800b1ee:	f006 fa57 	bl	80116a0 <tcp_output>
      if (out_err == ERR_RTE) {
 800b1f2:	1d01      	adds	r1, r0, #4
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b1f4:	f8d8 3020 	ldr.w	r3, [r8, #32]
      if (out_err == ERR_RTE) {
 800b1f8:	d195      	bne.n	800b126 <lwip_netconn_do_writemore+0xd6>
        err = out_err;
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	e793      	b.n	800b126 <lwip_netconn_do_writemore+0xd6>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b1fe:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b202:	2b00      	cmp	r3, #0
 800b204:	bf0c      	ite	eq
 800b206:	f06f 0606 	mvneq.w	r6, #6
 800b20a:	2600      	movne	r6, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d334      	bcc.n	800b27a <lwip_netconn_do_writemore+0x22a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b210:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0dd      	beq.n	800b1d4 <lwip_netconn_do_writemore+0x184>
 800b218:	2200      	movs	r2, #0
 800b21a:	2103      	movs	r1, #3
 800b21c:	4640      	mov	r0, r8
 800b21e:	4798      	blx	r3
 800b220:	e7d8      	b.n	800b1d4 <lwip_netconn_do_writemore+0x184>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b222:	f240 6279 	movw	r2, #1657	; 0x679
 800b226:	4b35      	ldr	r3, [pc, #212]	; (800b2fc <lwip_netconn_do_writemore+0x2ac>)
 800b228:	4937      	ldr	r1, [pc, #220]	; (800b308 <lwip_netconn_do_writemore+0x2b8>)
 800b22a:	4836      	ldr	r0, [pc, #216]	; (800b304 <lwip_netconn_do_writemore+0x2b4>)
 800b22c:	f009 fd1c 	bl	8014c68 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 800b230:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b234:	e734      	b.n	800b0a0 <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b236:	f240 6277 	movw	r2, #1655	; 0x677
 800b23a:	4b30      	ldr	r3, [pc, #192]	; (800b2fc <lwip_netconn_do_writemore+0x2ac>)
 800b23c:	4933      	ldr	r1, [pc, #204]	; (800b30c <lwip_netconn_do_writemore+0x2bc>)
 800b23e:	4831      	ldr	r0, [pc, #196]	; (800b304 <lwip_netconn_do_writemore+0x2b4>)
 800b240:	f009 fd12 	bl	8014c68 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b244:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800b248:	e726      	b.n	800b098 <lwip_netconn_do_writemore+0x48>
      sys_sem_signal(op_completed_sem);
 800b24a:	300c      	adds	r0, #12
 800b24c:	f008 fc60 	bl	8013b10 <sys_sem_signal>
  return ERR_OK;
 800b250:	4620      	mov	r0, r4
}
 800b252:	b003      	add	sp, #12
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      out_err = tcp_output(conn->pcb.tcp);
 800b258:	f006 fa22 	bl	80116a0 <tcp_output>
 800b25c:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800b25e:	1d30      	adds	r0, r6, #4
 800b260:	f43f af5f 	beq.w	800b122 <lwip_netconn_do_writemore+0xd2>
    return ERR_MEM;
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b268:	b003      	add	sp, #12
 800b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b26e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800b272:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800b276:	429a      	cmp	r2, r3
 800b278:	d2a0      	bcs.n	800b1bc <lwip_netconn_do_writemore+0x16c>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b27a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b27e:	b11b      	cbz	r3, 800b288 <lwip_netconn_do_writemore+0x238>
 800b280:	2200      	movs	r2, #0
 800b282:	2103      	movs	r1, #3
 800b284:	4640      	mov	r0, r8
 800b286:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b288:	f898 301c 	ldrb.w	r3, [r8, #28]
 800b28c:	f043 0310 	orr.w	r3, r3, #16
 800b290:	f888 301c 	strb.w	r3, [r8, #28]
 800b294:	e79e      	b.n	800b1d4 <lwip_netconn_do_writemore+0x184>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b296:	4b19      	ldr	r3, [pc, #100]	; (800b2fc <lwip_netconn_do_writemore+0x2ac>)
 800b298:	f240 6273 	movw	r2, #1651	; 0x673
 800b29c:	491c      	ldr	r1, [pc, #112]	; (800b310 <lwip_netconn_do_writemore+0x2c0>)
 800b29e:	4819      	ldr	r0, [pc, #100]	; (800b304 <lwip_netconn_do_writemore+0x2b4>)
 800b2a0:	f009 fce2 	bl	8014c68 <iprintf>
 800b2a4:	e6dc      	b.n	800b060 <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b2a6:	4b15      	ldr	r3, [pc, #84]	; (800b2fc <lwip_netconn_do_writemore+0x2ac>)
 800b2a8:	f240 6275 	movw	r2, #1653	; 0x675
 800b2ac:	4919      	ldr	r1, [pc, #100]	; (800b314 <lwip_netconn_do_writemore+0x2c4>)
 800b2ae:	4815      	ldr	r0, [pc, #84]	; (800b304 <lwip_netconn_do_writemore+0x2b4>)
 800b2b0:	f009 fcda 	bl	8014c68 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b2b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f47f aee6 	bne.w	800b08a <lwip_netconn_do_writemore+0x3a>
 800b2be:	4b0f      	ldr	r3, [pc, #60]	; (800b2fc <lwip_netconn_do_writemore+0x2ac>)
 800b2c0:	f240 6276 	movw	r2, #1654	; 0x676
 800b2c4:	4914      	ldr	r1, [pc, #80]	; (800b318 <lwip_netconn_do_writemore+0x2c8>)
 800b2c6:	480f      	ldr	r0, [pc, #60]	; (800b304 <lwip_netconn_do_writemore+0x2b4>)
 800b2c8:	f009 fcce 	bl	8014c68 <iprintf>
 800b2cc:	e6dd      	b.n	800b08a <lwip_netconn_do_writemore+0x3a>
    } else if (err == ERR_MEM) {
 800b2ce:	1c72      	adds	r2, r6, #1
 800b2d0:	f47f af27 	bne.w	800b122 <lwip_netconn_do_writemore+0xd2>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b2d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b2d8:	f006 f9e2 	bl	80116a0 <tcp_output>
      if (out_err == ERR_RTE) {
 800b2dc:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b2de:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800b2e0:	f43f af1f 	beq.w	800b122 <lwip_netconn_do_writemore+0xd2>
      } else if (dontblock) {
 800b2e4:	9b00      	ldr	r3, [sp, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0bc      	beq.n	800b264 <lwip_netconn_do_writemore+0x214>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b2ea:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800b2ee:	699a      	ldr	r2, [r3, #24]
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	bf0c      	ite	eq
 800b2f4:	f06f 0606 	mvneq.w	r6, #6
 800b2f8:	2600      	movne	r6, #0
 800b2fa:	e714      	b.n	800b126 <lwip_netconn_do_writemore+0xd6>
 800b2fc:	08018244 	.word	0x08018244
 800b300:	080182dc 	.word	0x080182dc
 800b304:	08017728 	.word	0x08017728
 800b308:	08018370 	.word	0x08018370
 800b30c:	08018330 	.word	0x08018330
 800b310:	08017818 	.word	0x08017818
 800b314:	080182fc 	.word	0x080182fc
 800b318:	08018318 	.word	0x08018318
 800b31c:	08018398 	.word	0x08018398

0800b320 <lwip_netconn_do_close_internal>:
{
 800b320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b324:	4604      	mov	r4, r0
{
 800b326:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b328:	2800      	cmp	r0, #0
 800b32a:	f000 80e5 	beq.w	800b4f8 <lwip_netconn_do_close_internal+0x1d8>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b32e:	7823      	ldrb	r3, [r4, #0]
 800b330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b334:	2b10      	cmp	r3, #16
 800b336:	d006      	beq.n	800b346 <lwip_netconn_do_close_internal+0x26>
 800b338:	4ba5      	ldr	r3, [pc, #660]	; (800b5d0 <lwip_netconn_do_close_internal+0x2b0>)
 800b33a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b33e:	49a5      	ldr	r1, [pc, #660]	; (800b5d4 <lwip_netconn_do_close_internal+0x2b4>)
 800b340:	48a5      	ldr	r0, [pc, #660]	; (800b5d8 <lwip_netconn_do_close_internal+0x2b8>)
 800b342:	f009 fc91 	bl	8014c68 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b346:	7863      	ldrb	r3, [r4, #1]
 800b348:	2b04      	cmp	r3, #4
 800b34a:	d006      	beq.n	800b35a <lwip_netconn_do_close_internal+0x3a>
 800b34c:	4ba0      	ldr	r3, [pc, #640]	; (800b5d0 <lwip_netconn_do_close_internal+0x2b0>)
 800b34e:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b352:	49a2      	ldr	r1, [pc, #648]	; (800b5dc <lwip_netconn_do_close_internal+0x2bc>)
 800b354:	48a0      	ldr	r0, [pc, #640]	; (800b5d8 <lwip_netconn_do_close_internal+0x2b8>)
 800b356:	f009 fc87 	bl	8014c68 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 80d3 	beq.w	800b508 <lwip_netconn_do_close_internal+0x1e8>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b362:	6a23      	ldr	r3, [r4, #32]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 80da 	beq.w	800b51e <lwip_netconn_do_close_internal+0x1fe>
  shut = conn->current_msg->msg.sd.shut;
 800b36a:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 800b36c:	6866      	ldr	r6, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 800b36e:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800b370:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800b374:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800b378:	d04f      	beq.n	800b41a <lwip_netconn_do_close_internal+0xfa>
  } else if (shut_rx &&
 800b37a:	b12f      	cbz	r7, 800b388 <lwip_netconn_do_close_internal+0x68>
             ((tpcb->state == FIN_WAIT_1) ||
 800b37c:	7d33      	ldrb	r3, [r6, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b37e:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 800b380:	2a01      	cmp	r2, #1
 800b382:	d94a      	bls.n	800b41a <lwip_netconn_do_close_internal+0xfa>
 800b384:	2b08      	cmp	r3, #8
 800b386:	d048      	beq.n	800b41a <lwip_netconn_do_close_internal+0xfa>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b388:	f1b8 0f00 	cmp.w	r8, #0
 800b38c:	d120      	bne.n	800b3d0 <lwip_netconn_do_close_internal+0xb0>
  if (tpcb->state == LISTEN) {
 800b38e:	7d33      	ldrb	r3, [r6, #20]
 800b390:	2b01      	cmp	r3, #1
 800b392:	f000 809d 	beq.w	800b4d0 <lwip_netconn_do_close_internal+0x1b0>
    if (shut_rx) {
 800b396:	2f00      	cmp	r7, #0
 800b398:	f040 8096 	bne.w	800b4c8 <lwip_netconn_do_close_internal+0x1a8>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b39c:	4642      	mov	r2, r8
 800b39e:	4639      	mov	r1, r7
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f003 fc57 	bl	800ec54 <tcp_shutdown>
 800b3a6:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	f000 809e 	beq.w	800b4ea <lwip_netconn_do_close_internal+0x1ca>
    if (err == ERR_MEM) {
 800b3ae:	1c42      	adds	r2, r0, #1
 800b3b0:	d147      	bne.n	800b442 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b3b2:	6a22      	ldr	r2, [r4, #32]
 800b3b4:	7a53      	ldrb	r3, [r2, #9]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 80dd 	bne.w	800b576 <lwip_netconn_do_close_internal+0x256>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b3bc:	6816      	ldr	r6, [r2, #0]
    conn->current_msg->err = err;
 800b3be:	7110      	strb	r0, [r2, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b3c0:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 800b3c2:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800b3c4:	7063      	strb	r3, [r4, #1]
    if (delayed)
 800b3c6:	2d00      	cmp	r5, #0
 800b3c8:	d144      	bne.n	800b454 <lwip_netconn_do_close_internal+0x134>
    return ERR_OK;
 800b3ca:	2000      	movs	r0, #0
}
 800b3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b3d0:	8b71      	ldrh	r1, [r6, #26]
 800b3d2:	f011 0910 	ands.w	r9, r1, #16
 800b3d6:	d06d      	beq.n	800b4b4 <lwip_netconn_do_close_internal+0x194>
    tcp_arg(tpcb, NULL);
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f002 fd64 	bl	800dea8 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800b3e0:	7d33      	ldrb	r3, [r6, #20]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d021      	beq.n	800b42a <lwip_netconn_do_close_internal+0x10a>
    if (shut_rx) {
 800b3e6:	2f00      	cmp	r7, #0
 800b3e8:	f040 80e8 	bne.w	800b5bc <lwip_netconn_do_close_internal+0x29c>
      tcp_sent(tpcb, NULL);
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f002 fd7c 	bl	800deec <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	f002 fdb7 	bl	800df6c <tcp_poll>
      tcp_err(tpcb, NULL);
 800b3fe:	2100      	movs	r1, #0
 800b400:	4630      	mov	r0, r6
 800b402:	f002 fd8d 	bl	800df20 <tcp_err>
      err = tcp_close(tpcb);
 800b406:	4630      	mov	r0, r6
 800b408:	f003 fc02 	bl	800ec10 <tcp_close>
 800b40c:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 800b40e:	b9b0      	cbnz	r0, 800b43e <lwip_netconn_do_close_internal+0x11e>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b410:	6a23      	ldr	r3, [r4, #32]
 800b412:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 800b414:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b416:	360c      	adds	r6, #12
      if (shut_close) {
 800b418:	e02f      	b.n	800b47a <lwip_netconn_do_close_internal+0x15a>
    tcp_arg(tpcb, NULL);
 800b41a:	2100      	movs	r1, #0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f002 fd43 	bl	800dea8 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800b422:	7d33      	ldrb	r3, [r6, #20]
 800b424:	2b01      	cmp	r3, #1
 800b426:	f040 8083 	bne.w	800b530 <lwip_netconn_do_close_internal+0x210>
    tcp_accept(tpcb, NULL);
 800b42a:	2100      	movs	r1, #0
 800b42c:	4630      	mov	r0, r6
 800b42e:	f002 fd91 	bl	800df54 <tcp_accept>
      err = tcp_close(tpcb);
 800b432:	4630      	mov	r0, r6
 800b434:	f003 fbec 	bl	800ec10 <tcp_close>
 800b438:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0e8      	beq.n	800b410 <lwip_netconn_do_close_internal+0xf0>
    if (err == ERR_MEM) {
 800b43e:	3001      	adds	r0, #1
 800b440:	d00c      	beq.n	800b45c <lwip_netconn_do_close_internal+0x13c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b442:	6a22      	ldr	r2, [r4, #32]
 800b444:	6816      	ldr	r6, [r2, #0]
    conn->current_msg->err = err;
 800b446:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 800b448:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b44a:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 800b44c:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800b44e:	7063      	strb	r3, [r4, #1]
    if (delayed)
 800b450:	2d00      	cmp	r5, #0
 800b452:	d0ba      	beq.n	800b3ca <lwip_netconn_do_close_internal+0xaa>
      sys_sem_signal(op_completed_sem);
 800b454:	4630      	mov	r0, r6
 800b456:	f008 fb5b 	bl	8013b10 <sys_sem_signal>
 800b45a:	e7b6      	b.n	800b3ca <lwip_netconn_do_close_internal+0xaa>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b45c:	6a23      	ldr	r3, [r4, #32]
 800b45e:	f893 9009 	ldrb.w	r9, [r3, #9]
 800b462:	f1b9 0f00 	cmp.w	r9, #0
 800b466:	f040 8086 	bne.w	800b576 <lwip_netconn_do_close_internal+0x256>
          tcp_abort(tpcb);
 800b46a:	4630      	mov	r0, r6
 800b46c:	f003 f9ea 	bl	800e844 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b470:	6a23      	ldr	r3, [r4, #32]
 800b472:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 800b474:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b478:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 800b47a:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    conn->current_msg = NULL;
 800b47e:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 800b480:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 800b482:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b484:	2b00      	cmp	r3, #0
 800b486:	d060      	beq.n	800b54a <lwip_netconn_do_close_internal+0x22a>
 800b488:	2104      	movs	r1, #4
 800b48a:	4620      	mov	r0, r4
 800b48c:	4798      	blx	r3
      if (shut_rx) {
 800b48e:	b137      	cbz	r7, 800b49e <lwip_netconn_do_close_internal+0x17e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b492:	2b00      	cmp	r3, #0
 800b494:	d097      	beq.n	800b3c6 <lwip_netconn_do_close_internal+0xa6>
 800b496:	2200      	movs	r2, #0
 800b498:	4620      	mov	r0, r4
 800b49a:	4611      	mov	r1, r2
 800b49c:	4798      	blx	r3
      if (shut_tx) {
 800b49e:	f1b8 0f00 	cmp.w	r8, #0
 800b4a2:	d090      	beq.n	800b3c6 <lwip_netconn_do_close_internal+0xa6>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b4a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d08d      	beq.n	800b3c6 <lwip_netconn_do_close_internal+0xa6>
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	2102      	movs	r1, #2
 800b4b0:	4798      	blx	r3
 800b4b2:	e788      	b.n	800b3c6 <lwip_netconn_do_close_internal+0xa6>
  if (tpcb->state == LISTEN) {
 800b4b4:	7d33      	ldrb	r3, [r6, #20]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d058      	beq.n	800b56c <lwip_netconn_do_close_internal+0x24c>
    if (shut_rx) {
 800b4ba:	2f00      	cmp	r7, #0
 800b4bc:	d149      	bne.n	800b552 <lwip_netconn_do_close_internal+0x232>
      tcp_sent(tpcb, NULL);
 800b4be:	4639      	mov	r1, r7
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f002 fd13 	bl	800deec <tcp_sent>
    if (shut_close) {
 800b4c6:	e769      	b.n	800b39c <lwip_netconn_do_close_internal+0x7c>
      tcp_recv(tpcb, NULL);
 800b4c8:	4641      	mov	r1, r8
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f002 fcf4 	bl	800deb8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b4d0:	4641      	mov	r1, r8
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f002 fd3e 	bl	800df54 <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b4d8:	4642      	mov	r2, r8
 800b4da:	4639      	mov	r1, r7
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f003 fbb9 	bl	800ec54 <tcp_shutdown>
 800b4e2:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	f47f af62 	bne.w	800b3ae <lwip_netconn_do_close_internal+0x8e>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b4ea:	6a23      	ldr	r3, [r4, #32]
 800b4ec:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 800b4ee:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b4f0:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 800b4f2:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 800b4f4:	7060      	strb	r0, [r4, #1]
 800b4f6:	e7ca      	b.n	800b48e <lwip_netconn_do_close_internal+0x16e>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b4f8:	4b35      	ldr	r3, [pc, #212]	; (800b5d0 <lwip_netconn_do_close_internal+0x2b0>)
 800b4fa:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b4fe:	4938      	ldr	r1, [pc, #224]	; (800b5e0 <lwip_netconn_do_close_internal+0x2c0>)
 800b500:	4835      	ldr	r0, [pc, #212]	; (800b5d8 <lwip_netconn_do_close_internal+0x2b8>)
 800b502:	f009 fbb1 	bl	8014c68 <iprintf>
 800b506:	e712      	b.n	800b32e <lwip_netconn_do_close_internal+0xe>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b508:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <lwip_netconn_do_close_internal+0x2b0>)
 800b50a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b50e:	4935      	ldr	r1, [pc, #212]	; (800b5e4 <lwip_netconn_do_close_internal+0x2c4>)
 800b510:	4831      	ldr	r0, [pc, #196]	; (800b5d8 <lwip_netconn_do_close_internal+0x2b8>)
 800b512:	f009 fba9 	bl	8014c68 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b516:	6a23      	ldr	r3, [r4, #32]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f47f af26 	bne.w	800b36a <lwip_netconn_do_close_internal+0x4a>
 800b51e:	4b2c      	ldr	r3, [pc, #176]	; (800b5d0 <lwip_netconn_do_close_internal+0x2b0>)
 800b520:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b524:	4930      	ldr	r1, [pc, #192]	; (800b5e8 <lwip_netconn_do_close_internal+0x2c8>)
 800b526:	482c      	ldr	r0, [pc, #176]	; (800b5d8 <lwip_netconn_do_close_internal+0x2b8>)
 800b528:	f009 fb9e 	bl	8014c68 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800b52c:	6a23      	ldr	r3, [r4, #32]
 800b52e:	e71c      	b.n	800b36a <lwip_netconn_do_close_internal+0x4a>
      tcp_recv(tpcb, NULL);
 800b530:	2100      	movs	r1, #0
 800b532:	4630      	mov	r0, r6
 800b534:	f002 fcc0 	bl	800deb8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b538:	2100      	movs	r1, #0
 800b53a:	4630      	mov	r0, r6
 800b53c:	f002 fd0a 	bl	800df54 <tcp_accept>
    if (shut_tx) {
 800b540:	f1b8 0f00 	cmp.w	r8, #0
 800b544:	f47f af52 	bne.w	800b3ec <lwip_netconn_do_close_internal+0xcc>
 800b548:	e754      	b.n	800b3f4 <lwip_netconn_do_close_internal+0xd4>
      if (shut_rx) {
 800b54a:	2f00      	cmp	r7, #0
 800b54c:	f47f af3b 	bne.w	800b3c6 <lwip_netconn_do_close_internal+0xa6>
 800b550:	e7a5      	b.n	800b49e <lwip_netconn_do_close_internal+0x17e>
      tcp_recv(tpcb, NULL);
 800b552:	4649      	mov	r1, r9
 800b554:	4630      	mov	r0, r6
 800b556:	f002 fcaf 	bl	800deb8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b55a:	4649      	mov	r1, r9
 800b55c:	4630      	mov	r0, r6
 800b55e:	f002 fcf9 	bl	800df54 <tcp_accept>
      tcp_sent(tpcb, NULL);
 800b562:	4649      	mov	r1, r9
 800b564:	4630      	mov	r0, r6
 800b566:	f002 fcc1 	bl	800deec <tcp_sent>
    if (shut_close) {
 800b56a:	e717      	b.n	800b39c <lwip_netconn_do_close_internal+0x7c>
    tcp_accept(tpcb, NULL);
 800b56c:	4649      	mov	r1, r9
 800b56e:	4630      	mov	r0, r6
 800b570:	f002 fcf0 	bl	800df54 <tcp_accept>
  if (shut_close) {
 800b574:	e712      	b.n	800b39c <lwip_netconn_do_close_internal+0x7c>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b576:	7d33      	ldrb	r3, [r6, #20]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d012      	beq.n	800b5a2 <lwip_netconn_do_close_internal+0x282>
    if (shut_tx) {
 800b57c:	f1b8 0f00 	cmp.w	r8, #0
 800b580:	d117      	bne.n	800b5b2 <lwip_netconn_do_close_internal+0x292>
    tcp_poll(tpcb, poll_tcp, 1);
 800b582:	2201      	movs	r2, #1
 800b584:	4919      	ldr	r1, [pc, #100]	; (800b5ec <lwip_netconn_do_close_internal+0x2cc>)
 800b586:	4630      	mov	r0, r6
 800b588:	f002 fcf0 	bl	800df6c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b58c:	4918      	ldr	r1, [pc, #96]	; (800b5f0 <lwip_netconn_do_close_internal+0x2d0>)
 800b58e:	4630      	mov	r0, r6
 800b590:	f002 fcc6 	bl	800df20 <tcp_err>
    tcp_arg(tpcb, conn);
 800b594:	4630      	mov	r0, r6
 800b596:	4621      	mov	r1, r4
 800b598:	f002 fc86 	bl	800dea8 <tcp_arg>
  return err;
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	e714      	b.n	800b3cc <lwip_netconn_do_close_internal+0xac>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b5a2:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <lwip_netconn_do_close_internal+0x2b0>)
 800b5a4:	f240 4241 	movw	r2, #1089	; 0x441
 800b5a8:	4912      	ldr	r1, [pc, #72]	; (800b5f4 <lwip_netconn_do_close_internal+0x2d4>)
 800b5aa:	480b      	ldr	r0, [pc, #44]	; (800b5d8 <lwip_netconn_do_close_internal+0x2b8>)
 800b5ac:	f009 fb5c 	bl	8014c68 <iprintf>
 800b5b0:	e7e4      	b.n	800b57c <lwip_netconn_do_close_internal+0x25c>
      tcp_sent(tpcb, sent_tcp);
 800b5b2:	4911      	ldr	r1, [pc, #68]	; (800b5f8 <lwip_netconn_do_close_internal+0x2d8>)
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f002 fc99 	bl	800deec <tcp_sent>
 800b5ba:	e7e2      	b.n	800b582 <lwip_netconn_do_close_internal+0x262>
      tcp_recv(tpcb, NULL);
 800b5bc:	4630      	mov	r0, r6
 800b5be:	2100      	movs	r1, #0
 800b5c0:	f002 fc7a 	bl	800deb8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f002 fcc4 	bl	800df54 <tcp_accept>
    if (shut_tx) {
 800b5cc:	e70e      	b.n	800b3ec <lwip_netconn_do_close_internal+0xcc>
 800b5ce:	bf00      	nop
 800b5d0:	08018244 	.word	0x08018244
 800b5d4:	080183c4 	.word	0x080183c4
 800b5d8:	08017728 	.word	0x08017728
 800b5dc:	080183e4 	.word	0x080183e4
 800b5e0:	08018174 	.word	0x08018174
 800b5e4:	08018408 	.word	0x08018408
 800b5e8:	080182fc 	.word	0x080182fc
 800b5ec:	0800b5fd 	.word	0x0800b5fd
 800b5f0:	0800b7e9 	.word	0x0800b7e9
 800b5f4:	0801841c 	.word	0x0801841c
 800b5f8:	0800b67d 	.word	0x0800b67d

0800b5fc <poll_tcp>:
{
 800b5fc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b5fe:	4604      	mov	r4, r0
 800b600:	b368      	cbz	r0, 800b65e <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 800b602:	7861      	ldrb	r1, [r4, #1]
 800b604:	2901      	cmp	r1, #1
 800b606:	d026      	beq.n	800b656 <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 800b608:	2904      	cmp	r1, #4
 800b60a:	d019      	beq.n	800b640 <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b60c:	7f23      	ldrb	r3, [r4, #28]
 800b60e:	06da      	lsls	r2, r3, #27
 800b610:	d514      	bpl.n	800b63c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b612:	6862      	ldr	r2, [r4, #4]
 800b614:	b192      	cbz	r2, 800b63c <poll_tcp+0x40>
 800b616:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 800b61a:	f640 3169 	movw	r1, #2921	; 0xb69
 800b61e:	4288      	cmp	r0, r1
 800b620:	d90c      	bls.n	800b63c <poll_tcp+0x40>
 800b622:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800b626:	2a07      	cmp	r2, #7
 800b628:	d808      	bhi.n	800b63c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b62a:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b62e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b630:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b632:	b11d      	cbz	r5, 800b63c <poll_tcp+0x40>
 800b634:	2200      	movs	r2, #0
 800b636:	2102      	movs	r1, #2
 800b638:	4620      	mov	r0, r4
 800b63a:	47a8      	blx	r5
}
 800b63c:	2000      	movs	r0, #0
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b640:	6a23      	ldr	r3, [r4, #32]
 800b642:	b11b      	cbz	r3, 800b64c <poll_tcp+0x50>
 800b644:	7a5a      	ldrb	r2, [r3, #9]
 800b646:	b10a      	cbz	r2, 800b64c <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 800b648:	3a01      	subs	r2, #1
 800b64a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b64c:	2101      	movs	r1, #1
 800b64e:	4620      	mov	r0, r4
 800b650:	f7ff fe66 	bl	800b320 <lwip_netconn_do_close_internal>
 800b654:	e7da      	b.n	800b60c <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b656:	4620      	mov	r0, r4
 800b658:	f7ff fcfa 	bl	800b050 <lwip_netconn_do_writemore>
 800b65c:	e7d6      	b.n	800b60c <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b65e:	4b04      	ldr	r3, [pc, #16]	; (800b670 <poll_tcp+0x74>)
 800b660:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b664:	4903      	ldr	r1, [pc, #12]	; (800b674 <poll_tcp+0x78>)
 800b666:	4804      	ldr	r0, [pc, #16]	; (800b678 <poll_tcp+0x7c>)
 800b668:	f009 fafe 	bl	8014c68 <iprintf>
 800b66c:	e7c9      	b.n	800b602 <poll_tcp+0x6>
 800b66e:	bf00      	nop
 800b670:	08018244 	.word	0x08018244
 800b674:	08017818 	.word	0x08017818
 800b678:	08017728 	.word	0x08017728

0800b67c <sent_tcp>:
{
 800b67c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b67e:	b328      	cbz	r0, 800b6cc <sent_tcp+0x50>
    if (conn->state == NETCONN_WRITE) {
 800b680:	7841      	ldrb	r1, [r0, #1]
 800b682:	4604      	mov	r4, r0
 800b684:	4615      	mov	r5, r2
 800b686:	2901      	cmp	r1, #1
 800b688:	d029      	beq.n	800b6de <sent_tcp+0x62>
    } else if (conn->state == NETCONN_CLOSE) {
 800b68a:	2904      	cmp	r1, #4
 800b68c:	d017      	beq.n	800b6be <sent_tcp+0x42>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b68e:	6863      	ldr	r3, [r4, #4]
 800b690:	b19b      	cbz	r3, 800b6ba <sent_tcp+0x3e>
 800b692:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800b696:	f640 3269 	movw	r2, #2921	; 0xb69
 800b69a:	4291      	cmp	r1, r2
 800b69c:	d90d      	bls.n	800b6ba <sent_tcp+0x3e>
 800b69e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6a2:	2b07      	cmp	r3, #7
 800b6a4:	d809      	bhi.n	800b6ba <sent_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b6a6:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b6a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b6aa:	f023 0310 	bic.w	r3, r3, #16
 800b6ae:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b6b0:	b11e      	cbz	r6, 800b6ba <sent_tcp+0x3e>
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	2102      	movs	r1, #2
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	47b0      	blx	r6
}
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b6be:	2101      	movs	r1, #1
 800b6c0:	f7ff fe2e 	bl	800b320 <lwip_netconn_do_close_internal>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1e3      	bne.n	800b692 <sent_tcp+0x16>
 800b6ca:	e7f6      	b.n	800b6ba <sent_tcp+0x3e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b6cc:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <sent_tcp+0x70>)
 800b6ce:	f240 1293 	movw	r2, #403	; 0x193
 800b6d2:	4907      	ldr	r1, [pc, #28]	; (800b6f0 <sent_tcp+0x74>)
 800b6d4:	4807      	ldr	r0, [pc, #28]	; (800b6f4 <sent_tcp+0x78>)
 800b6d6:	f009 fac7 	bl	8014c68 <iprintf>
}
 800b6da:	2000      	movs	r0, #0
 800b6dc:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b6de:	f7ff fcb7 	bl	800b050 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b6e2:	6863      	ldr	r3, [r4, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1d4      	bne.n	800b692 <sent_tcp+0x16>
 800b6e8:	e7e7      	b.n	800b6ba <sent_tcp+0x3e>
 800b6ea:	bf00      	nop
 800b6ec:	08018244 	.word	0x08018244
 800b6f0:	08017818 	.word	0x08017818
 800b6f4:	08017728 	.word	0x08017728

0800b6f8 <recv_tcp>:
{
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	4605      	mov	r5, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b6fe:	460f      	mov	r7, r1
{
 800b700:	4616      	mov	r6, r2
 800b702:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b704:	2900      	cmp	r1, #0
 800b706:	d038      	beq.n	800b77a <recv_tcp+0x82>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b708:	2d00      	cmp	r5, #0
 800b70a:	d03f      	beq.n	800b78c <recv_tcp+0x94>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b70c:	2c00      	cmp	r4, #0
 800b70e:	d14f      	bne.n	800b7b0 <recv_tcp+0xb8>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b710:	686b      	ldr	r3, [r5, #4]
 800b712:	42bb      	cmp	r3, r7
 800b714:	d006      	beq.n	800b724 <recv_tcp+0x2c>
 800b716:	4b2d      	ldr	r3, [pc, #180]	; (800b7cc <recv_tcp+0xd4>)
 800b718:	f240 1235 	movw	r2, #309	; 0x135
 800b71c:	492c      	ldr	r1, [pc, #176]	; (800b7d0 <recv_tcp+0xd8>)
 800b71e:	482d      	ldr	r0, [pc, #180]	; (800b7d4 <recv_tcp+0xdc>)
 800b720:	f009 faa2 	bl	8014c68 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b724:	f105 0810 	add.w	r8, r5, #16
 800b728:	4640      	mov	r0, r8
 800b72a:	f008 f9b5 	bl	8013a98 <sys_mbox_valid>
 800b72e:	4604      	mov	r4, r0
 800b730:	b188      	cbz	r0, 800b756 <recv_tcp+0x5e>
  if (p != NULL) {
 800b732:	b1ae      	cbz	r6, 800b760 <recv_tcp+0x68>
    len = p->tot_len;
 800b734:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b736:	4631      	mov	r1, r6
 800b738:	4640      	mov	r0, r8
 800b73a:	f008 f971 	bl	8013a20 <sys_mbox_trypost>
 800b73e:	4604      	mov	r4, r0
 800b740:	2800      	cmp	r0, #0
 800b742:	d13d      	bne.n	800b7c0 <recv_tcp+0xc8>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b744:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b746:	b13b      	cbz	r3, 800b758 <recv_tcp+0x60>
 800b748:	4601      	mov	r1, r0
 800b74a:	463a      	mov	r2, r7
 800b74c:	4628      	mov	r0, r5
 800b74e:	4798      	blx	r3
}
 800b750:	4620      	mov	r0, r4
 800b752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (p != NULL) {
 800b756:	b936      	cbnz	r6, 800b766 <recv_tcp+0x6e>
    return ERR_OK;
 800b758:	2400      	movs	r4, #0
}
 800b75a:	4620      	mov	r0, r4
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b760:	4e1d      	ldr	r6, [pc, #116]	; (800b7d8 <recv_tcp+0xe0>)
    len = 0;
 800b762:	2700      	movs	r7, #0
 800b764:	e7e7      	b.n	800b736 <recv_tcp+0x3e>
      tcp_recved(pcb, p->tot_len);
 800b766:	8931      	ldrh	r1, [r6, #8]
 800b768:	4638      	mov	r0, r7
 800b76a:	f002 fa65 	bl	800dc38 <tcp_recved>
      pbuf_free(p);
 800b76e:	4630      	mov	r0, r6
 800b770:	f001 fdf2 	bl	800d358 <pbuf_free>
}
 800b774:	4620      	mov	r0, r4
 800b776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b77a:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <recv_tcp+0xd4>)
 800b77c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b780:	4916      	ldr	r1, [pc, #88]	; (800b7dc <recv_tcp+0xe4>)
 800b782:	4814      	ldr	r0, [pc, #80]	; (800b7d4 <recv_tcp+0xdc>)
 800b784:	f009 fa70 	bl	8014c68 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b788:	2d00      	cmp	r5, #0
 800b78a:	d1bf      	bne.n	800b70c <recv_tcp+0x14>
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <recv_tcp+0xd4>)
 800b78e:	f240 122d 	movw	r2, #301	; 0x12d
 800b792:	4913      	ldr	r1, [pc, #76]	; (800b7e0 <recv_tcp+0xe8>)
 800b794:	480f      	ldr	r0, [pc, #60]	; (800b7d4 <recv_tcp+0xdc>)
 800b796:	f009 fa67 	bl	8014c68 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b79a:	b1a4      	cbz	r4, 800b7c6 <recv_tcp+0xce>
 800b79c:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <recv_tcp+0xd4>)
 800b79e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b7a2:	4910      	ldr	r1, [pc, #64]	; (800b7e4 <recv_tcp+0xec>)
    return ERR_VAL;
 800b7a4:	f06f 0405 	mvn.w	r4, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b7a8:	480a      	ldr	r0, [pc, #40]	; (800b7d4 <recv_tcp+0xdc>)
 800b7aa:	f009 fa5d 	bl	8014c68 <iprintf>
  if (conn == NULL) {
 800b7ae:	e7cf      	b.n	800b750 <recv_tcp+0x58>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <recv_tcp+0xd4>)
 800b7b2:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b7b6:	490b      	ldr	r1, [pc, #44]	; (800b7e4 <recv_tcp+0xec>)
 800b7b8:	4806      	ldr	r0, [pc, #24]	; (800b7d4 <recv_tcp+0xdc>)
 800b7ba:	f009 fa55 	bl	8014c68 <iprintf>
  if (conn == NULL) {
 800b7be:	e7a7      	b.n	800b710 <recv_tcp+0x18>
    return ERR_MEM;
 800b7c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b7c4:	e7c4      	b.n	800b750 <recv_tcp+0x58>
    return ERR_VAL;
 800b7c6:	f06f 0405 	mvn.w	r4, #5
 800b7ca:	e7c1      	b.n	800b750 <recv_tcp+0x58>
 800b7cc:	08018244 	.word	0x08018244
 800b7d0:	08018484 	.word	0x08018484
 800b7d4:	08017728 	.word	0x08017728
 800b7d8:	08018661 	.word	0x08018661
 800b7dc:	08018440 	.word	0x08018440
 800b7e0:	08018464 	.word	0x08018464
 800b7e4:	080184a4 	.word	0x080184a4

0800b7e8 <err_tcp>:
{
 800b7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b7ec:	4604      	mov	r4, r0
{
 800b7ee:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d07a      	beq.n	800b8ea <err_tcp+0x102>
  SYS_ARCH_PROTECT(lev);
 800b7f4:	f008 f9d4 	bl	8013ba0 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b7f8:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 800b7fa:	2600      	movs	r6, #0
  old_state = conn->state;
 800b7fc:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800b802:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 800b804:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b806:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 800b808:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800b80a:	f008 f9d5 	bl	8013bb8 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b810:	b17b      	cbz	r3, 800b832 <err_tcp+0x4a>
 800b812:	4632      	mov	r2, r6
 800b814:	2104      	movs	r1, #4
 800b816:	4620      	mov	r0, r4
 800b818:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b81c:	b14b      	cbz	r3, 800b832 <err_tcp+0x4a>
 800b81e:	4632      	mov	r2, r6
 800b820:	4631      	mov	r1, r6
 800b822:	4620      	mov	r0, r4
 800b824:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b828:	b11b      	cbz	r3, 800b832 <err_tcp+0x4a>
 800b82a:	4632      	mov	r2, r6
 800b82c:	2102      	movs	r1, #2
 800b82e:	4620      	mov	r0, r4
 800b830:	4798      	blx	r3
  switch (err) {
 800b832:	f105 030f 	add.w	r3, r5, #15
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d834      	bhi.n	800b8a6 <err_tcp+0xbe>
 800b83c:	4a3c      	ldr	r2, [pc, #240]	; (800b930 <err_tcp+0x148>)
 800b83e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b842:	f104 0610 	add.w	r6, r4, #16
 800b846:	4630      	mov	r0, r6
 800b848:	f008 f926 	bl	8013a98 <sys_mbox_valid>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d133      	bne.n	800b8b8 <err_tcp+0xd0>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b850:	f104 0614 	add.w	r6, r4, #20
 800b854:	4630      	mov	r0, r6
 800b856:	f008 f91f 	bl	8013a98 <sys_mbox_valid>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d137      	bne.n	800b8ce <err_tcp+0xe6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b85e:	1efb      	subs	r3, r7, #3
 800b860:	2b01      	cmp	r3, #1
 800b862:	d901      	bls.n	800b868 <err_tcp+0x80>
 800b864:	2f01      	cmp	r7, #1
 800b866:	d11a      	bne.n	800b89e <err_tcp+0xb6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b868:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b86a:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800b86e:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b870:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800b872:	d416      	bmi.n	800b8a2 <err_tcp+0xba>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b874:	6a23      	ldr	r3, [r4, #32]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d050      	beq.n	800b91c <err_tcp+0x134>
      if (old_state == NETCONN_CLOSE) {
 800b87a:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b87c:	681e      	ldr	r6, [r3, #0]
      if (old_state == NETCONN_CLOSE) {
 800b87e:	bf08      	it	eq
 800b880:	2500      	moveq	r5, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b882:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 800b884:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b886:	4630      	mov	r0, r6
 800b888:	f008 f94a 	bl	8013b20 <sys_sem_valid>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d03d      	beq.n	800b90c <err_tcp+0x124>
      conn->current_msg = NULL;
 800b890:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 800b892:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 800b894:	6223      	str	r3, [r4, #32]
}
 800b896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800b89a:	f008 b939 	b.w	8013b10 <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b89e:	6a23      	ldr	r3, [r4, #32]
 800b8a0:	b9d3      	cbnz	r3, 800b8d8 <err_tcp+0xf0>
}
 800b8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b8a6:	bb45      	cbnz	r5, 800b8fa <err_tcp+0x112>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b8a8:	f104 0610 	add.w	r6, r4, #16
      return NULL;
 800b8ac:	46a8      	mov	r8, r5
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f008 f8f2 	bl	8013a98 <sys_mbox_valid>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d0cb      	beq.n	800b850 <err_tcp+0x68>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b8b8:	4630      	mov	r0, r6
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b8ba:	f104 0614 	add.w	r6, r4, #20
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b8be:	4641      	mov	r1, r8
 800b8c0:	f008 f8ae 	bl	8013a20 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f008 f8e7 	bl	8013a98 <sys_mbox_valid>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d0c7      	beq.n	800b85e <err_tcp+0x76>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b8ce:	4641      	mov	r1, r8
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	f008 f8a5 	bl	8013a20 <sys_mbox_trypost>
 800b8d6:	e7c2      	b.n	800b85e <err_tcp+0x76>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b8d8:	4b16      	ldr	r3, [pc, #88]	; (800b934 <err_tcp+0x14c>)
 800b8da:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b8de:	4916      	ldr	r1, [pc, #88]	; (800b938 <err_tcp+0x150>)
 800b8e0:	4816      	ldr	r0, [pc, #88]	; (800b93c <err_tcp+0x154>)
}
 800b8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b8e6:	f009 b9bf 	b.w	8014c68 <iprintf>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b8ea:	4b12      	ldr	r3, [pc, #72]	; (800b934 <err_tcp+0x14c>)
 800b8ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b8f0:	4913      	ldr	r1, [pc, #76]	; (800b940 <err_tcp+0x158>)
 800b8f2:	4812      	ldr	r0, [pc, #72]	; (800b93c <err_tcp+0x154>)
 800b8f4:	f009 f9b8 	bl	8014c68 <iprintf>
 800b8f8:	e77c      	b.n	800b7f4 <err_tcp+0xc>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b8fa:	4b0e      	ldr	r3, [pc, #56]	; (800b934 <err_tcp+0x14c>)
 800b8fc:	227d      	movs	r2, #125	; 0x7d
 800b8fe:	4911      	ldr	r1, [pc, #68]	; (800b944 <err_tcp+0x15c>)
 800b900:	f04f 0800 	mov.w	r8, #0
 800b904:	480d      	ldr	r0, [pc, #52]	; (800b93c <err_tcp+0x154>)
 800b906:	f009 f9af 	bl	8014c68 <iprintf>
 800b90a:	e79a      	b.n	800b842 <err_tcp+0x5a>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b90c:	4b09      	ldr	r3, [pc, #36]	; (800b934 <err_tcp+0x14c>)
 800b90e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b912:	490d      	ldr	r1, [pc, #52]	; (800b948 <err_tcp+0x160>)
 800b914:	4809      	ldr	r0, [pc, #36]	; (800b93c <err_tcp+0x154>)
 800b916:	f009 f9a7 	bl	8014c68 <iprintf>
 800b91a:	e7b9      	b.n	800b890 <err_tcp+0xa8>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b91c:	4b05      	ldr	r3, [pc, #20]	; (800b934 <err_tcp+0x14c>)
 800b91e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b922:	490a      	ldr	r1, [pc, #40]	; (800b94c <err_tcp+0x164>)
 800b924:	4805      	ldr	r0, [pc, #20]	; (800b93c <err_tcp+0x154>)
 800b926:	f009 f99f 	bl	8014c68 <iprintf>
        conn->current_msg->err = ERR_OK;
 800b92a:	6a23      	ldr	r3, [r4, #32]
 800b92c:	e7a5      	b.n	800b87a <err_tcp+0x92>
 800b92e:	bf00      	nop
 800b930:	08018654 	.word	0x08018654
 800b934:	08018244 	.word	0x08018244
 800b938:	080184e8 	.word	0x080184e8
 800b93c:	08017728 	.word	0x08017728
 800b940:	08017818 	.word	0x08017818
 800b944:	080184bc 	.word	0x080184bc
 800b948:	080184cc 	.word	0x080184cc
 800b94c:	080182fc 	.word	0x080182fc

0800b950 <lwip_netconn_is_err_msg>:
{
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800b954:	460d      	mov	r5, r1
 800b956:	b171      	cbz	r1, 800b976 <lwip_netconn_is_err_msg+0x26>
  if (msg == &netconn_aborted) {
 800b958:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <lwip_netconn_is_err_msg+0x44>)
 800b95a:	429c      	cmp	r4, r3
 800b95c:	d007      	beq.n	800b96e <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 800b95e:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <lwip_netconn_is_err_msg+0x48>)
 800b960:	429c      	cmp	r4, r3
 800b962:	d00f      	beq.n	800b984 <lwip_netconn_is_err_msg+0x34>
  } else if (msg == &netconn_closed) {
 800b964:	4b0d      	ldr	r3, [pc, #52]	; (800b99c <lwip_netconn_is_err_msg+0x4c>)
 800b966:	429c      	cmp	r4, r3
 800b968:	d010      	beq.n	800b98c <lwip_netconn_is_err_msg+0x3c>
  return 0;
 800b96a:	2000      	movs	r0, #0
}
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
    *err = ERR_ABRT;
 800b96e:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 800b970:	2001      	movs	r0, #1
    *err = ERR_ABRT;
 800b972:	702b      	strb	r3, [r5, #0]
}
 800b974:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 800b976:	4b0a      	ldr	r3, [pc, #40]	; (800b9a0 <lwip_netconn_is_err_msg+0x50>)
 800b978:	2285      	movs	r2, #133	; 0x85
 800b97a:	490a      	ldr	r1, [pc, #40]	; (800b9a4 <lwip_netconn_is_err_msg+0x54>)
 800b97c:	480a      	ldr	r0, [pc, #40]	; (800b9a8 <lwip_netconn_is_err_msg+0x58>)
 800b97e:	f009 f973 	bl	8014c68 <iprintf>
 800b982:	e7e9      	b.n	800b958 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_RST;
 800b984:	23f2      	movs	r3, #242	; 0xf2
    return 1;
 800b986:	2001      	movs	r0, #1
    *err = ERR_RST;
 800b988:	702b      	strb	r3, [r5, #0]
}
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
    *err = ERR_CLSD;
 800b98c:	23f1      	movs	r3, #241	; 0xf1
    return 1;
 800b98e:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 800b990:	702b      	strb	r3, [r5, #0]
}
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	08018660 	.word	0x08018660
 800b998:	08018662 	.word	0x08018662
 800b99c:	08018661 	.word	0x08018661
 800b9a0:	08018244 	.word	0x08018244
 800b9a4:	08018504 	.word	0x08018504
 800b9a8:	08017728 	.word	0x08017728

0800b9ac <lwip_netconn_do_newconn>:
{
 800b9ac:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800b9ae:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800b9b0:	6805      	ldr	r5, [r0, #0]
{
 800b9b2:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800b9b4:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b9b6:	6868      	ldr	r0, [r5, #4]
 800b9b8:	b100      	cbz	r0, 800b9bc <lwip_netconn_do_newconn+0x10>
}
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b9bc:	782b      	ldrb	r3, [r5, #0]
 800b9be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9c2:	2b10      	cmp	r3, #16
 800b9c4:	d016      	beq.n	800b9f4 <lwip_netconn_do_newconn+0x48>
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d11f      	bne.n	800ba0a <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b9ca:	f006 fbed 	bl	80121a8 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800b9ce:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b9d0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b9d2:	6850      	ldr	r0, [r2, #4]
 800b9d4:	b158      	cbz	r0, 800b9ee <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b9d6:	7813      	ldrb	r3, [r2, #0]
 800b9d8:	2b22      	cmp	r3, #34	; 0x22
 800b9da:	d101      	bne.n	800b9e0 <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b9dc:	2301      	movs	r3, #1
 800b9de:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b9e0:	490b      	ldr	r1, [pc, #44]	; (800ba10 <lwip_netconn_do_newconn+0x64>)
 800b9e2:	f006 fb95 	bl	8012110 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e5      	bne.n	800b9ba <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 800b9ee:	23ff      	movs	r3, #255	; 0xff
 800b9f0:	7123      	strb	r3, [r4, #4]
}
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b9f4:	f003 f838 	bl	800ea68 <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 800b9f8:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b9fa:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	2a00      	cmp	r2, #0
 800ba00:	d0f5      	beq.n	800b9ee <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7ff fb00 	bl	800b008 <setup_tcp>
 800ba08:	e7ed      	b.n	800b9e6 <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 800ba0a:	23fa      	movs	r3, #250	; 0xfa
 800ba0c:	7123      	strb	r3, [r4, #4]
}
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	0800af4d 	.word	0x0800af4d

0800ba14 <netconn_alloc>:
{
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ba18:	2007      	movs	r0, #7
{
 800ba1a:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ba1c:	f001 f890 	bl	800cb40 <memp_malloc>
  if (conn == NULL) {
 800ba20:	4604      	mov	r4, r0
 800ba22:	b310      	cbz	r0, 800ba6a <netconn_alloc+0x56>
  conn->pending_err = ERR_OK;
 800ba24:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 800ba28:	2200      	movs	r2, #0
  conn->type = t;
 800ba2a:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 800ba2c:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 800ba2e:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 800ba30:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 800ba32:	d001      	beq.n	800ba38 <netconn_alloc+0x24>
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	d11a      	bne.n	800ba6e <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ba38:	f104 0710 	add.w	r7, r4, #16
 800ba3c:	2106      	movs	r1, #6
 800ba3e:	4638      	mov	r0, r7
 800ba40:	f007 ffd6 	bl	80139f0 <sys_mbox_new>
 800ba44:	4601      	mov	r1, r0
 800ba46:	b9c8      	cbnz	r0, 800ba7c <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ba48:	f104 000c 	add.w	r0, r4, #12
 800ba4c:	f008 f82e 	bl	8013aac <sys_sem_new>
 800ba50:	4605      	mov	r5, r0
 800ba52:	b9d0      	cbnz	r0, 800ba8a <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ba54:	f104 0014 	add.w	r0, r4, #20
 800ba58:	f008 f824 	bl	8013aa4 <sys_mbox_set_invalid>
  conn->socket       = -1;
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 800ba60:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 800ba62:	6266      	str	r6, [r4, #36]	; 0x24
  conn->socket       = -1;
 800ba64:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 800ba66:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 800ba68:	7725      	strb	r5, [r4, #28]
}
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ba6e:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <netconn_alloc+0x80>)
 800ba70:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ba74:	4908      	ldr	r1, [pc, #32]	; (800ba98 <netconn_alloc+0x84>)
 800ba76:	4809      	ldr	r0, [pc, #36]	; (800ba9c <netconn_alloc+0x88>)
 800ba78:	f009 f8f6 	bl	8014c68 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800ba7c:	4621      	mov	r1, r4
  return NULL;
 800ba7e:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 800ba80:	2007      	movs	r0, #7
 800ba82:	f001 f8a3 	bl	800cbcc <memp_free>
}
 800ba86:	4620      	mov	r0, r4
 800ba88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	f007 ffbe 	bl	8013a0c <sys_mbox_free>
    goto free_and_return;
 800ba90:	e7f4      	b.n	800ba7c <netconn_alloc+0x68>
 800ba92:	bf00      	nop
 800ba94:	08018244 	.word	0x08018244
 800ba98:	08018510 	.word	0x08018510
 800ba9c:	08017728 	.word	0x08017728

0800baa0 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800baa0:	6843      	ldr	r3, [r0, #4]
{
 800baa2:	b510      	push	{r4, lr}
 800baa4:	4604      	mov	r4, r0
 800baa6:	b082      	sub	sp, #8
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800baa8:	b133      	cbz	r3, 800bab8 <netconn_free+0x18>
 800baaa:	4b1a      	ldr	r3, [pc, #104]	; (800bb14 <netconn_free+0x74>)
 800baac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bab0:	4919      	ldr	r1, [pc, #100]	; (800bb18 <netconn_free+0x78>)
 800bab2:	481a      	ldr	r0, [pc, #104]	; (800bb1c <netconn_free+0x7c>)
 800bab4:	f009 f8d8 	bl	8014c68 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bab8:	f104 0010 	add.w	r0, r4, #16
 800babc:	f007 ffec 	bl	8013a98 <sys_mbox_valid>
 800bac0:	b998      	cbnz	r0, 800baea <netconn_free+0x4a>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800bac2:	f104 0014 	add.w	r0, r4, #20
 800bac6:	f007 ffe7 	bl	8013a98 <sys_mbox_valid>
 800baca:	b9d8      	cbnz	r0, 800bb04 <netconn_free+0x64>
  sys_sem_free(&conn->op_completed);
 800bacc:	f104 000c 	add.w	r0, r4, #12
 800bad0:	9001      	str	r0, [sp, #4]
 800bad2:	f008 f821 	bl	8013b18 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bad6:	9801      	ldr	r0, [sp, #4]
 800bad8:	f008 f828 	bl	8013b2c <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800badc:	4621      	mov	r1, r4
 800bade:	2007      	movs	r0, #7
}
 800bae0:	b002      	add	sp, #8
 800bae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 800bae6:	f001 b871 	b.w	800cbcc <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800baea:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <netconn_free+0x74>)
 800baec:	f240 3223 	movw	r2, #803	; 0x323
 800baf0:	490b      	ldr	r1, [pc, #44]	; (800bb20 <netconn_free+0x80>)
 800baf2:	480a      	ldr	r0, [pc, #40]	; (800bb1c <netconn_free+0x7c>)
 800baf4:	f009 f8b8 	bl	8014c68 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800baf8:	f104 0014 	add.w	r0, r4, #20
 800bafc:	f007 ffcc 	bl	8013a98 <sys_mbox_valid>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0e3      	beq.n	800bacc <netconn_free+0x2c>
 800bb04:	4b03      	ldr	r3, [pc, #12]	; (800bb14 <netconn_free+0x74>)
 800bb06:	f240 3226 	movw	r2, #806	; 0x326
 800bb0a:	4906      	ldr	r1, [pc, #24]	; (800bb24 <netconn_free+0x84>)
 800bb0c:	4803      	ldr	r0, [pc, #12]	; (800bb1c <netconn_free+0x7c>)
 800bb0e:	f009 f8ab 	bl	8014c68 <iprintf>
 800bb12:	e7db      	b.n	800bacc <netconn_free+0x2c>
 800bb14:	08018244 	.word	0x08018244
 800bb18:	08018538 	.word	0x08018538
 800bb1c:	08017728 	.word	0x08017728
 800bb20:	08018568 	.word	0x08018568
 800bb24:	080185a4 	.word	0x080185a4

0800bb28 <netconn_drain>:
{
 800bb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bb2c:	f100 0510 	add.w	r5, r0, #16
{
 800bb30:	b082      	sub	sp, #8
 800bb32:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bb34:	4628      	mov	r0, r5
 800bb36:	f007 ffaf 	bl	8013a98 <sys_mbox_valid>
 800bb3a:	b1f8      	cbz	r0, 800bb7c <netconn_drain+0x54>
 800bb3c:	ae01      	add	r6, sp, #4
  } else if (msg == &netconn_reset) {
 800bb3e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800bc08 <netconn_drain+0xe0>
  if (msg == &netconn_aborted) {
 800bb42:	4f30      	ldr	r7, [pc, #192]	; (800bc04 <netconn_drain+0xdc>)
  } else if (msg == &netconn_closed) {
 800bb44:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800bc0c <netconn_drain+0xe4>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f007 ff98 	bl	8013a80 <sys_arch_mbox_tryfetch>
 800bb50:	3001      	adds	r0, #1
 800bb52:	d00d      	beq.n	800bb70 <netconn_drain+0x48>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bb54:	7823      	ldrb	r3, [r4, #0]
 800bb56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb5a:	2b10      	cmp	r3, #16
 800bb5c:	d046      	beq.n	800bbec <netconn_drain+0xc4>
          netbuf_delete((struct netbuf *)mem);
 800bb5e:	9801      	ldr	r0, [sp, #4]
 800bb60:	f000 fac0 	bl	800c0e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	f007 ff8a 	bl	8013a80 <sys_arch_mbox_tryfetch>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d1f1      	bne.n	800bb54 <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 800bb70:	4628      	mov	r0, r5
 800bb72:	f007 ff4b 	bl	8013a0c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bb76:	4628      	mov	r0, r5
 800bb78:	f007 ff94 	bl	8013aa4 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bb7c:	3414      	adds	r4, #20
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f007 ff8a 	bl	8013a98 <sys_mbox_valid>
 800bb84:	b378      	cbz	r0, 800bbe6 <netconn_drain+0xbe>
 800bb86:	ae01      	add	r6, sp, #4
  if (msg == &netconn_aborted) {
 800bb88:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800bc04 <netconn_drain+0xdc>
  } else if (msg == &netconn_reset) {
 800bb8c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800bc08 <netconn_drain+0xe0>
  } else if (msg == &netconn_closed) {
 800bb90:	f8df a078 	ldr.w	sl, [pc, #120]	; 800bc0c <netconn_drain+0xe4>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bb94:	4631      	mov	r1, r6
 800bb96:	4620      	mov	r0, r4
 800bb98:	f007 ff72 	bl	8013a80 <sys_arch_mbox_tryfetch>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d01c      	beq.n	800bbda <netconn_drain+0xb2>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bba0:	9d01      	ldr	r5, [sp, #4]
  } else if (msg == &netconn_closed) {
 800bba2:	4545      	cmp	r5, r8
 800bba4:	bf18      	it	ne
 800bba6:	454d      	cmpne	r5, r9
          netconn_drain(newconn);
 800bba8:	4628      	mov	r0, r5
  } else if (msg == &netconn_closed) {
 800bbaa:	d0f3      	beq.n	800bb94 <netconn_drain+0x6c>
 800bbac:	eba5 070a 	sub.w	r7, r5, sl
 800bbb0:	fab7 f787 	clz	r7, r7
 800bbb4:	097f      	lsrs	r7, r7, #5
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	d1ec      	bne.n	800bb94 <netconn_drain+0x6c>
          netconn_drain(newconn);
 800bbba:	f7ff ffb5 	bl	800bb28 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bbbe:	6868      	ldr	r0, [r5, #4]
 800bbc0:	b110      	cbz	r0, 800bbc8 <netconn_drain+0xa0>
            tcp_abort(newconn->pcb.tcp);
 800bbc2:	f002 fe3f 	bl	800e844 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bbc6:	606f      	str	r7, [r5, #4]
          netconn_free(newconn);
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f7ff ff69 	bl	800baa0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f007 ff55 	bl	8013a80 <sys_arch_mbox_tryfetch>
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d1e2      	bne.n	800bba0 <netconn_drain+0x78>
    sys_mbox_free(&conn->acceptmbox);
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f007 ff16 	bl	8013a0c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f007 ff5f 	bl	8013aa4 <sys_mbox_set_invalid>
}
 800bbe6:	b002      	add	sp, #8
 800bbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bbec:	9b01      	ldr	r3, [sp, #4]
  } else if (msg == &netconn_closed) {
 800bbee:	42bb      	cmp	r3, r7
 800bbf0:	bf18      	it	ne
 800bbf2:	4543      	cmpne	r3, r8
            pbuf_free((struct pbuf *)mem);
 800bbf4:	4618      	mov	r0, r3
  } else if (msg == &netconn_closed) {
 800bbf6:	d0a7      	beq.n	800bb48 <netconn_drain+0x20>
 800bbf8:	454b      	cmp	r3, r9
 800bbfa:	d0a5      	beq.n	800bb48 <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 800bbfc:	f001 fbac 	bl	800d358 <pbuf_free>
 800bc00:	e7a2      	b.n	800bb48 <netconn_drain+0x20>
 800bc02:	bf00      	nop
 800bc04:	08018660 	.word	0x08018660
 800bc08:	08018662 	.word	0x08018662
 800bc0c:	08018661 	.word	0x08018661

0800bc10 <accept_function>:
{
 800bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc12:	b083      	sub	sp, #12
  if (conn == NULL) {
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d036      	beq.n	800bc86 <accept_function+0x76>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bc18:	f100 0714 	add.w	r7, r0, #20
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	4616      	mov	r6, r2
 800bc22:	4638      	mov	r0, r7
 800bc24:	f007 ff38 	bl	8013a98 <sys_mbox_valid>
 800bc28:	b368      	cbz	r0, 800bc86 <accept_function+0x76>
  if (newpcb == NULL) {
 800bc2a:	b30d      	cbz	r5, 800bc70 <accept_function+0x60>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800bc2c:	b9c6      	cbnz	r6, 800bc60 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 800bc2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc30:	7820      	ldrb	r0, [r4, #0]
 800bc32:	f7ff feef 	bl	800ba14 <netconn_alloc>
  if (newconn == NULL) {
 800bc36:	4606      	mov	r6, r0
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d04d      	beq.n	800bcd8 <accept_function+0xc8>
  newconn->pcb.tcp = newpcb;
 800bc3c:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 800bc3e:	f7ff f9e3 	bl	800b008 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800bc42:	4631      	mov	r1, r6
 800bc44:	4638      	mov	r0, r7
 800bc46:	f007 feeb 	bl	8013a20 <sys_mbox_trypost>
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	b9f0      	cbnz	r0, 800bc8c <accept_function+0x7c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc50:	b11b      	cbz	r3, 800bc5a <accept_function+0x4a>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4601      	mov	r1, r0
 800bc56:	4620      	mov	r0, r4
 800bc58:	4798      	blx	r3
}
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	b003      	add	sp, #12
 800bc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800bc60:	4b26      	ldr	r3, [pc, #152]	; (800bcfc <accept_function+0xec>)
 800bc62:	f240 222a 	movw	r2, #554	; 0x22a
 800bc66:	4926      	ldr	r1, [pc, #152]	; (800bd00 <accept_function+0xf0>)
 800bc68:	4826      	ldr	r0, [pc, #152]	; (800bd04 <accept_function+0xf4>)
 800bc6a:	f008 fffd 	bl	8014c68 <iprintf>
 800bc6e:	e7de      	b.n	800bc2e <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bc70:	4925      	ldr	r1, [pc, #148]	; (800bd08 <accept_function+0xf8>)
 800bc72:	4638      	mov	r0, r7
 800bc74:	f007 fed4 	bl	8013a20 <sys_mbox_trypost>
 800bc78:	b928      	cbnz	r0, 800bc86 <accept_function+0x76>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc7c:	b11b      	cbz	r3, 800bc86 <accept_function+0x76>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	4601      	mov	r1, r0
 800bc82:	4620      	mov	r0, r4
 800bc84:	4798      	blx	r3
    return ERR_VAL;
 800bc86:	f06f 0505 	mvn.w	r5, #5
 800bc8a:	e7e6      	b.n	800bc5a <accept_function+0x4a>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800bc8c:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 800bc8e:	2100      	movs	r1, #0
    sys_mbox_free(&newconn->recvmbox);
 800bc90:	f106 0410 	add.w	r4, r6, #16
    return ERR_MEM;
 800bc94:	f04f 35ff 	mov.w	r5, #4294967295
    tcp_arg(pcb, NULL);
 800bc98:	9001      	str	r0, [sp, #4]
 800bc9a:	f002 f905 	bl	800dea8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800bc9e:	9801      	ldr	r0, [sp, #4]
 800bca0:	2100      	movs	r1, #0
 800bca2:	f002 f909 	bl	800deb8 <tcp_recv>
    tcp_sent(pcb, NULL);
 800bca6:	9801      	ldr	r0, [sp, #4]
 800bca8:	2100      	movs	r1, #0
 800bcaa:	f002 f91f 	bl	800deec <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800bcae:	2200      	movs	r2, #0
 800bcb0:	9801      	ldr	r0, [sp, #4]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	f002 f95a 	bl	800df6c <tcp_poll>
    tcp_err(pcb, NULL);
 800bcb8:	2100      	movs	r1, #0
 800bcba:	9801      	ldr	r0, [sp, #4]
 800bcbc:	f002 f930 	bl	800df20 <tcp_err>
    newconn->pcb.tcp = NULL;
 800bcc0:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 800bcc2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 800bcc4:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800bcc6:	f007 fea1 	bl	8013a0c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800bcca:	4620      	mov	r0, r4
 800bccc:	f007 feea 	bl	8013aa4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7ff fee5 	bl	800baa0 <netconn_free>
    return ERR_MEM;
 800bcd6:	e7c0      	b.n	800bc5a <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bcd8:	490b      	ldr	r1, [pc, #44]	; (800bd08 <accept_function+0xf8>)
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f007 fea0 	bl	8013a20 <sys_mbox_trypost>
 800bce0:	b940      	cbnz	r0, 800bcf4 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bce4:	b133      	cbz	r3, 800bcf4 <accept_function+0xe4>
 800bce6:	4602      	mov	r2, r0
 800bce8:	4601      	mov	r1, r0
 800bcea:	4620      	mov	r0, r4
    return ERR_MEM;
 800bcec:	f04f 35ff 	mov.w	r5, #4294967295
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bcf0:	4798      	blx	r3
 800bcf2:	e7b2      	b.n	800bc5a <accept_function+0x4a>
    return ERR_MEM;
 800bcf4:	f04f 35ff 	mov.w	r5, #4294967295
 800bcf8:	e7af      	b.n	800bc5a <accept_function+0x4a>
 800bcfa:	bf00      	nop
 800bcfc:	08018244 	.word	0x08018244
 800bd00:	080185e0 	.word	0x080185e0
 800bd04:	08017728 	.word	0x08017728
 800bd08:	08018660 	.word	0x08018660

0800bd0c <lwip_netconn_do_delconn>:
{
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800bd10:	6800      	ldr	r0, [r0, #0]
 800bd12:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bd14:	b19d      	cbz	r5, 800bd3e <lwip_netconn_do_delconn+0x32>
 800bd16:	7803      	ldrb	r3, [r0, #0]
 800bd18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd1c:	2b10      	cmp	r3, #16
 800bd1e:	d131      	bne.n	800bd84 <lwip_netconn_do_delconn+0x78>
       (state != NETCONN_LISTEN) &&
 800bd20:	1eab      	subs	r3, r5, #2
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d906      	bls.n	800bd34 <lwip_netconn_do_delconn+0x28>
    msg->err = ERR_INPROGRESS;
 800bd26:	23fb      	movs	r3, #251	; 0xfb
 800bd28:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd2a:	300c      	adds	r0, #12
}
 800bd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd30:	f007 bef6 	b.w	8013b20 <sys_sem_valid>
       (state != NETCONN_CONNECT)) ||
 800bd34:	2d03      	cmp	r5, #3
 800bd36:	d102      	bne.n	800bd3e <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bd38:	7f03      	ldrb	r3, [r0, #28]
 800bd3a:	075b      	lsls	r3, r3, #29
 800bd3c:	d5f3      	bpl.n	800bd26 <lwip_netconn_do_delconn+0x1a>
    msg->err = ERR_OK;
 800bd3e:	2500      	movs	r5, #0
 800bd40:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800bd42:	f7ff fef1 	bl	800bb28 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800bd46:	6820      	ldr	r0, [r4, #0]
 800bd48:	6842      	ldr	r2, [r0, #4]
 800bd4a:	b142      	cbz	r2, 800bd5e <lwip_netconn_do_delconn+0x52>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bd4c:	7803      	ldrb	r3, [r0, #0]
 800bd4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd52:	2b10      	cmp	r3, #16
 800bd54:	d025      	beq.n	800bda2 <lwip_netconn_do_delconn+0x96>
 800bd56:	2b20      	cmp	r3, #32
 800bd58:	d01d      	beq.n	800bd96 <lwip_netconn_do_delconn+0x8a>
      msg->conn->pcb.tcp = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bd5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0e2      	beq.n	800bd2a <lwip_netconn_do_delconn+0x1e>
 800bd64:	2200      	movs	r2, #0
 800bd66:	4611      	mov	r1, r2
 800bd68:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bd6a:	6820      	ldr	r0, [r4, #0]
 800bd6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0db      	beq.n	800bd2a <lwip_netconn_do_delconn+0x1e>
 800bd72:	2200      	movs	r2, #0
 800bd74:	2102      	movs	r1, #2
 800bd76:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd78:	6820      	ldr	r0, [r4, #0]
}
 800bd7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd7e:	300c      	adds	r0, #12
 800bd80:	f007 bece 	b.w	8013b20 <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bd84:	4b21      	ldr	r3, [pc, #132]	; (800be0c <lwip_netconn_do_delconn+0x100>)
 800bd86:	f240 425e 	movw	r2, #1118	; 0x45e
 800bd8a:	4921      	ldr	r1, [pc, #132]	; (800be10 <lwip_netconn_do_delconn+0x104>)
 800bd8c:	4821      	ldr	r0, [pc, #132]	; (800be14 <lwip_netconn_do_delconn+0x108>)
 800bd8e:	f008 ff6b 	bl	8014c68 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bd92:	6820      	ldr	r0, [r4, #0]
 800bd94:	e7c4      	b.n	800bd20 <lwip_netconn_do_delconn+0x14>
          udp_remove(msg->conn->pcb.udp);
 800bd96:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 800bd98:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 800bd9a:	f006 f9d3 	bl	8012144 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800bd9e:	6820      	ldr	r0, [r4, #0]
          break;
 800bda0:	e7db      	b.n	800bd5a <lwip_netconn_do_delconn+0x4e>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bda2:	6a03      	ldr	r3, [r0, #32]
 800bda4:	b13b      	cbz	r3, 800bdb6 <lwip_netconn_do_delconn+0xaa>
 800bda6:	4b19      	ldr	r3, [pc, #100]	; (800be0c <lwip_netconn_do_delconn+0x100>)
 800bda8:	f240 4294 	movw	r2, #1172	; 0x494
 800bdac:	491a      	ldr	r1, [pc, #104]	; (800be18 <lwip_netconn_do_delconn+0x10c>)
 800bdae:	4819      	ldr	r0, [pc, #100]	; (800be14 <lwip_netconn_do_delconn+0x108>)
 800bdb0:	f008 ff5a 	bl	8014c68 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bdb4:	6820      	ldr	r0, [r4, #0]
 800bdb6:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bdb8:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bdba:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 800bdbc:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bdbe:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800bdc0:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bdc2:	f7ff faad 	bl	800b320 <lwip_netconn_do_close_internal>
 800bdc6:	b178      	cbz	r0, 800bde8 <lwip_netconn_do_delconn+0xdc>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bdc8:	6823      	ldr	r3, [r4, #0]
 800bdca:	785b      	ldrb	r3, [r3, #1]
 800bdcc:	2b04      	cmp	r3, #4
 800bdce:	d10c      	bne.n	800bdea <lwip_netconn_do_delconn+0xde>
            UNLOCK_TCPIP_CORE();
 800bdd0:	f7fc f8d0 	bl	8007f74 <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bdd4:	6820      	ldr	r0, [r4, #0]
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	300c      	adds	r0, #12
 800bdda:	f007 fe7d 	bl	8013ad8 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bdde:	f7fc f84b 	bl	8007e78 <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	785b      	ldrb	r3, [r3, #1]
 800bde6:	b943      	cbnz	r3, 800bdfa <lwip_netconn_do_delconn+0xee>
}
 800bde8:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bdea:	4b08      	ldr	r3, [pc, #32]	; (800be0c <lwip_netconn_do_delconn+0x100>)
 800bdec:	f240 429a 	movw	r2, #1178	; 0x49a
 800bdf0:	490a      	ldr	r1, [pc, #40]	; (800be1c <lwip_netconn_do_delconn+0x110>)
 800bdf2:	4808      	ldr	r0, [pc, #32]	; (800be14 <lwip_netconn_do_delconn+0x108>)
 800bdf4:	f008 ff38 	bl	8014c68 <iprintf>
 800bdf8:	e7ea      	b.n	800bdd0 <lwip_netconn_do_delconn+0xc4>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bdfa:	4b04      	ldr	r3, [pc, #16]	; (800be0c <lwip_netconn_do_delconn+0x100>)
 800bdfc:	f240 429e 	movw	r2, #1182	; 0x49e
 800be00:	4906      	ldr	r1, [pc, #24]	; (800be1c <lwip_netconn_do_delconn+0x110>)
 800be02:	4804      	ldr	r0, [pc, #16]	; (800be14 <lwip_netconn_do_delconn+0x108>)
}
 800be04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800be08:	f008 bf2e 	b.w	8014c68 <iprintf>
 800be0c:	08018244 	.word	0x08018244
 800be10:	08018608 	.word	0x08018608
 800be14:	08017728 	.word	0x08017728
 800be18:	0801861c 	.word	0x0801861c
 800be1c:	08018638 	.word	0x08018638

0800be20 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 800be20:	6803      	ldr	r3, [r0, #0]
{
 800be22:	b510      	push	{r4, lr}
 800be24:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800be26:	6858      	ldr	r0, [r3, #4]
 800be28:	b130      	cbz	r0, 800be38 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be30:	2b10      	cmp	r3, #16
 800be32:	d00b      	beq.n	800be4c <lwip_netconn_do_bind+0x2c>
 800be34:	2b20      	cmp	r3, #32
 800be36:	d003      	beq.n	800be40 <lwip_netconn_do_bind+0x20>
 800be38:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800be3c:	7120      	strb	r0, [r4, #4]
}
 800be3e:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800be40:	89a2      	ldrh	r2, [r4, #12]
 800be42:	68a1      	ldr	r1, [r4, #8]
 800be44:	f006 f8dc 	bl	8012000 <udp_bind>
  msg->err = err;
 800be48:	7120      	strb	r0, [r4, #4]
}
 800be4a:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800be4c:	89a2      	ldrh	r2, [r4, #12]
 800be4e:	68a1      	ldr	r1, [r4, #8]
 800be50:	f001 fdbc 	bl	800d9cc <tcp_bind>
  msg->err = err;
 800be54:	7120      	strb	r0, [r4, #4]
}
 800be56:	bd10      	pop	{r4, pc}

0800be58 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 800be58:	6803      	ldr	r3, [r0, #0]
{
 800be5a:	b530      	push	{r4, r5, lr}
 800be5c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800be5e:	6858      	ldr	r0, [r3, #4]
{
 800be60:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 800be62:	b180      	cbz	r0, 800be86 <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800be64:	781a      	ldrb	r2, [r3, #0]
 800be66:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800be6a:	2a10      	cmp	r2, #16
 800be6c:	d004      	beq.n	800be78 <lwip_netconn_do_listen+0x20>
 800be6e:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 800be72:	7123      	strb	r3, [r4, #4]
}
 800be74:	b003      	add	sp, #12
 800be76:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 800be78:	785b      	ldrb	r3, [r3, #1]
 800be7a:	b94b      	cbnz	r3, 800be90 <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800be7c:	7d03      	ldrb	r3, [r0, #20]
 800be7e:	b17b      	cbz	r3, 800bea0 <lwip_netconn_do_listen+0x48>
 800be80:	f06f 0305 	mvn.w	r3, #5
 800be84:	e7f5      	b.n	800be72 <lwip_netconn_do_listen+0x1a>
 800be86:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 800be8a:	7123      	strb	r3, [r4, #4]
}
 800be8c:	b003      	add	sp, #12
 800be8e:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800be90:	2b02      	cmp	r3, #2
 800be92:	bf14      	ite	ne
 800be94:	f06f 030a 	mvnne.w	r3, #10
 800be98:	2300      	moveq	r3, #0
  msg->err = err;
 800be9a:	7123      	strb	r3, [r4, #4]
}
 800be9c:	b003      	add	sp, #12
 800be9e:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800bea0:	f10d 0207 	add.w	r2, sp, #7
 800bea4:	21ff      	movs	r1, #255	; 0xff
 800bea6:	f001 fdfb 	bl	800daa0 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800beaa:	4605      	mov	r5, r0
 800beac:	b1d8      	cbz	r0, 800bee6 <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800beae:	6820      	ldr	r0, [r4, #0]
 800beb0:	3010      	adds	r0, #16
 800beb2:	f007 fdf1 	bl	8013a98 <sys_mbox_valid>
 800beb6:	bb50      	cbnz	r0, 800bf0e <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800beb8:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800beba:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bebc:	3014      	adds	r0, #20
            err = ERR_OK;
 800bebe:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bec2:	f007 fde9 	bl	8013a98 <sys_mbox_valid>
 800bec6:	b1d0      	cbz	r0, 800befe <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 800bec8:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800becc:	b970      	cbnz	r0, 800beec <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 800bece:	6821      	ldr	r1, [r4, #0]
 800bed0:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bed2:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800bed4:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 800bed6:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bed8:	f001 ffe6 	bl	800dea8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	4910      	ldr	r1, [pc, #64]	; (800bf20 <lwip_netconn_do_listen+0xc8>)
 800bee0:	6858      	ldr	r0, [r3, #4]
 800bee2:	f002 f837 	bl	800df54 <tcp_accept>
  msg->err = err;
 800bee6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800beea:	e7c2      	b.n	800be72 <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 800beec:	4628      	mov	r0, r5
 800beee:	f002 fe8f 	bl	800ec10 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bef2:	6822      	ldr	r2, [r4, #0]
 800bef4:	2100      	movs	r1, #0
  msg->err = err;
 800bef6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 800befa:	6051      	str	r1, [r2, #4]
 800befc:	e7b9      	b.n	800be72 <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800befe:	6820      	ldr	r0, [r4, #0]
 800bf00:	2106      	movs	r1, #6
 800bf02:	3014      	adds	r0, #20
 800bf04:	f007 fd74 	bl	80139f0 <sys_mbox_new>
 800bf08:	f88d 0007 	strb.w	r0, [sp, #7]
 800bf0c:	e7de      	b.n	800becc <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 800bf0e:	6820      	ldr	r0, [r4, #0]
 800bf10:	3010      	adds	r0, #16
 800bf12:	f007 fd7b 	bl	8013a0c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bf16:	6820      	ldr	r0, [r4, #0]
 800bf18:	3010      	adds	r0, #16
 800bf1a:	f007 fdc3 	bl	8013aa4 <sys_mbox_set_invalid>
 800bf1e:	e7cb      	b.n	800beb8 <lwip_netconn_do_listen+0x60>
 800bf20:	0800bc11 	.word	0x0800bc11

0800bf24 <lwip_netconn_do_recv>:
{
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800bf26:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 800bf28:	6803      	ldr	r3, [r0, #0]
{
 800bf2a:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 800bf2c:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bf2e:	6858      	ldr	r0, [r3, #4]
 800bf30:	b120      	cbz	r0, 800bf3c <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf38:	2b10      	cmp	r3, #16
 800bf3a:	d000      	beq.n	800bf3e <lwip_netconn_do_recv+0x1a>
}
 800bf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 800bf3e:	68b4      	ldr	r4, [r6, #8]
 800bf40:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800bf44:	e001      	b.n	800bf4a <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bf46:	6833      	ldr	r3, [r6, #0]
 800bf48:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bf4a:	42bc      	cmp	r4, r7
 800bf4c:	4625      	mov	r5, r4
 800bf4e:	bf28      	it	cs
 800bf50:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bf52:	b2a9      	uxth	r1, r5
 800bf54:	f001 fe70 	bl	800dc38 <tcp_recved>
      } while (remaining != 0);
 800bf58:	1b64      	subs	r4, r4, r5
 800bf5a:	d1f4      	bne.n	800bf46 <lwip_netconn_do_recv+0x22>
}
 800bf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf5e:	bf00      	nop

0800bf60 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bf60:	b510      	push	{r4, lr}
 800bf62:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800bf64:	6800      	ldr	r0, [r0, #0]
 800bf66:	f7fe ffe1 	bl	800af2c <netconn_err>
  if (err == ERR_OK) {
 800bf6a:	b938      	cbnz	r0, 800bf7c <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bf6c:	6822      	ldr	r2, [r4, #0]
 800bf6e:	7813      	ldrb	r3, [r2, #0]
 800bf70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf74:	2b10      	cmp	r3, #16
 800bf76:	d003      	beq.n	800bf80 <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800bf78:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800bf7c:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bf7e:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800bf80:	7853      	ldrb	r3, [r2, #1]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d137      	bne.n	800bff6 <lwip_netconn_do_write+0x96>
      } else if (msg->conn->pcb.tcp != NULL) {
 800bf86:	6853      	ldr	r3, [r2, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d038      	beq.n	800bffe <lwip_netconn_do_write+0x9e>
        msg->conn->state = NETCONN_WRITE;
 800bf8c:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bf8e:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 800bf90:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bf92:	b133      	cbz	r3, 800bfa2 <lwip_netconn_do_write+0x42>
 800bf94:	4b20      	ldr	r3, [pc, #128]	; (800c018 <lwip_netconn_do_write+0xb8>)
 800bf96:	f240 7223 	movw	r2, #1827	; 0x723
 800bf9a:	4920      	ldr	r1, [pc, #128]	; (800c01c <lwip_netconn_do_write+0xbc>)
 800bf9c:	4820      	ldr	r0, [pc, #128]	; (800c020 <lwip_netconn_do_write+0xc0>)
 800bf9e:	f008 fe63 	bl	8014c68 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800bfa2:	6963      	ldr	r3, [r4, #20]
 800bfa4:	b37b      	cbz	r3, 800c006 <lwip_netconn_do_write+0xa6>
        msg->conn->current_msg = msg;
 800bfa6:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800bfa8:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800bfaa:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800bfac:	f7ff f850 	bl	800b050 <lwip_netconn_do_writemore>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0e4      	beq.n	800bf7e <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	785b      	ldrb	r3, [r3, #1]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d006      	beq.n	800bfca <lwip_netconn_do_write+0x6a>
 800bfbc:	4b16      	ldr	r3, [pc, #88]	; (800c018 <lwip_netconn_do_write+0xb8>)
 800bfbe:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800bfc2:	4918      	ldr	r1, [pc, #96]	; (800c024 <lwip_netconn_do_write+0xc4>)
 800bfc4:	4816      	ldr	r0, [pc, #88]	; (800c020 <lwip_netconn_do_write+0xc0>)
 800bfc6:	f008 fe4f 	bl	8014c68 <iprintf>
          UNLOCK_TCPIP_CORE();
 800bfca:	f7fb ffd3 	bl	8007f74 <sys_unlock_tcpip_core>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bfce:	6820      	ldr	r0, [r4, #0]
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	300c      	adds	r0, #12
 800bfd4:	f007 fd80 	bl	8013ad8 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800bfd8:	f7fb ff4e 	bl	8007e78 <sys_lock_tcpip_core>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	785b      	ldrb	r3, [r3, #1]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d1cc      	bne.n	800bf7e <lwip_netconn_do_write+0x1e>
 800bfe4:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <lwip_netconn_do_write+0xb8>)
 800bfe6:	f240 722c 	movw	r2, #1836	; 0x72c
 800bfea:	490e      	ldr	r1, [pc, #56]	; (800c024 <lwip_netconn_do_write+0xc4>)
 800bfec:	480c      	ldr	r0, [pc, #48]	; (800c020 <lwip_netconn_do_write+0xc0>)
}
 800bfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bff2:	f008 be39 	b.w	8014c68 <iprintf>
        err = ERR_INPROGRESS;
 800bff6:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 800bffa:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800bffc:	e7bf      	b.n	800bf7e <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 800bffe:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 800c002:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800c004:	e7bb      	b.n	800bf7e <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c006:	4b04      	ldr	r3, [pc, #16]	; (800c018 <lwip_netconn_do_write+0xb8>)
 800c008:	f240 7224 	movw	r2, #1828	; 0x724
 800c00c:	4906      	ldr	r1, [pc, #24]	; (800c028 <lwip_netconn_do_write+0xc8>)
 800c00e:	4804      	ldr	r0, [pc, #16]	; (800c020 <lwip_netconn_do_write+0xc0>)
 800c010:	f008 fe2a 	bl	8014c68 <iprintf>
 800c014:	e7c7      	b.n	800bfa6 <lwip_netconn_do_write+0x46>
 800c016:	bf00      	nop
 800c018:	08018244 	.word	0x08018244
 800c01c:	0801861c 	.word	0x0801861c
 800c020:	08017728 	.word	0x08017728
 800c024:	08018638 	.word	0x08018638
 800c028:	08018640 	.word	0x08018640

0800c02c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c02c:	b510      	push	{r4, lr}
 800c02e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c030:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c032:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 800c034:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 800c036:	b123      	cbz	r3, 800c042 <lwip_netconn_do_close+0x16>
 800c038:	7803      	ldrb	r3, [r0, #0]
 800c03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c03e:	2b10      	cmp	r3, #16
 800c040:	d002      	beq.n	800c048 <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c042:	23f5      	movs	r3, #245	; 0xf5
 800c044:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c046:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c048:	2a02      	cmp	r2, #2
 800c04a:	7a23      	ldrb	r3, [r4, #8]
 800c04c:	d101      	bne.n	800c052 <lwip_netconn_do_close+0x26>
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d1f7      	bne.n	800c042 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 800c052:	2a03      	cmp	r2, #3
 800c054:	d0f5      	beq.n	800c042 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800c056:	2a01      	cmp	r2, #1
 800c058:	d102      	bne.n	800c060 <lwip_netconn_do_close+0x34>
      msg->err = ERR_INPROGRESS;
 800c05a:	23fb      	movs	r3, #251	; 0xfb
 800c05c:	7123      	strb	r3, [r4, #4]
}
 800c05e:	bd10      	pop	{r4, pc}
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c060:	07db      	lsls	r3, r3, #31
 800c062:	d432      	bmi.n	800c0ca <lwip_netconn_do_close+0x9e>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c064:	6a03      	ldr	r3, [r0, #32]
 800c066:	b13b      	cbz	r3, 800c078 <lwip_netconn_do_close+0x4c>
 800c068:	4b1a      	ldr	r3, [pc, #104]	; (800c0d4 <lwip_netconn_do_close+0xa8>)
 800c06a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c06e:	491a      	ldr	r1, [pc, #104]	; (800c0d8 <lwip_netconn_do_close+0xac>)
 800c070:	481a      	ldr	r0, [pc, #104]	; (800c0dc <lwip_netconn_do_close+0xb0>)
 800c072:	f008 fdf9 	bl	8014c68 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c076:	6820      	ldr	r0, [r4, #0]
 800c078:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c07a:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 800c07c:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 800c07e:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c080:	f7ff f94e 	bl	800b320 <lwip_netconn_do_close_internal>
 800c084:	2800      	cmp	r0, #0
 800c086:	d0de      	beq.n	800c046 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d006      	beq.n	800c09e <lwip_netconn_do_close+0x72>
 800c090:	4b10      	ldr	r3, [pc, #64]	; (800c0d4 <lwip_netconn_do_close+0xa8>)
 800c092:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c096:	4912      	ldr	r1, [pc, #72]	; (800c0e0 <lwip_netconn_do_close+0xb4>)
 800c098:	4810      	ldr	r0, [pc, #64]	; (800c0dc <lwip_netconn_do_close+0xb0>)
 800c09a:	f008 fde5 	bl	8014c68 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c09e:	f7fb ff69 	bl	8007f74 <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c0a2:	6820      	ldr	r0, [r4, #0]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	300c      	adds	r0, #12
 800c0a8:	f007 fd16 	bl	8013ad8 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c0ac:	f7fb fee4 	bl	8007e78 <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	785b      	ldrb	r3, [r3, #1]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0c6      	beq.n	800c046 <lwip_netconn_do_close+0x1a>
 800c0b8:	4b06      	ldr	r3, [pc, #24]	; (800c0d4 <lwip_netconn_do_close+0xa8>)
 800c0ba:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c0be:	4908      	ldr	r1, [pc, #32]	; (800c0e0 <lwip_netconn_do_close+0xb4>)
 800c0c0:	4806      	ldr	r0, [pc, #24]	; (800c0dc <lwip_netconn_do_close+0xb0>)
}
 800c0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c0c6:	f008 bdcf 	b.w	8014c68 <iprintf>
        netconn_drain(msg->conn);
 800c0ca:	f7ff fd2d 	bl	800bb28 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c0ce:	6820      	ldr	r0, [r4, #0]
 800c0d0:	e7c8      	b.n	800c064 <lwip_netconn_do_close+0x38>
 800c0d2:	bf00      	nop
 800c0d4:	08018244 	.word	0x08018244
 800c0d8:	0801861c 	.word	0x0801861c
 800c0dc:	08017728 	.word	0x08017728
 800c0e0:	08018638 	.word	0x08018638

0800c0e4 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 800c0e4:	b170      	cbz	r0, 800c104 <netbuf_delete+0x20>
{
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800c0ea:	6800      	ldr	r0, [r0, #0]
 800c0ec:	b120      	cbz	r0, 800c0f8 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800c0ee:	f001 f933 	bl	800d358 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	2006      	movs	r0, #6
  }
}
 800c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800c100:	f000 bd64 	b.w	800cbcc <memp_free>
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop

0800c108 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c108:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c10a:	b300      	cbz	r0, 800c14e <netbuf_data+0x46>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c10c:	b1b1      	cbz	r1, 800c13c <netbuf_data+0x34>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c10e:	b162      	cbz	r2, 800c12a <netbuf_data+0x22>

  if (buf->ptr == NULL) {
 800c110:	4603      	mov	r3, r0
 800c112:	6840      	ldr	r0, [r0, #4]
 800c114:	b130      	cbz	r0, 800c124 <netbuf_data+0x1c>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 800c116:	6840      	ldr	r0, [r0, #4]
 800c118:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
  return ERR_OK;
 800c11a:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	895b      	ldrh	r3, [r3, #10]
 800c120:	8013      	strh	r3, [r2, #0]
}
 800c122:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 800c124:	f06f 0001 	mvn.w	r0, #1
}
 800c128:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c12a:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <netbuf_data+0x58>)
 800c12c:	22c8      	movs	r2, #200	; 0xc8
 800c12e:	490d      	ldr	r1, [pc, #52]	; (800c164 <netbuf_data+0x5c>)
 800c130:	480d      	ldr	r0, [pc, #52]	; (800c168 <netbuf_data+0x60>)
 800c132:	f008 fd99 	bl	8014c68 <iprintf>
 800c136:	f06f 000f 	mvn.w	r0, #15
}
 800c13a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c13c:	4b08      	ldr	r3, [pc, #32]	; (800c160 <netbuf_data+0x58>)
 800c13e:	22c7      	movs	r2, #199	; 0xc7
 800c140:	490a      	ldr	r1, [pc, #40]	; (800c16c <netbuf_data+0x64>)
 800c142:	4809      	ldr	r0, [pc, #36]	; (800c168 <netbuf_data+0x60>)
 800c144:	f008 fd90 	bl	8014c68 <iprintf>
 800c148:	f06f 000f 	mvn.w	r0, #15
}
 800c14c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c14e:	4b04      	ldr	r3, [pc, #16]	; (800c160 <netbuf_data+0x58>)
 800c150:	22c6      	movs	r2, #198	; 0xc6
 800c152:	4907      	ldr	r1, [pc, #28]	; (800c170 <netbuf_data+0x68>)
 800c154:	4804      	ldr	r0, [pc, #16]	; (800c168 <netbuf_data+0x60>)
 800c156:	f008 fd87 	bl	8014c68 <iprintf>
 800c15a:	f06f 000f 	mvn.w	r0, #15
}
 800c15e:	bd08      	pop	{r3, pc}
 800c160:	08018664 	.word	0x08018664
 800c164:	08018714 	.word	0x08018714
 800c168:	08017728 	.word	0x08017728
 800c16c:	080186f4 	.word	0x080186f4
 800c170:	080186d8 	.word	0x080186d8

0800c174 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c174:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c176:	b158      	cbz	r0, 800c190 <netbuf_next+0x1c>
  if (buf->ptr->next == NULL) {
 800c178:	6843      	ldr	r3, [r0, #4]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	b12a      	cbz	r2, 800c18a <netbuf_next+0x16>
    return -1;
  }
  buf->ptr = buf->ptr->next;
  if (buf->ptr->next == NULL) {
 800c17e:	6813      	ldr	r3, [r2, #0]
  buf->ptr = buf->ptr->next;
 800c180:	6042      	str	r2, [r0, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c182:	fab3 f083 	clz	r0, r3
 800c186:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 800c188:	bd08      	pop	{r3, pc}
    return -1;
 800c18a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c18e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <netbuf_next+0x30>)
 800c192:	22e0      	movs	r2, #224	; 0xe0
 800c194:	4904      	ldr	r1, [pc, #16]	; (800c1a8 <netbuf_next+0x34>)
 800c196:	4805      	ldr	r0, [pc, #20]	; (800c1ac <netbuf_next+0x38>)
 800c198:	f008 fd66 	bl	8014c68 <iprintf>
 800c19c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c1a0:	bd08      	pop	{r3, pc}
 800c1a2:	bf00      	nop
 800c1a4:	08018664 	.word	0x08018664
 800c1a8:	08018730 	.word	0x08018730
 800c1ac:	08017728 	.word	0x08017728

0800c1b0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800c1b4:	f7fb ff18 	bl	8007fe8 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 800c1b8:	f7fb fe5e 	bl	8007e78 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800c1bc:	4b2c      	ldr	r3, [pc, #176]	; (800c270 <tcpip_thread+0xc0>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	b113      	cbz	r3, 800c1c8 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800c1c2:	4a2c      	ldr	r2, [pc, #176]	; (800c274 <tcpip_thread+0xc4>)
 800c1c4:	6810      	ldr	r0, [r2, #0]
 800c1c6:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c1c8:	4d2b      	ldr	r5, [pc, #172]	; (800c278 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c1ca:	4f2c      	ldr	r7, [pc, #176]	; (800c27c <tcpip_thread+0xcc>)
 800c1cc:	4e2c      	ldr	r6, [pc, #176]	; (800c280 <tcpip_thread+0xd0>)
 800c1ce:	e00e      	b.n	800c1ee <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 800c1d0:	b158      	cbz	r0, 800c1ea <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800c1d2:	f7fb fecf 	bl	8007f74 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	a901      	add	r1, sp, #4
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f007 fc30 	bl	8013a40 <sys_arch_mbox_fetch>
 800c1e0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800c1e2:	f7fb fe49 	bl	8007e78 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800c1e6:	3401      	adds	r4, #1
 800c1e8:	d111      	bne.n	800c20e <tcpip_thread+0x5e>
    sys_check_timeouts();
 800c1ea:	f005 fdbf 	bl	8011d6c <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 800c1ee:	f7fb fecb 	bl	8007f88 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800c1f2:	f005 fde5 	bl	8011dc0 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c1f6:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 800c1f8:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c1fa:	d1e9      	bne.n	800c1d0 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 800c1fc:	f7fb feba 	bl	8007f74 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c200:	2200      	movs	r2, #0
 800c202:	a901      	add	r1, sp, #4
 800c204:	4628      	mov	r0, r5
 800c206:	f007 fc1b 	bl	8013a40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c20a:	f7fb fe35 	bl	8007e78 <sys_lock_tcpip_core>
    if (msg == NULL) {
 800c20e:	9c01      	ldr	r4, [sp, #4]
 800c210:	b164      	cbz	r4, 800c22c <tcpip_thread+0x7c>
  switch (msg->type) {
 800c212:	7823      	ldrb	r3, [r4, #0]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d01e      	beq.n	800c256 <tcpip_thread+0xa6>
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d018      	beq.n	800c24e <tcpip_thread+0x9e>
 800c21c:	b16b      	cbz	r3, 800c23a <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c21e:	463b      	mov	r3, r7
 800c220:	22cf      	movs	r2, #207	; 0xcf
 800c222:	4631      	mov	r1, r6
 800c224:	4817      	ldr	r0, [pc, #92]	; (800c284 <tcpip_thread+0xd4>)
 800c226:	f008 fd1f 	bl	8014c68 <iprintf>
      break;
 800c22a:	e7e0      	b.n	800c1ee <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c22c:	463b      	mov	r3, r7
 800c22e:	2291      	movs	r2, #145	; 0x91
 800c230:	4631      	mov	r1, r6
 800c232:	4814      	ldr	r0, [pc, #80]	; (800c284 <tcpip_thread+0xd4>)
 800c234:	f008 fd18 	bl	8014c68 <iprintf>
      continue;
 800c238:	e7d9      	b.n	800c1ee <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c23a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800c23e:	6860      	ldr	r0, [r4, #4]
 800c240:	4798      	blx	r3
 800c242:	b980      	cbnz	r0, 800c266 <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c244:	4621      	mov	r1, r4
 800c246:	2009      	movs	r0, #9
 800c248:	f000 fcc0 	bl	800cbcc <memp_free>
      break;
 800c24c:	e7cf      	b.n	800c1ee <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c24e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c252:	4798      	blx	r3
      break;
 800c254:	e7cb      	b.n	800c1ee <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c256:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800c25a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c25c:	4621      	mov	r1, r4
 800c25e:	2008      	movs	r0, #8
 800c260:	f000 fcb4 	bl	800cbcc <memp_free>
      break;
 800c264:	e7c3      	b.n	800c1ee <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c266:	6860      	ldr	r0, [r4, #4]
 800c268:	f001 f876 	bl	800d358 <pbuf_free>
 800c26c:	e7ea      	b.n	800c244 <tcpip_thread+0x94>
 800c26e:	bf00      	nop
 800c270:	24030fc4 	.word	0x24030fc4
 800c274:	24030fc8 	.word	0x24030fc8
 800c278:	24030fcc 	.word	0x24030fcc
 800c27c:	0801874c 	.word	0x0801874c
 800c280:	0801877c 	.word	0x0801877c
 800c284:	08017728 	.word	0x08017728

0800c288 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c28c:	4813      	ldr	r0, [pc, #76]	; (800c2dc <tcpip_inpkt+0x54>)
{
 800c28e:	460e      	mov	r6, r1
 800c290:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c292:	f007 fc01 	bl	8013a98 <sys_mbox_valid>
 800c296:	b178      	cbz	r0, 800c2b8 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c298:	2009      	movs	r0, #9
 800c29a:	f000 fc51 	bl	800cb40 <memp_malloc>
  if (msg == NULL) {
 800c29e:	4604      	mov	r4, r0
 800c2a0:	b1c0      	cbz	r0, 800c2d4 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800c2a2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800c2a4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800c2a6:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c2a8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 800c2aa:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c2ac:	480b      	ldr	r0, [pc, #44]	; (800c2dc <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 800c2ae:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c2b0:	f007 fbb6 	bl	8013a20 <sys_mbox_trypost>
 800c2b4:	b938      	cbnz	r0, 800c2c6 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c2b8:	4b09      	ldr	r3, [pc, #36]	; (800c2e0 <tcpip_inpkt+0x58>)
 800c2ba:	22fc      	movs	r2, #252	; 0xfc
 800c2bc:	4909      	ldr	r1, [pc, #36]	; (800c2e4 <tcpip_inpkt+0x5c>)
 800c2be:	480a      	ldr	r0, [pc, #40]	; (800c2e8 <tcpip_inpkt+0x60>)
 800c2c0:	f008 fcd2 	bl	8014c68 <iprintf>
 800c2c4:	e7e8      	b.n	800c298 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	2009      	movs	r0, #9
 800c2ca:	f000 fc7f 	bl	800cbcc <memp_free>
    return ERR_MEM;
 800c2ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	24030fcc 	.word	0x24030fcc
 800c2e0:	0801874c 	.word	0x0801874c
 800c2e4:	0801879c 	.word	0x0801879c
 800c2e8:	08017728 	.word	0x08017728

0800c2ec <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c2ec:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800c2f0:	f013 0f18 	tst.w	r3, #24
 800c2f4:	d002      	beq.n	800c2fc <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c2f6:	4a03      	ldr	r2, [pc, #12]	; (800c304 <tcpip_input+0x18>)
 800c2f8:	f7ff bfc6 	b.w	800c288 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c2fc:	4a02      	ldr	r2, [pc, #8]	; (800c308 <tcpip_input+0x1c>)
 800c2fe:	f7ff bfc3 	b.w	800c288 <tcpip_inpkt>
 800c302:	bf00      	nop
 800c304:	080138d5 	.word	0x080138d5
 800c308:	08012d01 	.word	0x08012d01

0800c30c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c310:	4812      	ldr	r0, [pc, #72]	; (800c35c <tcpip_try_callback+0x50>)
{
 800c312:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c314:	f007 fbc0 	bl	8013a98 <sys_mbox_valid>
 800c318:	b170      	cbz	r0, 800c338 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c31a:	2008      	movs	r0, #8
 800c31c:	f000 fc10 	bl	800cb40 <memp_malloc>
  if (msg == NULL) {
 800c320:	4604      	mov	r4, r0
 800c322:	b1c0      	cbz	r0, 800c356 <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c324:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c326:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 800c328:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c32c:	480b      	ldr	r0, [pc, #44]	; (800c35c <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 800c32e:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c330:	f007 fb76 	bl	8013a20 <sys_mbox_trypost>
 800c334:	b940      	cbnz	r0, 800c348 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800c336:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c338:	4b09      	ldr	r3, [pc, #36]	; (800c360 <tcpip_try_callback+0x54>)
 800c33a:	f240 125d 	movw	r2, #349	; 0x15d
 800c33e:	4909      	ldr	r1, [pc, #36]	; (800c364 <tcpip_try_callback+0x58>)
 800c340:	4809      	ldr	r0, [pc, #36]	; (800c368 <tcpip_try_callback+0x5c>)
 800c342:	f008 fc91 	bl	8014c68 <iprintf>
 800c346:	e7e8      	b.n	800c31a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c348:	4621      	mov	r1, r4
 800c34a:	2008      	movs	r0, #8
 800c34c:	f000 fc3e 	bl	800cbcc <memp_free>
    return ERR_MEM;
 800c350:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c354:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800c356:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c35a:	bd70      	pop	{r4, r5, r6, pc}
 800c35c:	24030fcc 	.word	0x24030fcc
 800c360:	0801874c 	.word	0x0801874c
 800c364:	0801879c 	.word	0x0801879c
 800c368:	08017728 	.word	0x08017728

0800c36c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c36c:	b510      	push	{r4, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	4604      	mov	r4, r0
 800c372:	9101      	str	r1, [sp, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c374:	f7fb fd80 	bl	8007e78 <sys_lock_tcpip_core>
  fn(apimsg);
 800c378:	9801      	ldr	r0, [sp, #4]
 800c37a:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800c37c:	f7fb fdfa 	bl	8007f74 <sys_unlock_tcpip_core>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c380:	2000      	movs	r0, #0
 800c382:	b002      	add	sp, #8
 800c384:	bd10      	pop	{r4, pc}
 800c386:	bf00      	nop

0800c388 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c388:	b530      	push	{r4, r5, lr}
 800c38a:	b083      	sub	sp, #12
 800c38c:	4605      	mov	r5, r0
 800c38e:	460c      	mov	r4, r1
  lwip_init();
 800c390:	f000 f8b2 	bl	800c4f8 <lwip_init>

  tcpip_init_done = initfunc;
 800c394:	4a15      	ldr	r2, [pc, #84]	; (800c3ec <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c396:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800c398:	4b15      	ldr	r3, [pc, #84]	; (800c3f0 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c39a:	4816      	ldr	r0, [pc, #88]	; (800c3f4 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 800c39c:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800c39e:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c3a0:	f007 fb26 	bl	80139f0 <sys_mbox_new>
 800c3a4:	b970      	cbnz	r0, 800c3c4 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c3a6:	4814      	ldr	r0, [pc, #80]	; (800c3f8 <tcpip_init+0x70>)
 800c3a8:	f007 fbce 	bl	8013b48 <sys_mutex_new>
 800c3ac:	b9b0      	cbnz	r0, 800c3dc <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c3ae:	2418      	movs	r4, #24
 800c3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4911      	ldr	r1, [pc, #68]	; (800c3fc <tcpip_init+0x74>)
 800c3b8:	9400      	str	r4, [sp, #0]
 800c3ba:	4811      	ldr	r0, [pc, #68]	; (800c400 <tcpip_init+0x78>)
 800c3bc:	f007 fbda 	bl	8013b74 <sys_thread_new>
}
 800c3c0:	b003      	add	sp, #12
 800c3c2:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c3c4:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <tcpip_init+0x7c>)
 800c3c6:	f240 2261 	movw	r2, #609	; 0x261
 800c3ca:	490f      	ldr	r1, [pc, #60]	; (800c408 <tcpip_init+0x80>)
 800c3cc:	480f      	ldr	r0, [pc, #60]	; (800c40c <tcpip_init+0x84>)
 800c3ce:	f008 fc4b 	bl	8014c68 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c3d2:	4809      	ldr	r0, [pc, #36]	; (800c3f8 <tcpip_init+0x70>)
 800c3d4:	f007 fbb8 	bl	8013b48 <sys_mutex_new>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d0e8      	beq.n	800c3ae <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c3dc:	4b09      	ldr	r3, [pc, #36]	; (800c404 <tcpip_init+0x7c>)
 800c3de:	f240 2265 	movw	r2, #613	; 0x265
 800c3e2:	490b      	ldr	r1, [pc, #44]	; (800c410 <tcpip_init+0x88>)
 800c3e4:	4809      	ldr	r0, [pc, #36]	; (800c40c <tcpip_init+0x84>)
 800c3e6:	f008 fc3f 	bl	8014c68 <iprintf>
 800c3ea:	e7e0      	b.n	800c3ae <tcpip_init+0x26>
 800c3ec:	24030fc4 	.word	0x24030fc4
 800c3f0:	24030fc8 	.word	0x24030fc8
 800c3f4:	24030fcc 	.word	0x24030fcc
 800c3f8:	24030fc0 	.word	0x24030fc0
 800c3fc:	0800c1b1 	.word	0x0800c1b1
 800c400:	080187f4 	.word	0x080187f4
 800c404:	0801874c 	.word	0x0801874c
 800c408:	080187ac 	.word	0x080187ac
 800c40c:	08017728 	.word	0x08017728
 800c410:	080187d0 	.word	0x080187d0

0800c414 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800c414:	ba40      	rev16	r0, r0
}
 800c416:	b280      	uxth	r0, r0
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop

0800c41c <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800c41c:	ba00      	rev	r0, r0
 800c41e:	4770      	bx	lr

0800c420 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c420:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800c422:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 800c426:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c42a:	4571      	cmp	r1, lr
 800c42c:	dd05      	ble.n	800c43a <lwip_standard_chksum+0x1a>
 800c42e:	b125      	cbz	r5, 800c43a <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 800c430:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 800c434:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800c436:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800c43a:	2901      	cmp	r1, #1
 800c43c:	dd27      	ble.n	800c48e <lwip_standard_chksum+0x6e>
 800c43e:	3902      	subs	r1, #2
  u32_t sum = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	084c      	lsrs	r4, r1, #1
 800c444:	f104 0c01 	add.w	ip, r4, #1
 800c448:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 800c44c:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 800c450:	4584      	cmp	ip, r0
    sum += *ps++;
 800c452:	4413      	add	r3, r2
  while (len > 1) {
 800c454:	d1fa      	bne.n	800c44c <lwip_standard_chksum+0x2c>
    len -= 2;
 800c456:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 800c45a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c45e:	2901      	cmp	r1, #1
 800c460:	d105      	bne.n	800c46e <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c462:	f89c 2000 	ldrb.w	r2, [ip]
 800c466:	f362 0e07 	bfi	lr, r2, #0, #8
 800c46a:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800c46e:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c470:	fa1f f38e 	uxth.w	r3, lr
 800c474:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 800c478:	b298      	uxth	r0, r3
 800c47a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800c47e:	b125      	cbz	r5, 800c48a <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c480:	0203      	lsls	r3, r0, #8
 800c482:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800c486:	b29b      	uxth	r3, r3
 800c488:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800c48a:	b280      	uxth	r0, r0
 800c48c:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800c48e:	4684      	mov	ip, r0
  u32_t sum = 0;
 800c490:	2300      	movs	r3, #0
 800c492:	e7e4      	b.n	800c45e <lwip_standard_chksum+0x3e>

0800c494 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c494:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c496:	f7ff ffc3 	bl	800c420 <lwip_standard_chksum>
 800c49a:	43c0      	mvns	r0, r0
}
 800c49c:	b280      	uxth	r0, r0
 800c49e:	bd08      	pop	{r3, pc}

0800c4a0 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 800c4a0:	b338      	cbz	r0, 800c4f2 <inet_chksum_pbuf+0x52>
{
 800c4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 800c4a4:	2700      	movs	r7, #0
 800c4a6:	4605      	mov	r5, r0
  acc = 0;
 800c4a8:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c4aa:	896e      	ldrh	r6, [r5, #10]
 800c4ac:	6868      	ldr	r0, [r5, #4]
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	f7ff ffb6 	bl	800c420 <lwip_standard_chksum>
 800c4b4:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 800c4b6:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 800c4ba:	b2a3      	uxth	r3, r4
 800c4bc:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 800c4c0:	ea4f 2304 	mov.w	r3, r4, lsl #8
 800c4c4:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 800c4c8:	d004      	beq.n	800c4d4 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f087 0701 	eor.w	r7, r7, #1
 800c4d0:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 800c4d4:	682d      	ldr	r5, [r5, #0]
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	d1e7      	bne.n	800c4aa <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 800c4da:	b13f      	cbz	r7, 800c4ec <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c4dc:	0220      	lsls	r0, r4, #8
 800c4de:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c4e2:	b280      	uxth	r0, r0
 800c4e4:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 800c4e6:	43c0      	mvns	r0, r0
 800c4e8:	b280      	uxth	r0, r0
}
 800c4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 800c4ec:	43e0      	mvns	r0, r4
 800c4ee:	b280      	uxth	r0, r0
}
 800c4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 800c4f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800c4f6:	4770      	bx	lr

0800c4f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c4f8:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c4fa:	f007 fb1b 	bl	8013b34 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c4fe:	f000 f80d 	bl	800c51c <mem_init>
  memp_init();
 800c502:	f000 fadb 	bl	800cabc <memp_init>
  pbuf_init();
  netif_init();
 800c506:	f000 fbe1 	bl	800cccc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c50a:	f005 fc6d 	bl	8011de8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c50e:	f001 fa33 	bl	800d978 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800c512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800c516:	f005 bc0b 	b.w	8011d30 <sys_timeouts_init>
 800c51a:	bf00      	nop

0800c51c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c51c:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c51e:	4b11      	ldr	r3, [pc, #68]	; (800c564 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800c520:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c522:	4c11      	ldr	r4, [pc, #68]	; (800c568 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 800c524:	4911      	ldr	r1, [pc, #68]	; (800c56c <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c526:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c528:	4811      	ldr	r0, [pc, #68]	; (800c570 <mem_init+0x54>)
 800c52a:	4c12      	ldr	r4, [pc, #72]	; (800c574 <mem_init+0x58>)
  mem->used = 0;
 800c52c:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 800c52e:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c532:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 800c534:	2001      	movs	r0, #1
 800c536:	4a10      	ldr	r2, [pc, #64]	; (800c578 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c538:	4c10      	ldr	r4, [pc, #64]	; (800c57c <mem_init+0x60>)
  ram_end->used = 1;
 800c53a:	f882 00f0 	strb.w	r0, [r2, #240]	; 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 800c53e:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c542:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c546:	480e      	ldr	r0, [pc, #56]	; (800c580 <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 800c548:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c54a:	f007 fafd 	bl	8013b48 <sys_mutex_new>
 800c54e:	b900      	cbnz	r0, 800c552 <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c550:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c552:	4b0c      	ldr	r3, [pc, #48]	; (800c584 <mem_init+0x68>)
 800c554:	f240 221f 	movw	r2, #543	; 0x21f
 800c558:	490b      	ldr	r1, [pc, #44]	; (800c588 <mem_init+0x6c>)
 800c55a:	480c      	ldr	r0, [pc, #48]	; (800c58c <mem_init+0x70>)
}
 800c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c560:	f008 bb82 	b.w	8014c68 <iprintf>
 800c564:	30020000 	.word	0x30020000
 800c568:	24030ff0 	.word	0x24030ff0
 800c56c:	0001ffe8 	.word	0x0001ffe8
 800c570:	24030ff4 	.word	0x24030ff4
 800c574:	3003ffe8 	.word	0x3003ffe8
 800c578:	3003ff00 	.word	0x3003ff00
 800c57c:	24030fe8 	.word	0x24030fe8
 800c580:	24030fec 	.word	0x24030fec
 800c584:	08018804 	.word	0x08018804
 800c588:	08018834 	.word	0x08018834
 800c58c:	08017728 	.word	0x08017728

0800c590 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c590:	2800      	cmp	r0, #0
 800c592:	f000 8098 	beq.w	800c6c6 <mem_free+0x136>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c596:	0783      	lsls	r3, r0, #30
{
 800c598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c59c:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c59e:	f040 808d 	bne.w	800c6bc <mem_free+0x12c>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c5a2:	4e61      	ldr	r6, [pc, #388]	; (800c728 <mem_free+0x198>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c5a4:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c5a8:	6833      	ldr	r3, [r6, #0]
 800c5aa:	42ab      	cmp	r3, r5
 800c5ac:	d805      	bhi.n	800c5ba <mem_free+0x2a>
 800c5ae:	4f5f      	ldr	r7, [pc, #380]	; (800c72c <mem_free+0x19c>)
 800c5b0:	f100 030c 	add.w	r3, r0, #12
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d20c      	bcs.n	800c5d4 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c5ba:	4b5d      	ldr	r3, [pc, #372]	; (800c730 <mem_free+0x1a0>)
 800c5bc:	f240 227f 	movw	r2, #639	; 0x27f
 800c5c0:	495c      	ldr	r1, [pc, #368]	; (800c734 <mem_free+0x1a4>)
 800c5c2:	485d      	ldr	r0, [pc, #372]	; (800c738 <mem_free+0x1a8>)
 800c5c4:	f008 fb50 	bl	8014c68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5c8:	f007 faea 	bl	8013ba0 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c5cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800c5d0:	f007 baf2 	b.w	8013bb8 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800c5d4:	4859      	ldr	r0, [pc, #356]	; (800c73c <mem_free+0x1ac>)
 800c5d6:	f007 fac3 	bl	8013b60 <sys_mutex_lock>
  if (!mem->used) {
 800c5da:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 809c 	beq.w	800c71c <mem_free+0x18c>
  pmem = ptr_to_mem(mem->prev);
 800c5e4:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c5e8:	4855      	ldr	r0, [pc, #340]	; (800c740 <mem_free+0x1b0>)
  return (mem_size_t)((u8_t *)mem - ram);
 800c5ea:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c5ec:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 800c5ee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c5f2:	d807      	bhi.n	800c604 <mem_free+0x74>
 800c5f4:	4283      	cmp	r3, r0
 800c5f6:	d805      	bhi.n	800c604 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 800c5f8:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c5fa:	4288      	cmp	r0, r1
 800c5fc:	d012      	beq.n	800c624 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c5fe:	5851      	ldr	r1, [r2, r1]
 800c600:	4288      	cmp	r0, r1
 800c602:	d00f      	beq.n	800c624 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c604:	4b4a      	ldr	r3, [pc, #296]	; (800c730 <mem_free+0x1a0>)
 800c606:	f240 2295 	movw	r2, #661	; 0x295
 800c60a:	494e      	ldr	r1, [pc, #312]	; (800c744 <mem_free+0x1b4>)
 800c60c:	484a      	ldr	r0, [pc, #296]	; (800c738 <mem_free+0x1a8>)
 800c60e:	f008 fb2b 	bl	8014c68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c612:	484a      	ldr	r0, [pc, #296]	; (800c73c <mem_free+0x1ac>)
 800c614:	f007 faaa 	bl	8013b6c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800c618:	f007 fac2 	bl	8013ba0 <sys_arch_protect>
}
 800c61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800c620:	f007 baca 	b.w	8013bb8 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 800c624:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c626:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c62a:	4561      	cmp	r1, ip
 800c62c:	d002      	beq.n	800c634 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c62e:	6849      	ldr	r1, [r1, #4]
 800c630:	4288      	cmp	r0, r1
 800c632:	d1e7      	bne.n	800c604 <mem_free+0x74>
  if (mem < lfree) {
 800c634:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800c760 <mem_free+0x1d0>
  mem->used = 0;
 800c638:	2100      	movs	r1, #0
 800c63a:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 800c63e:	f8d8 1000 	ldr.w	r1, [r8]
 800c642:	42a9      	cmp	r1, r5
    lfree = mem;
 800c644:	bf88      	it	hi
 800c646:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c64a:	4295      	cmp	r5, r2
 800c64c:	d33c      	bcc.n	800c6c8 <mem_free+0x138>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c64e:	4565      	cmp	r5, ip
 800c650:	d244      	bcs.n	800c6dc <mem_free+0x14c>
  return (struct mem *)(void *)&ram[ptr];
 800c652:	6832      	ldr	r2, [r6, #0]
 800c654:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c656:	429d      	cmp	r5, r3
 800c658:	d014      	beq.n	800c684 <mem_free+0xf4>
 800c65a:	7a19      	ldrb	r1, [r3, #8]
 800c65c:	b991      	cbnz	r1, 800c684 <mem_free+0xf4>
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	428b      	cmp	r3, r1
 800c662:	d00f      	beq.n	800c684 <mem_free+0xf4>
    if (lfree == nmem) {
 800c664:	f8d8 1000 	ldr.w	r1, [r8]
 800c668:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 800c66a:	6819      	ldr	r1, [r3, #0]
 800c66c:	f844 1c0c 	str.w	r1, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c670:	4933      	ldr	r1, [pc, #204]	; (800c740 <mem_free+0x1b0>)
 800c672:	681b      	ldr	r3, [r3, #0]
      lfree = mem;
 800c674:	bf08      	it	eq
 800c676:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c67a:	428b      	cmp	r3, r1
 800c67c:	d002      	beq.n	800c684 <mem_free+0xf4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c67e:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800c680:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c682:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 800c684:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800c688:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800c68a:	429d      	cmp	r5, r3
 800c68c:	d011      	beq.n	800c6b2 <mem_free+0x122>
 800c68e:	7a18      	ldrb	r0, [r3, #8]
 800c690:	b978      	cbnz	r0, 800c6b2 <mem_free+0x122>
    if (lfree == mem) {
 800c692:	f8d8 0000 	ldr.w	r0, [r8]
 800c696:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c698:	4829      	ldr	r0, [pc, #164]	; (800c740 <mem_free+0x1b0>)
      lfree = pmem;
 800c69a:	bf08      	it	eq
 800c69c:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800c6a0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800c6a4:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c6a6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800c6aa:	4283      	cmp	r3, r0
 800c6ac:	d001      	beq.n	800c6b2 <mem_free+0x122>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c6ae:	441a      	add	r2, r3
 800c6b0:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 800c6b2:	4822      	ldr	r0, [pc, #136]	; (800c73c <mem_free+0x1ac>)
}
 800c6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800c6b8:	f007 ba58 	b.w	8013b6c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c6bc:	4b1c      	ldr	r3, [pc, #112]	; (800c730 <mem_free+0x1a0>)
 800c6be:	f240 2273 	movw	r2, #627	; 0x273
 800c6c2:	4921      	ldr	r1, [pc, #132]	; (800c748 <mem_free+0x1b8>)
 800c6c4:	e77d      	b.n	800c5c2 <mem_free+0x32>
 800c6c6:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c6c8:	4b19      	ldr	r3, [pc, #100]	; (800c730 <mem_free+0x1a0>)
 800c6ca:	f240 12df 	movw	r2, #479	; 0x1df
 800c6ce:	491f      	ldr	r1, [pc, #124]	; (800c74c <mem_free+0x1bc>)
 800c6d0:	4819      	ldr	r0, [pc, #100]	; (800c738 <mem_free+0x1a8>)
 800c6d2:	f008 fac9 	bl	8014c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	429d      	cmp	r5, r3
 800c6da:	d306      	bcc.n	800c6ea <mem_free+0x15a>
 800c6dc:	4b14      	ldr	r3, [pc, #80]	; (800c730 <mem_free+0x1a0>)
 800c6de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c6e2:	491b      	ldr	r1, [pc, #108]	; (800c750 <mem_free+0x1c0>)
 800c6e4:	4814      	ldr	r0, [pc, #80]	; (800c738 <mem_free+0x1a8>)
 800c6e6:	f008 fabf 	bl	8014c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c6ea:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800c6ee:	b133      	cbz	r3, 800c6fe <mem_free+0x16e>
 800c6f0:	4b0f      	ldr	r3, [pc, #60]	; (800c730 <mem_free+0x1a0>)
 800c6f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c6f6:	4917      	ldr	r1, [pc, #92]	; (800c754 <mem_free+0x1c4>)
 800c6f8:	480f      	ldr	r0, [pc, #60]	; (800c738 <mem_free+0x1a8>)
 800c6fa:	f008 fab5 	bl	8014c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c6fe:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800c702:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <mem_free+0x1b0>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d9a4      	bls.n	800c652 <mem_free+0xc2>
 800c708:	4b09      	ldr	r3, [pc, #36]	; (800c730 <mem_free+0x1a0>)
 800c70a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c70e:	4912      	ldr	r1, [pc, #72]	; (800c758 <mem_free+0x1c8>)
 800c710:	4809      	ldr	r0, [pc, #36]	; (800c738 <mem_free+0x1a8>)
 800c712:	f008 faa9 	bl	8014c68 <iprintf>
  nmem = ptr_to_mem(mem->next);
 800c716:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800c71a:	e79a      	b.n	800c652 <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c71c:	4b04      	ldr	r3, [pc, #16]	; (800c730 <mem_free+0x1a0>)
 800c71e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c722:	490e      	ldr	r1, [pc, #56]	; (800c75c <mem_free+0x1cc>)
 800c724:	e772      	b.n	800c60c <mem_free+0x7c>
 800c726:	bf00      	nop
 800c728:	24030ff0 	.word	0x24030ff0
 800c72c:	24030ff4 	.word	0x24030ff4
 800c730:	08018804 	.word	0x08018804
 800c734:	08018874 	.word	0x08018874
 800c738:	08017728 	.word	0x08017728
 800c73c:	24030fec 	.word	0x24030fec
 800c740:	0001ffe8 	.word	0x0001ffe8
 800c744:	080188b8 	.word	0x080188b8
 800c748:	08018850 	.word	0x08018850
 800c74c:	080188ec 	.word	0x080188ec
 800c750:	08018904 	.word	0x08018904
 800c754:	08018920 	.word	0x08018920
 800c758:	0801893c 	.word	0x0801893c
 800c75c:	08018890 	.word	0x08018890
 800c760:	24030fe8 	.word	0x24030fe8

0800c764 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c768:	1ccb      	adds	r3, r1, #3
 800c76a:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 800c76e:	2b0c      	cmp	r3, #12
 800c770:	461d      	mov	r5, r3
 800c772:	bf38      	it	cc
 800c774:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c776:	42a9      	cmp	r1, r5
 800c778:	d875      	bhi.n	800c866 <mem_trim+0x102>
 800c77a:	4a4d      	ldr	r2, [pc, #308]	; (800c8b0 <mem_trim+0x14c>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d872      	bhi.n	800c866 <mem_trim+0x102>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c780:	4f4c      	ldr	r7, [pc, #304]	; (800c8b4 <mem_trim+0x150>)
 800c782:	4604      	mov	r4, r0
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	4283      	cmp	r3, r0
 800c788:	d83b      	bhi.n	800c802 <mem_trim+0x9e>
 800c78a:	4a4b      	ldr	r2, [pc, #300]	; (800c8b8 <mem_trim+0x154>)
 800c78c:	6812      	ldr	r2, [r2, #0]
 800c78e:	4282      	cmp	r2, r0
 800c790:	d937      	bls.n	800c802 <mem_trim+0x9e>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c792:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c796:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 800c79a:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c79e:	3e0c      	subs	r6, #12
 800c7a0:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c7a4:	42ae      	cmp	r6, r5
 800c7a6:	d361      	bcc.n	800c86c <mem_trim+0x108>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800c7a8:	d06a      	beq.n	800c880 <mem_trim+0x11c>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c7aa:	4844      	ldr	r0, [pc, #272]	; (800c8bc <mem_trim+0x158>)
 800c7ac:	f007 f9d8 	bl	8013b60 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c7b0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 800c7ba:	f899 1008 	ldrb.w	r1, [r9, #8]
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	d134      	bne.n	800c82c <mem_trim+0xc8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c7c2:	493b      	ldr	r1, [pc, #236]	; (800c8b0 <mem_trim+0x14c>)
 800c7c4:	428a      	cmp	r2, r1
 800c7c6:	d069      	beq.n	800c89c <mem_trim+0x138>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 800c7c8:	493d      	ldr	r1, [pc, #244]	; (800c8c0 <mem_trim+0x15c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7ca:	350c      	adds	r5, #12
    next = mem2->next;
 800c7cc:	f8d9 0000 	ldr.w	r0, [r9]
    if (lfree == mem2) {
 800c7d0:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7d2:	4445      	add	r5, r8
    if (lfree == mem2) {
 800c7d4:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 800c7d6:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 800c7da:	bf08      	it	eq
 800c7dc:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 800c7de:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 800c7e0:	e9c2 0800 	strd	r0, r8, [r2]
    mem2->used = 0;
 800c7e4:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7e6:	4932      	ldr	r1, [pc, #200]	; (800c8b0 <mem_trim+0x14c>)
    mem->next = ptr2;
 800c7e8:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7ec:	6812      	ldr	r2, [r2, #0]
 800c7ee:	428a      	cmp	r2, r1
 800c7f0:	d001      	beq.n	800c7f6 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c7f2:	441a      	add	r2, r3
 800c7f4:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c7f6:	4831      	ldr	r0, [pc, #196]	; (800c8bc <mem_trim+0x158>)
 800c7f8:	f007 f9b8 	bl	8013b6c <sys_mutex_unlock>
  return rmem;
 800c7fc:	4620      	mov	r0, r4
}
 800c7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c802:	4b30      	ldr	r3, [pc, #192]	; (800c8c4 <mem_trim+0x160>)
 800c804:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c808:	492f      	ldr	r1, [pc, #188]	; (800c8c8 <mem_trim+0x164>)
 800c80a:	4830      	ldr	r0, [pc, #192]	; (800c8cc <mem_trim+0x168>)
 800c80c:	f008 fa2c 	bl	8014c68 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	42a3      	cmp	r3, r4
 800c814:	d803      	bhi.n	800c81e <mem_trim+0xba>
 800c816:	4a28      	ldr	r2, [pc, #160]	; (800c8b8 <mem_trim+0x154>)
 800c818:	6812      	ldr	r2, [r2, #0]
 800c81a:	42a2      	cmp	r2, r4
 800c81c:	d8b9      	bhi.n	800c792 <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 800c81e:	f007 f9bf 	bl	8013ba0 <sys_arch_protect>
 800c822:	f007 f9c9 	bl	8013bb8 <sys_arch_unprotect>
    return rmem;
 800c826:	4620      	mov	r0, r4
}
 800c828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c82c:	f105 0118 	add.w	r1, r5, #24
 800c830:	42b1      	cmp	r1, r6
 800c832:	d8e0      	bhi.n	800c7f6 <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c834:	491e      	ldr	r1, [pc, #120]	; (800c8b0 <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c836:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c838:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c83a:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c83c:	d023      	beq.n	800c886 <mem_trim+0x122>
    if (mem2 < lfree) {
 800c83e:	4820      	ldr	r0, [pc, #128]	; (800c8c0 <mem_trim+0x15c>)
  return (struct mem *)(void *)&ram[ptr];
 800c840:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800c842:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 800c844:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 800c848:	428e      	cmp	r6, r1
    mem2->used = 0;
 800c84a:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 800c84e:	bf88      	it	hi
 800c850:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 800c852:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 800c854:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c858:	680a      	ldr	r2, [r1, #0]
 800c85a:	4915      	ldr	r1, [pc, #84]	; (800c8b0 <mem_trim+0x14c>)
 800c85c:	428a      	cmp	r2, r1
 800c85e:	d0ca      	beq.n	800c7f6 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c860:	4413      	add	r3, r2
 800c862:	605d      	str	r5, [r3, #4]
 800c864:	e7c7      	b.n	800c7f6 <mem_trim+0x92>
    return NULL;
 800c866:	2000      	movs	r0, #0
}
 800c868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c86c:	4b15      	ldr	r3, [pc, #84]	; (800c8c4 <mem_trim+0x160>)
 800c86e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c872:	4917      	ldr	r1, [pc, #92]	; (800c8d0 <mem_trim+0x16c>)
 800c874:	4815      	ldr	r0, [pc, #84]	; (800c8cc <mem_trim+0x168>)
 800c876:	f008 f9f7 	bl	8014c68 <iprintf>
    return NULL;
 800c87a:	2000      	movs	r0, #0
}
 800c87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c880:	4620      	mov	r0, r4
 800c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <mem_trim+0x160>)
 800c888:	f240 3216 	movw	r2, #790	; 0x316
 800c88c:	4911      	ldr	r1, [pc, #68]	; (800c8d4 <mem_trim+0x170>)
 800c88e:	480f      	ldr	r0, [pc, #60]	; (800c8cc <mem_trim+0x168>)
 800c890:	f008 f9ea 	bl	8014c68 <iprintf>
    mem2->next = mem->next;
 800c894:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	e7d0      	b.n	800c83e <mem_trim+0xda>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c89c:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <mem_trim+0x160>)
 800c89e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c8a2:	490c      	ldr	r1, [pc, #48]	; (800c8d4 <mem_trim+0x170>)
 800c8a4:	4809      	ldr	r0, [pc, #36]	; (800c8cc <mem_trim+0x168>)
 800c8a6:	f008 f9df 	bl	8014c68 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	e78c      	b.n	800c7c8 <mem_trim+0x64>
 800c8ae:	bf00      	nop
 800c8b0:	0001ffe8 	.word	0x0001ffe8
 800c8b4:	24030ff0 	.word	0x24030ff0
 800c8b8:	24030ff4 	.word	0x24030ff4
 800c8bc:	24030fec 	.word	0x24030fec
 800c8c0:	24030fe8 	.word	0x24030fe8
 800c8c4:	08018804 	.word	0x08018804
 800c8c8:	08018968 	.word	0x08018968
 800c8cc:	08017728 	.word	0x08017728
 800c8d0:	08018980 	.word	0x08018980
 800c8d4:	080189a0 	.word	0x080189a0

0800c8d8 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d066      	beq.n	800c9aa <mem_malloc+0xd2>
{
 800c8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c8e0:	1cc3      	adds	r3, r0, #3
 800c8e2:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 800c8e6:	2b0c      	cmp	r3, #12
 800c8e8:	4698      	mov	r8, r3
 800c8ea:	bf38      	it	cc
 800c8ec:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c8f0:	4540      	cmp	r0, r8
 800c8f2:	d827      	bhi.n	800c944 <mem_malloc+0x6c>
 800c8f4:	4c47      	ldr	r4, [pc, #284]	; (800ca14 <mem_malloc+0x13c>)
 800c8f6:	42a3      	cmp	r3, r4
 800c8f8:	d824      	bhi.n	800c944 <mem_malloc+0x6c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c8fa:	4f47      	ldr	r7, [pc, #284]	; (800ca18 <mem_malloc+0x140>)
  return (mem_size_t)((u8_t *)mem - ram);
 800c8fc:	4e47      	ldr	r6, [pc, #284]	; (800ca1c <mem_malloc+0x144>)
  sys_mutex_lock(&mem_mutex);
 800c8fe:	4848      	ldr	r0, [pc, #288]	; (800ca20 <mem_malloc+0x148>)
 800c900:	f007 f92e 	bl	8013b60 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c904:	6838      	ldr	r0, [r7, #0]
  return (mem_size_t)((u8_t *)mem - ram);
 800c906:	6832      	ldr	r2, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c908:	eba4 0c08 	sub.w	ip, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 800c90c:	1a84      	subs	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c90e:	4564      	cmp	r4, ip
 800c910:	d212      	bcs.n	800c938 <mem_malloc+0x60>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c912:	f06f 0e0b 	mvn.w	lr, #11
 800c916:	e006      	b.n	800c926 <mem_malloc+0x4e>
 800c918:	5911      	ldr	r1, [r2, r4]
 800c91a:	440b      	add	r3, r1
      if ((!mem->used) &&
 800c91c:	4543      	cmp	r3, r8
 800c91e:	d214      	bcs.n	800c94a <mem_malloc+0x72>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c920:	460c      	mov	r4, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c922:	4564      	cmp	r4, ip
 800c924:	d208      	bcs.n	800c938 <mem_malloc+0x60>
  return (struct mem *)(void *)&ram[ptr];
 800c926:	1915      	adds	r5, r2, r4
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c928:	ebae 0304 	sub.w	r3, lr, r4
      if ((!mem->used) &&
 800c92c:	7a29      	ldrb	r1, [r5, #8]
 800c92e:	2900      	cmp	r1, #0
 800c930:	d0f2      	beq.n	800c918 <mem_malloc+0x40>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c932:	5914      	ldr	r4, [r2, r4]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c934:	4564      	cmp	r4, ip
 800c936:	d3f6      	bcc.n	800c926 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c938:	4839      	ldr	r0, [pc, #228]	; (800ca20 <mem_malloc+0x148>)
 800c93a:	f007 f917 	bl	8013b6c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c93e:	2000      	movs	r0, #0
}
 800c940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800c944:	2000      	movs	r0, #0
}
 800c946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c94a:	f108 0c18 	add.w	ip, r8, #24
 800c94e:	f108 080c 	add.w	r8, r8, #12
 800c952:	4563      	cmp	r3, ip
 800c954:	d32a      	bcc.n	800c9ac <mem_malloc+0xd4>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c956:	4b2f      	ldr	r3, [pc, #188]	; (800ca14 <mem_malloc+0x13c>)
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c958:	eb08 0904 	add.w	r9, r8, r4
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c95c:	4599      	cmp	r9, r3
 800c95e:	d04d      	beq.n	800c9fc <mem_malloc+0x124>
  return (struct mem *)(void *)&ram[ptr];
 800c960:	eb02 0309 	add.w	r3, r2, r9
          mem2->used = 0;
 800c964:	f04f 0c00 	mov.w	ip, #0
 800c968:	f883 c008 	strb.w	ip, [r3, #8]
          mem2->next = mem->next;
 800c96c:	f842 1009 	str.w	r1, [r2, r9]
          mem2->prev = ptr;
 800c970:	605c      	str	r4, [r3, #4]
          mem->used = 1;
 800c972:	2301      	movs	r3, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c974:	4927      	ldr	r1, [pc, #156]	; (800ca14 <mem_malloc+0x13c>)
          mem->next = ptr2;
 800c976:	f8c5 9000 	str.w	r9, [r5]
          mem->used = 1;
 800c97a:	722b      	strb	r3, [r5, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c97c:	f852 3009 	ldr.w	r3, [r2, r9]
 800c980:	428b      	cmp	r3, r1
 800c982:	d002      	beq.n	800c98a <mem_malloc+0xb2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c984:	441a      	add	r2, r3
 800c986:	f8c2 9004 	str.w	r9, [r2, #4]
        if (mem == lfree) {
 800c98a:	4285      	cmp	r5, r0
          while (cur->used && cur != ram_end) {
 800c98c:	4c25      	ldr	r4, [pc, #148]	; (800ca24 <mem_malloc+0x14c>)
        if (mem == lfree) {
 800c98e:	d027      	beq.n	800c9e0 <mem_malloc+0x108>
        sys_mutex_unlock(&mem_mutex);
 800c990:	4823      	ldr	r0, [pc, #140]	; (800ca20 <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c992:	44a8      	add	r8, r5
        sys_mutex_unlock(&mem_mutex);
 800c994:	f007 f8ea 	bl	8013b6c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	4543      	cmp	r3, r8
 800c99c:	d318      	bcc.n	800c9d0 <mem_malloc+0xf8>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c99e:	07ab      	lsls	r3, r5, #30
 800c9a0:	d107      	bne.n	800c9b2 <mem_malloc+0xda>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c9a2:	f105 000c 	add.w	r0, r5, #12
}
 800c9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9aa:	4770      	bx	lr
          mem->used = 1;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	722b      	strb	r3, [r5, #8]
 800c9b0:	e7eb      	b.n	800c98a <mem_malloc+0xb2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c9b2:	4b1d      	ldr	r3, [pc, #116]	; (800ca28 <mem_malloc+0x150>)
 800c9b4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c9b8:	491c      	ldr	r1, [pc, #112]	; (800ca2c <mem_malloc+0x154>)
 800c9ba:	481d      	ldr	r0, [pc, #116]	; (800ca30 <mem_malloc+0x158>)
 800c9bc:	f008 f954 	bl	8014c68 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c9c0:	4b19      	ldr	r3, [pc, #100]	; (800ca28 <mem_malloc+0x150>)
 800c9c2:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c9c6:	491b      	ldr	r1, [pc, #108]	; (800ca34 <mem_malloc+0x15c>)
 800c9c8:	4819      	ldr	r0, [pc, #100]	; (800ca30 <mem_malloc+0x158>)
 800c9ca:	f008 f94d 	bl	8014c68 <iprintf>
 800c9ce:	e7e8      	b.n	800c9a2 <mem_malloc+0xca>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c9d0:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <mem_malloc+0x150>)
 800c9d2:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c9d6:	4918      	ldr	r1, [pc, #96]	; (800ca38 <mem_malloc+0x160>)
 800c9d8:	4815      	ldr	r0, [pc, #84]	; (800ca30 <mem_malloc+0x158>)
 800c9da:	f008 f945 	bl	8014c68 <iprintf>
 800c9de:	e7de      	b.n	800c99e <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 800c9e0:	6830      	ldr	r0, [r6, #0]
 800c9e2:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 800c9e4:	6821      	ldr	r1, [r4, #0]
 800c9e6:	e003      	b.n	800c9f0 <mem_malloc+0x118>
  return (struct mem *)(void *)&ram[ptr];
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800c9ec:	7a1a      	ldrb	r2, [r3, #8]
 800c9ee:	b11a      	cbz	r2, 800c9f8 <mem_malloc+0x120>
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	d1f9      	bne.n	800c9e8 <mem_malloc+0x110>
          lfree = cur;
 800c9f4:	6039      	str	r1, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c9f6:	e7cb      	b.n	800c990 <mem_malloc+0xb8>
          lfree = cur;
 800c9f8:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c9fa:	e7c9      	b.n	800c990 <mem_malloc+0xb8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c9fc:	f240 3287 	movw	r2, #903	; 0x387
 800ca00:	490e      	ldr	r1, [pc, #56]	; (800ca3c <mem_malloc+0x164>)
 800ca02:	4b09      	ldr	r3, [pc, #36]	; (800ca28 <mem_malloc+0x150>)
 800ca04:	480a      	ldr	r0, [pc, #40]	; (800ca30 <mem_malloc+0x158>)
 800ca06:	f008 f92f 	bl	8014c68 <iprintf>
          mem2->next = mem->next;
 800ca0a:	6829      	ldr	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 800ca0c:	6832      	ldr	r2, [r6, #0]
        if (mem == lfree) {
 800ca0e:	6838      	ldr	r0, [r7, #0]
 800ca10:	e7a6      	b.n	800c960 <mem_malloc+0x88>
 800ca12:	bf00      	nop
 800ca14:	0001ffe8 	.word	0x0001ffe8
 800ca18:	24030fe8 	.word	0x24030fe8
 800ca1c:	24030ff0 	.word	0x24030ff0
 800ca20:	24030fec 	.word	0x24030fec
 800ca24:	24030ff4 	.word	0x24030ff4
 800ca28:	08018804 	.word	0x08018804
 800ca2c:	080189e4 	.word	0x080189e4
 800ca30:	08017728 	.word	0x08017728
 800ca34:	08018a14 	.word	0x08018a14
 800ca38:	080189b4 	.word	0x080189b4
 800ca3c:	080189a0 	.word	0x080189a0

0800ca40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ca44:	f007 f8ac 	bl	8013ba0 <sys_arch_protect>

  memp = *desc->tab;
 800ca48:	68a3      	ldr	r3, [r4, #8]
 800ca4a:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ca4c:	b18c      	cbz	r4, 800ca72 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ca4e:	6822      	ldr	r2, [r4, #0]
 800ca50:	4605      	mov	r5, r0
 800ca52:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ca54:	07a3      	lsls	r3, r4, #30
 800ca56:	d104      	bne.n	800ca62 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f007 f8ad 	bl	8013bb8 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800ca5e:	4620      	mov	r0, r4
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <do_memp_malloc_pool+0x3c>)
 800ca64:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ca68:	4905      	ldr	r1, [pc, #20]	; (800ca80 <do_memp_malloc_pool+0x40>)
 800ca6a:	4806      	ldr	r0, [pc, #24]	; (800ca84 <do_memp_malloc_pool+0x44>)
 800ca6c:	f008 f8fc 	bl	8014c68 <iprintf>
 800ca70:	e7f2      	b.n	800ca58 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800ca72:	f007 f8a1 	bl	8013bb8 <sys_arch_unprotect>
}
 800ca76:	4620      	mov	r0, r4
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	08018a38 	.word	0x08018a38
 800ca80:	08018a68 	.word	0x08018a68
 800ca84:	08017728 	.word	0x08017728

0800ca88 <memp_init_pool>:
{
 800ca88:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800ca8a:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800ca8c:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800ca8e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800ca92:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 800ca94:	b17c      	cbz	r4, 800cab6 <memp_init_pool+0x2e>
 800ca96:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca98:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 800ca9c:	460a      	mov	r2, r1
 800ca9e:	f023 0303 	bic.w	r3, r3, #3
 800caa2:	e000      	b.n	800caa6 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800caa4:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800caa6:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800caa8:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800caaa:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800caae:	4619      	mov	r1, r3
 800cab0:	42a2      	cmp	r2, r4
 800cab2:	d1f7      	bne.n	800caa4 <memp_init_pool+0x1c>
 800cab4:	602b      	str	r3, [r5, #0]
}
 800cab6:	bc30      	pop	{r4, r5}
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop

0800cabc <memp_init>:
{
 800cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabe:	f8df e054 	ldr.w	lr, [pc, #84]	; 800cb14 <memp_init+0x58>
 800cac2:	2404      	movs	r4, #4
 800cac4:	4b10      	ldr	r3, [pc, #64]	; (800cb08 <memp_init+0x4c>)
  *desc->tab = NULL;
 800cac6:	2600      	movs	r6, #0
{
 800cac8:	4d10      	ldr	r5, [pc, #64]	; (800cb0c <memp_init+0x50>)
 800caca:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 800cace:	4a10      	ldr	r2, [pc, #64]	; (800cb10 <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cad0:	3303      	adds	r3, #3
  *desc->tab = NULL;
 800cad2:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cad4:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800cad8:	b16c      	cbz	r4, 800caf6 <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cada:	2100      	movs	r1, #0
 800cadc:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800cae0:	460a      	mov	r2, r1
 800cae2:	e000      	b.n	800cae6 <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cae4:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800cae6:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800cae8:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800caea:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800caee:	4619      	mov	r1, r3
 800caf0:	42a2      	cmp	r2, r4
 800caf2:	d1f7      	bne.n	800cae4 <memp_init+0x28>
 800caf4:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800caf6:	4577      	cmp	r7, lr
 800caf8:	d005      	beq.n	800cb06 <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 800cafa:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cafe:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800cb02:	8854      	ldrh	r4, [r2, #2]
 800cb04:	e7e4      	b.n	800cad0 <memp_init+0x14>
}
 800cb06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb08:	240379cc 	.word	0x240379cc
 800cb0c:	24037a80 	.word	0x24037a80
 800cb10:	08018b8c 	.word	0x08018b8c
 800cb14:	08018b98 	.word	0x08018b98

0800cb18 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb18:	b108      	cbz	r0, 800cb1e <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cb1a:	f7ff bf91 	b.w	800ca40 <do_memp_malloc_pool>
{
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb22:	4b04      	ldr	r3, [pc, #16]	; (800cb34 <memp_malloc_pool+0x1c>)
 800cb24:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cb28:	4903      	ldr	r1, [pc, #12]	; (800cb38 <memp_malloc_pool+0x20>)
 800cb2a:	4804      	ldr	r0, [pc, #16]	; (800cb3c <memp_malloc_pool+0x24>)
 800cb2c:	f008 f89c 	bl	8014c68 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cb30:	4620      	mov	r0, r4
 800cb32:	bd10      	pop	{r4, pc}
 800cb34:	08018a38 	.word	0x08018a38
 800cb38:	08018a8c 	.word	0x08018a8c
 800cb3c:	08017728 	.word	0x08017728

0800cb40 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb40:	280c      	cmp	r0, #12
{
 800cb42:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb44:	d806      	bhi.n	800cb54 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cb46:	4b08      	ldr	r3, [pc, #32]	; (800cb68 <memp_malloc+0x28>)
 800cb48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800cb4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cb50:	f7ff bf76 	b.w	800ca40 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <memp_malloc+0x2c>)
 800cb56:	f240 1257 	movw	r2, #343	; 0x157
 800cb5a:	4905      	ldr	r1, [pc, #20]	; (800cb70 <memp_malloc+0x30>)
 800cb5c:	4805      	ldr	r0, [pc, #20]	; (800cb74 <memp_malloc+0x34>)
 800cb5e:	f008 f883 	bl	8014c68 <iprintf>
}
 800cb62:	2000      	movs	r0, #0
 800cb64:	bd08      	pop	{r3, pc}
 800cb66:	bf00      	nop
 800cb68:	08018b98 	.word	0x08018b98
 800cb6c:	08018a38 	.word	0x08018a38
 800cb70:	08018aa0 	.word	0x08018aa0
 800cb74:	08017728 	.word	0x08017728

0800cb78 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb78:	b180      	cbz	r0, 800cb9c <memp_free_pool+0x24>
{
 800cb7a:	b570      	push	{r4, r5, r6, lr}
 800cb7c:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800cb7e:	b161      	cbz	r1, 800cb9a <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800cb80:	078b      	lsls	r3, r1, #30
 800cb82:	4605      	mov	r5, r0
 800cb84:	d111      	bne.n	800cbaa <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 800cb86:	f007 f80b 	bl	8013ba0 <sys_arch_protect>
  memp->next = *desc->tab;
 800cb8a:	68ab      	ldr	r3, [r5, #8]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800cb90:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800cb92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800cb96:	f007 b80f 	b.w	8013bb8 <sys_arch_unprotect>
}
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb9c:	4b07      	ldr	r3, [pc, #28]	; (800cbbc <memp_free_pool+0x44>)
 800cb9e:	f240 1295 	movw	r2, #405	; 0x195
 800cba2:	4907      	ldr	r1, [pc, #28]	; (800cbc0 <memp_free_pool+0x48>)
 800cba4:	4807      	ldr	r0, [pc, #28]	; (800cbc4 <memp_free_pool+0x4c>)
 800cba6:	f008 b85f 	b.w	8014c68 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbaa:	4b04      	ldr	r3, [pc, #16]	; (800cbbc <memp_free_pool+0x44>)
 800cbac:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cbb0:	4905      	ldr	r1, [pc, #20]	; (800cbc8 <memp_free_pool+0x50>)
 800cbb2:	4804      	ldr	r0, [pc, #16]	; (800cbc4 <memp_free_pool+0x4c>)
 800cbb4:	f008 f858 	bl	8014c68 <iprintf>
 800cbb8:	e7e5      	b.n	800cb86 <memp_free_pool+0xe>
 800cbba:	bf00      	nop
 800cbbc:	08018a38 	.word	0x08018a38
 800cbc0:	08018a8c 	.word	0x08018a8c
 800cbc4:	08017728 	.word	0x08017728
 800cbc8:	08018ac0 	.word	0x08018ac0

0800cbcc <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cbcc:	280c      	cmp	r0, #12
 800cbce:	d812      	bhi.n	800cbf6 <memp_free+0x2a>
{
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	460c      	mov	r4, r1

  if (mem == NULL) {
 800cbd4:	b171      	cbz	r1, 800cbf4 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	; (800cc14 <memp_free+0x48>)
 800cbd8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbdc:	078b      	lsls	r3, r1, #30
 800cbde:	d111      	bne.n	800cc04 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800cbe0:	f006 ffde 	bl	8013ba0 <sys_arch_protect>
  memp->next = *desc->tab;
 800cbe4:	68ab      	ldr	r3, [r5, #8]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800cbea:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cbec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800cbf0:	f006 bfe2 	b.w	8013bb8 <sys_arch_unprotect>
}
 800cbf4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cbf6:	4b08      	ldr	r3, [pc, #32]	; (800cc18 <memp_free+0x4c>)
 800cbf8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cbfc:	4907      	ldr	r1, [pc, #28]	; (800cc1c <memp_free+0x50>)
 800cbfe:	4808      	ldr	r0, [pc, #32]	; (800cc20 <memp_free+0x54>)
 800cc00:	f008 b832 	b.w	8014c68 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800cc04:	4b04      	ldr	r3, [pc, #16]	; (800cc18 <memp_free+0x4c>)
 800cc06:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cc0a:	4906      	ldr	r1, [pc, #24]	; (800cc24 <memp_free+0x58>)
 800cc0c:	4804      	ldr	r0, [pc, #16]	; (800cc20 <memp_free+0x54>)
 800cc0e:	f008 f82b 	bl	8014c68 <iprintf>
 800cc12:	e7e5      	b.n	800cbe0 <memp_free+0x14>
 800cc14:	08018b98 	.word	0x08018b98
 800cc18:	08018a38 	.word	0x08018a38
 800cc1c:	08018ae0 	.word	0x08018ae0
 800cc20:	08017728 	.word	0x08017728
 800cc24:	08018ac0 	.word	0x08018ac0

0800cc28 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800cc28:	f06f 000b 	mvn.w	r0, #11
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop

0800cc30 <netif_issue_reports>:
{
 800cc30:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cc32:	4604      	mov	r4, r0
 800cc34:	b150      	cbz	r0, 800cc4c <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc36:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800cc3a:	f003 0205 	and.w	r2, r3, #5
 800cc3e:	2a05      	cmp	r2, #5
 800cc40:	d103      	bne.n	800cc4a <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc42:	6862      	ldr	r2, [r4, #4]
 800cc44:	b10a      	cbz	r2, 800cc4a <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cc46:	071b      	lsls	r3, r3, #28
 800cc48:	d408      	bmi.n	800cc5c <netif_issue_reports+0x2c>
}
 800cc4a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cc4c:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <netif_issue_reports+0x38>)
 800cc4e:	f240 326d 	movw	r2, #877	; 0x36d
 800cc52:	4906      	ldr	r1, [pc, #24]	; (800cc6c <netif_issue_reports+0x3c>)
 800cc54:	4806      	ldr	r0, [pc, #24]	; (800cc70 <netif_issue_reports+0x40>)
 800cc56:	f008 f807 	bl	8014c68 <iprintf>
 800cc5a:	e7ec      	b.n	800cc36 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 800cc5c:	1d21      	adds	r1, r4, #4
 800cc5e:	4620      	mov	r0, r4
}
 800cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800cc64:	f005 bf00 	b.w	8012a68 <etharp_request>
 800cc68:	08018bcc 	.word	0x08018bcc
 800cc6c:	08018c00 	.word	0x08018c00
 800cc70:	08017728 	.word	0x08017728

0800cc74 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	4605      	mov	r5, r0
 800cc78:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cc7a:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800cc7c:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cc7e:	b1b9      	cbz	r1, 800ccb0 <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cc80:	686b      	ldr	r3, [r5, #4]
 800cc82:	6822      	ldr	r2, [r4, #0]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d101      	bne.n	800cc8c <netif_do_set_ipaddr.isra.0+0x18>
}
 800cc88:	b002      	add	sp, #8
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cc8c:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cc8e:	4630      	mov	r0, r6
 800cc90:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cc92:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cc94:	f002 f928 	bl	800eee8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cc98:	a901      	add	r1, sp, #4
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f005 fa96 	bl	80121cc <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cca0:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cca2:	2101      	movs	r1, #1
 800cca4:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cca6:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cca8:	f7ff ffc2 	bl	800cc30 <netif_issue_reports>
}
 800ccac:	b002      	add	sp, #8
 800ccae:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ccb0:	4b03      	ldr	r3, [pc, #12]	; (800ccc0 <netif_do_set_ipaddr.isra.0+0x4c>)
 800ccb2:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ccb6:	4903      	ldr	r1, [pc, #12]	; (800ccc4 <netif_do_set_ipaddr.isra.0+0x50>)
 800ccb8:	4803      	ldr	r0, [pc, #12]	; (800ccc8 <netif_do_set_ipaddr.isra.0+0x54>)
 800ccba:	f007 ffd5 	bl	8014c68 <iprintf>
 800ccbe:	e7df      	b.n	800cc80 <netif_do_set_ipaddr.isra.0+0xc>
 800ccc0:	08018bcc 	.word	0x08018bcc
 800ccc4:	08018194 	.word	0x08018194
 800ccc8:	08017728 	.word	0x08017728

0800cccc <netif_init>:
}
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop

0800ccd0 <netif_set_addr>:
{
 800ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccd2:	460d      	mov	r5, r1
 800ccd4:	b083      	sub	sp, #12
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	4617      	mov	r7, r2
 800ccda:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 800ccdc:	f7fb f954 	bl	8007f88 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800cce0:	b1fd      	cbz	r5, 800cd22 <netif_set_addr+0x52>
  if (netmask == NULL) {
 800cce2:	b187      	cbz	r7, 800cd06 <netif_set_addr+0x36>
  if (gw == NULL) {
 800cce4:	b196      	cbz	r6, 800cd0c <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 800cce6:	682b      	ldr	r3, [r5, #0]
 800cce8:	b1a3      	cbz	r3, 800cd14 <netif_set_addr+0x44>
 800ccea:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	68a1      	ldr	r1, [r4, #8]
 800ccf0:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ccf2:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ccf4:	bf18      	it	ne
 800ccf6:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ccf8:	6833      	ldr	r3, [r6, #0]
 800ccfa:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ccfc:	bf18      	it	ne
 800ccfe:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800cd00:	b19a      	cbz	r2, 800cd2a <netif_set_addr+0x5a>
}
 800cd02:	b003      	add	sp, #12
 800cd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 800cd06:	4f0c      	ldr	r7, [pc, #48]	; (800cd38 <netif_set_addr+0x68>)
  if (gw == NULL) {
 800cd08:	2e00      	cmp	r6, #0
 800cd0a:	d1ec      	bne.n	800cce6 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 800cd0c:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 800cd0e:	4e0a      	ldr	r6, [pc, #40]	; (800cd38 <netif_set_addr+0x68>)
  remove = ip4_addr_isany(ipaddr);
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1ea      	bne.n	800ccea <netif_set_addr+0x1a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd14:	aa01      	add	r2, sp, #4
 800cd16:	4629      	mov	r1, r5
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f7ff ffab 	bl	800cc74 <netif_do_set_ipaddr.isra.0>
 800cd1e:	2201      	movs	r2, #1
 800cd20:	e7e4      	b.n	800ccec <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 800cd22:	4d05      	ldr	r5, [pc, #20]	; (800cd38 <netif_set_addr+0x68>)
  if (netmask == NULL) {
 800cd24:	2f00      	cmp	r7, #0
 800cd26:	d1dd      	bne.n	800cce4 <netif_set_addr+0x14>
 800cd28:	e7ed      	b.n	800cd06 <netif_set_addr+0x36>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd2a:	aa01      	add	r2, sp, #4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f7ff ffa0 	bl	800cc74 <netif_do_set_ipaddr.isra.0>
}
 800cd34:	b003      	add	sp, #12
 800cd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd38:	0801a600 	.word	0x0801a600

0800cd3c <netif_add>:
{
 800cd3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	4606      	mov	r6, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	4615      	mov	r5, r2
 800cd46:	461f      	mov	r7, r3
 800cd48:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 800cd4c:	f7fb f91c 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	f000 8083 	beq.w	800ce5c <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cd56:	f1b8 0f00 	cmp.w	r8, #0
 800cd5a:	f000 8088 	beq.w	800ce6e <netif_add+0x132>
  if (ipaddr == NULL) {
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	d070      	beq.n	800ce44 <netif_add+0x108>
  if (netmask == NULL) {
 800cd62:	2d00      	cmp	r5, #0
 800cd64:	d069      	beq.n	800ce3a <netif_add+0xfe>
  if (gw == NULL) {
 800cd66:	2f00      	cmp	r7, #0
 800cd68:	d06a      	beq.n	800ce40 <netif_add+0x104>
  netif->state = state;
 800cd6a:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd6c:	4621      	mov	r1, r4
  netif->num = netif_num;
 800cd6e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800ce9c <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd72:	2400      	movs	r4, #0
  netif->state = state;
 800cd74:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd76:	463b      	mov	r3, r7
  netif->input = input;
 800cd78:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd7a:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 800cd7c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 800cd7e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 800cd80:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 800cd84:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 800cd86:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 800cd8a:	483d      	ldr	r0, [pc, #244]	; (800ce80 <netif_add+0x144>)
  netif->flags = 0;
 800cd8c:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 800cd90:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd92:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 800cd94:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd96:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd9a:	f7ff ff99 	bl	800ccd0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800cd9e:	4630      	mov	r0, r6
 800cda0:	47c0      	blx	r8
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d157      	bne.n	800ce56 <netif_add+0x11a>
      if (netif->num == 255) {
 800cda6:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 800cdaa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800cea0 <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cdae:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800ce90 <netif_add+0x154>
 800cdb2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800cea4 <netif_add+0x168>
 800cdb6:	4f33      	ldr	r7, [pc, #204]	; (800ce84 <netif_add+0x148>)
      if (netif->num == 255) {
 800cdb8:	2aff      	cmp	r2, #255	; 0xff
 800cdba:	d102      	bne.n	800cdc2 <netif_add+0x86>
        netif->num = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cdc2:	f8d8 4000 	ldr.w	r4, [r8]
 800cdc6:	2c00      	cmp	r4, #0
 800cdc8:	d042      	beq.n	800ce50 <netif_add+0x114>
      num_netifs = 0;
 800cdca:	2500      	movs	r5, #0
 800cdcc:	e007      	b.n	800cdde <netif_add+0xa2>
        if (netif2->num == netif->num) {
 800cdce:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800cdd2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d014      	beq.n	800ce04 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cdda:	6824      	ldr	r4, [r4, #0]
 800cddc:	b1fc      	cbz	r4, 800ce1e <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cdde:	42b4      	cmp	r4, r6
        num_netifs++;
 800cde0:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cde4:	d013      	beq.n	800ce0e <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cde6:	2dff      	cmp	r5, #255	; 0xff
 800cde8:	ddf1      	ble.n	800cdce <netif_add+0x92>
 800cdea:	465b      	mov	r3, fp
 800cdec:	f240 128d 	movw	r2, #397	; 0x18d
 800cdf0:	4925      	ldr	r1, [pc, #148]	; (800ce88 <netif_add+0x14c>)
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	f007 ff38 	bl	8014c68 <iprintf>
        if (netif2->num == netif->num) {
 800cdf8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800cdfc:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d1ea      	bne.n	800cdda <netif_add+0x9e>
          netif->num++;
 800ce04:	3201      	adds	r2, #1
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 800ce0c:	e7d4      	b.n	800cdb8 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ce0e:	465b      	mov	r3, fp
 800ce10:	f240 128b 	movw	r2, #395	; 0x18b
 800ce14:	4649      	mov	r1, r9
 800ce16:	4638      	mov	r0, r7
 800ce18:	f007 ff26 	bl	8014c68 <iprintf>
 800ce1c:	e7e3      	b.n	800cde6 <netif_add+0xaa>
  netif->next = netif_list;
 800ce1e:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 800ce22:	2bfe      	cmp	r3, #254	; 0xfe
 800ce24:	d012      	beq.n	800ce4c <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 800ce26:	3301      	adds	r3, #1
 800ce28:	b2db      	uxtb	r3, r3
  return netif;
 800ce2a:	4630      	mov	r0, r6
  netif->next = netif_list;
 800ce2c:	6034      	str	r4, [r6, #0]
 800ce2e:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 800ce32:	f8c8 6000 	str.w	r6, [r8]
}
 800ce36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ce3a:	4d14      	ldr	r5, [pc, #80]	; (800ce8c <netif_add+0x150>)
  if (gw == NULL) {
 800ce3c:	2f00      	cmp	r7, #0
 800ce3e:	d194      	bne.n	800cd6a <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ce40:	4f12      	ldr	r7, [pc, #72]	; (800ce8c <netif_add+0x150>)
 800ce42:	e792      	b.n	800cd6a <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ce44:	4c11      	ldr	r4, [pc, #68]	; (800ce8c <netif_add+0x150>)
  if (netmask == NULL) {
 800ce46:	2d00      	cmp	r5, #0
 800ce48:	d18d      	bne.n	800cd66 <netif_add+0x2a>
 800ce4a:	e7f6      	b.n	800ce3a <netif_add+0xfe>
    netif_num = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	e7ec      	b.n	800ce2a <netif_add+0xee>
  if (netif->num == 254) {
 800ce50:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800ce54:	e7e5      	b.n	800ce22 <netif_add+0xe6>
    return NULL;
 800ce56:	4620      	mov	r0, r4
}
 800ce58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ce5c:	4b0c      	ldr	r3, [pc, #48]	; (800ce90 <netif_add+0x154>)
 800ce5e:	f240 1227 	movw	r2, #295	; 0x127
 800ce62:	490c      	ldr	r1, [pc, #48]	; (800ce94 <netif_add+0x158>)
 800ce64:	4807      	ldr	r0, [pc, #28]	; (800ce84 <netif_add+0x148>)
 800ce66:	f007 feff 	bl	8014c68 <iprintf>
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	e7e3      	b.n	800ce36 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ce6e:	4b08      	ldr	r3, [pc, #32]	; (800ce90 <netif_add+0x154>)
 800ce70:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ce74:	4908      	ldr	r1, [pc, #32]	; (800ce98 <netif_add+0x15c>)
 800ce76:	4803      	ldr	r0, [pc, #12]	; (800ce84 <netif_add+0x148>)
 800ce78:	f007 fef6 	bl	8014c68 <iprintf>
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	e7da      	b.n	800ce36 <netif_add+0xfa>
 800ce80:	0800cc29 	.word	0x0800cc29
 800ce84:	08017728 	.word	0x08017728
 800ce88:	08018c78 	.word	0x08018c78
 800ce8c:	0801a600 	.word	0x0801a600
 800ce90:	08018bcc 	.word	0x08018bcc
 800ce94:	08018c24 	.word	0x08018c24
 800ce98:	08018c40 	.word	0x08018c40
 800ce9c:	24037a8c 	.word	0x24037a8c
 800cea0:	24037a88 	.word	0x24037a88
 800cea4:	08018c64 	.word	0x08018c64

0800cea8 <netif_set_default>:
{
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800ceac:	f7fb f86c 	bl	8007f88 <sys_check_core_locking>
  netif_default = netif;
 800ceb0:	4b01      	ldr	r3, [pc, #4]	; (800ceb8 <netif_set_default+0x10>)
 800ceb2:	601c      	str	r4, [r3, #0]
}
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	bf00      	nop
 800ceb8:	24037a84 	.word	0x24037a84

0800cebc <netif_set_up>:
{
 800cebc:	b510      	push	{r4, lr}
 800cebe:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800cec0:	f7fb f862 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cec4:	b174      	cbz	r4, 800cee4 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cec6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800ceca:	07da      	lsls	r2, r3, #31
 800cecc:	d500      	bpl.n	800ced0 <netif_set_up+0x14>
}
 800cece:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ced0:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ced4:	4620      	mov	r0, r4
 800ced6:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ced8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800cedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cee0:	f7ff bea6 	b.w	800cc30 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cee4:	4b04      	ldr	r3, [pc, #16]	; (800cef8 <netif_set_up+0x3c>)
 800cee6:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ceea:	4904      	ldr	r1, [pc, #16]	; (800cefc <netif_set_up+0x40>)
 800ceec:	4804      	ldr	r0, [pc, #16]	; (800cf00 <netif_set_up+0x44>)
}
 800ceee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cef2:	f007 beb9 	b.w	8014c68 <iprintf>
 800cef6:	bf00      	nop
 800cef8:	08018bcc 	.word	0x08018bcc
 800cefc:	08018ca8 	.word	0x08018ca8
 800cf00:	08017728 	.word	0x08017728

0800cf04 <netif_set_down>:
{
 800cf04:	b510      	push	{r4, lr}
 800cf06:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800cf08:	f7fb f83e 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cf0c:	b17c      	cbz	r4, 800cf2e <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800cf0e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800cf12:	07da      	lsls	r2, r3, #31
 800cf14:	d505      	bpl.n	800cf22 <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cf16:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cf1a:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cf1c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cf20:	d400      	bmi.n	800cf24 <netif_set_down+0x20>
}
 800cf22:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 800cf24:	4620      	mov	r0, r4
}
 800cf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 800cf2a:	f005 bb63 	b.w	80125f4 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cf2e:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <netif_set_down+0x3c>)
 800cf30:	f240 329b 	movw	r2, #923	; 0x39b
 800cf34:	4903      	ldr	r1, [pc, #12]	; (800cf44 <netif_set_down+0x40>)
 800cf36:	4804      	ldr	r0, [pc, #16]	; (800cf48 <netif_set_down+0x44>)
}
 800cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cf3c:	f007 be94 	b.w	8014c68 <iprintf>
 800cf40:	08018bcc 	.word	0x08018bcc
 800cf44:	08018cc4 	.word	0x08018cc4
 800cf48:	08017728 	.word	0x08017728

0800cf4c <netif_set_link_up>:
{
 800cf4c:	b510      	push	{r4, lr}
 800cf4e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800cf50:	f7fb f81a 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf54:	b19c      	cbz	r4, 800cf7e <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cf56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800cf5a:	075a      	lsls	r2, r3, #29
 800cf5c:	d500      	bpl.n	800cf60 <netif_set_link_up+0x14>
}
 800cf5e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cf60:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf64:	2103      	movs	r1, #3
 800cf66:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cf68:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf6c:	f7ff fe60 	bl	800cc30 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800cf70:	69e3      	ldr	r3, [r4, #28]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d0f3      	beq.n	800cf5e <netif_set_link_up+0x12>
 800cf76:	4620      	mov	r0, r4
}
 800cf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800cf7c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf7e:	4b04      	ldr	r3, [pc, #16]	; (800cf90 <netif_set_link_up+0x44>)
 800cf80:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cf84:	4903      	ldr	r1, [pc, #12]	; (800cf94 <netif_set_link_up+0x48>)
 800cf86:	4804      	ldr	r0, [pc, #16]	; (800cf98 <netif_set_link_up+0x4c>)
}
 800cf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf8c:	f007 be6c 	b.w	8014c68 <iprintf>
 800cf90:	08018bcc 	.word	0x08018bcc
 800cf94:	08018ce4 	.word	0x08018ce4
 800cf98:	08017728 	.word	0x08017728

0800cf9c <netif_set_link_down>:
{
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800cfa0:	f7fa fff2 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cfa4:	b174      	cbz	r4, 800cfc4 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cfa6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800cfaa:	075a      	lsls	r2, r3, #29
 800cfac:	d509      	bpl.n	800cfc2 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cfae:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800cfb2:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cfb4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cfb8:	b11a      	cbz	r2, 800cfc2 <netif_set_link_down+0x26>
 800cfba:	4620      	mov	r0, r4
}
 800cfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800cfc0:	4710      	bx	r2
}
 800cfc2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <netif_set_link_down+0x3c>)
 800cfc6:	f240 4206 	movw	r2, #1030	; 0x406
 800cfca:	4904      	ldr	r1, [pc, #16]	; (800cfdc <netif_set_link_down+0x40>)
 800cfcc:	4804      	ldr	r0, [pc, #16]	; (800cfe0 <netif_set_link_down+0x44>)
}
 800cfce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cfd2:	f007 be49 	b.w	8014c68 <iprintf>
 800cfd6:	bf00      	nop
 800cfd8:	08018bcc 	.word	0x08018bcc
 800cfdc:	08018d08 	.word	0x08018d08
 800cfe0:	08017728 	.word	0x08017728

0800cfe4 <netif_set_link_callback>:
{
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800cfea:	f7fa ffcd 	bl	8007f88 <sys_check_core_locking>
  if (netif) {
 800cfee:	b104      	cbz	r4, 800cff2 <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800cff0:	61e5      	str	r5, [r4, #28]
}
 800cff2:	bd38      	pop	{r3, r4, r5, pc}

0800cff4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cff4:	b510      	push	{r4, lr}
 800cff6:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800cff8:	f7fa ffc6 	bl	8007f88 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800cffc:	b164      	cbz	r4, 800d018 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800cffe:	4b07      	ldr	r3, [pc, #28]	; (800d01c <netif_get_by_index+0x28>)
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	b910      	cbnz	r0, 800d00a <netif_get_by_index+0x16>
 800d004:	e007      	b.n	800d016 <netif_get_by_index+0x22>
 800d006:	6800      	ldr	r0, [r0, #0]
 800d008:	b128      	cbz	r0, 800d016 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 800d00a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800d00e:	3301      	adds	r3, #1
 800d010:	b2db      	uxtb	r3, r3
 800d012:	42a3      	cmp	r3, r4
 800d014:	d1f7      	bne.n	800d006 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 800d016:	bd10      	pop	{r4, pc}
  return NULL;
 800d018:	4620      	mov	r0, r4
}
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	24037a88 	.word	0x24037a88

0800d020 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d020:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d022:	f006 fdbd 	bl	8013ba0 <sys_arch_protect>
 800d026:	4b09      	ldr	r3, [pc, #36]	; (800d04c <pbuf_free_ooseq_callback+0x2c>)
 800d028:	2200      	movs	r2, #0
 800d02a:	701a      	strb	r2, [r3, #0]
 800d02c:	f006 fdc4 	bl	8013bb8 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d030:	4b07      	ldr	r3, [pc, #28]	; (800d050 <pbuf_free_ooseq_callback+0x30>)
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	b910      	cbnz	r0, 800d03c <pbuf_free_ooseq_callback+0x1c>
 800d036:	e008      	b.n	800d04a <pbuf_free_ooseq_callback+0x2a>
 800d038:	68c0      	ldr	r0, [r0, #12]
 800d03a:	b130      	cbz	r0, 800d04a <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 800d03c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0fa      	beq.n	800d038 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800d042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 800d046:	f001 bf79 	b.w	800ef3c <tcp_free_ooseq>
}
 800d04a:	bd08      	pop	{r3, pc}
 800d04c:	24037a8d 	.word	0x24037a8d
 800d050:	24037a90 	.word	0x24037a90

0800d054 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 800d054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 800d058:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d05a:	f8df a124 	ldr.w	sl, [pc, #292]	; 800d180 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 800d05e:	4605      	mov	r5, r0
 800d060:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 800d062:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d064:	8944      	ldrh	r4, [r0, #10]
 800d066:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d068:	f8df b128 	ldr.w	fp, [pc, #296]	; 800d194 <pbuf_copy.part.0+0x140>
 800d06c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800d188 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d070:	1be4      	subs	r4, r4, r7
 800d072:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d074:	6868      	ldr	r0, [r5, #4]
 800d076:	429c      	cmp	r4, r3
 800d078:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d07c:	4438      	add	r0, r7
 800d07e:	bf28      	it	cs
 800d080:	461c      	movcs	r4, r3
 800d082:	4431      	add	r1, r6
 800d084:	4622      	mov	r2, r4
    offset_to += len;
 800d086:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d088:	f007 ffaf 	bl	8014fea <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d08c:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800d08e:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d090:	429f      	cmp	r7, r3
 800d092:	d838      	bhi.n	800d106 <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d094:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800d098:	429e      	cmp	r6, r3
 800d09a:	d82a      	bhi.n	800d0f2 <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 800d09c:	429e      	cmp	r6, r3
 800d09e:	d318      	bcc.n	800d0d2 <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800d0a0:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800d0a2:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 800d0a6:	429f      	cmp	r7, r3
 800d0a8:	d04c      	beq.n	800d144 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d0aa:	f1b8 0f00 	cmp.w	r8, #0
 800d0ae:	d145      	bne.n	800d13c <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d0b0:	892a      	ldrh	r2, [r5, #8]
 800d0b2:	896b      	ldrh	r3, [r5, #10]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d14d      	bne.n	800d154 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0b8:	6828      	ldr	r0, [r5, #0]
 800d0ba:	b140      	cbz	r0, 800d0ce <pbuf_copy.part.0+0x7a>
 800d0bc:	4b30      	ldr	r3, [pc, #192]	; (800d180 <pbuf_copy.part.0+0x12c>)
 800d0be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d0c2:	4930      	ldr	r1, [pc, #192]	; (800d184 <pbuf_copy.part.0+0x130>)
 800d0c4:	4830      	ldr	r0, [pc, #192]	; (800d188 <pbuf_copy.part.0+0x134>)
 800d0c6:	f007 fdcf 	bl	8014c68 <iprintf>
 800d0ca:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800d0ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 800d0d2:	896a      	ldrh	r2, [r5, #10]
 800d0d4:	4297      	cmp	r7, r2
 800d0d6:	d040      	beq.n	800d15a <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d0d8:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d01a      	beq.n	800d116 <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d0e0:	896c      	ldrh	r4, [r5, #10]
 800d0e2:	2d00      	cmp	r5, #0
 800d0e4:	d0c4      	beq.n	800d070 <pbuf_copy.part.0+0x1c>
 800d0e6:	892b      	ldrh	r3, [r5, #8]
 800d0e8:	42a3      	cmp	r3, r4
 800d0ea:	d045      	beq.n	800d178 <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0ec:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800d0f0:	e7be      	b.n	800d070 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d0f2:	4653      	mov	r3, sl
 800d0f4:	f240 32da 	movw	r2, #986	; 0x3da
 800d0f8:	4924      	ldr	r1, [pc, #144]	; (800d18c <pbuf_copy.part.0+0x138>)
 800d0fa:	4648      	mov	r0, r9
 800d0fc:	f007 fdb4 	bl	8014c68 <iprintf>
    if (offset_from >= p_from->len) {
 800d100:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800d104:	e7ca      	b.n	800d09c <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d106:	4653      	mov	r3, sl
 800d108:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d10c:	4659      	mov	r1, fp
 800d10e:	4648      	mov	r0, r9
 800d110:	f007 fdaa 	bl	8014c68 <iprintf>
 800d114:	e7be      	b.n	800d094 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d116:	f8d8 2000 	ldr.w	r2, [r8]
 800d11a:	2a00      	cmp	r2, #0
 800d11c:	d0e0      	beq.n	800d0e0 <pbuf_copy.part.0+0x8c>
 800d11e:	4b18      	ldr	r3, [pc, #96]	; (800d180 <pbuf_copy.part.0+0x12c>)
 800d120:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d124:	4917      	ldr	r1, [pc, #92]	; (800d184 <pbuf_copy.part.0+0x130>)
 800d126:	4818      	ldr	r0, [pc, #96]	; (800d188 <pbuf_copy.part.0+0x134>)
 800d128:	f007 fd9e 	bl	8014c68 <iprintf>
 800d12c:	f06f 0005 	mvn.w	r0, #5
}
 800d130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d134:	f1b8 0f00 	cmp.w	r8, #0
 800d138:	d00a      	beq.n	800d150 <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 800d13a:	2700      	movs	r7, #0
 800d13c:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d13e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800d142:	e7c9      	b.n	800d0d8 <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 800d144:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d146:	2d00      	cmp	r5, #0
 800d148:	d1f4      	bne.n	800d134 <pbuf_copy.part.0+0xe0>
 800d14a:	f1b8 0f00 	cmp.w	r8, #0
 800d14e:	d108      	bne.n	800d162 <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d150:	2d00      	cmp	r5, #0
 800d152:	d1ad      	bne.n	800d0b0 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 800d154:	2000      	movs	r0, #0
}
 800d156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 800d15a:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d15c:	b10d      	cbz	r5, 800d162 <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 800d15e:	2700      	movs	r7, #0
 800d160:	e7ed      	b.n	800d13e <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d162:	4b07      	ldr	r3, [pc, #28]	; (800d180 <pbuf_copy.part.0+0x12c>)
 800d164:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d168:	4909      	ldr	r1, [pc, #36]	; (800d190 <pbuf_copy.part.0+0x13c>)
 800d16a:	4807      	ldr	r0, [pc, #28]	; (800d188 <pbuf_copy.part.0+0x134>)
 800d16c:	f007 fd7c 	bl	8014c68 <iprintf>
 800d170:	f06f 000f 	mvn.w	r0, #15
}
 800d174:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0b6      	beq.n	800d0ec <pbuf_copy.part.0+0x98>
 800d17e:	e79d      	b.n	800d0bc <pbuf_copy.part.0+0x68>
 800d180:	08018d2c 	.word	0x08018d2c
 800d184:	08018da0 	.word	0x08018da0
 800d188:	08017728 	.word	0x08017728
 800d18c:	08018d74 	.word	0x08018d74
 800d190:	08018d90 	.word	0x08018d90
 800d194:	08018d5c 	.word	0x08018d5c

0800d198 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d198:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800d19c:	2b01      	cmp	r3, #1
{
 800d19e:	b570      	push	{r4, r5, r6, lr}
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d1a6:	d10d      	bne.n	800d1c4 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d1a8:	200b      	movs	r0, #11
 800d1aa:	f7ff fcc9 	bl	800cb40 <memp_malloc>
  if (p == NULL) {
 800d1ae:	b140      	cbz	r0, 800d1c2 <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 800d1b0:	2300      	movs	r3, #0
  p->ref = 1;
 800d1b2:	2201      	movs	r2, #1
  p->payload = payload;
 800d1b4:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800d1b6:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 800d1b8:	6003      	str	r3, [r0, #0]
  p->len = len;
 800d1ba:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800d1bc:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800d1be:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800d1c0:	81c2      	strh	r2, [r0, #14]
}
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d1c4:	4b03      	ldr	r3, [pc, #12]	; (800d1d4 <pbuf_alloc_reference+0x3c>)
 800d1c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d1ca:	4903      	ldr	r1, [pc, #12]	; (800d1d8 <pbuf_alloc_reference+0x40>)
 800d1cc:	4803      	ldr	r0, [pc, #12]	; (800d1dc <pbuf_alloc_reference+0x44>)
 800d1ce:	f007 fd4b 	bl	8014c68 <iprintf>
 800d1d2:	e7e9      	b.n	800d1a8 <pbuf_alloc_reference+0x10>
 800d1d4:	08018d2c 	.word	0x08018d2c
 800d1d8:	08018dcc 	.word	0x08018dcc
 800d1dc:	08017728 	.word	0x08017728

0800d1e0 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d1e0:	3003      	adds	r0, #3
 800d1e2:	f020 0003 	bic.w	r0, r0, #3
{
 800d1e6:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d1e8:	eb01 0e00 	add.w	lr, r1, r0
{
 800d1ec:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800d1f0:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d1f2:	45e6      	cmp	lr, ip
 800d1f4:	d80d      	bhi.n	800d212 <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 800d1f6:	b104      	cbz	r4, 800d1fa <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d1f8:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d1fa:	4618      	mov	r0, r3
  p->next = NULL;
 800d1fc:	2300      	movs	r3, #0
  p->payload = payload;
 800d1fe:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 800d200:	2402      	movs	r4, #2
  p->next = NULL;
 800d202:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800d204:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800d206:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800d208:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800d20a:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800d20c:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 800d20e:	81c3      	strh	r3, [r0, #14]
}
 800d210:	bd10      	pop	{r4, pc}
    return NULL;
 800d212:	2000      	movs	r0, #0
}
 800d214:	bd10      	pop	{r4, pc}
 800d216:	bf00      	nop

0800d218 <pbuf_add_header>:
{
 800d218:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d21a:	b310      	cbz	r0, 800d262 <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d21c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800d220:	d20c      	bcs.n	800d23c <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 800d222:	b169      	cbz	r1, 800d240 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 800d224:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d228:	8902      	ldrh	r2, [r0, #8]
 800d22a:	4603      	mov	r3, r0
 800d22c:	4462      	add	r2, ip
 800d22e:	b292      	uxth	r2, r2
 800d230:	4594      	cmp	ip, r2
 800d232:	d803      	bhi.n	800d23c <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d234:	f990 000c 	ldrsb.w	r0, [r0, #12]
 800d238:	2800      	cmp	r0, #0
 800d23a:	db03      	blt.n	800d244 <pbuf_add_header+0x2c>
    return 1;
 800d23c:	2001      	movs	r0, #1
}
 800d23e:	bd08      	pop	{r3, pc}
    return 0;
 800d240:	4608      	mov	r0, r1
}
 800d242:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800d244:	6858      	ldr	r0, [r3, #4]
 800d246:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d248:	f103 0010 	add.w	r0, r3, #16
 800d24c:	4281      	cmp	r1, r0
 800d24e:	d3f5      	bcc.n	800d23c <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 800d250:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800d254:	2000      	movs	r0, #0
  p->payload = payload;
 800d256:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d258:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d25a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d25c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800d260:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d262:	4b04      	ldr	r3, [pc, #16]	; (800d274 <pbuf_add_header+0x5c>)
 800d264:	f240 12df 	movw	r2, #479	; 0x1df
 800d268:	4903      	ldr	r1, [pc, #12]	; (800d278 <pbuf_add_header+0x60>)
 800d26a:	4804      	ldr	r0, [pc, #16]	; (800d27c <pbuf_add_header+0x64>)
 800d26c:	f007 fcfc 	bl	8014c68 <iprintf>
    return 1;
 800d270:	2001      	movs	r0, #1
}
 800d272:	bd08      	pop	{r3, pc}
 800d274:	08018d2c 	.word	0x08018d2c
 800d278:	08018324 	.word	0x08018324
 800d27c:	08017728 	.word	0x08017728

0800d280 <pbuf_remove_header>:
{
 800d280:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d282:	b1a0      	cbz	r0, 800d2ae <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d284:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800d288:	d21a      	bcs.n	800d2c0 <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 800d28a:	b171      	cbz	r1, 800d2aa <pbuf_remove_header+0x2a>
 800d28c:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 800d28e:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d290:	895a      	ldrh	r2, [r3, #10]
 800d292:	4290      	cmp	r0, r2
 800d294:	d816      	bhi.n	800d2c4 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d296:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800d298:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d29a:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d29c:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800d29e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d2a0:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d2a2:	605c      	str	r4, [r3, #4]
  return 0;
 800d2a4:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d2a6:	811a      	strh	r2, [r3, #8]
}
 800d2a8:	bd10      	pop	{r4, pc}
    return 0;
 800d2aa:	4608      	mov	r0, r1
}
 800d2ac:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d2ae:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <pbuf_remove_header+0x58>)
 800d2b0:	f240 224b 	movw	r2, #587	; 0x24b
 800d2b4:	4909      	ldr	r1, [pc, #36]	; (800d2dc <pbuf_remove_header+0x5c>)
 800d2b6:	480a      	ldr	r0, [pc, #40]	; (800d2e0 <pbuf_remove_header+0x60>)
 800d2b8:	f007 fcd6 	bl	8014c68 <iprintf>
    return 1;
 800d2bc:	2001      	movs	r0, #1
}
 800d2be:	bd10      	pop	{r4, pc}
    return 1;
 800d2c0:	2001      	movs	r0, #1
}
 800d2c2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d2c4:	4b04      	ldr	r3, [pc, #16]	; (800d2d8 <pbuf_remove_header+0x58>)
 800d2c6:	f240 2255 	movw	r2, #597	; 0x255
 800d2ca:	4906      	ldr	r1, [pc, #24]	; (800d2e4 <pbuf_remove_header+0x64>)
 800d2cc:	4804      	ldr	r0, [pc, #16]	; (800d2e0 <pbuf_remove_header+0x60>)
 800d2ce:	f007 fccb 	bl	8014c68 <iprintf>
 800d2d2:	2001      	movs	r0, #1
}
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	bf00      	nop
 800d2d8:	08018d2c 	.word	0x08018d2c
 800d2dc:	08018324 	.word	0x08018324
 800d2e0:	08017728 	.word	0x08017728
 800d2e4:	08018de0 	.word	0x08018de0

0800d2e8 <pbuf_header_force>:
  if (header_size_increment < 0) {
 800d2e8:	2900      	cmp	r1, #0
 800d2ea:	db1a      	blt.n	800d322 <pbuf_header_force+0x3a>
{
 800d2ec:	b508      	push	{r3, lr}
 800d2ee:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 800d2f0:	b1d0      	cbz	r0, 800d328 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 800d2f2:	b341      	cbz	r1, 800d346 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 800d2f4:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d2f8:	891a      	ldrh	r2, [r3, #8]
 800d2fa:	4462      	add	r2, ip
 800d2fc:	b292      	uxth	r2, r2
 800d2fe:	4594      	cmp	ip, r2
 800d300:	d81f      	bhi.n	800d342 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d302:	f993 000c 	ldrsb.w	r0, [r3, #12]
 800d306:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800d308:	6858      	ldr	r0, [r3, #4]
 800d30a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d30e:	db14      	blt.n	800d33a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 800d310:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800d314:	2000      	movs	r0, #0
  p->payload = payload;
 800d316:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d318:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d31a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d31c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800d320:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d322:	4249      	negs	r1, r1
 800d324:	f7ff bfac 	b.w	800d280 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800d328:	4b08      	ldr	r3, [pc, #32]	; (800d34c <pbuf_header_force+0x64>)
 800d32a:	f240 12df 	movw	r2, #479	; 0x1df
 800d32e:	4908      	ldr	r1, [pc, #32]	; (800d350 <pbuf_header_force+0x68>)
 800d330:	4808      	ldr	r0, [pc, #32]	; (800d354 <pbuf_header_force+0x6c>)
 800d332:	f007 fc99 	bl	8014c68 <iprintf>
    return 1;
 800d336:	2001      	movs	r0, #1
}
 800d338:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d33a:	f103 0010 	add.w	r0, r3, #16
 800d33e:	4281      	cmp	r1, r0
 800d340:	d2e6      	bcs.n	800d310 <pbuf_header_force+0x28>
    return 1;
 800d342:	2001      	movs	r0, #1
}
 800d344:	bd08      	pop	{r3, pc}
    return 0;
 800d346:	4608      	mov	r0, r1
}
 800d348:	bd08      	pop	{r3, pc}
 800d34a:	bf00      	nop
 800d34c:	08018d2c 	.word	0x08018d2c
 800d350:	08018324 	.word	0x08018324
 800d354:	08017728 	.word	0x08017728

0800d358 <pbuf_free>:
{
 800d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 800d35c:	4605      	mov	r5, r0
 800d35e:	2800      	cmp	r0, #0
 800d360:	d055      	beq.n	800d40e <pbuf_free+0xb6>
  count = 0;
 800d362:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d364:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800d42c <pbuf_free+0xd4>
 800d368:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800d434 <pbuf_free+0xdc>
 800d36c:	4f2c      	ldr	r7, [pc, #176]	; (800d420 <pbuf_free+0xc8>)
 800d36e:	e008      	b.n	800d382 <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d370:	692b      	ldr	r3, [r5, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d03d      	beq.n	800d3f2 <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800d376:	4628      	mov	r0, r5
 800d378:	4798      	blx	r3
      count++;
 800d37a:	3601      	adds	r6, #1
 800d37c:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800d37e:	b1fc      	cbz	r4, 800d3c0 <pbuf_free+0x68>
 800d380:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800d382:	f006 fc0d 	bl	8013ba0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d386:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800d388:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d38a:	b1e3      	cbz	r3, 800d3c6 <pbuf_free+0x6e>
    ref = --(p->ref);
 800d38c:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800d38e:	4620      	mov	r0, r4
    ref = --(p->ref);
 800d390:	b2dc      	uxtb	r4, r3
 800d392:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800d394:	f006 fc10 	bl	8013bb8 <sys_arch_unprotect>
    if (ref == 0) {
 800d398:	b994      	cbnz	r4, 800d3c0 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d39a:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800d39c:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d39e:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800d3a0:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d3a2:	d4e5      	bmi.n	800d370 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800d3a4:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d01d      	beq.n	800d3e8 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d029      	beq.n	800d404 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d3b0:	b993      	cbnz	r3, 800d3d8 <pbuf_free+0x80>
      count++;
 800d3b2:	3601      	adds	r6, #1
          mem_free(p);
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f7ff f8eb 	bl	800c590 <mem_free>
      count++;
 800d3ba:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800d3bc:	2c00      	cmp	r4, #0
 800d3be:	d1df      	bne.n	800d380 <pbuf_free+0x28>
}
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d3c6:	4643      	mov	r3, r8
 800d3c8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f007 fc4a 	bl	8014c68 <iprintf>
    ref = --(p->ref);
 800d3d4:	7bab      	ldrb	r3, [r5, #14]
 800d3d6:	e7d9      	b.n	800d38c <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800d3d8:	4643      	mov	r3, r8
 800d3da:	f240 320f 	movw	r2, #783	; 0x30f
 800d3de:	4911      	ldr	r1, [pc, #68]	; (800d424 <pbuf_free+0xcc>)
 800d3e0:	4638      	mov	r0, r7
 800d3e2:	f007 fc41 	bl	8014c68 <iprintf>
 800d3e6:	e7c8      	b.n	800d37a <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800d3e8:	4629      	mov	r1, r5
 800d3ea:	200c      	movs	r0, #12
 800d3ec:	f7ff fbee 	bl	800cbcc <memp_free>
 800d3f0:	e7c3      	b.n	800d37a <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d3f2:	4643      	mov	r3, r8
 800d3f4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d3f8:	490b      	ldr	r1, [pc, #44]	; (800d428 <pbuf_free+0xd0>)
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f007 fc34 	bl	8014c68 <iprintf>
        pc->custom_free_function(p);
 800d400:	692b      	ldr	r3, [r5, #16]
 800d402:	e7b8      	b.n	800d376 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800d404:	4629      	mov	r1, r5
 800d406:	200b      	movs	r0, #11
 800d408:	f7ff fbe0 	bl	800cbcc <memp_free>
 800d40c:	e7b5      	b.n	800d37a <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d40e:	4b07      	ldr	r3, [pc, #28]	; (800d42c <pbuf_free+0xd4>)
 800d410:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d414:	4906      	ldr	r1, [pc, #24]	; (800d430 <pbuf_free+0xd8>)
    return 0;
 800d416:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800d418:	4801      	ldr	r0, [pc, #4]	; (800d420 <pbuf_free+0xc8>)
 800d41a:	f007 fc25 	bl	8014c68 <iprintf>
    return 0;
 800d41e:	e7cf      	b.n	800d3c0 <pbuf_free+0x68>
 800d420:	08017728 	.word	0x08017728
 800d424:	08018e3c 	.word	0x08018e3c
 800d428:	08018e18 	.word	0x08018e18
 800d42c:	08018d2c 	.word	0x08018d2c
 800d430:	08018324 	.word	0x08018324
 800d434:	08018e00 	.word	0x08018e00

0800d438 <pbuf_alloc>:
  switch (type) {
 800d438:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800d43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d440:	4688      	mov	r8, r1
 800d442:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 800d444:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 800d448:	d040      	beq.n	800d4cc <pbuf_alloc+0x94>
 800d44a:	d80f      	bhi.n	800d46c <pbuf_alloc+0x34>
 800d44c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800d450:	2b01      	cmp	r3, #1
 800d452:	d035      	beq.n	800d4c0 <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d454:	4b48      	ldr	r3, [pc, #288]	; (800d578 <pbuf_alloc+0x140>)
 800d456:	f240 1227 	movw	r2, #295	; 0x127
 800d45a:	4948      	ldr	r1, [pc, #288]	; (800d57c <pbuf_alloc+0x144>)
      return NULL;
 800d45c:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d45e:	4848      	ldr	r0, [pc, #288]	; (800d580 <pbuf_alloc+0x148>)
 800d460:	f007 fc02 	bl	8014c68 <iprintf>
}
 800d464:	4620      	mov	r0, r4
 800d466:	b003      	add	sp, #12
 800d468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800d46c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800d470:	d1f0      	bne.n	800d454 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d472:	f109 0303 	add.w	r3, r9, #3
 800d476:	1cca      	adds	r2, r1, #3
 800d478:	4605      	mov	r5, r0
 800d47a:	f022 0203 	bic.w	r2, r2, #3
 800d47e:	f023 0303 	bic.w	r3, r3, #3
 800d482:	4413      	add	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d484:	b29b      	uxth	r3, r3
 800d486:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d48a:	4283      	cmp	r3, r0
 800d48c:	bf28      	it	cs
 800d48e:	4603      	movcs	r3, r0
 800d490:	429a      	cmp	r2, r3
 800d492:	d84c      	bhi.n	800d52e <pbuf_alloc+0xf6>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d494:	f7ff fa20 	bl	800c8d8 <mem_malloc>
      if (p == NULL) {
 800d498:	4604      	mov	r4, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d0e2      	beq.n	800d464 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d49e:	1943      	adds	r3, r0, r5
  p->next = NULL;
 800d4a0:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 800d4a2:	4a38      	ldr	r2, [pc, #224]	; (800d584 <pbuf_alloc+0x14c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d4a4:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 800d4a6:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 800d4aa:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d4ac:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 800d4b0:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 800d4b4:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 800d4b6:	6043      	str	r3, [r0, #4]
}
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	b003      	add	sp, #12
 800d4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800d4c0:	2000      	movs	r0, #0
}
 800d4c2:	b003      	add	sp, #12
 800d4c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800d4c8:	f7ff be66 	b.w	800d198 <pbuf_alloc_reference>
  switch (type) {
 800d4cc:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d4ce:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 800d4d2:	4d2d      	ldr	r5, [pc, #180]	; (800d588 <pbuf_alloc+0x150>)
  switch (type) {
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	e009      	b.n	800d4ec <pbuf_alloc+0xb4>
          last->next = q;
 800d4d8:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800d4da:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 800d4de:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800d4e2:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800d4e6:	f1b8 0f00 	cmp.w	r8, #0
 800d4ea:	d0bb      	beq.n	800d464 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d4ec:	200c      	movs	r0, #12
 800d4ee:	460f      	mov	r7, r1
 800d4f0:	f7ff fb26 	bl	800cb40 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d4f4:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800d4f8:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 800d4fc:	4601      	mov	r1, r0
 800d4fe:	b1d8      	cbz	r0, 800d538 <pbuf_alloc+0x100>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d500:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d504:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800d508:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d50c:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d50e:	3213      	adds	r2, #19
  p->next = NULL;
 800d510:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d514:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d516:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800d51a:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d51c:	4543      	cmp	r3, r8
  p->payload = payload;
 800d51e:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d520:	bf28      	it	cs
 800d522:	4643      	movcs	r3, r8
  p->len = len;
 800d524:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800d526:	2c00      	cmp	r4, #0
 800d528:	d1d6      	bne.n	800d4d8 <pbuf_alloc+0xa0>
 800d52a:	4604      	mov	r4, r0
 800d52c:	e7d5      	b.n	800d4da <pbuf_alloc+0xa2>
          return NULL;
 800d52e:	2400      	movs	r4, #0
}
 800d530:	4620      	mov	r0, r4
 800d532:	b003      	add	sp, #12
 800d534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 800d538:	4e14      	ldr	r6, [pc, #80]	; (800d58c <pbuf_alloc+0x154>)
 800d53a:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800d53c:	f006 fb30 	bl	8013ba0 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800d540:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800d542:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800d544:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800d546:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d548:	f006 fb36 	bl	8013bb8 <sys_arch_unprotect>
  if (!queued) {
 800d54c:	9901      	ldr	r1, [sp, #4]
 800d54e:	b135      	cbz	r5, 800d55e <pbuf_alloc+0x126>
          if (p) {
 800d550:	2c00      	cmp	r4, #0
 800d552:	d0ec      	beq.n	800d52e <pbuf_alloc+0xf6>
            pbuf_free(p);
 800d554:	4620      	mov	r0, r4
          return NULL;
 800d556:	2400      	movs	r4, #0
            pbuf_free(p);
 800d558:	f7ff fefe 	bl	800d358 <pbuf_free>
 800d55c:	e782      	b.n	800d464 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d55e:	480c      	ldr	r0, [pc, #48]	; (800d590 <pbuf_alloc+0x158>)
 800d560:	f7fe fed4 	bl	800c30c <tcpip_try_callback>
 800d564:	2800      	cmp	r0, #0
 800d566:	d0f3      	beq.n	800d550 <pbuf_alloc+0x118>
 800d568:	f006 fb1a 	bl	8013ba0 <sys_arch_protect>
 800d56c:	9901      	ldr	r1, [sp, #4]
 800d56e:	7031      	strb	r1, [r6, #0]
 800d570:	f006 fb22 	bl	8013bb8 <sys_arch_unprotect>
 800d574:	e7ec      	b.n	800d550 <pbuf_alloc+0x118>
 800d576:	bf00      	nop
 800d578:	08018d2c 	.word	0x08018d2c
 800d57c:	08018e50 	.word	0x08018e50
 800d580:	08017728 	.word	0x08017728
 800d584:	00010080 	.word	0x00010080
 800d588:	00010082 	.word	0x00010082
 800d58c:	24037a8d 	.word	0x24037a8d
 800d590:	0800d021 	.word	0x0800d021

0800d594 <pbuf_realloc>:
{
 800d594:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d596:	4604      	mov	r4, r0
{
 800d598:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d036      	beq.n	800d60c <pbuf_realloc+0x78>
  if (new_len >= p->tot_len) {
 800d59e:	8922      	ldrh	r2, [r4, #8]
 800d5a0:	42aa      	cmp	r2, r5
 800d5a2:	d91b      	bls.n	800d5dc <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 800d5a4:	8963      	ldrh	r3, [r4, #10]
 800d5a6:	429d      	cmp	r5, r3
 800d5a8:	d90d      	bls.n	800d5c6 <pbuf_realloc+0x32>
 800d5aa:	1aa9      	subs	r1, r5, r2
 800d5ac:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d5ae:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800d5b0:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d5b2:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800d5b4:	b29d      	uxth	r5, r3
    q = q->next;
 800d5b6:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d5b8:	2c00      	cmp	r4, #0
 800d5ba:	d02f      	beq.n	800d61c <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 800d5bc:	8963      	ldrh	r3, [r4, #10]
 800d5be:	42ab      	cmp	r3, r5
 800d5c0:	d201      	bcs.n	800d5c6 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d5c2:	8922      	ldrh	r2, [r4, #8]
 800d5c4:	e7f3      	b.n	800d5ae <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d5c6:	7b22      	ldrb	r2, [r4, #12]
 800d5c8:	0712      	lsls	r2, r2, #28
 800d5ca:	d008      	beq.n	800d5de <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 800d5cc:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800d5ce:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800d5d0:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800d5d2:	b108      	cbz	r0, 800d5d8 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 800d5d4:	f7ff fec0 	bl	800d358 <pbuf_free>
  q->next = NULL;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6023      	str	r3, [r4, #0]
}
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d5de:	42ab      	cmp	r3, r5
 800d5e0:	d0f4      	beq.n	800d5cc <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d5e2:	7b63      	ldrb	r3, [r4, #13]
 800d5e4:	079b      	lsls	r3, r3, #30
 800d5e6:	d4f1      	bmi.n	800d5cc <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d5e8:	6863      	ldr	r3, [r4, #4]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	1b1b      	subs	r3, r3, r4
 800d5ee:	1959      	adds	r1, r3, r5
 800d5f0:	f7ff f8b8 	bl	800c764 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d5f4:	4604      	mov	r4, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d1e8      	bne.n	800d5cc <pbuf_realloc+0x38>
 800d5fa:	4b0d      	ldr	r3, [pc, #52]	; (800d630 <pbuf_realloc+0x9c>)
 800d5fc:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d600:	490c      	ldr	r1, [pc, #48]	; (800d634 <pbuf_realloc+0xa0>)
 800d602:	480d      	ldr	r0, [pc, #52]	; (800d638 <pbuf_realloc+0xa4>)
 800d604:	f007 fb30 	bl	8014c68 <iprintf>
  q->len = rem_len;
 800d608:	8164      	strh	r4, [r4, #10]
 800d60a:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d60c:	4b08      	ldr	r3, [pc, #32]	; (800d630 <pbuf_realloc+0x9c>)
 800d60e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d612:	490a      	ldr	r1, [pc, #40]	; (800d63c <pbuf_realloc+0xa8>)
 800d614:	4808      	ldr	r0, [pc, #32]	; (800d638 <pbuf_realloc+0xa4>)
 800d616:	f007 fb27 	bl	8014c68 <iprintf>
 800d61a:	e7c0      	b.n	800d59e <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d61c:	4b04      	ldr	r3, [pc, #16]	; (800d630 <pbuf_realloc+0x9c>)
 800d61e:	f240 12af 	movw	r2, #431	; 0x1af
 800d622:	4907      	ldr	r1, [pc, #28]	; (800d640 <pbuf_realloc+0xac>)
 800d624:	4804      	ldr	r0, [pc, #16]	; (800d638 <pbuf_realloc+0xa4>)
 800d626:	f007 fb1f 	bl	8014c68 <iprintf>
  while (rem_len > q->len) {
 800d62a:	8963      	ldrh	r3, [r4, #10]
 800d62c:	deff      	udf	#255	; 0xff
 800d62e:	bf00      	nop
 800d630:	08018d2c 	.word	0x08018d2c
 800d634:	08018e9c 	.word	0x08018e9c
 800d638:	08017728 	.word	0x08017728
 800d63c:	08018e6c 	.word	0x08018e6c
 800d640:	08018e84 	.word	0x08018e84

0800d644 <pbuf_clen>:
  while (p != NULL) {
 800d644:	b138      	cbz	r0, 800d656 <pbuf_clen+0x12>
  len = 0;
 800d646:	2300      	movs	r3, #0
    ++len;
 800d648:	3301      	adds	r3, #1
    p = p->next;
 800d64a:	6800      	ldr	r0, [r0, #0]
    ++len;
 800d64c:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800d64e:	2800      	cmp	r0, #0
 800d650:	d1fa      	bne.n	800d648 <pbuf_clen+0x4>
}
 800d652:	4618      	mov	r0, r3
 800d654:	4770      	bx	lr
  len = 0;
 800d656:	4603      	mov	r3, r0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	4770      	bx	lr

0800d65c <pbuf_ref>:
  if (p != NULL) {
 800d65c:	b158      	cbz	r0, 800d676 <pbuf_ref+0x1a>
{
 800d65e:	b510      	push	{r4, lr}
 800d660:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d662:	f006 fa9d 	bl	8013ba0 <sys_arch_protect>
 800d666:	7ba3      	ldrb	r3, [r4, #14]
 800d668:	3301      	adds	r3, #1
 800d66a:	73a3      	strb	r3, [r4, #14]
 800d66c:	f006 faa4 	bl	8013bb8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d670:	7ba3      	ldrb	r3, [r4, #14]
 800d672:	b10b      	cbz	r3, 800d678 <pbuf_ref+0x1c>
}
 800d674:	bd10      	pop	{r4, pc}
 800d676:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d678:	4b04      	ldr	r3, [pc, #16]	; (800d68c <pbuf_ref+0x30>)
 800d67a:	f240 3242 	movw	r2, #834	; 0x342
 800d67e:	4904      	ldr	r1, [pc, #16]	; (800d690 <pbuf_ref+0x34>)
 800d680:	4804      	ldr	r0, [pc, #16]	; (800d694 <pbuf_ref+0x38>)
}
 800d682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d686:	f007 baef 	b.w	8014c68 <iprintf>
 800d68a:	bf00      	nop
 800d68c:	08018d2c 	.word	0x08018d2c
 800d690:	08018eb8 	.word	0x08018eb8
 800d694:	08017728 	.word	0x08017728

0800d698 <pbuf_cat>:
{
 800d698:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d69a:	b330      	cbz	r0, 800d6ea <pbuf_cat+0x52>
 800d69c:	460d      	mov	r5, r1
 800d69e:	b321      	cbz	r1, 800d6ea <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 800d6a0:	6803      	ldr	r3, [r0, #0]
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	b13b      	cbz	r3, 800d6b6 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d6a6:	8922      	ldrh	r2, [r4, #8]
 800d6a8:	8928      	ldrh	r0, [r5, #8]
 800d6aa:	4402      	add	r2, r0
 800d6ac:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d6ae:	461c      	mov	r4, r3
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1f7      	bne.n	800d6a6 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d6b6:	8963      	ldrh	r3, [r4, #10]
 800d6b8:	8922      	ldrh	r2, [r4, #8]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d010      	beq.n	800d6e0 <pbuf_cat+0x48>
 800d6be:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <pbuf_cat+0x64>)
 800d6c0:	f240 3262 	movw	r2, #866	; 0x362
 800d6c4:	490e      	ldr	r1, [pc, #56]	; (800d700 <pbuf_cat+0x68>)
 800d6c6:	480f      	ldr	r0, [pc, #60]	; (800d704 <pbuf_cat+0x6c>)
 800d6c8:	f007 face 	bl	8014c68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	b133      	cbz	r3, 800d6de <pbuf_cat+0x46>
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <pbuf_cat+0x64>)
 800d6d2:	f240 3263 	movw	r2, #867	; 0x363
 800d6d6:	490c      	ldr	r1, [pc, #48]	; (800d708 <pbuf_cat+0x70>)
 800d6d8:	480a      	ldr	r0, [pc, #40]	; (800d704 <pbuf_cat+0x6c>)
 800d6da:	f007 fac5 	bl	8014c68 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d6de:	8923      	ldrh	r3, [r4, #8]
 800d6e0:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 800d6e2:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d6e4:	4413      	add	r3, r2
 800d6e6:	8123      	strh	r3, [r4, #8]
}
 800d6e8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d6ea:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <pbuf_cat+0x64>)
 800d6ec:	f240 3259 	movw	r2, #857	; 0x359
 800d6f0:	4906      	ldr	r1, [pc, #24]	; (800d70c <pbuf_cat+0x74>)
 800d6f2:	4804      	ldr	r0, [pc, #16]	; (800d704 <pbuf_cat+0x6c>)
}
 800d6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d6f8:	f007 bab6 	b.w	8014c68 <iprintf>
 800d6fc:	08018d2c 	.word	0x08018d2c
 800d700:	08018f04 	.word	0x08018f04
 800d704:	08017728 	.word	0x08017728
 800d708:	08018f34 	.word	0x08018f34
 800d70c:	08018ecc 	.word	0x08018ecc

0800d710 <pbuf_copy>:
{
 800d710:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d712:	b140      	cbz	r0, 800d726 <pbuf_copy+0x16>
 800d714:	b139      	cbz	r1, 800d726 <pbuf_copy+0x16>
 800d716:	8902      	ldrh	r2, [r0, #8]
 800d718:	890b      	ldrh	r3, [r1, #8]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d303      	bcc.n	800d726 <pbuf_copy+0x16>
}
 800d71e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d722:	f7ff bc97 	b.w	800d054 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d726:	4b05      	ldr	r3, [pc, #20]	; (800d73c <pbuf_copy+0x2c>)
 800d728:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d72c:	4904      	ldr	r1, [pc, #16]	; (800d740 <pbuf_copy+0x30>)
 800d72e:	4805      	ldr	r0, [pc, #20]	; (800d744 <pbuf_copy+0x34>)
 800d730:	f007 fa9a 	bl	8014c68 <iprintf>
}
 800d734:	f06f 000f 	mvn.w	r0, #15
 800d738:	bd08      	pop	{r3, pc}
 800d73a:	bf00      	nop
 800d73c:	08018d2c 	.word	0x08018d2c
 800d740:	08018f44 	.word	0x08018f44
 800d744:	08017728 	.word	0x08017728

0800d748 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d74c:	4605      	mov	r5, r0
 800d74e:	b370      	cbz	r0, 800d7ae <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d750:	460f      	mov	r7, r1
 800d752:	2900      	cmp	r1, #0
 800d754:	d036      	beq.n	800d7c4 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d756:	4690      	mov	r8, r2
 800d758:	b392      	cbz	r2, 800d7c0 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 800d75a:	2600      	movs	r6, #0
 800d75c:	e005      	b.n	800d76a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d75e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d760:	682d      	ldr	r5, [r5, #0]
 800d762:	f1b8 0f00 	cmp.w	r8, #0
 800d766:	d01f      	beq.n	800d7a8 <pbuf_copy_partial+0x60>
 800d768:	b1f5      	cbz	r5, 800d7a8 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d76a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800d76c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800d770:	b11b      	cbz	r3, 800d77a <pbuf_copy_partial+0x32>
 800d772:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 800d774:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 800d778:	d2f1      	bcs.n	800d75e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 800d77a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d77e:	6869      	ldr	r1, [r5, #4]
 800d780:	fa1f f48c 	uxth.w	r4, ip
 800d784:	4419      	add	r1, r3
 800d786:	4544      	cmp	r4, r8
 800d788:	bf28      	it	cs
 800d78a:	4644      	movcs	r4, r8
 800d78c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d78e:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d790:	f007 fc2b 	bl	8014fea <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800d794:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 800d798:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d79a:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800d79c:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d7a0:	682d      	ldr	r5, [r5, #0]
 800d7a2:	f1b8 0f00 	cmp.w	r8, #0
 800d7a6:	d1df      	bne.n	800d768 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d7ae:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <pbuf_copy_partial+0x90>)
 800d7b0:	f240 420a 	movw	r2, #1034	; 0x40a
 800d7b4:	4909      	ldr	r1, [pc, #36]	; (800d7dc <pbuf_copy_partial+0x94>)
 800d7b6:	462e      	mov	r6, r5
 800d7b8:	4809      	ldr	r0, [pc, #36]	; (800d7e0 <pbuf_copy_partial+0x98>)
 800d7ba:	f007 fa55 	bl	8014c68 <iprintf>
 800d7be:	e7f3      	b.n	800d7a8 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 800d7c0:	4616      	mov	r6, r2
 800d7c2:	e7f1      	b.n	800d7a8 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d7c4:	4b04      	ldr	r3, [pc, #16]	; (800d7d8 <pbuf_copy_partial+0x90>)
 800d7c6:	f240 420b 	movw	r2, #1035	; 0x40b
 800d7ca:	4906      	ldr	r1, [pc, #24]	; (800d7e4 <pbuf_copy_partial+0x9c>)
 800d7cc:	463e      	mov	r6, r7
 800d7ce:	4804      	ldr	r0, [pc, #16]	; (800d7e0 <pbuf_copy_partial+0x98>)
 800d7d0:	f007 fa4a 	bl	8014c68 <iprintf>
 800d7d4:	e7e8      	b.n	800d7a8 <pbuf_copy_partial+0x60>
 800d7d6:	bf00      	nop
 800d7d8:	08018d2c 	.word	0x08018d2c
 800d7dc:	08018f74 	.word	0x08018f74
 800d7e0:	08017728 	.word	0x08017728
 800d7e4:	08018f94 	.word	0x08018f94

0800d7e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d7e8:	b538      	push	{r3, r4, r5, lr}
 800d7ea:	4615      	mov	r5, r2
 800d7ec:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d7ee:	8929      	ldrh	r1, [r5, #8]
 800d7f0:	f7ff fe22 	bl	800d438 <pbuf_alloc>
  if (q == NULL) {
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	b138      	cbz	r0, 800d808 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d7f8:	8902      	ldrh	r2, [r0, #8]
 800d7fa:	892b      	ldrh	r3, [r5, #8]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d305      	bcc.n	800d80c <pbuf_clone+0x24>
 800d800:	4629      	mov	r1, r5
 800d802:	f7ff fc27 	bl	800d054 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d806:	b940      	cbnz	r0, 800d81a <pbuf_clone+0x32>
  return q;
}
 800d808:	4620      	mov	r0, r4
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d80c:	4b07      	ldr	r3, [pc, #28]	; (800d82c <pbuf_clone+0x44>)
 800d80e:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d812:	4907      	ldr	r1, [pc, #28]	; (800d830 <pbuf_clone+0x48>)
 800d814:	4807      	ldr	r0, [pc, #28]	; (800d834 <pbuf_clone+0x4c>)
 800d816:	f007 fa27 	bl	8014c68 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d81a:	4b04      	ldr	r3, [pc, #16]	; (800d82c <pbuf_clone+0x44>)
 800d81c:	f240 5224 	movw	r2, #1316	; 0x524
 800d820:	4905      	ldr	r1, [pc, #20]	; (800d838 <pbuf_clone+0x50>)
 800d822:	4804      	ldr	r0, [pc, #16]	; (800d834 <pbuf_clone+0x4c>)
 800d824:	f007 fa20 	bl	8014c68 <iprintf>
}
 800d828:	4620      	mov	r0, r4
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	08018d2c 	.word	0x08018d2c
 800d830:	08018f44 	.word	0x08018f44
 800d834:	08017728 	.word	0x08017728
 800d838:	08018fb8 	.word	0x08018fb8

0800d83c <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800d83c:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800d83e:	8905      	ldrh	r5, [r0, #8]
 800d840:	18cc      	adds	r4, r1, r3
 800d842:	42a5      	cmp	r5, r4
 800d844:	db2e      	blt.n	800d8a4 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 800d846:	8944      	ldrh	r4, [r0, #10]
 800d848:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 800d84a:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 800d84e:	d803      	bhi.n	800d858 <pbuf_memcmp+0x1c>
    q = q->next;
 800d850:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 800d852:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 800d854:	2800      	cmp	r0, #0
 800d856:	d1f6      	bne.n	800d846 <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800d858:	b1f3      	cbz	r3, 800d898 <pbuf_memcmp+0x5c>
 800d85a:	2500      	movs	r5, #0
 800d85c:	1e56      	subs	r6, r2, #1
 800d85e:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800d860:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 800d864:	4604      	mov	r4, r0
 800d866:	fa1f fc8c 	uxth.w	ip, ip
 800d86a:	b920      	cbnz	r0, 800d876 <pbuf_memcmp+0x3a>
 800d86c:	e00b      	b.n	800d886 <pbuf_memcmp+0x4a>
    q = q->next;
 800d86e:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800d870:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800d874:	b13c      	cbz	r4, 800d886 <pbuf_memcmp+0x4a>
 800d876:	8962      	ldrh	r2, [r4, #10]
 800d878:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 800d87a:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800d87e:	d2f6      	bcs.n	800d86e <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 800d880:	6862      	ldr	r2, [r4, #4]
 800d882:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 800d886:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800d88a:	42a2      	cmp	r2, r4
 800d88c:	d106      	bne.n	800d89c <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 800d88e:	3501      	adds	r5, #1
 800d890:	fa1f fe85 	uxth.w	lr, r5
 800d894:	4573      	cmp	r3, lr
 800d896:	d8e3      	bhi.n	800d860 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 800d898:	2000      	movs	r0, #0
}
 800d89a:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800d89c:	f10e 0301 	add.w	r3, lr, #1
 800d8a0:	b298      	uxth	r0, r3
}
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 800d8a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}
 800d8aa:	bf00      	nop

0800d8ac <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d8ac:	b4f0      	push	{r4, r5, r6, r7}
 800d8ae:	4f14      	ldr	r7, [pc, #80]	; (800d900 <tcp_new_port+0x54>)
 800d8b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d8b4:	4e13      	ldr	r6, [pc, #76]	; (800d904 <tcp_new_port+0x58>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d8b6:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800d8ba:	8839      	ldrh	r1, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d8bc:	4d12      	ldr	r5, [pc, #72]	; (800d908 <tcp_new_port+0x5c>)
  tcp_port++;
 800d8be:	3101      	adds	r1, #1
 800d8c0:	4c12      	ldr	r4, [pc, #72]	; (800d90c <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d8c2:	462b      	mov	r3, r5
  tcp_port++;
 800d8c4:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d8c6:	4561      	cmp	r1, ip
 800d8c8:	bf08      	it	eq
 800d8ca:	f44f 4140 	moveq.w	r1, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	b913      	cbnz	r3, 800d8d8 <tcp_new_port+0x2c>
 800d8d2:	e00b      	b.n	800d8ec <tcp_new_port+0x40>
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	b14b      	cbz	r3, 800d8ec <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800d8d8:	8ada      	ldrh	r2, [r3, #22]
 800d8da:	428a      	cmp	r2, r1
 800d8dc:	d1fa      	bne.n	800d8d4 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d8de:	3801      	subs	r0, #1
 800d8e0:	b280      	uxth	r0, r0
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d1eb      	bne.n	800d8be <tcp_new_port+0x12>
 800d8e6:	8039      	strh	r1, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800d8e8:	bcf0      	pop	{r4, r5, r6, r7}
 800d8ea:	4770      	bx	lr
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d8ec:	42a6      	cmp	r6, r4
 800d8ee:	d002      	beq.n	800d8f6 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d8f0:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800d8f4:	e7eb      	b.n	800d8ce <tcp_new_port+0x22>
 800d8f6:	4608      	mov	r0, r1
 800d8f8:	8039      	strh	r1, [r7, #0]
}
 800d8fa:	bcf0      	pop	{r4, r5, r6, r7}
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	24000084 	.word	0x24000084
 800d904:	080196bc 	.word	0x080196bc
 800d908:	24037a9c 	.word	0x24037a9c
 800d90c:	080196b0 	.word	0x080196b0

0800d910 <tcp_close_shutdown_fin>:
{
 800d910:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d912:	4604      	mov	r4, r0
 800d914:	b308      	cbz	r0, 800d95a <tcp_close_shutdown_fin+0x4a>
  switch (pcb->state) {
 800d916:	7d23      	ldrb	r3, [r4, #20]
 800d918:	2b04      	cmp	r3, #4
 800d91a:	d005      	beq.n	800d928 <tcp_close_shutdown_fin+0x18>
 800d91c:	2b07      	cmp	r3, #7
 800d91e:	d00e      	beq.n	800d93e <tcp_close_shutdown_fin+0x2e>
 800d920:	2b03      	cmp	r3, #3
 800d922:	d001      	beq.n	800d928 <tcp_close_shutdown_fin+0x18>
 800d924:	2000      	movs	r0, #0
}
 800d926:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800d928:	4620      	mov	r0, r4
 800d92a:	f003 fd49 	bl	80113c0 <tcp_send_fin>
      if (err == ERR_OK) {
 800d92e:	b950      	cbnz	r0, 800d946 <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 800d930:	2305      	movs	r3, #5
    tcp_output(pcb);
 800d932:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800d934:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800d936:	f003 feb3 	bl	80116a0 <tcp_output>
 800d93a:	2000      	movs	r0, #0
}
 800d93c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800d93e:	4620      	mov	r0, r4
 800d940:	f003 fd3e 	bl	80113c0 <tcp_send_fin>
      if (err == ERR_OK) {
 800d944:	b138      	cbz	r0, 800d956 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d1ed      	bne.n	800d926 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d94a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 800d94c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d94e:	f043 0308 	orr.w	r3, r3, #8
 800d952:	8363      	strh	r3, [r4, #26]
}
 800d954:	bd10      	pop	{r4, pc}
 800d956:	2309      	movs	r3, #9
 800d958:	e7eb      	b.n	800d932 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d95a:	4b04      	ldr	r3, [pc, #16]	; (800d96c <tcp_close_shutdown_fin+0x5c>)
 800d95c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d960:	4903      	ldr	r1, [pc, #12]	; (800d970 <tcp_close_shutdown_fin+0x60>)
 800d962:	4804      	ldr	r0, [pc, #16]	; (800d974 <tcp_close_shutdown_fin+0x64>)
 800d964:	f007 f980 	bl	8014c68 <iprintf>
 800d968:	e7d5      	b.n	800d916 <tcp_close_shutdown_fin+0x6>
 800d96a:	bf00      	nop
 800d96c:	08018fcc 	.word	0x08018fcc
 800d970:	08018ffc 	.word	0x08018ffc
 800d974:	08017728 	.word	0x08017728

0800d978 <tcp_init>:
{
 800d978:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d97a:	f006 f9df 	bl	8013d3c <rand>
 800d97e:	4b02      	ldr	r3, [pc, #8]	; (800d988 <tcp_init+0x10>)
 800d980:	4a02      	ldr	r2, [pc, #8]	; (800d98c <tcp_init+0x14>)
 800d982:	4303      	orrs	r3, r0
 800d984:	8013      	strh	r3, [r2, #0]
}
 800d986:	bd08      	pop	{r3, pc}
 800d988:	ffffc000 	.word	0xffffc000
 800d98c:	24000084 	.word	0x24000084

0800d990 <tcp_free>:
{
 800d990:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d992:	7d03      	ldrb	r3, [r0, #20]
{
 800d994:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d996:	2b01      	cmp	r3, #1
 800d998:	d005      	beq.n	800d9a6 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800d99a:	4621      	mov	r1, r4
 800d99c:	2001      	movs	r0, #1
}
 800d99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800d9a2:	f7ff b913 	b.w	800cbcc <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9a6:	4906      	ldr	r1, [pc, #24]	; (800d9c0 <tcp_free+0x30>)
 800d9a8:	22d4      	movs	r2, #212	; 0xd4
 800d9aa:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <tcp_free+0x34>)
 800d9ac:	4806      	ldr	r0, [pc, #24]	; (800d9c8 <tcp_free+0x38>)
 800d9ae:	f007 f95b 	bl	8014c68 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	2001      	movs	r0, #1
}
 800d9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800d9ba:	f7ff b907 	b.w	800cbcc <memp_free>
 800d9be:	bf00      	nop
 800d9c0:	08019008 	.word	0x08019008
 800d9c4:	08018fcc 	.word	0x08018fcc
 800d9c8:	08017728 	.word	0x08017728

0800d9cc <tcp_bind>:
{
 800d9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	460f      	mov	r7, r1
 800d9d2:	4680      	mov	r8, r0
 800d9d4:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 800d9d6:	f7fa fad7 	bl	8007f88 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800d9da:	b1f7      	cbz	r7, 800da1a <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9dc:	f1b8 0f00 	cmp.w	r8, #0
 800d9e0:	d044      	beq.n	800da6c <tcp_bind+0xa0>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d9e2:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d136      	bne.n	800da58 <tcp_bind+0x8c>
  if (port == 0) {
 800d9ea:	b1ec      	cbz	r4, 800da28 <tcp_bind+0x5c>
 800d9ec:	4e24      	ldr	r6, [pc, #144]	; (800da80 <tcp_bind+0xb4>)
 800d9ee:	4b25      	ldr	r3, [pc, #148]	; (800da84 <tcp_bind+0xb8>)
 800d9f0:	f106 010c 	add.w	r1, r6, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	b913      	cbnz	r3, 800d9fe <tcp_bind+0x32>
 800d9f8:	e011      	b.n	800da1e <tcp_bind+0x52>
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	b17b      	cbz	r3, 800da1e <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 800d9fe:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800da02:	45a4      	cmp	ip, r4
 800da04:	d1f9      	bne.n	800d9fa <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	b11a      	cbz	r2, 800da12 <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 800da0a:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da0c:	b10d      	cbz	r5, 800da12 <tcp_bind+0x46>
 800da0e:	42aa      	cmp	r2, r5
 800da10:	d1f3      	bne.n	800d9fa <tcp_bind+0x2e>
              return ERR_USE;
 800da12:	f06f 0007 	mvn.w	r0, #7
}
 800da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800da1a:	4f1b      	ldr	r7, [pc, #108]	; (800da88 <tcp_bind+0xbc>)
 800da1c:	e7de      	b.n	800d9dc <tcp_bind+0x10>
    for (i = 0; i < max_pcb_list; i++) {
 800da1e:	428e      	cmp	r6, r1
 800da20:	d006      	beq.n	800da30 <tcp_bind+0x64>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da22:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800da26:	e7e5      	b.n	800d9f4 <tcp_bind+0x28>
    port = tcp_new_port();
 800da28:	f7ff ff40 	bl	800d8ac <tcp_new_port>
    if (port == 0) {
 800da2c:	4604      	mov	r4, r0
 800da2e:	b180      	cbz	r0, 800da52 <tcp_bind+0x86>
  if (!ip_addr_isany(ipaddr)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	b10b      	cbz	r3, 800da38 <tcp_bind+0x6c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800da34:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800da38:	4b14      	ldr	r3, [pc, #80]	; (800da8c <tcp_bind+0xc0>)
  pcb->local_port = port;
 800da3a:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	f8c3 8000 	str.w	r8, [r3]
 800da44:	f8c8 200c 	str.w	r2, [r8, #12]
 800da48:	f004 f94e 	bl	8011ce8 <tcp_timer_needed>
  return ERR_OK;
 800da4c:	2000      	movs	r0, #0
}
 800da4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERR_BUF;
 800da52:	f06f 0001 	mvn.w	r0, #1
 800da56:	e7de      	b.n	800da16 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800da58:	4b0d      	ldr	r3, [pc, #52]	; (800da90 <tcp_bind+0xc4>)
 800da5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800da5e:	490d      	ldr	r1, [pc, #52]	; (800da94 <tcp_bind+0xc8>)
 800da60:	480d      	ldr	r0, [pc, #52]	; (800da98 <tcp_bind+0xcc>)
 800da62:	f007 f901 	bl	8014c68 <iprintf>
 800da66:	f06f 0005 	mvn.w	r0, #5
 800da6a:	e7d4      	b.n	800da16 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800da6c:	4b08      	ldr	r3, [pc, #32]	; (800da90 <tcp_bind+0xc4>)
 800da6e:	f240 22a9 	movw	r2, #681	; 0x2a9
 800da72:	490a      	ldr	r1, [pc, #40]	; (800da9c <tcp_bind+0xd0>)
 800da74:	4808      	ldr	r0, [pc, #32]	; (800da98 <tcp_bind+0xcc>)
 800da76:	f007 f8f7 	bl	8014c68 <iprintf>
 800da7a:	f06f 000f 	mvn.w	r0, #15
 800da7e:	e7ca      	b.n	800da16 <tcp_bind+0x4a>
 800da80:	080196b0 	.word	0x080196b0
 800da84:	24037a9c 	.word	0x24037a9c
 800da88:	0801a600 	.word	0x0801a600
 800da8c:	24037a98 	.word	0x24037a98
 800da90:	08018fcc 	.word	0x08018fcc
 800da94:	08019034 	.word	0x08019034
 800da98:	08017728 	.word	0x08017728
 800da9c:	0801901c 	.word	0x0801901c

0800daa0 <tcp_listen_with_backlog_and_err>:
{
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa2:	4604      	mov	r4, r0
 800daa4:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 800daa6:	f7fa fa6f 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800daaa:	2c00      	cmp	r4, #0
 800daac:	d05d      	beq.n	800db6a <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800daae:	7d25      	ldrb	r5, [r4, #20]
 800dab0:	2d00      	cmp	r5, #0
 800dab2:	d147      	bne.n	800db44 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dab4:	2002      	movs	r0, #2
 800dab6:	f7ff f843 	bl	800cb40 <memp_malloc>
  if (lpcb == NULL) {
 800daba:	4606      	mov	r6, r0
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d051      	beq.n	800db64 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 800dac0:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800dac2:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800dac4:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800dac6:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800dac8:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800daca:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800dacc:	7d62      	ldrb	r2, [r4, #21]
 800dace:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800dad0:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dad2:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800dad4:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800dad6:	7ae2      	ldrb	r2, [r4, #11]
 800dad8:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800dada:	7aa2      	ldrb	r2, [r4, #10]
 800dadc:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dade:	6822      	ldr	r2, [r4, #0]
 800dae0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800dae2:	b99b      	cbnz	r3, 800db0c <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dae4:	7d23      	ldrb	r3, [r4, #20]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d020      	beq.n	800db2c <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800daea:	4621      	mov	r1, r4
 800daec:	2001      	movs	r0, #1
 800daee:	f7ff f86d 	bl	800cbcc <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800daf2:	4b23      	ldr	r3, [pc, #140]	; (800db80 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 800daf4:	4923      	ldr	r1, [pc, #140]	; (800db84 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800daf6:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800daf8:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dafa:	60f2      	str	r2, [r6, #12]
 800dafc:	601e      	str	r6, [r3, #0]
 800dafe:	f004 f8f3 	bl	8011ce8 <tcp_timer_needed>
  res = ERR_OK;
 800db02:	2300      	movs	r3, #0
  if (err != NULL) {
 800db04:	b107      	cbz	r7, 800db08 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 800db06:	703b      	strb	r3, [r7, #0]
}
 800db08:	4630      	mov	r0, r6
 800db0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800db0c:	4a1e      	ldr	r2, [pc, #120]	; (800db88 <tcp_listen_with_backlog_and_err+0xe8>)
 800db0e:	6813      	ldr	r3, [r2, #0]
 800db10:	42a3      	cmp	r3, r4
 800db12:	d012      	beq.n	800db3a <tcp_listen_with_backlog_and_err+0x9a>
 800db14:	b12b      	cbz	r3, 800db22 <tcp_listen_with_backlog_and_err+0x82>
 800db16:	68d9      	ldr	r1, [r3, #12]
 800db18:	42a1      	cmp	r1, r4
 800db1a:	d01e      	beq.n	800db5a <tcp_listen_with_backlog_and_err+0xba>
 800db1c:	460b      	mov	r3, r1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1f9      	bne.n	800db16 <tcp_listen_with_backlog_and_err+0x76>
 800db22:	2300      	movs	r3, #0
 800db24:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800db26:	7d23      	ldrb	r3, [r4, #20]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d1de      	bne.n	800daea <tcp_listen_with_backlog_and_err+0x4a>
 800db2c:	4b17      	ldr	r3, [pc, #92]	; (800db8c <tcp_listen_with_backlog_and_err+0xec>)
 800db2e:	22d4      	movs	r2, #212	; 0xd4
 800db30:	4917      	ldr	r1, [pc, #92]	; (800db90 <tcp_listen_with_backlog_and_err+0xf0>)
 800db32:	4818      	ldr	r0, [pc, #96]	; (800db94 <tcp_listen_with_backlog_and_err+0xf4>)
 800db34:	f007 f898 	bl	8014c68 <iprintf>
 800db38:	e7d7      	b.n	800daea <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800db3a:	68e3      	ldr	r3, [r4, #12]
 800db3c:	6013      	str	r3, [r2, #0]
 800db3e:	2300      	movs	r3, #0
 800db40:	60e3      	str	r3, [r4, #12]
 800db42:	e7f0      	b.n	800db26 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800db44:	4b11      	ldr	r3, [pc, #68]	; (800db8c <tcp_listen_with_backlog_and_err+0xec>)
 800db46:	f240 325a 	movw	r2, #858	; 0x35a
 800db4a:	4913      	ldr	r1, [pc, #76]	; (800db98 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800db4c:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800db4e:	4811      	ldr	r0, [pc, #68]	; (800db94 <tcp_listen_with_backlog_and_err+0xf4>)
 800db50:	f007 f88a 	bl	8014c68 <iprintf>
 800db54:	f06f 030e 	mvn.w	r3, #14
 800db58:	e7d4      	b.n	800db04 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800db5a:	68e2      	ldr	r2, [r4, #12]
 800db5c:	60da      	str	r2, [r3, #12]
 800db5e:	2300      	movs	r3, #0
 800db60:	60e3      	str	r3, [r4, #12]
 800db62:	e7e0      	b.n	800db26 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 800db64:	f04f 33ff 	mov.w	r3, #4294967295
 800db68:	e7cc      	b.n	800db04 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800db6a:	4b08      	ldr	r3, [pc, #32]	; (800db8c <tcp_listen_with_backlog_and_err+0xec>)
 800db6c:	f240 3259 	movw	r2, #857	; 0x359
 800db70:	490a      	ldr	r1, [pc, #40]	; (800db9c <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800db72:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800db74:	4807      	ldr	r0, [pc, #28]	; (800db94 <tcp_listen_with_backlog_and_err+0xf4>)
 800db76:	f007 f877 	bl	8014c68 <iprintf>
 800db7a:	f06f 030f 	mvn.w	r3, #15
 800db7e:	e7c1      	b.n	800db04 <tcp_listen_with_backlog_and_err+0x64>
 800db80:	24037a9c 	.word	0x24037a9c
 800db84:	0800e84d 	.word	0x0800e84d
 800db88:	24037a98 	.word	0x24037a98
 800db8c:	08018fcc 	.word	0x08018fcc
 800db90:	08019008 	.word	0x08019008
 800db94:	08017728 	.word	0x08017728
 800db98:	0801908c 	.word	0x0801908c
 800db9c:	0801905c 	.word	0x0801905c

0800dba0 <tcp_listen_with_backlog>:
{
 800dba0:	b500      	push	{lr}
 800dba2:	b083      	sub	sp, #12
 800dba4:	e9cd 1000 	strd	r1, r0, [sp]
  LWIP_ASSERT_CORE_LOCKED();
 800dba8:	f7fa f9ee 	bl	8007f88 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dbac:	2200      	movs	r2, #0
 800dbae:	e9dd 1000 	ldrd	r1, r0, [sp]
}
 800dbb2:	b003      	add	sp, #12
 800dbb4:	f85d eb04 	ldr.w	lr, [sp], #4
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dbb8:	f7ff bf72 	b.w	800daa0 <tcp_listen_with_backlog_and_err>

0800dbbc <tcp_update_rcv_ann_wnd>:
{
 800dbbc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	b1c8      	cbz	r0, 800dbf6 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dbc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dbc4:	f640 3c68 	movw	ip, #2920	; 0xb68
 800dbc8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dbca:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dbce:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dbd0:	1a58      	subs	r0, r3, r1
 800dbd2:	45e6      	cmp	lr, ip
 800dbd4:	4410      	add	r0, r2
 800dbd6:	bf94      	ite	ls
 800dbd8:	eba0 050e 	subls.w	r5, r0, lr
 800dbdc:	eba0 050c 	subhi.w	r5, r0, ip
 800dbe0:	2d00      	cmp	r5, #0
 800dbe2:	db01      	blt.n	800dbe8 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dbe4:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800dbe6:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dbe8:	1a53      	subs	r3, r2, r1
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dd0b      	ble.n	800dc06 <tcp_update_rcv_ann_wnd+0x4a>
 800dbee:	2300      	movs	r3, #0
    return 0;
 800dbf0:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dbf2:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800dbf4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dbf6:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <tcp_update_rcv_ann_wnd+0x6c>)
 800dbf8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dbfc:	490b      	ldr	r1, [pc, #44]	; (800dc2c <tcp_update_rcv_ann_wnd+0x70>)
 800dbfe:	480c      	ldr	r0, [pc, #48]	; (800dc30 <tcp_update_rcv_ann_wnd+0x74>)
 800dc00:	f007 f832 	bl	8014c68 <iprintf>
 800dc04:	e7dd      	b.n	800dbc2 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dc06:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dc08:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800dc0c:	d203      	bcs.n	800dc16 <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dc0e:	b2ab      	uxth	r3, r5
    return 0;
 800dc10:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dc12:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800dc14:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dc16:	4b04      	ldr	r3, [pc, #16]	; (800dc28 <tcp_update_rcv_ann_wnd+0x6c>)
 800dc18:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dc1c:	4905      	ldr	r1, [pc, #20]	; (800dc34 <tcp_update_rcv_ann_wnd+0x78>)
 800dc1e:	4804      	ldr	r0, [pc, #16]	; (800dc30 <tcp_update_rcv_ann_wnd+0x74>)
 800dc20:	f007 f822 	bl	8014c68 <iprintf>
 800dc24:	e7f3      	b.n	800dc0e <tcp_update_rcv_ann_wnd+0x52>
 800dc26:	bf00      	nop
 800dc28:	08018fcc 	.word	0x08018fcc
 800dc2c:	080190c4 	.word	0x080190c4
 800dc30:	08017728 	.word	0x08017728
 800dc34:	080190e8 	.word	0x080190e8

0800dc38 <tcp_recved>:
{
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800dc3e:	f7fa f9a3 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dc42:	b33d      	cbz	r5, 800dc94 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dc44:	7d2b      	ldrb	r3, [r5, #20]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d01c      	beq.n	800dc84 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dc4a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800dc4c:	1919      	adds	r1, r3, r4
 800dc4e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dc50:	428b      	cmp	r3, r1
 800dc52:	d803      	bhi.n	800dc5c <tcp_recved+0x24>
 800dc54:	f241 63d0 	movw	r3, #5840	; 0x16d0
 800dc58:	4299      	cmp	r1, r3
 800dc5a:	d901      	bls.n	800dc60 <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dc5c:	f241 61d0 	movw	r1, #5840	; 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dc60:	4628      	mov	r0, r5
 800dc62:	8529      	strh	r1, [r5, #40]	; 0x28
 800dc64:	f7ff ffaa 	bl	800dbbc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dc68:	f240 53b3 	movw	r3, #1459	; 0x5b3
 800dc6c:	4298      	cmp	r0, r3
 800dc6e:	d800      	bhi.n	800dc72 <tcp_recved+0x3a>
}
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800dc72:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800dc74:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800dc76:	f043 0302 	orr.w	r3, r3, #2
 800dc7a:	836b      	strh	r3, [r5, #26]
}
 800dc7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800dc80:	f003 bd0e 	b.w	80116a0 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dc84:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <tcp_recved+0x70>)
 800dc86:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dc8a:	4908      	ldr	r1, [pc, #32]	; (800dcac <tcp_recved+0x74>)
 800dc8c:	4808      	ldr	r0, [pc, #32]	; (800dcb0 <tcp_recved+0x78>)
 800dc8e:	f006 ffeb 	bl	8014c68 <iprintf>
 800dc92:	e7da      	b.n	800dc4a <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dc94:	4b04      	ldr	r3, [pc, #16]	; (800dca8 <tcp_recved+0x70>)
 800dc96:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dc9a:	4906      	ldr	r1, [pc, #24]	; (800dcb4 <tcp_recved+0x7c>)
 800dc9c:	4804      	ldr	r0, [pc, #16]	; (800dcb0 <tcp_recved+0x78>)
}
 800dc9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dca2:	f006 bfe1 	b.w	8014c68 <iprintf>
 800dca6:	bf00      	nop
 800dca8:	08018fcc 	.word	0x08018fcc
 800dcac:	0801911c 	.word	0x0801911c
 800dcb0:	08017728 	.word	0x08017728
 800dcb4:	08019104 	.word	0x08019104

0800dcb8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	4604      	mov	r4, r0
 800dcbc:	460d      	mov	r5, r1
 800dcbe:	4617      	mov	r7, r2
 800dcc0:	461e      	mov	r6, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800dcc2:	f7fa f961 	bl	8007f88 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcc6:	2c00      	cmp	r4, #0
 800dcc8:	f000 8089 	beq.w	800ddde <tcp_connect+0x126>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dccc:	2d00      	cmp	r5, #0
 800dcce:	d07c      	beq.n	800ddca <tcp_connect+0x112>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800dcd0:	7d23      	ldrb	r3, [r4, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d169      	bne.n	800ddaa <tcp_connect+0xf2>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dcd6:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dcd8:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 800dcda:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dcdc:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d048      	beq.n	800dd74 <tcp_connect+0xbc>
    netif = netif_get_by_index(pcb->netif_idx);
 800dce2:	f7ff f987 	bl	800cff4 <netif_get_by_index>
 800dce6:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	d06b      	beq.n	800ddc4 <tcp_connect+0x10c>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	b90b      	cbnz	r3, 800dcf4 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dcf0:	686b      	ldr	r3, [r5, #4]
 800dcf2:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800dcf4:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 800dcf6:	b927      	cbnz	r7, 800dd02 <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 800dcf8:	f7ff fdd8 	bl	800d8ac <tcp_new_port>
 800dcfc:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d05d      	beq.n	800ddbe <tcp_connect+0x106>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dd02:	4b3c      	ldr	r3, [pc, #240]	; (800ddf4 <tcp_connect+0x13c>)
 800dd04:	4a3c      	ldr	r2, [pc, #240]	; (800ddf8 <tcp_connect+0x140>)
 800dd06:	6811      	ldr	r1, [r2, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 800dd0c:	f241 61d0 	movw	r1, #5840	; 0x16d0
  iss += tcp_ticks;       /* XXX */
 800dd10:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 800dd12:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 800dd14:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd16:	4b39      	ldr	r3, [pc, #228]	; (800ddfc <tcp_connect+0x144>)
  pcb->lastack = iss - 1;
 800dd18:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dd1a:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 800dd1c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  pcb->snd_wnd = TCP_WND;
 800dd1e:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 800dd22:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 800dd26:	2200      	movs	r2, #0
 800dd28:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dd2a:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d036      	beq.n	800dd9e <tcp_connect+0xe6>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dd30:	2b28      	cmp	r3, #40	; 0x28
 800dd32:	d906      	bls.n	800dd42 <tcp_connect+0x8a>
 800dd34:	3b28      	subs	r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 800dd3c:	bf28      	it	cs
 800dd3e:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 800dd42:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800dd44:	2102      	movs	r1, #2
 800dd46:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800dd48:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 800dd4a:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 800dd4e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800dd52:	f003 fa89 	bl	8011268 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800dd56:	4605      	mov	r5, r0
 800dd58:	b9f8      	cbnz	r0, 800dd9a <tcp_connect+0xe2>
    pcb->state = SYN_SENT;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800dd5e:	b187      	cbz	r7, 800dd82 <tcp_connect+0xca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd60:	4a27      	ldr	r2, [pc, #156]	; (800de00 <tcp_connect+0x148>)
 800dd62:	6813      	ldr	r3, [r2, #0]
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	d01d      	beq.n	800dda4 <tcp_connect+0xec>
 800dd68:	b15b      	cbz	r3, 800dd82 <tcp_connect+0xca>
 800dd6a:	68da      	ldr	r2, [r3, #12]
 800dd6c:	42a2      	cmp	r2, r4
 800dd6e:	d006      	beq.n	800dd7e <tcp_connect+0xc6>
 800dd70:	4613      	mov	r3, r2
 800dd72:	e7f9      	b.n	800dd68 <tcp_connect+0xb0>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dd74:	1d20      	adds	r0, r4, #4
 800dd76:	f004 ff8f 	bl	8012c98 <ip4_route>
 800dd7a:	4605      	mov	r5, r0
 800dd7c:	e7b4      	b.n	800dce8 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd7e:	68e2      	ldr	r2, [r4, #12]
 800dd80:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800dd82:	4b20      	ldr	r3, [pc, #128]	; (800de04 <tcp_connect+0x14c>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	601c      	str	r4, [r3, #0]
 800dd88:	60e2      	str	r2, [r4, #12]
 800dd8a:	f003 ffad 	bl	8011ce8 <tcp_timer_needed>
 800dd8e:	4b1e      	ldr	r3, [pc, #120]	; (800de08 <tcp_connect+0x150>)
 800dd90:	2201      	movs	r2, #1
    tcp_output(pcb);
 800dd92:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800dd94:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800dd96:	f003 fc83 	bl	80116a0 <tcp_output>
}
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd9e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dda2:	e7ce      	b.n	800dd42 <tcp_connect+0x8a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800dda4:	68e3      	ldr	r3, [r4, #12]
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	e7eb      	b.n	800dd82 <tcp_connect+0xca>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ddaa:	4b18      	ldr	r3, [pc, #96]	; (800de0c <tcp_connect+0x154>)
 800ddac:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ddb0:	4917      	ldr	r1, [pc, #92]	; (800de10 <tcp_connect+0x158>)
 800ddb2:	f06f 0509 	mvn.w	r5, #9
 800ddb6:	4817      	ldr	r0, [pc, #92]	; (800de14 <tcp_connect+0x15c>)
 800ddb8:	f006 ff56 	bl	8014c68 <iprintf>
 800ddbc:	e7ed      	b.n	800dd9a <tcp_connect+0xe2>
      return ERR_BUF;
 800ddbe:	f06f 0501 	mvn.w	r5, #1
 800ddc2:	e7ea      	b.n	800dd9a <tcp_connect+0xe2>
    return ERR_RTE;
 800ddc4:	f06f 0503 	mvn.w	r5, #3
 800ddc8:	e7e7      	b.n	800dd9a <tcp_connect+0xe2>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ddca:	4b10      	ldr	r3, [pc, #64]	; (800de0c <tcp_connect+0x154>)
 800ddcc:	f240 4236 	movw	r2, #1078	; 0x436
 800ddd0:	4911      	ldr	r1, [pc, #68]	; (800de18 <tcp_connect+0x160>)
 800ddd2:	f06f 050f 	mvn.w	r5, #15
 800ddd6:	480f      	ldr	r0, [pc, #60]	; (800de14 <tcp_connect+0x15c>)
 800ddd8:	f006 ff46 	bl	8014c68 <iprintf>
 800dddc:	e7dd      	b.n	800dd9a <tcp_connect+0xe2>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddde:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <tcp_connect+0x154>)
 800dde0:	f240 4235 	movw	r2, #1077	; 0x435
 800dde4:	490d      	ldr	r1, [pc, #52]	; (800de1c <tcp_connect+0x164>)
 800dde6:	f06f 050f 	mvn.w	r5, #15
 800ddea:	480a      	ldr	r0, [pc, #40]	; (800de14 <tcp_connect+0x15c>)
 800ddec:	f006 ff3c 	bl	8014c68 <iprintf>
 800ddf0:	e7d3      	b.n	800dd9a <tcp_connect+0xe2>
 800ddf2:	bf00      	nop
 800ddf4:	24000080 	.word	0x24000080
 800ddf8:	24037aa0 	.word	0x24037aa0
 800ddfc:	16d016d0 	.word	0x16d016d0
 800de00:	24037a98 	.word	0x24037a98
 800de04:	24037a90 	.word	0x24037a90
 800de08:	24037a94 	.word	0x24037a94
 800de0c:	08018fcc 	.word	0x08018fcc
 800de10:	0801917c 	.word	0x0801917c
 800de14:	08017728 	.word	0x08017728
 800de18:	08019160 	.word	0x08019160
 800de1c:	08019144 	.word	0x08019144

0800de20 <tcp_segs_free>:
  while (seg != NULL) {
 800de20:	b170      	cbz	r0, 800de40 <tcp_segs_free+0x20>
{
 800de22:	b538      	push	{r3, r4, r5, lr}
 800de24:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 800de26:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800de28:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800de2a:	6868      	ldr	r0, [r5, #4]
 800de2c:	b108      	cbz	r0, 800de32 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800de2e:	f7ff fa93 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800de32:	4629      	mov	r1, r5
 800de34:	2003      	movs	r0, #3
 800de36:	f7fe fec9 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800de3a:	2c00      	cmp	r4, #0
 800de3c:	d1f3      	bne.n	800de26 <tcp_segs_free+0x6>
}
 800de3e:	bd38      	pop	{r3, r4, r5, pc}
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop

0800de44 <tcp_seg_free>:
  if (seg != NULL) {
 800de44:	b158      	cbz	r0, 800de5e <tcp_seg_free+0x1a>
{
 800de46:	b510      	push	{r4, lr}
 800de48:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800de4a:	6840      	ldr	r0, [r0, #4]
 800de4c:	b108      	cbz	r0, 800de52 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800de4e:	f7ff fa83 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800de52:	4621      	mov	r1, r4
 800de54:	2003      	movs	r0, #3
}
 800de56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800de5a:	f7fe beb7 	b.w	800cbcc <memp_free>
 800de5e:	4770      	bx	lr

0800de60 <tcp_seg_copy>:
{
 800de60:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800de62:	4605      	mov	r5, r0
 800de64:	b188      	cbz	r0, 800de8a <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800de66:	2003      	movs	r0, #3
 800de68:	f7fe fe6a 	bl	800cb40 <memp_malloc>
  if (cseg == NULL) {
 800de6c:	4604      	mov	r4, r0
 800de6e:	b150      	cbz	r0, 800de86 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800de70:	6868      	ldr	r0, [r5, #4]
 800de72:	6829      	ldr	r1, [r5, #0]
 800de74:	68aa      	ldr	r2, [r5, #8]
 800de76:	68eb      	ldr	r3, [r5, #12]
 800de78:	6060      	str	r0, [r4, #4]
 800de7a:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800de7c:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800de7e:	60a2      	str	r2, [r4, #8]
 800de80:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800de82:	f7ff fbeb 	bl	800d65c <pbuf_ref>
}
 800de86:	4620      	mov	r0, r4
 800de88:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800de8a:	4b04      	ldr	r3, [pc, #16]	; (800de9c <tcp_seg_copy+0x3c>)
 800de8c:	f240 6282 	movw	r2, #1666	; 0x682
 800de90:	4903      	ldr	r1, [pc, #12]	; (800dea0 <tcp_seg_copy+0x40>)
 800de92:	4804      	ldr	r0, [pc, #16]	; (800dea4 <tcp_seg_copy+0x44>)
 800de94:	f006 fee8 	bl	8014c68 <iprintf>
 800de98:	e7e5      	b.n	800de66 <tcp_seg_copy+0x6>
 800de9a:	bf00      	nop
 800de9c:	08018fcc 	.word	0x08018fcc
 800dea0:	080191ac 	.word	0x080191ac
 800dea4:	08017728 	.word	0x08017728

0800dea8 <tcp_arg>:
{
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	4604      	mov	r4, r0
 800deac:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800deae:	f7fa f86b 	bl	8007f88 <sys_check_core_locking>
  if (pcb != NULL) {
 800deb2:	b104      	cbz	r4, 800deb6 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800deb4:	6125      	str	r5, [r4, #16]
}
 800deb6:	bd38      	pop	{r3, r4, r5, pc}

0800deb8 <tcp_recv>:
{
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4604      	mov	r4, r0
 800debc:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800debe:	f7fa f863 	bl	8007f88 <sys_check_core_locking>
  if (pcb != NULL) {
 800dec2:	b124      	cbz	r4, 800dece <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dec4:	7d23      	ldrb	r3, [r4, #20]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d002      	beq.n	800ded0 <tcp_recv+0x18>
    pcb->recv = recv;
 800deca:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800dece:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ded0:	4b03      	ldr	r3, [pc, #12]	; (800dee0 <tcp_recv+0x28>)
 800ded2:	f240 72df 	movw	r2, #2015	; 0x7df
 800ded6:	4903      	ldr	r1, [pc, #12]	; (800dee4 <tcp_recv+0x2c>)
 800ded8:	4803      	ldr	r0, [pc, #12]	; (800dee8 <tcp_recv+0x30>)
 800deda:	f006 fec5 	bl	8014c68 <iprintf>
 800dede:	e7f4      	b.n	800deca <tcp_recv+0x12>
 800dee0:	08018fcc 	.word	0x08018fcc
 800dee4:	080191c8 	.word	0x080191c8
 800dee8:	08017728 	.word	0x08017728

0800deec <tcp_sent>:
{
 800deec:	b538      	push	{r3, r4, r5, lr}
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800def2:	f7fa f849 	bl	8007f88 <sys_check_core_locking>
  if (pcb != NULL) {
 800def6:	b124      	cbz	r4, 800df02 <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800def8:	7d23      	ldrb	r3, [r4, #20]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d002      	beq.n	800df04 <tcp_sent+0x18>
    pcb->sent = sent;
 800defe:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800df02:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800df04:	4b03      	ldr	r3, [pc, #12]	; (800df14 <tcp_sent+0x28>)
 800df06:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800df0a:	4903      	ldr	r1, [pc, #12]	; (800df18 <tcp_sent+0x2c>)
 800df0c:	4803      	ldr	r0, [pc, #12]	; (800df1c <tcp_sent+0x30>)
 800df0e:	f006 feab 	bl	8014c68 <iprintf>
 800df12:	e7f4      	b.n	800defe <tcp_sent+0x12>
 800df14:	08018fcc 	.word	0x08018fcc
 800df18:	080191f0 	.word	0x080191f0
 800df1c:	08017728 	.word	0x08017728

0800df20 <tcp_err>:
{
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4604      	mov	r4, r0
 800df24:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800df26:	f7fa f82f 	bl	8007f88 <sys_check_core_locking>
  if (pcb != NULL) {
 800df2a:	b124      	cbz	r4, 800df36 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800df2c:	7d23      	ldrb	r3, [r4, #20]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d002      	beq.n	800df38 <tcp_err+0x18>
    pcb->errf = err;
 800df32:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800df36:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800df38:	4b03      	ldr	r3, [pc, #12]	; (800df48 <tcp_err+0x28>)
 800df3a:	f640 020d 	movw	r2, #2061	; 0x80d
 800df3e:	4903      	ldr	r1, [pc, #12]	; (800df4c <tcp_err+0x2c>)
 800df40:	4803      	ldr	r0, [pc, #12]	; (800df50 <tcp_err+0x30>)
 800df42:	f006 fe91 	bl	8014c68 <iprintf>
 800df46:	e7f4      	b.n	800df32 <tcp_err+0x12>
 800df48:	08018fcc 	.word	0x08018fcc
 800df4c:	08019218 	.word	0x08019218
 800df50:	08017728 	.word	0x08017728

0800df54 <tcp_accept>:
{
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4604      	mov	r4, r0
 800df58:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800df5a:	f7fa f815 	bl	8007f88 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800df5e:	b11c      	cbz	r4, 800df68 <tcp_accept+0x14>
 800df60:	7d23      	ldrb	r3, [r4, #20]
 800df62:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 800df64:	bf08      	it	eq
 800df66:	61a5      	streq	r5, [r4, #24]
}
 800df68:	bd38      	pop	{r3, r4, r5, pc}
 800df6a:	bf00      	nop

0800df6c <tcp_poll>:
{
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	4604      	mov	r4, r0
 800df70:	460e      	mov	r6, r1
 800df72:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800df74:	f7fa f808 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800df78:	b18c      	cbz	r4, 800df9e <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800df7a:	7d23      	ldrb	r3, [r4, #20]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d003      	beq.n	800df88 <tcp_poll+0x1c>
  pcb->poll = poll;
 800df80:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 800df84:	7765      	strb	r5, [r4, #29]
}
 800df86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800df88:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <tcp_poll+0x44>)
 800df8a:	f640 023e 	movw	r2, #2110	; 0x83e
 800df8e:	4909      	ldr	r1, [pc, #36]	; (800dfb4 <tcp_poll+0x48>)
 800df90:	4809      	ldr	r0, [pc, #36]	; (800dfb8 <tcp_poll+0x4c>)
 800df92:	f006 fe69 	bl	8014c68 <iprintf>
  pcb->poll = poll;
 800df96:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 800df9a:	7765      	strb	r5, [r4, #29]
}
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800df9e:	4b04      	ldr	r3, [pc, #16]	; (800dfb0 <tcp_poll+0x44>)
 800dfa0:	f640 023d 	movw	r2, #2109	; 0x83d
 800dfa4:	4905      	ldr	r1, [pc, #20]	; (800dfbc <tcp_poll+0x50>)
 800dfa6:	4804      	ldr	r0, [pc, #16]	; (800dfb8 <tcp_poll+0x4c>)
}
 800dfa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dfac:	f006 be5c 	b.w	8014c68 <iprintf>
 800dfb0:	08018fcc 	.word	0x08018fcc
 800dfb4:	08019258 	.word	0x08019258
 800dfb8:	08017728 	.word	0x08017728
 800dfbc:	08019240 	.word	0x08019240

0800dfc0 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d041      	beq.n	800e048 <tcp_pcb_purge+0x88>
{
 800dfc4:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 800dfc6:	7d03      	ldrb	r3, [r0, #20]
 800dfc8:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800dfca:	2b0a      	cmp	r3, #10
 800dfcc:	d001      	beq.n	800dfd2 <tcp_pcb_purge+0x12>
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d800      	bhi.n	800dfd4 <tcp_pcb_purge+0x14>
}
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800dfd4:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800dfd6:	b118      	cbz	r0, 800dfe0 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800dfd8:	f7ff f9be 	bl	800d358 <pbuf_free>
      pcb->refused_data = NULL;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800dfe0:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800dfe2:	b164      	cbz	r4, 800dffe <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800dfe4:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800dfe6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800dfe8:	6870      	ldr	r0, [r6, #4]
 800dfea:	b108      	cbz	r0, 800dff0 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800dfec:	f7ff f9b4 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800dff0:	4631      	mov	r1, r6
 800dff2:	2003      	movs	r0, #3
 800dff4:	f7fe fdea 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800dff8:	2c00      	cmp	r4, #0
 800dffa:	d1f3      	bne.n	800dfe4 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800dffc:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800dffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800e002:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 800e004:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 800e006:	b15c      	cbz	r4, 800e020 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800e008:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800e00a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800e00c:	6870      	ldr	r0, [r6, #4]
 800e00e:	b108      	cbz	r0, 800e014 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800e010:	f7ff f9a2 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e014:	4631      	mov	r1, r6
 800e016:	2003      	movs	r0, #3
 800e018:	f7fe fdd8 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800e01c:	2c00      	cmp	r4, #0
 800e01e:	d1f3      	bne.n	800e008 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800e020:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 800e022:	b15c      	cbz	r4, 800e03c <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800e024:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800e026:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800e028:	6870      	ldr	r0, [r6, #4]
 800e02a:	b108      	cbz	r0, 800e030 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800e02c:	f7ff f994 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e030:	4631      	mov	r1, r6
 800e032:	2003      	movs	r0, #3
 800e034:	f7fe fdca 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800e038:	2c00      	cmp	r4, #0
 800e03a:	d1f3      	bne.n	800e024 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800e03c:	2300      	movs	r3, #0
 800e03e:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800e042:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 800e046:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e048:	4b03      	ldr	r3, [pc, #12]	; (800e058 <tcp_pcb_purge+0x98>)
 800e04a:	f640 0251 	movw	r2, #2129	; 0x851
 800e04e:	4903      	ldr	r1, [pc, #12]	; (800e05c <tcp_pcb_purge+0x9c>)
 800e050:	4803      	ldr	r0, [pc, #12]	; (800e060 <tcp_pcb_purge+0xa0>)
 800e052:	f006 be09 	b.w	8014c68 <iprintf>
 800e056:	bf00      	nop
 800e058:	08018fcc 	.word	0x08018fcc
 800e05c:	08019278 	.word	0x08019278
 800e060:	08017728 	.word	0x08017728

0800e064 <tcp_slowtmr>:
{
 800e064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800e068:	4da9      	ldr	r5, [pc, #676]	; (800e310 <tcp_slowtmr+0x2ac>)
{
 800e06a:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800e06c:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800e33c <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800e070:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e072:	4fa8      	ldr	r7, [pc, #672]	; (800e314 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 800e074:	3301      	adds	r3, #1
 800e076:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800e078:	f89b 3000 	ldrb.w	r3, [fp]
 800e07c:	3301      	adds	r3, #1
 800e07e:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 800e082:	4ba5      	ldr	r3, [pc, #660]	; (800e318 <tcp_slowtmr+0x2b4>)
 800e084:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800e086:	2c00      	cmp	r4, #0
 800e088:	f000 808a 	beq.w	800e1a0 <tcp_slowtmr+0x13c>
  prev = NULL;
 800e08c:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e08e:	46b1      	mov	r9, r6
 800e090:	7d23      	ldrb	r3, [r4, #20]
 800e092:	2b00      	cmp	r3, #0
 800e094:	f000 80fc 	beq.w	800e290 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e098:	2b01      	cmp	r3, #1
 800e09a:	f000 8104 	beq.w	800e2a6 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e09e:	2b0a      	cmp	r3, #10
 800e0a0:	f000 810c 	beq.w	800e2bc <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e0a4:	f89b 2000 	ldrb.w	r2, [fp]
 800e0a8:	7fa3      	ldrb	r3, [r4, #30]
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	f000 8113 	beq.w	800e2d6 <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e0b0:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800e0b2:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800e0ba:	f000 8112 	beq.w	800e2e2 <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e0be:	2a0b      	cmp	r2, #11
 800e0c0:	f240 80cb 	bls.w	800e25a <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 800e0c4:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800e0c8:	2b06      	cmp	r3, #6
 800e0ca:	f000 80b7 	beq.w	800e23c <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e0ce:	f894 a009 	ldrb.w	sl, [r4, #9]
 800e0d2:	f01a 0a08 	ands.w	sl, sl, #8
 800e0d6:	d01d      	beq.n	800e114 <tcp_slowtmr+0xb0>
 800e0d8:	2b04      	cmp	r3, #4
 800e0da:	d007      	beq.n	800e0ec <tcp_slowtmr+0x88>
 800e0dc:	f1a3 0307 	sub.w	r3, r3, #7
 800e0e0:	fab3 f383 	clz	r3, r3
 800e0e4:	095b      	lsrs	r3, r3, #5
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f000 80b4 	beq.w	800e254 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e0ec:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800e0f0:	4b8a      	ldr	r3, [pc, #552]	; (800e31c <tcp_slowtmr+0x2b8>)
 800e0f2:	488b      	ldr	r0, [pc, #556]	; (800e320 <tcp_slowtmr+0x2bc>)
 800e0f4:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0f6:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e0f8:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0fc:	6a20      	ldr	r0, [r4, #32]
 800e0fe:	1a12      	subs	r2, r2, r0
 800e100:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800e104:	f240 8160 	bls.w	800e3c8 <tcp_slowtmr+0x364>
        ++pcb_remove;
 800e108:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800e10c:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800e110:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800e114:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800e116:	b156      	cbz	r6, 800e12e <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e118:	682b      	ldr	r3, [r5, #0]
 800e11a:	6a22      	ldr	r2, [r4, #32]
 800e11c:	1a9a      	subs	r2, r3, r2
 800e11e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800e122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800e126:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800e12a:	f080 80e1 	bcs.w	800e2f0 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 800e12e:	7d23      	ldrb	r3, [r4, #20]
 800e130:	2b03      	cmp	r3, #3
 800e132:	d057      	beq.n	800e1e4 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 800e134:	2b09      	cmp	r3, #9
 800e136:	d15a      	bne.n	800e1ee <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	6a22      	ldr	r2, [r4, #32]
 800e13c:	1a9b      	subs	r3, r3, r2
 800e13e:	2bf0      	cmp	r3, #240	; 0xf0
 800e140:	d955      	bls.n	800e1ee <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 800e142:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800e144:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800e148:	f7ff ff3a 	bl	800dfc0 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e14c:	4b72      	ldr	r3, [pc, #456]	; (800e318 <tcp_slowtmr+0x2b4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800e150:	f1b9 0f00 	cmp.w	r9, #0
 800e154:	f000 817e 	beq.w	800e454 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e158:	42a3      	cmp	r3, r4
 800e15a:	f000 81da 	beq.w	800e512 <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 800e15e:	68e3      	ldr	r3, [r4, #12]
 800e160:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800e164:	f1ba 0f00 	cmp.w	sl, #0
 800e168:	f040 8147 	bne.w	800e3fa <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e16c:	7d23      	ldrb	r3, [r4, #20]
 800e16e:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800e170:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e174:	f000 8153 	beq.w	800e41e <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 800e178:	4621      	mov	r1, r4
 800e17a:	2001      	movs	r0, #1
 800e17c:	f7fe fd26 	bl	800cbcc <memp_free>
      tcp_active_pcbs_changed = 0;
 800e180:	4c68      	ldr	r4, [pc, #416]	; (800e324 <tcp_slowtmr+0x2c0>)
 800e182:	2300      	movs	r3, #0
 800e184:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e186:	b13e      	cbz	r6, 800e198 <tcp_slowtmr+0x134>
 800e188:	f06f 010c 	mvn.w	r1, #12
 800e18c:	4650      	mov	r0, sl
 800e18e:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 800e190:	7823      	ldrb	r3, [r4, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	f47f af75 	bne.w	800e082 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 800e198:	4644      	mov	r4, r8
  while (pcb != NULL) {
 800e19a:	2c00      	cmp	r4, #0
 800e19c:	f47f af78 	bne.w	800e090 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 800e1a0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800e340 <tcp_slowtmr+0x2dc>
 800e1a4:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 800e1a8:	b1cc      	cbz	r4, 800e1de <tcp_slowtmr+0x17a>
  prev = NULL;
 800e1aa:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e1ac:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800e314 <tcp_slowtmr+0x2b0>
 800e1b0:	f8df a190 	ldr.w	sl, [pc, #400]	; 800e344 <tcp_slowtmr+0x2e0>
 800e1b4:	4f5c      	ldr	r7, [pc, #368]	; (800e328 <tcp_slowtmr+0x2c4>)
 800e1b6:	7d23      	ldrb	r3, [r4, #20]
 800e1b8:	2b0a      	cmp	r3, #10
 800e1ba:	d006      	beq.n	800e1ca <tcp_slowtmr+0x166>
 800e1bc:	4643      	mov	r3, r8
 800e1be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e1c2:	4651      	mov	r1, sl
 800e1c4:	4638      	mov	r0, r7
 800e1c6:	f006 fd4f 	bl	8014c68 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e1ca:	682b      	ldr	r3, [r5, #0]
 800e1cc:	6a22      	ldr	r2, [r4, #32]
 800e1ce:	1a9b      	subs	r3, r3, r2
 800e1d0:	2bf0      	cmp	r3, #240	; 0xf0
 800e1d2:	f200 80d4 	bhi.w	800e37e <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 800e1d6:	4626      	mov	r6, r4
 800e1d8:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800e1da:	2c00      	cmp	r4, #0
 800e1dc:	d1eb      	bne.n	800e1b6 <tcp_slowtmr+0x152>
}
 800e1de:	b007      	add	sp, #28
 800e1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	6a22      	ldr	r2, [r4, #32]
 800e1e8:	1a9b      	subs	r3, r3, r2
 800e1ea:	2b28      	cmp	r3, #40	; 0x28
 800e1ec:	d8a9      	bhi.n	800e142 <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800e1ee:	f1b8 0f00 	cmp.w	r8, #0
 800e1f2:	d1a6      	bne.n	800e142 <tcp_slowtmr+0xde>
      ++prev->polltmr;
 800e1f4:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e1f6:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800e1f8:	3301      	adds	r3, #1
      pcb = pcb->next;
 800e1fa:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800e1fc:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800e1fe:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800e200:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e202:	d815      	bhi.n	800e230 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 800e204:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800e324 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 800e208:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800e20c:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800e210:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 80ce 	beq.w	800e3b6 <tcp_slowtmr+0x352>
 800e21a:	4621      	mov	r1, r4
 800e21c:	6920      	ldr	r0, [r4, #16]
 800e21e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800e220:	f899 3000 	ldrb.w	r3, [r9]
 800e224:	2b00      	cmp	r3, #0
 800e226:	f47f af2c 	bne.w	800e082 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f000 80c3 	beq.w	800e3b6 <tcp_slowtmr+0x352>
 800e230:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800e232:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800e234:	2c00      	cmp	r4, #0
 800e236:	f47f af2b 	bne.w	800e090 <tcp_slowtmr+0x2c>
 800e23a:	e7b1      	b.n	800e1a0 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 800e23c:	8b63      	ldrh	r3, [r4, #26]
 800e23e:	06db      	lsls	r3, r3, #27
 800e240:	d508      	bpl.n	800e254 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e242:	682b      	ldr	r3, [r5, #0]
 800e244:	6a22      	ldr	r2, [r4, #32]
 800e246:	1a9b      	subs	r3, r3, r2
 800e248:	2b28      	cmp	r3, #40	; 0x28
 800e24a:	d903      	bls.n	800e254 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 800e24c:	f108 0801 	add.w	r8, r8, #1
 800e250:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 800e254:	f04f 0a00 	mov.w	sl, #0
 800e258:	e75c      	b.n	800e114 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 800e25a:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 800e25e:	f1b8 0f00 	cmp.w	r8, #0
 800e262:	d071      	beq.n	800e348 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e264:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e266:	b133      	cbz	r3, 800e276 <tcp_slowtmr+0x212>
 800e268:	463b      	mov	r3, r7
 800e26a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e26e:	492f      	ldr	r1, [pc, #188]	; (800e32c <tcp_slowtmr+0x2c8>)
 800e270:	482d      	ldr	r0, [pc, #180]	; (800e328 <tcp_slowtmr+0x2c4>)
 800e272:	f006 fcf9 	bl	8014c68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e276:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 816c 	beq.w	800e556 <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e27e:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800e282:	2b0b      	cmp	r3, #11
 800e284:	f240 80d2 	bls.w	800e42c <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 800e288:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800e28a:	f04f 0801 	mov.w	r8, #1
 800e28e:	e71b      	b.n	800e0c8 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e290:	463b      	mov	r3, r7
 800e292:	f240 42be 	movw	r2, #1214	; 0x4be
 800e296:	4926      	ldr	r1, [pc, #152]	; (800e330 <tcp_slowtmr+0x2cc>)
 800e298:	4823      	ldr	r0, [pc, #140]	; (800e328 <tcp_slowtmr+0x2c4>)
 800e29a:	f006 fce5 	bl	8014c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e29e:	7d23      	ldrb	r3, [r4, #20]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	f47f aefc 	bne.w	800e09e <tcp_slowtmr+0x3a>
 800e2a6:	463b      	mov	r3, r7
 800e2a8:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e2ac:	4921      	ldr	r1, [pc, #132]	; (800e334 <tcp_slowtmr+0x2d0>)
 800e2ae:	481e      	ldr	r0, [pc, #120]	; (800e328 <tcp_slowtmr+0x2c4>)
 800e2b0:	f006 fcda 	bl	8014c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e2b4:	7d23      	ldrb	r3, [r4, #20]
 800e2b6:	2b0a      	cmp	r3, #10
 800e2b8:	f47f aef4 	bne.w	800e0a4 <tcp_slowtmr+0x40>
 800e2bc:	463b      	mov	r3, r7
 800e2be:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e2c2:	491d      	ldr	r1, [pc, #116]	; (800e338 <tcp_slowtmr+0x2d4>)
 800e2c4:	4818      	ldr	r0, [pc, #96]	; (800e328 <tcp_slowtmr+0x2c4>)
 800e2c6:	f006 fccf 	bl	8014c68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2ca:	f89b 2000 	ldrb.w	r2, [fp]
 800e2ce:	7fa3      	ldrb	r3, [r4, #30]
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	f47f aeed 	bne.w	800e0b0 <tcp_slowtmr+0x4c>
      continue;
 800e2d6:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800e2d8:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800e2da:	2c00      	cmp	r4, #0
 800e2dc:	f47f aed8 	bne.w	800e090 <tcp_slowtmr+0x2c>
 800e2e0:	e75e      	b.n	800e1a0 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e2e2:	2a05      	cmp	r2, #5
 800e2e4:	d9b9      	bls.n	800e25a <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 800e2e6:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 800e2ea:	f04f 0801 	mov.w	r8, #1
 800e2ee:	e711      	b.n	800e114 <tcp_slowtmr+0xb0>
 800e2f0:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800e2f2:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 800e2f4:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 800e2f6:	6860      	ldr	r0, [r4, #4]
 800e2f8:	b108      	cbz	r0, 800e2fe <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 800e2fa:	f7ff f82d 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e2fe:	4621      	mov	r1, r4
 800e300:	2003      	movs	r0, #3
 800e302:	f7fe fc63 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800e306:	2e00      	cmp	r6, #0
 800e308:	d1f3      	bne.n	800e2f2 <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 800e30a:	9c05      	ldr	r4, [sp, #20]
 800e30c:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e30e:	e70e      	b.n	800e12e <tcp_slowtmr+0xca>
 800e310:	24037aa0 	.word	0x24037aa0
 800e314:	08018fcc 	.word	0x08018fcc
 800e318:	24037a90 	.word	0x24037a90
 800e31c:	000a4cb8 	.word	0x000a4cb8
 800e320:	10624dd3 	.word	0x10624dd3
 800e324:	24037a94 	.word	0x24037a94
 800e328:	08017728 	.word	0x08017728
 800e32c:	0801931c 	.word	0x0801931c
 800e330:	08019294 	.word	0x08019294
 800e334:	080192c0 	.word	0x080192c0
 800e338:	080192ec 	.word	0x080192ec
 800e33c:	24037aa5 	.word	0x24037aa5
 800e340:	24037aa8 	.word	0x24037aa8
 800e344:	080193e0 	.word	0x080193e0
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e348:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800e34c:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 800e350:	b291      	uxth	r1, r2
 800e352:	4281      	cmp	r1, r0
 800e354:	d802      	bhi.n	800e35c <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 800e356:	3101      	adds	r1, #1
 800e358:	b20a      	sxth	r2, r1
 800e35a:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800e35c:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800e360:	4291      	cmp	r1, r2
 800e362:	f73f aeb1 	bgt.w	800e0c8 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e366:	4620      	mov	r0, r4
 800e368:	f003 f85c 	bl	8011424 <tcp_rexmit_rto_prepare>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f000 809e 	beq.w	800e4ae <tcp_slowtmr+0x44a>
 800e372:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 8096 	beq.w	800e4a6 <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 800e37a:	7d23      	ldrb	r3, [r4, #20]
 800e37c:	e6a4      	b.n	800e0c8 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 800e37e:	4620      	mov	r0, r4
 800e380:	f7ff fe1e 	bl	800dfc0 <tcp_pcb_purge>
      if (prev != NULL) {
 800e384:	2e00      	cmp	r6, #0
 800e386:	f000 80cc 	beq.w	800e522 <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e38a:	f8d9 3000 	ldr.w	r3, [r9]
 800e38e:	42a3      	cmp	r3, r4
 800e390:	f000 80e9 	beq.w	800e566 <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 800e394:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800e398:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e39c:	7d23      	ldrb	r3, [r4, #20]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	f000 80d2 	beq.w	800e548 <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 800e3a4:	4621      	mov	r1, r4
      pcb = pcb->next;
 800e3a6:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	f7fe fc0f 	bl	800cbcc <memp_free>
  while (pcb != NULL) {
 800e3ae:	2c00      	cmp	r4, #0
 800e3b0:	f47f af01 	bne.w	800e1b6 <tcp_slowtmr+0x152>
 800e3b4:	e713      	b.n	800e1de <tcp_slowtmr+0x17a>
          tcp_output(prev);
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800e3ba:	4634      	mov	r4, r6
          tcp_output(prev);
 800e3bc:	f003 f970 	bl	80116a0 <tcp_output>
  while (pcb != NULL) {
 800e3c0:	2c00      	cmp	r4, #0
 800e3c2:	f47f ae65 	bne.w	800e090 <tcp_slowtmr+0x2c>
 800e3c6:	e6eb      	b.n	800e1a0 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e3c8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800e3cc:	486e      	ldr	r0, [pc, #440]	; (800e588 <tcp_slowtmr+0x524>)
 800e3ce:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e3d2:	4b6e      	ldr	r3, [pc, #440]	; (800e58c <tcp_slowtmr+0x528>)
 800e3d4:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3d8:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800e3dc:	f67f af3a 	bls.w	800e254 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f003 fb8b 	bl	8011afc <tcp_keepalive>
        if (err == ERR_OK) {
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	f47f af34 	bne.w	800e254 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 800e3ec:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800e3f0:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800e3f8:	e68c      	b.n	800e114 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e3fa:	8b23      	ldrh	r3, [r4, #24]
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e400:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800e402:	9302      	str	r3, [sp, #8]
 800e404:	8ae3      	ldrh	r3, [r4, #22]
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	1d23      	adds	r3, r4, #4
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	4623      	mov	r3, r4
 800e40e:	f003 f8cd 	bl	80115ac <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e412:	7d23      	ldrb	r3, [r4, #20]
 800e414:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800e416:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e41a:	f47f aead 	bne.w	800e178 <tcp_slowtmr+0x114>
 800e41e:	463b      	mov	r3, r7
 800e420:	22d4      	movs	r2, #212	; 0xd4
 800e422:	495b      	ldr	r1, [pc, #364]	; (800e590 <tcp_slowtmr+0x52c>)
 800e424:	485b      	ldr	r0, [pc, #364]	; (800e594 <tcp_slowtmr+0x530>)
 800e426:	f006 fc1f 	bl	8014c68 <iprintf>
 800e42a:	e6a5      	b.n	800e178 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e42c:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800e430:	4a59      	ldr	r2, [pc, #356]	; (800e598 <tcp_slowtmr+0x534>)
 800e432:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800e434:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e438:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d216      	bcs.n	800e46e <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 800e440:	3301      	adds	r3, #1
 800e442:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800e444:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800e446:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e44a:	d210      	bcs.n	800e46e <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 800e44c:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 800e44e:	f04f 0800 	mov.w	r8, #0
 800e452:	e639      	b.n	800e0c8 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e454:	42a3      	cmp	r3, r4
 800e456:	d006      	beq.n	800e466 <tcp_slowtmr+0x402>
 800e458:	463b      	mov	r3, r7
 800e45a:	f240 5271 	movw	r2, #1393	; 0x571
 800e45e:	494f      	ldr	r1, [pc, #316]	; (800e59c <tcp_slowtmr+0x538>)
 800e460:	484c      	ldr	r0, [pc, #304]	; (800e594 <tcp_slowtmr+0x530>)
 800e462:	f006 fc01 	bl	8014c68 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e466:	68e3      	ldr	r3, [r4, #12]
 800e468:	4a4d      	ldr	r2, [pc, #308]	; (800e5a0 <tcp_slowtmr+0x53c>)
 800e46a:	6013      	str	r3, [r2, #0]
 800e46c:	e67a      	b.n	800e164 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 800e46e:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 800e472:	b936      	cbnz	r6, 800e482 <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e474:	4620      	mov	r0, r4
 800e476:	f003 fb67 	bl	8011b48 <tcp_zero_window_probe>
 800e47a:	b140      	cbz	r0, 800e48e <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800e47c:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 800e47e:	7d23      	ldrb	r3, [r4, #20]
 800e480:	e622      	b.n	800e0c8 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e482:	4631      	mov	r1, r6
 800e484:	4620      	mov	r0, r4
 800e486:	f002 fe19 	bl	80110bc <tcp_split_unsent_seg>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d073      	beq.n	800e576 <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e48e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 800e492:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e496:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800e498:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 800e49c:	bf9c      	itt	ls
 800e49e:	3301      	addls	r3, #1
 800e4a0:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 800e4a4:	e769      	b.n	800e37a <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e4a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f43f af66 	beq.w	800e37a <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 800e4ae:	7d23      	ldrb	r3, [r4, #20]
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d014      	beq.n	800e4de <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e4b4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e4b8:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800e4bc:	2a0c      	cmp	r2, #12
 800e4be:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800e4c2:	bf28      	it	cs
 800e4c4:	220c      	movcs	r2, #12
 800e4c6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800e4ca:	4936      	ldr	r1, [pc, #216]	; (800e5a4 <tcp_slowtmr+0x540>)
 800e4cc:	5c8a      	ldrb	r2, [r1, r2]
 800e4ce:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e4d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	bfa8      	it	ge
 800e4d8:	4613      	movge	r3, r2
 800e4da:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4de:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 800e4e0:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4e2:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 800e4e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e4ee:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800e4f2:	428b      	cmp	r3, r1
 800e4f4:	bf28      	it	cs
 800e4f6:	460b      	movcs	r3, r1
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	bf38      	it	cc
 800e4fe:	4613      	movcc	r3, r2
 800e500:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 800e504:	2300      	movs	r3, #0
 800e506:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800e508:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e50c:	f003 faaa 	bl	8011a64 <tcp_rexmit_rto_commit>
 800e510:	e733      	b.n	800e37a <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e512:	463b      	mov	r3, r7
 800e514:	f240 526d 	movw	r2, #1389	; 0x56d
 800e518:	4923      	ldr	r1, [pc, #140]	; (800e5a8 <tcp_slowtmr+0x544>)
 800e51a:	481e      	ldr	r0, [pc, #120]	; (800e594 <tcp_slowtmr+0x530>)
 800e51c:	f006 fba4 	bl	8014c68 <iprintf>
 800e520:	e61d      	b.n	800e15e <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e522:	f8d9 3000 	ldr.w	r3, [r9]
 800e526:	42a3      	cmp	r3, r4
 800e528:	d006      	beq.n	800e538 <tcp_slowtmr+0x4d4>
 800e52a:	4643      	mov	r3, r8
 800e52c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e530:	491e      	ldr	r1, [pc, #120]	; (800e5ac <tcp_slowtmr+0x548>)
 800e532:	4638      	mov	r0, r7
 800e534:	f006 fb98 	bl	8014c68 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e538:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800e53a:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e53e:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800e540:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e544:	f47f af2e 	bne.w	800e3a4 <tcp_slowtmr+0x340>
 800e548:	4643      	mov	r3, r8
 800e54a:	22d4      	movs	r2, #212	; 0xd4
 800e54c:	4910      	ldr	r1, [pc, #64]	; (800e590 <tcp_slowtmr+0x52c>)
 800e54e:	4638      	mov	r0, r7
 800e550:	f006 fb8a 	bl	8014c68 <iprintf>
 800e554:	e726      	b.n	800e3a4 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e556:	463b      	mov	r3, r7
 800e558:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e55c:	4914      	ldr	r1, [pc, #80]	; (800e5b0 <tcp_slowtmr+0x54c>)
 800e55e:	480d      	ldr	r0, [pc, #52]	; (800e594 <tcp_slowtmr+0x530>)
 800e560:	f006 fb82 	bl	8014c68 <iprintf>
 800e564:	e68b      	b.n	800e27e <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e566:	4643      	mov	r3, r8
 800e568:	f240 52af 	movw	r2, #1455	; 0x5af
 800e56c:	4911      	ldr	r1, [pc, #68]	; (800e5b4 <tcp_slowtmr+0x550>)
 800e56e:	4638      	mov	r0, r7
 800e570:	f006 fb7a 	bl	8014c68 <iprintf>
 800e574:	e70e      	b.n	800e394 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 800e576:	4620      	mov	r0, r4
 800e578:	f003 f892 	bl	80116a0 <tcp_output>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	d186      	bne.n	800e48e <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800e580:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800e582:	7d23      	ldrb	r3, [r4, #20]
 800e584:	e5a0      	b.n	800e0c8 <tcp_slowtmr+0x64>
 800e586:	bf00      	nop
 800e588:	000124f8 	.word	0x000124f8
 800e58c:	10624dd3 	.word	0x10624dd3
 800e590:	08019008 	.word	0x08019008
 800e594:	08017728 	.word	0x08017728
 800e598:	080196c0 	.word	0x080196c0
 800e59c:	080193b4 	.word	0x080193b4
 800e5a0:	24037a90 	.word	0x24037a90
 800e5a4:	080196a0 	.word	0x080196a0
 800e5a8:	08019388 	.word	0x08019388
 800e5ac:	08019438 	.word	0x08019438
 800e5b0:	08019350 	.word	0x08019350
 800e5b4:	08019410 	.word	0x08019410

0800e5b8 <tcp_pcb_remove>:
{
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e5bc:	460c      	mov	r4, r1
 800e5be:	2900      	cmp	r1, #0
 800e5c0:	d04a      	beq.n	800e658 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	d051      	beq.n	800e66a <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800e5c6:	682b      	ldr	r3, [r5, #0]
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	d032      	beq.n	800e632 <tcp_pcb_remove+0x7a>
 800e5cc:	b12b      	cbz	r3, 800e5da <tcp_pcb_remove+0x22>
 800e5ce:	68da      	ldr	r2, [r3, #12]
 800e5d0:	42a2      	cmp	r2, r4
 800e5d2:	d03e      	beq.n	800e652 <tcp_pcb_remove+0x9a>
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1f9      	bne.n	800e5ce <tcp_pcb_remove+0x16>
 800e5da:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800e5dc:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800e5de:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800e5e0:	f7ff fcee 	bl	800dfc0 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800e5e4:	7d23      	ldrb	r3, [r4, #20]
 800e5e6:	2b0a      	cmp	r3, #10
 800e5e8:	d02d      	beq.n	800e646 <tcp_pcb_remove+0x8e>
 800e5ea:	2b01      	cmp	r3, #1
 800e5ec:	d01d      	beq.n	800e62a <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800e5ee:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800e5f0:	07da      	lsls	r2, r3, #31
 800e5f2:	d421      	bmi.n	800e638 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e5f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e5f6:	b133      	cbz	r3, 800e606 <tcp_pcb_remove+0x4e>
 800e5f8:	4b20      	ldr	r3, [pc, #128]	; (800e67c <tcp_pcb_remove+0xc4>)
 800e5fa:	f640 0293 	movw	r2, #2195	; 0x893
 800e5fe:	4920      	ldr	r1, [pc, #128]	; (800e680 <tcp_pcb_remove+0xc8>)
 800e600:	4820      	ldr	r0, [pc, #128]	; (800e684 <tcp_pcb_remove+0xcc>)
 800e602:	f006 fb31 	bl	8014c68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e606:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e608:	b133      	cbz	r3, 800e618 <tcp_pcb_remove+0x60>
 800e60a:	4b1c      	ldr	r3, [pc, #112]	; (800e67c <tcp_pcb_remove+0xc4>)
 800e60c:	f640 0294 	movw	r2, #2196	; 0x894
 800e610:	491d      	ldr	r1, [pc, #116]	; (800e688 <tcp_pcb_remove+0xd0>)
 800e612:	481c      	ldr	r0, [pc, #112]	; (800e684 <tcp_pcb_remove+0xcc>)
 800e614:	f006 fb28 	bl	8014c68 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e618:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e61a:	b133      	cbz	r3, 800e62a <tcp_pcb_remove+0x72>
 800e61c:	4b17      	ldr	r3, [pc, #92]	; (800e67c <tcp_pcb_remove+0xc4>)
 800e61e:	f640 0296 	movw	r2, #2198	; 0x896
 800e622:	491a      	ldr	r1, [pc, #104]	; (800e68c <tcp_pcb_remove+0xd4>)
 800e624:	4817      	ldr	r0, [pc, #92]	; (800e684 <tcp_pcb_remove+0xcc>)
 800e626:	f006 fb1f 	bl	8014c68 <iprintf>
  pcb->state = CLOSED;
 800e62a:	2300      	movs	r3, #0
 800e62c:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800e62e:	82e3      	strh	r3, [r4, #22]
}
 800e630:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800e632:	68e3      	ldr	r3, [r4, #12]
 800e634:	602b      	str	r3, [r5, #0]
 800e636:	e7d0      	b.n	800e5da <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800e638:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800e63c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800e63e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800e640:	f003 f82e 	bl	80116a0 <tcp_output>
  if (pcb->state != LISTEN) {
 800e644:	7d23      	ldrb	r3, [r4, #20]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d0ef      	beq.n	800e62a <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e64a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1d3      	bne.n	800e5f8 <tcp_pcb_remove+0x40>
 800e650:	e7d9      	b.n	800e606 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800e652:	68e2      	ldr	r2, [r4, #12]
 800e654:	60da      	str	r2, [r3, #12]
 800e656:	e7c0      	b.n	800e5da <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e658:	4b08      	ldr	r3, [pc, #32]	; (800e67c <tcp_pcb_remove+0xc4>)
 800e65a:	f640 0283 	movw	r2, #2179	; 0x883
 800e65e:	490c      	ldr	r1, [pc, #48]	; (800e690 <tcp_pcb_remove+0xd8>)
 800e660:	4808      	ldr	r0, [pc, #32]	; (800e684 <tcp_pcb_remove+0xcc>)
 800e662:	f006 fb01 	bl	8014c68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e666:	2d00      	cmp	r5, #0
 800e668:	d1ad      	bne.n	800e5c6 <tcp_pcb_remove+0xe>
 800e66a:	4b04      	ldr	r3, [pc, #16]	; (800e67c <tcp_pcb_remove+0xc4>)
 800e66c:	f640 0284 	movw	r2, #2180	; 0x884
 800e670:	4908      	ldr	r1, [pc, #32]	; (800e694 <tcp_pcb_remove+0xdc>)
 800e672:	4804      	ldr	r0, [pc, #16]	; (800e684 <tcp_pcb_remove+0xcc>)
 800e674:	f006 faf8 	bl	8014c68 <iprintf>
 800e678:	e7a5      	b.n	800e5c6 <tcp_pcb_remove+0xe>
 800e67a:	bf00      	nop
 800e67c:	08018fcc 	.word	0x08018fcc
 800e680:	0801949c 	.word	0x0801949c
 800e684:	08017728 	.word	0x08017728
 800e688:	080194b4 	.word	0x080194b4
 800e68c:	080194d0 	.word	0x080194d0
 800e690:	08019460 	.word	0x08019460
 800e694:	0801947c 	.word	0x0801947c

0800e698 <tcp_abandon>:
{
 800e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69c:	4605      	mov	r5, r0
 800e69e:	b087      	sub	sp, #28
 800e6a0:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800e6a2:	f7f9 fc71 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e6a6:	2d00      	cmp	r5, #0
 800e6a8:	f000 80a8 	beq.w	800e7fc <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e6ac:	7d2b      	ldrb	r3, [r5, #20]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	f000 808b 	beq.w	800e7ca <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 800e6b4:	2b0a      	cmp	r3, #10
 800e6b6:	f000 8093 	beq.w	800e7e0 <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 800e6ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800e6bc:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 800e6c0:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800e6c4:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 800e6c8:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800e6ca:	b96b      	cbnz	r3, 800e6e8 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 800e6cc:	8aef      	ldrh	r7, [r5, #22]
 800e6ce:	2f00      	cmp	r7, #0
 800e6d0:	d052      	beq.n	800e778 <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e6d2:	4a53      	ldr	r2, [pc, #332]	; (800e820 <tcp_abandon+0x188>)
 800e6d4:	6813      	ldr	r3, [r2, #0]
 800e6d6:	42ab      	cmp	r3, r5
 800e6d8:	d074      	beq.n	800e7c4 <tcp_abandon+0x12c>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d050      	beq.n	800e780 <tcp_abandon+0xe8>
 800e6de:	68da      	ldr	r2, [r3, #12]
 800e6e0:	42aa      	cmp	r2, r5
 800e6e2:	d04b      	beq.n	800e77c <tcp_abandon+0xe4>
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	e7f8      	b.n	800e6da <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	484e      	ldr	r0, [pc, #312]	; (800e824 <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 800e6ec:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e6ee:	f7ff ff63 	bl	800e5b8 <tcp_pcb_remove>
 800e6f2:	4b4d      	ldr	r3, [pc, #308]	; (800e828 <tcp_abandon+0x190>)
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e6f8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800e6fa:	b164      	cbz	r4, 800e716 <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 800e6fc:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800e6fe:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800e700:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e704:	b108      	cbz	r0, 800e70a <tcp_abandon+0x72>
      pbuf_free(seg->p);
 800e706:	f7fe fe27 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e70a:	4651      	mov	r1, sl
 800e70c:	2003      	movs	r0, #3
 800e70e:	f7fe fa5d 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800e712:	2c00      	cmp	r4, #0
 800e714:	d1f2      	bne.n	800e6fc <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 800e716:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800e718:	b164      	cbz	r4, 800e734 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 800e71a:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800e71c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800e71e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e722:	b108      	cbz	r0, 800e728 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 800e724:	f7fe fe18 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e728:	4651      	mov	r1, sl
 800e72a:	2003      	movs	r0, #3
 800e72c:	f7fe fa4e 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800e730:	2c00      	cmp	r4, #0
 800e732:	d1f2      	bne.n	800e71a <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 800e734:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800e736:	b164      	cbz	r4, 800e752 <tcp_abandon+0xba>
      pbuf_free(seg->p);
 800e738:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800e73a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800e73c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e740:	b108      	cbz	r0, 800e746 <tcp_abandon+0xae>
      pbuf_free(seg->p);
 800e742:	f7fe fe09 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800e746:	4651      	mov	r1, sl
 800e748:	2003      	movs	r0, #3
 800e74a:	f7fe fa3f 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800e74e:	2c00      	cmp	r4, #0
 800e750:	d1f2      	bne.n	800e738 <tcp_abandon+0xa0>
    if (send_rst) {
 800e752:	b9ce      	cbnz	r6, 800e788 <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e754:	7d2b      	ldrb	r3, [r5, #20]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d024      	beq.n	800e7a4 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 800e75a:	4629      	mov	r1, r5
 800e75c:	2001      	movs	r0, #1
 800e75e:	f7fe fa35 	bl	800cbcc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e762:	f1b8 0f00 	cmp.w	r8, #0
 800e766:	d02a      	beq.n	800e7be <tcp_abandon+0x126>
 800e768:	f06f 010c 	mvn.w	r1, #12
 800e76c:	4648      	mov	r0, r9
 800e76e:	4643      	mov	r3, r8
}
 800e770:	b007      	add	sp, #28
 800e772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e776:	4718      	bx	r3
    int send_rst = 0;
 800e778:	461e      	mov	r6, r3
 800e77a:	e7bd      	b.n	800e6f8 <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e77c:	68ea      	ldr	r2, [r5, #12]
 800e77e:	60da      	str	r2, [r3, #12]
 800e780:	2700      	movs	r7, #0
    int send_rst = 0;
 800e782:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e784:	60ef      	str	r7, [r5, #12]
 800e786:	e7b7      	b.n	800e6f8 <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e788:	9701      	str	r7, [sp, #4]
 800e78a:	465a      	mov	r2, fp
 800e78c:	8b2b      	ldrh	r3, [r5, #24]
 800e78e:	4628      	mov	r0, r5
 800e790:	9905      	ldr	r1, [sp, #20]
 800e792:	9302      	str	r3, [sp, #8]
 800e794:	1d2b      	adds	r3, r5, #4
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	462b      	mov	r3, r5
 800e79a:	f002 ff07 	bl	80115ac <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e79e:	7d2b      	ldrb	r3, [r5, #20]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d1da      	bne.n	800e75a <tcp_abandon+0xc2>
 800e7a4:	4921      	ldr	r1, [pc, #132]	; (800e82c <tcp_abandon+0x194>)
 800e7a6:	22d4      	movs	r2, #212	; 0xd4
 800e7a8:	4b21      	ldr	r3, [pc, #132]	; (800e830 <tcp_abandon+0x198>)
 800e7aa:	4822      	ldr	r0, [pc, #136]	; (800e834 <tcp_abandon+0x19c>)
 800e7ac:	f006 fa5c 	bl	8014c68 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	2001      	movs	r0, #1
 800e7b4:	f7fe fa0a 	bl	800cbcc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e7b8:	f1b8 0f00 	cmp.w	r8, #0
 800e7bc:	d1d4      	bne.n	800e768 <tcp_abandon+0xd0>
}
 800e7be:	b007      	add	sp, #28
 800e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7c4:	68eb      	ldr	r3, [r5, #12]
 800e7c6:	6013      	str	r3, [r2, #0]
 800e7c8:	e7da      	b.n	800e780 <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e7ca:	4b19      	ldr	r3, [pc, #100]	; (800e830 <tcp_abandon+0x198>)
 800e7cc:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e7d0:	4919      	ldr	r1, [pc, #100]	; (800e838 <tcp_abandon+0x1a0>)
 800e7d2:	4818      	ldr	r0, [pc, #96]	; (800e834 <tcp_abandon+0x19c>)
 800e7d4:	f006 fa48 	bl	8014c68 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800e7d8:	7d2b      	ldrb	r3, [r5, #20]
 800e7da:	2b0a      	cmp	r3, #10
 800e7dc:	f47f af6d 	bne.w	800e6ba <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4816      	ldr	r0, [pc, #88]	; (800e83c <tcp_abandon+0x1a4>)
 800e7e4:	f7ff fee8 	bl	800e5b8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e7e8:	7d2b      	ldrb	r3, [r5, #20]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d010      	beq.n	800e810 <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	2001      	movs	r0, #1
}
 800e7f2:	b007      	add	sp, #28
 800e7f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800e7f8:	f7fe b9e8 	b.w	800cbcc <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e7fc:	4b0c      	ldr	r3, [pc, #48]	; (800e830 <tcp_abandon+0x198>)
 800e7fe:	f240 223d 	movw	r2, #573	; 0x23d
 800e802:	490f      	ldr	r1, [pc, #60]	; (800e840 <tcp_abandon+0x1a8>)
 800e804:	480b      	ldr	r0, [pc, #44]	; (800e834 <tcp_abandon+0x19c>)
}
 800e806:	b007      	add	sp, #28
 800e808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e80c:	f006 ba2c 	b.w	8014c68 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e810:	4b07      	ldr	r3, [pc, #28]	; (800e830 <tcp_abandon+0x198>)
 800e812:	22d4      	movs	r2, #212	; 0xd4
 800e814:	4905      	ldr	r1, [pc, #20]	; (800e82c <tcp_abandon+0x194>)
 800e816:	4807      	ldr	r0, [pc, #28]	; (800e834 <tcp_abandon+0x19c>)
 800e818:	f006 fa26 	bl	8014c68 <iprintf>
 800e81c:	e7e7      	b.n	800e7ee <tcp_abandon+0x156>
 800e81e:	bf00      	nop
 800e820:	24037a98 	.word	0x24037a98
 800e824:	24037a90 	.word	0x24037a90
 800e828:	24037a94 	.word	0x24037a94
 800e82c:	08019008 	.word	0x08019008
 800e830:	08018fcc 	.word	0x08018fcc
 800e834:	08017728 	.word	0x08017728
 800e838:	08019504 	.word	0x08019504
 800e83c:	24037aa8 	.word	0x24037aa8
 800e840:	080194e8 	.word	0x080194e8

0800e844 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800e844:	2101      	movs	r1, #1
 800e846:	f7ff bf27 	b.w	800e698 <tcp_abandon>
 800e84a:	bf00      	nop

0800e84c <tcp_accept_null>:
{
 800e84c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e84e:	460c      	mov	r4, r1
 800e850:	b131      	cbz	r1, 800e860 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800e852:	4620      	mov	r0, r4
 800e854:	2101      	movs	r1, #1
 800e856:	f7ff ff1f 	bl	800e698 <tcp_abandon>
}
 800e85a:	f06f 000c 	mvn.w	r0, #12
 800e85e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e860:	4b06      	ldr	r3, [pc, #24]	; (800e87c <tcp_accept_null+0x30>)
 800e862:	f240 320f 	movw	r2, #783	; 0x30f
 800e866:	4906      	ldr	r1, [pc, #24]	; (800e880 <tcp_accept_null+0x34>)
 800e868:	4806      	ldr	r0, [pc, #24]	; (800e884 <tcp_accept_null+0x38>)
 800e86a:	f006 f9fd 	bl	8014c68 <iprintf>
  tcp_abandon(pcb, 1);
 800e86e:	4620      	mov	r0, r4
 800e870:	2101      	movs	r1, #1
 800e872:	f7ff ff11 	bl	800e698 <tcp_abandon>
}
 800e876:	f06f 000c 	mvn.w	r0, #12
 800e87a:	bd10      	pop	{r4, pc}
 800e87c:	08018fcc 	.word	0x08018fcc
 800e880:	08019538 	.word	0x08019538
 800e884:	08017728 	.word	0x08017728

0800e888 <tcp_netif_ip_addr_changed_pcblist>:
{
 800e888:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e88a:	4605      	mov	r5, r0
{
 800e88c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e88e:	b178      	cbz	r0, 800e8b0 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 800e890:	b134      	cbz	r4, 800e8a0 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e892:	6822      	ldr	r2, [r4, #0]
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	429a      	cmp	r2, r3
 800e898:	d003      	beq.n	800e8a2 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 800e89a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800e89c:	2c00      	cmp	r4, #0
 800e89e:	d1f8      	bne.n	800e892 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800e8a0:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 800e8a2:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	2101      	movs	r1, #1
      pcb = next;
 800e8a8:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 800e8aa:	f7ff fef5 	bl	800e698 <tcp_abandon>
      pcb = next;
 800e8ae:	e7ef      	b.n	800e890 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e8b0:	4b03      	ldr	r3, [pc, #12]	; (800e8c0 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800e8b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e8b6:	4903      	ldr	r1, [pc, #12]	; (800e8c4 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800e8b8:	4803      	ldr	r0, [pc, #12]	; (800e8c8 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800e8ba:	f006 f9d5 	bl	8014c68 <iprintf>
 800e8be:	e7e7      	b.n	800e890 <tcp_netif_ip_addr_changed_pcblist+0x8>
 800e8c0:	08018fcc 	.word	0x08018fcc
 800e8c4:	08019558 	.word	0x08019558
 800e8c8:	08017728 	.word	0x08017728

0800e8cc <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8cc:	4b0f      	ldr	r3, [pc, #60]	; (800e90c <tcp_kill_state+0x40>)
 800e8ce:	6819      	ldr	r1, [r3, #0]
 800e8d0:	b1d1      	cbz	r1, 800e908 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8d2:	4b0f      	ldr	r3, [pc, #60]	; (800e910 <tcp_kill_state+0x44>)
  inactivity = 0;
 800e8d4:	2200      	movs	r2, #0
{
 800e8d6:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8d8:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800e8da:	4614      	mov	r4, r2
 800e8dc:	e001      	b.n	800e8e2 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8de:	68c9      	ldr	r1, [r1, #12]
 800e8e0:	b159      	cbz	r1, 800e8fa <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 800e8e2:	7d0b      	ldrb	r3, [r1, #20]
 800e8e4:	4283      	cmp	r3, r0
 800e8e6:	d1fa      	bne.n	800e8de <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8e8:	6a0b      	ldr	r3, [r1, #32]
 800e8ea:	1aeb      	subs	r3, r5, r3
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d3f6      	bcc.n	800e8de <tcp_kill_state+0x12>
 800e8f0:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8f2:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8f4:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8f6:	2900      	cmp	r1, #0
 800e8f8:	d1f3      	bne.n	800e8e2 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 800e8fa:	b11c      	cbz	r4, 800e904 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 800e8fc:	4620      	mov	r0, r4
}
 800e8fe:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800e900:	f7ff beca 	b.w	800e698 <tcp_abandon>
}
 800e904:	bc30      	pop	{r4, r5}
 800e906:	4770      	bx	lr
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop
 800e90c:	24037a90 	.word	0x24037a90
 800e910:	24037aa0 	.word	0x24037aa0

0800e914 <tcp_alloc>:
{
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 800e918:	f7f9 fb36 	bl	8007f88 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e91c:	2001      	movs	r0, #1
 800e91e:	f7fe f90f 	bl	800cb40 <memp_malloc>
  if (pcb == NULL) {
 800e922:	4603      	mov	r3, r0
 800e924:	b320      	cbz	r0, 800e970 <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e926:	229c      	movs	r2, #156	; 0x9c
 800e928:	2100      	movs	r1, #0
 800e92a:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 800e92c:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e930:	f006 fa67 	bl	8014e02 <memset>
    pcb->last_timer = tcp_timer_ctr;
 800e934:	4943      	ldr	r1, [pc, #268]	; (800ea44 <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e936:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e938:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 800e93a:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800e93c:	4842      	ldr	r0, [pc, #264]	; (800ea48 <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e93e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 800e942:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e944:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 800e946:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e948:	4a40      	ldr	r2, [pc, #256]	; (800ea4c <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 800e94a:	4941      	ldr	r1, [pc, #260]	; (800ea50 <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 800e94c:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 800e950:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 800e952:	4c40      	ldr	r4, [pc, #256]	; (800ea54 <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 800e954:	4840      	ldr	r0, [pc, #256]	; (800ea58 <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 800e956:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e95a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 800e95e:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e960:	493e      	ldr	r1, [pc, #248]	; (800ea5c <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 800e962:	6498      	str	r0, [r3, #72]	; 0x48
}
 800e964:	4618      	mov	r0, r3
    pcb->prio = prio;
 800e966:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 800e968:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e96a:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e96c:	72da      	strb	r2, [r3, #11]
}
 800e96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e970:	4e3b      	ldr	r6, [pc, #236]	; (800ea60 <tcp_alloc+0x14c>)
 800e972:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 800e974:	b15c      	cbz	r4, 800e98e <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 800e976:	4620      	mov	r0, r4
 800e978:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800e97a:	8b43      	ldrh	r3, [r0, #26]
 800e97c:	0719      	lsls	r1, r3, #28
 800e97e:	d5f9      	bpl.n	800e974 <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e980:	f023 0308 	bic.w	r3, r3, #8
 800e984:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800e986:	f7fe ffc3 	bl	800d910 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800e98a:	2c00      	cmp	r4, #0
 800e98c:	d1f3      	bne.n	800e976 <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e98e:	4b35      	ldr	r3, [pc, #212]	; (800ea64 <tcp_alloc+0x150>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	b193      	cbz	r3, 800e9ba <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e994:	4a2c      	ldr	r2, [pc, #176]	; (800ea48 <tcp_alloc+0x134>)
 800e996:	4618      	mov	r0, r3
 800e998:	6a19      	ldr	r1, [r3, #32]
 800e99a:	6814      	ldr	r4, [r2, #0]
 800e99c:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	b143      	cbz	r3, 800e9b4 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e9a2:	6a1a      	ldr	r2, [r3, #32]
 800e9a4:	1aa2      	subs	r2, r4, r2
 800e9a6:	428a      	cmp	r2, r1
 800e9a8:	d3f9      	bcc.n	800e99e <tcp_alloc+0x8a>
 800e9aa:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9ac:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e9ae:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1f6      	bne.n	800e9a2 <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 800e9b4:	2101      	movs	r1, #1
 800e9b6:	f7ff fe6f 	bl	800e698 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	f7fe f8c0 	bl	800cb40 <memp_malloc>
    if (pcb == NULL) {
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d1af      	bne.n	800e926 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800e9c6:	2009      	movs	r0, #9
 800e9c8:	f7ff ff80 	bl	800e8cc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9cc:	2001      	movs	r0, #1
 800e9ce:	f7fe f8b7 	bl	800cb40 <memp_malloc>
      if (pcb == NULL) {
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	d1a6      	bne.n	800e926 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800e9d8:	2008      	movs	r0, #8
 800e9da:	f7ff ff77 	bl	800e8cc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9de:	2001      	movs	r0, #1
 800e9e0:	f7fe f8ae 	bl	800cb40 <memp_malloc>
        if (pcb == NULL) {
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d19d      	bne.n	800e926 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e9ea:	062a      	lsls	r2, r5, #24
 800e9ec:	d427      	bmi.n	800ea3e <tcp_alloc+0x12a>
  if (mprio == 0) {
 800e9ee:	b1ed      	cbz	r5, 800ea2c <tcp_alloc+0x118>
 800e9f0:	462a      	mov	r2, r5
  mprio--;
 800e9f2:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9f4:	6832      	ldr	r2, [r6, #0]
  mprio--;
 800e9f6:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9f8:	b1c2      	cbz	r2, 800ea2c <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e9fa:	4813      	ldr	r0, [pc, #76]	; (800ea48 <tcp_alloc+0x134>)
  inactivity = 0;
 800e9fc:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e9fe:	6807      	ldr	r7, [r0, #0]
 800ea00:	e005      	b.n	800ea0e <tcp_alloc+0xfa>
 800ea02:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800ea04:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 800ea06:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 800ea08:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea0a:	68d2      	ldr	r2, [r2, #12]
 800ea0c:	b14a      	cbz	r2, 800ea22 <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 800ea0e:	7d50      	ldrb	r0, [r2, #21]
 800ea10:	4288      	cmp	r0, r1
 800ea12:	d3f6      	bcc.n	800ea02 <tcp_alloc+0xee>
 800ea14:	d1f9      	bne.n	800ea0a <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ea16:	6a14      	ldr	r4, [r2, #32]
 800ea18:	eba7 0e04 	sub.w	lr, r7, r4
 800ea1c:	45b6      	cmp	lr, r6
 800ea1e:	d3f4      	bcc.n	800ea0a <tcp_alloc+0xf6>
 800ea20:	e7f0      	b.n	800ea04 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 800ea22:	b11b      	cbz	r3, 800ea2c <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 800ea24:	2101      	movs	r1, #1
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7ff fe36 	bl	800e698 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea2c:	2001      	movs	r0, #1
 800ea2e:	f7fe f887 	bl	800cb40 <memp_malloc>
  if (pcb != NULL) {
 800ea32:	4603      	mov	r3, r0
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f47f af76 	bne.w	800e926 <tcp_alloc+0x12>
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ea3e:	227f      	movs	r2, #127	; 0x7f
 800ea40:	e7d7      	b.n	800e9f2 <tcp_alloc+0xde>
 800ea42:	bf00      	nop
 800ea44:	24037aa5 	.word	0x24037aa5
 800ea48:	24037aa0 	.word	0x24037aa0
 800ea4c:	006ddd00 	.word	0x006ddd00
 800ea50:	0800ecd5 	.word	0x0800ecd5
 800ea54:	0218ffff 	.word	0x0218ffff
 800ea58:	16d00001 	.word	0x16d00001
 800ea5c:	16d016d0 	.word	0x16d016d0
 800ea60:	24037a90 	.word	0x24037a90
 800ea64:	24037aa8 	.word	0x24037aa8

0800ea68 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ea68:	2040      	movs	r0, #64	; 0x40
 800ea6a:	f7ff bf53 	b.w	800e914 <tcp_alloc>
 800ea6e:	bf00      	nop

0800ea70 <tcp_close_shutdown>:
{
 800ea70:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ea72:	4604      	mov	r4, r0
{
 800ea74:	b085      	sub	sp, #20
 800ea76:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d06b      	beq.n	800eb54 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ea7c:	7d23      	ldrb	r3, [r4, #20]
 800ea7e:	b11d      	cbz	r5, 800ea88 <tcp_close_shutdown+0x18>
 800ea80:	2b04      	cmp	r3, #4
 800ea82:	d00c      	beq.n	800ea9e <tcp_close_shutdown+0x2e>
 800ea84:	2b07      	cmp	r3, #7
 800ea86:	d00a      	beq.n	800ea9e <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d06b      	beq.n	800eb64 <tcp_close_shutdown+0xf4>
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d030      	beq.n	800eaf2 <tcp_close_shutdown+0x82>
 800ea90:	b333      	cbz	r3, 800eae0 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 800ea92:	4620      	mov	r0, r4
}
 800ea94:	b005      	add	sp, #20
 800ea96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800ea9a:	f7fe bf39 	b.w	800d910 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ea9e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800eaa0:	2a00      	cmp	r2, #0
 800eaa2:	d037      	beq.n	800eb14 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800eaa4:	8b63      	ldrh	r3, [r4, #26]
 800eaa6:	06db      	lsls	r3, r3, #27
 800eaa8:	f140 8085 	bpl.w	800ebb6 <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eaac:	8b21      	ldrh	r1, [r4, #24]
 800eaae:	1d20      	adds	r0, r4, #4
 800eab0:	8ae2      	ldrh	r2, [r4, #22]
 800eab2:	4623      	mov	r3, r4
 800eab4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800eab8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eaba:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800eabc:	9000      	str	r0, [sp, #0]
 800eabe:	4620      	mov	r0, r4
 800eac0:	f002 fd74 	bl	80115ac <tcp_rst>
      tcp_pcb_purge(pcb);
 800eac4:	4620      	mov	r0, r4
 800eac6:	f7ff fa7b 	bl	800dfc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eaca:	4a45      	ldr	r2, [pc, #276]	; (800ebe0 <tcp_close_shutdown+0x170>)
 800eacc:	6813      	ldr	r3, [r2, #0]
 800eace:	42a3      	cmp	r3, r4
 800ead0:	d031      	beq.n	800eb36 <tcp_close_shutdown+0xc6>
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d031      	beq.n	800eb3a <tcp_close_shutdown+0xca>
 800ead6:	68da      	ldr	r2, [r3, #12]
 800ead8:	42a2      	cmp	r2, r4
 800eada:	d069      	beq.n	800ebb0 <tcp_close_shutdown+0x140>
 800eadc:	4613      	mov	r3, r2
 800eade:	e7f8      	b.n	800ead2 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 800eae0:	8ae3      	ldrh	r3, [r4, #22]
 800eae2:	b9eb      	cbnz	r3, 800eb20 <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 800eae4:	4621      	mov	r1, r4
 800eae6:	2001      	movs	r0, #1
 800eae8:	f7fe f870 	bl	800cbcc <memp_free>
}
 800eaec:	2000      	movs	r0, #0
 800eaee:	b005      	add	sp, #20
 800eaf0:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	483a      	ldr	r0, [pc, #232]	; (800ebe0 <tcp_close_shutdown+0x170>)
 800eaf6:	f7ff fd5f 	bl	800e5b8 <tcp_pcb_remove>
 800eafa:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eafc:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eafe:	4a39      	ldr	r2, [pc, #228]	; (800ebe4 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb00:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eb02:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb04:	d1ee      	bne.n	800eae4 <tcp_close_shutdown+0x74>
 800eb06:	4b38      	ldr	r3, [pc, #224]	; (800ebe8 <tcp_close_shutdown+0x178>)
 800eb08:	22d4      	movs	r2, #212	; 0xd4
 800eb0a:	4938      	ldr	r1, [pc, #224]	; (800ebec <tcp_close_shutdown+0x17c>)
 800eb0c:	4838      	ldr	r0, [pc, #224]	; (800ebf0 <tcp_close_shutdown+0x180>)
 800eb0e:	f006 f8ab 	bl	8014c68 <iprintf>
 800eb12:	e7e7      	b.n	800eae4 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eb14:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800eb16:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800eb1a:	4291      	cmp	r1, r2
 800eb1c:	d0b4      	beq.n	800ea88 <tcp_close_shutdown+0x18>
 800eb1e:	e7c1      	b.n	800eaa4 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb20:	4a34      	ldr	r2, [pc, #208]	; (800ebf4 <tcp_close_shutdown+0x184>)
 800eb22:	6813      	ldr	r3, [r2, #0]
 800eb24:	42a3      	cmp	r3, r4
 800eb26:	d051      	beq.n	800ebcc <tcp_close_shutdown+0x15c>
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d03e      	beq.n	800ebaa <tcp_close_shutdown+0x13a>
 800eb2c:	68da      	ldr	r2, [r3, #12]
 800eb2e:	42a2      	cmp	r2, r4
 800eb30:	d039      	beq.n	800eba6 <tcp_close_shutdown+0x136>
 800eb32:	4613      	mov	r3, r2
 800eb34:	e7f8      	b.n	800eb28 <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 800eb36:	68e3      	ldr	r3, [r4, #12]
 800eb38:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800eb3a:	4b2f      	ldr	r3, [pc, #188]	; (800ebf8 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	4a29      	ldr	r2, [pc, #164]	; (800ebe4 <tcp_close_shutdown+0x174>)
 800eb40:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800eb42:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800eb44:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800eb46:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800eb48:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800eb4a:	d03c      	beq.n	800ebc6 <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb4c:	7d23      	ldrb	r3, [r4, #20]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d1c8      	bne.n	800eae4 <tcp_close_shutdown+0x74>
 800eb52:	e7d8      	b.n	800eb06 <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eb54:	4b24      	ldr	r3, [pc, #144]	; (800ebe8 <tcp_close_shutdown+0x178>)
 800eb56:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800eb5a:	4928      	ldr	r1, [pc, #160]	; (800ebfc <tcp_close_shutdown+0x18c>)
 800eb5c:	4824      	ldr	r0, [pc, #144]	; (800ebf0 <tcp_close_shutdown+0x180>)
 800eb5e:	f006 f883 	bl	8014c68 <iprintf>
 800eb62:	e78b      	b.n	800ea7c <tcp_close_shutdown+0xc>
 800eb64:	4926      	ldr	r1, [pc, #152]	; (800ec00 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 800eb66:	2000      	movs	r0, #0
  switch (pcb->state) {
 800eb68:	4b22      	ldr	r3, [pc, #136]	; (800ebf4 <tcp_close_shutdown+0x184>)
 800eb6a:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eb6e:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eb70:	b133      	cbz	r3, 800eb80 <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 800eb72:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800eb74:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800eb76:	bf08      	it	eq
 800eb78:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1f8      	bne.n	800eb72 <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb80:	42a9      	cmp	r1, r5
 800eb82:	d002      	beq.n	800eb8a <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eb84:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800eb88:	e7f1      	b.n	800eb6e <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800eb8a:	4621      	mov	r1, r4
 800eb8c:	481d      	ldr	r0, [pc, #116]	; (800ec04 <tcp_close_shutdown+0x194>)
 800eb8e:	f7ff fd13 	bl	800e5b8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eb92:	7d23      	ldrb	r3, [r4, #20]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d01c      	beq.n	800ebd2 <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eb98:	4621      	mov	r1, r4
 800eb9a:	2002      	movs	r0, #2
 800eb9c:	f7fe f816 	bl	800cbcc <memp_free>
}
 800eba0:	2000      	movs	r0, #0
 800eba2:	b005      	add	sp, #20
 800eba4:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eba6:	68e2      	ldr	r2, [r4, #12]
 800eba8:	60da      	str	r2, [r3, #12]
 800ebaa:	2300      	movs	r3, #0
 800ebac:	60e3      	str	r3, [r4, #12]
 800ebae:	e799      	b.n	800eae4 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 800ebb0:	68e2      	ldr	r2, [r4, #12]
 800ebb2:	60da      	str	r2, [r3, #12]
 800ebb4:	e7c1      	b.n	800eb3a <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ebb6:	4b0c      	ldr	r3, [pc, #48]	; (800ebe8 <tcp_close_shutdown+0x178>)
 800ebb8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ebbc:	4912      	ldr	r1, [pc, #72]	; (800ec08 <tcp_close_shutdown+0x198>)
 800ebbe:	480c      	ldr	r0, [pc, #48]	; (800ebf0 <tcp_close_shutdown+0x180>)
 800ebc0:	f006 f852 	bl	8014c68 <iprintf>
 800ebc4:	e772      	b.n	800eaac <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 800ebc6:	f001 fdcb 	bl	8010760 <tcp_trigger_input_pcb_close>
 800ebca:	e78f      	b.n	800eaec <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ebcc:	68e3      	ldr	r3, [r4, #12]
 800ebce:	6013      	str	r3, [r2, #0]
 800ebd0:	e7eb      	b.n	800ebaa <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ebd2:	4b05      	ldr	r3, [pc, #20]	; (800ebe8 <tcp_close_shutdown+0x178>)
 800ebd4:	22df      	movs	r2, #223	; 0xdf
 800ebd6:	490d      	ldr	r1, [pc, #52]	; (800ec0c <tcp_close_shutdown+0x19c>)
 800ebd8:	4805      	ldr	r0, [pc, #20]	; (800ebf0 <tcp_close_shutdown+0x180>)
 800ebda:	f006 f845 	bl	8014c68 <iprintf>
 800ebde:	e7db      	b.n	800eb98 <tcp_close_shutdown+0x128>
 800ebe0:	24037a90 	.word	0x24037a90
 800ebe4:	24037a94 	.word	0x24037a94
 800ebe8:	08018fcc 	.word	0x08018fcc
 800ebec:	08019008 	.word	0x08019008
 800ebf0:	08017728 	.word	0x08017728
 800ebf4:	24037a98 	.word	0x24037a98
 800ebf8:	24037ad4 	.word	0x24037ad4
 800ebfc:	0801958c 	.word	0x0801958c
 800ec00:	080196b4 	.word	0x080196b4
 800ec04:	24037a9c 	.word	0x24037a9c
 800ec08:	080195ac 	.word	0x080195ac
 800ec0c:	080195c8 	.word	0x080195c8

0800ec10 <tcp_close>:
{
 800ec10:	b510      	push	{r4, lr}
 800ec12:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800ec14:	f7f9 f9b8 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec18:	b164      	cbz	r4, 800ec34 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800ec1a:	7d23      	ldrb	r3, [r4, #20]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d003      	beq.n	800ec28 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ec20:	8b63      	ldrh	r3, [r4, #26]
 800ec22:	f043 0310 	orr.w	r3, r3, #16
 800ec26:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800ec28:	4620      	mov	r0, r4
 800ec2a:	2101      	movs	r1, #1
}
 800ec2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800ec30:	f7ff bf1e 	b.w	800ea70 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec34:	4b04      	ldr	r3, [pc, #16]	; (800ec48 <tcp_close+0x38>)
 800ec36:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ec3a:	4904      	ldr	r1, [pc, #16]	; (800ec4c <tcp_close+0x3c>)
 800ec3c:	4804      	ldr	r0, [pc, #16]	; (800ec50 <tcp_close+0x40>)
 800ec3e:	f006 f813 	bl	8014c68 <iprintf>
}
 800ec42:	f06f 000f 	mvn.w	r0, #15
 800ec46:	bd10      	pop	{r4, pc}
 800ec48:	08018fcc 	.word	0x08018fcc
 800ec4c:	080195e4 	.word	0x080195e4
 800ec50:	08017728 	.word	0x08017728

0800ec54 <tcp_shutdown>:
{
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	460e      	mov	r6, r1
 800ec5a:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ec5c:	f7f9 f994 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec60:	b33c      	cbz	r4, 800ecb2 <tcp_shutdown+0x5e>
  if (pcb->state == LISTEN) {
 800ec62:	7d23      	ldrb	r3, [r4, #20]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d005      	beq.n	800ec74 <tcp_shutdown+0x20>
  if (shut_rx) {
 800ec68:	b93e      	cbnz	r6, 800ec7a <tcp_shutdown+0x26>
  if (shut_tx) {
 800ec6a:	b1d5      	cbz	r5, 800eca2 <tcp_shutdown+0x4e>
    switch (pcb->state) {
 800ec6c:	2b04      	cmp	r3, #4
 800ec6e:	d810      	bhi.n	800ec92 <tcp_shutdown+0x3e>
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d810      	bhi.n	800ec96 <tcp_shutdown+0x42>
 800ec74:	f06f 000a 	mvn.w	r0, #10
}
 800ec78:	bd70      	pop	{r4, r5, r6, pc}
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ec7a:	8b63      	ldrh	r3, [r4, #26]
 800ec7c:	f043 0310 	orr.w	r3, r3, #16
 800ec80:	8363      	strh	r3, [r4, #26]
    if (shut_tx) {
 800ec82:	b985      	cbnz	r5, 800eca6 <tcp_shutdown+0x52>
    if (pcb->refused_data != NULL) {
 800ec84:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ec86:	b160      	cbz	r0, 800eca2 <tcp_shutdown+0x4e>
      pbuf_free(pcb->refused_data);
 800ec88:	f7fe fb66 	bl	800d358 <pbuf_free>
  return ERR_OK;
 800ec8c:	4628      	mov	r0, r5
      pcb->refused_data = NULL;
 800ec8e:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800ec90:	bd70      	pop	{r4, r5, r6, pc}
    switch (pcb->state) {
 800ec92:	2b07      	cmp	r3, #7
 800ec94:	d1ee      	bne.n	800ec74 <tcp_shutdown+0x20>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ec96:	4620      	mov	r0, r4
 800ec98:	2100      	movs	r1, #0
}
 800ec9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ec9e:	f7ff bee7 	b.w	800ea70 <tcp_close_shutdown>
  return ERR_OK;
 800eca2:	2000      	movs	r0, #0
}
 800eca4:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 800eca6:	4620      	mov	r0, r4
 800eca8:	2101      	movs	r1, #1
}
 800ecaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return tcp_close_shutdown(pcb, 1);
 800ecae:	f7ff bedf 	b.w	800ea70 <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecb2:	4b05      	ldr	r3, [pc, #20]	; (800ecc8 <tcp_shutdown+0x74>)
 800ecb4:	f240 2207 	movw	r2, #519	; 0x207
 800ecb8:	4904      	ldr	r1, [pc, #16]	; (800eccc <tcp_shutdown+0x78>)
 800ecba:	4805      	ldr	r0, [pc, #20]	; (800ecd0 <tcp_shutdown+0x7c>)
 800ecbc:	f005 ffd4 	bl	8014c68 <iprintf>
 800ecc0:	f06f 000f 	mvn.w	r0, #15
}
 800ecc4:	bd70      	pop	{r4, r5, r6, pc}
 800ecc6:	bf00      	nop
 800ecc8:	08018fcc 	.word	0x08018fcc
 800eccc:	080195fc 	.word	0x080195fc
 800ecd0:	08017728 	.word	0x08017728

0800ecd4 <tcp_recv_null>:
{
 800ecd4:	b510      	push	{r4, lr}
 800ecd6:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecd8:	b301      	cbz	r1, 800ed1c <tcp_recv_null+0x48>
  if (p != NULL) {
 800ecda:	4614      	mov	r4, r2
 800ecdc:	4608      	mov	r0, r1
 800ecde:	b142      	cbz	r2, 800ecf2 <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800ece0:	8911      	ldrh	r1, [r2, #8]
 800ece2:	f7fe ffa9 	bl	800dc38 <tcp_recved>
    pbuf_free(p);
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7fe fb36 	bl	800d358 <pbuf_free>
  return ERR_OK;
 800ecec:	2000      	movs	r0, #0
}
 800ecee:	b002      	add	sp, #8
 800ecf0:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800ecf2:	b113      	cbz	r3, 800ecfa <tcp_recv_null+0x26>
  return ERR_OK;
 800ecf4:	4610      	mov	r0, r2
}
 800ecf6:	b002      	add	sp, #8
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ecfc:	f7f9 f944 	bl	8007f88 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800ed00:	9801      	ldr	r0, [sp, #4]
 800ed02:	7d03      	ldrb	r3, [r0, #20]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d003      	beq.n	800ed10 <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ed08:	8b43      	ldrh	r3, [r0, #26]
 800ed0a:	f043 0310 	orr.w	r3, r3, #16
 800ed0e:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800ed10:	2101      	movs	r1, #1
}
 800ed12:	b002      	add	sp, #8
 800ed14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800ed18:	f7ff beaa 	b.w	800ea70 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed1c:	4b04      	ldr	r3, [pc, #16]	; (800ed30 <tcp_recv_null+0x5c>)
 800ed1e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed22:	4904      	ldr	r1, [pc, #16]	; (800ed34 <tcp_recv_null+0x60>)
 800ed24:	4804      	ldr	r0, [pc, #16]	; (800ed38 <tcp_recv_null+0x64>)
 800ed26:	f005 ff9f 	bl	8014c68 <iprintf>
 800ed2a:	f06f 000f 	mvn.w	r0, #15
 800ed2e:	e7de      	b.n	800ecee <tcp_recv_null+0x1a>
 800ed30:	08018fcc 	.word	0x08018fcc
 800ed34:	08019618 	.word	0x08019618
 800ed38:	08017728 	.word	0x08017728

0800ed3c <tcp_process_refused_data>:
{
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed3e:	b380      	cbz	r0, 800eda2 <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800ed40:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800ed42:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ed44:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800ed48:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ed4a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800ed4c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ed4e:	b156      	cbz	r6, 800ed66 <tcp_process_refused_data+0x2a>
 800ed50:	4601      	mov	r1, r0
 800ed52:	462a      	mov	r2, r5
 800ed54:	6900      	ldr	r0, [r0, #16]
 800ed56:	47b0      	blx	r6
    if (err == ERR_OK) {
 800ed58:	b158      	cbz	r0, 800ed72 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800ed5a:	300d      	adds	r0, #13
 800ed5c:	d01e      	beq.n	800ed9c <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800ed5e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800ed62:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800ed64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800ed66:	8929      	ldrh	r1, [r5, #8]
 800ed68:	f7fe ff66 	bl	800dc38 <tcp_recved>
    pbuf_free(p);
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	f7fe faf3 	bl	800d358 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ed72:	06bb      	lsls	r3, r7, #26
 800ed74:	d510      	bpl.n	800ed98 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed76:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ed78:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d001      	beq.n	800ed84 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800ed80:	3301      	adds	r3, #1
 800ed82:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800ed84:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800ed88:	b135      	cbz	r5, 800ed98 <tcp_process_refused_data+0x5c>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	6920      	ldr	r0, [r4, #16]
 800ed90:	461a      	mov	r2, r3
 800ed92:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800ed94:	300d      	adds	r0, #13
 800ed96:	d001      	beq.n	800ed9c <tcp_process_refused_data+0x60>
  return ERR_OK;
 800ed98:	2000      	movs	r0, #0
}
 800ed9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800ed9c:	f06f 000c 	mvn.w	r0, #12
}
 800eda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eda2:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <tcp_process_refused_data+0x7c>)
 800eda4:	f240 6209 	movw	r2, #1545	; 0x609
 800eda8:	4904      	ldr	r1, [pc, #16]	; (800edbc <tcp_process_refused_data+0x80>)
 800edaa:	4805      	ldr	r0, [pc, #20]	; (800edc0 <tcp_process_refused_data+0x84>)
 800edac:	f005 ff5c 	bl	8014c68 <iprintf>
 800edb0:	f06f 000f 	mvn.w	r0, #15
}
 800edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb6:	bf00      	nop
 800edb8:	08018fcc 	.word	0x08018fcc
 800edbc:	08019634 	.word	0x08019634
 800edc0:	08017728 	.word	0x08017728

0800edc4 <tcp_fasttmr>:
{
 800edc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800edc8:	4d1c      	ldr	r5, [pc, #112]	; (800ee3c <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800edca:	2700      	movs	r7, #0
 800edcc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800ee44 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800edd0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800edd2:	4e1b      	ldr	r6, [pc, #108]	; (800ee40 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800edd4:	3301      	adds	r3, #1
 800edd6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800edd8:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800eddc:	b1bc      	cbz	r4, 800ee0e <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 800edde:	782a      	ldrb	r2, [r5, #0]
 800ede0:	7fa3      	ldrb	r3, [r4, #30]
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d015      	beq.n	800ee12 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 800ede6:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800ede8:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800edea:	07d9      	lsls	r1, r3, #31
 800edec:	d41a      	bmi.n	800ee24 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 800edee:	071a      	lsls	r2, r3, #28
 800edf0:	d411      	bmi.n	800ee16 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 800edf2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800edf4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800edf8:	b133      	cbz	r3, 800ee08 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 800edfa:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800edfc:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800edfe:	f7ff ff9d 	bl	800ed3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee02:	7833      	ldrb	r3, [r6, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1e7      	bne.n	800edd8 <tcp_fasttmr+0x14>
      pcb = next;
 800ee08:	464c      	mov	r4, r9
  while (pcb != NULL) {
 800ee0a:	2c00      	cmp	r4, #0
 800ee0c:	d1e7      	bne.n	800edde <tcp_fasttmr+0x1a>
}
 800ee0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800ee12:	68e4      	ldr	r4, [r4, #12]
 800ee14:	e7e2      	b.n	800eddc <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee16:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800ee1a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ee1c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ee1e:	f7fe fd77 	bl	800d910 <tcp_close_shutdown_fin>
 800ee22:	e7e6      	b.n	800edf2 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800ee24:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ee28:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ee2a:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800ee2c:	f002 fc38 	bl	80116a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ee30:	8b63      	ldrh	r3, [r4, #26]
 800ee32:	f023 0303 	bic.w	r3, r3, #3
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	8363      	strh	r3, [r4, #26]
 800ee3a:	e7d8      	b.n	800edee <tcp_fasttmr+0x2a>
 800ee3c:	24037aa5 	.word	0x24037aa5
 800ee40:	24037a94 	.word	0x24037a94
 800ee44:	24037a90 	.word	0x24037a90

0800ee48 <tcp_tmr>:
{
 800ee48:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ee4a:	f7ff ffbb 	bl	800edc4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ee4e:	4a06      	ldr	r2, [pc, #24]	; (800ee68 <tcp_tmr+0x20>)
 800ee50:	7813      	ldrb	r3, [r2, #0]
 800ee52:	3301      	adds	r3, #1
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	7013      	strb	r3, [r2, #0]
 800ee58:	07db      	lsls	r3, r3, #31
 800ee5a:	d400      	bmi.n	800ee5e <tcp_tmr+0x16>
}
 800ee5c:	bd08      	pop	{r3, pc}
 800ee5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800ee62:	f7ff b8ff 	b.w	800e064 <tcp_slowtmr>
 800ee66:	bf00      	nop
 800ee68:	24037aa4 	.word	0x24037aa4

0800ee6c <tcp_next_iss>:
{
 800ee6c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee6e:	b130      	cbz	r0, 800ee7e <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800ee70:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <tcp_next_iss+0x24>)
 800ee72:	4a08      	ldr	r2, [pc, #32]	; (800ee94 <tcp_next_iss+0x28>)
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	6812      	ldr	r2, [r2, #0]
 800ee78:	4410      	add	r0, r2
 800ee7a:	6018      	str	r0, [r3, #0]
}
 800ee7c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee7e:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <tcp_next_iss+0x2c>)
 800ee80:	f640 02af 	movw	r2, #2223	; 0x8af
 800ee84:	4905      	ldr	r1, [pc, #20]	; (800ee9c <tcp_next_iss+0x30>)
 800ee86:	4806      	ldr	r0, [pc, #24]	; (800eea0 <tcp_next_iss+0x34>)
 800ee88:	f005 feee 	bl	8014c68 <iprintf>
 800ee8c:	e7f0      	b.n	800ee70 <tcp_next_iss+0x4>
 800ee8e:	bf00      	nop
 800ee90:	24000080 	.word	0x24000080
 800ee94:	24037aa0 	.word	0x24037aa0
 800ee98:	08018fcc 	.word	0x08018fcc
 800ee9c:	0801965c 	.word	0x0801965c
 800eea0:	08017728 	.word	0x08017728

0800eea4 <tcp_eff_send_mss_netif>:
{
 800eea4:	b538      	push	{r3, r4, r5, lr}
 800eea6:	4605      	mov	r5, r0
 800eea8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eeaa:	b172      	cbz	r2, 800eeca <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 800eeac:	b144      	cbz	r4, 800eec0 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 800eeae:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 800eeb0:	b133      	cbz	r3, 800eec0 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eeb2:	2b28      	cmp	r3, #40	; 0x28
 800eeb4:	d906      	bls.n	800eec4 <tcp_eff_send_mss_netif+0x20>
 800eeb6:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	429d      	cmp	r5, r3
 800eebc:	bf28      	it	cs
 800eebe:	461d      	movcs	r5, r3
}
 800eec0:	4628      	mov	r0, r5
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	2500      	movs	r5, #0
 800eec6:	4628      	mov	r0, r5
 800eec8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eeca:	4b04      	ldr	r3, [pc, #16]	; (800eedc <tcp_eff_send_mss_netif+0x38>)
 800eecc:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800eed0:	4903      	ldr	r1, [pc, #12]	; (800eee0 <tcp_eff_send_mss_netif+0x3c>)
 800eed2:	4804      	ldr	r0, [pc, #16]	; (800eee4 <tcp_eff_send_mss_netif+0x40>)
 800eed4:	f005 fec8 	bl	8014c68 <iprintf>
 800eed8:	e7e8      	b.n	800eeac <tcp_eff_send_mss_netif+0x8>
 800eeda:	bf00      	nop
 800eedc:	08018fcc 	.word	0x08018fcc
 800eee0:	08019678 	.word	0x08019678
 800eee4:	08017728 	.word	0x08017728

0800eee8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800eee8:	b308      	cbz	r0, 800ef2e <tcp_netif_ip_addr_changed+0x46>
{
 800eeea:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800eeec:	6803      	ldr	r3, [r0, #0]
 800eeee:	4604      	mov	r4, r0
 800eef0:	b903      	cbnz	r3, 800eef4 <tcp_netif_ip_addr_changed+0xc>
}
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eef4:	4b0e      	ldr	r3, [pc, #56]	; (800ef30 <tcp_netif_ip_addr_changed+0x48>)
 800eef6:	460d      	mov	r5, r1
 800eef8:	6819      	ldr	r1, [r3, #0]
 800eefa:	f7ff fcc5 	bl	800e888 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eefe:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <tcp_netif_ip_addr_changed+0x4c>)
 800ef00:	4620      	mov	r0, r4
 800ef02:	6819      	ldr	r1, [r3, #0]
 800ef04:	f7ff fcc0 	bl	800e888 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800ef08:	2d00      	cmp	r5, #0
 800ef0a:	d0f2      	beq.n	800eef2 <tcp_netif_ip_addr_changed+0xa>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0ef      	beq.n	800eef2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef12:	4b09      	ldr	r3, [pc, #36]	; (800ef38 <tcp_netif_ip_addr_changed+0x50>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d0eb      	beq.n	800eef2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ef1a:	6819      	ldr	r1, [r3, #0]
 800ef1c:	6822      	ldr	r2, [r4, #0]
 800ef1e:	4291      	cmp	r1, r2
 800ef20:	d101      	bne.n	800ef26 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ef22:	682a      	ldr	r2, [r5, #0]
 800ef24:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1f6      	bne.n	800ef1a <tcp_netif_ip_addr_changed+0x32>
}
 800ef2c:	bd38      	pop	{r3, r4, r5, pc}
 800ef2e:	4770      	bx	lr
 800ef30:	24037a90 	.word	0x24037a90
 800ef34:	24037a98 	.word	0x24037a98
 800ef38:	24037a9c 	.word	0x24037a9c

0800ef3c <tcp_free_ooseq>:
{
 800ef3c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800ef3e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800ef40:	b16c      	cbz	r4, 800ef5e <tcp_free_ooseq+0x22>
 800ef42:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800ef44:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800ef46:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ef48:	6868      	ldr	r0, [r5, #4]
 800ef4a:	b108      	cbz	r0, 800ef50 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800ef4c:	f7fe fa04 	bl	800d358 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ef50:	4629      	mov	r1, r5
 800ef52:	2003      	movs	r0, #3
 800ef54:	f7fd fe3a 	bl	800cbcc <memp_free>
  while (seg != NULL) {
 800ef58:	2c00      	cmp	r4, #0
 800ef5a:	d1f3      	bne.n	800ef44 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800ef5c:	6774      	str	r4, [r6, #116]	; 0x74
}
 800ef5e:	bd70      	pop	{r4, r5, r6, pc}

0800ef60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ef62:	4605      	mov	r5, r0
{
 800ef64:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d03e      	beq.n	800efe8 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ef6a:	68eb      	ldr	r3, [r5, #12]
 800ef6c:	8998      	ldrh	r0, [r3, #12]
 800ef6e:	f7fd fa51 	bl	800c414 <lwip_htons>
 800ef72:	07c2      	lsls	r2, r0, #31
 800ef74:	d432      	bmi.n	800efdc <tcp_oos_insert_segment+0x7c>
 800ef76:	4e20      	ldr	r6, [pc, #128]	; (800eff8 <tcp_oos_insert_segment+0x98>)
 800ef78:	e005      	b.n	800ef86 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800ef7a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f7fe ff61 	bl	800de44 <tcp_seg_free>
    while (next &&
 800ef82:	463c      	mov	r4, r7
 800ef84:	b1ef      	cbz	r7, 800efc2 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ef86:	68e1      	ldr	r1, [r4, #12]
 800ef88:	8923      	ldrh	r3, [r4, #8]
 800ef8a:	6837      	ldr	r7, [r6, #0]
 800ef8c:	892a      	ldrh	r2, [r5, #8]
 800ef8e:	6848      	ldr	r0, [r1, #4]
 800ef90:	443a      	add	r2, r7
 800ef92:	4403      	add	r3, r0
 800ef94:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	db15      	blt.n	800efc6 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ef9a:	8988      	ldrh	r0, [r1, #12]
 800ef9c:	f7fd fa3a 	bl	800c414 <lwip_htons>
 800efa0:	07c3      	lsls	r3, r0, #31
 800efa2:	d5ea      	bpl.n	800ef7a <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800efa4:	68eb      	ldr	r3, [r5, #12]
 800efa6:	2001      	movs	r0, #1
 800efa8:	899f      	ldrh	r7, [r3, #12]
 800efaa:	f7fd fa33 	bl	800c414 <lwip_htons>
 800efae:	68eb      	ldr	r3, [r5, #12]
 800efb0:	4338      	orrs	r0, r7
      next = next->next;
 800efb2:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800efb4:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800efb6:	4620      	mov	r0, r4
 800efb8:	f7fe ff44 	bl	800de44 <tcp_seg_free>
    while (next &&
 800efbc:	463c      	mov	r4, r7
 800efbe:	2f00      	cmp	r7, #0
 800efc0:	d1e1      	bne.n	800ef86 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 800efc2:	602c      	str	r4, [r5, #0]
}
 800efc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800efc6:	1a12      	subs	r2, r2, r0
    if (next &&
 800efc8:	2a00      	cmp	r2, #0
 800efca:	ddfa      	ble.n	800efc2 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800efcc:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800efce:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800efd0:	b289      	uxth	r1, r1
 800efd2:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800efd4:	f7fe fade 	bl	800d594 <pbuf_realloc>
  cseg->next = next;
 800efd8:	602c      	str	r4, [r5, #0]
}
 800efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800efdc:	4620      	mov	r0, r4
    next = NULL;
 800efde:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800efe0:	f7fe ff1e 	bl	800de20 <tcp_segs_free>
  cseg->next = next;
 800efe4:	602c      	str	r4, [r5, #0]
}
 800efe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800efe8:	4b04      	ldr	r3, [pc, #16]	; (800effc <tcp_oos_insert_segment+0x9c>)
 800efea:	f240 421f 	movw	r2, #1055	; 0x41f
 800efee:	4904      	ldr	r1, [pc, #16]	; (800f000 <tcp_oos_insert_segment+0xa0>)
 800eff0:	4804      	ldr	r0, [pc, #16]	; (800f004 <tcp_oos_insert_segment+0xa4>)
 800eff2:	f005 fe39 	bl	8014c68 <iprintf>
 800eff6:	e7b8      	b.n	800ef6a <tcp_oos_insert_segment+0xa>
 800eff8:	24037ad0 	.word	0x24037ad0
 800effc:	080196c8 	.word	0x080196c8
 800f000:	080196fc 	.word	0x080196fc
 800f004:	08017728 	.word	0x08017728

0800f008 <tcp_input_delayed_close>:
{
 800f008:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f00a:	4604      	mov	r4, r0
 800f00c:	b1c8      	cbz	r0, 800f042 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800f00e:	4b11      	ldr	r3, [pc, #68]	; (800f054 <tcp_input_delayed_close+0x4c>)
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	f013 0310 	ands.w	r3, r3, #16
 800f016:	d101      	bne.n	800f01c <tcp_input_delayed_close+0x14>
  return 0;
 800f018:	4618      	mov	r0, r3
}
 800f01a:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f01c:	8b63      	ldrh	r3, [r4, #26]
 800f01e:	06db      	lsls	r3, r3, #27
 800f020:	d406      	bmi.n	800f030 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f022:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f026:	b11b      	cbz	r3, 800f030 <tcp_input_delayed_close+0x28>
 800f028:	f06f 010e 	mvn.w	r1, #14
 800f02c:	6920      	ldr	r0, [r4, #16]
 800f02e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f030:	4621      	mov	r1, r4
 800f032:	4809      	ldr	r0, [pc, #36]	; (800f058 <tcp_input_delayed_close+0x50>)
 800f034:	f7ff fac0 	bl	800e5b8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f038:	4620      	mov	r0, r4
 800f03a:	f7fe fca9 	bl	800d990 <tcp_free>
 800f03e:	2001      	movs	r0, #1
}
 800f040:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f042:	4b06      	ldr	r3, [pc, #24]	; (800f05c <tcp_input_delayed_close+0x54>)
 800f044:	f240 225a 	movw	r2, #602	; 0x25a
 800f048:	4905      	ldr	r1, [pc, #20]	; (800f060 <tcp_input_delayed_close+0x58>)
 800f04a:	4806      	ldr	r0, [pc, #24]	; (800f064 <tcp_input_delayed_close+0x5c>)
 800f04c:	f005 fe0c 	bl	8014c68 <iprintf>
 800f050:	e7dd      	b.n	800f00e <tcp_input_delayed_close+0x6>
 800f052:	bf00      	nop
 800f054:	24037acc 	.word	0x24037acc
 800f058:	24037a90 	.word	0x24037a90
 800f05c:	080196c8 	.word	0x080196c8
 800f060:	08019724 	.word	0x08019724
 800f064:	08017728 	.word	0x08017728

0800f068 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	b083      	sub	sp, #12
 800f06e:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f070:	2900      	cmp	r1, #0
 800f072:	d03d      	beq.n	800f0f0 <tcp_free_acked_segments.constprop.0+0x88>
 800f074:	4607      	mov	r7, r0
 800f076:	460c      	mov	r4, r1
 800f078:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800f13c <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f07c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800f130 <tcp_free_acked_segments.constprop.0+0xc8>
 800f080:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f140 <tcp_free_acked_segments.constprop.0+0xd8>
 800f084:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800f138 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f088:	68e3      	ldr	r3, [r4, #12]
 800f08a:	6858      	ldr	r0, [r3, #4]
 800f08c:	f7fd f9c6 	bl	800c41c <lwip_htonl>
 800f090:	68e3      	ldr	r3, [r4, #12]
 800f092:	4605      	mov	r5, r0
 800f094:	8926      	ldrh	r6, [r4, #8]
 800f096:	8998      	ldrh	r0, [r3, #12]
 800f098:	f7fd f9bc 	bl	800c414 <lwip_htons>
 800f09c:	f8d8 3000 	ldr.w	r3, [r8]
 800f0a0:	f010 0003 	ands.w	r0, r0, #3
 800f0a4:	eba5 0503 	sub.w	r5, r5, r3
 800f0a8:	bf18      	it	ne
 800f0aa:	2001      	movne	r0, #1
 800f0ac:	4435      	add	r5, r6
 800f0ae:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	dc36      	bgt.n	800f122 <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 800f0b4:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 800f0b8:	f7fe fac4 	bl	800d644 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f0bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800f0c0:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f0c2:	4298      	cmp	r0, r3
 800f0c4:	d823      	bhi.n	800f10e <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f0c6:	4919      	ldr	r1, [pc, #100]	; (800f12c <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f0c8:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f0ca:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 800f0cc:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f0ce:	880d      	ldrh	r5, [r1, #0]
 800f0d0:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f0d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f0d6:	1953      	adds	r3, r2, r5
 800f0d8:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800f0da:	f7fe feb3 	bl	800de44 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f0de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f0e2:	b11b      	cbz	r3, 800f0ec <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f0e4:	9b01      	ldr	r3, [sp, #4]
 800f0e6:	ea53 0506 	orrs.w	r5, r3, r6
 800f0ea:	d005      	beq.n	800f0f8 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 800f0ec:	2e00      	cmp	r6, #0
 800f0ee:	d1cb      	bne.n	800f088 <tcp_free_acked_segments.constprop.0+0x20>
 800f0f0:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800f0f2:	b003      	add	sp, #12
 800f0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f0f8:	4b0d      	ldr	r3, [pc, #52]	; (800f130 <tcp_free_acked_segments.constprop.0+0xc8>)
 800f0fa:	f240 4261 	movw	r2, #1121	; 0x461
 800f0fe:	490d      	ldr	r1, [pc, #52]	; (800f134 <tcp_free_acked_segments.constprop.0+0xcc>)
 800f100:	480d      	ldr	r0, [pc, #52]	; (800f138 <tcp_free_acked_segments.constprop.0+0xd0>)
 800f102:	f005 fdb1 	bl	8014c68 <iprintf>
 800f106:	4628      	mov	r0, r5
}
 800f108:	b003      	add	sp, #12
 800f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f10e:	465b      	mov	r3, fp
 800f110:	f240 4257 	movw	r2, #1111	; 0x457
 800f114:	4651      	mov	r1, sl
 800f116:	4648      	mov	r0, r9
 800f118:	f005 fda6 	bl	8014c68 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f11c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800f120:	e7d1      	b.n	800f0c6 <tcp_free_acked_segments.constprop.0+0x5e>
 800f122:	4620      	mov	r0, r4
}
 800f124:	b003      	add	sp, #12
 800f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12a:	bf00      	nop
 800f12c:	24037ac4 	.word	0x24037ac4
 800f130:	080196c8 	.word	0x080196c8
 800f134:	08019774 	.word	0x08019774
 800f138:	08017728 	.word	0x08017728
 800f13c:	24037aac 	.word	0x24037aac
 800f140:	0801974c 	.word	0x0801974c

0800f144 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f148:	4604      	mov	r4, r0
 800f14a:	2800      	cmp	r0, #0
 800f14c:	f000 81e2 	beq.w	800f514 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f150:	7d23      	ldrb	r3, [r4, #20]
 800f152:	2b03      	cmp	r3, #3
 800f154:	f240 80f5 	bls.w	800f342 <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 800f158:	4baf      	ldr	r3, [pc, #700]	; (800f418 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f15a:	4eb0      	ldr	r6, [pc, #704]	; (800f41c <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	06d8      	lsls	r0, r3, #27
 800f160:	d470      	bmi.n	800f244 <tcp_receive+0x100>
 800f162:	4faf      	ldr	r7, [pc, #700]	; (800f420 <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f164:	883b      	ldrh	r3, [r7, #0]
 800f166:	b113      	cbz	r3, 800f16e <tcp_receive+0x2a>
 800f168:	7d22      	ldrb	r2, [r4, #20]
 800f16a:	2a06      	cmp	r2, #6
 800f16c:	d911      	bls.n	800f192 <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f16e:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f172:	1ad1      	subs	r1, r2, r3
 800f174:	2900      	cmp	r1, #0
 800f176:	db06      	blt.n	800f186 <tcp_receive+0x42>
 800f178:	f1c3 0301 	rsb	r3, r3, #1
 800f17c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800f17e:	1a5b      	subs	r3, r3, r1
 800f180:	4413      	add	r3, r2
 800f182:	2b00      	cmp	r3, #0
 800f184:	dd03      	ble.n	800f18e <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 800f186:	8b63      	ldrh	r3, [r4, #26]
 800f188:	f043 0302 	orr.w	r3, r3, #2
 800f18c:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800f18e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f192:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f194:	6832      	ldr	r2, [r6, #0]
 800f196:	eba1 0802 	sub.w	r8, r1, r2
 800f19a:	f1b8 0f01 	cmp.w	r8, #1
 800f19e:	d406      	bmi.n	800f1ae <tcp_receive+0x6a>
 800f1a0:	f1c2 0001 	rsb	r0, r2, #1
 800f1a4:	1ac3      	subs	r3, r0, r3
 800f1a6:	440b      	add	r3, r1
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f340 81c2 	ble.w	800f532 <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f1ae:	1a53      	subs	r3, r2, r1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f2c0 81b9 	blt.w	800f528 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f1b6:	f102 0c01 	add.w	ip, r2, #1
 800f1ba:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800f1bc:	ebac 0301 	sub.w	r3, ip, r1
 800f1c0:	1a1b      	subs	r3, r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	dc39      	bgt.n	800f23a <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 800f1c6:	4291      	cmp	r1, r2
 800f1c8:	f000 8452 	beq.w	800fa70 <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 800f1cc:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800f1ce:	2d00      	cmp	r5, #0
 800f1d0:	f000 835d 	beq.w	800f88e <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 800f1d4:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 800f1d6:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f1da:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800f1de:	6843      	ldr	r3, [r0, #4]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d019      	beq.n	800f218 <tcp_receive+0xd4>
              if (prev == NULL) {
 800f1e4:	f1b8 0f00 	cmp.w	r8, #0
 800f1e8:	f000 812c 	beq.w	800f444 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f1ec:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f1f0:	6849      	ldr	r1, [r1, #4]
 800f1f2:	ebae 0101 	sub.w	r1, lr, r1
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	db04      	blt.n	800f204 <tcp_receive+0xc0>
 800f1fa:	ebac 0103 	sub.w	r1, ip, r3
 800f1fe:	2900      	cmp	r1, #0
 800f200:	f340 834e 	ble.w	800f8a0 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800f204:	6829      	ldr	r1, [r5, #0]
 800f206:	46a8      	mov	r8, r5
 800f208:	2900      	cmp	r1, #0
 800f20a:	f000 812a 	beq.w	800f462 <tcp_receive+0x31e>
 800f20e:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800f210:	68e8      	ldr	r0, [r5, #12]
 800f212:	6843      	ldr	r3, [r0, #4]
 800f214:	429a      	cmp	r2, r3
 800f216:	d1e5      	bne.n	800f1e4 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 800f218:	4882      	ldr	r0, [pc, #520]	; (800f424 <tcp_receive+0x2e0>)
 800f21a:	892b      	ldrh	r3, [r5, #8]
 800f21c:	8902      	ldrh	r2, [r0, #8]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d90b      	bls.n	800f23a <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f222:	f7fe fe1d 	bl	800de60 <tcp_seg_copy>
                if (cseg != NULL) {
 800f226:	b140      	cbz	r0, 800f23a <tcp_receive+0xf6>
                  if (prev != NULL) {
 800f228:	f1b8 0f00 	cmp.w	r8, #0
 800f22c:	f000 83f7 	beq.w	800fa1e <tcp_receive+0x8da>
                    prev->next = cseg;
 800f230:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800f234:	4629      	mov	r1, r5
 800f236:	f7ff fe93 	bl	800ef60 <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 800f23a:	4620      	mov	r0, r4
}
 800f23c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800f240:	f002 b9fc 	b.w	801163c <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f244:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f246:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f248:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f24c:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f24e:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f252:	2900      	cmp	r1, #0
 800f254:	db7d      	blt.n	800f352 <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f256:	4d74      	ldr	r5, [pc, #464]	; (800f428 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f258:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f25a:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f25c:	f000 80cb 	beq.w	800f3f6 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f260:	459c      	cmp	ip, r3
 800f262:	f000 80d1 	beq.w	800f408 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f266:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f268:	1a19      	subs	r1, r3, r0
 800f26a:	2900      	cmp	r1, #0
 800f26c:	f340 8085 	ble.w	800f37a <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f270:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f272:	1a9a      	subs	r2, r3, r2
 800f274:	2a00      	cmp	r2, #0
 800f276:	f300 808f 	bgt.w	800f398 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 800f27a:	8b62      	ldrh	r2, [r4, #26]
 800f27c:	0750      	lsls	r0, r2, #29
 800f27e:	d509      	bpl.n	800f294 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800f280:	f022 0204 	bic.w	r2, r2, #4
 800f284:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800f286:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800f28a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f28e:	2200      	movs	r2, #0
 800f290:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f294:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800f298:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f29a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 800f29c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f29e:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800f2a2:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f2a4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800f2b0:	d913      	bls.n	800f2da <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 800f2b2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f2b6:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800f2b8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	f200 81d1 	bhi.w	800f664 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f2c2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f2c6:	4411      	add	r1, r2
 800f2c8:	b289      	uxth	r1, r1
 800f2ca:	428a      	cmp	r2, r1
 800f2cc:	f200 82c6 	bhi.w	800f85c <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f2d0:	428b      	cmp	r3, r1
 800f2d2:	f240 82c5 	bls.w	800f860 <tcp_receive+0x71c>
 800f2d6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f2da:	4620      	mov	r0, r4
 800f2dc:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800f2e0:	f7ff fec2 	bl	800f068 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f2e4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f2e6:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f2e8:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f7ff febc 	bl	800f068 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800f2f0:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f2f2:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800f2f4:	fab2 f382 	clz	r3, r2
 800f2f8:	095b      	lsrs	r3, r3, #5
 800f2fa:	425b      	negs	r3, r3
 800f2fc:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800f302:	2800      	cmp	r0, #0
 800f304:	f000 81ab 	beq.w	800f65e <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f308:	4b48      	ldr	r3, [pc, #288]	; (800f42c <tcp_receive+0x2e8>)
 800f30a:	8819      	ldrh	r1, [r3, #0]
 800f30c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800f310:	440b      	add	r3, r1
 800f312:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800f316:	8b63      	ldrh	r3, [r4, #26]
 800f318:	0519      	lsls	r1, r3, #20
 800f31a:	f140 8103 	bpl.w	800f524 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800f31e:	2a00      	cmp	r2, #0
 800f320:	f000 81b7 	beq.w	800f692 <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f324:	68d3      	ldr	r3, [r2, #12]
 800f326:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800f328:	6858      	ldr	r0, [r3, #4]
 800f32a:	f7fd f877 	bl	800c41c <lwip_htonl>
 800f32e:	1a38      	subs	r0, r7, r0
 800f330:	2800      	cmp	r0, #0
 800f332:	f300 80f7 	bgt.w	800f524 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 800f336:	8b63      	ldrh	r3, [r4, #26]
 800f338:	4f39      	ldr	r7, [pc, #228]	; (800f420 <tcp_receive+0x2dc>)
 800f33a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f33e:	8363      	strh	r3, [r4, #26]
 800f340:	e02e      	b.n	800f3a0 <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f342:	4b3b      	ldr	r3, [pc, #236]	; (800f430 <tcp_receive+0x2ec>)
 800f344:	f240 427c 	movw	r2, #1148	; 0x47c
 800f348:	493a      	ldr	r1, [pc, #232]	; (800f434 <tcp_receive+0x2f0>)
 800f34a:	483b      	ldr	r0, [pc, #236]	; (800f438 <tcp_receive+0x2f4>)
 800f34c:	f005 fc8c 	bl	8014c68 <iprintf>
 800f350:	e702      	b.n	800f158 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f352:	4b3a      	ldr	r3, [pc, #232]	; (800f43c <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f354:	4d34      	ldr	r5, [pc, #208]	; (800f428 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f35a:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f35c:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f360:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f364:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f366:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f368:	bf38      	it	cc
 800f36a:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f36e:	1a19      	subs	r1, r3, r0
 800f370:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800f372:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f376:	f73f af7b 	bgt.w	800f270 <tcp_receive+0x12c>
      if (tcplen == 0) {
 800f37a:	4f29      	ldr	r7, [pc, #164]	; (800f420 <tcp_receive+0x2dc>)
 800f37c:	8839      	ldrh	r1, [r7, #0]
 800f37e:	b939      	cbnz	r1, 800f390 <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f380:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f382:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f384:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 800f388:	4461      	add	r1, ip
 800f38a:	4571      	cmp	r1, lr
 800f38c:	f000 8191 	beq.w	800f6b2 <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800f390:	2300      	movs	r3, #0
 800f392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f396:	e003      	b.n	800f3a0 <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 800f398:	4620      	mov	r0, r4
 800f39a:	4f21      	ldr	r7, [pc, #132]	; (800f420 <tcp_receive+0x2dc>)
 800f39c:	f002 f94e 	bl	801163c <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f3a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3a2:	2900      	cmp	r1, #0
 800f3a4:	f43f aede 	beq.w	800f164 <tcp_receive+0x20>
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f3ac:	1ad2      	subs	r2, r2, r3
 800f3ae:	2a00      	cmp	r2, #0
 800f3b0:	f6bf aed8 	bge.w	800f164 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 800f3b4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f3b8:	b289      	uxth	r1, r1
 800f3ba:	4b21      	ldr	r3, [pc, #132]	; (800f440 <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800f3bc:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f3c0:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800f3c2:	1a2b      	subs	r3, r5, r0
 800f3c4:	1a5b      	subs	r3, r3, r1
 800f3c6:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800f3c8:	441a      	add	r2, r3
      if (m < 0) {
 800f3ca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800f3ce:	b212      	sxth	r2, r2
 800f3d0:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 800f3d2:	d002      	beq.n	800f3da <tcp_receive+0x296>
        m = (s16_t) - m;
 800f3d4:	1b40      	subs	r0, r0, r5
 800f3d6:	4401      	add	r1, r0
 800f3d8:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800f3da:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f3de:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800f3e2:	440b      	add	r3, r1
 800f3e4:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f3e6:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800f3ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800f3ec:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f3ee:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800f3f2:	6363      	str	r3, [r4, #52]	; 0x34
 800f3f4:	e6b6      	b.n	800f164 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3f6:	ebac 0103 	sub.w	r1, ip, r3
 800f3fa:	2900      	cmp	r1, #0
 800f3fc:	f6bf af30 	bge.w	800f260 <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f400:	490e      	ldr	r1, [pc, #56]	; (800f43c <tcp_receive+0x2f8>)
 800f402:	6809      	ldr	r1, [r1, #0]
 800f404:	89c9      	ldrh	r1, [r1, #14]
 800f406:	e7a9      	b.n	800f35c <tcp_receive+0x218>
 800f408:	490c      	ldr	r1, [pc, #48]	; (800f43c <tcp_receive+0x2f8>)
 800f40a:	6809      	ldr	r1, [r1, #0]
 800f40c:	89c9      	ldrh	r1, [r1, #14]
 800f40e:	458e      	cmp	lr, r1
 800f410:	f4bf af29 	bcs.w	800f266 <tcp_receive+0x122>
 800f414:	e7a2      	b.n	800f35c <tcp_receive+0x218>
 800f416:	bf00      	nop
 800f418:	24037ab0 	.word	0x24037ab0
 800f41c:	24037ad0 	.word	0x24037ad0
 800f420:	24037aea 	.word	0x24037aea
 800f424:	24037ab4 	.word	0x24037ab4
 800f428:	24037aac 	.word	0x24037aac
 800f42c:	24037ac4 	.word	0x24037ac4
 800f430:	080196c8 	.word	0x080196c8
 800f434:	080197b0 	.word	0x080197b0
 800f438:	08017728 	.word	0x08017728
 800f43c:	24037adc 	.word	0x24037adc
 800f440:	24037aa0 	.word	0x24037aa0
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f444:	1ad1      	subs	r1, r2, r3
 800f446:	2900      	cmp	r1, #0
 800f448:	f6bf aedc 	bge.w	800f204 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f44c:	48af      	ldr	r0, [pc, #700]	; (800f70c <tcp_receive+0x5c8>)
 800f44e:	f7fe fd07 	bl	800de60 <tcp_seg_copy>
                  if (cseg != NULL) {
 800f452:	2800      	cmp	r0, #0
 800f454:	f43f aef1 	beq.w	800f23a <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 800f458:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800f45a:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f45c:	f7ff fd80 	bl	800ef60 <tcp_oos_insert_segment>
 800f460:	e6eb      	b.n	800f23a <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f462:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f464:	2b00      	cmp	r3, #0
 800f466:	f77f aee8 	ble.w	800f23a <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f46a:	8980      	ldrh	r0, [r0, #12]
 800f46c:	f7fc ffd2 	bl	800c414 <lwip_htons>
 800f470:	07c1      	lsls	r1, r0, #31
 800f472:	f53f aee2 	bmi.w	800f23a <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 800f476:	48a5      	ldr	r0, [pc, #660]	; (800f70c <tcp_receive+0x5c8>)
 800f478:	f7fe fcf2 	bl	800de60 <tcp_seg_copy>
 800f47c:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800f47e:	2800      	cmp	r0, #0
 800f480:	f43f aedb 	beq.w	800f23a <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f484:	68eb      	ldr	r3, [r5, #12]
 800f486:	892a      	ldrh	r2, [r5, #8]
 800f488:	6859      	ldr	r1, [r3, #4]
 800f48a:	6833      	ldr	r3, [r6, #0]
 800f48c:	440a      	add	r2, r1
 800f48e:	1ad2      	subs	r2, r2, r3
 800f490:	2a00      	cmp	r2, #0
 800f492:	dd05      	ble.n	800f4a0 <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f494:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800f496:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f498:	b299      	uxth	r1, r3
 800f49a:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800f49c:	f7fe f87a 	bl	800d594 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f4a0:	6832      	ldr	r2, [r6, #0]
 800f4a2:	883b      	ldrh	r3, [r7, #0]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f4a8:	1a9b      	subs	r3, r3, r2
 800f4aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800f4ac:	1a9b      	subs	r3, r3, r2
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f77f aec3 	ble.w	800f23a <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	8998      	ldrh	r0, [r3, #12]
 800f4ba:	f7fc ffab 	bl	800c414 <lwip_htons>
 800f4be:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f4c0:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f4c2:	f100 82c3 	bmi.w	800fa4c <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f4c6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800f4c8:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800f4ca:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f4cc:	1a89      	subs	r1, r1, r2
 800f4ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f4d0:	4411      	add	r1, r2
 800f4d2:	b289      	uxth	r1, r1
 800f4d4:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f4d6:	f7fe f85d 	bl	800d594 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f4da:	682b      	ldr	r3, [r5, #0]
 800f4dc:	891d      	ldrh	r5, [r3, #8]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	8998      	ldrh	r0, [r3, #12]
 800f4e2:	f7fc ff97 	bl	800c414 <lwip_htons>
 800f4e6:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4ea:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800f4ec:	bf18      	it	ne
 800f4ee:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800f4f2:	182b      	adds	r3, r5, r0
 800f4f4:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4f6:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800f4f8:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4fc:	4413      	add	r3, r2
 800f4fe:	4299      	cmp	r1, r3
 800f500:	f43f ae9b 	beq.w	800f23a <tcp_receive+0xf6>
 800f504:	4b82      	ldr	r3, [pc, #520]	; (800f710 <tcp_receive+0x5cc>)
 800f506:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f50a:	4982      	ldr	r1, [pc, #520]	; (800f714 <tcp_receive+0x5d0>)
 800f50c:	4882      	ldr	r0, [pc, #520]	; (800f718 <tcp_receive+0x5d4>)
 800f50e:	f005 fbab 	bl	8014c68 <iprintf>
 800f512:	e692      	b.n	800f23a <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f514:	4b7e      	ldr	r3, [pc, #504]	; (800f710 <tcp_receive+0x5cc>)
 800f516:	f240 427b 	movw	r2, #1147	; 0x47b
 800f51a:	4980      	ldr	r1, [pc, #512]	; (800f71c <tcp_receive+0x5d8>)
 800f51c:	487e      	ldr	r0, [pc, #504]	; (800f718 <tcp_receive+0x5d4>)
 800f51e:	f005 fba3 	bl	8014c68 <iprintf>
 800f522:	e615      	b.n	800f150 <tcp_receive+0xc>
 800f524:	4f7e      	ldr	r7, [pc, #504]	; (800f720 <tcp_receive+0x5dc>)
 800f526:	e73b      	b.n	800f3a0 <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 800f528:	8b63      	ldrh	r3, [r4, #26]
 800f52a:	f043 0302 	orr.w	r3, r3, #2
 800f52e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f530:	e683      	b.n	800f23a <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 800f532:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800f70c <tcp_receive+0x5c8>
 800f536:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f53a:	2d00      	cmp	r5, #0
 800f53c:	f000 8186 	beq.w	800f84c <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f540:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f544:	4598      	cmp	r8, r3
 800f546:	f200 80d9 	bhi.w	800f6fc <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f54a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800f54e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f552:	891a      	ldrh	r2, [r3, #8]
 800f554:	4542      	cmp	r2, r8
 800f556:	f0c0 80c6 	bcc.w	800f6e6 <tcp_receive+0x5a2>
      inseg.len -= off;
 800f55a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f55e:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800f562:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f566:	b292      	uxth	r2, r2
      inseg.len -= off;
 800f568:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800f56c:	896b      	ldrh	r3, [r5, #10]
 800f56e:	4543      	cmp	r3, r8
 800f570:	d20a      	bcs.n	800f588 <tcp_receive+0x444>
        p->len = 0;
 800f572:	2100      	movs	r1, #0
        off -= p->len;
 800f574:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800f578:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800f57a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800f57c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800f57e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800f582:	896b      	ldrh	r3, [r5, #10]
 800f584:	4543      	cmp	r3, r8
 800f586:	d3f5      	bcc.n	800f574 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 800f588:	4641      	mov	r1, r8
 800f58a:	4628      	mov	r0, r5
 800f58c:	f7fd fe78 	bl	800d280 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f592:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f596:	6033      	str	r3, [r6, #0]
 800f598:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f59a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f43f ae4c 	beq.w	800f23a <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 800f5a2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f5a6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800f5aa:	8998      	ldrh	r0, [r3, #12]
 800f5ac:	f7fc ff32 	bl	800c414 <lwip_htons>
 800f5b0:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800f5b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800f5b6:	bf18      	it	ne
 800f5b8:	2001      	movne	r0, #1
 800f5ba:	182b      	adds	r3, r5, r0
 800f5bc:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800f5be:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800f5c0:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800f5c2:	f0c0 8197 	bcc.w	800f8f4 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 800f5c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 80b6 	beq.w	800f73a <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f5d2:	8998      	ldrh	r0, [r3, #12]
 800f5d4:	f7fc ff1e 	bl	800c414 <lwip_htons>
 800f5d8:	07c2      	lsls	r2, r0, #31
 800f5da:	f100 80ab 	bmi.w	800f734 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 800f5de:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800f5e0:	b955      	cbnz	r5, 800f5f8 <tcp_receive+0x4b4>
 800f5e2:	e208      	b.n	800f9f6 <tcp_receive+0x8b2>
              next = next->next;
 800f5e4:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	f7fe fc2b 	bl	800de44 <tcp_seg_free>
            while (next &&
 800f5ee:	4645      	mov	r5, r8
 800f5f0:	f1b8 0f00 	cmp.w	r8, #0
 800f5f4:	f000 81ff 	beq.w	800f9f6 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f5f8:	68e8      	ldr	r0, [r5, #12]
 800f5fa:	883a      	ldrh	r2, [r7, #0]
 800f5fc:	f8d6 e000 	ldr.w	lr, [r6]
 800f600:	892b      	ldrh	r3, [r5, #8]
 800f602:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800f606:	eb02 010e 	add.w	r1, r2, lr
 800f60a:	4463      	add	r3, ip
 800f60c:	1acb      	subs	r3, r1, r3
            while (next &&
 800f60e:	2b00      	cmp	r3, #0
 800f610:	f2c0 81b9 	blt.w	800f986 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f614:	8980      	ldrh	r0, [r0, #12]
 800f616:	f7fc fefd 	bl	800c414 <lwip_htons>
 800f61a:	07c3      	lsls	r3, r0, #31
 800f61c:	d5e2      	bpl.n	800f5e4 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f61e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f622:	8998      	ldrh	r0, [r3, #12]
 800f624:	f7fc fef6 	bl	800c414 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f628:	0780      	lsls	r0, r0, #30
 800f62a:	d4db      	bmi.n	800f5e4 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f62c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f630:	2001      	movs	r0, #1
 800f632:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800f636:	f7fc feed 	bl	800c414 <lwip_htons>
 800f63a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f63e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800f642:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f646:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f648:	b280      	uxth	r0, r0
 800f64a:	f7fc fee3 	bl	800c414 <lwip_htons>
 800f64e:	f010 0003 	ands.w	r0, r0, #3
 800f652:	bf18      	it	ne
 800f654:	2001      	movne	r0, #1
 800f656:	4480      	add	r8, r0
 800f658:	f8a7 8000 	strh.w	r8, [r7]
 800f65c:	e7c2      	b.n	800f5e4 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 800f65e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 800f662:	e651      	b.n	800f308 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f664:	8b62      	ldrh	r2, [r4, #26]
 800f666:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f66a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f66c:	bf14      	ite	ne
 800f66e:	2001      	movne	r0, #1
 800f670:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f672:	fb12 f200 	smulbb	r2, r2, r0
 800f676:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800f678:	428a      	cmp	r2, r1
 800f67a:	bf94      	ite	ls
 800f67c:	1898      	addls	r0, r3, r2
 800f67e:	1858      	addhi	r0, r3, r1
 800f680:	b282      	uxth	r2, r0
 800f682:	4293      	cmp	r3, r2
 800f684:	f240 80f5 	bls.w	800f872 <tcp_receive+0x72e>
 800f688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f68c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800f690:	e623      	b.n	800f2da <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 800f692:	b148      	cbz	r0, 800f6a8 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f694:	68c3      	ldr	r3, [r0, #12]
 800f696:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800f698:	6858      	ldr	r0, [r3, #4]
 800f69a:	f7fc febf 	bl	800c41c <lwip_htonl>
 800f69e:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	f73f af3f 	bgt.w	800f524 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 800f6a6:	8b63      	ldrh	r3, [r4, #26]
 800f6a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6ac:	4f1c      	ldr	r7, [pc, #112]	; (800f720 <tcp_receive+0x5dc>)
 800f6ae:	8363      	strh	r3, [r4, #26]
 800f6b0:	e676      	b.n	800f3a0 <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 800f6b2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800f6b4:	0409      	lsls	r1, r1, #16
 800f6b6:	f53f ae6b 	bmi.w	800f390 <tcp_receive+0x24c>
 800f6ba:	4298      	cmp	r0, r3
 800f6bc:	f47f ae68 	bne.w	800f390 <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f6c0:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800f6c4:	29ff      	cmp	r1, #255	; 0xff
 800f6c6:	f000 814e 	beq.w	800f966 <tcp_receive+0x822>
                ++pcb->dupacks;
 800f6ca:	3101      	adds	r1, #1
 800f6cc:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800f6ce:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800f6d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800f6d4:	f200 8147 	bhi.w	800f966 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 800f6d8:	f000 8151 	beq.w	800f97e <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6de:	2900      	cmp	r1, #0
 800f6e0:	f47f ae63 	bne.w	800f3aa <tcp_receive+0x266>
 800f6e4:	e544      	b.n	800f170 <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f6e6:	4b0a      	ldr	r3, [pc, #40]	; (800f710 <tcp_receive+0x5cc>)
 800f6e8:	f240 5297 	movw	r2, #1431	; 0x597
 800f6ec:	490d      	ldr	r1, [pc, #52]	; (800f724 <tcp_receive+0x5e0>)
 800f6ee:	480a      	ldr	r0, [pc, #40]	; (800f718 <tcp_receive+0x5d4>)
 800f6f0:	f005 faba 	bl	8014c68 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f6f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f6f8:	891a      	ldrh	r2, [r3, #8]
 800f6fa:	e72e      	b.n	800f55a <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f6fc:	4b04      	ldr	r3, [pc, #16]	; (800f710 <tcp_receive+0x5cc>)
 800f6fe:	f240 5295 	movw	r2, #1429	; 0x595
 800f702:	4909      	ldr	r1, [pc, #36]	; (800f728 <tcp_receive+0x5e4>)
 800f704:	4804      	ldr	r0, [pc, #16]	; (800f718 <tcp_receive+0x5d4>)
 800f706:	f005 faaf 	bl	8014c68 <iprintf>
 800f70a:	e71e      	b.n	800f54a <tcp_receive+0x406>
 800f70c:	24037ab4 	.word	0x24037ab4
 800f710:	080196c8 	.word	0x080196c8
 800f714:	080197fc 	.word	0x080197fc
 800f718:	08017728 	.word	0x08017728
 800f71c:	08019794 	.word	0x08019794
 800f720:	24037aea 	.word	0x24037aea
 800f724:	080197ec 	.word	0x080197ec
 800f728:	080197dc 	.word	0x080197dc
              pcb->ooseq = pcb->ooseq->next;
 800f72c:	6803      	ldr	r3, [r0, #0]
 800f72e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f730:	f7fe fb88 	bl	800de44 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f734:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f736:	2800      	cmp	r0, #0
 800f738:	d1f8      	bne.n	800f72c <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 800f73a:	883a      	ldrh	r2, [r7, #0]
 800f73c:	6831      	ldr	r1, [r6, #0]
 800f73e:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f740:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800f742:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f744:	4293      	cmp	r3, r2
 800f746:	f0c0 80cb 	bcc.w	800f8e0 <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 800f74a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800f74c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800f74e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800f750:	f7fe fa34 	bl	800dbbc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800f754:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f758:	891a      	ldrh	r2, [r3, #8]
 800f75a:	b122      	cbz	r2, 800f766 <tcp_receive+0x622>
          recv_data = inseg.p;
 800f75c:	4ab1      	ldr	r2, [pc, #708]	; (800fa24 <tcp_receive+0x8e0>)
 800f75e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f766:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f76a:	8998      	ldrh	r0, [r3, #12]
 800f76c:	f7fc fe52 	bl	800c414 <lwip_htons>
 800f770:	07c2      	lsls	r2, r0, #31
 800f772:	d504      	bpl.n	800f77e <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 800f774:	4aac      	ldr	r2, [pc, #688]	; (800fa28 <tcp_receive+0x8e4>)
 800f776:	7813      	ldrb	r3, [r2, #0]
 800f778:	f043 0320 	orr.w	r3, r3, #32
 800f77c:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800f77e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800f780:	2d00      	cmp	r5, #0
 800f782:	d07b      	beq.n	800f87c <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f784:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800fa30 <tcp_receive+0x8ec>
 800f788:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800fa48 <tcp_receive+0x904>
 800f78c:	4fa7      	ldr	r7, [pc, #668]	; (800fa2c <tcp_receive+0x8e8>)
 800f78e:	e033      	b.n	800f7f8 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f790:	68eb      	ldr	r3, [r5, #12]
 800f792:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800f796:	8998      	ldrh	r0, [r3, #12]
 800f798:	f7fc fe3c 	bl	800c414 <lwip_htons>
 800f79c:	f010 0003 	ands.w	r0, r0, #3
 800f7a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800f7a2:	bf18      	it	ne
 800f7a4:	2001      	movne	r0, #1
 800f7a6:	4450      	add	r0, sl
 800f7a8:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800f7aa:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f7ac:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800f7ae:	f7fe fa05 	bl	800dbbc <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800f7b2:	6869      	ldr	r1, [r5, #4]
 800f7b4:	890b      	ldrh	r3, [r1, #8]
 800f7b6:	b13b      	cbz	r3, 800f7c8 <tcp_receive+0x684>
            if (recv_data) {
 800f7b8:	4b9a      	ldr	r3, [pc, #616]	; (800fa24 <tcp_receive+0x8e0>)
 800f7ba:	6818      	ldr	r0, [r3, #0]
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	d05b      	beq.n	800f878 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 800f7c0:	f7fd ff6a 	bl	800d698 <pbuf_cat>
            cseg->p = NULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f7c8:	68eb      	ldr	r3, [r5, #12]
 800f7ca:	8998      	ldrh	r0, [r3, #12]
 800f7cc:	f7fc fe22 	bl	800c414 <lwip_htons>
 800f7d0:	07c3      	lsls	r3, r0, #31
 800f7d2:	d509      	bpl.n	800f7e8 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 800f7d4:	4a94      	ldr	r2, [pc, #592]	; (800fa28 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f7d6:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800f7d8:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f7da:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800f7dc:	f043 0320 	orr.w	r3, r3, #32
 800f7e0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f7e2:	d101      	bne.n	800f7e8 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 800f7e4:	2307      	movs	r3, #7
 800f7e6:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800f7e8:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800f7ea:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800f7ec:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800f7ee:	f7fe fb29 	bl	800de44 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f7f2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800f7f4:	2d00      	cmp	r5, #0
 800f7f6:	d041      	beq.n	800f87c <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f7f8:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800f7fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f7fc:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800f7fe:	428b      	cmp	r3, r1
 800f800:	d13c      	bne.n	800f87c <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 800f802:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f804:	8990      	ldrh	r0, [r2, #12]
 800f806:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800f80a:	f7fc fe03 	bl	800c414 <lwip_htons>
 800f80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f810:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f814:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f818:	bf18      	it	ne
 800f81a:	2001      	movne	r0, #1
 800f81c:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f81e:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f820:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f822:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f826:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f828:	8998      	ldrh	r0, [r3, #12]
 800f82a:	f7fc fdf3 	bl	800c414 <lwip_htons>
 800f82e:	f010 0003 	ands.w	r0, r0, #3
 800f832:	bf18      	it	ne
 800f834:	2001      	movne	r0, #1
 800f836:	4458      	add	r0, fp
 800f838:	4582      	cmp	sl, r0
 800f83a:	d2a9      	bcs.n	800f790 <tcp_receive+0x64c>
 800f83c:	464b      	mov	r3, r9
 800f83e:	f240 622b 	movw	r2, #1579	; 0x62b
 800f842:	4641      	mov	r1, r8
 800f844:	4638      	mov	r0, r7
 800f846:	f005 fa0f 	bl	8014c68 <iprintf>
 800f84a:	e7a1      	b.n	800f790 <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f84c:	4b78      	ldr	r3, [pc, #480]	; (800fa30 <tcp_receive+0x8ec>)
 800f84e:	f240 5294 	movw	r2, #1428	; 0x594
 800f852:	4978      	ldr	r1, [pc, #480]	; (800fa34 <tcp_receive+0x8f0>)
 800f854:	4875      	ldr	r0, [pc, #468]	; (800fa2c <tcp_receive+0x8e8>)
 800f856:	f005 fa07 	bl	8014c68 <iprintf>
 800f85a:	e671      	b.n	800f540 <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f85c:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f860:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f862:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f864:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f866:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f86a:	b292      	uxth	r2, r2
 800f86c:	4293      	cmp	r3, r2
 800f86e:	f63f af0b 	bhi.w	800f688 <tcp_receive+0x544>
 800f872:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800f876:	e530      	b.n	800f2da <tcp_receive+0x196>
              recv_data = cseg->p;
 800f878:	6019      	str	r1, [r3, #0]
 800f87a:	e7a3      	b.n	800f7c4 <tcp_receive+0x680>
        tcp_ack(pcb);
 800f87c:	8b63      	ldrh	r3, [r4, #26]
 800f87e:	07d8      	lsls	r0, r3, #31
 800f880:	d50a      	bpl.n	800f898 <tcp_receive+0x754>
 800f882:	f023 0301 	bic.w	r3, r3, #1
 800f886:	f043 0302 	orr.w	r3, r3, #2
 800f88a:	8363      	strh	r3, [r4, #26]
 800f88c:	e47f      	b.n	800f18e <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f88e:	486a      	ldr	r0, [pc, #424]	; (800fa38 <tcp_receive+0x8f4>)
 800f890:	f7fe fae6 	bl	800de60 <tcp_seg_copy>
 800f894:	6760      	str	r0, [r4, #116]	; 0x74
 800f896:	e4d0      	b.n	800f23a <tcp_receive+0xf6>
        tcp_ack(pcb);
 800f898:	f043 0301 	orr.w	r3, r3, #1
 800f89c:	8363      	strh	r3, [r4, #26]
 800f89e:	e476      	b.n	800f18e <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8a0:	4865      	ldr	r0, [pc, #404]	; (800fa38 <tcp_receive+0x8f4>)
 800f8a2:	f7fe fadd 	bl	800de60 <tcp_seg_copy>
                  if (cseg != NULL) {
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	f43f acc6 	beq.w	800f23a <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f8ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8b2:	6832      	ldr	r2, [r6, #0]
 800f8b4:	6859      	ldr	r1, [r3, #4]
 800f8b6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800f8ba:	440b      	add	r3, r1
 800f8bc:	1a9b      	subs	r3, r3, r2
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dd07      	ble.n	800f8d2 <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f8c2:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800f8c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f8c8:	b291      	uxth	r1, r2
 800f8ca:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f8ce:	f7fd fe61 	bl	800d594 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800f8d2:	4629      	mov	r1, r5
 800f8d4:	4638      	mov	r0, r7
                    prev->next = cseg;
 800f8d6:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800f8da:	f7ff fb41 	bl	800ef60 <tcp_oos_insert_segment>
 800f8de:	e4ac      	b.n	800f23a <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f8e0:	4b53      	ldr	r3, [pc, #332]	; (800fa30 <tcp_receive+0x8ec>)
 800f8e2:	f240 6207 	movw	r2, #1543	; 0x607
 800f8e6:	4955      	ldr	r1, [pc, #340]	; (800fa3c <tcp_receive+0x8f8>)
 800f8e8:	4850      	ldr	r0, [pc, #320]	; (800fa2c <tcp_receive+0x8e8>)
 800f8ea:	f005 f9bd 	bl	8014c68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f8ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800f8f0:	883a      	ldrh	r2, [r7, #0]
 800f8f2:	e72a      	b.n	800f74a <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f8f4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f8f8:	8998      	ldrh	r0, [r3, #12]
 800f8fa:	f7fc fd8b 	bl	800c414 <lwip_htons>
 800f8fe:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f900:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f904:	d47b      	bmi.n	800f9fe <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f906:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f908:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800f90a:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f90e:	f7fc fd81 	bl	800c414 <lwip_htons>
 800f912:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800f914:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f918:	d503      	bpl.n	800f922 <tcp_receive+0x7de>
            inseg.len -= 1;
 800f91a:	3901      	subs	r1, #1
 800f91c:	b289      	uxth	r1, r1
 800f91e:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800f922:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f926:	f7fd fe35 	bl	800d594 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f92a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f92e:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800f932:	8998      	ldrh	r0, [r3, #12]
 800f934:	f7fc fd6e 	bl	800c414 <lwip_htons>
 800f938:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f93c:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800f93e:	bf18      	it	ne
 800f940:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f942:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800f944:	182b      	adds	r3, r5, r0
 800f946:	b29b      	uxth	r3, r3
 800f948:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f94a:	4413      	add	r3, r2
 800f94c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800f94e:	440a      	add	r2, r1
 800f950:	4293      	cmp	r3, r2
 800f952:	f43f ae38 	beq.w	800f5c6 <tcp_receive+0x482>
 800f956:	4b36      	ldr	r3, [pc, #216]	; (800fa30 <tcp_receive+0x8ec>)
 800f958:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f95c:	4938      	ldr	r1, [pc, #224]	; (800fa40 <tcp_receive+0x8fc>)
 800f95e:	4833      	ldr	r0, [pc, #204]	; (800fa2c <tcp_receive+0x8e8>)
 800f960:	f005 f982 	bl	8014c68 <iprintf>
 800f964:	e62f      	b.n	800f5c6 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f966:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800f96a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f96e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f970:	4413      	add	r3, r2
 800f972:	b29b      	uxth	r3, r3
 800f974:	429a      	cmp	r2, r3
 800f976:	bf88      	it	hi
 800f978:	460b      	movhi	r3, r1
 800f97a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 fdda 	bl	8011538 <tcp_rexmit_fast>
      if (!found_dupack) {
 800f984:	e50c      	b.n	800f3a0 <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 800f986:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	dc01      	bgt.n	800f992 <tcp_receive+0x84e>
            pcb->ooseq = next;
 800f98e:	6765      	str	r5, [r4, #116]	; 0x74
 800f990:	e6d6      	b.n	800f740 <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f992:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f996:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f99a:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f99e:	8998      	ldrh	r0, [r3, #12]
 800f9a0:	f7fc fd38 	bl	800c414 <lwip_htons>
 800f9a4:	0781      	lsls	r1, r0, #30
 800f9a6:	d504      	bpl.n	800f9b2 <tcp_receive+0x86e>
                inseg.len -= 1;
 800f9a8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800f9b2:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800f9b6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f9ba:	f7fd fdeb 	bl	800d594 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f9be:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f9c2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800f9c6:	8998      	ldrh	r0, [r3, #12]
 800f9c8:	f7fc fd24 	bl	800c414 <lwip_htons>
 800f9cc:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f9d0:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800f9d2:	bf18      	it	ne
 800f9d4:	2001      	movne	r0, #1
 800f9d6:	eb08 0200 	add.w	r2, r8, r0
 800f9da:	b292      	uxth	r2, r2
 800f9dc:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f9de:	6859      	ldr	r1, [r3, #4]
 800f9e0:	6833      	ldr	r3, [r6, #0]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	428b      	cmp	r3, r1
 800f9e6:	d0d2      	beq.n	800f98e <tcp_receive+0x84a>
 800f9e8:	4b11      	ldr	r3, [pc, #68]	; (800fa30 <tcp_receive+0x8ec>)
 800f9ea:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f9ee:	4915      	ldr	r1, [pc, #84]	; (800fa44 <tcp_receive+0x900>)
 800f9f0:	480e      	ldr	r0, [pc, #56]	; (800fa2c <tcp_receive+0x8e8>)
 800f9f2:	f005 f939 	bl	8014c68 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800f9f6:	883a      	ldrh	r2, [r7, #0]
 800f9f8:	6831      	ldr	r1, [r6, #0]
 800f9fa:	4411      	add	r1, r2
 800f9fc:	e7c7      	b.n	800f98e <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f9fe:	899d      	ldrh	r5, [r3, #12]
 800fa00:	4628      	mov	r0, r5
 800fa02:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800fa06:	f7fc fd05 	bl	800c414 <lwip_htons>
 800fa0a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800fa0e:	f7fc fd01 	bl	800c414 <lwip_htons>
 800fa12:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800fa16:	4328      	orrs	r0, r5
 800fa18:	8198      	strh	r0, [r3, #12]
 800fa1a:	b280      	uxth	r0, r0
 800fa1c:	e774      	b.n	800f908 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 800fa1e:	6760      	str	r0, [r4, #116]	; 0x74
 800fa20:	e408      	b.n	800f234 <tcp_receive+0xf0>
 800fa22:	bf00      	nop
 800fa24:	24037ac8 	.word	0x24037ac8
 800fa28:	24037acc 	.word	0x24037acc
 800fa2c:	08017728 	.word	0x08017728
 800fa30:	080196c8 	.word	0x080196c8
 800fa34:	080197cc 	.word	0x080197cc
 800fa38:	24037ab4 	.word	0x24037ab4
 800fa3c:	08019870 	.word	0x08019870
 800fa40:	080197fc 	.word	0x080197fc
 800fa44:	08019834 	.word	0x08019834
 800fa48:	08019890 	.word	0x08019890
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800fa52:	4640      	mov	r0, r8
 800fa54:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800fa58:	f7fc fcdc 	bl	800c414 <lwip_htons>
 800fa5c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800fa60:	f7fc fcd8 	bl	800c414 <lwip_htons>
 800fa64:	682b      	ldr	r3, [r5, #0]
 800fa66:	ea40 0008 	orr.w	r0, r0, r8
 800fa6a:	68da      	ldr	r2, [r3, #12]
 800fa6c:	8190      	strh	r0, [r2, #12]
 800fa6e:	e52a      	b.n	800f4c6 <tcp_receive+0x382>
 800fa70:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800fa78 <tcp_receive+0x934>
 800fa74:	e595      	b.n	800f5a2 <tcp_receive+0x45e>
 800fa76:	bf00      	nop
 800fa78:	24037ab4 	.word	0x24037ab4

0800fa7c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fa80:	4605      	mov	r5, r0
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d07b      	beq.n	800fb7e <tcp_parseopt+0x102>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fa86:	4b4b      	ldr	r3, [pc, #300]	; (800fbb4 <tcp_parseopt+0x138>)
 800fa88:	8818      	ldrh	r0, [r3, #0]
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d03c      	beq.n	800fb08 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fa8e:	4b4a      	ldr	r3, [pc, #296]	; (800fbb8 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa90:	2200      	movs	r2, #0
 800fa92:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800fbd0 <tcp_parseopt+0x154>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fa96:	f240 5ab3 	movw	sl, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fa9a:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fa9e:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800faa0:	4b46      	ldr	r3, [pc, #280]	; (800fbbc <tcp_parseopt+0x140>)
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800faa2:	f240 59b4 	movw	r9, #1460	; 0x5b4
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800faa6:	fa5f f78e 	uxtb.w	r7, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800faaa:	f8a8 2000 	strh.w	r2, [r8]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800faae:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fab0:	4b43      	ldr	r3, [pc, #268]	; (800fbc0 <tcp_parseopt+0x144>)
 800fab2:	681e      	ldr	r6, [r3, #0]
 800fab4:	f101 0c14 	add.w	ip, r1, #20
 800fab8:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800faba:	4288      	cmp	r0, r1
  u16_t optidx = tcp_optidx++;
 800fabc:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fac0:	d96b      	bls.n	800fb9a <tcp_parseopt+0x11e>
  u16_t optidx = tcp_optidx++;
 800fac2:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fac4:	b1b4      	cbz	r4, 800faf4 <tcp_parseopt+0x78>
 800fac6:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 800fac8:	eba3 0207 	sub.w	r2, r3, r7
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800facc:	d812      	bhi.n	800faf4 <tcp_parseopt+0x78>
    return tcphdr_opt2[idx];
 800face:	3a01      	subs	r2, #1
 800fad0:	b2d2      	uxtb	r2, r2
 800fad2:	5ca2      	ldrb	r2, [r4, r2]
      switch (opt) {
 800fad4:	2a01      	cmp	r2, #1
 800fad6:	d011      	beq.n	800fafc <tcp_parseopt+0x80>
 800fad8:	2a02      	cmp	r2, #2
 800fada:	d017      	beq.n	800fb0c <tcp_parseopt+0x90>
 800fadc:	b192      	cbz	r2, 800fb04 <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fade:	b10c      	cbz	r4, 800fae4 <tcp_parseopt+0x68>
 800fae0:	4573      	cmp	r3, lr
 800fae2:	d23d      	bcs.n	800fb60 <tcp_parseopt+0xe4>
    return opts[optidx];
 800fae4:	4433      	add	r3, r6
 800fae6:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d95e      	bls.n	800fbaa <tcp_parseopt+0x12e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800faec:	440b      	add	r3, r1
 800faee:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800faf0:	2201      	movs	r2, #1
 800faf2:	e7df      	b.n	800fab4 <tcp_parseopt+0x38>
    return opts[optidx];
 800faf4:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 800faf8:	2a01      	cmp	r2, #1
 800fafa:	d1ed      	bne.n	800fad8 <tcp_parseopt+0x5c>
 800fafc:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 800fb00:	4619      	mov	r1, r3
 800fb02:	e7da      	b.n	800faba <tcp_parseopt+0x3e>
 800fb04:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
  }
}
 800fb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t optidx = tcp_optidx++;
 800fb0c:	1c8a      	adds	r2, r1, #2
 800fb0e:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb10:	b10c      	cbz	r4, 800fb16 <tcp_parseopt+0x9a>
 800fb12:	4573      	cmp	r3, lr
 800fb14:	d220      	bcs.n	800fb58 <tcp_parseopt+0xdc>
    return opts[optidx];
 800fb16:	4433      	add	r3, r6
 800fb18:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fb1a:	2b04      	cmp	r3, #4
 800fb1c:	d142      	bne.n	800fba4 <tcp_parseopt+0x128>
 800fb1e:	1c53      	adds	r3, r2, #1
 800fb20:	4283      	cmp	r3, r0
 800fb22:	da3f      	bge.n	800fba4 <tcp_parseopt+0x128>
  u16_t optidx = tcp_optidx++;
 800fb24:	1ccb      	adds	r3, r1, #3
 800fb26:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb28:	2c00      	cmp	r4, #0
 800fb2a:	d030      	beq.n	800fb8e <tcp_parseopt+0x112>
 800fb2c:	4596      	cmp	lr, r2
 800fb2e:	d81b      	bhi.n	800fb68 <tcp_parseopt+0xec>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb30:	1bd2      	subs	r2, r2, r7
  u16_t optidx = tcp_optidx++;
 800fb32:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb34:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 800fb36:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 800fb38:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fb3a:	5ca2      	ldrb	r2, [r4, r2]
 800fb3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb40:	d81a      	bhi.n	800fb78 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb42:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 800fb48:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fb4a:	1e5a      	subs	r2, r3, #1
 800fb4c:	b292      	uxth	r2, r2
 800fb4e:	4552      	cmp	r2, sl
 800fb50:	bf88      	it	hi
 800fb52:	464b      	movhi	r3, r9
 800fb54:	866b      	strh	r3, [r5, #50]	; 0x32
          break;
 800fb56:	e7cb      	b.n	800faf0 <tcp_parseopt+0x74>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb58:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	5ce3      	ldrb	r3, [r4, r3]
 800fb5e:	e7dc      	b.n	800fb1a <tcp_parseopt+0x9e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb60:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	5ce3      	ldrb	r3, [r4, r3]
 800fb66:	e7bf      	b.n	800fae8 <tcp_parseopt+0x6c>
    return opts[optidx];
 800fb68:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800fb6a:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb6c:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fb6e:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800fb70:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fb72:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb76:	d9e4      	bls.n	800fb42 <tcp_parseopt+0xc6>
    return opts[optidx];
 800fb78:	4433      	add	r3, r6
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
 800fb7c:	e7e4      	b.n	800fb48 <tcp_parseopt+0xcc>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fb7e:	4b11      	ldr	r3, [pc, #68]	; (800fbc4 <tcp_parseopt+0x148>)
 800fb80:	f240 727d 	movw	r2, #1917	; 0x77d
 800fb84:	4910      	ldr	r1, [pc, #64]	; (800fbc8 <tcp_parseopt+0x14c>)
 800fb86:	4811      	ldr	r0, [pc, #68]	; (800fbcc <tcp_parseopt+0x150>)
 800fb88:	f005 f86e 	bl	8014c68 <iprintf>
 800fb8c:	e77b      	b.n	800fa86 <tcp_parseopt+0xa>
    return opts[optidx];
 800fb8e:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800fb90:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fb92:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800fb94:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fb96:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fb98:	e7ee      	b.n	800fb78 <tcp_parseopt+0xfc>
 800fb9a:	2a00      	cmp	r2, #0
 800fb9c:	d0b4      	beq.n	800fb08 <tcp_parseopt+0x8c>
 800fb9e:	f8a8 1000 	strh.w	r1, [r8]
 800fba2:	e7b1      	b.n	800fb08 <tcp_parseopt+0x8c>
 800fba4:	f8a8 2000 	strh.w	r2, [r8]
 800fba8:	e7ae      	b.n	800fb08 <tcp_parseopt+0x8c>
  u16_t optidx = tcp_optidx++;
 800fbaa:	3102      	adds	r1, #2
 800fbac:	f8a8 1000 	strh.w	r1, [r8]
 800fbb0:	e7aa      	b.n	800fb08 <tcp_parseopt+0x8c>
 800fbb2:	bf00      	nop
 800fbb4:	24037ae8 	.word	0x24037ae8
 800fbb8:	24037ae0 	.word	0x24037ae0
 800fbbc:	24037ae4 	.word	0x24037ae4
 800fbc0:	24037adc 	.word	0x24037adc
 800fbc4:	080196c8 	.word	0x080196c8
 800fbc8:	080198b8 	.word	0x080198b8
 800fbcc:	08017728 	.word	0x08017728
 800fbd0:	24037ad8 	.word	0x24037ad8

0800fbd4 <tcp_input>:
{
 800fbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd8:	4604      	mov	r4, r0
 800fbda:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800fbdc:	f7f8 f9d4 	bl	8007f88 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fbe0:	2c00      	cmp	r4, #0
 800fbe2:	f000 80d6 	beq.w	800fd92 <tcp_input+0x1be>
  if (p->len < TCP_HLEN) {
 800fbe6:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800fbe8:	4e6d      	ldr	r6, [pc, #436]	; (800fda0 <tcp_input+0x1cc>)
 800fbea:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800fbec:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800fbee:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800fbf0:	d805      	bhi.n	800fbfe <tcp_input+0x2a>
  pbuf_free(p);
 800fbf2:	4620      	mov	r0, r4
}
 800fbf4:	b007      	add	sp, #28
 800fbf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800fbfa:	f7fd bbad 	b.w	800d358 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fbfe:	4f69      	ldr	r7, [pc, #420]	; (800fda4 <tcp_input+0x1d0>)
 800fc00:	6839      	ldr	r1, [r7, #0]
 800fc02:	6978      	ldr	r0, [r7, #20]
 800fc04:	f003 f9f0 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 800fc08:	4605      	mov	r5, r0
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d1f1      	bne.n	800fbf2 <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fc14:	2be0      	cmp	r3, #224	; 0xe0
 800fc16:	d0ec      	beq.n	800fbf2 <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fc18:	6833      	ldr	r3, [r6, #0]
 800fc1a:	8998      	ldrh	r0, [r3, #12]
 800fc1c:	f7fc fbfa 	bl	800c414 <lwip_htons>
 800fc20:	0a80      	lsrs	r0, r0, #10
 800fc22:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fc26:	2913      	cmp	r1, #19
 800fc28:	d9e3      	bls.n	800fbf2 <tcp_input+0x1e>
 800fc2a:	8923      	ldrh	r3, [r4, #8]
 800fc2c:	b28a      	uxth	r2, r1
 800fc2e:	428b      	cmp	r3, r1
 800fc30:	d3df      	bcc.n	800fbf2 <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fc32:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800fc36:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fc38:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800fdd8 <tcp_input+0x204>
 800fc3c:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800fc3e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800fddc <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800fc42:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fc44:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800fc48:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800fc4c:	f080 819a 	bcs.w	800ff84 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fc50:	6823      	ldr	r3, [r4, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 836e 	beq.w	8010334 <tcp_input+0x760>
    pbuf_remove_header(p, TCP_HLEN);
 800fc58:	2114      	movs	r1, #20
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f7fd fb10 	bl	800d280 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800fc60:	8965      	ldrh	r5, [r4, #10]
 800fc62:	4b51      	ldr	r3, [pc, #324]	; (800fda8 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800fc64:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fc66:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800fc6a:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800fc6c:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800fc6e:	f7fd fb07 	bl	800d280 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fc72:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800fc76:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fc78:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800fc7c:	8943      	ldrh	r3, [r0, #10]
 800fc7e:	454b      	cmp	r3, r9
 800fc80:	d3b7      	bcc.n	800fbf2 <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fc82:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800fc84:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fc86:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800fc8a:	f7fd faf9 	bl	800d280 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fc8e:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fc90:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fc92:	442b      	add	r3, r5
 800fc94:	eba3 030a 	sub.w	r3, r3, sl
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fc9c:	2a00      	cmp	r2, #0
 800fc9e:	f040 8350 	bne.w	8010342 <tcp_input+0x76e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fca2:	6822      	ldr	r2, [r4, #0]
 800fca4:	8912      	ldrh	r2, [r2, #8]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d005      	beq.n	800fcb6 <tcp_input+0xe2>
 800fcaa:	4b40      	ldr	r3, [pc, #256]	; (800fdac <tcp_input+0x1d8>)
 800fcac:	22e0      	movs	r2, #224	; 0xe0
 800fcae:	4940      	ldr	r1, [pc, #256]	; (800fdb0 <tcp_input+0x1dc>)
 800fcb0:	4840      	ldr	r0, [pc, #256]	; (800fdb4 <tcp_input+0x1e0>)
 800fcb2:	f004 ffd9 	bl	8014c68 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fcb6:	6835      	ldr	r5, [r6, #0]
 800fcb8:	8828      	ldrh	r0, [r5, #0]
 800fcba:	f7fc fbab 	bl	800c414 <lwip_htons>
 800fcbe:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fcc0:	6835      	ldr	r5, [r6, #0]
 800fcc2:	8868      	ldrh	r0, [r5, #2]
 800fcc4:	f7fc fba6 	bl	800c414 <lwip_htons>
 800fcc8:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fcca:	6835      	ldr	r5, [r6, #0]
 800fccc:	6868      	ldr	r0, [r5, #4]
 800fcce:	f7fc fba5 	bl	800c41c <lwip_htonl>
 800fcd2:	4b39      	ldr	r3, [pc, #228]	; (800fdb8 <tcp_input+0x1e4>)
 800fcd4:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fcd6:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fcd8:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fcda:	68a8      	ldr	r0, [r5, #8]
 800fcdc:	f7fc fb9e 	bl	800c41c <lwip_htonl>
 800fce0:	4b36      	ldr	r3, [pc, #216]	; (800fdbc <tcp_input+0x1e8>)
 800fce2:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fce4:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fce6:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fce8:	89e8      	ldrh	r0, [r5, #14]
 800fcea:	f7fc fb93 	bl	800c414 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800fcee:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fcf0:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800fcf2:	8998      	ldrh	r0, [r3, #12]
 800fcf4:	f7fc fb8e 	bl	800c414 <lwip_htons>
 800fcf8:	4931      	ldr	r1, [pc, #196]	; (800fdc0 <tcp_input+0x1ec>)
 800fcfa:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800fcfe:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800fd00:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fd02:	0783      	lsls	r3, r0, #30
 800fd04:	f040 8144 	bne.w	800ff90 <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800fd08:	4b2e      	ldr	r3, [pc, #184]	; (800fdc4 <tcp_input+0x1f0>)
 800fd0a:	9305      	str	r3, [sp, #20]
 800fd0c:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd0e:	4b2e      	ldr	r3, [pc, #184]	; (800fdc8 <tcp_input+0x1f4>)
 800fd10:	681d      	ldr	r5, [r3, #0]
 800fd12:	2d00      	cmp	r5, #0
 800fd14:	f000 80e5 	beq.w	800fee2 <tcp_input+0x30e>
  prev = NULL;
 800fd18:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fd1c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800fdac <tcp_input+0x1d8>
 800fd20:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800fde0 <tcp_input+0x20c>
 800fd24:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fdb4 <tcp_input+0x1e0>
 800fd28:	e017      	b.n	800fd5a <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fd2a:	2b0a      	cmp	r3, #10
 800fd2c:	d021      	beq.n	800fd72 <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d028      	beq.n	800fd84 <tcp_input+0x1b0>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd32:	7a2a      	ldrb	r2, [r5, #8]
 800fd34:	b132      	cbz	r2, 800fd44 <tcp_input+0x170>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd3c:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d104      	bne.n	800fd4e <tcp_input+0x17a>
    if (pcb->remote_port == tcphdr->src &&
 800fd44:	6833      	ldr	r3, [r6, #0]
 800fd46:	8b29      	ldrh	r1, [r5, #24]
 800fd48:	881a      	ldrh	r2, [r3, #0]
 800fd4a:	4291      	cmp	r1, r2
 800fd4c:	d04a      	beq.n	800fde4 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd4e:	68eb      	ldr	r3, [r5, #12]
 800fd50:	46a8      	mov	r8, r5
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f000 80c5 	beq.w	800fee2 <tcp_input+0x30e>
 800fd58:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fd5a:	7d2b      	ldrb	r3, [r5, #20]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1e4      	bne.n	800fd2a <tcp_input+0x156>
 800fd60:	4653      	mov	r3, sl
 800fd62:	22fb      	movs	r2, #251	; 0xfb
 800fd64:	4659      	mov	r1, fp
 800fd66:	4648      	mov	r0, r9
 800fd68:	f004 ff7e 	bl	8014c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fd6c:	7d2b      	ldrb	r3, [r5, #20]
 800fd6e:	2b0a      	cmp	r3, #10
 800fd70:	d1dd      	bne.n	800fd2e <tcp_input+0x15a>
 800fd72:	4653      	mov	r3, sl
 800fd74:	22fc      	movs	r2, #252	; 0xfc
 800fd76:	4915      	ldr	r1, [pc, #84]	; (800fdcc <tcp_input+0x1f8>)
 800fd78:	4648      	mov	r0, r9
 800fd7a:	f004 ff75 	bl	8014c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fd7e:	7d2b      	ldrb	r3, [r5, #20]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d1d6      	bne.n	800fd32 <tcp_input+0x15e>
 800fd84:	4653      	mov	r3, sl
 800fd86:	22fd      	movs	r2, #253	; 0xfd
 800fd88:	4911      	ldr	r1, [pc, #68]	; (800fdd0 <tcp_input+0x1fc>)
 800fd8a:	4648      	mov	r0, r9
 800fd8c:	f004 ff6c 	bl	8014c68 <iprintf>
 800fd90:	e7cf      	b.n	800fd32 <tcp_input+0x15e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd92:	4b06      	ldr	r3, [pc, #24]	; (800fdac <tcp_input+0x1d8>)
 800fd94:	2283      	movs	r2, #131	; 0x83
 800fd96:	490f      	ldr	r1, [pc, #60]	; (800fdd4 <tcp_input+0x200>)
 800fd98:	4806      	ldr	r0, [pc, #24]	; (800fdb4 <tcp_input+0x1e0>)
 800fd9a:	f004 ff65 	bl	8014c68 <iprintf>
 800fd9e:	e722      	b.n	800fbe6 <tcp_input+0x12>
 800fda0:	24037adc 	.word	0x24037adc
 800fda4:	24030fd0 	.word	0x24030fd0
 800fda8:	24037ae0 	.word	0x24037ae0
 800fdac:	080196c8 	.word	0x080196c8
 800fdb0:	08019908 	.word	0x08019908
 800fdb4:	08017728 	.word	0x08017728
 800fdb8:	24037ad0 	.word	0x24037ad0
 800fdbc:	24037aac 	.word	0x24037aac
 800fdc0:	24037ab0 	.word	0x24037ab0
 800fdc4:	24037aea 	.word	0x24037aea
 800fdc8:	24037a90 	.word	0x24037a90
 800fdcc:	08019950 	.word	0x08019950
 800fdd0:	0801997c 	.word	0x0801997c
 800fdd4:	080198d4 	.word	0x080198d4
 800fdd8:	24037ae8 	.word	0x24037ae8
 800fddc:	24037ae4 	.word	0x24037ae4
 800fde0:	08019928 	.word	0x08019928
    if (pcb->remote_port == tcphdr->src &&
 800fde4:	885b      	ldrh	r3, [r3, #2]
 800fde6:	8aea      	ldrh	r2, [r5, #22]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d1b0      	bne.n	800fd4e <tcp_input+0x17a>
        pcb->local_port == tcphdr->dest &&
 800fdec:	686a      	ldr	r2, [r5, #4]
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d1ac      	bne.n	800fd4e <tcp_input+0x17a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdf4:	682a      	ldr	r2, [r5, #0]
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d1a8      	bne.n	800fd4e <tcp_input+0x17a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fdfc:	68eb      	ldr	r3, [r5, #12]
 800fdfe:	42ab      	cmp	r3, r5
 800fe00:	f000 8405 	beq.w	801060e <tcp_input+0xa3a>
      if (prev != NULL) {
 800fe04:	f1b8 0f00 	cmp.w	r8, #0
 800fe08:	d009      	beq.n	800fe1e <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800fe0a:	4a6e      	ldr	r2, [pc, #440]	; (800ffc4 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800fe0c:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800fe10:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800fe12:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800fe14:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fe16:	68eb      	ldr	r3, [r5, #12]
 800fe18:	42ab      	cmp	r3, r5
 800fe1a:	f000 8432 	beq.w	8010682 <tcp_input+0xaae>
    inseg.next = NULL;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	4f69      	ldr	r7, [pc, #420]	; (800ffc8 <tcp_input+0x3f4>)
    recv_data = NULL;
 800fe22:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffe4 <tcp_input+0x410>
    recv_flags = 0;
 800fe26:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800ffe8 <tcp_input+0x414>
    recv_acked = 0;
 800fe2a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800ffec <tcp_input+0x418>
    inseg.len = p->tot_len;
 800fe2e:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800fe30:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800fe32:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800fe36:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800fe3a:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800fe3e:	4b63      	ldr	r3, [pc, #396]	; (800ffcc <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800fe40:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800fe42:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800fe44:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800fe46:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800fe48:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800fe4a:	071a      	lsls	r2, r3, #28
 800fe4c:	d503      	bpl.n	800fe56 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800fe4e:	7b62      	ldrb	r2, [r4, #13]
 800fe50:	f042 0201 	orr.w	r2, r2, #1
 800fe54:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800fe56:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800fe58:	b172      	cbz	r2, 800fe78 <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f7fe ff6e 	bl	800ed3c <tcp_process_refused_data>
 800fe60:	300d      	adds	r0, #13
 800fe62:	f000 8276 	beq.w	8010352 <tcp_input+0x77e>
 800fe66:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800fe68:	b123      	cbz	r3, 800fe74 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe6a:	9b05      	ldr	r3, [sp, #20]
 800fe6c:	881b      	ldrh	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f040 826f 	bne.w	8010352 <tcp_input+0x77e>
  if (flags & TCP_RST) {
 800fe74:	4b55      	ldr	r3, [pc, #340]	; (800ffcc <tcp_input+0x3f8>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800fe78:	4c55      	ldr	r4, [pc, #340]	; (800ffd0 <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800fe7a:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 800fe7c:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800fe7e:	f140 814a 	bpl.w	8010116 <tcp_input+0x542>
    if (pcb->state == SYN_SENT) {
 800fe82:	7d29      	ldrb	r1, [r5, #20]
 800fe84:	2902      	cmp	r1, #2
 800fe86:	f000 8331 	beq.w	80104ec <tcp_input+0x918>
      if (seqno == pcb->rcv_nxt) {
 800fe8a:	4b52      	ldr	r3, [pc, #328]	; (800ffd4 <tcp_input+0x400>)
 800fe8c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	f000 8415 	beq.w	80106c0 <tcp_input+0xaec>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe96:	1a9b      	subs	r3, r3, r2
 800fe98:	d404      	bmi.n	800fea4 <tcp_input+0x2d0>
 800fe9a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800fe9c:	1a9b      	subs	r3, r3, r2
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f340 831f 	ble.w	80104e2 <tcp_input+0x90e>
      if (recv_flags & TF_RESET) {
 800fea4:	f899 3000 	ldrb.w	r3, [r9]
 800fea8:	0718      	lsls	r0, r3, #28
 800feaa:	f140 8258 	bpl.w	801035e <tcp_input+0x78a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800feae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800feb2:	b11b      	cbz	r3, 800febc <tcp_input+0x2e8>
 800feb4:	f06f 010d 	mvn.w	r1, #13
 800feb8:	6928      	ldr	r0, [r5, #16]
 800feba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800febc:	4841      	ldr	r0, [pc, #260]	; (800ffc4 <tcp_input+0x3f0>)
 800febe:	4629      	mov	r1, r5
 800fec0:	f7fe fb7a 	bl	800e5b8 <tcp_pcb_remove>
        tcp_free(pcb);
 800fec4:	4628      	mov	r0, r5
 800fec6:	f7fd fd63 	bl	800d990 <tcp_free>
    tcp_input_pcb = NULL;
 800feca:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800fecc:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800fece:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800fed0:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800fed4:	b110      	cbz	r0, 800fedc <tcp_input+0x308>
      pbuf_free(inseg.p);
 800fed6:	f7fd fa3f 	bl	800d358 <pbuf_free>
      inseg.p = NULL;
 800feda:	607d      	str	r5, [r7, #4]
}
 800fedc:	b007      	add	sp, #28
 800fede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fee2:	4b3d      	ldr	r3, [pc, #244]	; (800ffd8 <tcp_input+0x404>)
 800fee4:	681d      	ldr	r5, [r3, #0]
 800fee6:	2d00      	cmp	r5, #0
 800fee8:	d05b      	beq.n	800ffa2 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800feea:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800fff0 <tcp_input+0x41c>
 800feee:	f8df b104 	ldr.w	fp, [pc, #260]	; 800fff4 <tcp_input+0x420>
 800fef2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800fff8 <tcp_input+0x424>
 800fef6:	e002      	b.n	800fefe <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fef8:	68ed      	ldr	r5, [r5, #12]
 800fefa:	2d00      	cmp	r5, #0
 800fefc:	d051      	beq.n	800ffa2 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fefe:	7d2b      	ldrb	r3, [r5, #20]
 800ff00:	2b0a      	cmp	r3, #10
 800ff02:	4643      	mov	r3, r8
 800ff04:	d005      	beq.n	800ff12 <tcp_input+0x33e>
 800ff06:	f240 121f 	movw	r2, #287	; 0x11f
 800ff0a:	4659      	mov	r1, fp
 800ff0c:	4648      	mov	r0, r9
 800ff0e:	f004 feab 	bl	8014c68 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff12:	7a2a      	ldrb	r2, [r5, #8]
 800ff14:	b132      	cbz	r2, 800ff24 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff1c:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d1e9      	bne.n	800fef8 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800ff24:	6832      	ldr	r2, [r6, #0]
 800ff26:	8b2b      	ldrh	r3, [r5, #24]
 800ff28:	8811      	ldrh	r1, [r2, #0]
 800ff2a:	428b      	cmp	r3, r1
 800ff2c:	d1e4      	bne.n	800fef8 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800ff2e:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ff30:	8ae8      	ldrh	r0, [r5, #22]
 800ff32:	4290      	cmp	r0, r2
 800ff34:	d1e0      	bne.n	800fef8 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800ff36:	6869      	ldr	r1, [r5, #4]
 800ff38:	693a      	ldr	r2, [r7, #16]
 800ff3a:	4291      	cmp	r1, r2
 800ff3c:	d1dc      	bne.n	800fef8 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff3e:	6829      	ldr	r1, [r5, #0]
 800ff40:	697a      	ldr	r2, [r7, #20]
 800ff42:	4291      	cmp	r1, r2
 800ff44:	d1d8      	bne.n	800fef8 <tcp_input+0x324>
  if (flags & TCP_RST) {
 800ff46:	4a21      	ldr	r2, [pc, #132]	; (800ffcc <tcp_input+0x3f8>)
 800ff48:	7812      	ldrb	r2, [r2, #0]
 800ff4a:	0757      	lsls	r7, r2, #29
 800ff4c:	f53f ae51 	bmi.w	800fbf2 <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800ff50:	0796      	lsls	r6, r2, #30
 800ff52:	f140 83aa 	bpl.w	80106aa <tcp_input+0xad6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ff56:	4a1f      	ldr	r2, [pc, #124]	; (800ffd4 <tcp_input+0x400>)
 800ff58:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800ff5a:	6812      	ldr	r2, [r2, #0]
 800ff5c:	1a51      	subs	r1, r2, r1
 800ff5e:	d404      	bmi.n	800ff6a <tcp_input+0x396>
 800ff60:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800ff62:	1b89      	subs	r1, r1, r6
 800ff64:	2900      	cmp	r1, #0
 800ff66:	f340 83b6 	ble.w	80106d6 <tcp_input+0xb02>
  if ((tcplen > 0)) {
 800ff6a:	9b05      	ldr	r3, [sp, #20]
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f43f ae3f 	beq.w	800fbf2 <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800ff74:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ff76:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ff78:	f043 0302 	orr.w	r3, r3, #2
 800ff7c:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800ff7e:	f001 fb8f 	bl	80116a0 <tcp_output>
        pbuf_free(p);
 800ff82:	e636      	b.n	800fbf2 <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800ff84:	4a15      	ldr	r2, [pc, #84]	; (800ffdc <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ff86:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800ff88:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ff8a:	f7fd f979 	bl	800d280 <pbuf_remove_header>
 800ff8e:	e692      	b.n	800fcb6 <tcp_input+0xe2>
    tcplen++;
 800ff90:	1c53      	adds	r3, r2, #1
 800ff92:	4913      	ldr	r1, [pc, #76]	; (800ffe0 <tcp_input+0x40c>)
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800ff98:	429a      	cmp	r2, r3
    tcplen++;
 800ff9a:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800ff9c:	f67f aeb7 	bls.w	800fd0e <tcp_input+0x13a>
 800ffa0:	e627      	b.n	800fbf2 <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffa2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800fffc <tcp_input+0x428>
 800ffa6:	f8d9 8000 	ldr.w	r8, [r9]
 800ffaa:	f1b8 0f00 	cmp.w	r8, #0
 800ffae:	f000 8226 	beq.w	80103fe <tcp_input+0x82a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffb2:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ffb6:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800ffb8:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800ffba:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ffbc:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800ffc0:	e024      	b.n	801000c <tcp_input+0x438>
 800ffc2:	bf00      	nop
 800ffc4:	24037a90 	.word	0x24037a90
 800ffc8:	24037ab4 	.word	0x24037ab4
 800ffcc:	24037ab0 	.word	0x24037ab0
 800ffd0:	24037ad4 	.word	0x24037ad4
 800ffd4:	24037ad0 	.word	0x24037ad0
 800ffd8:	24037aa8 	.word	0x24037aa8
 800ffdc:	24037ae0 	.word	0x24037ae0
 800ffe0:	24037aea 	.word	0x24037aea
 800ffe4:	24037ac8 	.word	0x24037ac8
 800ffe8:	24037acc 	.word	0x24037acc
 800ffec:	24037ac4 	.word	0x24037ac4
 800fff0:	080196c8 	.word	0x080196c8
 800fff4:	080199fc 	.word	0x080199fc
 800fff8:	08017728 	.word	0x08017728
 800fffc:	24037a9c 	.word	0x24037a9c
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010000:	68eb      	ldr	r3, [r5, #12]
 8010002:	4629      	mov	r1, r5
 8010004:	461d      	mov	r5, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	f000 81fa 	beq.w	8010400 <tcp_input+0x82c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801000c:	7a2a      	ldrb	r2, [r5, #8]
 801000e:	b12a      	cbz	r2, 801001c <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010010:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 8010014:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010016:	b2db      	uxtb	r3, r3
 8010018:	429a      	cmp	r2, r3
 801001a:	d1f1      	bne.n	8010000 <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 801001c:	8aea      	ldrh	r2, [r5, #22]
 801001e:	8843      	ldrh	r3, [r0, #2]
 8010020:	429a      	cmp	r2, r3
 8010022:	d1ed      	bne.n	8010000 <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010024:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010026:	b10a      	cbz	r2, 801002c <tcp_input+0x458>
 8010028:	4572      	cmp	r2, lr
 801002a:	d1e9      	bne.n	8010000 <tcp_input+0x42c>
      if (prev != NULL) {
 801002c:	b129      	cbz	r1, 801003a <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801002e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010030:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010034:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010036:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801003a:	4aa8      	ldr	r2, [pc, #672]	; (80102dc <tcp_input+0x708>)
 801003c:	7812      	ldrb	r2, [r2, #0]
 801003e:	0751      	lsls	r1, r2, #29
 8010040:	f53f add7 	bmi.w	800fbf2 <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 8010044:	f012 0810 	ands.w	r8, r2, #16
 8010048:	f040 8266 	bne.w	8010518 <tcp_input+0x944>
  } else if (flags & TCP_SYN) {
 801004c:	0790      	lsls	r0, r2, #30
 801004e:	f57f add0 	bpl.w	800fbf2 <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 8010052:	7d68      	ldrb	r0, [r5, #21]
 8010054:	f7fe fc5e 	bl	800e914 <tcp_alloc>
    if (npcb == NULL) {
 8010058:	4681      	mov	r9, r0
 801005a:	2800      	cmp	r0, #0
 801005c:	f000 82c6 	beq.w	80105ec <tcp_input+0xa18>
    npcb->rcv_nxt = seqno + 1;
 8010060:	4b9f      	ldr	r3, [pc, #636]	; (80102e0 <tcp_input+0x70c>)
    npcb->remote_port = tcphdr->src;
 8010062:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 8010064:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 8010066:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 8010068:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801006a:	7849      	ldrb	r1, [r1, #1]
 801006c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 8010070:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 8010072:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010074:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010076:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 8010078:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801007a:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801007c:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801007e:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010080:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 8010082:	2303      	movs	r3, #3
 8010084:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 8010086:	f7fe fef1 	bl	800ee6c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801008a:	4b95      	ldr	r3, [pc, #596]	; (80102e0 <tcp_input+0x70c>)
    npcb->snd_nxt = iss;
 801008c:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010090:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 8010092:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010096:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 8010098:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801009c:	4a91      	ldr	r2, [pc, #580]	; (80102e4 <tcp_input+0x710>)
    npcb->snd_wl2 = iss;
 801009e:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80100a2:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 80100a4:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 80100a8:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80100ac:	7a6b      	ldrb	r3, [r5, #9]
 80100ae:	f003 030c 	and.w	r3, r3, #12
 80100b2:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 80100b6:	7a2b      	ldrb	r3, [r5, #8]
 80100b8:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 80100bc:	6813      	ldr	r3, [r2, #0]
 80100be:	f8c2 9000 	str.w	r9, [r2]
 80100c2:	f8c9 300c 	str.w	r3, [r9, #12]
 80100c6:	f001 fe0f 	bl	8011ce8 <tcp_timer_needed>
 80100ca:	4b87      	ldr	r3, [pc, #540]	; (80102e8 <tcp_input+0x714>)
 80100cc:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 80100ce:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 80100d0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80100d2:	f7ff fcd3 	bl	800fa7c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80100d6:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80100d8:	f109 0204 	add.w	r2, r9, #4
 80100dc:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 80100e0:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80100e2:	4610      	mov	r0, r2
 80100e4:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 80100e6:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80100ea:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80100ee:	f002 fdd3 	bl	8012c98 <ip4_route>
 80100f2:	9a05      	ldr	r2, [sp, #20]
 80100f4:	4601      	mov	r1, r0
 80100f6:	4628      	mov	r0, r5
 80100f8:	f7fe fed4 	bl	800eea4 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80100fc:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80100fe:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010102:	4648      	mov	r0, r9
 8010104:	f001 f8b0 	bl	8011268 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8010108:	2800      	cmp	r0, #0
 801010a:	f040 827a 	bne.w	8010602 <tcp_input+0xa2e>
    tcp_output(npcb);
 801010e:	4648      	mov	r0, r9
 8010110:	f001 fac6 	bl	80116a0 <tcp_output>
 8010114:	e56d      	b.n	800fbf2 <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010116:	079a      	lsls	r2, r3, #30
 8010118:	d504      	bpl.n	8010124 <tcp_input+0x550>
 801011a:	7d2b      	ldrb	r3, [r5, #20]
 801011c:	3b02      	subs	r3, #2
 801011e:	2b01      	cmp	r3, #1
 8010120:	f200 81df 	bhi.w	80104e2 <tcp_input+0x90e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010124:	8b6b      	ldrh	r3, [r5, #26]
 8010126:	06db      	lsls	r3, r3, #27
 8010128:	d402      	bmi.n	8010130 <tcp_input+0x55c>
    pcb->tmr = tcp_ticks;
 801012a:	4b70      	ldr	r3, [pc, #448]	; (80102ec <tcp_input+0x718>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 8010130:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 8010132:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 8010134:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 8010138:	f7ff fca0 	bl	800fa7c <tcp_parseopt>
  switch (pcb->state) {
 801013c:	7d2b      	ldrb	r3, [r5, #20]
 801013e:	3b02      	subs	r3, #2
 8010140:	2b07      	cmp	r3, #7
 8010142:	f63f aeaf 	bhi.w	800fea4 <tcp_input+0x2d0>
 8010146:	e8df f003 	tbb	[pc, r3]
 801014a:	1334      	.short	0x1334
 801014c:	04748f04 	.word	0x04748f04
 8010150:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 8010152:	4628      	mov	r0, r5
 8010154:	f7fe fff6 	bl	800f144 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010158:	f899 3000 	ldrb.w	r3, [r9]
 801015c:	069e      	lsls	r6, r3, #26
 801015e:	f57f aea1 	bpl.w	800fea4 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 8010162:	8b6b      	ldrh	r3, [r5, #26]
 8010164:	f043 0302 	orr.w	r3, r3, #2
 8010168:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801016a:	2307      	movs	r3, #7
 801016c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801016e:	e699      	b.n	800fea4 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 8010170:	4b5a      	ldr	r3, [pc, #360]	; (80102dc <tcp_input+0x708>)
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	06d9      	lsls	r1, r3, #27
 8010176:	f140 820d 	bpl.w	8010594 <tcp_input+0x9c0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801017a:	4b5d      	ldr	r3, [pc, #372]	; (80102f0 <tcp_input+0x71c>)
 801017c:	6819      	ldr	r1, [r3, #0]
 801017e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8010180:	43db      	mvns	r3, r3
 8010182:	42cb      	cmn	r3, r1
 8010184:	d404      	bmi.n	8010190 <tcp_input+0x5bc>
 8010186:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8010188:	1acb      	subs	r3, r1, r3
 801018a:	2b00      	cmp	r3, #0
 801018c:	f340 824d 	ble.w	801062a <tcp_input+0xa56>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010190:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010192:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010194:	8810      	ldrh	r0, [r2, #0]
 8010196:	4a52      	ldr	r2, [pc, #328]	; (80102e0 <tcp_input+0x70c>)
 8010198:	6812      	ldr	r2, [r2, #0]
 801019a:	4402      	add	r2, r0
 801019c:	8818      	ldrh	r0, [r3, #0]
 801019e:	9002      	str	r0, [sp, #8]
 80101a0:	4628      	mov	r0, r5
 80101a2:	885b      	ldrh	r3, [r3, #2]
 80101a4:	9301      	str	r3, [sp, #4]
 80101a6:	4b53      	ldr	r3, [pc, #332]	; (80102f4 <tcp_input+0x720>)
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	3304      	adds	r3, #4
 80101ac:	f001 f9fe 	bl	80115ac <tcp_rst>
    if (err != ERR_ABRT) {
 80101b0:	e678      	b.n	800fea4 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80101b2:	4b4a      	ldr	r3, [pc, #296]	; (80102dc <tcp_input+0x708>)
 80101b4:	781a      	ldrb	r2, [r3, #0]
 80101b6:	f002 0312 	and.w	r3, r2, #18
 80101ba:	2b12      	cmp	r3, #18
 80101bc:	f000 813a 	beq.w	8010434 <tcp_input+0x860>
      else if (flags & TCP_ACK) {
 80101c0:	06d0      	lsls	r0, r2, #27
 80101c2:	f57f ae6f 	bpl.w	800fea4 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101c6:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101c8:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101ca:	8811      	ldrh	r1, [r2, #0]
 80101cc:	4a44      	ldr	r2, [pc, #272]	; (80102e0 <tcp_input+0x70c>)
 80101ce:	8818      	ldrh	r0, [r3, #0]
 80101d0:	6812      	ldr	r2, [r2, #0]
 80101d2:	440a      	add	r2, r1
 80101d4:	4946      	ldr	r1, [pc, #280]	; (80102f0 <tcp_input+0x71c>)
 80101d6:	6809      	ldr	r1, [r1, #0]
 80101d8:	9002      	str	r0, [sp, #8]
 80101da:	4628      	mov	r0, r5
 80101dc:	885b      	ldrh	r3, [r3, #2]
 80101de:	9301      	str	r3, [sp, #4]
 80101e0:	4b44      	ldr	r3, [pc, #272]	; (80102f4 <tcp_input+0x720>)
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	3304      	adds	r3, #4
 80101e6:	f001 f9e1 	bl	80115ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80101ea:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 80101ee:	2b05      	cmp	r3, #5
 80101f0:	f63f ae58 	bhi.w	800fea4 <tcp_input+0x2d0>
          pcb->rtime = 0;
 80101f4:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 80101f6:	4628      	mov	r0, r5
          pcb->rtime = 0;
 80101f8:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80101fa:	f001 fc51 	bl	8011aa0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 80101fe:	e651      	b.n	800fea4 <tcp_input+0x2d0>
      tcp_receive(pcb);
 8010200:	4628      	mov	r0, r5
 8010202:	f7fe ff9f 	bl	800f144 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010206:	4b35      	ldr	r3, [pc, #212]	; (80102dc <tcp_input+0x708>)
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	06de      	lsls	r6, r3, #27
 801020c:	f57f ae4a 	bpl.w	800fea4 <tcp_input+0x2d0>
 8010210:	4b37      	ldr	r3, [pc, #220]	; (80102f0 <tcp_input+0x71c>)
 8010212:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	429a      	cmp	r2, r3
 8010218:	f47f ae44 	bne.w	800fea4 <tcp_input+0x2d0>
 801021c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801021e:	2b00      	cmp	r3, #0
 8010220:	f47f ae40 	bne.w	800fea4 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 8010224:	f899 3000 	ldrb.w	r3, [r9]
 8010228:	f043 0310 	orr.w	r3, r3, #16
 801022c:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 8010230:	e638      	b.n	800fea4 <tcp_input+0x2d0>
      tcp_receive(pcb);
 8010232:	4628      	mov	r0, r5
 8010234:	f7fe ff86 	bl	800f144 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010238:	f899 3000 	ldrb.w	r3, [r9]
 801023c:	069a      	lsls	r2, r3, #26
 801023e:	f57f ae31 	bpl.w	800fea4 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 8010242:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 8010244:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 8010246:	f043 0302 	orr.w	r3, r3, #2
 801024a:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801024c:	f7fd feb8 	bl	800dfc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010250:	4b24      	ldr	r3, [pc, #144]	; (80102e4 <tcp_input+0x710>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	42ab      	cmp	r3, r5
 8010256:	d05e      	beq.n	8010316 <tcp_input+0x742>
 8010258:	2b00      	cmp	r3, #0
 801025a:	d05f      	beq.n	801031c <tcp_input+0x748>
 801025c:	68da      	ldr	r2, [r3, #12]
 801025e:	42aa      	cmp	r2, r5
 8010260:	f000 8218 	beq.w	8010694 <tcp_input+0xac0>
 8010264:	4613      	mov	r3, r2
 8010266:	e7f7      	b.n	8010258 <tcp_input+0x684>
      tcp_receive(pcb);
 8010268:	4628      	mov	r0, r5
 801026a:	f7fe ff6b 	bl	800f144 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801026e:	f899 3000 	ldrb.w	r3, [r9]
 8010272:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010276:	4b19      	ldr	r3, [pc, #100]	; (80102dc <tcp_input+0x708>)
 8010278:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801027a:	f000 817b 	beq.w	8010574 <tcp_input+0x9a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801027e:	06d8      	lsls	r0, r3, #27
 8010280:	d504      	bpl.n	801028c <tcp_input+0x6b8>
 8010282:	4b1b      	ldr	r3, [pc, #108]	; (80102f0 <tcp_input+0x71c>)
 8010284:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	429a      	cmp	r2, r3
 801028a:	d035      	beq.n	80102f8 <tcp_input+0x724>
          tcp_ack_now(pcb);
 801028c:	8b6b      	ldrh	r3, [r5, #26]
 801028e:	f043 0302 	orr.w	r3, r3, #2
 8010292:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 8010294:	2308      	movs	r3, #8
 8010296:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8010298:	e604      	b.n	800fea4 <tcp_input+0x2d0>
      tcp_receive(pcb);
 801029a:	4628      	mov	r0, r5
 801029c:	f7fe ff52 	bl	800f144 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102a0:	4b0e      	ldr	r3, [pc, #56]	; (80102dc <tcp_input+0x708>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	06db      	lsls	r3, r3, #27
 80102a6:	f57f adfd 	bpl.w	800fea4 <tcp_input+0x2d0>
 80102aa:	4b11      	ldr	r3, [pc, #68]	; (80102f0 <tcp_input+0x71c>)
 80102ac:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	f47f adf7 	bne.w	800fea4 <tcp_input+0x2d0>
 80102b6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f47f adf3 	bne.w	800fea4 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 80102be:	4628      	mov	r0, r5
 80102c0:	f7fd fe7e 	bl	800dfc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80102c4:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <tcp_input+0x710>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	42ab      	cmp	r3, r5
 80102ca:	d024      	beq.n	8010316 <tcp_input+0x742>
 80102cc:	b333      	cbz	r3, 801031c <tcp_input+0x748>
 80102ce:	68da      	ldr	r2, [r3, #12]
 80102d0:	42aa      	cmp	r2, r5
 80102d2:	f000 81df 	beq.w	8010694 <tcp_input+0xac0>
 80102d6:	4613      	mov	r3, r2
 80102d8:	e7f8      	b.n	80102cc <tcp_input+0x6f8>
 80102da:	bf00      	nop
 80102dc:	24037ab0 	.word	0x24037ab0
 80102e0:	24037ad0 	.word	0x24037ad0
 80102e4:	24037a90 	.word	0x24037a90
 80102e8:	24037a94 	.word	0x24037a94
 80102ec:	24037aa0 	.word	0x24037aa0
 80102f0:	24037aac 	.word	0x24037aac
 80102f4:	24030fe0 	.word	0x24030fe0
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80102f8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1c6      	bne.n	801028c <tcp_input+0x6b8>
          tcp_ack_now(pcb);
 80102fe:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 8010300:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 8010302:	f043 0302 	orr.w	r3, r3, #2
 8010306:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 8010308:	f7fd fe5a 	bl	800dfc0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801030c:	4bab      	ldr	r3, [pc, #684]	; (80105bc <tcp_input+0x9e8>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	42ab      	cmp	r3, r5
 8010312:	f040 81c2 	bne.w	801069a <tcp_input+0xac6>
        TCP_RMV_ACTIVE(pcb);
 8010316:	68eb      	ldr	r3, [r5, #12]
 8010318:	4aa8      	ldr	r2, [pc, #672]	; (80105bc <tcp_input+0x9e8>)
 801031a:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801031c:	4ba8      	ldr	r3, [pc, #672]	; (80105c0 <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 801031e:	220a      	movs	r2, #10
 8010320:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	601d      	str	r5, [r3, #0]
 8010326:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 8010328:	2201      	movs	r2, #1
 801032a:	4ba6      	ldr	r3, [pc, #664]	; (80105c4 <tcp_input+0x9f0>)
 801032c:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801032e:	f001 fcdb 	bl	8011ce8 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 8010332:	e5b7      	b.n	800fea4 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010334:	4ba4      	ldr	r3, [pc, #656]	; (80105c8 <tcp_input+0x9f4>)
 8010336:	22c2      	movs	r2, #194	; 0xc2
 8010338:	49a4      	ldr	r1, [pc, #656]	; (80105cc <tcp_input+0x9f8>)
 801033a:	48a5      	ldr	r0, [pc, #660]	; (80105d0 <tcp_input+0x9fc>)
 801033c:	f004 fc94 	bl	8014c68 <iprintf>
 8010340:	e48a      	b.n	800fc58 <tcp_input+0x84>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010342:	4ba1      	ldr	r3, [pc, #644]	; (80105c8 <tcp_input+0x9f4>)
 8010344:	22df      	movs	r2, #223	; 0xdf
 8010346:	49a3      	ldr	r1, [pc, #652]	; (80105d4 <tcp_input+0xa00>)
 8010348:	48a1      	ldr	r0, [pc, #644]	; (80105d0 <tcp_input+0x9fc>)
 801034a:	f004 fc8d 	bl	8014c68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801034e:	8923      	ldrh	r3, [r4, #8]
 8010350:	e4a7      	b.n	800fca2 <tcp_input+0xce>
        if (pcb->rcv_ann_wnd == 0) {
 8010352:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8010354:	2b00      	cmp	r3, #0
 8010356:	f000 80da 	beq.w	801050e <tcp_input+0x93a>
 801035a:	4c9f      	ldr	r4, [pc, #636]	; (80105d8 <tcp_input+0xa04>)
 801035c:	e5b5      	b.n	800feca <tcp_input+0x2f6>
        if (recv_acked > 0) {
 801035e:	f8bb 2000 	ldrh.w	r2, [fp]
 8010362:	b15a      	cbz	r2, 801037c <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010364:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8010368:	b12b      	cbz	r3, 8010376 <tcp_input+0x7a2>
 801036a:	4629      	mov	r1, r5
 801036c:	6928      	ldr	r0, [r5, #16]
 801036e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8010370:	300d      	adds	r0, #13
 8010372:	f43f adaa 	beq.w	800feca <tcp_input+0x2f6>
          recv_acked = 0;
 8010376:	2300      	movs	r3, #0
 8010378:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801037c:	4628      	mov	r0, r5
 801037e:	f7fe fe43 	bl	800f008 <tcp_input_delayed_close>
 8010382:	2800      	cmp	r0, #0
 8010384:	f47f ada1 	bne.w	800feca <tcp_input+0x2f6>
        if (recv_data != NULL) {
 8010388:	f8d8 2000 	ldr.w	r2, [r8]
 801038c:	b1fa      	cbz	r2, 80103ce <tcp_input+0x7fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801038e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8010390:	b143      	cbz	r3, 80103a4 <tcp_input+0x7d0>
 8010392:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010396:	4b8c      	ldr	r3, [pc, #560]	; (80105c8 <tcp_input+0x9f4>)
 8010398:	4990      	ldr	r1, [pc, #576]	; (80105dc <tcp_input+0xa08>)
 801039a:	488d      	ldr	r0, [pc, #564]	; (80105d0 <tcp_input+0x9fc>)
 801039c:	f004 fc64 	bl	8014c68 <iprintf>
            pbuf_free(recv_data);
 80103a0:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 80103a4:	8b6b      	ldrh	r3, [r5, #26]
 80103a6:	f013 0310 	ands.w	r3, r3, #16
 80103aa:	f040 80dc 	bne.w	8010566 <tcp_input+0x992>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80103ae:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 80103b2:	2e00      	cmp	r6, #0
 80103b4:	f000 80fc 	beq.w	80105b0 <tcp_input+0x9dc>
 80103b8:	4629      	mov	r1, r5
 80103ba:	6928      	ldr	r0, [r5, #16]
 80103bc:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80103be:	f110 0f0d 	cmn.w	r0, #13
 80103c2:	f43f ad82 	beq.w	800feca <tcp_input+0x2f6>
          if (err != ERR_OK) {
 80103c6:	b110      	cbz	r0, 80103ce <tcp_input+0x7fa>
            pcb->refused_data = recv_data;
 80103c8:	f8d8 3000 	ldr.w	r3, [r8]
 80103cc:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 80103ce:	f899 3000 	ldrb.w	r3, [r9]
 80103d2:	0699      	lsls	r1, r3, #26
 80103d4:	d507      	bpl.n	80103e6 <tcp_input+0x812>
          if (pcb->refused_data != NULL) {
 80103d6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 80af 	beq.w	801053c <tcp_input+0x968>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80103de:	7b5a      	ldrb	r2, [r3, #13]
 80103e0:	f042 0220 	orr.w	r2, r2, #32
 80103e4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80103e6:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 80103e8:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 80103ea:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 80103ec:	f7fe fe0c 	bl	800f008 <tcp_input_delayed_close>
 80103f0:	2800      	cmp	r0, #0
 80103f2:	f47f ad6a 	bne.w	800feca <tcp_input+0x2f6>
        tcp_output(pcb);
 80103f6:	4628      	mov	r0, r5
 80103f8:	f001 f952 	bl	80116a0 <tcp_output>
 80103fc:	e565      	b.n	800feca <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80103fe:	6830      	ldr	r0, [r6, #0]
 8010400:	8980      	ldrh	r0, [r0, #12]
 8010402:	f7fc f807 	bl	800c414 <lwip_htons>
 8010406:	f010 0004 	ands.w	r0, r0, #4
 801040a:	f47f abf2 	bne.w	800fbf2 <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801040e:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010410:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010412:	8811      	ldrh	r1, [r2, #0]
 8010414:	4a72      	ldr	r2, [pc, #456]	; (80105e0 <tcp_input+0xa0c>)
 8010416:	881d      	ldrh	r5, [r3, #0]
 8010418:	6812      	ldr	r2, [r2, #0]
 801041a:	440a      	add	r2, r1
 801041c:	4971      	ldr	r1, [pc, #452]	; (80105e4 <tcp_input+0xa10>)
 801041e:	6809      	ldr	r1, [r1, #0]
 8010420:	9502      	str	r5, [sp, #8]
 8010422:	885b      	ldrh	r3, [r3, #2]
 8010424:	9301      	str	r3, [sp, #4]
 8010426:	4b70      	ldr	r3, [pc, #448]	; (80105e8 <tcp_input+0xa14>)
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	3304      	adds	r3, #4
 801042c:	f001 f8be 	bl	80115ac <tcp_rst>
 8010430:	f7ff bbdf 	b.w	800fbf2 <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 8010434:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8010436:	496b      	ldr	r1, [pc, #428]	; (80105e4 <tcp_input+0xa10>)
 8010438:	3301      	adds	r3, #1
 801043a:	6809      	ldr	r1, [r1, #0]
 801043c:	428b      	cmp	r3, r1
 801043e:	f47f aebf 	bne.w	80101c0 <tcp_input+0x5ec>
        pcb->lastack = ackno;
 8010442:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010444:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 8010446:	4b66      	ldr	r3, [pc, #408]	; (80105e0 <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 8010448:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801044a:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801044c:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801044e:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010450:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 8010452:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010454:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 8010456:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010458:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801045a:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801045c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801045e:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 8010462:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010464:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010468:	9205      	str	r2, [sp, #20]
 801046a:	f002 fc15 	bl	8012c98 <ip4_route>
 801046e:	9a05      	ldr	r2, [sp, #20]
 8010470:	4601      	mov	r1, r0
 8010472:	4630      	mov	r0, r6
 8010474:	f7fe fd16 	bl	800eea4 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010478:	f241 131c 	movw	r3, #4380	; 0x111c
 801047c:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801047e:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010480:	0081      	lsls	r1, r0, #2
 8010482:	429a      	cmp	r2, r3
 8010484:	4616      	mov	r6, r2
 8010486:	bf38      	it	cc
 8010488:	461e      	movcc	r6, r3
 801048a:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801048e:	f240 8148 	bls.w	8010722 <tcp_input+0xb4e>
 8010492:	b28b      	uxth	r3, r1
 8010494:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010498:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801049c:	2b00      	cmp	r3, #0
 801049e:	f000 8138 	beq.w	8010712 <tcp_input+0xb3e>
        --pcb->snd_queuelen;
 80104a2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 80104a6:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 80104a8:	3b01      	subs	r3, #1
 80104aa:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 80104ae:	2e00      	cmp	r6, #0
 80104b0:	f000 812a 	beq.w	8010708 <tcp_input+0xb34>
          pcb->unacked = rseg->next;
 80104b4:	6833      	ldr	r3, [r6, #0]
 80104b6:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7fd fcc3 	bl	800de44 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 80104be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 811d 	beq.w	8010700 <tcp_input+0xb2c>
          pcb->rtime = 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 80104ca:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80104ce:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80104d2:	b133      	cbz	r3, 80104e2 <tcp_input+0x90e>
 80104d4:	2200      	movs	r2, #0
 80104d6:	4629      	mov	r1, r5
 80104d8:	6928      	ldr	r0, [r5, #16]
 80104da:	4798      	blx	r3
        if (err == ERR_ABRT) {
 80104dc:	300d      	adds	r0, #13
 80104de:	f43f acf4 	beq.w	800feca <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 80104e2:	8b6b      	ldrh	r3, [r5, #26]
 80104e4:	f043 0302 	orr.w	r3, r3, #2
 80104e8:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 80104ea:	e4db      	b.n	800fea4 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 80104ec:	4b3d      	ldr	r3, [pc, #244]	; (80105e4 <tcp_input+0xa10>)
 80104ee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	f47f acd6 	bne.w	800fea4 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 80104f8:	f899 3000 	ldrb.w	r3, [r9]
 80104fc:	f043 0308 	orr.w	r3, r3, #8
 8010500:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010504:	8b6b      	ldrh	r3, [r5, #26]
 8010506:	f023 0301 	bic.w	r3, r3, #1
 801050a:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801050c:	e4ca      	b.n	800fea4 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 801050e:	4628      	mov	r0, r5
 8010510:	4c31      	ldr	r4, [pc, #196]	; (80105d8 <tcp_input+0xa04>)
 8010512:	f001 f893 	bl	801163c <tcp_send_empty_ack>
 8010516:	e4d8      	b.n	800feca <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010518:	8802      	ldrh	r2, [r0, #0]
 801051a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801051e:	9b05      	ldr	r3, [sp, #20]
 8010520:	881a      	ldrh	r2, [r3, #0]
 8010522:	4b2f      	ldr	r3, [pc, #188]	; (80105e0 <tcp_input+0xa0c>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	441a      	add	r2, r3
 8010528:	4b2e      	ldr	r3, [pc, #184]	; (80105e4 <tcp_input+0xa10>)
 801052a:	4628      	mov	r0, r5
 801052c:	6819      	ldr	r1, [r3, #0]
 801052e:	4b2e      	ldr	r3, [pc, #184]	; (80105e8 <tcp_input+0xa14>)
 8010530:	9300      	str	r3, [sp, #0]
 8010532:	3304      	adds	r3, #4
 8010534:	f001 f83a 	bl	80115ac <tcp_rst>
 8010538:	f7ff bb5b 	b.w	800fbf2 <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801053c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801053e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010542:	4293      	cmp	r3, r2
 8010544:	d001      	beq.n	801054a <tcp_input+0x976>
              pcb->rcv_wnd++;
 8010546:	3301      	adds	r3, #1
 8010548:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801054a:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801054e:	2e00      	cmp	r6, #0
 8010550:	f43f af49 	beq.w	80103e6 <tcp_input+0x812>
 8010554:	2300      	movs	r3, #0
 8010556:	4629      	mov	r1, r5
 8010558:	6928      	ldr	r0, [r5, #16]
 801055a:	461a      	mov	r2, r3
 801055c:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801055e:	300d      	adds	r0, #13
 8010560:	f47f af41 	bne.w	80103e6 <tcp_input+0x812>
 8010564:	e4b1      	b.n	800feca <tcp_input+0x2f6>
            pbuf_free(recv_data);
 8010566:	4610      	mov	r0, r2
 8010568:	f7fc fef6 	bl	800d358 <pbuf_free>
            tcp_abort(pcb);
 801056c:	4628      	mov	r0, r5
 801056e:	f7fe f969 	bl	800e844 <tcp_abort>
            goto aborted;
 8010572:	e4aa      	b.n	800feca <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010574:	06d9      	lsls	r1, r3, #27
 8010576:	f57f ac95 	bpl.w	800fea4 <tcp_input+0x2d0>
 801057a:	4b1a      	ldr	r3, [pc, #104]	; (80105e4 <tcp_input+0xa10>)
 801057c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	429a      	cmp	r2, r3
 8010582:	f47f ac8f 	bne.w	800fea4 <tcp_input+0x2d0>
 8010586:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8010588:	2b00      	cmp	r3, #0
 801058a:	f47f ac8b 	bne.w	800fea4 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 801058e:	2306      	movs	r3, #6
 8010590:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 8010592:	e487      	b.n	800fea4 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010594:	079b      	lsls	r3, r3, #30
 8010596:	f57f ac85 	bpl.w	800fea4 <tcp_input+0x2d0>
 801059a:	4b11      	ldr	r3, [pc, #68]	; (80105e0 <tcp_input+0xa0c>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105a0:	3b01      	subs	r3, #1
 80105a2:	4293      	cmp	r3, r2
 80105a4:	f47f ac7e 	bne.w	800fea4 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 80105a8:	4628      	mov	r0, r5
 80105aa:	f000 ff81 	bl	80114b0 <tcp_rexmit>
    if (err != ERR_ABRT) {
 80105ae:	e479      	b.n	800fea4 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80105b0:	4633      	mov	r3, r6
 80105b2:	4630      	mov	r0, r6
 80105b4:	4629      	mov	r1, r5
 80105b6:	f7fe fb8d 	bl	800ecd4 <tcp_recv_null>
 80105ba:	e700      	b.n	80103be <tcp_input+0x7ea>
 80105bc:	24037a90 	.word	0x24037a90
 80105c0:	24037aa8 	.word	0x24037aa8
 80105c4:	24037a94 	.word	0x24037a94
 80105c8:	080196c8 	.word	0x080196c8
 80105cc:	080198ec 	.word	0x080198ec
 80105d0:	08017728 	.word	0x08017728
 80105d4:	080198fc 	.word	0x080198fc
 80105d8:	24037ad4 	.word	0x24037ad4
 80105dc:	08019a98 	.word	0x08019a98
 80105e0:	24037ad0 	.word	0x24037ad0
 80105e4:	24037aac 	.word	0x24037aac
 80105e8:	24030fe0 	.word	0x24030fe0
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80105ec:	69ab      	ldr	r3, [r5, #24]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f43f aaff 	beq.w	800fbf2 <tcp_input+0x1e>
 80105f4:	4601      	mov	r1, r0
 80105f6:	f04f 32ff 	mov.w	r2, #4294967295
 80105fa:	6928      	ldr	r0, [r5, #16]
 80105fc:	4798      	blx	r3
 80105fe:	f7ff baf8 	b.w	800fbf2 <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 8010602:	4641      	mov	r1, r8
 8010604:	4648      	mov	r0, r9
 8010606:	f7fe f847 	bl	800e698 <tcp_abandon>
      return;
 801060a:	f7ff baf2 	b.w	800fbf2 <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801060e:	4b4b      	ldr	r3, [pc, #300]	; (801073c <tcp_input+0xb68>)
 8010610:	f240 120d 	movw	r2, #269	; 0x10d
 8010614:	494a      	ldr	r1, [pc, #296]	; (8010740 <tcp_input+0xb6c>)
 8010616:	484b      	ldr	r0, [pc, #300]	; (8010744 <tcp_input+0xb70>)
 8010618:	f004 fb26 	bl	8014c68 <iprintf>
      if (prev != NULL) {
 801061c:	f1b8 0f00 	cmp.w	r8, #0
 8010620:	f43f abf9 	beq.w	800fe16 <tcp_input+0x242>
 8010624:	68eb      	ldr	r3, [r5, #12]
 8010626:	f7ff bbf0 	b.w	800fe0a <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 801062a:	2304      	movs	r3, #4
 801062c:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801062e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d09b      	beq.n	801056c <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d056      	beq.n	80106e8 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801063a:	2200      	movs	r2, #0
 801063c:	4629      	mov	r1, r5
 801063e:	6928      	ldr	r0, [r5, #16]
 8010640:	4798      	blx	r3
          if (err != ERR_OK) {
 8010642:	2800      	cmp	r0, #0
 8010644:	d14c      	bne.n	80106e0 <tcp_input+0xb0c>
          tcp_receive(pcb);
 8010646:	4628      	mov	r0, r5
 8010648:	f7fe fd7c 	bl	800f144 <tcp_receive>
          if (recv_acked != 0) {
 801064c:	f8bb 3000 	ldrh.w	r3, [fp]
 8010650:	b113      	cbz	r3, 8010658 <tcp_input+0xa84>
            recv_acked--;
 8010652:	3b01      	subs	r3, #1
 8010654:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010658:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801065a:	f241 131c 	movw	r3, #4380	; 0x111c
 801065e:	004a      	lsls	r2, r1, #1
 8010660:	0088      	lsls	r0, r1, #2
 8010662:	429a      	cmp	r2, r3
 8010664:	4616      	mov	r6, r2
 8010666:	bf38      	it	cc
 8010668:	461e      	movcc	r6, r3
 801066a:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801066e:	d923      	bls.n	80106b8 <tcp_input+0xae4>
 8010670:	b283      	uxth	r3, r0
 8010672:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8010676:	f899 3000 	ldrb.w	r3, [r9]
 801067a:	069a      	lsls	r2, r3, #26
 801067c:	f57f ac12 	bpl.w	800fea4 <tcp_input+0x2d0>
 8010680:	e56f      	b.n	8010162 <tcp_input+0x58e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010682:	4b2e      	ldr	r3, [pc, #184]	; (801073c <tcp_input+0xb68>)
 8010684:	f240 1215 	movw	r2, #277	; 0x115
 8010688:	492f      	ldr	r1, [pc, #188]	; (8010748 <tcp_input+0xb74>)
 801068a:	482e      	ldr	r0, [pc, #184]	; (8010744 <tcp_input+0xb70>)
 801068c:	f004 faec 	bl	8014c68 <iprintf>
 8010690:	f7ff bbc5 	b.w	800fe1e <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 8010694:	68ea      	ldr	r2, [r5, #12]
 8010696:	60da      	str	r2, [r3, #12]
 8010698:	e640      	b.n	801031c <tcp_input+0x748>
          TCP_RMV_ACTIVE(pcb);
 801069a:	2b00      	cmp	r3, #0
 801069c:	f43f ae3e 	beq.w	801031c <tcp_input+0x748>
 80106a0:	68da      	ldr	r2, [r3, #12]
 80106a2:	42aa      	cmp	r2, r5
 80106a4:	d0f6      	beq.n	8010694 <tcp_input+0xac0>
 80106a6:	4613      	mov	r3, r2
 80106a8:	e7f7      	b.n	801069a <tcp_input+0xac6>
  } else if (flags & TCP_FIN) {
 80106aa:	07d0      	lsls	r0, r2, #31
 80106ac:	f57f ac5d 	bpl.w	800ff6a <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 80106b0:	4b26      	ldr	r3, [pc, #152]	; (801074c <tcp_input+0xb78>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	622b      	str	r3, [r5, #32]
 80106b6:	e458      	b.n	800ff6a <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106b8:	429a      	cmp	r2, r3
 80106ba:	bf88      	it	hi
 80106bc:	b293      	uxthhi	r3, r2
 80106be:	e7d8      	b.n	8010672 <tcp_input+0xa9e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80106c0:	2900      	cmp	r1, #0
 80106c2:	f47f af19 	bne.w	80104f8 <tcp_input+0x924>
 80106c6:	4b1d      	ldr	r3, [pc, #116]	; (801073c <tcp_input+0xb68>)
 80106c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80106cc:	4920      	ldr	r1, [pc, #128]	; (8010750 <tcp_input+0xb7c>)
 80106ce:	481d      	ldr	r0, [pc, #116]	; (8010744 <tcp_input+0xb70>)
 80106d0:	f004 faca 	bl	8014c68 <iprintf>
 80106d4:	e710      	b.n	80104f8 <tcp_input+0x924>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106d6:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80106da:	9b05      	ldr	r3, [sp, #20]
 80106dc:	881b      	ldrh	r3, [r3, #0]
 80106de:	e722      	b.n	8010526 <tcp_input+0x952>
            if (err != ERR_ABRT) {
 80106e0:	300d      	adds	r0, #13
 80106e2:	f43f abf2 	beq.w	800feca <tcp_input+0x2f6>
 80106e6:	e741      	b.n	801056c <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80106e8:	4b14      	ldr	r3, [pc, #80]	; (801073c <tcp_input+0xb68>)
 80106ea:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80106ee:	4919      	ldr	r1, [pc, #100]	; (8010754 <tcp_input+0xb80>)
 80106f0:	4814      	ldr	r0, [pc, #80]	; (8010744 <tcp_input+0xb70>)
 80106f2:	f004 fab9 	bl	8014c68 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80106f6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80106f8:	699b      	ldr	r3, [r3, #24]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d19d      	bne.n	801063a <tcp_input+0xa66>
 80106fe:	e735      	b.n	801056c <tcp_input+0x998>
          pcb->rtime = -1;
 8010700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010704:	862b      	strh	r3, [r5, #48]	; 0x30
 8010706:	e6e2      	b.n	80104ce <tcp_input+0x8fa>
          rseg = pcb->unsent;
 8010708:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801070a:	b176      	cbz	r6, 801072a <tcp_input+0xb56>
          pcb->unsent = rseg->next;
 801070c:	6833      	ldr	r3, [r6, #0]
 801070e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8010710:	e6d2      	b.n	80104b8 <tcp_input+0x8e4>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010712:	4b0a      	ldr	r3, [pc, #40]	; (801073c <tcp_input+0xb68>)
 8010714:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010718:	490f      	ldr	r1, [pc, #60]	; (8010758 <tcp_input+0xb84>)
 801071a:	480a      	ldr	r0, [pc, #40]	; (8010744 <tcp_input+0xb70>)
 801071c:	f004 faa4 	bl	8014c68 <iprintf>
 8010720:	e6bf      	b.n	80104a2 <tcp_input+0x8ce>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010722:	429a      	cmp	r2, r3
 8010724:	bf88      	it	hi
 8010726:	b293      	uxthhi	r3, r2
 8010728:	e6b4      	b.n	8010494 <tcp_input+0x8c0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801072a:	4b04      	ldr	r3, [pc, #16]	; (801073c <tcp_input+0xb68>)
 801072c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010730:	490a      	ldr	r1, [pc, #40]	; (801075c <tcp_input+0xb88>)
 8010732:	4804      	ldr	r0, [pc, #16]	; (8010744 <tcp_input+0xb70>)
 8010734:	f004 fa98 	bl	8014c68 <iprintf>
 8010738:	e7e8      	b.n	801070c <tcp_input+0xb38>
 801073a:	bf00      	nop
 801073c:	080196c8 	.word	0x080196c8
 8010740:	080199a4 	.word	0x080199a4
 8010744:	08017728 	.word	0x08017728
 8010748:	080199d0 	.word	0x080199d0
 801074c:	24037aa0 	.word	0x24037aa0
 8010750:	08019a2c 	.word	0x08019a2c
 8010754:	08019a78 	.word	0x08019a78
 8010758:	08019a4c 	.word	0x08019a4c
 801075c:	08019a64 	.word	0x08019a64

08010760 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8010760:	4a02      	ldr	r2, [pc, #8]	; (801076c <tcp_trigger_input_pcb_close+0xc>)
 8010762:	7813      	ldrb	r3, [r2, #0]
 8010764:	f043 0310 	orr.w	r3, r3, #16
 8010768:	7013      	strb	r3, [r2, #0]
}
 801076a:	4770      	bx	lr
 801076c:	24037acc 	.word	0x24037acc

08010770 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010774:	9f08      	ldr	r7, [sp, #32]
 8010776:	4680      	mov	r8, r0
 8010778:	460d      	mov	r5, r1
 801077a:	4614      	mov	r4, r2
 801077c:	461e      	mov	r6, r3
 801077e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010782:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010786:	2f00      	cmp	r7, #0
 8010788:	d033      	beq.n	80107f2 <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801078a:	42a5      	cmp	r5, r4
 801078c:	d20e      	bcs.n	80107ac <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801078e:	f019 0f02 	tst.w	r9, #2
 8010792:	d008      	beq.n	80107a6 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010794:	f205 51b7 	addw	r1, r5, #1463	; 0x5b7
 8010798:	f021 0103 	bic.w	r1, r1, #3
 801079c:	42a1      	cmp	r1, r4
 801079e:	bf28      	it	cs
 80107a0:	4621      	movcs	r1, r4
 80107a2:	b289      	uxth	r1, r1
 80107a4:	e003      	b.n	80107ae <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80107a6:	8b7b      	ldrh	r3, [r7, #26]
 80107a8:	065b      	lsls	r3, r3, #25
 80107aa:	d518      	bpl.n	80107de <tcp_pbuf_prealloc+0x6e>
 80107ac:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80107ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107b2:	4640      	mov	r0, r8
 80107b4:	f7fc fe40 	bl	800d438 <pbuf_alloc>
  if (p == NULL) {
 80107b8:	4604      	mov	r4, r0
 80107ba:	b168      	cbz	r0, 80107d8 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80107bc:	6803      	ldr	r3, [r0, #0]
 80107be:	b133      	cbz	r3, 80107ce <tcp_pbuf_prealloc+0x5e>
 80107c0:	4b0f      	ldr	r3, [pc, #60]	; (8010800 <tcp_pbuf_prealloc+0x90>)
 80107c2:	f240 120b 	movw	r2, #267	; 0x10b
 80107c6:	490f      	ldr	r1, [pc, #60]	; (8010804 <tcp_pbuf_prealloc+0x94>)
 80107c8:	480f      	ldr	r0, [pc, #60]	; (8010808 <tcp_pbuf_prealloc+0x98>)
 80107ca:	f004 fa4d 	bl	8014c68 <iprintf>
  *oversize = p->len - length;
 80107ce:	8963      	ldrh	r3, [r4, #10]
 80107d0:	1b5b      	subs	r3, r3, r5
 80107d2:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80107d4:	8125      	strh	r5, [r4, #8]
 80107d6:	8165      	strh	r5, [r4, #10]
  return p;
}
 80107d8:	4620      	mov	r0, r4
 80107da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 80107de:	f1ba 0f00 	cmp.w	sl, #0
 80107e2:	d0d7      	beq.n	8010794 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 80107e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1d4      	bne.n	8010794 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 80107ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d1d1      	bne.n	8010794 <tcp_pbuf_prealloc+0x24>
 80107f0:	e7dc      	b.n	80107ac <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80107f2:	4b03      	ldr	r3, [pc, #12]	; (8010800 <tcp_pbuf_prealloc+0x90>)
 80107f4:	22e9      	movs	r2, #233	; 0xe9
 80107f6:	4905      	ldr	r1, [pc, #20]	; (801080c <tcp_pbuf_prealloc+0x9c>)
 80107f8:	4803      	ldr	r0, [pc, #12]	; (8010808 <tcp_pbuf_prealloc+0x98>)
 80107fa:	f004 fa35 	bl	8014c68 <iprintf>
 80107fe:	e7c4      	b.n	801078a <tcp_pbuf_prealloc+0x1a>
 8010800:	08019ab4 	.word	0x08019ab4
 8010804:	08019b08 	.word	0x08019b08
 8010808:	08017728 	.word	0x08017728
 801080c:	08019ae8 	.word	0x08019ae8

08010810 <tcp_create_segment>:
{
 8010810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010814:	460e      	mov	r6, r1
 8010816:	f89d a020 	ldrb.w	sl, [sp, #32]
 801081a:	4690      	mov	r8, r2
 801081c:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801081e:	4607      	mov	r7, r0
 8010820:	2800      	cmp	r0, #0
 8010822:	d04a      	beq.n	80108ba <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010824:	2e00      	cmp	r6, #0
 8010826:	d050      	beq.n	80108ca <tcp_create_segment+0xba>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010828:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801082c:	2003      	movs	r0, #3
 801082e:	f7fc f987 	bl	800cb40 <memp_malloc>
 8010832:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010834:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010838:	2800      	cmp	r0, #0
 801083a:	d054      	beq.n	80108e6 <tcp_create_segment+0xd6>
  seg->flags = optflags;
 801083c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8010840:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010842:	8932      	ldrh	r2, [r6, #8]
 8010844:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 8010848:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801084a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801084c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801084e:	d32c      	bcc.n	80108aa <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 8010850:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010854:	4630      	mov	r0, r6
 8010856:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 8010858:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801085a:	f7fc fcdd 	bl	800d218 <pbuf_add_header>
 801085e:	4606      	mov	r6, r0
 8010860:	2800      	cmp	r0, #0
 8010862:	d139      	bne.n	80108d8 <tcp_create_segment+0xc8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010864:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010866:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010868:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801086a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801086e:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010872:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010876:	f7fb fdcd 	bl	800c414 <lwip_htons>
 801087a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801087e:	8b38      	ldrh	r0, [r7, #24]
 8010880:	68e7      	ldr	r7, [r4, #12]
 8010882:	f7fb fdc7 	bl	800c414 <lwip_htons>
 8010886:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010888:	4648      	mov	r0, r9
 801088a:	68e7      	ldr	r7, [r4, #12]
 801088c:	f7fb fdc6 	bl	800c41c <lwip_htonl>
 8010890:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010892:	ea45 0008 	orr.w	r0, r5, r8
 8010896:	68e7      	ldr	r7, [r4, #12]
 8010898:	f7fb fdbc 	bl	800c414 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801089c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801089e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 80108a0:	749e      	strb	r6, [r3, #18]
 80108a2:	74de      	strb	r6, [r3, #19]
}
 80108a4:	4620      	mov	r0, r4
 80108a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80108aa:	22b0      	movs	r2, #176	; 0xb0
 80108ac:	4b10      	ldr	r3, [pc, #64]	; (80108f0 <tcp_create_segment+0xe0>)
 80108ae:	4911      	ldr	r1, [pc, #68]	; (80108f4 <tcp_create_segment+0xe4>)
 80108b0:	4811      	ldr	r0, [pc, #68]	; (80108f8 <tcp_create_segment+0xe8>)
 80108b2:	f004 f9d9 	bl	8014c68 <iprintf>
  seg->len = p->tot_len - optlen;
 80108b6:	8932      	ldrh	r2, [r6, #8]
 80108b8:	e7ca      	b.n	8010850 <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80108ba:	4b0d      	ldr	r3, [pc, #52]	; (80108f0 <tcp_create_segment+0xe0>)
 80108bc:	22a3      	movs	r2, #163	; 0xa3
 80108be:	490f      	ldr	r1, [pc, #60]	; (80108fc <tcp_create_segment+0xec>)
 80108c0:	480d      	ldr	r0, [pc, #52]	; (80108f8 <tcp_create_segment+0xe8>)
 80108c2:	f004 f9d1 	bl	8014c68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80108c6:	2e00      	cmp	r6, #0
 80108c8:	d1ae      	bne.n	8010828 <tcp_create_segment+0x18>
 80108ca:	4b09      	ldr	r3, [pc, #36]	; (80108f0 <tcp_create_segment+0xe0>)
 80108cc:	22a4      	movs	r2, #164	; 0xa4
 80108ce:	490c      	ldr	r1, [pc, #48]	; (8010900 <tcp_create_segment+0xf0>)
 80108d0:	4809      	ldr	r0, [pc, #36]	; (80108f8 <tcp_create_segment+0xe8>)
 80108d2:	f004 f9c9 	bl	8014c68 <iprintf>
 80108d6:	e7a7      	b.n	8010828 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 80108d8:	4620      	mov	r0, r4
    return NULL;
 80108da:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 80108dc:	f7fd fab2 	bl	800de44 <tcp_seg_free>
}
 80108e0:	4620      	mov	r0, r4
 80108e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 80108e6:	4630      	mov	r0, r6
 80108e8:	f7fc fd36 	bl	800d358 <pbuf_free>
    return NULL;
 80108ec:	e7da      	b.n	80108a4 <tcp_create_segment+0x94>
 80108ee:	bf00      	nop
 80108f0:	08019ab4 	.word	0x08019ab4
 80108f4:	08019b60 	.word	0x08019b60
 80108f8:	08017728 	.word	0x08017728
 80108fc:	08019b1c 	.word	0x08019b1c
 8010900:	08019b3c 	.word	0x08019b3c

08010904 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010904:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8010906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801090a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801090c:	4606      	mov	r6, r0
 801090e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010910:	2022      	movs	r0, #34	; 0x22
 8010912:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 8010916:	461c      	mov	r4, r3
 8010918:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801091c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010920:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010924:	f7fc fd88 	bl	800d438 <pbuf_alloc>
  if (p != NULL) {
 8010928:	4605      	mov	r5, r0
 801092a:	b300      	cbz	r0, 801096e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801092c:	8943      	ldrh	r3, [r0, #10]
 801092e:	2b13      	cmp	r3, #19
 8010930:	d920      	bls.n	8010974 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 8010932:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 8010934:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 8010936:	f7fb fd6d 	bl	800c414 <lwip_htons>
 801093a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801093c:	4650      	mov	r0, sl
 801093e:	f7fb fd69 	bl	800c414 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8010942:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 8010944:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 8010946:	4630      	mov	r0, r6
 8010948:	f7fb fd68 	bl	800c41c <lwip_htonl>
 801094c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801094e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 8010952:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010954:	f7fb fd5e 	bl	800c414 <lwip_htons>
 8010958:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801095a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801095c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801095e:	f7fb fd59 	bl	800c414 <lwip_htons>
    tcphdr->chksum = 0;
 8010962:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 8010964:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8010966:	7423      	strb	r3, [r4, #16]
 8010968:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801096a:	74a3      	strb	r3, [r4, #18]
 801096c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801096e:	4628      	mov	r0, r5
 8010970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010974:	4b03      	ldr	r3, [pc, #12]	; (8010984 <tcp_output_alloc_header_common.constprop.0+0x80>)
 8010976:	f240 7223 	movw	r2, #1827	; 0x723
 801097a:	4903      	ldr	r1, [pc, #12]	; (8010988 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801097c:	4803      	ldr	r0, [pc, #12]	; (801098c <tcp_output_alloc_header_common.constprop.0+0x88>)
 801097e:	f004 f973 	bl	8014c68 <iprintf>
 8010982:	e7d6      	b.n	8010932 <tcp_output_alloc_header_common.constprop.0+0x2e>
 8010984:	08019ab4 	.word	0x08019ab4
 8010988:	08019b78 	.word	0x08019b78
 801098c:	08017728 	.word	0x08017728

08010990 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8010990:	b570      	push	{r4, r5, r6, lr}
 8010992:	460d      	mov	r5, r1
 8010994:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010996:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8010998:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801099a:	b190      	cbz	r0, 80109c2 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801099c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801099e:	2210      	movs	r2, #16
 80109a0:	8b21      	ldrh	r1, [r4, #24]
 80109a2:	9302      	str	r3, [sp, #8]
 80109a4:	e9cd 1200 	strd	r1, r2, [sp]
 80109a8:	4632      	mov	r2, r6
 80109aa:	4629      	mov	r1, r5
 80109ac:	8ae3      	ldrh	r3, [r4, #22]
 80109ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80109b0:	f7ff ffa8 	bl	8010904 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80109b4:	b118      	cbz	r0, 80109be <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80109b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80109b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109ba:	4413      	add	r3, r2
 80109bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 80109be:	b004      	add	sp, #16
 80109c0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80109c2:	4b04      	ldr	r3, [pc, #16]	; (80109d4 <tcp_output_alloc_header.constprop.0+0x44>)
 80109c4:	f240 7242 	movw	r2, #1858	; 0x742
 80109c8:	4903      	ldr	r1, [pc, #12]	; (80109d8 <tcp_output_alloc_header.constprop.0+0x48>)
 80109ca:	4804      	ldr	r0, [pc, #16]	; (80109dc <tcp_output_alloc_header.constprop.0+0x4c>)
 80109cc:	f004 f94c 	bl	8014c68 <iprintf>
 80109d0:	e7e4      	b.n	801099c <tcp_output_alloc_header.constprop.0+0xc>
 80109d2:	bf00      	nop
 80109d4:	08019ab4 	.word	0x08019ab4
 80109d8:	08019ba8 	.word	0x08019ba8
 80109dc:	08017728 	.word	0x08017728

080109e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80109e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109e2:	4604      	mov	r4, r0
 80109e4:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80109e6:	460d      	mov	r5, r1
{
 80109e8:	4617      	mov	r7, r2
 80109ea:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80109ec:	b321      	cbz	r1, 8010a38 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80109ee:	b35c      	cbz	r4, 8010a48 <tcp_output_control_segment+0x68>
 80109f0:	7a20      	ldrb	r0, [r4, #8]
 80109f2:	b9a8      	cbnz	r0, 8010a20 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 80109f4:	4630      	mov	r0, r6
 80109f6:	f002 f94f 	bl	8012c98 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 80109fa:	b1a8      	cbz	r0, 8010a28 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80109fc:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 80109fe:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010a00:	9400      	str	r4, [sp, #0]
 8010a02:	2406      	movs	r4, #6
 8010a04:	4632      	mov	r2, r6
 8010a06:	4639      	mov	r1, r7
 8010a08:	9002      	str	r0, [sp, #8]
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	9401      	str	r4, [sp, #4]
 8010a0e:	f002 fad9 	bl	8012fc4 <ip4_output_if>
 8010a12:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010a14:	4628      	mov	r0, r5
 8010a16:	f7fc fc9f 	bl	800d358 <pbuf_free>
  return err;
}
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	b005      	add	sp, #20
 8010a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 8010a20:	f7fc fae8 	bl	800cff4 <netif_get_by_index>
  if (netif == NULL) {
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d1e9      	bne.n	80109fc <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 8010a28:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	f7fc fc93 	bl	800d358 <pbuf_free>
}
 8010a32:	4620      	mov	r0, r4
 8010a34:	b005      	add	sp, #20
 8010a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010a38:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <tcp_output_control_segment+0x78>)
 8010a3a:	f240 7287 	movw	r2, #1927	; 0x787
 8010a3e:	4907      	ldr	r1, [pc, #28]	; (8010a5c <tcp_output_control_segment+0x7c>)
 8010a40:	4807      	ldr	r0, [pc, #28]	; (8010a60 <tcp_output_control_segment+0x80>)
 8010a42:	f004 f911 	bl	8014c68 <iprintf>
 8010a46:	e7d2      	b.n	80109ee <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f002 f925 	bl	8012c98 <ip4_route>
  if (netif == NULL) {
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d0ea      	beq.n	8010a28 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 8010a52:	23ff      	movs	r3, #255	; 0xff
 8010a54:	e7d4      	b.n	8010a00 <tcp_output_control_segment+0x20>
 8010a56:	bf00      	nop
 8010a58:	08019ab4 	.word	0x08019ab4
 8010a5c:	08019bd0 	.word	0x08019bd0
 8010a60:	08017728 	.word	0x08017728

08010a64 <tcp_write>:
{
 8010a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 8010a68:	2400      	movs	r4, #0
{
 8010a6a:	b091      	sub	sp, #68	; 0x44
 8010a6c:	9107      	str	r1, [sp, #28]
 8010a6e:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 8010a70:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a74:	2800      	cmp	r0, #0
 8010a76:	f000 8300 	beq.w	801107a <tcp_write+0x616>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010a7a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8010a7e:	4692      	mov	sl, r2
 8010a80:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8010a82:	4681      	mov	r9, r0
 8010a84:	085b      	lsrs	r3, r3, #1
 8010a86:	4293      	cmp	r3, r2
 8010a88:	bf28      	it	cs
 8010a8a:	4613      	movcs	r3, r2
 8010a8c:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	bf08      	it	eq
 8010a92:	4693      	moveq	fp, r2
  LWIP_ASSERT_CORE_LOCKED();
 8010a94:	f7f7 fa78 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010a98:	9b07      	ldr	r3, [sp, #28]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 82e1 	beq.w	8011062 <tcp_write+0x5fe>
  if ((pcb->state != ESTABLISHED) &&
 8010aa0:	f899 3014 	ldrb.w	r3, [r9, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010aa4:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 8010aa6:	2a02      	cmp	r2, #2
 8010aa8:	d902      	bls.n	8010ab0 <tcp_write+0x4c>
 8010aaa:	2b07      	cmp	r3, #7
 8010aac:	f040 829d 	bne.w	8010fea <tcp_write+0x586>
  } else if (len == 0) {
 8010ab0:	f1ba 0f00 	cmp.w	sl, #0
 8010ab4:	f000 80ec 	beq.w	8010c90 <tcp_write+0x22c>
  if (len > pcb->snd_buf) {
 8010ab8:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 8010abc:	4553      	cmp	r3, sl
 8010abe:	f0c0 82b7 	bcc.w	8011030 <tcp_write+0x5cc>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010ac2:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 8010ac6:	2e0f      	cmp	r6, #15
 8010ac8:	f200 82b2 	bhi.w	8011030 <tcp_write+0x5cc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010acc:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 8010ad0:	2e00      	cmp	r6, #0
 8010ad2:	f000 80d3 	beq.w	8010c7c <tcp_write+0x218>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f040 80dc 	bne.w	8010c94 <tcp_write+0x230>
 8010adc:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 8010ae0:	f1b8 0f00 	cmp.w	r8, #0
 8010ae4:	f000 8264 	beq.w	8010fb0 <tcp_write+0x54c>
 8010ae8:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010aea:	461a      	mov	r2, r3
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1fb      	bne.n	8010aea <tcp_write+0x86>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010af2:	7a94      	ldrb	r4, [r2, #10]
 8010af4:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010af6:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010af8:	00a4      	lsls	r4, r4, #2
 8010afa:	920b      	str	r2, [sp, #44]	; 0x2c
 8010afc:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010b00:	191a      	adds	r2, r3, r4
 8010b02:	4593      	cmp	fp, r2
 8010b04:	f2c0 81a7 	blt.w	8010e56 <tcp_write+0x3f2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010b08:	ebab 0404 	sub.w	r4, fp, r4
 8010b0c:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 8010b0e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010b12:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 8010b14:	930a      	str	r3, [sp, #40]	; 0x28
 8010b16:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f000 80cf 	beq.w	8010cbe <tcp_write+0x25a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010b20:	42a3      	cmp	r3, r4
 8010b22:	f200 818b 	bhi.w	8010e3c <tcp_write+0x3d8>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010b26:	45a2      	cmp	sl, r4
 8010b28:	4653      	mov	r3, sl
 8010b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b2c:	bf28      	it	cs
 8010b2e:	4623      	movcs	r3, r4
 8010b30:	4293      	cmp	r3, r2
 8010b32:	bf28      	it	cs
 8010b34:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 8010b36:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 8010b38:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010b3a:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 8010b3c:	b292      	uxth	r2, r2
      space -= oversize_used;
 8010b3e:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 8010b40:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010b44:	2a00      	cmp	r2, #0
 8010b46:	f000 8184 	beq.w	8010e52 <tcp_write+0x3ee>
 8010b4a:	459a      	cmp	sl, r3
 8010b4c:	f000 8181 	beq.w	8010e52 <tcp_write+0x3ee>
 8010b50:	4bb2      	ldr	r3, [pc, #712]	; (8010e1c <tcp_write+0x3b8>)
 8010b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b56:	49b2      	ldr	r1, [pc, #712]	; (8010e20 <tcp_write+0x3bc>)
 8010b58:	48b2      	ldr	r0, [pc, #712]	; (8010e24 <tcp_write+0x3c0>)
 8010b5a:	f004 f885 	bl	8014c68 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010b60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010b62:	459a      	cmp	sl, r3
 8010b64:	f200 80b0 	bhi.w	8010cc8 <tcp_write+0x264>
  struct pbuf *concat_p = NULL;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010b6c:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 8010b6e:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 8010b70:	45a2      	cmp	sl, r4
 8010b72:	f240 80ee 	bls.w	8010d52 <tcp_write+0x2ee>
 8010b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b78:	f04f 0800 	mov.w	r8, #0
 8010b7c:	f003 0301 	and.w	r3, r3, #1
 8010b80:	f8cd 8014 	str.w	r8, [sp, #20]
 8010b84:	9308      	str	r3, [sp, #32]
 8010b86:	4643      	mov	r3, r8
 8010b88:	46d8      	mov	r8, fp
 8010b8a:	469b      	mov	fp, r3
 8010b8c:	e042      	b.n	8010c14 <tcp_write+0x1b0>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010b8e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 80f0 	bne.w	8010d78 <tcp_write+0x314>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010b98:	2201      	movs	r2, #1
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	2036      	movs	r0, #54	; 0x36
 8010b9e:	f7fc fc4b 	bl	800d438 <pbuf_alloc>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f000 8100 	beq.w	8010da8 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010ba8:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010baa:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010bac:	9006      	str	r0, [sp, #24]
 8010bae:	4422      	add	r2, r4
 8010bb0:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010bb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bb6:	2036      	movs	r0, #54	; 0x36
 8010bb8:	f7fc fc3e 	bl	800d438 <pbuf_alloc>
 8010bbc:	9b06      	ldr	r3, [sp, #24]
 8010bbe:	4607      	mov	r7, r0
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	f000 8196 	beq.w	8010ef2 <tcp_write+0x48e>
      pbuf_cat(p/*header*/, p2/*data*/);
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f7fc fd66 	bl	800d698 <pbuf_cat>
    queuelen += pbuf_clen(p);
 8010bcc:	4638      	mov	r0, r7
 8010bce:	f7fc fd39 	bl	800d644 <pbuf_clen>
 8010bd2:	4430      	add	r0, r6
 8010bd4:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010bd6:	2e10      	cmp	r6, #16
 8010bd8:	d84a      	bhi.n	8010c70 <tcp_write+0x20c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010bda:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 8010bde:	2200      	movs	r2, #0
 8010be0:	4639      	mov	r1, r7
 8010be2:	4648      	mov	r0, r9
 8010be4:	4423      	add	r3, r4
 8010be6:	9200      	str	r2, [sp, #0]
 8010be8:	f7ff fe12 	bl	8010810 <tcp_create_segment>
 8010bec:	4607      	mov	r7, r0
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	f000 80da 	beq.w	8010da8 <tcp_write+0x344>
    if (queue == NULL) {
 8010bf4:	9b05      	ldr	r3, [sp, #20]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f000 80a3 	beq.w	8010d42 <tcp_write+0x2de>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010bfc:	f1bb 0f00 	cmp.w	fp, #0
 8010c00:	f000 80c2 	beq.w	8010d88 <tcp_write+0x324>
    pos += seglen;
 8010c04:	4425      	add	r5, r4
      prev_seg->next = seg;
 8010c06:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 8010c0a:	b2ac      	uxth	r4, r5
  while (pos < len) {
 8010c0c:	45a2      	cmp	sl, r4
 8010c0e:	f240 809e 	bls.w	8010d4e <tcp_write+0x2ea>
 8010c12:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 8010c14:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010c18:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010c1a:	b2ad      	uxth	r5, r5
 8010c1c:	4545      	cmp	r5, r8
 8010c1e:	bf28      	it	cs
 8010c20:	4645      	movcs	r5, r8
 8010c22:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d0b2      	beq.n	8010b8e <tcp_write+0x12a>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c2a:	4642      	mov	r2, r8
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	2036      	movs	r0, #54	; 0x36
 8010c30:	e9cd 9300 	strd	r9, r3, [sp]
 8010c34:	9b05      	ldr	r3, [sp, #20]
 8010c36:	fab3 f383 	clz	r3, r3
 8010c3a:	095b      	lsrs	r3, r3, #5
 8010c3c:	9302      	str	r3, [sp, #8]
 8010c3e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8010c42:	f7ff fd95 	bl	8010770 <tcp_pbuf_prealloc>
 8010c46:	4607      	mov	r7, r0
 8010c48:	2800      	cmp	r0, #0
 8010c4a:	f000 80ad 	beq.w	8010da8 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010c4e:	8943      	ldrh	r3, [r0, #10]
 8010c50:	42ab      	cmp	r3, r5
 8010c52:	f0c0 80a1 	bcc.w	8010d98 <tcp_write+0x334>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010c56:	9b07      	ldr	r3, [sp, #28]
 8010c58:	462a      	mov	r2, r5
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	1919      	adds	r1, r3, r4
 8010c5e:	f004 f9c4 	bl	8014fea <memcpy>
    queuelen += pbuf_clen(p);
 8010c62:	4638      	mov	r0, r7
 8010c64:	f7fc fcee 	bl	800d644 <pbuf_clen>
 8010c68:	4430      	add	r0, r6
 8010c6a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010c6c:	2e10      	cmp	r6, #16
 8010c6e:	d9b4      	bls.n	8010bda <tcp_write+0x176>
      pbuf_free(p);
 8010c70:	4638      	mov	r0, r7
 8010c72:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010c76:	f7fc fb6f 	bl	800d358 <pbuf_free>
      goto memerr;
 8010c7a:	e097      	b.n	8010dac <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f000 80b6 	beq.w	8010dee <tcp_write+0x38a>
 8010c82:	4b66      	ldr	r3, [pc, #408]	; (8010e1c <tcp_write+0x3b8>)
 8010c84:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010c88:	4967      	ldr	r1, [pc, #412]	; (8010e28 <tcp_write+0x3c4>)
 8010c8a:	4866      	ldr	r0, [pc, #408]	; (8010e24 <tcp_write+0x3c0>)
 8010c8c:	f003 ffec 	bl	8014c68 <iprintf>
  queuelen = pcb->snd_queuelen;
 8010c90:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 8010c94:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 8010c98:	f1b8 0f00 	cmp.w	r8, #0
 8010c9c:	f47f af24 	bne.w	8010ae8 <tcp_write+0x84>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010ca0:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f040 80ac 	bne.w	8010e02 <tcp_write+0x39e>
  while (pos < len) {
 8010caa:	f1ba 0f00 	cmp.w	sl, #0
 8010cae:	f000 81c8 	beq.w	8011042 <tcp_write+0x5de>
 8010cb2:	2400      	movs	r4, #0
 8010cb4:	940d      	str	r4, [sp, #52]	; 0x34
 8010cb6:	940c      	str	r4, [sp, #48]	; 0x30
 8010cb8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8010cbc:	e75b      	b.n	8010b76 <tcp_write+0x112>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010cbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cc2:	459a      	cmp	sl, r3
 8010cc4:	f67f af50 	bls.w	8010b68 <tcp_write+0x104>
 8010cc8:	2c00      	cmp	r4, #0
 8010cca:	f43f af4d 	beq.w	8010b68 <tcp_write+0x104>
 8010cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cd0:	8912      	ldrh	r2, [r2, #8]
 8010cd2:	920d      	str	r2, [sp, #52]	; 0x34
 8010cd4:	2a00      	cmp	r2, #0
 8010cd6:	f000 809c 	beq.w	8010e12 <tcp_write+0x3ae>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010cda:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010ce0:	42a7      	cmp	r7, r4
 8010ce2:	bfa8      	it	ge
 8010ce4:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ce6:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010ce8:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010cea:	f100 8188 	bmi.w	8010ffe <tcp_write+0x59a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010cee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	4613      	mov	r3, r2
 8010cf4:	6812      	ldr	r2, [r2, #0]
 8010cf6:	2a00      	cmp	r2, #0
 8010cf8:	d1fb      	bne.n	8010cf2 <tcp_write+0x28e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010cfa:	920c      	str	r2, [sp, #48]	; 0x30
 8010cfc:	7b1a      	ldrb	r2, [r3, #12]
 8010cfe:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8010d02:	d106      	bne.n	8010d12 <tcp_write+0x2ae>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010d04:	895a      	ldrh	r2, [r3, #10]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010d0a:	9a07      	ldr	r2, [sp, #28]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	f000 8168 	beq.w	8010fe2 <tcp_write+0x57e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010d12:	2201      	movs	r2, #1
 8010d14:	4629      	mov	r1, r5
 8010d16:	2000      	movs	r0, #0
 8010d18:	f7fc fb8e 	bl	800d438 <pbuf_alloc>
 8010d1c:	900c      	str	r0, [sp, #48]	; 0x30
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	f000 813f 	beq.w	8010fa2 <tcp_write+0x53e>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010d24:	9b07      	ldr	r3, [sp, #28]
 8010d26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d28:	440b      	add	r3, r1
 8010d2a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 8010d2c:	f7fc fc8a 	bl	800d644 <pbuf_clen>
 8010d30:	4430      	add	r0, r6
  u16_t extendlen = 0;
 8010d32:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 8010d34:	b286      	uxth	r6, r0
  u16_t extendlen = 0;
 8010d36:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 8010d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d3a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010d3c:	18ec      	adds	r4, r5, r3
 8010d3e:	b2a4      	uxth	r4, r4
 8010d40:	e716      	b.n	8010b70 <tcp_write+0x10c>
    pos += seglen;
 8010d42:	4425      	add	r5, r4
 8010d44:	9005      	str	r0, [sp, #20]
 8010d46:	b2ac      	uxth	r4, r5
  while (pos < len) {
 8010d48:	45a2      	cmp	sl, r4
 8010d4a:	f63f af62 	bhi.w	8010c12 <tcp_write+0x1ae>
 8010d4e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 8010d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f000 80dc 	beq.w	8010f12 <tcp_write+0x4ae>
    for (p = last_unsent->p; p; p = p->next) {
 8010d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d5c:	6854      	ldr	r4, [r2, #4]
 8010d5e:	2c00      	cmp	r4, #0
 8010d60:	f000 8091 	beq.w	8010e86 <tcp_write+0x422>
 8010d64:	469b      	mov	fp, r3
 8010d66:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 8010d68:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 8010d6a:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 8010d6c:	445b      	add	r3, fp
 8010d6e:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	d07a      	beq.n	8010e6a <tcp_write+0x406>
      pos += seglen;
 8010d74:	4614      	mov	r4, r2
 8010d76:	e7f7      	b.n	8010d68 <tcp_write+0x304>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010d78:	4b28      	ldr	r3, [pc, #160]	; (8010e1c <tcp_write+0x3b8>)
 8010d7a:	f240 2271 	movw	r2, #625	; 0x271
 8010d7e:	492b      	ldr	r1, [pc, #172]	; (8010e2c <tcp_write+0x3c8>)
 8010d80:	4828      	ldr	r0, [pc, #160]	; (8010e24 <tcp_write+0x3c0>)
 8010d82:	f003 ff71 	bl	8014c68 <iprintf>
 8010d86:	e707      	b.n	8010b98 <tcp_write+0x134>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010d88:	4b24      	ldr	r3, [pc, #144]	; (8010e1c <tcp_write+0x3b8>)
 8010d8a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010d8e:	4928      	ldr	r1, [pc, #160]	; (8010e30 <tcp_write+0x3cc>)
 8010d90:	4824      	ldr	r0, [pc, #144]	; (8010e24 <tcp_write+0x3c0>)
 8010d92:	f003 ff69 	bl	8014c68 <iprintf>
 8010d96:	e735      	b.n	8010c04 <tcp_write+0x1a0>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010d98:	4b20      	ldr	r3, [pc, #128]	; (8010e1c <tcp_write+0x3b8>)
 8010d9a:	f240 2266 	movw	r2, #614	; 0x266
 8010d9e:	4925      	ldr	r1, [pc, #148]	; (8010e34 <tcp_write+0x3d0>)
 8010da0:	4820      	ldr	r0, [pc, #128]	; (8010e24 <tcp_write+0x3c0>)
 8010da2:	f003 ff61 	bl	8014c68 <iprintf>
 8010da6:	e756      	b.n	8010c56 <tcp_write+0x1f2>
 8010da8:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dac:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8010db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db4:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 8010db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dba:	b113      	cbz	r3, 8010dc2 <tcp_write+0x35e>
    pbuf_free(concat_p);
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7fc facb 	bl	800d358 <pbuf_free>
  if (queue != NULL) {
 8010dc2:	f1b8 0f00 	cmp.w	r8, #0
 8010dc6:	d002      	beq.n	8010dce <tcp_write+0x36a>
    tcp_segs_free(queue);
 8010dc8:	4640      	mov	r0, r8
 8010dca:	f7fd f829 	bl	800de20 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8010dce:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 8010dd2:	b13b      	cbz	r3, 8010de4 <tcp_write+0x380>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010dd4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8010dd8:	b923      	cbnz	r3, 8010de4 <tcp_write+0x380>
 8010dda:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f000 808d 	beq.w	8010efe <tcp_write+0x49a>
  return ERR_MEM;
 8010de4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010de8:	b011      	add	sp, #68	; 0x44
 8010dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010dee:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f47f af45 	bne.w	8010c82 <tcp_write+0x21e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010df8:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f43f af58 	beq.w	8010cb2 <tcp_write+0x24e>
 8010e02:	4b06      	ldr	r3, [pc, #24]	; (8010e1c <tcp_write+0x3b8>)
 8010e04:	f240 224a 	movw	r2, #586	; 0x24a
 8010e08:	490b      	ldr	r1, [pc, #44]	; (8010e38 <tcp_write+0x3d4>)
 8010e0a:	4806      	ldr	r0, [pc, #24]	; (8010e24 <tcp_write+0x3c0>)
 8010e0c:	f003 ff2c 	bl	8014c68 <iprintf>
 8010e10:	e74b      	b.n	8010caa <tcp_write+0x246>
  struct pbuf *concat_p = NULL;
 8010e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e16:	930c      	str	r3, [sp, #48]	; 0x30
 8010e18:	e6ad      	b.n	8010b76 <tcp_write+0x112>
 8010e1a:	bf00      	nop
 8010e1c:	08019ab4 	.word	0x08019ab4
 8010e20:	08019cf0 	.word	0x08019cf0
 8010e24:	08017728 	.word	0x08017728
 8010e28:	08019c84 	.word	0x08019c84
 8010e2c:	08019dac 	.word	0x08019dac
 8010e30:	08019dbc 	.word	0x08019dbc
 8010e34:	08019d6c 	.word	0x08019d6c
 8010e38:	08019d3c 	.word	0x08019d3c
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010e3c:	4b94      	ldr	r3, [pc, #592]	; (8011090 <tcp_write+0x62c>)
 8010e3e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010e42:	4994      	ldr	r1, [pc, #592]	; (8011094 <tcp_write+0x630>)
 8010e44:	4894      	ldr	r0, [pc, #592]	; (8011098 <tcp_write+0x634>)
 8010e46:	f003 ff0f 	bl	8014c68 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010e4a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010e50:	e669      	b.n	8010b26 <tcp_write+0xc2>
 8010e52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010e54:	e734      	b.n	8010cc0 <tcp_write+0x25c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010e56:	4b8e      	ldr	r3, [pc, #568]	; (8011090 <tcp_write+0x62c>)
 8010e58:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e5c:	498f      	ldr	r1, [pc, #572]	; (801109c <tcp_write+0x638>)
 8010e5e:	488e      	ldr	r0, [pc, #568]	; (8011098 <tcp_write+0x634>)
 8010e60:	f003 ff02 	bl	8014c68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e66:	891b      	ldrh	r3, [r3, #8]
 8010e68:	e64e      	b.n	8010b08 <tcp_write+0xa4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010e6a:	8963      	ldrh	r3, [r4, #10]
 8010e6c:	465a      	mov	r2, fp
 8010e6e:	6860      	ldr	r0, [r4, #4]
 8010e70:	4629      	mov	r1, r5
 8010e72:	4418      	add	r0, r3
 8010e74:	f004 f8b9 	bl	8014fea <memcpy>
        p->len += oversize_used;
 8010e78:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010e7a:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 8010e7c:	445b      	add	r3, fp
 8010e7e:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010e80:	2a00      	cmp	r2, #0
 8010e82:	f47f af77 	bne.w	8010d74 <tcp_write+0x310>
    last_unsent->len += oversize_used;
 8010e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010e88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e8a:	8913      	ldrh	r3, [r2, #8]
 8010e8c:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 8010e8e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 8010e92:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 8010e94:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 8010e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d061      	beq.n	8010f62 <tcp_write+0x4fe>
    pbuf_cat(last_unsent->p, concat_p);
 8010e9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ea2:	6860      	ldr	r0, [r4, #4]
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	f7fc fbf7 	bl	800d698 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010eaa:	892a      	ldrh	r2, [r5, #8]
 8010eac:	8923      	ldrh	r3, [r4, #8]
 8010eae:	4413      	add	r3, r2
 8010eb0:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8010eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eb4:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 8010eb8:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 8010ebc:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 8010ec0:	4453      	add	r3, sl
 8010ec2:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010ec6:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 8010eca:	eba3 030a 	sub.w	r3, r3, sl
 8010ece:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 8010ed2:	b11e      	cbz	r6, 8010edc <tcp_write+0x478>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010ed4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d036      	beq.n	8010f4a <tcp_write+0x4e6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010edc:	b12f      	cbz	r7, 8010eea <tcp_write+0x486>
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	b11b      	cbz	r3, 8010eea <tcp_write+0x486>
 8010ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ee4:	f012 0502 	ands.w	r5, r2, #2
 8010ee8:	d025      	beq.n	8010f36 <tcp_write+0x4d2>
  return ERR_OK;
 8010eea:	2000      	movs	r0, #0
}
 8010eec:	b011      	add	sp, #68	; 0x44
 8010eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010ef8:	f7fc fa2e 	bl	800d358 <pbuf_free>
        goto memerr;
 8010efc:	e756      	b.n	8010dac <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010efe:	4b64      	ldr	r3, [pc, #400]	; (8011090 <tcp_write+0x62c>)
 8010f00:	f240 3227 	movw	r2, #807	; 0x327
 8010f04:	4966      	ldr	r1, [pc, #408]	; (80110a0 <tcp_write+0x63c>)
 8010f06:	4864      	ldr	r0, [pc, #400]	; (8011098 <tcp_write+0x634>)
 8010f08:	f003 feae 	bl	8014c68 <iprintf>
  return ERR_MEM;
 8010f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f10:	e76a      	b.n	8010de8 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 8010f12:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010f16:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 8010f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d051      	beq.n	8010fc4 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1bb      	bne.n	8010e9e <tcp_write+0x43a>
 8010f26:	4b5a      	ldr	r3, [pc, #360]	; (8011090 <tcp_write+0x62c>)
 8010f28:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010f2c:	495d      	ldr	r1, [pc, #372]	; (80110a4 <tcp_write+0x640>)
 8010f2e:	485a      	ldr	r0, [pc, #360]	; (8011098 <tcp_write+0x634>)
 8010f30:	f003 fe9a 	bl	8014c68 <iprintf>
 8010f34:	e7b3      	b.n	8010e9e <tcp_write+0x43a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010f36:	2008      	movs	r0, #8
 8010f38:	899c      	ldrh	r4, [r3, #12]
 8010f3a:	f7fb fa6b 	bl	800c414 <lwip_htons>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 8010f42:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010f44:	4314      	orrs	r4, r2
 8010f46:	819c      	strh	r4, [r3, #12]
 8010f48:	e74e      	b.n	8010de8 <tcp_write+0x384>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010f4a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1c4      	bne.n	8010edc <tcp_write+0x478>
 8010f52:	4b4f      	ldr	r3, [pc, #316]	; (8011090 <tcp_write+0x62c>)
 8010f54:	f240 3212 	movw	r2, #786	; 0x312
 8010f58:	4951      	ldr	r1, [pc, #324]	; (80110a0 <tcp_write+0x63c>)
 8010f5a:	484f      	ldr	r0, [pc, #316]	; (8011098 <tcp_write+0x634>)
 8010f5c:	f003 fe84 	bl	8014c68 <iprintf>
 8010f60:	e7bc      	b.n	8010edc <tcp_write+0x478>
  } else if (extendlen > 0) {
 8010f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d0a4      	beq.n	8010eb2 <tcp_write+0x44e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f6a:	6859      	ldr	r1, [r3, #4]
 8010f6c:	2900      	cmp	r1, #0
 8010f6e:	d02e      	beq.n	8010fce <tcp_write+0x56a>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f70:	680a      	ldr	r2, [r1, #0]
 8010f72:	2a00      	cmp	r2, #0
 8010f74:	d07f      	beq.n	8011076 <tcp_write+0x612>
 8010f76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8010f78:	e000      	b.n	8010f7c <tcp_write+0x518>
 8010f7a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 8010f7c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f7e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 8010f80:	4423      	add	r3, r4
 8010f82:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010f84:	4611      	mov	r1, r2
 8010f86:	2800      	cmp	r0, #0
 8010f88:	d1f7      	bne.n	8010f7a <tcp_write+0x516>
    p->tot_len += extendlen;
 8010f8a:	8913      	ldrh	r3, [r2, #8]
 8010f8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010f8e:	440b      	add	r3, r1
 8010f90:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8010f92:	8953      	ldrh	r3, [r2, #10]
 8010f94:	440b      	add	r3, r1
 8010f96:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 8010f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f9a:	8913      	ldrh	r3, [r2, #8]
 8010f9c:	440b      	add	r3, r1
 8010f9e:	8113      	strh	r3, [r2, #8]
 8010fa0:	e787      	b.n	8010eb2 <tcp_write+0x44e>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010fa2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8010fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010faa:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 8010fae:	e70e      	b.n	8010dce <tcp_write+0x36a>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010fb0:	4b37      	ldr	r3, [pc, #220]	; (8011090 <tcp_write+0x62c>)
 8010fb2:	f240 1255 	movw	r2, #341	; 0x155
 8010fb6:	493c      	ldr	r1, [pc, #240]	; (80110a8 <tcp_write+0x644>)
 8010fb8:	4837      	ldr	r0, [pc, #220]	; (8011098 <tcp_write+0x634>)
 8010fba:	f003 fe55 	bl	8014c68 <iprintf>
  queuelen = pcb->snd_queuelen;
 8010fbe:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 8010fc2:	e667      	b.n	8010c94 <tcp_write+0x230>
  } else if (extendlen > 0) {
 8010fc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fc6:	b19b      	cbz	r3, 8010ff0 <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d1cc      	bne.n	8010f68 <tcp_write+0x504>
 8010fce:	4b30      	ldr	r3, [pc, #192]	; (8011090 <tcp_write+0x62c>)
 8010fd0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010fd4:	4935      	ldr	r1, [pc, #212]	; (80110ac <tcp_write+0x648>)
 8010fd6:	4830      	ldr	r0, [pc, #192]	; (8011098 <tcp_write+0x634>)
 8010fd8:	f003 fe46 	bl	8014c68 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fde:	6859      	ldr	r1, [r3, #4]
 8010fe0:	e7c6      	b.n	8010f70 <tcp_write+0x50c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fe4:	bba3      	cbnz	r3, 8011050 <tcp_write+0x5ec>
          extendlen = seglen;
 8010fe6:	950d      	str	r5, [sp, #52]	; 0x34
 8010fe8:	e6a6      	b.n	8010d38 <tcp_write+0x2d4>
    return ERR_CONN;
 8010fea:	f06f 000a 	mvn.w	r0, #10
 8010fee:	e6fb      	b.n	8010de8 <tcp_write+0x384>
  if (last_unsent == NULL) {
 8010ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	f47f af5d 	bne.w	8010eb2 <tcp_write+0x44e>
    pcb->unsent = queue;
 8010ff8:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 8010ffc:	e75c      	b.n	8010eb8 <tcp_write+0x454>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010ffe:	e9cd 9300 	strd	r9, r3, [sp]
 8011002:	2301      	movs	r3, #1
 8011004:	4622      	mov	r2, r4
 8011006:	4629      	mov	r1, r5
 8011008:	2000      	movs	r0, #0
 801100a:	9302      	str	r3, [sp, #8]
 801100c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8011010:	f7ff fbae 	bl	8010770 <tcp_pbuf_prealloc>
 8011014:	4603      	mov	r3, r0
 8011016:	4604      	mov	r4, r0
 8011018:	900c      	str	r0, [sp, #48]	; 0x30
 801101a:	2800      	cmp	r0, #0
 801101c:	d0c1      	beq.n	8010fa2 <tcp_write+0x53e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801101e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011020:	462a      	mov	r2, r5
 8011022:	9907      	ldr	r1, [sp, #28]
 8011024:	4401      	add	r1, r0
 8011026:	6858      	ldr	r0, [r3, #4]
 8011028:	f003 ffdf 	bl	8014fea <memcpy>
        queuelen += pbuf_clen(concat_p);
 801102c:	4620      	mov	r0, r4
 801102e:	e67d      	b.n	8010d2c <tcp_write+0x2c8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011030:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 8011034:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801103c:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 8011040:	e6d2      	b.n	8010de8 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 8011042:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011046:	46d0      	mov	r8, sl
 8011048:	4657      	mov	r7, sl
 801104a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801104e:	e7d3      	b.n	8010ff8 <tcp_write+0x594>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011050:	4b0f      	ldr	r3, [pc, #60]	; (8011090 <tcp_write+0x62c>)
 8011052:	f240 2231 	movw	r2, #561	; 0x231
 8011056:	4916      	ldr	r1, [pc, #88]	; (80110b0 <tcp_write+0x64c>)
 8011058:	480f      	ldr	r0, [pc, #60]	; (8011098 <tcp_write+0x634>)
 801105a:	f003 fe05 	bl	8014c68 <iprintf>
          extendlen = seglen;
 801105e:	950d      	str	r5, [sp, #52]	; 0x34
 8011060:	e66a      	b.n	8010d38 <tcp_write+0x2d4>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011062:	4b0b      	ldr	r3, [pc, #44]	; (8011090 <tcp_write+0x62c>)
 8011064:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011068:	4912      	ldr	r1, [pc, #72]	; (80110b4 <tcp_write+0x650>)
 801106a:	480b      	ldr	r0, [pc, #44]	; (8011098 <tcp_write+0x634>)
 801106c:	f003 fdfc 	bl	8014c68 <iprintf>
 8011070:	f06f 000f 	mvn.w	r0, #15
 8011074:	e6b8      	b.n	8010de8 <tcp_write+0x384>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011076:	460a      	mov	r2, r1
 8011078:	e787      	b.n	8010f8a <tcp_write+0x526>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801107a:	4b05      	ldr	r3, [pc, #20]	; (8011090 <tcp_write+0x62c>)
 801107c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011080:	490d      	ldr	r1, [pc, #52]	; (80110b8 <tcp_write+0x654>)
 8011082:	4805      	ldr	r0, [pc, #20]	; (8011098 <tcp_write+0x634>)
 8011084:	f003 fdf0 	bl	8014c68 <iprintf>
 8011088:	f06f 000f 	mvn.w	r0, #15
 801108c:	e6ac      	b.n	8010de8 <tcp_write+0x384>
 801108e:	bf00      	nop
 8011090:	08019ab4 	.word	0x08019ab4
 8011094:	08019cd0 	.word	0x08019cd0
 8011098:	08017728 	.word	0x08017728
 801109c:	08019cb8 	.word	0x08019cb8
 80110a0:	08019e40 	.word	0x08019e40
 80110a4:	08019dd0 	.word	0x08019dd0
 80110a8:	08019c48 	.word	0x08019c48
 80110ac:	08019e08 	.word	0x08019e08
 80110b0:	08019d10 	.word	0x08019d10
 80110b4:	08019c14 	.word	0x08019c14
 80110b8:	08019bfc 	.word	0x08019bfc

080110bc <tcp_split_unsent_seg>:
{
 80110bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80110c0:	4605      	mov	r5, r0
{
 80110c2:	b083      	sub	sp, #12
 80110c4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f000 80a7 	beq.w	801121a <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 80110cc:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 80110ce:	b376      	cbz	r6, 801112e <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 80110d0:	2c00      	cmp	r4, #0
 80110d2:	f000 80b3 	beq.w	801123c <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 80110d6:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 80110da:	45a1      	cmp	r9, r4
 80110dc:	f240 8099 	bls.w	8011212 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80110e0:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80110e2:	42a3      	cmp	r3, r4
 80110e4:	d328      	bcc.n	8011138 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 80110e6:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 80110ea:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80110ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110f2:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80110f4:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 80110f8:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80110fc:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011100:	eb08 010b 	add.w	r1, r8, fp
 8011104:	b289      	uxth	r1, r1
 8011106:	f7fc f997 	bl	800d438 <pbuf_alloc>
  if (p == NULL) {
 801110a:	4607      	mov	r7, r0
 801110c:	b178      	cbz	r0, 801112e <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801110e:	6870      	ldr	r0, [r6, #4]
 8011110:	8932      	ldrh	r2, [r6, #8]
 8011112:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011114:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 8011116:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011118:	4642      	mov	r2, r8
 801111a:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801111c:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801111e:	b29b      	uxth	r3, r3
 8011120:	f7fc fb12 	bl	800d748 <pbuf_copy_partial>
 8011124:	4540      	cmp	r0, r8
 8011126:	d01d      	beq.n	8011164 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 8011128:	4638      	mov	r0, r7
 801112a:	f7fc f915 	bl	800d358 <pbuf_free>
  return ERR_MEM;
 801112e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011132:	b003      	add	sp, #12
 8011134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011138:	4b45      	ldr	r3, [pc, #276]	; (8011250 <tcp_split_unsent_seg+0x194>)
 801113a:	f240 325b 	movw	r2, #859	; 0x35b
 801113e:	4945      	ldr	r1, [pc, #276]	; (8011254 <tcp_split_unsent_seg+0x198>)
 8011140:	4845      	ldr	r0, [pc, #276]	; (8011258 <tcp_split_unsent_seg+0x19c>)
 8011142:	f003 fd91 	bl	8014c68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011146:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801114a:	f1b9 0f00 	cmp.w	r9, #0
 801114e:	d1ca      	bne.n	80110e6 <tcp_split_unsent_seg+0x2a>
 8011150:	4b3f      	ldr	r3, [pc, #252]	; (8011250 <tcp_split_unsent_seg+0x194>)
 8011152:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011156:	4941      	ldr	r1, [pc, #260]	; (801125c <tcp_split_unsent_seg+0x1a0>)
 8011158:	483f      	ldr	r0, [pc, #252]	; (8011258 <tcp_split_unsent_seg+0x19c>)
 801115a:	f003 fd85 	bl	8014c68 <iprintf>
  remainder = useg->len - split;
 801115e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 8011162:	e7c0      	b.n	80110e6 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011164:	68f3      	ldr	r3, [r6, #12]
 8011166:	8998      	ldrh	r0, [r3, #12]
 8011168:	f7fb f954 	bl	800c414 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801116c:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011170:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 8011174:	d159      	bne.n	801122a <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011176:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801117a:	f018 0f01 	tst.w	r8, #1
 801117e:	d003      	beq.n	8011188 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 8011180:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8011184:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011188:	68f3      	ldr	r3, [r6, #12]
 801118a:	6858      	ldr	r0, [r3, #4]
 801118c:	f7fb f946 	bl	800c41c <lwip_htonl>
 8011190:	f8cd a000 	str.w	sl, [sp]
 8011194:	1823      	adds	r3, r4, r0
 8011196:	465a      	mov	r2, fp
 8011198:	4639      	mov	r1, r7
 801119a:	4628      	mov	r0, r5
 801119c:	f7ff fb38 	bl	8010810 <tcp_create_segment>
  if (seg == NULL) {
 80111a0:	4682      	mov	sl, r0
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d0c0      	beq.n	8011128 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80111a6:	6870      	ldr	r0, [r6, #4]
 80111a8:	eba4 0409 	sub.w	r4, r4, r9
 80111ac:	f7fc fa4a 	bl	800d644 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80111b0:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80111b2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80111b6:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80111b8:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80111ba:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80111bc:	4610      	mov	r0, r2
 80111be:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80111c0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80111c4:	b289      	uxth	r1, r1
 80111c6:	f7fc f9e5 	bl	800d594 <pbuf_realloc>
  useg->len -= remainder;
 80111ca:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80111cc:	4640      	mov	r0, r8
  useg->len -= remainder;
 80111ce:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80111d0:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 80111d2:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80111d4:	899c      	ldrh	r4, [r3, #12]
 80111d6:	f7fb f91d 	bl	800c414 <lwip_htons>
 80111da:	68f3      	ldr	r3, [r6, #12]
 80111dc:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80111de:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80111e0:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80111e2:	f7fc fa2f 	bl	800d644 <pbuf_clen>
 80111e6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80111ea:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111ec:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80111f0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111f4:	f7fc fa26 	bl	800d644 <pbuf_clen>
 80111f8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 80111fc:	4418      	add	r0, r3
  seg->next = useg->next;
 80111fe:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011200:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 8011204:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 8011208:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801120c:	f8da 3000 	ldr.w	r3, [sl]
 8011210:	b183      	cbz	r3, 8011234 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 8011212:	2000      	movs	r0, #0
}
 8011214:	b003      	add	sp, #12
 8011216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801121a:	4b0d      	ldr	r3, [pc, #52]	; (8011250 <tcp_split_unsent_seg+0x194>)
 801121c:	f240 324b 	movw	r2, #843	; 0x34b
 8011220:	490f      	ldr	r1, [pc, #60]	; (8011260 <tcp_split_unsent_seg+0x1a4>)
 8011222:	480d      	ldr	r0, [pc, #52]	; (8011258 <tcp_split_unsent_seg+0x19c>)
 8011224:	f003 fd20 	bl	8014c68 <iprintf>
 8011228:	e750      	b.n	80110cc <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801122a:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801122e:	f04f 0b08 	mov.w	fp, #8
 8011232:	e7a2      	b.n	801117a <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 8011234:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 8011236:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801123a:	e77a      	b.n	8011132 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801123c:	4b04      	ldr	r3, [pc, #16]	; (8011250 <tcp_split_unsent_seg+0x194>)
 801123e:	f240 3253 	movw	r2, #851	; 0x353
 8011242:	4908      	ldr	r1, [pc, #32]	; (8011264 <tcp_split_unsent_seg+0x1a8>)
 8011244:	4804      	ldr	r0, [pc, #16]	; (8011258 <tcp_split_unsent_seg+0x19c>)
 8011246:	f003 fd0f 	bl	8014c68 <iprintf>
    return ERR_VAL;
 801124a:	f06f 0005 	mvn.w	r0, #5
 801124e:	e770      	b.n	8011132 <tcp_split_unsent_seg+0x76>
 8011250:	08019ab4 	.word	0x08019ab4
 8011254:	08019ea8 	.word	0x08019ea8
 8011258:	08017728 	.word	0x08017728
 801125c:	08019eb8 	.word	0x08019eb8
 8011260:	08019e60 	.word	0x08019e60
 8011264:	08019e84 	.word	0x08019e84

08011268 <tcp_enqueue_flags>:
{
 8011268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801126c:	f011 0703 	ands.w	r7, r1, #3
{
 8011270:	b082      	sub	sp, #8
 8011272:	460d      	mov	r5, r1
 8011274:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011276:	d05e      	beq.n	8011336 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011278:	2c00      	cmp	r4, #0
 801127a:	d065      	beq.n	8011348 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801127c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011280:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 8011284:	d049      	beq.n	801131a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011286:	2104      	movs	r1, #4
 8011288:	2036      	movs	r0, #54	; 0x36
 801128a:	f7fc f8d5 	bl	800d438 <pbuf_alloc>
 801128e:	4606      	mov	r6, r0
 8011290:	2800      	cmp	r0, #0
 8011292:	d049      	beq.n	8011328 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011294:	8943      	ldrh	r3, [r0, #10]
 8011296:	2b03      	cmp	r3, #3
 8011298:	d872      	bhi.n	8011380 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801129a:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801129e:	4b40      	ldr	r3, [pc, #256]	; (80113a0 <tcp_enqueue_flags+0x138>)
 80112a0:	f240 4239 	movw	r2, #1081	; 0x439
 80112a4:	493f      	ldr	r1, [pc, #252]	; (80113a4 <tcp_enqueue_flags+0x13c>)
 80112a6:	4840      	ldr	r0, [pc, #256]	; (80113a8 <tcp_enqueue_flags+0x140>)
 80112a8:	f003 fcde 	bl	8014c68 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80112ac:	4631      	mov	r1, r6
 80112ae:	f8cd 8000 	str.w	r8, [sp]
 80112b2:	462a      	mov	r2, r5
 80112b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80112b6:	4620      	mov	r0, r4
 80112b8:	f7ff faaa 	bl	8010810 <tcp_create_segment>
 80112bc:	4606      	mov	r6, r0
 80112be:	2800      	cmp	r0, #0
 80112c0:	d032      	beq.n	8011328 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80112c2:	68c3      	ldr	r3, [r0, #12]
 80112c4:	079a      	lsls	r2, r3, #30
 80112c6:	d153      	bne.n	8011370 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80112c8:	8933      	ldrh	r3, [r6, #8]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d144      	bne.n	8011358 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 80112ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d04b      	beq.n	801136c <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80112d4:	461a      	mov	r2, r3
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d1fb      	bne.n	80112d4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 80112dc:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 80112de:	2300      	movs	r3, #0
 80112e0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80112e4:	b117      	cbz	r7, 80112ec <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 80112e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80112e8:	3301      	adds	r3, #1
 80112ea:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 80112ec:	07eb      	lsls	r3, r5, #31
 80112ee:	d503      	bpl.n	80112f8 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 80112f0:	8b63      	ldrh	r3, [r4, #26]
 80112f2:	f043 0320 	orr.w	r3, r3, #32
 80112f6:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80112f8:	6870      	ldr	r0, [r6, #4]
 80112fa:	f7fc f9a3 	bl	800d644 <pbuf_clen>
 80112fe:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8011302:	4418      	add	r0, r3
 8011304:	b280      	uxth	r0, r0
 8011306:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801130a:	b118      	cbz	r0, 8011314 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801130c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801130e:	2800      	cmp	r0, #0
 8011310:	d039      	beq.n	8011386 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 8011312:	2000      	movs	r0, #0
}
 8011314:	b002      	add	sp, #8
 8011316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801131a:	4641      	mov	r1, r8
 801131c:	2036      	movs	r0, #54	; 0x36
 801131e:	f7fc f88b 	bl	800d438 <pbuf_alloc>
 8011322:	4606      	mov	r6, r0
 8011324:	2800      	cmp	r0, #0
 8011326:	d1c1      	bne.n	80112ac <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011328:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801132a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801132e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011332:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8011334:	e7ee      	b.n	8011314 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011336:	4b1a      	ldr	r3, [pc, #104]	; (80113a0 <tcp_enqueue_flags+0x138>)
 8011338:	f240 4211 	movw	r2, #1041	; 0x411
 801133c:	491b      	ldr	r1, [pc, #108]	; (80113ac <tcp_enqueue_flags+0x144>)
 801133e:	481a      	ldr	r0, [pc, #104]	; (80113a8 <tcp_enqueue_flags+0x140>)
 8011340:	f003 fc92 	bl	8014c68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011344:	2c00      	cmp	r4, #0
 8011346:	d199      	bne.n	801127c <tcp_enqueue_flags+0x14>
 8011348:	4b15      	ldr	r3, [pc, #84]	; (80113a0 <tcp_enqueue_flags+0x138>)
 801134a:	f240 4213 	movw	r2, #1043	; 0x413
 801134e:	4918      	ldr	r1, [pc, #96]	; (80113b0 <tcp_enqueue_flags+0x148>)
 8011350:	4815      	ldr	r0, [pc, #84]	; (80113a8 <tcp_enqueue_flags+0x140>)
 8011352:	f003 fc89 	bl	8014c68 <iprintf>
 8011356:	e791      	b.n	801127c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011358:	4b11      	ldr	r3, [pc, #68]	; (80113a0 <tcp_enqueue_flags+0x138>)
 801135a:	f240 4243 	movw	r2, #1091	; 0x443
 801135e:	4915      	ldr	r1, [pc, #84]	; (80113b4 <tcp_enqueue_flags+0x14c>)
 8011360:	4811      	ldr	r0, [pc, #68]	; (80113a8 <tcp_enqueue_flags+0x140>)
 8011362:	f003 fc81 	bl	8014c68 <iprintf>
  if (pcb->unsent == NULL) {
 8011366:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1b3      	bne.n	80112d4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801136c:	66e6      	str	r6, [r4, #108]	; 0x6c
 801136e:	e7b6      	b.n	80112de <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011370:	4b0b      	ldr	r3, [pc, #44]	; (80113a0 <tcp_enqueue_flags+0x138>)
 8011372:	f240 4242 	movw	r2, #1090	; 0x442
 8011376:	4910      	ldr	r1, [pc, #64]	; (80113b8 <tcp_enqueue_flags+0x150>)
 8011378:	480b      	ldr	r0, [pc, #44]	; (80113a8 <tcp_enqueue_flags+0x140>)
 801137a:	f003 fc75 	bl	8014c68 <iprintf>
 801137e:	e7a3      	b.n	80112c8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 8011380:	f04f 0801 	mov.w	r8, #1
 8011384:	e792      	b.n	80112ac <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011386:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 8011388:	2c00      	cmp	r4, #0
 801138a:	d1c3      	bne.n	8011314 <tcp_enqueue_flags+0xac>
 801138c:	4b04      	ldr	r3, [pc, #16]	; (80113a0 <tcp_enqueue_flags+0x138>)
 801138e:	f240 4265 	movw	r2, #1125	; 0x465
 8011392:	490a      	ldr	r1, [pc, #40]	; (80113bc <tcp_enqueue_flags+0x154>)
 8011394:	4804      	ldr	r0, [pc, #16]	; (80113a8 <tcp_enqueue_flags+0x140>)
 8011396:	f003 fc67 	bl	8014c68 <iprintf>
  return ERR_OK;
 801139a:	4620      	mov	r0, r4
 801139c:	e7ba      	b.n	8011314 <tcp_enqueue_flags+0xac>
 801139e:	bf00      	nop
 80113a0:	08019ab4 	.word	0x08019ab4
 80113a4:	08019f40 	.word	0x08019f40
 80113a8:	08017728 	.word	0x08017728
 80113ac:	08019ec8 	.word	0x08019ec8
 80113b0:	08019f20 	.word	0x08019f20
 80113b4:	08019f94 	.word	0x08019f94
 80113b8:	08019f7c 	.word	0x08019f7c
 80113bc:	08019fc0 	.word	0x08019fc0

080113c0 <tcp_send_fin>:
{
 80113c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80113c2:	4606      	mov	r6, r0
 80113c4:	b188      	cbz	r0, 80113ea <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 80113c6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 80113c8:	b14c      	cbz	r4, 80113de <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80113ca:	4625      	mov	r5, r4
 80113cc:	6824      	ldr	r4, [r4, #0]
 80113ce:	2c00      	cmp	r4, #0
 80113d0:	d1fb      	bne.n	80113ca <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80113d2:	68eb      	ldr	r3, [r5, #12]
 80113d4:	8998      	ldrh	r0, [r3, #12]
 80113d6:	f7fb f81d 	bl	800c414 <lwip_htons>
 80113da:	0743      	lsls	r3, r0, #29
 80113dc:	d00d      	beq.n	80113fa <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80113de:	4630      	mov	r0, r6
 80113e0:	2101      	movs	r1, #1
}
 80113e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80113e6:	f7ff bf3f 	b.w	8011268 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80113ea:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <tcp_send_fin+0x58>)
 80113ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80113f0:	490a      	ldr	r1, [pc, #40]	; (801141c <tcp_send_fin+0x5c>)
 80113f2:	480b      	ldr	r0, [pc, #44]	; (8011420 <tcp_send_fin+0x60>)
 80113f4:	f003 fc38 	bl	8014c68 <iprintf>
 80113f8:	e7e5      	b.n	80113c6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80113fa:	68eb      	ldr	r3, [r5, #12]
 80113fc:	2001      	movs	r0, #1
 80113fe:	899f      	ldrh	r7, [r3, #12]
 8011400:	f7fb f808 	bl	800c414 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 8011404:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011406:	4338      	orrs	r0, r7
 8011408:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801140a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801140e:	8190      	strh	r0, [r2, #12]
}
 8011410:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 8011412:	8373      	strh	r3, [r6, #26]
}
 8011414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011416:	bf00      	nop
 8011418:	08019ab4 	.word	0x08019ab4
 801141c:	08019fe8 	.word	0x08019fe8
 8011420:	08017728 	.word	0x08017728

08011424 <tcp_rexmit_rto_prepare>:
{
 8011424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011426:	4605      	mov	r5, r0
 8011428:	2800      	cmp	r0, #0
 801142a:	d032      	beq.n	8011492 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801142c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801142e:	b132      	cbz	r2, 801143e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011430:	6813      	ldr	r3, [r2, #0]
 8011432:	4614      	mov	r4, r2
 8011434:	b15b      	cbz	r3, 801144e <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 8011436:	6863      	ldr	r3, [r4, #4]
 8011438:	7b9b      	ldrb	r3, [r3, #14]
 801143a:	2b01      	cmp	r3, #1
 801143c:	d003      	beq.n	8011446 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801143e:	f06f 0305 	mvn.w	r3, #5
}
 8011442:	4618      	mov	r0, r3
 8011444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011446:	6824      	ldr	r4, [r4, #0]
 8011448:	6823      	ldr	r3, [r4, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1f3      	bne.n	8011436 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801144e:	6863      	ldr	r3, [r4, #4]
 8011450:	7b9b      	ldrb	r3, [r3, #14]
 8011452:	2b01      	cmp	r3, #1
 8011454:	d1f3      	bne.n	801143e <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 8011456:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 8011458:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801145a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801145c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 8011460:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 8011462:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011464:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 8011466:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801146a:	6858      	ldr	r0, [r3, #4]
 801146c:	f7fa ffd6 	bl	800c41c <lwip_htonl>
 8011470:	68e3      	ldr	r3, [r4, #12]
 8011472:	4606      	mov	r6, r0
 8011474:	8924      	ldrh	r4, [r4, #8]
 8011476:	8998      	ldrh	r0, [r3, #12]
 8011478:	f7fa ffcc 	bl	800c414 <lwip_htons>
 801147c:	f010 0003 	ands.w	r0, r0, #3
 8011480:	4426      	add	r6, r4
  return ERR_OK;
 8011482:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011484:	bf18      	it	ne
 8011486:	2001      	movne	r0, #1
  pcb->rttest = 0;
 8011488:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801148a:	4430      	add	r0, r6
 801148c:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801148e:	4618      	mov	r0, r3
 8011490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011492:	4b04      	ldr	r3, [pc, #16]	; (80114a4 <tcp_rexmit_rto_prepare+0x80>)
 8011494:	f240 6263 	movw	r2, #1635	; 0x663
 8011498:	4903      	ldr	r1, [pc, #12]	; (80114a8 <tcp_rexmit_rto_prepare+0x84>)
 801149a:	4804      	ldr	r0, [pc, #16]	; (80114ac <tcp_rexmit_rto_prepare+0x88>)
 801149c:	f003 fbe4 	bl	8014c68 <iprintf>
 80114a0:	e7c4      	b.n	801142c <tcp_rexmit_rto_prepare+0x8>
 80114a2:	bf00      	nop
 80114a4:	08019ab4 	.word	0x08019ab4
 80114a8:	0801a004 	.word	0x0801a004
 80114ac:	08017728 	.word	0x08017728

080114b0 <tcp_rexmit>:
{
 80114b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80114b2:	4607      	mov	r7, r0
 80114b4:	2800      	cmp	r0, #0
 80114b6:	d031      	beq.n	801151c <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 80114b8:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 80114ba:	b34e      	cbz	r6, 8011510 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 80114bc:	6873      	ldr	r3, [r6, #4]
 80114be:	7b9b      	ldrb	r3, [r3, #14]
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d125      	bne.n	8011510 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 80114c4:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 80114c6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 80114ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 80114cc:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 80114ce:	b91b      	cbnz	r3, 80114d8 <tcp_rexmit+0x28>
 80114d0:	e00f      	b.n	80114f2 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 80114d2:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 80114d4:	682b      	ldr	r3, [r5, #0]
 80114d6:	b163      	cbz	r3, 80114f2 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	6858      	ldr	r0, [r3, #4]
 80114dc:	f7fa ff9e 	bl	800c41c <lwip_htonl>
 80114e0:	68f3      	ldr	r3, [r6, #12]
 80114e2:	4604      	mov	r4, r0
 80114e4:	6858      	ldr	r0, [r3, #4]
 80114e6:	f7fa ff99 	bl	800c41c <lwip_htonl>
 80114ea:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 80114ec:	2c00      	cmp	r4, #0
 80114ee:	dbf0      	blt.n	80114d2 <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 80114f0:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 80114f2:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 80114f4:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 80114f6:	6833      	ldr	r3, [r6, #0]
 80114f8:	b16b      	cbz	r3, 8011516 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 80114fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80114fe:	2bff      	cmp	r3, #255	; 0xff
 8011500:	d002      	beq.n	8011508 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 8011502:	3301      	adds	r3, #1
 8011504:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 8011508:	2300      	movs	r3, #0
  return ERR_OK;
 801150a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801150c:	637b      	str	r3, [r7, #52]	; 0x34
}
 801150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 8011510:	f06f 0005 	mvn.w	r0, #5
}
 8011514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8011516:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801151a:	e7ee      	b.n	80114fa <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801151c:	4b03      	ldr	r3, [pc, #12]	; (801152c <tcp_rexmit+0x7c>)
 801151e:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011522:	4903      	ldr	r1, [pc, #12]	; (8011530 <tcp_rexmit+0x80>)
 8011524:	4803      	ldr	r0, [pc, #12]	; (8011534 <tcp_rexmit+0x84>)
 8011526:	f003 fb9f 	bl	8014c68 <iprintf>
 801152a:	e7c5      	b.n	80114b8 <tcp_rexmit+0x8>
 801152c:	08019ab4 	.word	0x08019ab4
 8011530:	0801a028 	.word	0x0801a028
 8011534:	08017728 	.word	0x08017728

08011538 <tcp_rexmit_fast>:
{
 8011538:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801153a:	4604      	mov	r4, r0
 801153c:	b340      	cbz	r0, 8011590 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801153e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011540:	b113      	cbz	r3, 8011548 <tcp_rexmit_fast+0x10>
 8011542:	8b63      	ldrh	r3, [r4, #26]
 8011544:	075b      	lsls	r3, r3, #29
 8011546:	d500      	bpl.n	801154a <tcp_rexmit_fast+0x12>
}
 8011548:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801154a:	4620      	mov	r0, r4
 801154c:	f7ff ffb0 	bl	80114b0 <tcp_rexmit>
 8011550:	2800      	cmp	r0, #0
 8011552:	d1f9      	bne.n	8011548 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011554:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8011558:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801155c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801155e:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011560:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011564:	bf28      	it	cs
 8011566:	4619      	movcs	r1, r3
 8011568:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801156a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801156e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011572:	d902      	bls.n	801157a <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 8011574:	b283      	uxth	r3, r0
 8011576:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801157a:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801157c:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801157e:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011582:	4413      	add	r3, r2
      pcb->rtime = 0;
 8011584:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011586:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801158a:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801158c:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801158e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011590:	4b03      	ldr	r3, [pc, #12]	; (80115a0 <tcp_rexmit_fast+0x68>)
 8011592:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011596:	4903      	ldr	r1, [pc, #12]	; (80115a4 <tcp_rexmit_fast+0x6c>)
 8011598:	4803      	ldr	r0, [pc, #12]	; (80115a8 <tcp_rexmit_fast+0x70>)
 801159a:	f003 fb65 	bl	8014c68 <iprintf>
 801159e:	e7ce      	b.n	801153e <tcp_rexmit_fast+0x6>
 80115a0:	08019ab4 	.word	0x08019ab4
 80115a4:	0801a040 	.word	0x0801a040
 80115a8:	08017728 	.word	0x08017728

080115ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80115ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b0:	b084      	sub	sp, #16
 80115b2:	4607      	mov	r7, r0
 80115b4:	460e      	mov	r6, r1
 80115b6:	4615      	mov	r5, r2
 80115b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80115bc:	461c      	mov	r4, r3
{
 80115be:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80115c2:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80115c6:	b1fb      	cbz	r3, 8011608 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80115c8:	f1b8 0f00 	cmp.w	r8, #0
 80115cc:	d026      	beq.n	801161c <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80115ce:	4630      	mov	r0, r6
 80115d0:	f7fa ff24 	bl	800c41c <lwip_htonl>
 80115d4:	2114      	movs	r1, #20
 80115d6:	4602      	mov	r2, r0
 80115d8:	4628      	mov	r0, r5
 80115da:	f24d 0516 	movw	r5, #53270	; 0xd016
 80115de:	464b      	mov	r3, r9
 80115e0:	f8cd a000 	str.w	sl, [sp]
 80115e4:	e9cd 1501 	strd	r1, r5, [sp, #4]
 80115e8:	2100      	movs	r1, #0
 80115ea:	f7ff f98b 	bl	8010904 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80115ee:	4601      	mov	r1, r0
 80115f0:	b138      	cbz	r0, 8011602 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80115f2:	4643      	mov	r3, r8
 80115f4:	4622      	mov	r2, r4
 80115f6:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80115f8:	b004      	add	sp, #16
 80115fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80115fe:	f7ff b9ef 	b.w	80109e0 <tcp_output_control_segment>
}
 8011602:	b004      	add	sp, #16
 8011604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011608:	4b08      	ldr	r3, [pc, #32]	; (801162c <tcp_rst+0x80>)
 801160a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801160e:	4908      	ldr	r1, [pc, #32]	; (8011630 <tcp_rst+0x84>)
 8011610:	4808      	ldr	r0, [pc, #32]	; (8011634 <tcp_rst+0x88>)
 8011612:	f003 fb29 	bl	8014c68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011616:	f1b8 0f00 	cmp.w	r8, #0
 801161a:	d1d8      	bne.n	80115ce <tcp_rst+0x22>
 801161c:	4b03      	ldr	r3, [pc, #12]	; (801162c <tcp_rst+0x80>)
 801161e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011622:	4905      	ldr	r1, [pc, #20]	; (8011638 <tcp_rst+0x8c>)
 8011624:	4803      	ldr	r0, [pc, #12]	; (8011634 <tcp_rst+0x88>)
 8011626:	f003 fb1f 	bl	8014c68 <iprintf>
 801162a:	e7d0      	b.n	80115ce <tcp_rst+0x22>
 801162c:	08019ab4 	.word	0x08019ab4
 8011630:	0801a060 	.word	0x0801a060
 8011634:	08017728 	.word	0x08017728
 8011638:	0801a07c 	.word	0x0801a07c

0801163c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801163c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801163e:	4604      	mov	r4, r0
 8011640:	b1c8      	cbz	r0, 8011676 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011642:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011644:	f7fa feea 	bl	800c41c <lwip_htonl>
 8011648:	2100      	movs	r1, #0
 801164a:	4602      	mov	r2, r0
 801164c:	4620      	mov	r0, r4
 801164e:	f7ff f99f 	bl	8010990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8011652:	4601      	mov	r1, r0
 8011654:	b1b8      	cbz	r0, 8011686 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011656:	1d23      	adds	r3, r4, #4
 8011658:	4622      	mov	r2, r4
 801165a:	4620      	mov	r0, r4
 801165c:	f7ff f9c0 	bl	80109e0 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011660:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 8011662:	b920      	cbnz	r0, 801166e <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011664:	f023 0303 	bic.w	r3, r3, #3
 8011668:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801166a:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 801166c:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801166e:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011672:	8363      	strh	r3, [r4, #26]
}
 8011674:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011676:	4b07      	ldr	r3, [pc, #28]	; (8011694 <tcp_send_empty_ack+0x58>)
 8011678:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801167c:	4906      	ldr	r1, [pc, #24]	; (8011698 <tcp_send_empty_ack+0x5c>)
 801167e:	4807      	ldr	r0, [pc, #28]	; (801169c <tcp_send_empty_ack+0x60>)
 8011680:	f003 faf2 	bl	8014c68 <iprintf>
 8011684:	e7dd      	b.n	8011642 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011686:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 8011688:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801168c:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 8011690:	e7eb      	b.n	801166a <tcp_send_empty_ack+0x2e>
 8011692:	bf00      	nop
 8011694:	08019ab4 	.word	0x08019ab4
 8011698:	0801a098 	.word	0x0801a098
 801169c:	08017728 	.word	0x08017728

080116a0 <tcp_output>:
{
 80116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	4604      	mov	r4, r0
 80116a6:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 80116a8:	f7f6 fc6e 	bl	8007f88 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80116ac:	2c00      	cmp	r4, #0
 80116ae:	f000 81b2 	beq.w	8011a16 <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80116b2:	7d23      	ldrb	r3, [r4, #20]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	f000 8169 	beq.w	801198c <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 80116ba:	4bae      	ldr	r3, [pc, #696]	; (8011974 <tcp_output+0x2d4>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	42a3      	cmp	r3, r4
 80116c0:	f000 8170 	beq.w	80119a4 <tcp_output+0x304>
  seg = pcb->unsent;
 80116c4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80116c6:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 80116ca:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 80116ce:	b325      	cbz	r5, 801171a <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80116d0:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80116d2:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80116d6:	2800      	cmp	r0, #0
 80116d8:	f040 81a5 	bne.w	8011a26 <tcp_output+0x386>
    return ip_route(src, dst);
 80116dc:	4648      	mov	r0, r9
 80116de:	f001 fadb 	bl	8012c98 <ip4_route>
 80116e2:	4680      	mov	r8, r0
  if (netif == NULL) {
 80116e4:	f1b8 0f00 	cmp.w	r8, #0
 80116e8:	f000 81af 	beq.w	8011a4a <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 80116ec:	6823      	ldr	r3, [r4, #0]
 80116ee:	b913      	cbnz	r3, 80116f6 <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80116f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116f4:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80116f6:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80116f8:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80116fa:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80116fc:	bf28      	it	cs
 80116fe:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011700:	f7fa fe8c 	bl	800c41c <lwip_htonl>
 8011704:	892b      	ldrh	r3, [r5, #8]
 8011706:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011708:	1a9b      	subs	r3, r3, r2
 801170a:	4418      	add	r0, r3
 801170c:	42b0      	cmp	r0, r6
 801170e:	d90f      	bls.n	8011730 <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011710:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8011714:	42b3      	cmp	r3, r6
 8011716:	f000 814f 	beq.w	80119b8 <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 801171a:	8b62      	ldrh	r2, [r4, #26]
 801171c:	0791      	lsls	r1, r2, #30
 801171e:	f100 8145 	bmi.w	80119ac <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 8011726:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011728:	8362      	strh	r2, [r4, #26]
}
 801172a:	b005      	add	sp, #20
 801172c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 8011736:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 814d 	beq.w	80119d8 <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 801173e:	461f      	mov	r7, r3
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	f000 80af 	beq.w	80118a6 <tcp_output+0x206>
 8011748:	461f      	mov	r7, r3
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d1f6      	bne.n	801173e <tcp_output+0x9e>
 8011750:	e0a9      	b.n	80118a6 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011752:	68eb      	ldr	r3, [r5, #12]
 8011754:	2010      	movs	r0, #16
 8011756:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 801175a:	f7fa fe5b 	bl	800c414 <lwip_htons>
 801175e:	ea4a 0000 	orr.w	r0, sl, r0
 8011762:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8011766:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 801176a:	686b      	ldr	r3, [r5, #4]
 801176c:	7b9b      	ldrb	r3, [r3, #14]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d154      	bne.n	801181c <tcp_output+0x17c>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011772:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011774:	f7fa fe52 	bl	800c41c <lwip_htonl>
 8011778:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801177c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801177e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8011782:	f7fa fe47 	bl	800c414 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011786:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8011788:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801178a:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801178e:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011790:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011794:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011796:	7aab      	ldrb	r3, [r5, #10]
 8011798:	07db      	lsls	r3, r3, #31
 801179a:	f100 80c2 	bmi.w	8011922 <tcp_output+0x282>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801179e:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 80117a2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	da01      	bge.n	80117ae <tcp_output+0x10e>
    pcb->rtime = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 80117ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f000 80ab 	beq.w	801190c <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117b6:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 80117b8:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117ba:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 80117bc:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117be:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 80117c2:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117c6:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 80117c8:	1ac9      	subs	r1, r1, r3
 80117ca:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 80117cc:	8901      	ldrh	r1, [r0, #8]
 80117ce:	1acb      	subs	r3, r1, r3
 80117d0:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 80117d2:	f88a 2010 	strb.w	r2, [sl, #16]
 80117d6:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80117da:	7aab      	ldrb	r3, [r5, #10]
 80117dc:	f013 0f01 	tst.w	r3, #1
 80117e0:	bf14      	ite	ne
 80117e2:	2318      	movne	r3, #24
 80117e4:	2314      	moveq	r3, #20
 80117e6:	449a      	add	sl, r3
 80117e8:	45d3      	cmp	fp, sl
 80117ea:	d007      	beq.n	80117fc <tcp_output+0x15c>
 80117ec:	4b62      	ldr	r3, [pc, #392]	; (8011978 <tcp_output+0x2d8>)
 80117ee:	f240 621c 	movw	r2, #1564	; 0x61c
 80117f2:	4962      	ldr	r1, [pc, #392]	; (801197c <tcp_output+0x2dc>)
 80117f4:	4862      	ldr	r0, [pc, #392]	; (8011980 <tcp_output+0x2e0>)
 80117f6:	f003 fa37 	bl	8014c68 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80117fa:	6868      	ldr	r0, [r5, #4]
 80117fc:	f8cd 8008 	str.w	r8, [sp, #8]
 8011800:	464a      	mov	r2, r9
 8011802:	7aa3      	ldrb	r3, [r4, #10]
 8011804:	4621      	mov	r1, r4
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	2306      	movs	r3, #6
 801180a:	9301      	str	r3, [sp, #4]
 801180c:	7ae3      	ldrb	r3, [r4, #11]
 801180e:	f001 fbd9 	bl	8012fc4 <ip4_output_if>
    if (err != ERR_OK) {
 8011812:	2800      	cmp	r0, #0
 8011814:	f040 8114 	bne.w	8011a40 <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011818:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 801181c:	682b      	ldr	r3, [r5, #0]
 801181e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011820:	7d23      	ldrb	r3, [r4, #20]
 8011822:	2b02      	cmp	r3, #2
 8011824:	d003      	beq.n	801182e <tcp_output+0x18e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011826:	8b63      	ldrh	r3, [r4, #26]
 8011828:	f023 0303 	bic.w	r3, r3, #3
 801182c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801182e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011832:	f7fa fdf3 	bl	800c41c <lwip_htonl>
 8011836:	68eb      	ldr	r3, [r5, #12]
 8011838:	4682      	mov	sl, r0
 801183a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801183e:	8998      	ldrh	r0, [r3, #12]
 8011840:	f7fa fde8 	bl	800c414 <lwip_htons>
 8011844:	f010 0303 	ands.w	r3, r0, #3
 8011848:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801184a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801184c:	bf18      	it	ne
 801184e:	2301      	movne	r3, #1
 8011850:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 8011852:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011856:	1ad2      	subs	r2, r2, r3
 8011858:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 801185a:	bfb8      	it	lt
 801185c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801185e:	68eb      	ldr	r3, [r5, #12]
 8011860:	8998      	ldrh	r0, [r3, #12]
 8011862:	f7fa fdd7 	bl	800c414 <lwip_htons>
 8011866:	f010 0003 	ands.w	r0, r0, #3
 801186a:	bf18      	it	ne
 801186c:	2001      	movne	r0, #1
 801186e:	eb10 0f0a 	cmn.w	r0, sl
 8011872:	d044      	beq.n	80118fe <tcp_output+0x25e>
      seg->next = NULL;
 8011874:	2300      	movs	r3, #0
 8011876:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8011878:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801187a:	2b00      	cmp	r3, #0
 801187c:	d043      	beq.n	8011906 <tcp_output+0x266>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801187e:	68eb      	ldr	r3, [r5, #12]
 8011880:	6858      	ldr	r0, [r3, #4]
 8011882:	f7fa fdcb 	bl	800c41c <lwip_htonl>
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	4682      	mov	sl, r0
 801188a:	6858      	ldr	r0, [r3, #4]
 801188c:	f7fa fdc6 	bl	800c41c <lwip_htonl>
 8011890:	ebaa 0000 	sub.w	r0, sl, r0
 8011894:	2800      	cmp	r0, #0
 8011896:	f2c0 80a1 	blt.w	80119dc <tcp_output+0x33c>
          useg->next = seg;
 801189a:	603d      	str	r5, [r7, #0]
 801189c:	462f      	mov	r7, r5
    seg = pcb->unsent;
 801189e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 80118a0:	2d00      	cmp	r5, #0
 80118a2:	f000 80c4 	beq.w	8011a2e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80118a6:	68eb      	ldr	r3, [r5, #12]
 80118a8:	6858      	ldr	r0, [r3, #4]
 80118aa:	f7fa fdb7 	bl	800c41c <lwip_htonl>
 80118ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80118b0:	1ac0      	subs	r0, r0, r3
 80118b2:	892b      	ldrh	r3, [r5, #8]
 80118b4:	4418      	add	r0, r3
  while (seg != NULL &&
 80118b6:	42b0      	cmp	r0, r6
 80118b8:	f200 80bb 	bhi.w	8011a32 <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 80118bc:	68eb      	ldr	r3, [r5, #12]
 80118be:	8998      	ldrh	r0, [r3, #12]
 80118c0:	f7fa fda8 	bl	800c414 <lwip_htons>
 80118c4:	0742      	lsls	r2, r0, #29
 80118c6:	d412      	bmi.n	80118ee <tcp_output+0x24e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80118c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80118ca:	b14b      	cbz	r3, 80118e0 <tcp_output+0x240>
 80118cc:	8b63      	ldrh	r3, [r4, #26]
 80118ce:	f013 0f44 	tst.w	r3, #68	; 0x44
 80118d2:	461a      	mov	r2, r3
 80118d4:	d104      	bne.n	80118e0 <tcp_output+0x240>
 80118d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80118d8:	2900      	cmp	r1, #0
 80118da:	d038      	beq.n	801194e <tcp_output+0x2ae>
 80118dc:	6808      	ldr	r0, [r1, #0]
 80118de:	b388      	cbz	r0, 8011944 <tcp_output+0x2a4>
    if (pcb->state != SYN_SENT) {
 80118e0:	7d23      	ldrb	r3, [r4, #20]
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	f47f af35 	bne.w	8011752 <tcp_output+0xb2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80118e8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80118ec:	e73d      	b.n	801176a <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 80118ee:	4b22      	ldr	r3, [pc, #136]	; (8011978 <tcp_output+0x2d8>)
 80118f0:	f240 5236 	movw	r2, #1334	; 0x536
 80118f4:	4923      	ldr	r1, [pc, #140]	; (8011984 <tcp_output+0x2e4>)
 80118f6:	4822      	ldr	r0, [pc, #136]	; (8011980 <tcp_output+0x2e0>)
 80118f8:	f003 f9b6 	bl	8014c68 <iprintf>
 80118fc:	e7e4      	b.n	80118c8 <tcp_output+0x228>
      tcp_seg_free(seg);
 80118fe:	4628      	mov	r0, r5
 8011900:	f7fc faa0 	bl	800de44 <tcp_seg_free>
 8011904:	e7cb      	b.n	801189e <tcp_output+0x1fe>
        pcb->unacked = seg;
 8011906:	462f      	mov	r7, r5
 8011908:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801190a:	e7c8      	b.n	801189e <tcp_output+0x1fe>
    pcb->rttest = tcp_ticks;
 801190c:	4b1e      	ldr	r3, [pc, #120]	; (8011988 <tcp_output+0x2e8>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011912:	f8da 0004 	ldr.w	r0, [sl, #4]
 8011916:	f7fa fd81 	bl	800c41c <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801191a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801191e:	63a0      	str	r0, [r4, #56]	; 0x38
 8011920:	e749      	b.n	80117b6 <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011922:	464a      	mov	r2, r9
 8011924:	4641      	mov	r1, r8
 8011926:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 801192a:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801192e:	f7fd fab9 	bl	800eea4 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011932:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8011936:	f7fa fd71 	bl	800c41c <lwip_htonl>
 801193a:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801193e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8011942:	e72e      	b.n	80117a2 <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011944:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8011948:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801194a:	4584      	cmp	ip, r0
 801194c:	d2c8      	bcs.n	80118e0 <tcp_output+0x240>
 801194e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 8011952:	2800      	cmp	r0, #0
 8011954:	d0c4      	beq.n	80118e0 <tcp_output+0x240>
 8011956:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801195a:	280f      	cmp	r0, #15
 801195c:	d8c0      	bhi.n	80118e0 <tcp_output+0x240>
 801195e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8011962:	d1bd      	bne.n	80118e0 <tcp_output+0x240>
  if (pcb->unsent == NULL) {
 8011964:	2900      	cmp	r1, #0
 8011966:	f47f aedc 	bne.w	8011722 <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 801196a:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801196c:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801196e:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8011972:	e6d6      	b.n	8011722 <tcp_output+0x82>
 8011974:	24037ad4 	.word	0x24037ad4
 8011978:	08019ab4 	.word	0x08019ab4
 801197c:	0801a110 	.word	0x0801a110
 8011980:	08017728 	.word	0x08017728
 8011984:	0801a0f8 	.word	0x0801a0f8
 8011988:	24037aa0 	.word	0x24037aa0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801198c:	4b30      	ldr	r3, [pc, #192]	; (8011a50 <tcp_output+0x3b0>)
 801198e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011992:	4930      	ldr	r1, [pc, #192]	; (8011a54 <tcp_output+0x3b4>)
 8011994:	4830      	ldr	r0, [pc, #192]	; (8011a58 <tcp_output+0x3b8>)
 8011996:	f003 f967 	bl	8014c68 <iprintf>
  if (tcp_input_pcb == pcb) {
 801199a:	4b30      	ldr	r3, [pc, #192]	; (8011a5c <tcp_output+0x3bc>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	42a3      	cmp	r3, r4
 80119a0:	f47f ae90 	bne.w	80116c4 <tcp_output+0x24>
    return ERR_OK;
 80119a4:	2000      	movs	r0, #0
}
 80119a6:	b005      	add	sp, #20
 80119a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 80119ac:	4620      	mov	r0, r4
}
 80119ae:	b005      	add	sp, #20
 80119b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 80119b4:	f7ff be42 	b.w	801163c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80119b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f47f aead 	bne.w	801171a <tcp_output+0x7a>
 80119c0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f47f aea8 	bne.w	801171a <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 80119ca:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 80119ce:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 80119d2:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 80119d6:	e6a0      	b.n	801171a <tcp_output+0x7a>
  useg = pcb->unacked;
 80119d8:	461f      	mov	r7, r3
 80119da:	e764      	b.n	80118a6 <tcp_output+0x206>
          while (*cur_seg &&
 80119dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80119de:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 80119e2:	b92b      	cbnz	r3, 80119f0 <tcp_output+0x350>
 80119e4:	e013      	b.n	8011a0e <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 80119e6:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 80119ea:	f8db 3000 	ldr.w	r3, [fp]
 80119ee:	b173      	cbz	r3, 8011a0e <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	6858      	ldr	r0, [r3, #4]
 80119f4:	f7fa fd12 	bl	800c41c <lwip_htonl>
 80119f8:	68eb      	ldr	r3, [r5, #12]
 80119fa:	4682      	mov	sl, r0
 80119fc:	6858      	ldr	r0, [r3, #4]
 80119fe:	f7fa fd0d 	bl	800c41c <lwip_htonl>
 8011a02:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8011a06:	2800      	cmp	r0, #0
 8011a08:	dbed      	blt.n	80119e6 <tcp_output+0x346>
            cur_seg = &((*cur_seg)->next );
 8011a0a:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 8011a0e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 8011a10:	f8cb 5000 	str.w	r5, [fp]
 8011a14:	e743      	b.n	801189e <tcp_output+0x1fe>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011a16:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <tcp_output+0x3b0>)
 8011a18:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011a1c:	4910      	ldr	r1, [pc, #64]	; (8011a60 <tcp_output+0x3c0>)
 8011a1e:	480e      	ldr	r0, [pc, #56]	; (8011a58 <tcp_output+0x3b8>)
 8011a20:	f003 f922 	bl	8014c68 <iprintf>
 8011a24:	e645      	b.n	80116b2 <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 8011a26:	f7fb fae5 	bl	800cff4 <netif_get_by_index>
 8011a2a:	4680      	mov	r8, r0
 8011a2c:	e65a      	b.n	80116e4 <tcp_output+0x44>
 8011a2e:	8b63      	ldrh	r3, [r4, #26]
 8011a30:	e79b      	b.n	801196a <tcp_output+0x2ca>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011a32:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 8011a34:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011a36:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 8011a38:	2900      	cmp	r1, #0
 8011a3a:	f47f ae72 	bne.w	8011722 <tcp_output+0x82>
 8011a3e:	e794      	b.n	801196a <tcp_output+0x2ca>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a40:	8b63      	ldrh	r3, [r4, #26]
 8011a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a46:	8363      	strh	r3, [r4, #26]
      return err;
 8011a48:	e66f      	b.n	801172a <tcp_output+0x8a>
    return ERR_RTE;
 8011a4a:	f06f 0003 	mvn.w	r0, #3
 8011a4e:	e66c      	b.n	801172a <tcp_output+0x8a>
 8011a50:	08019ab4 	.word	0x08019ab4
 8011a54:	0801a0d0 	.word	0x0801a0d0
 8011a58:	08017728 	.word	0x08017728
 8011a5c:	24037ad4 	.word	0x24037ad4
 8011a60:	0801a0b8 	.word	0x0801a0b8

08011a64 <tcp_rexmit_rto_commit>:
{
 8011a64:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011a66:	4604      	mov	r4, r0
 8011a68:	b158      	cbz	r0, 8011a82 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 8011a6a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8011a6e:	2bff      	cmp	r3, #255	; 0xff
 8011a70:	d002      	beq.n	8011a78 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 8011a72:	3301      	adds	r3, #1
 8011a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8011a78:	4620      	mov	r0, r4
}
 8011a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8011a7e:	f7ff be0f 	b.w	80116a0 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011a82:	4b04      	ldr	r3, [pc, #16]	; (8011a94 <tcp_rexmit_rto_commit+0x30>)
 8011a84:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011a88:	4903      	ldr	r1, [pc, #12]	; (8011a98 <tcp_rexmit_rto_commit+0x34>)
 8011a8a:	4804      	ldr	r0, [pc, #16]	; (8011a9c <tcp_rexmit_rto_commit+0x38>)
 8011a8c:	f003 f8ec 	bl	8014c68 <iprintf>
 8011a90:	e7eb      	b.n	8011a6a <tcp_rexmit_rto_commit+0x6>
 8011a92:	bf00      	nop
 8011a94:	08019ab4 	.word	0x08019ab4
 8011a98:	0801a124 	.word	0x0801a124
 8011a9c:	08017728 	.word	0x08017728

08011aa0 <tcp_rexmit_rto>:
{
 8011aa0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	b118      	cbz	r0, 8011aae <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011aa6:	f7ff fcbd 	bl	8011424 <tcp_rexmit_rto_prepare>
 8011aaa:	b198      	cbz	r0, 8011ad4 <tcp_rexmit_rto+0x34>
}
 8011aac:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011aae:	4b0f      	ldr	r3, [pc, #60]	; (8011aec <tcp_rexmit_rto+0x4c>)
 8011ab0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011ab4:	490e      	ldr	r1, [pc, #56]	; (8011af0 <tcp_rexmit_rto+0x50>)
 8011ab6:	480f      	ldr	r0, [pc, #60]	; (8011af4 <tcp_rexmit_rto+0x54>)
 8011ab8:	f003 f8d6 	bl	8014c68 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011abc:	4620      	mov	r0, r4
 8011abe:	f7ff fcb1 	bl	8011424 <tcp_rexmit_rto_prepare>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	d1f2      	bne.n	8011aac <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011ac6:	4b09      	ldr	r3, [pc, #36]	; (8011aec <tcp_rexmit_rto+0x4c>)
 8011ac8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011acc:	490a      	ldr	r1, [pc, #40]	; (8011af8 <tcp_rexmit_rto+0x58>)
 8011ace:	4809      	ldr	r0, [pc, #36]	; (8011af4 <tcp_rexmit_rto+0x54>)
 8011ad0:	f003 f8ca 	bl	8014c68 <iprintf>
  if (pcb->nrtx < 0xFF) {
 8011ad4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8011ad8:	2bff      	cmp	r3, #255	; 0xff
 8011ada:	d002      	beq.n	8011ae2 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 8011adc:	3301      	adds	r3, #1
 8011ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8011ae2:	4620      	mov	r0, r4
}
 8011ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8011ae8:	f7ff bdda 	b.w	80116a0 <tcp_output>
 8011aec:	08019ab4 	.word	0x08019ab4
 8011af0:	0801a148 	.word	0x0801a148
 8011af4:	08017728 	.word	0x08017728
 8011af8:	0801a124 	.word	0x0801a124

08011afc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011afc:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011afe:	4604      	mov	r4, r0
 8011b00:	b188      	cbz	r0, 8011b26 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011b02:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011b04:	3801      	subs	r0, #1
 8011b06:	f7fa fc89 	bl	800c41c <lwip_htonl>
 8011b0a:	2100      	movs	r1, #0
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f7fe ff3e 	bl	8010990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8011b14:	4601      	mov	r1, r0
 8011b16:	b170      	cbz	r0, 8011b36 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b18:	1d23      	adds	r3, r4, #4
 8011b1a:	4622      	mov	r2, r4
 8011b1c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8011b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b22:	f7fe bf5d 	b.w	80109e0 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011b26:	4b05      	ldr	r3, [pc, #20]	; (8011b3c <tcp_keepalive+0x40>)
 8011b28:	f640 0224 	movw	r2, #2084	; 0x824
 8011b2c:	4904      	ldr	r1, [pc, #16]	; (8011b40 <tcp_keepalive+0x44>)
 8011b2e:	4805      	ldr	r0, [pc, #20]	; (8011b44 <tcp_keepalive+0x48>)
 8011b30:	f003 f89a 	bl	8014c68 <iprintf>
 8011b34:	e7e5      	b.n	8011b02 <tcp_keepalive+0x6>
}
 8011b36:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3a:	bd10      	pop	{r4, pc}
 8011b3c:	08019ab4 	.word	0x08019ab4
 8011b40:	0801a164 	.word	0x0801a164
 8011b44:	08017728 	.word	0x08017728

08011b48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011b4c:	4604      	mov	r4, r0
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d051      	beq.n	8011bf6 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011b52:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8011b54:	2d00      	cmp	r5, #0
 8011b56:	d04b      	beq.n	8011bf0 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011b58:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8011b5c:	2bff      	cmp	r3, #255	; 0xff
 8011b5e:	d002      	beq.n	8011b66 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 8011b60:	3301      	adds	r3, #1
 8011b62:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011b66:	68eb      	ldr	r3, [r5, #12]
 8011b68:	8998      	ldrh	r0, [r3, #12]
 8011b6a:	f7fa fc53 	bl	800c414 <lwip_htons>
 8011b6e:	07c3      	lsls	r3, r0, #31
 8011b70:	d527      	bpl.n	8011bc2 <tcp_zero_window_probe+0x7a>
 8011b72:	8929      	ldrh	r1, [r5, #8]
 8011b74:	bb29      	cbnz	r1, 8011bc2 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011b76:	68eb      	ldr	r3, [r5, #12]
 8011b78:	4620      	mov	r0, r4
 8011b7a:	685a      	ldr	r2, [r3, #4]
 8011b7c:	f7fe ff08 	bl	8010990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8011b80:	4606      	mov	r6, r0
 8011b82:	b388      	cbz	r0, 8011be8 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011b84:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011b88:	2011      	movs	r0, #17
 8011b8a:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8011b8e:	f7fa fc41 	bl	800c414 <lwip_htons>
 8011b92:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8011b96:	4338      	orrs	r0, r7
 8011b98:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011b9c:	68eb      	ldr	r3, [r5, #12]
 8011b9e:	6858      	ldr	r0, [r3, #4]
 8011ba0:	f7fa fc3c 	bl	800c41c <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ba4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011ba6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ba8:	4622      	mov	r2, r4
 8011baa:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bac:	1a1b      	subs	r3, r3, r0
 8011bae:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bb0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 8011bb4:	bfb8      	it	lt
 8011bb6:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bb8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8011bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bbe:	f7fe bf0f 	b.w	80109e0 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011bc2:	68eb      	ldr	r3, [r5, #12]
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	685a      	ldr	r2, [r3, #4]
 8011bca:	f7fe fee1 	bl	8010990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8011bce:	4606      	mov	r6, r0
 8011bd0:	b150      	cbz	r0, 8011be8 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011bd2:	6868      	ldr	r0, [r5, #4]
 8011bd4:	892a      	ldrh	r2, [r5, #8]
 8011bd6:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 8011bd8:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011bda:	1a9b      	subs	r3, r3, r2
 8011bdc:	2201      	movs	r2, #1
 8011bde:	3114      	adds	r1, #20
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	f7fb fdb1 	bl	800d748 <pbuf_copy_partial>
 8011be6:	e7d9      	b.n	8011b9c <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 8011be8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 8011bf0:	4628      	mov	r0, r5
}
 8011bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011bf6:	4b04      	ldr	r3, [pc, #16]	; (8011c08 <tcp_zero_window_probe+0xc0>)
 8011bf8:	f640 024f 	movw	r2, #2127	; 0x84f
 8011bfc:	4903      	ldr	r1, [pc, #12]	; (8011c0c <tcp_zero_window_probe+0xc4>)
 8011bfe:	4804      	ldr	r0, [pc, #16]	; (8011c10 <tcp_zero_window_probe+0xc8>)
 8011c00:	f003 f832 	bl	8014c68 <iprintf>
 8011c04:	e7a5      	b.n	8011b52 <tcp_zero_window_probe+0xa>
 8011c06:	bf00      	nop
 8011c08:	08019ab4 	.word	0x08019ab4
 8011c0c:	0801a180 	.word	0x0801a180
 8011c10:	08017728 	.word	0x08017728

08011c14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011c14:	b570      	push	{r4, r5, r6, lr}
 8011c16:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c18:	200a      	movs	r0, #10
{
 8011c1a:	460e      	mov	r6, r1
 8011c1c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c1e:	f7fa ff8f 	bl	800cb40 <memp_malloc>
  if (timeout == NULL) {
 8011c22:	b190      	cbz	r0, 8011c4a <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8011c24:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c26:	490d      	ldr	r1, [pc, #52]	; (8011c5c <sys_timeout_abs+0x48>)
  timeout->h = handler;
 8011c28:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 8011c2a:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 8011c2c:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 8011c30:	680b      	ldr	r3, [r1, #0]
 8011c32:	b91b      	cbnz	r3, 8011c3c <sys_timeout_abs+0x28>
 8011c34:	e007      	b.n	8011c46 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011c36:	4619      	mov	r1, r3
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	b11b      	cbz	r3, 8011c44 <sys_timeout_abs+0x30>
 8011c3c:	685a      	ldr	r2, [r3, #4]
 8011c3e:	1aa2      	subs	r2, r4, r2
 8011c40:	2a00      	cmp	r2, #0
 8011c42:	daf8      	bge.n	8011c36 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 8011c44:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8011c46:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 8011c48:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c4a:	4b05      	ldr	r3, [pc, #20]	; (8011c60 <sys_timeout_abs+0x4c>)
 8011c4c:	22be      	movs	r2, #190	; 0xbe
 8011c4e:	4905      	ldr	r1, [pc, #20]	; (8011c64 <sys_timeout_abs+0x50>)
 8011c50:	4805      	ldr	r0, [pc, #20]	; (8011c68 <sys_timeout_abs+0x54>)
}
 8011c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c56:	f003 b807 	b.w	8014c68 <iprintf>
 8011c5a:	bf00      	nop
 8011c5c:	24037af0 	.word	0x24037af0
 8011c60:	0801a1a4 	.word	0x0801a1a4
 8011c64:	0801a1d8 	.word	0x0801a1d8
 8011c68:	08017728 	.word	0x08017728

08011c6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011c6c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011c6e:	6843      	ldr	r3, [r0, #4]
{
 8011c70:	4604      	mov	r4, r0
  cyclic->handler();
 8011c72:	4798      	blx	r3

  now = sys_now();
 8011c74:	f7f6 f804 	bl	8007c80 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011c78:	4b09      	ldr	r3, [pc, #36]	; (8011ca0 <lwip_cyclic_timer+0x34>)
 8011c7a:	6825      	ldr	r5, [r4, #0]
 8011c7c:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011c7e:	4909      	ldr	r1, [pc, #36]	; (8011ca4 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011c80:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011c82:	1a1a      	subs	r2, r3, r0
 8011c84:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011c86:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011c88:	da04      	bge.n	8011c94 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011c8a:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011c90:	f7ff bfc0 	b.w	8011c14 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011c94:	4618      	mov	r0, r3
}
 8011c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011c9a:	f7ff bfbb 	b.w	8011c14 <sys_timeout_abs>
 8011c9e:	bf00      	nop
 8011ca0:	24037aec 	.word	0x24037aec
 8011ca4:	08011c6d 	.word	0x08011c6d

08011ca8 <tcpip_tcp_timer>:
{
 8011ca8:	b508      	push	{r3, lr}
  tcp_tmr();
 8011caa:	f7fd f8cd 	bl	800ee48 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011cae:	4b0a      	ldr	r3, [pc, #40]	; (8011cd8 <tcpip_tcp_timer+0x30>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	b153      	cbz	r3, 8011cca <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8011cb4:	f7f6 f968 	bl	8007f88 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011cb8:	f7f5 ffe2 	bl	8007c80 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	4907      	ldr	r1, [pc, #28]	; (8011cdc <tcpip_tcp_timer+0x34>)
 8011cc0:	30fa      	adds	r0, #250	; 0xfa
}
 8011cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011cc6:	f7ff bfa5 	b.w	8011c14 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011cca:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <tcpip_tcp_timer+0x38>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1f0      	bne.n	8011cb4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8011cd2:	4a04      	ldr	r2, [pc, #16]	; (8011ce4 <tcpip_tcp_timer+0x3c>)
 8011cd4:	6013      	str	r3, [r2, #0]
}
 8011cd6:	bd08      	pop	{r3, pc}
 8011cd8:	24037a90 	.word	0x24037a90
 8011cdc:	08011ca9 	.word	0x08011ca9
 8011ce0:	24037aa8 	.word	0x24037aa8
 8011ce4:	24037af4 	.word	0x24037af4

08011ce8 <tcp_timer_needed>:
{
 8011ce8:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 8011cea:	f7f6 f94d 	bl	8007f88 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011cee:	4b0c      	ldr	r3, [pc, #48]	; (8011d20 <tcp_timer_needed+0x38>)
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	b99a      	cbnz	r2, 8011d1c <tcp_timer_needed+0x34>
 8011cf4:	4a0b      	ldr	r2, [pc, #44]	; (8011d24 <tcp_timer_needed+0x3c>)
 8011cf6:	6812      	ldr	r2, [r2, #0]
 8011cf8:	b162      	cbz	r2, 8011d14 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011cfe:	f7f6 f943 	bl	8007f88 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011d02:	f7f5 ffbd 	bl	8007c80 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d06:	2200      	movs	r2, #0
 8011d08:	4907      	ldr	r1, [pc, #28]	; (8011d28 <tcp_timer_needed+0x40>)
 8011d0a:	30fa      	adds	r0, #250	; 0xfa
}
 8011d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d10:	f7ff bf80 	b.w	8011c14 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011d14:	4a05      	ldr	r2, [pc, #20]	; (8011d2c <tcp_timer_needed+0x44>)
 8011d16:	6812      	ldr	r2, [r2, #0]
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	d1ee      	bne.n	8011cfa <tcp_timer_needed+0x12>
}
 8011d1c:	bd08      	pop	{r3, pc}
 8011d1e:	bf00      	nop
 8011d20:	24037af4 	.word	0x24037af4
 8011d24:	24037a90 	.word	0x24037a90
 8011d28:	08011ca9 	.word	0x08011ca9
 8011d2c:	24037aa8 	.word	0x24037aa8

08011d30 <sys_timeouts_init>:
{
 8011d30:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d32:	4c0c      	ldr	r4, [pc, #48]	; (8011d64 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 8011d34:	f7f6 f928 	bl	8007f88 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011d38:	f7f5 ffa2 	bl	8007c80 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d3c:	490a      	ldr	r1, [pc, #40]	; (8011d68 <sys_timeouts_init+0x38>)
 8011d3e:	f104 0208 	add.w	r2, r4, #8
 8011d42:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8011d46:	f7ff ff65 	bl	8011c14 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 8011d4a:	f7f6 f91d 	bl	8007f88 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011d4e:	f7f5 ff97 	bl	8007c80 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d52:	f104 0210 	add.w	r2, r4, #16
 8011d56:	4904      	ldr	r1, [pc, #16]	; (8011d68 <sys_timeouts_init+0x38>)
 8011d58:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 8011d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011d60:	f7ff bf58 	b.w	8011c14 <sys_timeout_abs>
 8011d64:	0801a218 	.word	0x0801a218
 8011d68:	08011c6d 	.word	0x08011c6d

08011d6c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8011d70:	f7f6 f90a 	bl	8007f88 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011d74:	4c10      	ldr	r4, [pc, #64]	; (8011db8 <sys_check_timeouts+0x4c>)
 8011d76:	f7f5 ff83 	bl	8007c80 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8011d7a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8011dbc <sys_check_timeouts+0x50>
  now = sys_now();
 8011d7e:	4607      	mov	r7, r0
 8011d80:	e00f      	b.n	8011da2 <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011d82:	685a      	ldr	r2, [r3, #4]
 8011d84:	eba7 0c02 	sub.w	ip, r7, r2
 8011d88:	f1bc 0f00 	cmp.w	ip, #0
 8011d8c:	db0e      	blt.n	8011dac <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 8011d8e:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 8011d90:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 8011d92:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 8011d96:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 8011d9a:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011d9c:	f7fa ff16 	bl	800cbcc <memp_free>
    if (handler != NULL) {
 8011da0:	b935      	cbnz	r5, 8011db0 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 8011da2:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011da4:	200a      	movs	r0, #10
 8011da6:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1ea      	bne.n	8011d82 <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 8011db0:	4648      	mov	r0, r9
 8011db2:	47a8      	blx	r5
 8011db4:	e7f5      	b.n	8011da2 <sys_check_timeouts+0x36>
 8011db6:	bf00      	nop
 8011db8:	24037af0 	.word	0x24037af0
 8011dbc:	24037aec 	.word	0x24037aec

08011dc0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011dc0:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011dc2:	4c08      	ldr	r4, [pc, #32]	; (8011de4 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 8011dc4:	f7f6 f8e0 	bl	8007f88 <sys_check_core_locking>
  if (next_timeout == NULL) {
 8011dc8:	6823      	ldr	r3, [r4, #0]
 8011dca:	b13b      	cbz	r3, 8011ddc <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 8011dcc:	f7f5 ff58 	bl	8007c80 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	685b      	ldr	r3, [r3, #4]
    return 0;
 8011dd4:	1a18      	subs	r0, r3, r0
 8011dd6:	bf48      	it	mi
 8011dd8:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 8011dda:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011ddc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011de0:	bd10      	pop	{r4, pc}
 8011de2:	bf00      	nop
 8011de4:	24037af0 	.word	0x24037af0

08011de8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011de8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011dea:	f001 ffa7 	bl	8013d3c <rand>
 8011dee:	4b02      	ldr	r3, [pc, #8]	; (8011df8 <udp_init+0x10>)
 8011df0:	4a02      	ldr	r2, [pc, #8]	; (8011dfc <udp_init+0x14>)
 8011df2:	4303      	orrs	r3, r0
 8011df4:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 8011df6:	bd08      	pop	{r3, pc}
 8011df8:	ffffc000 	.word	0xffffc000
 8011dfc:	24000086 	.word	0x24000086

08011e00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	4680      	mov	r8, r0
 8011e06:	b085      	sub	sp, #20
 8011e08:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8011e0a:	f7f6 f8bd 	bl	8007f88 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011e0e:	f1b8 0f00 	cmp.w	r8, #0
 8011e12:	f000 80af 	beq.w	8011f74 <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011e16:	2f00      	cmp	r7, #0
 8011e18:	f000 80b5 	beq.w	8011f86 <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011e1c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8011e20:	2b07      	cmp	r3, #7
 8011e22:	f240 8091 	bls.w	8011f48 <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e26:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8011ffc <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 8011e2a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e2e:	f8d9 1000 	ldr.w	r1, [r9]
 8011e32:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011e36:	f001 f8d7 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 8011e3a:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011e3c:	8820      	ldrh	r0, [r4, #0]
 8011e3e:	f7fa fae9 	bl	800c414 <lwip_htons>
 8011e42:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 8011e44:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 8011e46:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 8011e48:	f7fa fae4 	bl	800c414 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e4c:	4b63      	ldr	r3, [pc, #396]	; (8011fdc <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 8011e4e:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e50:	681c      	ldr	r4, [r3, #0]
 8011e52:	2c00      	cmp	r4, #0
 8011e54:	d064      	beq.n	8011f20 <udp_input+0x120>
  uncon_pcb = NULL;
 8011e56:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011e5a:	f8df c190 	ldr.w	ip, [pc, #400]	; 8011fec <udp_input+0x1ec>
 8011e5e:	4960      	ldr	r1, [pc, #384]	; (8011fe0 <udp_input+0x1e0>)
  prev = NULL;
 8011e60:	465e      	mov	r6, fp
 8011e62:	e004      	b.n	8011e6e <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e64:	68e2      	ldr	r2, [r4, #12]
 8011e66:	4626      	mov	r6, r4
 8011e68:	2a00      	cmp	r2, #0
 8011e6a:	d056      	beq.n	8011f1a <udp_input+0x11a>
 8011e6c:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011e6e:	8a62      	ldrh	r2, [r4, #18]
 8011e70:	42aa      	cmp	r2, r5
 8011e72:	d1f7      	bne.n	8011e64 <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011e74:	2f00      	cmp	r7, #0
 8011e76:	d06d      	beq.n	8011f54 <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e78:	7a20      	ldrb	r0, [r4, #8]
 8011e7a:	b138      	cbz	r0, 8011e8c <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011e7c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011e80:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8011e84:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e86:	b2d2      	uxtb	r2, r2
 8011e88:	4290      	cmp	r0, r2
 8011e8a:	d1eb      	bne.n	8011e64 <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e8c:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 8011e8e:	f1ba 0f00 	cmp.w	sl, #0
 8011e92:	d038      	beq.n	8011f06 <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e94:	b13a      	cbz	r2, 8011ea6 <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011e96:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e9a:	1c43      	adds	r3, r0, #1
 8011e9c:	d003      	beq.n	8011ea6 <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011e9e:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	4218      	tst	r0, r3
 8011ea4:	d1de      	bne.n	8011e64 <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011ea6:	7c20      	ldrb	r0, [r4, #16]
 8011ea8:	0743      	lsls	r3, r0, #29
 8011eaa:	d409      	bmi.n	8011ec0 <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 8011eac:	f1bb 0f00 	cmp.w	fp, #0
 8011eb0:	d059      	beq.n	8011f66 <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011eb2:	f1ba 0f00 	cmp.w	sl, #0
 8011eb6:	d003      	beq.n	8011ec0 <udp_input+0xc0>
 8011eb8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011ebc:	3001      	adds	r0, #1
 8011ebe:	d069      	beq.n	8011f94 <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011ec0:	8aa2      	ldrh	r2, [r4, #20]
 8011ec2:	9803      	ldr	r0, [sp, #12]
 8011ec4:	4282      	cmp	r2, r0
 8011ec6:	d1cd      	bne.n	8011e64 <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011ec8:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 8011eca:	b11a      	cbz	r2, 8011ed4 <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011ecc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011ed0:	4282      	cmp	r2, r0
 8011ed2:	d1c7      	bne.n	8011e64 <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011ed4:	b12e      	cbz	r6, 8011ee2 <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011ed6:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 8011ed8:	4a40      	ldr	r2, [pc, #256]	; (8011fdc <udp_input+0x1dc>)
          prev->next = pcb->next;
 8011eda:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 8011edc:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 8011ede:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 8011ee0:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011ee2:	2108      	movs	r1, #8
 8011ee4:	4640      	mov	r0, r8
 8011ee6:	f7fb f9cb 	bl	800d280 <pbuf_remove_header>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d15b      	bne.n	8011fa6 <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011eee:	69a5      	ldr	r5, [r4, #24]
 8011ef0:	b355      	cbz	r5, 8011f48 <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011ef2:	9b03      	ldr	r3, [sp, #12]
 8011ef4:	4642      	mov	r2, r8
 8011ef6:	69e0      	ldr	r0, [r4, #28]
 8011ef8:	4621      	mov	r1, r4
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	4b39      	ldr	r3, [pc, #228]	; (8011fe4 <udp_input+0x1e4>)
 8011efe:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011f00:	b005      	add	sp, #20
 8011f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011f06:	2a00      	cmp	r2, #0
 8011f08:	d0cd      	beq.n	8011ea6 <udp_input+0xa6>
 8011f0a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011f0e:	4282      	cmp	r2, r0
 8011f10:	d0c9      	beq.n	8011ea6 <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f12:	68e2      	ldr	r2, [r4, #12]
 8011f14:	4626      	mov	r6, r4
 8011f16:	2a00      	cmp	r2, #0
 8011f18:	d1a8      	bne.n	8011e6c <udp_input+0x6c>
  if (pcb != NULL) {
 8011f1a:	f1bb 0f00 	cmp.w	fp, #0
 8011f1e:	d15b      	bne.n	8011fd8 <udp_input+0x1d8>
  if (for_us) {
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d10e      	bne.n	8011f48 <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011f2a:	2108      	movs	r1, #8
 8011f2c:	4640      	mov	r0, r8
 8011f2e:	f7fb f9a7 	bl	800d280 <pbuf_remove_header>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d137      	bne.n	8011fa6 <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f36:	f1ba 0f00 	cmp.w	sl, #0
 8011f3a:	d105      	bne.n	8011f48 <udp_input+0x148>
 8011f3c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f44:	2be0      	cmp	r3, #224	; 0xe0
 8011f46:	d13b      	bne.n	8011fc0 <udp_input+0x1c0>
      pbuf_free(p);
 8011f48:	4640      	mov	r0, r8
}
 8011f4a:	b005      	add	sp, #20
 8011f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8011f50:	f7fb ba02 	b.w	800d358 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011f54:	4663      	mov	r3, ip
 8011f56:	2288      	movs	r2, #136	; 0x88
 8011f58:	4823      	ldr	r0, [pc, #140]	; (8011fe8 <udp_input+0x1e8>)
 8011f5a:	f002 fe85 	bl	8014c68 <iprintf>
 8011f5e:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8011fec <udp_input+0x1ec>
 8011f62:	491f      	ldr	r1, [pc, #124]	; (8011fe0 <udp_input+0x1e0>)
 8011f64:	e788      	b.n	8011e78 <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 8011f66:	8aa2      	ldrh	r2, [r4, #20]
 8011f68:	46a3      	mov	fp, r4
 8011f6a:	9803      	ldr	r0, [sp, #12]
 8011f6c:	4282      	cmp	r2, r0
 8011f6e:	f47f af79 	bne.w	8011e64 <udp_input+0x64>
 8011f72:	e7a9      	b.n	8011ec8 <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011f74:	4b1d      	ldr	r3, [pc, #116]	; (8011fec <udp_input+0x1ec>)
 8011f76:	22cf      	movs	r2, #207	; 0xcf
 8011f78:	491d      	ldr	r1, [pc, #116]	; (8011ff0 <udp_input+0x1f0>)
 8011f7a:	481b      	ldr	r0, [pc, #108]	; (8011fe8 <udp_input+0x1e8>)
 8011f7c:	f002 fe74 	bl	8014c68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011f80:	2f00      	cmp	r7, #0
 8011f82:	f47f af4b 	bne.w	8011e1c <udp_input+0x1c>
 8011f86:	4b19      	ldr	r3, [pc, #100]	; (8011fec <udp_input+0x1ec>)
 8011f88:	22d0      	movs	r2, #208	; 0xd0
 8011f8a:	491a      	ldr	r1, [pc, #104]	; (8011ff4 <udp_input+0x1f4>)
 8011f8c:	4816      	ldr	r0, [pc, #88]	; (8011fe8 <udp_input+0x1e8>)
 8011f8e:	f002 fe6b 	bl	8014c68 <iprintf>
 8011f92:	e743      	b.n	8011e1c <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f8db 3000 	ldr.w	r3, [fp]
 8011f9a:	4283      	cmp	r3, r0
 8011f9c:	d090      	beq.n	8011ec0 <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011f9e:	4290      	cmp	r0, r2
 8011fa0:	bf08      	it	eq
 8011fa2:	46a3      	moveq	fp, r4
 8011fa4:	e78c      	b.n	8011ec0 <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011fa6:	4b11      	ldr	r3, [pc, #68]	; (8011fec <udp_input+0x1ec>)
 8011fa8:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011fac:	4912      	ldr	r1, [pc, #72]	; (8011ff8 <udp_input+0x1f8>)
 8011fae:	480e      	ldr	r0, [pc, #56]	; (8011fe8 <udp_input+0x1e8>)
 8011fb0:	f002 fe5a 	bl	8014c68 <iprintf>
      pbuf_free(p);
 8011fb4:	4640      	mov	r0, r8
}
 8011fb6:	b005      	add	sp, #20
 8011fb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8011fbc:	f7fb b9cc 	b.w	800d358 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011fc0:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 8011fc4:	4640      	mov	r0, r8
 8011fc6:	3108      	adds	r1, #8
 8011fc8:	b209      	sxth	r1, r1
 8011fca:	f7fb f98d 	bl	800d2e8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011fce:	2103      	movs	r1, #3
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	f000 fe59 	bl	8012c88 <icmp_dest_unreach>
 8011fd6:	e7b7      	b.n	8011f48 <udp_input+0x148>
 8011fd8:	465c      	mov	r4, fp
 8011fda:	e782      	b.n	8011ee2 <udp_input+0xe2>
 8011fdc:	24037af8 	.word	0x24037af8
 8011fe0:	0801a294 	.word	0x0801a294
 8011fe4:	24030fe0 	.word	0x24030fe0
 8011fe8:	08017728 	.word	0x08017728
 8011fec:	0801a230 	.word	0x0801a230
 8011ff0:	0801a260 	.word	0x0801a260
 8011ff4:	0801a278 	.word	0x0801a278
 8011ff8:	0801a2bc 	.word	0x0801a2bc
 8011ffc:	24030fd0 	.word	0x24030fd0

08012000 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012004:	4688      	mov	r8, r1
 8012006:	4605      	mov	r5, r0
 8012008:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 801200a:	f7f5 ffbd 	bl	8007f88 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801200e:	f1b8 0f00 	cmp.w	r8, #0
 8012012:	d03c      	beq.n	801208e <udp_bind+0x8e>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012014:	2d00      	cmp	r5, #0
 8012016:	d064      	beq.n	80120e2 <udp_bind+0xe2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012018:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8012104 <udp_bind+0x104>
 801201c:	f8dc 7000 	ldr.w	r7, [ip]
 8012020:	b34f      	cbz	r7, 8012076 <udp_bind+0x76>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012022:	42bd      	cmp	r5, r7
 8012024:	d036      	beq.n	8012094 <udp_bind+0x94>
 8012026:	463c      	mov	r4, r7
 8012028:	e001      	b.n	801202e <udp_bind+0x2e>
 801202a:	42a5      	cmp	r5, r4
 801202c:	d032      	beq.n	8012094 <udp_bind+0x94>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801202e:	68e4      	ldr	r4, [r4, #12]
 8012030:	2c00      	cmp	r4, #0
 8012032:	d1fa      	bne.n	801202a <udp_bind+0x2a>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012034:	b38e      	cbz	r6, 801209a <udp_bind+0x9a>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012036:	f8d8 1000 	ldr.w	r1, [r8]
 801203a:	463b      	mov	r3, r7
 801203c:	e001      	b.n	8012042 <udp_bind+0x42>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	b19b      	cbz	r3, 801206a <udp_bind+0x6a>
      if (pcb != ipcb) {
 8012042:	429d      	cmp	r5, r3
 8012044:	d0fb      	beq.n	801203e <udp_bind+0x3e>
          if ((ipcb->local_port == port) &&
 8012046:	8a5a      	ldrh	r2, [r3, #18]
 8012048:	42b2      	cmp	r2, r6
 801204a:	d1f8      	bne.n	801203e <udp_bind+0x3e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801204c:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801204e:	428a      	cmp	r2, r1
 8012050:	bf18      	it	ne
 8012052:	2a00      	cmpne	r2, #0
 8012054:	d001      	beq.n	801205a <udp_bind+0x5a>
 8012056:	2900      	cmp	r1, #0
 8012058:	d1f1      	bne.n	801203e <udp_bind+0x3e>
      return ERR_USE;
 801205a:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012062:	f8d8 1000 	ldr.w	r1, [r8]
 8012066:	f8ae 6000 	strh.w	r6, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801206a:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 801206c:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 801206e:	b144      	cbz	r4, 8012082 <udp_bind+0x82>
  return ERR_OK;
 8012070:	2000      	movs	r0, #0
}
 8012072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 8012076:	2e00      	cmp	r6, #0
 8012078:	d031      	beq.n	80120de <udp_bind+0xde>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801207a:	f8d8 3000 	ldr.w	r3, [r8]
  pcb->local_port = port;
 801207e:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012080:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8012082:	2000      	movs	r0, #0
    pcb->next = udp_pcbs;
 8012084:	60ef      	str	r7, [r5, #12]
    udp_pcbs = pcb;
 8012086:	f8cc 5000 	str.w	r5, [ip]
}
 801208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 801208e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8012108 <udp_bind+0x108>
 8012092:	e7bf      	b.n	8012014 <udp_bind+0x14>
      rebind = 1;
 8012094:	2401      	movs	r4, #1
  if (port == 0) {
 8012096:	2e00      	cmp	r6, #0
 8012098:	d1cd      	bne.n	8012036 <udp_bind+0x36>
 801209a:	f8df e070 	ldr.w	lr, [pc, #112]	; 801210c <udp_bind+0x10c>
  rebind = 0;
 801209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80120a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80120a6:	f8be 6000 	ldrh.w	r6, [lr]
 80120aa:	4286      	cmp	r6, r0
 80120ac:	d014      	beq.n	80120d8 <udp_bind+0xd8>
 80120ae:	3601      	adds	r6, #1
 80120b0:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120b2:	2f00      	cmp	r7, #0
 80120b4:	d0d5      	beq.n	8012062 <udp_bind+0x62>
 80120b6:	463b      	mov	r3, r7
 80120b8:	e002      	b.n	80120c0 <udp_bind+0xc0>
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d0d0      	beq.n	8012062 <udp_bind+0x62>
    if (pcb->local_port == udp_port) {
 80120c0:	8a5a      	ldrh	r2, [r3, #18]
 80120c2:	42b2      	cmp	r2, r6
 80120c4:	d1f9      	bne.n	80120ba <udp_bind+0xba>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80120c6:	3901      	subs	r1, #1
 80120c8:	b289      	uxth	r1, r1
 80120ca:	2900      	cmp	r1, #0
 80120cc:	d1ed      	bne.n	80120aa <udp_bind+0xaa>
      return ERR_USE;
 80120ce:	f06f 0007 	mvn.w	r0, #7
 80120d2:	f8ae 6000 	strh.w	r6, [lr]
 80120d6:	e7cc      	b.n	8012072 <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80120d8:	f44f 4640 	mov.w	r6, #49152	; 0xc000
 80120dc:	e7e9      	b.n	80120b2 <udp_bind+0xb2>
  rebind = 0;
 80120de:	463c      	mov	r4, r7
 80120e0:	e7db      	b.n	801209a <udp_bind+0x9a>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80120e2:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <udp_bind+0xf8>)
 80120e4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80120e8:	4904      	ldr	r1, [pc, #16]	; (80120fc <udp_bind+0xfc>)
 80120ea:	4805      	ldr	r0, [pc, #20]	; (8012100 <udp_bind+0x100>)
 80120ec:	f002 fdbc 	bl	8014c68 <iprintf>
 80120f0:	f06f 000f 	mvn.w	r0, #15
 80120f4:	e7bd      	b.n	8012072 <udp_bind+0x72>
 80120f6:	bf00      	nop
 80120f8:	0801a230 	.word	0x0801a230
 80120fc:	0801a2d8 	.word	0x0801a2d8
 8012100:	08017728 	.word	0x08017728
 8012104:	24037af8 	.word	0x24037af8
 8012108:	0801a600 	.word	0x0801a600
 801210c:	24000086 	.word	0x24000086

08012110 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012110:	b570      	push	{r4, r5, r6, lr}
 8012112:	4604      	mov	r4, r0
 8012114:	460e      	mov	r6, r1
 8012116:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 8012118:	f7f5 ff36 	bl	8007f88 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801211c:	b114      	cbz	r4, 8012124 <udp_recv+0x14>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801211e:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 8012122:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012124:	4b04      	ldr	r3, [pc, #16]	; (8012138 <udp_recv+0x28>)
 8012126:	f240 428a 	movw	r2, #1162	; 0x48a
 801212a:	4904      	ldr	r1, [pc, #16]	; (801213c <udp_recv+0x2c>)
 801212c:	4804      	ldr	r0, [pc, #16]	; (8012140 <udp_recv+0x30>)
}
 801212e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012132:	f002 bd99 	b.w	8014c68 <iprintf>
 8012136:	bf00      	nop
 8012138:	0801a230 	.word	0x0801a230
 801213c:	0801a2f0 	.word	0x0801a2f0
 8012140:	08017728 	.word	0x08017728

08012144 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012144:	b510      	push	{r4, lr}
 8012146:	4604      	mov	r4, r0
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 8012148:	f7f5 ff1e 	bl	8007f88 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801214c:	b1d4      	cbz	r4, 8012184 <udp_remove+0x40>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801214e:	4b12      	ldr	r3, [pc, #72]	; (8012198 <udp_remove+0x54>)
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	42a2      	cmp	r2, r4
 8012154:	d006      	beq.n	8012164 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012156:	b13a      	cbz	r2, 8012168 <udp_remove+0x24>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012158:	68d3      	ldr	r3, [r2, #12]
 801215a:	b12b      	cbz	r3, 8012168 <udp_remove+0x24>
 801215c:	42a3      	cmp	r3, r4
 801215e:	d009      	beq.n	8012174 <udp_remove+0x30>
 8012160:	461a      	mov	r2, r3
 8012162:	e7f8      	b.n	8012156 <udp_remove+0x12>
    udp_pcbs = udp_pcbs->next;
 8012164:	68e2      	ldr	r2, [r4, #12]
 8012166:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012168:	4621      	mov	r1, r4
 801216a:	2000      	movs	r0, #0
}
 801216c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 8012170:	f7fa bd2c 	b.w	800cbcc <memp_free>
        pcb2->next = pcb->next;
 8012174:	68e3      	ldr	r3, [r4, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 8012176:	4621      	mov	r1, r4
 8012178:	2000      	movs	r0, #0
        pcb2->next = pcb->next;
 801217a:	60d3      	str	r3, [r2, #12]
}
 801217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 8012180:	f7fa bd24 	b.w	800cbcc <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012184:	4b05      	ldr	r3, [pc, #20]	; (801219c <udp_remove+0x58>)
 8012186:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801218a:	4905      	ldr	r1, [pc, #20]	; (80121a0 <udp_remove+0x5c>)
 801218c:	4805      	ldr	r0, [pc, #20]	; (80121a4 <udp_remove+0x60>)
}
 801218e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012192:	f002 bd69 	b.w	8014c68 <iprintf>
 8012196:	bf00      	nop
 8012198:	24037af8 	.word	0x24037af8
 801219c:	0801a230 	.word	0x0801a230
 80121a0:	0801a308 	.word	0x0801a308
 80121a4:	08017728 	.word	0x08017728

080121a8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80121a8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80121aa:	f7f5 feed 	bl	8007f88 <sys_check_core_locking>
  LWIP_ASSERT_CORE_LOCKED();
 80121ae:	f7f5 feeb 	bl	8007f88 <sys_check_core_locking>
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80121b2:	2000      	movs	r0, #0
 80121b4:	f7fa fcc4 	bl	800cb40 <memp_malloc>
  if (pcb != NULL) {
 80121b8:	4604      	mov	r4, r0
 80121ba:	b128      	cbz	r0, 80121c8 <udp_new_ip_type+0x20>
    memset(pcb, 0, sizeof(struct udp_pcb));
 80121bc:	2220      	movs	r2, #32
 80121be:	2100      	movs	r1, #0
 80121c0:	f002 fe1f 	bl	8014e02 <memset>
    pcb->ttl = UDP_TTL;
 80121c4:	23ff      	movs	r3, #255	; 0xff
 80121c6:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 80121c8:	4620      	mov	r0, r4
 80121ca:	bd10      	pop	{r4, pc}

080121cc <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80121cc:	b110      	cbz	r0, 80121d4 <udp_netif_ip_addr_changed+0x8>
 80121ce:	6802      	ldr	r2, [r0, #0]
 80121d0:	b101      	cbz	r1, 80121d4 <udp_netif_ip_addr_changed+0x8>
 80121d2:	b902      	cbnz	r2, 80121d6 <udp_netif_ip_addr_changed+0xa>
 80121d4:	4770      	bx	lr
 80121d6:	680b      	ldr	r3, [r1, #0]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d0fb      	beq.n	80121d4 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80121dc:	4b08      	ldr	r3, [pc, #32]	; (8012200 <udp_netif_ip_addr_changed+0x34>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d0f7      	beq.n	80121d4 <udp_netif_ip_addr_changed+0x8>
{
 80121e4:	b410      	push	{r4}
 80121e6:	e000      	b.n	80121ea <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80121e8:	6802      	ldr	r2, [r0, #0]
 80121ea:	681c      	ldr	r4, [r3, #0]
 80121ec:	4294      	cmp	r4, r2
 80121ee:	d101      	bne.n	80121f4 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80121f0:	680a      	ldr	r2, [r1, #0]
 80121f2:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1f6      	bne.n	80121e8 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 80121fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121fe:	4770      	bx	lr
 8012200:	24037af8 	.word	0x24037af8

08012204 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012208:	468b      	mov	fp, r1
 801220a:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801220c:	f04f 080a 	mov.w	r8, #10
{
 8012210:	b085      	sub	sp, #20
 8012212:	4617      	mov	r7, r2
 8012214:	4e52      	ldr	r6, [pc, #328]	; (8012360 <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012216:	465a      	mov	r2, fp
{
 8012218:	4605      	mov	r5, r0
 801221a:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801221c:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 801221e:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012220:	46c6      	mov	lr, r8
 8012222:	46c3      	mov	fp, r8
 8012224:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012226:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012228:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801222c:	e004      	b.n	8012238 <etharp_find_entry+0x34>
 801222e:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012230:	3301      	adds	r3, #1
 8012232:	3118      	adds	r1, #24
 8012234:	2b0a      	cmp	r3, #10
 8012236:	d016      	beq.n	8012266 <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012238:	2c0a      	cmp	r4, #10
 801223a:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 801223e:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012240:	d13a      	bne.n	80122b8 <etharp_find_entry+0xb4>
 8012242:	2a00      	cmp	r2, #0
 8012244:	d0f3      	beq.n	801222e <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012246:	b11d      	cbz	r5, 8012250 <etharp_find_entry+0x4c>
 8012248:	6828      	ldr	r0, [r5, #0]
 801224a:	684f      	ldr	r7, [r1, #4]
 801224c:	42b8      	cmp	r0, r7
 801224e:	d03e      	beq.n	80122ce <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012250:	2a01      	cmp	r2, #1
 8012252:	d034      	beq.n	80122be <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012254:	8a4a      	ldrh	r2, [r1, #18]
 8012256:	454a      	cmp	r2, r9
 8012258:	d3ea      	bcc.n	8012230 <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801225a:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 801225c:	4691      	mov	r9, r2
 801225e:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012260:	3118      	adds	r1, #24
 8012262:	2b0a      	cmp	r3, #10
 8012264:	d1e8      	bne.n	8012238 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012266:	46da      	mov	sl, fp
 8012268:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 801226c:	f1bb 0f01 	cmp.w	fp, #1
 8012270:	d172      	bne.n	8012358 <etharp_find_entry+0x154>
 8012272:	2c0a      	cmp	r4, #10
 8012274:	d032      	beq.n	80122dc <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012276:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801227a:	46a1      	mov	r9, r4
 801227c:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8012280:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8012284:	7d1b      	ldrb	r3, [r3, #20]
 8012286:	b133      	cbz	r3, 8012296 <etharp_find_entry+0x92>
 8012288:	4b36      	ldr	r3, [pc, #216]	; (8012364 <etharp_find_entry+0x160>)
 801228a:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801228e:	4936      	ldr	r1, [pc, #216]	; (8012368 <etharp_find_entry+0x164>)
 8012290:	4836      	ldr	r0, [pc, #216]	; (801236c <etharp_find_entry+0x168>)
 8012292:	f002 fce9 	bl	8014c68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012296:	b12d      	cbz	r5, 80122a4 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012298:	eb08 0309 	add.w	r3, r8, r9
 801229c:	682a      	ldr	r2, [r5, #0]
 801229e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80122a2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80122a4:	44c8      	add	r8, r9
 80122a6:	2300      	movs	r3, #0
 80122a8:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 80122ac:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80122ae:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 80122b0:	4620      	mov	r0, r4
 80122b2:	b005      	add	sp, #20
 80122b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 80122b8:	2a00      	cmp	r2, #0
 80122ba:	d0b9      	beq.n	8012230 <etharp_find_entry+0x2c>
 80122bc:	e7c3      	b.n	8012246 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 80122be:	680a      	ldr	r2, [r1, #0]
 80122c0:	b3a2      	cbz	r2, 801232c <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 80122c2:	8a4a      	ldrh	r2, [r1, #18]
 80122c4:	4552      	cmp	r2, sl
 80122c6:	d3b3      	bcc.n	8012230 <etharp_find_entry+0x2c>
 80122c8:	4692      	mov	sl, r2
 80122ca:	46e0      	mov	r8, ip
 80122cc:	e7b0      	b.n	8012230 <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80122ce:	9f01      	ldr	r7, [sp, #4]
 80122d0:	b117      	cbz	r7, 80122d8 <etharp_find_entry+0xd4>
 80122d2:	6888      	ldr	r0, [r1, #8]
 80122d4:	42b8      	cmp	r0, r7
 80122d6:	d1bb      	bne.n	8012250 <etharp_find_entry+0x4c>
 80122d8:	4664      	mov	r4, ip
 80122da:	e7e9      	b.n	80122b0 <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 80122dc:	f1be 0f0a 	cmp.w	lr, #10
 80122e0:	d02c      	beq.n	801233c <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80122e2:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 80122e6:	46f1      	mov	r9, lr
 80122e8:	ea4f 084e 	mov.w	r8, lr, lsl #1
 80122ec:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 80122f0:	b383      	cbz	r3, 8012354 <etharp_find_entry+0x150>
 80122f2:	464c      	mov	r4, r9
 80122f4:	4b1b      	ldr	r3, [pc, #108]	; (8012364 <etharp_find_entry+0x160>)
 80122f6:	f240 126d 	movw	r2, #365	; 0x16d
 80122fa:	491d      	ldr	r1, [pc, #116]	; (8012370 <etharp_find_entry+0x16c>)
 80122fc:	481b      	ldr	r0, [pc, #108]	; (801236c <etharp_find_entry+0x168>)
 80122fe:	f002 fcb3 	bl	8014c68 <iprintf>
  if (arp_table[i].q != NULL) {
 8012302:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 8012306:	ea4f 0849 	mov.w	r8, r9, lsl #1
 801230a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801230e:	f856 000a 	ldr.w	r0, [r6, sl]
 8012312:	b120      	cbz	r0, 801231e <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 8012314:	f7fb f820 	bl	800d358 <pbuf_free>
    arp_table[i].q = NULL;
 8012318:	2300      	movs	r3, #0
 801231a:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801231e:	eb08 0309 	add.w	r3, r8, r9
 8012322:	2200      	movs	r2, #0
 8012324:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8012328:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801232a:	e7b4      	b.n	8012296 <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 801232c:	8a4a      	ldrh	r2, [r1, #18]
 801232e:	9803      	ldr	r0, [sp, #12]
 8012330:	4282      	cmp	r2, r0
 8012332:	f4ff af7d 	bcc.w	8012230 <etharp_find_entry+0x2c>
 8012336:	46e3      	mov	fp, ip
 8012338:	9203      	str	r2, [sp, #12]
 801233a:	e779      	b.n	8012230 <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801233c:	f1ba 0f0a 	cmp.w	sl, #10
 8012340:	d105      	bne.n	801234e <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012342:	f1b8 0f0a 	cmp.w	r8, #10
 8012346:	d007      	beq.n	8012358 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 8012348:	4644      	mov	r4, r8
 801234a:	46c1      	mov	r9, r8
 801234c:	e7d9      	b.n	8012302 <etharp_find_entry+0xfe>
 801234e:	4654      	mov	r4, sl
 8012350:	46d1      	mov	r9, sl
 8012352:	e7d6      	b.n	8012302 <etharp_find_entry+0xfe>
 8012354:	4674      	mov	r4, lr
 8012356:	e7e2      	b.n	801231e <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 8012358:	f04f 34ff 	mov.w	r4, #4294967295
 801235c:	e7a8      	b.n	80122b0 <etharp_find_entry+0xac>
 801235e:	bf00      	nop
 8012360:	24037afc 	.word	0x24037afc
 8012364:	0801a320 	.word	0x0801a320
 8012368:	0801a370 	.word	0x0801a370
 801236c:	08017728 	.word	0x08017728
 8012370:	0801a358 	.word	0x0801a358

08012374 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012378:	b082      	sub	sp, #8
 801237a:	4688      	mov	r8, r1
 801237c:	4691      	mov	r9, r2
 801237e:	461f      	mov	r7, r3
 8012380:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012384:	4606      	mov	r6, r0
{
 8012386:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801238a:	2800      	cmp	r0, #0
 801238c:	d050      	beq.n	8012430 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801238e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012392:	211c      	movs	r1, #28
 8012394:	200e      	movs	r0, #14
 8012396:	f7fb f84f 	bl	800d438 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801239a:	4605      	mov	r5, r0
 801239c:	2800      	cmp	r0, #0
 801239e:	d04f      	beq.n	8012440 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80123a0:	8943      	ldrh	r3, [r0, #10]
 80123a2:	2b1b      	cmp	r3, #27
 80123a4:	d93c      	bls.n	8012420 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80123a6:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 80123a8:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 80123aa:	f7fa f833 	bl	800c414 <lwip_htons>
 80123ae:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80123b0:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 80123b4:	2b06      	cmp	r3, #6
 80123b6:	d006      	beq.n	80123c6 <etharp_raw+0x52>
 80123b8:	4b23      	ldr	r3, [pc, #140]	; (8012448 <etharp_raw+0xd4>)
 80123ba:	f240 4269 	movw	r2, #1129	; 0x469
 80123be:	4923      	ldr	r1, [pc, #140]	; (801244c <etharp_raw+0xd8>)
 80123c0:	4823      	ldr	r0, [pc, #140]	; (8012450 <etharp_raw+0xdc>)
 80123c2:	f002 fc51 	bl	8014c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80123c6:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80123c8:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80123ca:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80123cc:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80123ce:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80123d0:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80123d2:	88b9      	ldrh	r1, [r7, #4]
 80123d4:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80123d6:	f8da 1000 	ldr.w	r1, [sl]
 80123da:	f8c4 1012 	str.w	r1, [r4, #18]
 80123de:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 80123e2:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80123e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80123e6:	6809      	ldr	r1, [r1, #0]
 80123e8:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80123ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80123ee:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80123f0:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80123f2:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80123f4:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80123f6:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80123f8:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80123fa:	2108      	movs	r1, #8
 80123fc:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80123fe:	2106      	movs	r1, #6
 8012400:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012402:	2104      	movs	r1, #4
 8012404:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012406:	f640 0106 	movw	r1, #2054	; 0x806
 801240a:	9100      	str	r1, [sp, #0]
 801240c:	4629      	mov	r1, r5
 801240e:	f001 fab5 	bl	801397c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012412:	4628      	mov	r0, r5
 8012414:	f7fa ffa0 	bl	800d358 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8012418:	4630      	mov	r0, r6
}
 801241a:	b002      	add	sp, #8
 801241c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012420:	4b09      	ldr	r3, [pc, #36]	; (8012448 <etharp_raw+0xd4>)
 8012422:	f240 4262 	movw	r2, #1122	; 0x462
 8012426:	490b      	ldr	r1, [pc, #44]	; (8012454 <etharp_raw+0xe0>)
 8012428:	4809      	ldr	r0, [pc, #36]	; (8012450 <etharp_raw+0xdc>)
 801242a:	f002 fc1d 	bl	8014c68 <iprintf>
 801242e:	e7ba      	b.n	80123a6 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012430:	4b05      	ldr	r3, [pc, #20]	; (8012448 <etharp_raw+0xd4>)
 8012432:	f240 4257 	movw	r2, #1111	; 0x457
 8012436:	4908      	ldr	r1, [pc, #32]	; (8012458 <etharp_raw+0xe4>)
 8012438:	4805      	ldr	r0, [pc, #20]	; (8012450 <etharp_raw+0xdc>)
 801243a:	f002 fc15 	bl	8014c68 <iprintf>
 801243e:	e7a6      	b.n	801238e <etharp_raw+0x1a>
    return ERR_MEM;
 8012440:	f04f 30ff 	mov.w	r0, #4294967295
 8012444:	e7e9      	b.n	801241a <etharp_raw+0xa6>
 8012446:	bf00      	nop
 8012448:	0801a320 	.word	0x0801a320
 801244c:	0801a3d0 	.word	0x0801a3d0
 8012450:	08017728 	.word	0x08017728
 8012454:	0801a39c 	.word	0x0801a39c
 8012458:	08017f6c 	.word	0x08017f6c

0801245c <etharp_output_to_arp_index>:
{
 801245c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012460:	4f39      	ldr	r7, [pc, #228]	; (8012548 <etharp_output_to_arp_index+0xec>)
 8012462:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 8012466:	b084      	sub	sp, #16
 8012468:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801246a:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 801246e:	4605      	mov	r5, r0
 8012470:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012472:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8012476:	f899 3014 	ldrb.w	r3, [r9, #20]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d93d      	bls.n	80124fa <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801247e:	2b02      	cmp	r3, #2
 8012480:	d013      	beq.n	80124aa <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012482:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012486:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801248a:	fb09 7904 	mla	r9, r9, r4, r7
 801248e:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012492:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8012496:	464b      	mov	r3, r9
 8012498:	4652      	mov	r2, sl
 801249a:	4631      	mov	r1, r6
 801249c:	4628      	mov	r0, r5
 801249e:	9400      	str	r4, [sp, #0]
 80124a0:	f001 fa6c 	bl	801397c <ethernet_output>
}
 80124a4:	b004      	add	sp, #16
 80124a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80124aa:	44a0      	add	r8, r4
 80124ac:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 80124b0:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 80124b4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80124b8:	d829      	bhi.n	801250e <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80124ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80124be:	d3e0      	bcc.n	8012482 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80124c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80124c4:	2301      	movs	r3, #1
 80124c6:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 80124ca:	4628      	mov	r0, r5
 80124cc:	00e4      	lsls	r4, r4, #3
 80124ce:	9303      	str	r3, [sp, #12]
 80124d0:	4b1e      	ldr	r3, [pc, #120]	; (801254c <etharp_output_to_arp_index+0xf0>)
 80124d2:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80124d4:	f104 090c 	add.w	r9, r4, #12
 80124d8:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80124da:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80124dc:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80124de:	44b9      	add	r9, r7
 80124e0:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80124e2:	9300      	str	r3, [sp, #0]
 80124e4:	4653      	mov	r3, sl
 80124e6:	464a      	mov	r2, r9
 80124e8:	9702      	str	r7, [sp, #8]
 80124ea:	f7ff ff43 	bl	8012374 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d1cf      	bne.n	8012492 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80124f2:	2303      	movs	r3, #3
 80124f4:	f888 3014 	strb.w	r3, [r8, #20]
 80124f8:	e7cb      	b.n	8012492 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80124fa:	4b15      	ldr	r3, [pc, #84]	; (8012550 <etharp_output_to_arp_index+0xf4>)
 80124fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012500:	4914      	ldr	r1, [pc, #80]	; (8012554 <etharp_output_to_arp_index+0xf8>)
 8012502:	4815      	ldr	r0, [pc, #84]	; (8012558 <etharp_output_to_arp_index+0xfc>)
 8012504:	f002 fbb0 	bl	8014c68 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012508:	f899 3014 	ldrb.w	r3, [r9, #20]
 801250c:	e7b7      	b.n	801247e <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801250e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012512:	2301      	movs	r3, #1
 8012514:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 8012518:	4a10      	ldr	r2, [pc, #64]	; (801255c <etharp_output_to_arp_index+0x100>)
 801251a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801251e:	9303      	str	r3, [sp, #12]
 8012520:	4651      	mov	r1, sl
 8012522:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012524:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012528:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801252c:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801252e:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012530:	9302      	str	r3, [sp, #8]
 8012532:	4b06      	ldr	r3, [pc, #24]	; (801254c <etharp_output_to_arp_index+0xf0>)
 8012534:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012536:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012538:	9300      	str	r3, [sp, #0]
 801253a:	4653      	mov	r3, sl
 801253c:	f7ff ff1a 	bl	8012374 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012540:	2800      	cmp	r0, #0
 8012542:	d0d6      	beq.n	80124f2 <etharp_output_to_arp_index+0x96>
 8012544:	e7a5      	b.n	8012492 <etharp_output_to_arp_index+0x36>
 8012546:	bf00      	nop
 8012548:	24037afc 	.word	0x24037afc
 801254c:	0801a7fc 	.word	0x0801a7fc
 8012550:	0801a320 	.word	0x0801a320
 8012554:	0801a414 	.word	0x0801a414
 8012558:	08017728 	.word	0x08017728
 801255c:	0801a7f4 	.word	0x0801a7f4

08012560 <etharp_tmr>:
{
 8012560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012564:	4c20      	ldr	r4, [pc, #128]	; (80125e8 <etharp_tmr+0x88>)
 8012566:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012568:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801256a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80125f0 <etharp_tmr+0x90>
 801256e:	4f1f      	ldr	r7, [pc, #124]	; (80125ec <etharp_tmr+0x8c>)
 8012570:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 8012574:	e00c      	b.n	8012590 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012576:	2a01      	cmp	r2, #1
 8012578:	d101      	bne.n	801257e <etharp_tmr+0x1e>
 801257a:	2b04      	cmp	r3, #4
 801257c:	d812      	bhi.n	80125a4 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801257e:	2a03      	cmp	r2, #3
 8012580:	d01e      	beq.n	80125c0 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012582:	2a04      	cmp	r2, #4
 8012584:	d01f      	beq.n	80125c6 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012586:	2a01      	cmp	r2, #1
 8012588:	d020      	beq.n	80125cc <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801258a:	3418      	adds	r4, #24
 801258c:	42ac      	cmp	r4, r5
 801258e:	d014      	beq.n	80125ba <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 8012590:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8012592:	2a00      	cmp	r2, #0
 8012594:	d0f9      	beq.n	801258a <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8012596:	89e3      	ldrh	r3, [r4, #14]
 8012598:	3301      	adds	r3, #1
 801259a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801259c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80125a0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80125a2:	d3e8      	bcc.n	8012576 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 80125a4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80125a8:	b118      	cbz	r0, 80125b2 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 80125aa:	f7fa fed5 	bl	800d358 <pbuf_free>
    arp_table[i].q = NULL;
 80125ae:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80125b2:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80125b4:	3418      	adds	r4, #24
 80125b6:	42ac      	cmp	r4, r5
 80125b8:	d1ea      	bne.n	8012590 <etharp_tmr+0x30>
}
 80125ba:	b004      	add	sp, #16
 80125bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80125c0:	2304      	movs	r3, #4
 80125c2:	7423      	strb	r3, [r4, #16]
 80125c4:	e7e1      	b.n	801258a <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80125c6:	2302      	movs	r3, #2
 80125c8:	7423      	strb	r3, [r4, #16]
 80125ca:	e7de      	b.n	801258a <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80125cc:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80125d2:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80125d6:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125d8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80125dc:	9100      	str	r1, [sp, #0]
 80125de:	463a      	mov	r2, r7
 80125e0:	4619      	mov	r1, r3
 80125e2:	f7ff fec7 	bl	8012374 <etharp_raw>
 80125e6:	e7d0      	b.n	801258a <etharp_tmr+0x2a>
 80125e8:	24037b00 	.word	0x24037b00
 80125ec:	0801a7f4 	.word	0x0801a7f4
 80125f0:	0801a7fc 	.word	0x0801a7fc

080125f4 <etharp_cleanup_netif>:
{
 80125f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125f6:	4c0a      	ldr	r4, [pc, #40]	; (8012620 <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80125f8:	2700      	movs	r7, #0
{
 80125fa:	4606      	mov	r6, r0
 80125fc:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012600:	7d23      	ldrb	r3, [r4, #20]
 8012602:	b113      	cbz	r3, 801260a <etharp_cleanup_netif+0x16>
 8012604:	68a3      	ldr	r3, [r4, #8]
 8012606:	42b3      	cmp	r3, r6
 8012608:	d003      	beq.n	8012612 <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801260a:	3418      	adds	r4, #24
 801260c:	42ac      	cmp	r4, r5
 801260e:	d1f7      	bne.n	8012600 <etharp_cleanup_netif+0xc>
}
 8012610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 8012612:	6820      	ldr	r0, [r4, #0]
 8012614:	b110      	cbz	r0, 801261c <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 8012616:	f7fa fe9f 	bl	800d358 <pbuf_free>
    arp_table[i].q = NULL;
 801261a:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801261c:	7527      	strb	r7, [r4, #20]
}
 801261e:	e7f4      	b.n	801260a <etharp_cleanup_netif+0x16>
 8012620:	24037afc 	.word	0x24037afc

08012624 <etharp_input>:
{
 8012624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	460d      	mov	r5, r1
 801262a:	b087      	sub	sp, #28
 801262c:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 801262e:	f7f5 fcab 	bl	8007f88 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012632:	2d00      	cmp	r5, #0
 8012634:	d07b      	beq.n	801272e <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 8012636:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012638:	8833      	ldrh	r3, [r6, #0]
 801263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801263e:	d102      	bne.n	8012646 <etharp_input+0x22>
 8012640:	7933      	ldrb	r3, [r6, #4]
 8012642:	2b06      	cmp	r3, #6
 8012644:	d005      	beq.n	8012652 <etharp_input+0x2e>
  pbuf_free(p);
 8012646:	4620      	mov	r0, r4
}
 8012648:	b007      	add	sp, #28
 801264a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801264e:	f7fa be83 	b.w	800d358 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012652:	7973      	ldrb	r3, [r6, #5]
 8012654:	2b04      	cmp	r3, #4
 8012656:	d1f6      	bne.n	8012646 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012658:	8873      	ldrh	r3, [r6, #2]
 801265a:	2b08      	cmp	r3, #8
 801265c:	d1f3      	bne.n	8012646 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801265e:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012662:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012666:	686f      	ldr	r7, [r5, #4]
 8012668:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801266a:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801266e:	2f00      	cmp	r7, #0
 8012670:	d167      	bne.n	8012742 <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012672:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012676:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801267a:	2b06      	cmp	r3, #6
 801267c:	d165      	bne.n	801274a <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 801267e:	f1ba 0f00 	cmp.w	sl, #0
 8012682:	d03e      	beq.n	8012702 <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012684:	4629      	mov	r1, r5
 8012686:	4650      	mov	r0, sl
 8012688:	f000 fcae 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801268c:	4681      	mov	r9, r0
 801268e:	bbc0      	cbnz	r0, 8012702 <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 8012690:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012694:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 8012698:	d033      	beq.n	8012702 <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 801269a:	4659      	mov	r1, fp
 801269c:	462a      	mov	r2, r5
 801269e:	a805      	add	r0, sp, #20
 80126a0:	f7ff fdb0 	bl	8012204 <etharp_find_entry>
  if (i < 0) {
 80126a4:	1e03      	subs	r3, r0, #0
 80126a6:	db2c      	blt.n	8012702 <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80126a8:	492d      	ldr	r1, [pc, #180]	; (8012760 <etharp_input+0x13c>)
 80126aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80126ae:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80126b0:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 80126b4:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 80126b8:	00d2      	lsls	r2, r2, #3
 80126ba:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80126be:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 80126c0:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80126c4:	fb13 030e 	smlabb	r3, r3, lr, r0
 80126c8:	f8d8 0000 	ldr.w	r0, [r8]
 80126cc:	50c8      	str	r0, [r1, r3]
 80126ce:	440b      	add	r3, r1
 80126d0:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80126d4:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 80126d6:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 80126da:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 80126de:	f1ba 0f00 	cmp.w	sl, #0
 80126e2:	d00e      	beq.n	8012702 <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80126e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80126e8:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80126ec:	4628      	mov	r0, r5
 80126ee:	f105 0226 	add.w	r2, r5, #38	; 0x26
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	4651      	mov	r1, sl
 80126f6:	4643      	mov	r3, r8
 80126f8:	f001 f940 	bl	801397c <ethernet_output>
    pbuf_free(p);
 80126fc:	4650      	mov	r0, sl
 80126fe:	f7fa fe2b 	bl	800d358 <pbuf_free>
  switch (hdr->opcode) {
 8012702:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 8012704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012708:	d19d      	bne.n	8012646 <etharp_input+0x22>
 801270a:	2f00      	cmp	r7, #0
 801270c:	d09b      	beq.n	8012646 <etharp_input+0x22>
        etharp_raw(netif,
 801270e:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012710:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 8012714:	4642      	mov	r2, r8
 8012716:	4628      	mov	r0, r5
 8012718:	9103      	str	r1, [sp, #12]
 801271a:	a905      	add	r1, sp, #20
 801271c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012720:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012722:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8012724:	9100      	str	r1, [sp, #0]
 8012726:	4619      	mov	r1, r3
 8012728:	f7ff fe24 	bl	8012374 <etharp_raw>
 801272c:	e78b      	b.n	8012646 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801272e:	4b0d      	ldr	r3, [pc, #52]	; (8012764 <etharp_input+0x140>)
 8012730:	f240 228a 	movw	r2, #650	; 0x28a
 8012734:	490c      	ldr	r1, [pc, #48]	; (8012768 <etharp_input+0x144>)
 8012736:	480d      	ldr	r0, [pc, #52]	; (801276c <etharp_input+0x148>)
}
 8012738:	b007      	add	sp, #28
 801273a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801273e:	f002 ba93 	b.w	8014c68 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012742:	429f      	cmp	r7, r3
 8012744:	d009      	beq.n	801275a <etharp_input+0x136>
 8012746:	2700      	movs	r7, #0
 8012748:	e793      	b.n	8012672 <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801274a:	4b06      	ldr	r3, [pc, #24]	; (8012764 <etharp_input+0x140>)
 801274c:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012750:	4907      	ldr	r1, [pc, #28]	; (8012770 <etharp_input+0x14c>)
 8012752:	4806      	ldr	r0, [pc, #24]	; (801276c <etharp_input+0x148>)
 8012754:	f002 fa88 	bl	8014c68 <iprintf>
 8012758:	e791      	b.n	801267e <etharp_input+0x5a>
 801275a:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801275c:	46bb      	mov	fp, r7
 801275e:	e78a      	b.n	8012676 <etharp_input+0x52>
 8012760:	24037afc 	.word	0x24037afc
 8012764:	0801a320 	.word	0x0801a320
 8012768:	08017f6c 	.word	0x08017f6c
 801276c:	08017728 	.word	0x08017728
 8012770:	0801a464 	.word	0x0801a464

08012774 <etharp_query>:
{
 8012774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012778:	460e      	mov	r6, r1
 801277a:	b085      	sub	sp, #20
 801277c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801277e:	4601      	mov	r1, r0
 8012780:	6830      	ldr	r0, [r6, #0]
{
 8012782:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012784:	f000 fc30 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 8012788:	2800      	cmp	r0, #0
 801278a:	f040 8099 	bne.w	80128c0 <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 801278e:	6833      	ldr	r3, [r6, #0]
 8012790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8012794:	2ae0      	cmp	r2, #224	; 0xe0
 8012796:	f000 8093 	beq.w	80128c0 <etharp_query+0x14c>
 801279a:	2b00      	cmp	r3, #0
 801279c:	f000 8090 	beq.w	80128c0 <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80127a0:	462a      	mov	r2, r5
 80127a2:	2101      	movs	r1, #1
 80127a4:	4630      	mov	r0, r6
 80127a6:	f7ff fd2d 	bl	8012204 <etharp_find_entry>
  if (i_err < 0) {
 80127aa:	f1b0 0800 	subs.w	r8, r0, #0
 80127ae:	db4c      	blt.n	801284a <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80127b0:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 80127b4:	dc41      	bgt.n	801283a <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 80127b6:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80127ba:	f8df a144 	ldr.w	sl, [pc, #324]	; 8012900 <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80127be:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80127c2:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 80127c6:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80127ca:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 80127ce:	f899 3014 	ldrb.w	r3, [r9, #20]
 80127d2:	b14b      	cbz	r3, 80127e8 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 80127d4:	2f00      	cmp	r7, #0
 80127d6:	d079      	beq.n	80128cc <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80127d8:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 80127da:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80127de:	d81a      	bhi.n	8012816 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80127e0:	d038      	beq.n	8012854 <etharp_query+0xe0>
}
 80127e2:	b005      	add	sp, #20
 80127e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80127e8:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80127ea:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 80127ec:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80127f0:	4621      	mov	r1, r4
 80127f2:	9303      	str	r3, [sp, #12]
 80127f4:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 80127f6:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80127fa:	4b3b      	ldr	r3, [pc, #236]	; (80128e8 <etharp_query+0x174>)
 80127fc:	4a3b      	ldr	r2, [pc, #236]	; (80128ec <etharp_query+0x178>)
 80127fe:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012800:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012802:	9300      	str	r3, [sp, #0]
 8012804:	4623      	mov	r3, r4
 8012806:	f7ff fdb5 	bl	8012374 <etharp_raw>
    if (q == NULL) {
 801280a:	2f00      	cmp	r7, #0
 801280c:	d0e9      	beq.n	80127e2 <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801280e:	f899 3014 	ldrb.w	r3, [r9, #20]
 8012812:	2b01      	cmp	r3, #1
 8012814:	d9e4      	bls.n	80127e0 <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012816:	2318      	movs	r3, #24
 8012818:	4622      	mov	r2, r4
 801281a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 801281e:	4639      	mov	r1, r7
 8012820:	fb03 a308 	mla	r3, r3, r8, sl
 8012824:	4628      	mov	r0, r5
 8012826:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8012828:	4c31      	ldr	r4, [pc, #196]	; (80128f0 <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801282a:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 801282c:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012830:	f001 f8a4 	bl	801397c <ethernet_output>
}
 8012834:	b005      	add	sp, #20
 8012836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801283a:	4b2e      	ldr	r3, [pc, #184]	; (80128f4 <etharp_query+0x180>)
 801283c:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012840:	492d      	ldr	r1, [pc, #180]	; (80128f8 <etharp_query+0x184>)
 8012842:	482e      	ldr	r0, [pc, #184]	; (80128fc <etharp_query+0x188>)
 8012844:	f002 fa10 	bl	8014c68 <iprintf>
 8012848:	e7b5      	b.n	80127b6 <etharp_query+0x42>
    return (err_t)i_err;
 801284a:	fa4f f088 	sxtb.w	r0, r8
}
 801284e:	b005      	add	sp, #20
 8012850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012854:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012856:	4d27      	ldr	r5, [pc, #156]	; (80128f4 <etharp_query+0x180>)
 8012858:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8012904 <etharp_query+0x190>
 801285c:	4e27      	ldr	r6, [pc, #156]	; (80128fc <etharp_query+0x188>)
 801285e:	e004      	b.n	801286a <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 8012860:	7b23      	ldrb	r3, [r4, #12]
 8012862:	065a      	lsls	r2, r3, #25
 8012864:	d412      	bmi.n	801288c <etharp_query+0x118>
      p = p->next;
 8012866:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8012868:	b334      	cbz	r4, 80128b8 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801286a:	8962      	ldrh	r2, [r4, #10]
 801286c:	8923      	ldrh	r3, [r4, #8]
 801286e:	429a      	cmp	r2, r3
 8012870:	d1f6      	bne.n	8012860 <etharp_query+0xec>
 8012872:	6822      	ldr	r2, [r4, #0]
 8012874:	462b      	mov	r3, r5
 8012876:	b132      	cbz	r2, 8012886 <etharp_query+0x112>
 8012878:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801287c:	4649      	mov	r1, r9
 801287e:	4630      	mov	r0, r6
 8012880:	f002 f9f2 	bl	8014c68 <iprintf>
 8012884:	e7ec      	b.n	8012860 <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 8012886:	7b23      	ldrb	r3, [r4, #12]
 8012888:	065b      	lsls	r3, r3, #25
 801288a:	d515      	bpl.n	80128b8 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801288c:	463a      	mov	r2, r7
 801288e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012892:	200e      	movs	r0, #14
 8012894:	f7fa ffa8 	bl	800d7e8 <pbuf_clone>
    if (p != NULL) {
 8012898:	4607      	mov	r7, r0
 801289a:	b1a0      	cbz	r0, 80128c6 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 801289c:	eb0b 0308 	add.w	r3, fp, r8
 80128a0:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 80128a4:	b108      	cbz	r0, 80128aa <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 80128a6:	f7fa fd57 	bl	800d358 <pbuf_free>
      arp_table[i].q = p;
 80128aa:	44d8      	add	r8, fp
      result = ERR_OK;
 80128ac:	2000      	movs	r0, #0
      arp_table[i].q = p;
 80128ae:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 80128b2:	b005      	add	sp, #20
 80128b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 80128b8:	4638      	mov	r0, r7
 80128ba:	f7fa fecf 	bl	800d65c <pbuf_ref>
    if (p != NULL) {
 80128be:	e7ed      	b.n	801289c <etharp_query+0x128>
    return ERR_ARG;
 80128c0:	f06f 000f 	mvn.w	r0, #15
 80128c4:	e78d      	b.n	80127e2 <etharp_query+0x6e>
      result = ERR_MEM;
 80128c6:	f04f 30ff 	mov.w	r0, #4294967295
 80128ca:	e78a      	b.n	80127e2 <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80128cc:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80128ce:	2301      	movs	r3, #1
 80128d0:	4f05      	ldr	r7, [pc, #20]	; (80128e8 <etharp_query+0x174>)
 80128d2:	4621      	mov	r1, r4
 80128d4:	4628      	mov	r0, r5
 80128d6:	e9cd 6302 	strd	r6, r3, [sp, #8]
 80128da:	e9cd 2700 	strd	r2, r7, [sp]
 80128de:	4623      	mov	r3, r4
 80128e0:	4a02      	ldr	r2, [pc, #8]	; (80128ec <etharp_query+0x178>)
 80128e2:	f7ff fd47 	bl	8012374 <etharp_raw>
    if (q == NULL) {
 80128e6:	e77c      	b.n	80127e2 <etharp_query+0x6e>
 80128e8:	0801a7fc 	.word	0x0801a7fc
 80128ec:	0801a7f4 	.word	0x0801a7f4
 80128f0:	24037bec 	.word	0x24037bec
 80128f4:	0801a320 	.word	0x0801a320
 80128f8:	0801a488 	.word	0x0801a488
 80128fc:	08017728 	.word	0x08017728
 8012900:	24037afc 	.word	0x24037afc
 8012904:	0801a498 	.word	0x0801a498

08012908 <etharp_output>:
{
 8012908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801290a:	4605      	mov	r5, r0
 801290c:	b085      	sub	sp, #20
 801290e:	460f      	mov	r7, r1
 8012910:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 8012912:	f7f5 fb39 	bl	8007f88 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012916:	2d00      	cmp	r5, #0
 8012918:	f000 8081 	beq.w	8012a1e <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 801291c:	2f00      	cmp	r7, #0
 801291e:	d06d      	beq.n	80129fc <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012920:	2e00      	cmp	r6, #0
 8012922:	d074      	beq.n	8012a0e <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012924:	4629      	mov	r1, r5
 8012926:	6830      	ldr	r0, [r6, #0]
 8012928:	f000 fb5e 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 801292c:	2800      	cmp	r0, #0
 801292e:	d163      	bne.n	80129f8 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012930:	6833      	ldr	r3, [r6, #0]
 8012932:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012936:	2ae0      	cmp	r2, #224	; 0xe0
 8012938:	d039      	beq.n	80129ae <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801293a:	686a      	ldr	r2, [r5, #4]
 801293c:	68a9      	ldr	r1, [r5, #8]
 801293e:	405a      	eors	r2, r3
 8012940:	420a      	tst	r2, r1
 8012942:	d009      	beq.n	8012958 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 8012944:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012946:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801294a:	4293      	cmp	r3, r2
 801294c:	d004      	beq.n	8012958 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801294e:	68eb      	ldr	r3, [r5, #12]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d076      	beq.n	8012a42 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 8012954:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012958:	f8df c108 	ldr.w	ip, [pc, #264]	; 8012a64 <etharp_output+0x15c>
 801295c:	4b3a      	ldr	r3, [pc, #232]	; (8012a48 <etharp_output+0x140>)
 801295e:	f89c 2000 	ldrb.w	r2, [ip]
 8012962:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8012966:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801296a:	7d19      	ldrb	r1, [r3, #20]
 801296c:	2901      	cmp	r1, #1
 801296e:	d902      	bls.n	8012976 <etharp_output+0x6e>
 8012970:	6899      	ldr	r1, [r3, #8]
 8012972:	42a9      	cmp	r1, r5
 8012974:	d05e      	beq.n	8012a34 <etharp_output+0x12c>
 8012976:	4c34      	ldr	r4, [pc, #208]	; (8012a48 <etharp_output+0x140>)
{
 8012978:	2300      	movs	r3, #0
 801297a:	e003      	b.n	8012984 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801297c:	2b0a      	cmp	r3, #10
 801297e:	f104 0418 	add.w	r4, r4, #24
 8012982:	d031      	beq.n	80129e8 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012984:	7d20      	ldrb	r0, [r4, #20]
 8012986:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012988:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801298a:	2801      	cmp	r0, #1
 801298c:	d9f6      	bls.n	801297c <etharp_output+0x74>
 801298e:	68a1      	ldr	r1, [r4, #8]
 8012990:	42a9      	cmp	r1, r5
 8012992:	d1f3      	bne.n	801297c <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 8012994:	6830      	ldr	r0, [r6, #0]
 8012996:	6861      	ldr	r1, [r4, #4]
 8012998:	4288      	cmp	r0, r1
 801299a:	d1ef      	bne.n	801297c <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 801299c:	4639      	mov	r1, r7
 801299e:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 80129a0:	f88c 2000 	strb.w	r2, [ip]
}
 80129a4:	b005      	add	sp, #20
 80129a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 80129aa:	f7ff bd57 	b.w	801245c <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129ae:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80129b0:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80129b2:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80129b8:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80129bc:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129be:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80129c2:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80129c4:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80129c8:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 80129cc:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80129ce:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80129d2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80129d6:	f105 0226 	add.w	r2, r5, #38	; 0x26
 80129da:	4639      	mov	r1, r7
 80129dc:	4628      	mov	r0, r5
 80129de:	9400      	str	r4, [sp, #0]
 80129e0:	f000 ffcc 	bl	801397c <ethernet_output>
}
 80129e4:	b005      	add	sp, #20
 80129e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 80129e8:	463a      	mov	r2, r7
 80129ea:	4631      	mov	r1, r6
 80129ec:	4628      	mov	r0, r5
}
 80129ee:	b005      	add	sp, #20
 80129f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 80129f4:	f7ff bebe 	b.w	8012774 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 80129f8:	4b14      	ldr	r3, [pc, #80]	; (8012a4c <etharp_output+0x144>)
 80129fa:	e7ea      	b.n	80129d2 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 80129fc:	4b14      	ldr	r3, [pc, #80]	; (8012a50 <etharp_output+0x148>)
 80129fe:	f240 321f 	movw	r2, #799	; 0x31f
 8012a02:	4914      	ldr	r1, [pc, #80]	; (8012a54 <etharp_output+0x14c>)
 8012a04:	4814      	ldr	r0, [pc, #80]	; (8012a58 <etharp_output+0x150>)
 8012a06:	f002 f92f 	bl	8014c68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012a0a:	2e00      	cmp	r6, #0
 8012a0c:	d18a      	bne.n	8012924 <etharp_output+0x1c>
 8012a0e:	4b10      	ldr	r3, [pc, #64]	; (8012a50 <etharp_output+0x148>)
 8012a10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012a14:	4911      	ldr	r1, [pc, #68]	; (8012a5c <etharp_output+0x154>)
 8012a16:	4810      	ldr	r0, [pc, #64]	; (8012a58 <etharp_output+0x150>)
 8012a18:	f002 f926 	bl	8014c68 <iprintf>
 8012a1c:	e782      	b.n	8012924 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012a1e:	4b0c      	ldr	r3, [pc, #48]	; (8012a50 <etharp_output+0x148>)
 8012a20:	f240 321e 	movw	r2, #798	; 0x31e
 8012a24:	490e      	ldr	r1, [pc, #56]	; (8012a60 <etharp_output+0x158>)
 8012a26:	480c      	ldr	r0, [pc, #48]	; (8012a58 <etharp_output+0x150>)
 8012a28:	f002 f91e 	bl	8014c68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012a2c:	2f00      	cmp	r7, #0
 8012a2e:	f47f af77 	bne.w	8012920 <etharp_output+0x18>
 8012a32:	e7e3      	b.n	80129fc <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	6831      	ldr	r1, [r6, #0]
 8012a38:	4299      	cmp	r1, r3
 8012a3a:	d19c      	bne.n	8012976 <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012a3c:	4639      	mov	r1, r7
 8012a3e:	4628      	mov	r0, r5
 8012a40:	e7b0      	b.n	80129a4 <etharp_output+0x9c>
            return ERR_RTE;
 8012a42:	f06f 0003 	mvn.w	r0, #3
 8012a46:	e7cd      	b.n	80129e4 <etharp_output+0xdc>
 8012a48:	24037afc 	.word	0x24037afc
 8012a4c:	0801a7f4 	.word	0x0801a7f4
 8012a50:	0801a320 	.word	0x0801a320
 8012a54:	0801a4b4 	.word	0x0801a4b4
 8012a58:	08017728 	.word	0x08017728
 8012a5c:	0801a444 	.word	0x0801a444
 8012a60:	08017f6c 	.word	0x08017f6c
 8012a64:	24037bec 	.word	0x24037bec

08012a68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012a68:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012a6a:	2301      	movs	r3, #1
{
 8012a6c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012a6e:	4c07      	ldr	r4, [pc, #28]	; (8012a8c <etharp_request+0x24>)
 8012a70:	4a07      	ldr	r2, [pc, #28]	; (8012a90 <etharp_request+0x28>)
 8012a72:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012a74:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012a76:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8012a7a:	f100 0326 	add.w	r3, r0, #38	; 0x26
 8012a7e:	9400      	str	r4, [sp, #0]
 8012a80:	4619      	mov	r1, r3
 8012a82:	f7ff fc77 	bl	8012374 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8012a86:	b004      	add	sp, #16
 8012a88:	bd10      	pop	{r4, pc}
 8012a8a:	bf00      	nop
 8012a8c:	0801a7fc 	.word	0x0801a7fc
 8012a90:	0801a7f4 	.word	0x0801a7f4

08012a94 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a96:	460e      	mov	r6, r1
 8012a98:	b087      	sub	sp, #28
 8012a9a:	4617      	mov	r7, r2
 8012a9c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012a9e:	2124      	movs	r1, #36	; 0x24
 8012aa0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aa4:	2022      	movs	r0, #34	; 0x22
 8012aa6:	f7fa fcc7 	bl	800d438 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8012aaa:	b3a8      	cbz	r0, 8012b18 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012aac:	8943      	ldrh	r3, [r0, #10]
 8012aae:	4605      	mov	r5, r0
 8012ab0:	2b23      	cmp	r3, #35	; 0x23
 8012ab2:	d933      	bls.n	8012b1c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012ab4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012ab6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8012ab8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 8012aba:	2600      	movs	r6, #0
  icmphdr->code = code;
 8012abc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8012abe:	7126      	strb	r6, [r4, #4]
 8012ac0:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8012ac2:	71a6      	strb	r6, [r4, #6]
 8012ac4:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012ac6:	6818      	ldr	r0, [r3, #0]
 8012ac8:	6859      	ldr	r1, [r3, #4]
 8012aca:	689a      	ldr	r2, [r3, #8]
 8012acc:	68df      	ldr	r7, [r3, #12]
 8012ace:	60a0      	str	r0, [r4, #8]
 8012ad0:	6167      	str	r7, [r4, #20]
 8012ad2:	60e1      	str	r1, [r4, #12]
 8012ad4:	6122      	str	r2, [r4, #16]
 8012ad6:	6918      	ldr	r0, [r3, #16]
 8012ad8:	6959      	ldr	r1, [r3, #20]
 8012ada:	699a      	ldr	r2, [r3, #24]
 8012adc:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012ade:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012ae0:	61e1      	str	r1, [r4, #28]
 8012ae2:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8012ae8:	f000 f8d6 	bl	8012c98 <ip4_route>
#endif
  if (netif != NULL) {
 8012aec:	4607      	mov	r7, r0
 8012aee:	b180      	cbz	r0, 8012b12 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012af0:	8969      	ldrh	r1, [r5, #10]
 8012af2:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8012af4:	70a6      	strb	r6, [r4, #2]
 8012af6:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012af8:	f7f9 fccc 	bl	800c494 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012afc:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8012afe:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012b00:	aa05      	add	r2, sp, #20
 8012b02:	4631      	mov	r1, r6
 8012b04:	4628      	mov	r0, r5
 8012b06:	9600      	str	r6, [sp, #0]
 8012b08:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8012b0c:	23ff      	movs	r3, #255	; 0xff
 8012b0e:	f000 fa59 	bl	8012fc4 <ip4_output_if>
  }
  pbuf_free(q);
 8012b12:	4628      	mov	r0, r5
 8012b14:	f7fa fc20 	bl	800d358 <pbuf_free>
}
 8012b18:	b007      	add	sp, #28
 8012b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012b1c:	4b03      	ldr	r3, [pc, #12]	; (8012b2c <icmp_send_response+0x98>)
 8012b1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012b22:	4903      	ldr	r1, [pc, #12]	; (8012b30 <icmp_send_response+0x9c>)
 8012b24:	4803      	ldr	r0, [pc, #12]	; (8012b34 <icmp_send_response+0xa0>)
 8012b26:	f002 f89f 	bl	8014c68 <iprintf>
 8012b2a:	e7c3      	b.n	8012ab4 <icmp_send_response+0x20>
 8012b2c:	0801a4c0 	.word	0x0801a4c0
 8012b30:	0801a4f8 	.word	0x0801a4f8
 8012b34:	08017728 	.word	0x08017728

08012b38 <icmp_input>:
{
 8012b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8012b3c:	4f4c      	ldr	r7, [pc, #304]	; (8012c70 <icmp_input+0x138>)
{
 8012b3e:	b087      	sub	sp, #28
 8012b40:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8012b42:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8012b46:	f898 4000 	ldrb.w	r4, [r8]
 8012b4a:	f004 040f 	and.w	r4, r4, #15
 8012b4e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8012b50:	2c13      	cmp	r4, #19
 8012b52:	d913      	bls.n	8012b7c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8012b54:	8943      	ldrh	r3, [r0, #10]
 8012b56:	2b03      	cmp	r3, #3
 8012b58:	d910      	bls.n	8012b7c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8012b5a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	2b08      	cmp	r3, #8
 8012b60:	d10c      	bne.n	8012b7c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b62:	6978      	ldr	r0, [r7, #20]
 8012b64:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8012b68:	2be0      	cmp	r3, #224	; 0xe0
 8012b6a:	d007      	beq.n	8012b7c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012b6c:	460e      	mov	r6, r1
 8012b6e:	6839      	ldr	r1, [r7, #0]
 8012b70:	f000 fa3a 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 8012b74:	b910      	cbnz	r0, 8012b7c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012b76:	892b      	ldrh	r3, [r5, #8]
 8012b78:	2b07      	cmp	r3, #7
 8012b7a:	d805      	bhi.n	8012b88 <icmp_input+0x50>
  pbuf_free(p);
 8012b7c:	4628      	mov	r0, r5
}
 8012b7e:	b007      	add	sp, #28
 8012b80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8012b84:	f7fa bbe8 	b.w	800d358 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8012b88:	4628      	mov	r0, r5
 8012b8a:	f7f9 fc89 	bl	800c4a0 <inet_chksum_pbuf>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d1f4      	bne.n	8012b7c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012b92:	f104 010e 	add.w	r1, r4, #14
 8012b96:	4628      	mov	r0, r5
 8012b98:	9105      	str	r1, [sp, #20]
 8012b9a:	f7fa fb3d 	bl	800d218 <pbuf_add_header>
 8012b9e:	9905      	ldr	r1, [sp, #20]
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	d04b      	beq.n	8012c3c <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012ba4:	892b      	ldrh	r3, [r5, #8]
 8012ba6:	1919      	adds	r1, r3, r4
 8012ba8:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8012baa:	428b      	cmp	r3, r1
 8012bac:	d8e6      	bhi.n	8012b7c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012bae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bb2:	200e      	movs	r0, #14
 8012bb4:	f7fa fc40 	bl	800d438 <pbuf_alloc>
        if (r == NULL) {
 8012bb8:	4681      	mov	r9, r0
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d0de      	beq.n	8012b7c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012bbe:	8942      	ldrh	r2, [r0, #10]
 8012bc0:	f104 0308 	add.w	r3, r4, #8
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d345      	bcc.n	8012c54 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8012bc8:	4641      	mov	r1, r8
 8012bca:	4622      	mov	r2, r4
 8012bcc:	6840      	ldr	r0, [r0, #4]
 8012bce:	f002 fa0c 	bl	8014fea <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8012bd2:	4621      	mov	r1, r4
 8012bd4:	4648      	mov	r0, r9
 8012bd6:	f7fa fb53 	bl	800d280 <pbuf_remove_header>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d13e      	bne.n	8012c5c <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 8012bde:	4629      	mov	r1, r5
 8012be0:	4648      	mov	r0, r9
 8012be2:	f7fa fd95 	bl	800d710 <pbuf_copy>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d134      	bne.n	8012c54 <icmp_input+0x11c>
        pbuf_free(p);
 8012bea:	4628      	mov	r0, r5
 8012bec:	464d      	mov	r5, r9
 8012bee:	f7fa fbb3 	bl	800d358 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8012bf2:	4621      	mov	r1, r4
 8012bf4:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012bf6:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8012bf8:	f7fa fb0e 	bl	800d218 <pbuf_add_header>
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d1bd      	bne.n	8012b7c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012c00:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012c02:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012c0e:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012c10:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012c12:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012c14:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 8012c16:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8012c1a:	bf8c      	ite	hi
 8012c1c:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8012c1e:	3308      	addls	r3, #8
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012c24:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8012c26:	728a      	strb	r2, [r1, #10]
 8012c28:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012c2a:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012c2c:	2101      	movs	r1, #1
 8012c2e:	9200      	str	r2, [sp, #0]
 8012c30:	e9cd 1601 	strd	r1, r6, [sp, #4]
 8012c34:	490f      	ldr	r1, [pc, #60]	; (8012c74 <icmp_input+0x13c>)
 8012c36:	f000 f9c5 	bl	8012fc4 <ip4_output_if>
  pbuf_free(p);
 8012c3a:	e79f      	b.n	8012b7c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	f7fa fb1f 	bl	800d280 <pbuf_remove_header>
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d0d5      	beq.n	8012bf2 <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012c46:	4b0c      	ldr	r3, [pc, #48]	; (8012c78 <icmp_input+0x140>)
 8012c48:	22c7      	movs	r2, #199	; 0xc7
 8012c4a:	490c      	ldr	r1, [pc, #48]	; (8012c7c <icmp_input+0x144>)
 8012c4c:	480c      	ldr	r0, [pc, #48]	; (8012c80 <icmp_input+0x148>)
 8012c4e:	f002 f80b 	bl	8014c68 <iprintf>
          goto icmperr;
 8012c52:	e793      	b.n	8012b7c <icmp_input+0x44>
          pbuf_free(r);
 8012c54:	4648      	mov	r0, r9
 8012c56:	f7fa fb7f 	bl	800d358 <pbuf_free>
          goto icmperr;
 8012c5a:	e78f      	b.n	8012b7c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012c5c:	4b06      	ldr	r3, [pc, #24]	; (8012c78 <icmp_input+0x140>)
 8012c5e:	22b6      	movs	r2, #182	; 0xb6
 8012c60:	4908      	ldr	r1, [pc, #32]	; (8012c84 <icmp_input+0x14c>)
 8012c62:	4807      	ldr	r0, [pc, #28]	; (8012c80 <icmp_input+0x148>)
 8012c64:	f002 f800 	bl	8014c68 <iprintf>
          pbuf_free(r);
 8012c68:	4648      	mov	r0, r9
 8012c6a:	f7fa fb75 	bl	800d358 <pbuf_free>
          goto icmperr;
 8012c6e:	e785      	b.n	8012b7c <icmp_input+0x44>
 8012c70:	24030fd0 	.word	0x24030fd0
 8012c74:	24030fe4 	.word	0x24030fe4
 8012c78:	0801a4c0 	.word	0x0801a4c0
 8012c7c:	0801a55c 	.word	0x0801a55c
 8012c80:	08017728 	.word	0x08017728
 8012c84:	0801a524 	.word	0x0801a524

08012c88 <icmp_dest_unreach>:
{
 8012c88:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8012c8a:	2103      	movs	r1, #3
 8012c8c:	f7ff bf02 	b.w	8012a94 <icmp_send_response>

08012c90 <icmp_time_exceeded>:
{
 8012c90:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8012c92:	210b      	movs	r1, #11
 8012c94:	f7ff befe 	b.w	8012a94 <icmp_send_response>

08012c98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012c98:	b538      	push	{r3, r4, r5, lr}
 8012c9a:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8012c9c:	f7f5 f974 	bl	8007f88 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012ca0:	4b15      	ldr	r3, [pc, #84]	; (8012cf8 <ip4_route+0x60>)
 8012ca2:	6818      	ldr	r0, [r3, #0]
 8012ca4:	b1a0      	cbz	r0, 8012cd0 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012ca6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8012caa:	07d9      	lsls	r1, r3, #31
 8012cac:	d50d      	bpl.n	8012cca <ip4_route+0x32>
 8012cae:	075a      	lsls	r2, r3, #29
 8012cb0:	d50b      	bpl.n	8012cca <ip4_route+0x32>
 8012cb2:	6842      	ldr	r2, [r0, #4]
 8012cb4:	b14a      	cbz	r2, 8012cca <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012cb6:	6821      	ldr	r1, [r4, #0]
 8012cb8:	6885      	ldr	r5, [r0, #8]
 8012cba:	404a      	eors	r2, r1
 8012cbc:	422a      	tst	r2, r5
 8012cbe:	d016      	beq.n	8012cee <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012cc0:	079b      	lsls	r3, r3, #30
 8012cc2:	d402      	bmi.n	8012cca <ip4_route+0x32>
 8012cc4:	68c3      	ldr	r3, [r0, #12]
 8012cc6:	4299      	cmp	r1, r3
 8012cc8:	d011      	beq.n	8012cee <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 8012cca:	6800      	ldr	r0, [r0, #0]
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	d1ea      	bne.n	8012ca6 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012cd0:	4b0a      	ldr	r3, [pc, #40]	; (8012cfc <ip4_route+0x64>)
 8012cd2:	6818      	ldr	r0, [r3, #0]
 8012cd4:	b158      	cbz	r0, 8012cee <ip4_route+0x56>
 8012cd6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8012cda:	f003 0305 	and.w	r3, r3, #5
 8012cde:	2b05      	cmp	r3, #5
 8012ce0:	d106      	bne.n	8012cf0 <ip4_route+0x58>
 8012ce2:	6843      	ldr	r3, [r0, #4]
 8012ce4:	b133      	cbz	r3, 8012cf4 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012ce6:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8012cea:	bf08      	it	eq
 8012cec:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 8012cee:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 8012cf0:	2000      	movs	r0, #0
}
 8012cf2:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 8012cf4:	4618      	mov	r0, r3
}
 8012cf6:	bd38      	pop	{r3, r4, r5, pc}
 8012cf8:	24037a88 	.word	0x24037a88
 8012cfc:	24037a84 	.word	0x24037a84

08012d00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d04:	4604      	mov	r4, r0
 8012d06:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 8012d08:	f7f5 f93e 	bl	8007f88 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012d0c:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 8012d0e:	783b      	ldrb	r3, [r7, #0]
 8012d10:	091a      	lsrs	r2, r3, #4
 8012d12:	2a04      	cmp	r2, #4
 8012d14:	f040 808d 	bne.w	8012e32 <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012d18:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d1c:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012d1e:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d22:	f7f9 fb77 	bl	800c414 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012d26:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012d28:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d2a:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8012d2c:	4283      	cmp	r3, r0
 8012d2e:	f200 8086 	bhi.w	8012e3e <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012d32:	8963      	ldrh	r3, [r4, #10]
 8012d34:	42ab      	cmp	r3, r5
 8012d36:	d37c      	bcc.n	8012e32 <ip4_input+0x132>
 8012d38:	8923      	ldrh	r3, [r4, #8]
 8012d3a:	4543      	cmp	r3, r8
 8012d3c:	d379      	bcc.n	8012e32 <ip4_input+0x132>
 8012d3e:	2d13      	cmp	r5, #19
 8012d40:	d977      	bls.n	8012e32 <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8012eb8 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012d4c:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d50:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d58:	d076      	beq.n	8012e48 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012d5a:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 8012d5e:	07d2      	lsls	r2, r2, #31
 8012d60:	d503      	bpl.n	8012d6a <ip4_input+0x6a>
 8012d62:	6872      	ldr	r2, [r6, #4]
 8012d64:	2a00      	cmp	r2, #0
 8012d66:	f040 8082 	bne.w	8012e6e <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8012d6e:	f000 8088 	beq.w	8012e82 <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012d72:	4b50      	ldr	r3, [pc, #320]	; (8012eb4 <ip4_input+0x1b4>)
 8012d74:	681d      	ldr	r5, [r3, #0]
 8012d76:	b92d      	cbnz	r5, 8012d84 <ip4_input+0x84>
 8012d78:	e083      	b.n	8012e82 <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012d7a:	f000 f935 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012d7e:	b978      	cbnz	r0, 8012da0 <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 8012d80:	682d      	ldr	r5, [r5, #0]
 8012d82:	b16d      	cbz	r5, 8012da0 <ip4_input+0xa0>
          if (netif == inp) {
 8012d84:	42ae      	cmp	r6, r5
 8012d86:	d0fb      	beq.n	8012d80 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012d88:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8012d8c:	07db      	lsls	r3, r3, #31
 8012d8e:	d5f7      	bpl.n	8012d80 <ip4_input+0x80>
 8012d90:	686b      	ldr	r3, [r5, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d0f4      	beq.n	8012d80 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012d96:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012d9a:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012d9c:	4283      	cmp	r3, r0
 8012d9e:	d1ec      	bne.n	8012d7a <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012da0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012da4:	4631      	mov	r1, r6
 8012da6:	f000 f91f 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	d141      	bne.n	8012e32 <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012dae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012db6:	2be0      	cmp	r3, #224	; 0xe0
 8012db8:	d03b      	beq.n	8012e32 <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012dba:	b3d5      	cbz	r5, 8012e32 <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012dbc:	88fb      	ldrh	r3, [r7, #6]
 8012dbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d14b      	bne.n	8012e5e <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8012dc6:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012dca:	4649      	mov	r1, r9
 8012dcc:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8012dce:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012dd2:	783b      	ldrb	r3, [r7, #0]
 8012dd4:	f003 030f 	and.w	r3, r3, #15
 8012dd8:	009b      	lsls	r3, r3, #2
 8012dda:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012dde:	f7fa fa4f 	bl	800d280 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012de2:	7a7b      	ldrb	r3, [r7, #9]
 8012de4:	2b06      	cmp	r3, #6
 8012de6:	d05a      	beq.n	8012e9e <ip4_input+0x19e>
 8012de8:	2b11      	cmp	r3, #17
 8012dea:	d053      	beq.n	8012e94 <ip4_input+0x194>
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d04c      	beq.n	8012e8a <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012df0:	4629      	mov	r1, r5
 8012df2:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8012df6:	f000 f8f7 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
 8012dfa:	b968      	cbnz	r0, 8012e18 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012dfc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012e04:	2be0      	cmp	r3, #224	; 0xe0
 8012e06:	d007      	beq.n	8012e18 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012e08:	4649      	mov	r1, r9
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7fa fa6c 	bl	800d2e8 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012e10:	2102      	movs	r1, #2
 8012e12:	4620      	mov	r0, r4
 8012e14:	f7ff ff38 	bl	8012c88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f7fa fa9d 	bl	800d358 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012e1e:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8012e20:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8012e24:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012e28:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 8012e2c:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 8012e30:	e002      	b.n	8012e38 <ip4_input+0x138>
    pbuf_free(p);
 8012e32:	4620      	mov	r0, r4
 8012e34:	f7fa fa90 	bl	800d358 <pbuf_free>
}
 8012e38:	2000      	movs	r0, #0
 8012e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 8012e3e:	4601      	mov	r1, r0
 8012e40:	4620      	mov	r0, r4
 8012e42:	f7fa fba7 	bl	800d594 <pbuf_realloc>
 8012e46:	e774      	b.n	8012d32 <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012e48:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 8012e4c:	f015 0501 	ands.w	r5, r5, #1
 8012e50:	d0a8      	beq.n	8012da4 <ip4_input+0xa4>
 8012e52:	6873      	ldr	r3, [r6, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	bf14      	ite	ne
 8012e58:	4635      	movne	r5, r6
 8012e5a:	2500      	moveq	r5, #0
 8012e5c:	e7a2      	b.n	8012da4 <ip4_input+0xa4>
    p = ip4_reass(p);
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f000 f9ec 	bl	801323c <ip4_reass>
    if (p == NULL) {
 8012e64:	4604      	mov	r4, r0
 8012e66:	2800      	cmp	r0, #0
 8012e68:	d0e6      	beq.n	8012e38 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 8012e6a:	6847      	ldr	r7, [r0, #4]
 8012e6c:	e7ab      	b.n	8012dc6 <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d01a      	beq.n	8012ea8 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012e72:	4618      	mov	r0, r3
 8012e74:	4631      	mov	r1, r6
 8012e76:	f000 f8b7 	bl	8012fe8 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012e7a:	b9b8      	cbnz	r0, 8012eac <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012e7c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012e80:	e773      	b.n	8012d6a <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e82:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 8012e86:	2500      	movs	r5, #0
 8012e88:	e78c      	b.n	8012da4 <ip4_input+0xa4>
        icmp_input(p, inp);
 8012e8a:	4631      	mov	r1, r6
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f7ff fe53 	bl	8012b38 <icmp_input>
        break;
 8012e92:	e7c4      	b.n	8012e1e <ip4_input+0x11e>
        udp_input(p, inp);
 8012e94:	4631      	mov	r1, r6
 8012e96:	4620      	mov	r0, r4
 8012e98:	f7fe ffb2 	bl	8011e00 <udp_input>
        break;
 8012e9c:	e7bf      	b.n	8012e1e <ip4_input+0x11e>
        tcp_input(p, inp);
 8012e9e:	4631      	mov	r1, r6
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f7fc fe97 	bl	800fbd4 <tcp_input>
        break;
 8012ea6:	e7ba      	b.n	8012e1e <ip4_input+0x11e>
 8012ea8:	4635      	mov	r5, r6
 8012eaa:	e77b      	b.n	8012da4 <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012eac:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012eb0:	4635      	mov	r5, r6
 8012eb2:	e777      	b.n	8012da4 <ip4_input+0xa4>
 8012eb4:	24037a88 	.word	0x24037a88
 8012eb8:	24030fd0 	.word	0x24030fd0

08012ebc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	4699      	mov	r9, r3
 8012ec6:	460f      	mov	r7, r1
 8012ec8:	4616      	mov	r6, r2
 8012eca:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8012ece:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8012ed2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 8012ed6:	f7f5 f857 	bl	8007f88 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012eda:	7ba3      	ldrb	r3, [r4, #14]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d13d      	bne.n	8012f5c <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012ee0:	2e00      	cmp	r6, #0
 8012ee2:	d044      	beq.n	8012f6e <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012ee4:	2114      	movs	r1, #20
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f7fa f996 	bl	800d218 <pbuf_add_header>
 8012eec:	2800      	cmp	r0, #0
 8012eee:	d159      	bne.n	8012fa4 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012ef0:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8012ef2:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012ef4:	2b13      	cmp	r3, #19
 8012ef6:	d942      	bls.n	8012f7e <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012ef8:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012efc:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 8012efe:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8012f02:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012f04:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8012f06:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 8012f0a:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012f0c:	8920      	ldrh	r0, [r4, #8]
 8012f0e:	f7f9 fa81 	bl	800c414 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012f12:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8012fc0 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 8012f16:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012f18:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012f1a:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 8012f1e:	71ab      	strb	r3, [r5, #6]
 8012f20:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012f22:	f7f9 fa77 	bl	800c414 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012f26:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012f2a:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8012f2c:	3301      	adds	r3, #1
 8012f2e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8012f32:	b367      	cbz	r7, 8012f8e <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012f38:	2300      	movs	r3, #0
 8012f3a:	72ab      	strb	r3, [r5, #10]
 8012f3c:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012f3e:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 8012f42:	b113      	cbz	r3, 8012f4a <ip4_output_if_src+0x8e>
 8012f44:	8922      	ldrh	r2, [r4, #8]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d824      	bhi.n	8012f94 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012f4a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012f4e:	4632      	mov	r2, r6
 8012f50:	4621      	mov	r1, r4
 8012f52:	4640      	mov	r0, r8
 8012f54:	4798      	blx	r3
}
 8012f56:	b003      	add	sp, #12
 8012f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012f5c:	4b13      	ldr	r3, [pc, #76]	; (8012fac <ip4_output_if_src+0xf0>)
 8012f5e:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012f62:	4913      	ldr	r1, [pc, #76]	; (8012fb0 <ip4_output_if_src+0xf4>)
 8012f64:	4813      	ldr	r0, [pc, #76]	; (8012fb4 <ip4_output_if_src+0xf8>)
 8012f66:	f001 fe7f 	bl	8014c68 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8012f6a:	2e00      	cmp	r6, #0
 8012f6c:	d1ba      	bne.n	8012ee4 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 8012f6e:	8963      	ldrh	r3, [r4, #10]
 8012f70:	2b13      	cmp	r3, #19
 8012f72:	d917      	bls.n	8012fa4 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012f74:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8012f76:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012f78:	691b      	ldr	r3, [r3, #16]
 8012f7a:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8012f7c:	e7df      	b.n	8012f3e <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012f7e:	4b0b      	ldr	r3, [pc, #44]	; (8012fac <ip4_output_if_src+0xf0>)
 8012f80:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012f84:	490c      	ldr	r1, [pc, #48]	; (8012fb8 <ip4_output_if_src+0xfc>)
 8012f86:	480b      	ldr	r0, [pc, #44]	; (8012fb4 <ip4_output_if_src+0xf8>)
 8012f88:	f001 fe6e 	bl	8014c68 <iprintf>
 8012f8c:	e7b4      	b.n	8012ef8 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012f8e:	4b0b      	ldr	r3, [pc, #44]	; (8012fbc <ip4_output_if_src+0x100>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	e7d0      	b.n	8012f36 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 8012f94:	4632      	mov	r2, r6
 8012f96:	4641      	mov	r1, r8
 8012f98:	4620      	mov	r0, r4
 8012f9a:	f000 fb83 	bl	80136a4 <ip4_frag>
}
 8012f9e:	b003      	add	sp, #12
 8012fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8012fa4:	f06f 0001 	mvn.w	r0, #1
 8012fa8:	e7d5      	b.n	8012f56 <ip4_output_if_src+0x9a>
 8012faa:	bf00      	nop
 8012fac:	0801a590 	.word	0x0801a590
 8012fb0:	0801a5c4 	.word	0x0801a5c4
 8012fb4:	08017728 	.word	0x08017728
 8012fb8:	0801a5d0 	.word	0x0801a5d0
 8012fbc:	0801a600 	.word	0x0801a600
 8012fc0:	24037bee 	.word	0x24037bee

08012fc4 <ip4_output_if>:
{
 8012fc4:	b4f0      	push	{r4, r5, r6, r7}
 8012fc6:	9c06      	ldr	r4, [sp, #24]
 8012fc8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8012fcc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012fd0:	b11a      	cbz	r2, 8012fda <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8012fd2:	b109      	cbz	r1, 8012fd8 <ip4_output_if+0x14>
 8012fd4:	680f      	ldr	r7, [r1, #0]
 8012fd6:	b907      	cbnz	r7, 8012fda <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8012fd8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012fda:	9504      	str	r5, [sp, #16]
 8012fdc:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8012fe0:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012fe2:	f7ff bf6b 	b.w	8012ebc <ip4_output_if_src>
 8012fe6:	bf00      	nop

08012fe8 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012fe8:	1e43      	subs	r3, r0, #1
 8012fea:	3303      	adds	r3, #3
 8012fec:	d814      	bhi.n	8013018 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012fee:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8012ff2:	f013 0302 	ands.w	r3, r3, #2
 8012ff6:	d00d      	beq.n	8013014 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012ff8:	684b      	ldr	r3, [r1, #4]
 8012ffa:	4283      	cmp	r3, r0
 8012ffc:	d00f      	beq.n	801301e <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012ffe:	688a      	ldr	r2, [r1, #8]
 8013000:	4043      	eors	r3, r0
 8013002:	4213      	tst	r3, r2
 8013004:	d10b      	bne.n	801301e <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013006:	43d3      	mvns	r3, r2
 8013008:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 801300c:	1ac3      	subs	r3, r0, r3
 801300e:	fab3 f383 	clz	r3, r3
 8013012:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 8013014:	4618      	mov	r0, r3
 8013016:	4770      	bx	lr
    return 1;
 8013018:	2301      	movs	r3, #1
}
 801301a:	4618      	mov	r0, r3
 801301c:	4770      	bx	lr
    return 0;
 801301e:	2300      	movs	r3, #0
}
 8013020:	4618      	mov	r0, r3
 8013022:	4770      	bx	lr

08013024 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013024:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013026:	4604      	mov	r4, r0
 8013028:	b148      	cbz	r0, 801303e <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801302a:	6960      	ldr	r0, [r4, #20]
 801302c:	b108      	cbz	r0, 8013032 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801302e:	f7fa f993 	bl	800d358 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8013032:	4621      	mov	r1, r4
 8013034:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8013036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801303a:	f7f9 bdc7 	b.w	800cbcc <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801303e:	4b04      	ldr	r3, [pc, #16]	; (8013050 <ipfrag_free_pbuf_custom+0x2c>)
 8013040:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013044:	4903      	ldr	r1, [pc, #12]	; (8013054 <ipfrag_free_pbuf_custom+0x30>)
 8013046:	4804      	ldr	r0, [pc, #16]	; (8013058 <ipfrag_free_pbuf_custom+0x34>)
 8013048:	f001 fe0e 	bl	8014c68 <iprintf>
 801304c:	e7ed      	b.n	801302a <ipfrag_free_pbuf_custom+0x6>
 801304e:	bf00      	nop
 8013050:	0801a604 	.word	0x0801a604
 8013054:	0801a640 	.word	0x0801a640
 8013058:	08017728 	.word	0x08017728

0801305c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801305c:	4281      	cmp	r1, r0
{
 801305e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013062:	4606      	mov	r6, r0
 8013064:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013066:	d075      	beq.n	8013154 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8013068:	b147      	cbz	r7, 801307c <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	42b3      	cmp	r3, r6
 801306e:	d005      	beq.n	801307c <ip_reass_free_complete_datagram+0x20>
 8013070:	4b40      	ldr	r3, [pc, #256]	; (8013174 <ip_reass_free_complete_datagram+0x118>)
 8013072:	22ad      	movs	r2, #173	; 0xad
 8013074:	4940      	ldr	r1, [pc, #256]	; (8013178 <ip_reass_free_complete_datagram+0x11c>)
 8013076:	4841      	ldr	r0, [pc, #260]	; (801317c <ip_reass_free_complete_datagram+0x120>)
 8013078:	f001 fdf6 	bl	8014c68 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801307c:	6875      	ldr	r5, [r6, #4]
 801307e:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8013080:	889a      	ldrh	r2, [r3, #4]
 8013082:	2a00      	cmp	r2, #0
 8013084:	d047      	beq.n	8013116 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8013086:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801308a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8013174 <ip_reass_free_complete_datagram+0x118>
 801308e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8013194 <ip_reass_free_complete_datagram+0x138>
 8013092:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 801317c <ip_reass_free_complete_datagram+0x120>
 8013096:	e005      	b.n	80130a4 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8013098:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 801309a:	4625      	mov	r5, r4
    pbuf_free(pcur);
 801309c:	f7fa f95c 	bl	800d358 <pbuf_free>
  while (p != NULL) {
 80130a0:	b1b4      	cbz	r4, 80130d0 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 80130a2:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 80130a4:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 80130a6:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 80130a8:	f7fa facc 	bl	800d644 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80130ac:	4458      	add	r0, fp
 80130ae:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80130b2:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80130b6:	dbef      	blt.n	8013098 <ip_reass_free_complete_datagram+0x3c>
 80130b8:	4653      	mov	r3, sl
 80130ba:	22cc      	movs	r2, #204	; 0xcc
 80130bc:	4649      	mov	r1, r9
 80130be:	4640      	mov	r0, r8
 80130c0:	f001 fdd2 	bl	8014c68 <iprintf>
    pbuf_free(pcur);
 80130c4:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 80130c6:	4625      	mov	r5, r4
    pbuf_free(pcur);
 80130c8:	f7fa f946 	bl	800d358 <pbuf_free>
  while (p != NULL) {
 80130cc:	2c00      	cmp	r4, #0
 80130ce:	d1e8      	bne.n	80130a2 <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 80130d0:	4b2b      	ldr	r3, [pc, #172]	; (8013180 <ip_reass_free_complete_datagram+0x124>)
 80130d2:	681a      	ldr	r2, [r3, #0]
 80130d4:	4296      	cmp	r6, r2
 80130d6:	d03a      	beq.n	801314e <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80130d8:	2f00      	cmp	r7, #0
 80130da:	d042      	beq.n	8013162 <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 80130dc:	6833      	ldr	r3, [r6, #0]
 80130de:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130e0:	4c28      	ldr	r4, [pc, #160]	; (8013184 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 80130e2:	4631      	mov	r1, r6
 80130e4:	2004      	movs	r0, #4
 80130e6:	f7f9 fd71 	bl	800cbcc <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130ea:	8823      	ldrh	r3, [r4, #0]
 80130ec:	455b      	cmp	r3, fp
 80130ee:	d305      	bcc.n	80130fc <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80130f0:	eba3 030b 	sub.w	r3, r3, fp
}
 80130f4:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80130f6:	8023      	strh	r3, [r4, #0]
}
 80130f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130fc:	4b1d      	ldr	r3, [pc, #116]	; (8013174 <ip_reass_free_complete_datagram+0x118>)
 80130fe:	22d2      	movs	r2, #210	; 0xd2
 8013100:	4921      	ldr	r1, [pc, #132]	; (8013188 <ip_reass_free_complete_datagram+0x12c>)
 8013102:	481e      	ldr	r0, [pc, #120]	; (801317c <ip_reass_free_complete_datagram+0x120>)
 8013104:	f001 fdb0 	bl	8014c68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013108:	8823      	ldrh	r3, [r4, #0]
}
 801310a:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801310c:	eba3 030b 	sub.w	r3, r3, fp
 8013110:	8023      	strh	r3, [r4, #0]
}
 8013112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8013116:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013118:	6930      	ldr	r0, [r6, #16]
 801311a:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 801311c:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801311e:	68f4      	ldr	r4, [r6, #12]
 8013120:	68b2      	ldr	r2, [r6, #8]
 8013122:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013124:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013126:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013128:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801312a:	601a      	str	r2, [r3, #0]
 801312c:	605c      	str	r4, [r3, #4]
 801312e:	69b2      	ldr	r2, [r6, #24]
 8013130:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013132:	f7ff fdad 	bl	8012c90 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013136:	4628      	mov	r0, r5
 8013138:	f7fa fa84 	bl	800d644 <pbuf_clen>
 801313c:	4683      	mov	fp, r0
    pbuf_free(p);
 801313e:	4628      	mov	r0, r5
 8013140:	f7fa f90a 	bl	800d358 <pbuf_free>
  p = ipr->p;
 8013144:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8013146:	2d00      	cmp	r5, #0
 8013148:	d0c2      	beq.n	80130d0 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801314a:	686b      	ldr	r3, [r5, #4]
 801314c:	e79d      	b.n	801308a <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 801314e:	6832      	ldr	r2, [r6, #0]
 8013150:	601a      	str	r2, [r3, #0]
 8013152:	e7c5      	b.n	80130e0 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013154:	4b07      	ldr	r3, [pc, #28]	; (8013174 <ip_reass_free_complete_datagram+0x118>)
 8013156:	22ab      	movs	r2, #171	; 0xab
 8013158:	490c      	ldr	r1, [pc, #48]	; (801318c <ip_reass_free_complete_datagram+0x130>)
 801315a:	4808      	ldr	r0, [pc, #32]	; (801317c <ip_reass_free_complete_datagram+0x120>)
 801315c:	f001 fd84 	bl	8014c68 <iprintf>
 8013160:	e782      	b.n	8013068 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013162:	4b04      	ldr	r3, [pc, #16]	; (8013174 <ip_reass_free_complete_datagram+0x118>)
 8013164:	f240 1245 	movw	r2, #325	; 0x145
 8013168:	4909      	ldr	r1, [pc, #36]	; (8013190 <ip_reass_free_complete_datagram+0x134>)
 801316a:	4804      	ldr	r0, [pc, #16]	; (801317c <ip_reass_free_complete_datagram+0x120>)
 801316c:	f001 fd7c 	bl	8014c68 <iprintf>
 8013170:	e7b4      	b.n	80130dc <ip_reass_free_complete_datagram+0x80>
 8013172:	bf00      	nop
 8013174:	0801a604 	.word	0x0801a604
 8013178:	0801a658 	.word	0x0801a658
 801317c:	08017728 	.word	0x08017728
 8013180:	24037bf4 	.word	0x24037bf4
 8013184:	24037bf0 	.word	0x24037bf0
 8013188:	0801a6a8 	.word	0x0801a6a8
 801318c:	0801a64c 	.word	0x0801a64c
 8013190:	0801a68c 	.word	0x0801a68c
 8013194:	0801a66c 	.word	0x0801a66c

08013198 <ip_reass_remove_oldest_datagram>:
{
 8013198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 801319c:	2700      	movs	r7, #0
 801319e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8013208 <ip_reass_remove_oldest_datagram+0x70>
{
 80131a2:	4605      	mov	r5, r0
 80131a4:	460e      	mov	r6, r1
    r = reassdatagrams;
 80131a6:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 80131aa:	b1f3      	cbz	r3, 80131ea <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 80131ac:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80131ae:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 80131b2:	4621      	mov	r1, r4
    prev = NULL;
 80131b4:	46a4      	mov	ip, r4
    oldest = NULL;
 80131b6:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80131b8:	695a      	ldr	r2, [r3, #20]
 80131ba:	4572      	cmp	r2, lr
 80131bc:	d018      	beq.n	80131f0 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 80131be:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80131c0:	b120      	cbz	r0, 80131cc <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 80131c2:	f893 901f 	ldrb.w	r9, [r3, #31]
 80131c6:	7fc2      	ldrb	r2, [r0, #31]
 80131c8:	4591      	cmp	r9, r2
 80131ca:	d801      	bhi.n	80131d0 <ip_reass_remove_oldest_datagram+0x38>
 80131cc:	4661      	mov	r1, ip
 80131ce:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80131d0:	681a      	ldr	r2, [r3, #0]
 80131d2:	469c      	mov	ip, r3
 80131d4:	4613      	mov	r3, r2
 80131d6:	2a00      	cmp	r2, #0
 80131d8:	d1ee      	bne.n	80131b8 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80131da:	b110      	cbz	r0, 80131e2 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80131dc:	f7ff ff3e 	bl	801305c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80131e0:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80131e2:	42b7      	cmp	r7, r6
 80131e4:	da01      	bge.n	80131ea <ip_reass_remove_oldest_datagram+0x52>
 80131e6:	2c01      	cmp	r4, #1
 80131e8:	dcdd      	bgt.n	80131a6 <ip_reass_remove_oldest_datagram+0xe>
}
 80131ea:	4638      	mov	r0, r7
 80131ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80131f0:	699a      	ldr	r2, [r3, #24]
 80131f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80131f6:	454a      	cmp	r2, r9
 80131f8:	d1e1      	bne.n	80131be <ip_reass_remove_oldest_datagram+0x26>
 80131fa:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80131fe:	88aa      	ldrh	r2, [r5, #4]
 8013200:	4591      	cmp	r9, r2
 8013202:	d1dc      	bne.n	80131be <ip_reass_remove_oldest_datagram+0x26>
 8013204:	e7e4      	b.n	80131d0 <ip_reass_remove_oldest_datagram+0x38>
 8013206:	bf00      	nop
 8013208:	24037bf4 	.word	0x24037bf4

0801320c <ip_reass_tmr>:
{
 801320c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801320e:	4b0a      	ldr	r3, [pc, #40]	; (8013238 <ip_reass_tmr+0x2c>)
 8013210:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8013212:	b140      	cbz	r0, 8013226 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8013214:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8013216:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8013218:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801321a:	b12b      	cbz	r3, 8013228 <ip_reass_tmr+0x1c>
 801321c:	4604      	mov	r4, r0
      r->timer--;
 801321e:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 8013220:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 8013222:	2800      	cmp	r0, #0
 8013224:	d1f7      	bne.n	8013216 <ip_reass_tmr+0xa>
}
 8013226:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8013228:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801322a:	4621      	mov	r1, r4
 801322c:	f7ff ff16 	bl	801305c <ip_reass_free_complete_datagram>
      r = r->next;
 8013230:	4628      	mov	r0, r5
  while (r != NULL) {
 8013232:	2800      	cmp	r0, #0
 8013234:	d1ef      	bne.n	8013216 <ip_reass_tmr+0xa>
 8013236:	e7f6      	b.n	8013226 <ip_reass_tmr+0x1a>
 8013238:	24037bf4 	.word	0x24037bf4

0801323c <ip4_reass>:
{
 801323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8013240:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8013244:	b085      	sub	sp, #20
 8013246:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013248:	f89a 3000 	ldrb.w	r3, [sl]
 801324c:	f003 030f 	and.w	r3, r3, #15
 8013250:	2b05      	cmp	r3, #5
 8013252:	f040 8089 	bne.w	8013368 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013256:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 801325a:	f7f9 f8db 	bl	800c414 <lwip_htons>
 801325e:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013260:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8013264:	f7f9 f8d6 	bl	800c414 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8013268:	f89a 3000 	ldrb.w	r3, [sl]
 801326c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8013270:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8013274:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013278:	d376      	bcc.n	8013368 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 801327a:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801327c:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8013568 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 8013280:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 8013282:	b29b      	uxth	r3, r3
 8013284:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8013286:	f7fa f9dd 	bl	800d644 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801328a:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 801328e:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013290:	4403      	add	r3, r0
 8013292:	2b0a      	cmp	r3, #10
 8013294:	f300 80e5 	bgt.w	8013462 <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013298:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801356c <ip4_reass+0x330>
 801329c:	f8d9 4000 	ldr.w	r4, [r9]
 80132a0:	2c00      	cmp	r4, #0
 80132a2:	f000 80ec 	beq.w	801347e <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80132a6:	f8da 200c 	ldr.w	r2, [sl, #12]
 80132aa:	e003      	b.n	80132b4 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80132ac:	6824      	ldr	r4, [r4, #0]
 80132ae:	2c00      	cmp	r4, #0
 80132b0:	f000 80e5 	beq.w	801347e <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80132b4:	6963      	ldr	r3, [r4, #20]
 80132b6:	4293      	cmp	r3, r2
 80132b8:	d1f8      	bne.n	80132ac <ip4_reass+0x70>
 80132ba:	f8da 3010 	ldr.w	r3, [sl, #16]
 80132be:	69a1      	ldr	r1, [r4, #24]
 80132c0:	4299      	cmp	r1, r3
 80132c2:	d1f3      	bne.n	80132ac <ip4_reass+0x70>
 80132c4:	89a1      	ldrh	r1, [r4, #12]
 80132c6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80132ca:	4299      	cmp	r1, r3
 80132cc:	d1ee      	bne.n	80132ac <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80132ce:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80132d2:	f7f9 f89f 	bl	800c414 <lwip_htons>
 80132d6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80132da:	2800      	cmp	r0, #0
 80132dc:	f000 80a9 	beq.w	8013432 <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80132e0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80132e4:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 80132e8:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80132ec:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	d108      	bne.n	8013306 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 80132f4:	9b00      	ldr	r3, [sp, #0]
 80132f6:	18f3      	adds	r3, r6, r3
 80132f8:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80132fa:	429e      	cmp	r6, r3
 80132fc:	d812      	bhi.n	8013324 <ip4_reass+0xe8>
 80132fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013302:	4293      	cmp	r3, r2
 8013304:	d80e      	bhi.n	8013324 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013306:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801330a:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 801330e:	f7f9 f881 	bl	800c414 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8013312:	f89a 3000 	ldrb.w	r3, [sl]
 8013316:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801331a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801331e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8013322:	d229      	bcs.n	8013378 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8013324:	6866      	ldr	r6, [r4, #4]
 8013326:	b9fe      	cbnz	r6, 8013368 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013328:	f8d9 3000 	ldr.w	r3, [r9]
 801332c:	42a3      	cmp	r3, r4
 801332e:	d014      	beq.n	801335a <ip4_reass+0x11e>
 8013330:	4b89      	ldr	r3, [pc, #548]	; (8013558 <ip4_reass+0x31c>)
 8013332:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013336:	4989      	ldr	r1, [pc, #548]	; (801355c <ip4_reass+0x320>)
 8013338:	4889      	ldr	r0, [pc, #548]	; (8013560 <ip4_reass+0x324>)
 801333a:	f001 fc95 	bl	8014c68 <iprintf>
  if (reassdatagrams == ipr) {
 801333e:	f8d9 3000 	ldr.w	r3, [r9]
 8013342:	429c      	cmp	r4, r3
 8013344:	d009      	beq.n	801335a <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013346:	4b84      	ldr	r3, [pc, #528]	; (8013558 <ip4_reass+0x31c>)
 8013348:	f240 1245 	movw	r2, #325	; 0x145
 801334c:	4985      	ldr	r1, [pc, #532]	; (8013564 <ip4_reass+0x328>)
 801334e:	4884      	ldr	r0, [pc, #528]	; (8013560 <ip4_reass+0x324>)
 8013350:	f001 fc8a 	bl	8014c68 <iprintf>
    prev->next = ipr->next;
 8013354:	6823      	ldr	r3, [r4, #0]
 8013356:	6033      	str	r3, [r6, #0]
 8013358:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 801335a:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801335c:	4621      	mov	r1, r4
 801335e:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 8013360:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8013364:	f7f9 fc32 	bl	800cbcc <memp_free>
  pbuf_free(p);
 8013368:	4628      	mov	r0, r5
  return NULL;
 801336a:	2600      	movs	r6, #0
  pbuf_free(p);
 801336c:	f7f9 fff4 	bl	800d358 <pbuf_free>
}
 8013370:	4630      	mov	r0, r6
 8013372:	b005      	add	sp, #20
 8013374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8013378:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 801337a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 801337e:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013382:	f7f9 f847 	bl	800c414 <lwip_htons>
 8013386:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801338a:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801338e:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013390:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8013394:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8013398:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 801339c:	f8ab 3006 	strh.w	r3, [fp, #6]
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	4619      	mov	r1, r3
 80133a4:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 80133a6:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 80133a8:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 80133aa:	f88b 3000 	strb.w	r3, [fp]
 80133ae:	f88b 3001 	strb.w	r3, [fp, #1]
 80133b2:	f88b 3002 	strb.w	r3, [fp, #2]
 80133b6:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 80133ba:	d8b3      	bhi.n	8013324 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 80133bc:	6861      	ldr	r1, [r4, #4]
 80133be:	2900      	cmp	r1, #0
 80133c0:	f000 80be 	beq.w	8013540 <ip4_reass+0x304>
  int valid = 1;
 80133c4:	f04f 0a01 	mov.w	sl, #1
 80133c8:	4694      	mov	ip, r2
 80133ca:	e00e      	b.n	80133ea <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 80133cc:	d0cc      	beq.n	8013368 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 80133ce:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80133d2:	45f4      	cmp	ip, lr
 80133d4:	d3c8      	bcc.n	8013368 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 80133d6:	b122      	cbz	r2, 80133e2 <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 80133d8:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80133da:	4282      	cmp	r2, r0
 80133dc:	bf18      	it	ne
 80133de:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80133e2:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 80133e4:	2900      	cmp	r1, #0
 80133e6:	f000 8084 	beq.w	80134f2 <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80133ea:	461a      	mov	r2, r3
 80133ec:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80133ee:	8898      	ldrh	r0, [r3, #4]
 80133f0:	4584      	cmp	ip, r0
 80133f2:	d2eb      	bcs.n	80133cc <ip4_reass+0x190>
      iprh->next_pbuf = q;
 80133f4:	4613      	mov	r3, r2
 80133f6:	f8cb 1000 	str.w	r1, [fp]
 80133fa:	4662      	mov	r2, ip
 80133fc:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d060      	beq.n	80134c4 <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013402:	88db      	ldrh	r3, [r3, #6]
 8013404:	429a      	cmp	r2, r3
 8013406:	d3af      	bcc.n	8013368 <ip4_reass+0x12c>
 8013408:	9903      	ldr	r1, [sp, #12]
 801340a:	4281      	cmp	r1, r0
 801340c:	d8ac      	bhi.n	8013368 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 801340e:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8013410:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8013414:	d05b      	beq.n	80134ce <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	f000 8084 	beq.w	8013526 <ip4_reass+0x2ea>
 801341e:	7fa3      	ldrb	r3, [r4, #30]
 8013420:	07db      	lsls	r3, r3, #31
 8013422:	d45c      	bmi.n	80134de <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013424:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8013428:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801342a:	443b      	add	r3, r7
 801342c:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013430:	e79e      	b.n	8013370 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013432:	89e0      	ldrh	r0, [r4, #14]
 8013434:	f7f8 ffee 	bl	800c414 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013438:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801343c:	2800      	cmp	r0, #0
 801343e:	f43f af4f 	beq.w	80132e0 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013442:	f8da 3000 	ldr.w	r3, [sl]
 8013446:	f8da 0004 	ldr.w	r0, [sl, #4]
 801344a:	f8da 1008 	ldr.w	r1, [sl, #8]
 801344e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8013452:	60a3      	str	r3, [r4, #8]
 8013454:	60e0      	str	r0, [r4, #12]
 8013456:	6121      	str	r1, [r4, #16]
 8013458:	6162      	str	r2, [r4, #20]
 801345a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801345e:	61a3      	str	r3, [r4, #24]
 8013460:	e73e      	b.n	80132e0 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013462:	4601      	mov	r1, r0
 8013464:	4650      	mov	r0, sl
 8013466:	f7ff fe97 	bl	8013198 <ip_reass_remove_oldest_datagram>
 801346a:	2800      	cmp	r0, #0
 801346c:	f43f af7c 	beq.w	8013368 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013470:	f8b8 3000 	ldrh.w	r3, [r8]
 8013474:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013476:	2b0a      	cmp	r3, #10
 8013478:	f77f af0e 	ble.w	8013298 <ip4_reass+0x5c>
 801347c:	e774      	b.n	8013368 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801347e:	2004      	movs	r0, #4
 8013480:	f7f9 fb5e 	bl	800cb40 <memp_malloc>
  if (ipr == NULL) {
 8013484:	4604      	mov	r4, r0
 8013486:	b178      	cbz	r0, 80134a8 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013488:	2300      	movs	r3, #0
 801348a:	61e3      	str	r3, [r4, #28]
 801348c:	60a3      	str	r3, [r4, #8]
 801348e:	60e3      	str	r3, [r4, #12]
 8013490:	6123      	str	r3, [r4, #16]
 8013492:	6163      	str	r3, [r4, #20]
 8013494:	61a3      	str	r3, [r4, #24]
 8013496:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8013498:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 801349c:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 80134a0:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 80134a2:	230f      	movs	r3, #15
 80134a4:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80134a6:	e7cc      	b.n	8013442 <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80134a8:	4639      	mov	r1, r7
 80134aa:	4650      	mov	r0, sl
 80134ac:	f7ff fe74 	bl	8013198 <ip_reass_remove_oldest_datagram>
 80134b0:	4287      	cmp	r7, r0
 80134b2:	f73f af59 	bgt.w	8013368 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80134b6:	2004      	movs	r0, #4
 80134b8:	f7f9 fb42 	bl	800cb40 <memp_malloc>
    if (ipr == NULL)
 80134bc:	4604      	mov	r4, r0
 80134be:	2800      	cmp	r0, #0
 80134c0:	d1e2      	bne.n	8013488 <ip4_reass+0x24c>
 80134c2:	e751      	b.n	8013368 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 80134c4:	9b03      	ldr	r3, [sp, #12]
 80134c6:	4283      	cmp	r3, r0
 80134c8:	f63f af4e 	bhi.w	8013368 <ip4_reass+0x12c>
        ipr->p = new_p;
 80134cc:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80134ce:	9b01      	ldr	r3, [sp, #4]
 80134d0:	b19b      	cbz	r3, 80134fa <ip4_reass+0x2be>
 80134d2:	7fa3      	ldrb	r3, [r4, #30]
 80134d4:	07d9      	lsls	r1, r3, #31
 80134d6:	d5a5      	bpl.n	8013424 <ip4_reass+0x1e8>
    if (valid) {
 80134d8:	f1ba 0f00 	cmp.w	sl, #0
 80134dc:	d138      	bne.n	8013550 <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80134de:	f8b8 3000 	ldrh.w	r3, [r8]
 80134e2:	443b      	add	r3, r7
 80134e4:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 80134e8:	2600      	movs	r6, #0
}
 80134ea:	4630      	mov	r0, r6
 80134ec:	b005      	add	sp, #20
 80134ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 80134f2:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80134f4:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80134f6:	d18e      	bne.n	8013416 <ip4_reass+0x1da>
 80134f8:	e7e9      	b.n	80134ce <ip4_reass+0x292>
    if (valid) {
 80134fa:	f1ba 0f00 	cmp.w	sl, #0
 80134fe:	d012      	beq.n	8013526 <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013500:	6863      	ldr	r3, [r4, #4]
 8013502:	b183      	cbz	r3, 8013526 <ip4_reass+0x2ea>
 8013504:	6859      	ldr	r1, [r3, #4]
 8013506:	888b      	ldrh	r3, [r1, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d031      	beq.n	8013570 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801350c:	f8b8 3000 	ldrh.w	r3, [r8]
 8013510:	443b      	add	r3, r7
 8013512:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8013516:	9b01      	ldr	r3, [sp, #4]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d1e5      	bne.n	80134e8 <ip4_reass+0x2ac>
 801351c:	e008      	b.n	8013530 <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801351e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8013522:	4659      	mov	r1, fp
 8013524:	b323      	cbz	r3, 8013570 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013526:	f8b8 3000 	ldrh.w	r3, [r8]
 801352a:	443b      	add	r3, r7
 801352c:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013530:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8013532:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013534:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8013538:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801353a:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801353c:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801353e:	e7d3      	b.n	80134e8 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013540:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 8013542:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013544:	2b00      	cmp	r3, #0
 8013546:	d0ea      	beq.n	801351e <ip4_reass+0x2e2>
 8013548:	7fa3      	ldrb	r3, [r4, #30]
 801354a:	07da      	lsls	r2, r3, #31
 801354c:	f57f af6a 	bpl.w	8013424 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d0c3      	beq.n	80134de <ip4_reass+0x2a2>
 8013556:	e7d5      	b.n	8013504 <ip4_reass+0x2c8>
 8013558:	0801a604 	.word	0x0801a604
 801355c:	0801a71c 	.word	0x0801a71c
 8013560:	08017728 	.word	0x08017728
 8013564:	0801a68c 	.word	0x0801a68c
 8013568:	24037bf0 	.word	0x24037bf0
 801356c:	24037bf4 	.word	0x24037bf4
        q = iprh->next_pbuf;
 8013570:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 8013574:	b153      	cbz	r3, 801358c <ip4_reass+0x350>
 8013576:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8013578:	4610      	mov	r0, r2
 801357a:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801357c:	88c0      	ldrh	r0, [r0, #6]
 801357e:	8893      	ldrh	r3, [r2, #4]
 8013580:	4298      	cmp	r0, r3
 8013582:	d1c3      	bne.n	801350c <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 8013584:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 8013586:	2b00      	cmp	r3, #0
 8013588:	d1f6      	bne.n	8013578 <ip4_reass+0x33c>
 801358a:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 801358c:	9b02      	ldr	r3, [sp, #8]
 801358e:	428b      	cmp	r3, r1
 8013590:	d110      	bne.n	80135b4 <ip4_reass+0x378>
 8013592:	4b3e      	ldr	r3, [pc, #248]	; (801368c <ip4_reass+0x450>)
 8013594:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013598:	493d      	ldr	r1, [pc, #244]	; (8013690 <ip4_reass+0x454>)
 801359a:	483e      	ldr	r0, [pc, #248]	; (8013694 <ip4_reass+0x458>)
 801359c:	f001 fb64 	bl	8014c68 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80135a0:	9b02      	ldr	r3, [sp, #8]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	b133      	cbz	r3, 80135b4 <ip4_reass+0x378>
 80135a6:	4b39      	ldr	r3, [pc, #228]	; (801368c <ip4_reass+0x450>)
 80135a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80135ac:	493a      	ldr	r1, [pc, #232]	; (8013698 <ip4_reass+0x45c>)
 80135ae:	4839      	ldr	r0, [pc, #228]	; (8013694 <ip4_reass+0x458>)
 80135b0:	f001 fb5a 	bl	8014c68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80135b4:	f8b8 3000 	ldrh.w	r3, [r8]
 80135b8:	443b      	add	r3, r7
 80135ba:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80135be:	9b01      	ldr	r3, [sp, #4]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d156      	bne.n	8013672 <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 80135c4:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80135c6:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80135c8:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80135ca:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80135ce:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80135d0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80135d2:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80135d4:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80135d6:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80135d8:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80135da:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80135dc:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80135de:	68a3      	ldr	r3, [r4, #8]
 80135e0:	6921      	ldr	r1, [r4, #16]
 80135e2:	6962      	ldr	r2, [r4, #20]
 80135e4:	6075      	str	r5, [r6, #4]
 80135e6:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80135e8:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80135ea:	60f2      	str	r2, [r6, #12]
 80135ec:	6033      	str	r3, [r6, #0]
 80135ee:	69a3      	ldr	r3, [r4, #24]
 80135f0:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80135f2:	f7f8 ff0f 	bl	800c414 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80135f6:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80135f8:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80135fa:	71b3      	strb	r3, [r6, #6]
 80135fc:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80135fe:	72b3      	strb	r3, [r6, #10]
 8013600:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8013602:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8013604:	b15d      	cbz	r5, 801361e <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 8013606:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8013608:	4628      	mov	r0, r5
 801360a:	2114      	movs	r1, #20
 801360c:	f7f9 fe38 	bl	800d280 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013610:	4629      	mov	r1, r5
 8013612:	4630      	mov	r0, r6
 8013614:	f7fa f840 	bl	800d698 <pbuf_cat>
      r = iprh->next_pbuf;
 8013618:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 801361a:	2d00      	cmp	r5, #0
 801361c:	d1f3      	bne.n	8013606 <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 801361e:	f8d9 5000 	ldr.w	r5, [r9]
 8013622:	42a5      	cmp	r5, r4
 8013624:	d005      	beq.n	8013632 <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013626:	b335      	cbz	r5, 8013676 <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 8013628:	682b      	ldr	r3, [r5, #0]
 801362a:	42a3      	cmp	r3, r4
 801362c:	d014      	beq.n	8013658 <ip4_reass+0x41c>
 801362e:	461d      	mov	r5, r3
 8013630:	e7f9      	b.n	8013626 <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8013638:	4621      	mov	r1, r4
 801363a:	2004      	movs	r0, #4
 801363c:	f7f9 fac6 	bl	800cbcc <memp_free>
    clen = pbuf_clen(p);
 8013640:	4630      	mov	r0, r6
 8013642:	f7f9 ffff 	bl	800d644 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013646:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 801364a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801364c:	4283      	cmp	r3, r0
 801364e:	d306      	bcc.n	801365e <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013650:	1b1b      	subs	r3, r3, r4
 8013652:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8013656:	e68b      	b.n	8013370 <ip4_reass+0x134>
    prev->next = ipr->next;
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	602b      	str	r3, [r5, #0]
 801365c:	e7ec      	b.n	8013638 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801365e:	4b0b      	ldr	r3, [pc, #44]	; (801368c <ip4_reass+0x450>)
 8013660:	f240 229b 	movw	r2, #667	; 0x29b
 8013664:	490d      	ldr	r1, [pc, #52]	; (801369c <ip4_reass+0x460>)
 8013666:	480b      	ldr	r0, [pc, #44]	; (8013694 <ip4_reass+0x458>)
 8013668:	f001 fafe 	bl	8014c68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801366c:	f8b8 3000 	ldrh.w	r3, [r8]
 8013670:	e7ee      	b.n	8013650 <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013672:	8ba0      	ldrh	r0, [r4, #28]
 8013674:	e7ae      	b.n	80135d4 <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013676:	4b05      	ldr	r3, [pc, #20]	; (801368c <ip4_reass+0x450>)
 8013678:	f240 1245 	movw	r2, #325	; 0x145
 801367c:	4908      	ldr	r1, [pc, #32]	; (80136a0 <ip4_reass+0x464>)
 801367e:	4805      	ldr	r0, [pc, #20]	; (8013694 <ip4_reass+0x458>)
 8013680:	f001 faf2 	bl	8014c68 <iprintf>
    prev->next = ipr->next;
 8013684:	6823      	ldr	r3, [r4, #0]
 8013686:	602b      	str	r3, [r5, #0]
 8013688:	deff      	udf	#255	; 0xff
 801368a:	bf00      	nop
 801368c:	0801a604 	.word	0x0801a604
 8013690:	0801a6cc 	.word	0x0801a6cc
 8013694:	08017728 	.word	0x08017728
 8013698:	0801a6dc 	.word	0x0801a6dc
 801369c:	0801a700 	.word	0x0801a700
 80136a0:	0801a68c 	.word	0x0801a68c

080136a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80136a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136a8:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 80136aa:	b08f      	sub	sp, #60	; 0x3c
 80136ac:	4606      	mov	r6, r0
 80136ae:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136b0:	f1b3 0214 	subs.w	r2, r3, #20
{
 80136b4:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136b6:	bf48      	it	mi
 80136b8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80136bc:	6843      	ldr	r3, [r0, #4]
 80136be:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136c0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80136c4:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136c6:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80136c8:	f003 030f 	and.w	r3, r3, #15
 80136cc:	2b05      	cmp	r3, #5
 80136ce:	ea4f 0583 	mov.w	r5, r3, lsl #2
 80136d2:	f040 80e5 	bne.w	80138a0 <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80136d6:	8943      	ldrh	r3, [r0, #10]
 80136d8:	2b13      	cmp	r3, #19
 80136da:	f240 80e4 	bls.w	80138a6 <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80136de:	9b04      	ldr	r3, [sp, #16]
 80136e0:	88d8      	ldrh	r0, [r3, #6]
 80136e2:	f7f8 fe97 	bl	800c414 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80136e6:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 80136e8:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80136ec:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80136ee:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80136f0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	920d      	str	r2, [sp, #52]	; 0x34
 80136f8:	9305      	str	r3, [sp, #20]

  while (left) {
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f000 8098 	beq.w	8013830 <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013700:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8013702:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80138c8 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013708:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801370a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80138d0 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801370e:	b29b      	uxth	r3, r3
 8013710:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013712:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013716:	2114      	movs	r1, #20
 8013718:	200e      	movs	r0, #14
 801371a:	f7f9 fe8d 	bl	800d438 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801371e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013720:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8013722:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013724:	4293      	cmp	r3, r2
 8013726:	bf28      	it	cs
 8013728:	4613      	movcs	r3, r2
 801372a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 801372c:	2800      	cmp	r0, #0
 801372e:	f000 80b4 	beq.w	801389a <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013732:	8943      	ldrh	r3, [r0, #10]
 8013734:	2b13      	cmp	r3, #19
 8013736:	f240 808c 	bls.w	8013852 <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801373a:	9904      	ldr	r1, [sp, #16]
 801373c:	9b03      	ldr	r3, [sp, #12]
 801373e:	680a      	ldr	r2, [r1, #0]
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	684f      	ldr	r7, [r1, #4]
 8013744:	6888      	ldr	r0, [r1, #8]
 8013746:	68c9      	ldr	r1, [r1, #12]
 8013748:	605f      	str	r7, [r3, #4]
 801374a:	60d9      	str	r1, [r3, #12]
 801374c:	9904      	ldr	r1, [sp, #16]
 801374e:	601a      	str	r2, [r3, #0]
 8013750:	6098      	str	r0, [r3, #8]
 8013752:	690a      	ldr	r2, [r1, #16]
 8013754:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013756:	9b03      	ldr	r3, [sp, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 801375c:	9b06      	ldr	r3, [sp, #24]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d034      	beq.n	80137cc <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013762:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 8013764:	8973      	ldrh	r3, [r6, #10]
 8013766:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013768:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 801376a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801376c:	d369      	bcc.n	8013842 <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801376e:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013770:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013772:	429c      	cmp	r4, r3
 8013774:	bf28      	it	cs
 8013776:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013778:	2c00      	cmp	r4, #0
 801377a:	d05b      	beq.n	8013834 <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801377c:	f7f9 f9e0 	bl	800cb40 <memp_malloc>
 8013780:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013782:	2241      	movs	r2, #65	; 0x41
 8013784:	4621      	mov	r1, r4
 8013786:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8013788:	f1bb 0f00 	cmp.w	fp, #0
 801378c:	d06c      	beq.n	8013868 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801378e:	9401      	str	r4, [sp, #4]
 8013790:	465b      	mov	r3, fp
 8013792:	6877      	ldr	r7, [r6, #4]
 8013794:	eb07 0c05 	add.w	ip, r7, r5
 8013798:	f8cd c000 	str.w	ip, [sp]
 801379c:	f7f9 fd20 	bl	800d1e0 <pbuf_alloced_custom>
 80137a0:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80137a2:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 80137a4:	f1ba 0f00 	cmp.w	sl, #0
 80137a8:	d068      	beq.n	801387c <ip4_frag+0x1d8>
      pbuf_ref(p);
 80137aa:	f7f9 ff57 	bl	800d65c <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80137ae:	4b43      	ldr	r3, [pc, #268]	; (80138bc <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80137b0:	4651      	mov	r1, sl
 80137b2:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80137b4:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 80137b8:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 80137bc:	f7f9 ff6c 	bl	800d698 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80137c0:	9b02      	ldr	r3, [sp, #8]
 80137c2:	1b1f      	subs	r7, r3, r4
 80137c4:	b2bb      	uxth	r3, r7
 80137c6:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d133      	bne.n	8013834 <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80137cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80137ce:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80137d0:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 80137d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80137d4:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 80137d6:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80137da:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 80137dc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80137de:	4293      	cmp	r3, r2
 80137e0:	dd3f      	ble.n	8013862 <ip4_frag+0x1be>
 80137e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d13c      	bne.n	8013862 <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80137e8:	f7f8 fe14 	bl	800c414 <lwip_htons>
 80137ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80137ee:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80137f0:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80137f2:	f103 0014 	add.w	r0, r3, #20
 80137f6:	b280      	uxth	r0, r0
 80137f8:	f7f8 fe0c 	bl	800c414 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80137fc:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80137fe:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013800:	72bb      	strb	r3, [r7, #10]
 8013802:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013806:	9f03      	ldr	r7, [sp, #12]
 8013808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801380a:	4639      	mov	r1, r7
 801380c:	6943      	ldr	r3, [r0, #20]
 801380e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013810:	4638      	mov	r0, r7
 8013812:	f7f9 fda1 	bl	800d358 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013816:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801381a:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 801381c:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 8013820:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 8013822:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 8013824:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8013826:	b292      	uxth	r2, r2
 8013828:	9207      	str	r2, [sp, #28]
  while (left) {
 801382a:	2b00      	cmp	r3, #0
 801382c:	f47f af71 	bne.w	8013712 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013830:	2000      	movs	r0, #0
 8013832:	e020      	b.n	8013876 <ip4_frag+0x1d2>
        p = p->next;
 8013834:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 8013836:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 8013838:	8973      	ldrh	r3, [r6, #10]
 801383a:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801383c:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 801383e:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013840:	d295      	bcs.n	801376e <ip4_frag+0xca>
 8013842:	4643      	mov	r3, r8
 8013844:	f240 322d 	movw	r2, #813	; 0x32d
 8013848:	491d      	ldr	r1, [pc, #116]	; (80138c0 <ip4_frag+0x21c>)
 801384a:	4648      	mov	r0, r9
 801384c:	f001 fa0c 	bl	8014c68 <iprintf>
 8013850:	e78d      	b.n	801376e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013852:	4643      	mov	r3, r8
 8013854:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013858:	491a      	ldr	r1, [pc, #104]	; (80138c4 <ip4_frag+0x220>)
 801385a:	4648      	mov	r0, r9
 801385c:	f001 fa04 	bl	8014c68 <iprintf>
 8013860:	e76b      	b.n	801373a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 8013862:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8013866:	e7bf      	b.n	80137e8 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8013868:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801386c:	4658      	mov	r0, fp
 801386e:	f7f9 fd73 	bl	800d358 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013872:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013876:	b00f      	add	sp, #60	; 0x3c
 8013878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 801387c:	46da      	mov	sl, fp
 801387e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013882:	2005      	movs	r0, #5
 8013884:	4651      	mov	r1, sl
 8013886:	f7f9 f9a1 	bl	800cbcc <memp_free>
        pbuf_free(rambuf);
 801388a:	4658      	mov	r0, fp
 801388c:	f7f9 fd64 	bl	800d358 <pbuf_free>
  return ERR_MEM;
 8013890:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013894:	b00f      	add	sp, #60	; 0x3c
 8013896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 801389a:	f04f 30ff 	mov.w	r0, #4294967295
 801389e:	e7ea      	b.n	8013876 <ip4_frag+0x1d2>
    return ERR_VAL;
 80138a0:	f06f 0005 	mvn.w	r0, #5
 80138a4:	e7e7      	b.n	8013876 <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80138a6:	4b08      	ldr	r3, [pc, #32]	; (80138c8 <ip4_frag+0x224>)
 80138a8:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80138ac:	4907      	ldr	r1, [pc, #28]	; (80138cc <ip4_frag+0x228>)
 80138ae:	4808      	ldr	r0, [pc, #32]	; (80138d0 <ip4_frag+0x22c>)
 80138b0:	f001 f9da 	bl	8014c68 <iprintf>
 80138b4:	f06f 0005 	mvn.w	r0, #5
 80138b8:	e7dd      	b.n	8013876 <ip4_frag+0x1d2>
 80138ba:	bf00      	nop
 80138bc:	08013025 	.word	0x08013025
 80138c0:	0801a778 	.word	0x0801a778
 80138c4:	0801a758 	.word	0x0801a758
 80138c8:	0801a604 	.word	0x0801a604
 80138cc:	0801a73c 	.word	0x0801a73c
 80138d0:	08017728 	.word	0x08017728

080138d4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80138d4:	b570      	push	{r4, r5, r6, lr}
 80138d6:	4604      	mov	r4, r0
 80138d8:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 80138da:	f7f4 fb55 	bl	8007f88 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 80138de:	8963      	ldrh	r3, [r4, #10]
 80138e0:	2b0e      	cmp	r3, #14
 80138e2:	d91a      	bls.n	801391a <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80138e4:	7be3      	ldrb	r3, [r4, #15]
 80138e6:	b91b      	cbnz	r3, 80138f0 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 80138e8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80138ec:	3301      	adds	r3, #1
 80138ee:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80138f0:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80138f2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80138f4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80138f6:	07d9      	lsls	r1, r3, #31
 80138f8:	d50a      	bpl.n	8013910 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d030      	beq.n	8013960 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80138fe:	2206      	movs	r2, #6
 8013900:	491d      	ldr	r1, [pc, #116]	; (8013978 <ethernet_input+0xa4>)
 8013902:	f001 fa54 	bl	8014dae <memcmp>
 8013906:	b918      	cbnz	r0, 8013910 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013908:	7b63      	ldrb	r3, [r4, #13]
 801390a:	f043 0308 	orr.w	r3, r3, #8
 801390e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8013910:	2e08      	cmp	r6, #8
 8013912:	d016      	beq.n	8013942 <ethernet_input+0x6e>
 8013914:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8013918:	d004      	beq.n	8013924 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801391a:	4620      	mov	r0, r4
 801391c:	f7f9 fd1c 	bl	800d358 <pbuf_free>
  return ERR_OK;
}
 8013920:	2000      	movs	r0, #0
 8013922:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013924:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8013928:	071b      	lsls	r3, r3, #28
 801392a:	d5f6      	bpl.n	801391a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801392c:	210e      	movs	r1, #14
 801392e:	4620      	mov	r0, r4
 8013930:	f7f9 fca6 	bl	800d280 <pbuf_remove_header>
 8013934:	2800      	cmp	r0, #0
 8013936:	d1f0      	bne.n	801391a <ethernet_input+0x46>
        etharp_input(p, netif);
 8013938:	4629      	mov	r1, r5
 801393a:	4620      	mov	r0, r4
 801393c:	f7fe fe72 	bl	8012624 <etharp_input>
      break;
 8013940:	e7ee      	b.n	8013920 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013942:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8013946:	071a      	lsls	r2, r3, #28
 8013948:	d5e7      	bpl.n	801391a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801394a:	210e      	movs	r1, #14
 801394c:	4620      	mov	r0, r4
 801394e:	f7f9 fc97 	bl	800d280 <pbuf_remove_header>
 8013952:	2800      	cmp	r0, #0
 8013954:	d1e1      	bne.n	801391a <ethernet_input+0x46>
        ip4_input(p, netif);
 8013956:	4629      	mov	r1, r5
 8013958:	4620      	mov	r0, r4
 801395a:	f7ff f9d1 	bl	8012d00 <ip4_input>
      break;
 801395e:	e7df      	b.n	8013920 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013960:	7843      	ldrb	r3, [r0, #1]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d1d4      	bne.n	8013910 <ethernet_input+0x3c>
 8013966:	7883      	ldrb	r3, [r0, #2]
 8013968:	2b5e      	cmp	r3, #94	; 0x5e
 801396a:	d1d1      	bne.n	8013910 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 801396c:	7b63      	ldrb	r3, [r4, #13]
 801396e:	f043 0310 	orr.w	r3, r3, #16
 8013972:	7363      	strb	r3, [r4, #13]
 8013974:	e7cc      	b.n	8013910 <ethernet_input+0x3c>
 8013976:	bf00      	nop
 8013978:	0801a7f4 	.word	0x0801a7f4

0801397c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	460c      	mov	r4, r1
 8013982:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013984:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8013988:	4616      	mov	r6, r2
 801398a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801398c:	f7f8 fd42 	bl	800c414 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013990:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8013992:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013994:	4620      	mov	r0, r4
 8013996:	f7f9 fc3f 	bl	800d218 <pbuf_add_header>
 801399a:	b9f0      	cbnz	r0, 80139da <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 801399c:	f7f4 faf4 	bl	8007f88 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 80139a0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80139a2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	600b      	str	r3, [r1, #0]
 80139aa:	88bb      	ldrh	r3, [r7, #4]
 80139ac:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80139ae:	6833      	ldr	r3, [r6, #0]
 80139b0:	f8c1 3006 	str.w	r3, [r1, #6]
 80139b4:	88b3      	ldrh	r3, [r6, #4]
 80139b6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80139b8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80139bc:	2b06      	cmp	r3, #6
 80139be:	d006      	beq.n	80139ce <ethernet_output+0x52>
 80139c0:	4b08      	ldr	r3, [pc, #32]	; (80139e4 <ethernet_output+0x68>)
 80139c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80139c6:	4908      	ldr	r1, [pc, #32]	; (80139e8 <ethernet_output+0x6c>)
 80139c8:	4808      	ldr	r0, [pc, #32]	; (80139ec <ethernet_output+0x70>)
 80139ca:	f001 f94d 	bl	8014c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80139ce:	69ab      	ldr	r3, [r5, #24]
 80139d0:	4621      	mov	r1, r4
 80139d2:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80139d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80139d8:	4718      	bx	r3
}
 80139da:	f06f 0001 	mvn.w	r0, #1
 80139de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e2:	bf00      	nop
 80139e4:	0801a788 	.word	0x0801a788
 80139e8:	0801a7c0 	.word	0x0801a7c0
 80139ec:	08017728 	.word	0x08017728

080139f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80139f0:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80139f2:	2200      	movs	r2, #0
 80139f4:	2104      	movs	r1, #4
{
 80139f6:	b510      	push	{r4, lr}
 80139f8:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7f4 fce4 	bl	80083c8 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013a00:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013a04:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8013a06:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8013a08:	4258      	negs	r0, r3
 8013a0a:	bd10      	pop	{r4, pc}

08013a0c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013a0c:	b510      	push	{r4, lr}
 8013a0e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8013a10:	6800      	ldr	r0, [r0, #0]
 8013a12:	f7f4 fd97 	bl	8008544 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8013a16:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8013a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 8013a1c:	f7f4 bd9c 	b.w	8008558 <osMessageQueueDelete>

08013a20 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013a20:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013a22:	2300      	movs	r3, #0
{
 8013a24:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013a26:	6800      	ldr	r0, [r0, #0]
{
 8013a28:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	a901      	add	r1, sp, #4
 8013a2e:	f7f4 fd09 	bl	8008444 <osMessageQueuePut>
 8013a32:	3800      	subs	r0, #0
 8013a34:	bf18      	it	ne
 8013a36:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8013a38:	4240      	negs	r0, r0
 8013a3a:	b003      	add	sp, #12
 8013a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08013a40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	4615      	mov	r5, r2
 8013a44:	b082      	sub	sp, #8
 8013a46:	4606      	mov	r6, r0
 8013a48:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013a4a:	f7f4 fb0f 	bl	800806c <osKernelGetTickCount>
#endif
  if(timeout != 0)
 8013a4e:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 8013a50:	4604      	mov	r4, r0
  if(timeout != 0)
 8013a52:	b14d      	cbz	r5, 8013a68 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013a54:	462b      	mov	r3, r5
 8013a56:	2200      	movs	r2, #0
 8013a58:	6830      	ldr	r0, [r6, #0]
 8013a5a:	f7f4 fd35 	bl	80084c8 <osMessageQueueGet>
    if (status == osOK)
 8013a5e:	b148      	cbz	r0, 8013a74 <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013a60:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013a64:	b002      	add	sp, #8
 8013a66:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013a68:	f04f 33ff 	mov.w	r3, #4294967295
 8013a6c:	462a      	mov	r2, r5
 8013a6e:	6830      	ldr	r0, [r6, #0]
 8013a70:	f7f4 fd2a 	bl	80084c8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013a74:	f7f4 fafa 	bl	800806c <osKernelGetTickCount>
 8013a78:	1b00      	subs	r0, r0, r4
}
 8013a7a:	b002      	add	sp, #8
 8013a7c:	bd70      	pop	{r4, r5, r6, pc}
 8013a7e:	bf00      	nop

08013a80 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013a80:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8013a82:	2300      	movs	r3, #0
 8013a84:	6800      	ldr	r0, [r0, #0]
 8013a86:	461a      	mov	r2, r3
 8013a88:	f7f4 fd1e 	bl	80084c8 <osMessageQueueGet>
 8013a8c:	3800      	subs	r0, #0
 8013a8e:	bf18      	it	ne
 8013a90:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 8013a92:	4240      	negs	r0, r0
 8013a94:	bd08      	pop	{r3, pc}
 8013a96:	bf00      	nop

08013a98 <sys_mbox_valid>:
 8013a98:	6800      	ldr	r0, [r0, #0]
 8013a9a:	3800      	subs	r0, #0
 8013a9c:	bf18      	it	ne
 8013a9e:	2001      	movne	r0, #1
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop

08013aa4 <sys_mbox_set_invalid>:
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	6003      	str	r3, [r0, #0]
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop

08013aac <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8013ab6:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8013ab8:	f7f4 fbc2 	bl	8008240 <osSemaphoreNew>
 8013abc:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 8013abe:	b138      	cbz	r0, 8013ad0 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 8013ac0:	b10c      	cbz	r4, 8013ac6 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8013ac2:	2000      	movs	r0, #0
}
 8013ac4:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	f7f4 fc0a 	bl	80082e0 <osSemaphoreAcquire>
  return ERR_OK;
 8013acc:	4620      	mov	r0, r4
}
 8013ace:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_MEM;
 8013ad0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013ad4:	bd38      	pop	{r3, r4, r5, pc}
 8013ad6:	bf00      	nop

08013ad8 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8013ad8:	b570      	push	{r4, r5, r6, lr}
 8013ada:	460e      	mov	r6, r1
 8013adc:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8013ade:	f7f4 fac5 	bl	800806c <osKernelGetTickCount>
 8013ae2:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 8013ae4:	b956      	cbnz	r6, 8013afc <sys_arch_sem_wait+0x24>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8013ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8013aea:	6820      	ldr	r0, [r4, #0]
 8013aec:	f7f4 fbf8 	bl	80082e0 <osSemaphoreAcquire>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	d1f8      	bne.n	8013ae6 <sys_arch_sem_wait+0xe>
    return (osKernelGetTickCount() - starttime);
 8013af4:	f7f4 faba 	bl	800806c <osKernelGetTickCount>
 8013af8:	1b40      	subs	r0, r0, r5
#endif
  }
}
 8013afa:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8013afc:	4631      	mov	r1, r6
 8013afe:	6820      	ldr	r0, [r4, #0]
 8013b00:	f7f4 fbee 	bl	80082e0 <osSemaphoreAcquire>
 8013b04:	2800      	cmp	r0, #0
 8013b06:	d0f5      	beq.n	8013af4 <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8013b08:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013b0c:	bd70      	pop	{r4, r5, r6, pc}
 8013b0e:	bf00      	nop

08013b10 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8013b10:	6800      	ldr	r0, [r0, #0]
 8013b12:	f7f4 bc19 	b.w	8008348 <osSemaphoreRelease>
 8013b16:	bf00      	nop

08013b18 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8013b18:	6800      	ldr	r0, [r0, #0]
 8013b1a:	f7f4 bc41 	b.w	80083a0 <osSemaphoreDelete>
 8013b1e:	bf00      	nop

08013b20 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8013b20:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8013b22:	3800      	subs	r0, #0
 8013b24:	bf18      	it	ne
 8013b26:	2001      	movne	r0, #1
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop

08013b2c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	6003      	str	r3, [r0, #0]
}
 8013b30:	4770      	bx	lr
 8013b32:	bf00      	nop

08013b34 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013b34:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013b36:	2000      	movs	r0, #0
 8013b38:	f7f4 fafc 	bl	8008134 <osMutexNew>
 8013b3c:	4b01      	ldr	r3, [pc, #4]	; (8013b44 <sys_init+0x10>)
 8013b3e:	6018      	str	r0, [r3, #0]
#endif
}
 8013b40:	bd08      	pop	{r3, pc}
 8013b42:	bf00      	nop
 8013b44:	24037bf8 	.word	0x24037bf8

08013b48 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	f7f4 faf1 	bl	8008134 <osMutexNew>
#endif

  if(*mutex == NULL)
 8013b52:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 8013b56:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8013b58:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8013b5a:	4258      	negs	r0, r3
 8013b5c:	bd10      	pop	{r4, pc}
 8013b5e:	bf00      	nop

08013b60 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013b60:	f04f 31ff 	mov.w	r1, #4294967295
 8013b64:	6800      	ldr	r0, [r0, #0]
 8013b66:	f7f4 bb25 	b.w	80081b4 <osMutexAcquire>
 8013b6a:	bf00      	nop

08013b6c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8013b6c:	6800      	ldr	r0, [r0, #0]
 8013b6e:	f7f4 bb45 	b.w	80081fc <osMutexRelease>
 8013b72:	bf00      	nop

08013b74 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b76:	b08b      	sub	sp, #44	; 0x2c
 8013b78:	4617      	mov	r7, r2
 8013b7a:	460e      	mov	r6, r1
 8013b7c:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8013b7e:	2220      	movs	r2, #32
 8013b80:	2100      	movs	r1, #0
 8013b82:	a802      	add	r0, sp, #8
{
 8013b84:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 8013b86:	f001 f93c 	bl	8014e02 <memset>
 8013b8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8013b8c:	4639      	mov	r1, r7
 8013b8e:	aa01      	add	r2, sp, #4
 8013b90:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 8013b92:	9501      	str	r5, [sp, #4]
 8013b94:	9406      	str	r4, [sp, #24]
 8013b96:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 8013b98:	f7f4 fa70 	bl	800807c <osThreadNew>
#endif
}
 8013b9c:	b00b      	add	sp, #44	; 0x2c
 8013b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ba0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013ba0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8013ba2:	4b04      	ldr	r3, [pc, #16]	; (8013bb4 <sys_arch_protect+0x14>)
 8013ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8013ba8:	6818      	ldr	r0, [r3, #0]
 8013baa:	f7f4 fb03 	bl	80081b4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 8013bae:	2001      	movs	r0, #1
 8013bb0:	bd08      	pop	{r3, pc}
 8013bb2:	bf00      	nop
 8013bb4:	24037bf8 	.word	0x24037bf8

08013bb8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013bb8:	4b01      	ldr	r3, [pc, #4]	; (8013bc0 <sys_arch_unprotect+0x8>)
 8013bba:	6818      	ldr	r0, [r3, #0]
 8013bbc:	f7f4 bb1e 	b.w	80081fc <osMutexRelease>
 8013bc0:	24037bf8 	.word	0x24037bf8

08013bc4 <malloc>:
 8013bc4:	4b02      	ldr	r3, [pc, #8]	; (8013bd0 <malloc+0xc>)
 8013bc6:	4601      	mov	r1, r0
 8013bc8:	6818      	ldr	r0, [r3, #0]
 8013bca:	f000 b82b 	b.w	8013c24 <_malloc_r>
 8013bce:	bf00      	nop
 8013bd0:	2400024c 	.word	0x2400024c

08013bd4 <free>:
 8013bd4:	4b02      	ldr	r3, [pc, #8]	; (8013be0 <free+0xc>)
 8013bd6:	4601      	mov	r1, r0
 8013bd8:	6818      	ldr	r0, [r3, #0]
 8013bda:	f001 ba3b 	b.w	8015054 <_free_r>
 8013bde:	bf00      	nop
 8013be0:	2400024c 	.word	0x2400024c

08013be4 <sbrk_aligned>:
 8013be4:	b570      	push	{r4, r5, r6, lr}
 8013be6:	4e0e      	ldr	r6, [pc, #56]	; (8013c20 <sbrk_aligned+0x3c>)
 8013be8:	460c      	mov	r4, r1
 8013bea:	6831      	ldr	r1, [r6, #0]
 8013bec:	4605      	mov	r5, r0
 8013bee:	b911      	cbnz	r1, 8013bf6 <sbrk_aligned+0x12>
 8013bf0:	f001 f9ac 	bl	8014f4c <_sbrk_r>
 8013bf4:	6030      	str	r0, [r6, #0]
 8013bf6:	4621      	mov	r1, r4
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	f001 f9a7 	bl	8014f4c <_sbrk_r>
 8013bfe:	1c43      	adds	r3, r0, #1
 8013c00:	d00a      	beq.n	8013c18 <sbrk_aligned+0x34>
 8013c02:	1cc4      	adds	r4, r0, #3
 8013c04:	f024 0403 	bic.w	r4, r4, #3
 8013c08:	42a0      	cmp	r0, r4
 8013c0a:	d007      	beq.n	8013c1c <sbrk_aligned+0x38>
 8013c0c:	1a21      	subs	r1, r4, r0
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f001 f99c 	bl	8014f4c <_sbrk_r>
 8013c14:	3001      	adds	r0, #1
 8013c16:	d101      	bne.n	8013c1c <sbrk_aligned+0x38>
 8013c18:	f04f 34ff 	mov.w	r4, #4294967295
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	bd70      	pop	{r4, r5, r6, pc}
 8013c20:	24037c00 	.word	0x24037c00

08013c24 <_malloc_r>:
 8013c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c28:	1ccd      	adds	r5, r1, #3
 8013c2a:	f025 0503 	bic.w	r5, r5, #3
 8013c2e:	3508      	adds	r5, #8
 8013c30:	2d0c      	cmp	r5, #12
 8013c32:	bf38      	it	cc
 8013c34:	250c      	movcc	r5, #12
 8013c36:	2d00      	cmp	r5, #0
 8013c38:	4607      	mov	r7, r0
 8013c3a:	db01      	blt.n	8013c40 <_malloc_r+0x1c>
 8013c3c:	42a9      	cmp	r1, r5
 8013c3e:	d905      	bls.n	8013c4c <_malloc_r+0x28>
 8013c40:	230c      	movs	r3, #12
 8013c42:	603b      	str	r3, [r7, #0]
 8013c44:	2600      	movs	r6, #0
 8013c46:	4630      	mov	r0, r6
 8013c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013d20 <_malloc_r+0xfc>
 8013c50:	f000 f868 	bl	8013d24 <__malloc_lock>
 8013c54:	f8d8 3000 	ldr.w	r3, [r8]
 8013c58:	461c      	mov	r4, r3
 8013c5a:	bb5c      	cbnz	r4, 8013cb4 <_malloc_r+0x90>
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f7ff ffc0 	bl	8013be4 <sbrk_aligned>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	4604      	mov	r4, r0
 8013c68:	d155      	bne.n	8013d16 <_malloc_r+0xf2>
 8013c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8013c6e:	4626      	mov	r6, r4
 8013c70:	2e00      	cmp	r6, #0
 8013c72:	d145      	bne.n	8013d00 <_malloc_r+0xdc>
 8013c74:	2c00      	cmp	r4, #0
 8013c76:	d048      	beq.n	8013d0a <_malloc_r+0xe6>
 8013c78:	6823      	ldr	r3, [r4, #0]
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4638      	mov	r0, r7
 8013c7e:	eb04 0903 	add.w	r9, r4, r3
 8013c82:	f001 f963 	bl	8014f4c <_sbrk_r>
 8013c86:	4581      	cmp	r9, r0
 8013c88:	d13f      	bne.n	8013d0a <_malloc_r+0xe6>
 8013c8a:	6821      	ldr	r1, [r4, #0]
 8013c8c:	1a6d      	subs	r5, r5, r1
 8013c8e:	4629      	mov	r1, r5
 8013c90:	4638      	mov	r0, r7
 8013c92:	f7ff ffa7 	bl	8013be4 <sbrk_aligned>
 8013c96:	3001      	adds	r0, #1
 8013c98:	d037      	beq.n	8013d0a <_malloc_r+0xe6>
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	442b      	add	r3, r5
 8013c9e:	6023      	str	r3, [r4, #0]
 8013ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d038      	beq.n	8013d1a <_malloc_r+0xf6>
 8013ca8:	685a      	ldr	r2, [r3, #4]
 8013caa:	42a2      	cmp	r2, r4
 8013cac:	d12b      	bne.n	8013d06 <_malloc_r+0xe2>
 8013cae:	2200      	movs	r2, #0
 8013cb0:	605a      	str	r2, [r3, #4]
 8013cb2:	e00f      	b.n	8013cd4 <_malloc_r+0xb0>
 8013cb4:	6822      	ldr	r2, [r4, #0]
 8013cb6:	1b52      	subs	r2, r2, r5
 8013cb8:	d41f      	bmi.n	8013cfa <_malloc_r+0xd6>
 8013cba:	2a0b      	cmp	r2, #11
 8013cbc:	d917      	bls.n	8013cee <_malloc_r+0xca>
 8013cbe:	1961      	adds	r1, r4, r5
 8013cc0:	42a3      	cmp	r3, r4
 8013cc2:	6025      	str	r5, [r4, #0]
 8013cc4:	bf18      	it	ne
 8013cc6:	6059      	strne	r1, [r3, #4]
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	bf08      	it	eq
 8013ccc:	f8c8 1000 	streq.w	r1, [r8]
 8013cd0:	5162      	str	r2, [r4, r5]
 8013cd2:	604b      	str	r3, [r1, #4]
 8013cd4:	4638      	mov	r0, r7
 8013cd6:	f104 060b 	add.w	r6, r4, #11
 8013cda:	f000 f829 	bl	8013d30 <__malloc_unlock>
 8013cde:	f026 0607 	bic.w	r6, r6, #7
 8013ce2:	1d23      	adds	r3, r4, #4
 8013ce4:	1af2      	subs	r2, r6, r3
 8013ce6:	d0ae      	beq.n	8013c46 <_malloc_r+0x22>
 8013ce8:	1b9b      	subs	r3, r3, r6
 8013cea:	50a3      	str	r3, [r4, r2]
 8013cec:	e7ab      	b.n	8013c46 <_malloc_r+0x22>
 8013cee:	42a3      	cmp	r3, r4
 8013cf0:	6862      	ldr	r2, [r4, #4]
 8013cf2:	d1dd      	bne.n	8013cb0 <_malloc_r+0x8c>
 8013cf4:	f8c8 2000 	str.w	r2, [r8]
 8013cf8:	e7ec      	b.n	8013cd4 <_malloc_r+0xb0>
 8013cfa:	4623      	mov	r3, r4
 8013cfc:	6864      	ldr	r4, [r4, #4]
 8013cfe:	e7ac      	b.n	8013c5a <_malloc_r+0x36>
 8013d00:	4634      	mov	r4, r6
 8013d02:	6876      	ldr	r6, [r6, #4]
 8013d04:	e7b4      	b.n	8013c70 <_malloc_r+0x4c>
 8013d06:	4613      	mov	r3, r2
 8013d08:	e7cc      	b.n	8013ca4 <_malloc_r+0x80>
 8013d0a:	230c      	movs	r3, #12
 8013d0c:	603b      	str	r3, [r7, #0]
 8013d0e:	4638      	mov	r0, r7
 8013d10:	f000 f80e 	bl	8013d30 <__malloc_unlock>
 8013d14:	e797      	b.n	8013c46 <_malloc_r+0x22>
 8013d16:	6025      	str	r5, [r4, #0]
 8013d18:	e7dc      	b.n	8013cd4 <_malloc_r+0xb0>
 8013d1a:	605b      	str	r3, [r3, #4]
 8013d1c:	deff      	udf	#255	; 0xff
 8013d1e:	bf00      	nop
 8013d20:	24037bfc 	.word	0x24037bfc

08013d24 <__malloc_lock>:
 8013d24:	4801      	ldr	r0, [pc, #4]	; (8013d2c <__malloc_lock+0x8>)
 8013d26:	f001 b95e 	b.w	8014fe6 <__retarget_lock_acquire_recursive>
 8013d2a:	bf00      	nop
 8013d2c:	24037d44 	.word	0x24037d44

08013d30 <__malloc_unlock>:
 8013d30:	4801      	ldr	r0, [pc, #4]	; (8013d38 <__malloc_unlock+0x8>)
 8013d32:	f001 b959 	b.w	8014fe8 <__retarget_lock_release_recursive>
 8013d36:	bf00      	nop
 8013d38:	24037d44 	.word	0x24037d44

08013d3c <rand>:
 8013d3c:	4b16      	ldr	r3, [pc, #88]	; (8013d98 <rand+0x5c>)
 8013d3e:	b510      	push	{r4, lr}
 8013d40:	681c      	ldr	r4, [r3, #0]
 8013d42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013d44:	b9b3      	cbnz	r3, 8013d74 <rand+0x38>
 8013d46:	2018      	movs	r0, #24
 8013d48:	f7ff ff3c 	bl	8013bc4 <malloc>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	6320      	str	r0, [r4, #48]	; 0x30
 8013d50:	b920      	cbnz	r0, 8013d5c <rand+0x20>
 8013d52:	4b12      	ldr	r3, [pc, #72]	; (8013d9c <rand+0x60>)
 8013d54:	4812      	ldr	r0, [pc, #72]	; (8013da0 <rand+0x64>)
 8013d56:	2152      	movs	r1, #82	; 0x52
 8013d58:	f001 f95e 	bl	8015018 <__assert_func>
 8013d5c:	4911      	ldr	r1, [pc, #68]	; (8013da4 <rand+0x68>)
 8013d5e:	4b12      	ldr	r3, [pc, #72]	; (8013da8 <rand+0x6c>)
 8013d60:	e9c0 1300 	strd	r1, r3, [r0]
 8013d64:	4b11      	ldr	r3, [pc, #68]	; (8013dac <rand+0x70>)
 8013d66:	6083      	str	r3, [r0, #8]
 8013d68:	230b      	movs	r3, #11
 8013d6a:	8183      	strh	r3, [r0, #12]
 8013d6c:	2100      	movs	r1, #0
 8013d6e:	2001      	movs	r0, #1
 8013d70:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013d74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013d76:	480e      	ldr	r0, [pc, #56]	; (8013db0 <rand+0x74>)
 8013d78:	690b      	ldr	r3, [r1, #16]
 8013d7a:	694c      	ldr	r4, [r1, #20]
 8013d7c:	4a0d      	ldr	r2, [pc, #52]	; (8013db4 <rand+0x78>)
 8013d7e:	4358      	muls	r0, r3
 8013d80:	fb02 0004 	mla	r0, r2, r4, r0
 8013d84:	fba3 3202 	umull	r3, r2, r3, r2
 8013d88:	3301      	adds	r3, #1
 8013d8a:	eb40 0002 	adc.w	r0, r0, r2
 8013d8e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013d92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013d96:	bd10      	pop	{r4, pc}
 8013d98:	2400024c 	.word	0x2400024c
 8013d9c:	0801a802 	.word	0x0801a802
 8013da0:	0801a819 	.word	0x0801a819
 8013da4:	abcd330e 	.word	0xabcd330e
 8013da8:	e66d1234 	.word	0xe66d1234
 8013dac:	0005deec 	.word	0x0005deec
 8013db0:	5851f42d 	.word	0x5851f42d
 8013db4:	4c957f2d 	.word	0x4c957f2d

08013db8 <realloc>:
 8013db8:	4b02      	ldr	r3, [pc, #8]	; (8013dc4 <realloc+0xc>)
 8013dba:	460a      	mov	r2, r1
 8013dbc:	4601      	mov	r1, r0
 8013dbe:	6818      	ldr	r0, [r3, #0]
 8013dc0:	f000 b802 	b.w	8013dc8 <_realloc_r>
 8013dc4:	2400024c 	.word	0x2400024c

08013dc8 <_realloc_r>:
 8013dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dcc:	4680      	mov	r8, r0
 8013dce:	4614      	mov	r4, r2
 8013dd0:	460e      	mov	r6, r1
 8013dd2:	b921      	cbnz	r1, 8013dde <_realloc_r+0x16>
 8013dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd8:	4611      	mov	r1, r2
 8013dda:	f7ff bf23 	b.w	8013c24 <_malloc_r>
 8013dde:	b92a      	cbnz	r2, 8013dec <_realloc_r+0x24>
 8013de0:	f001 f938 	bl	8015054 <_free_r>
 8013de4:	4625      	mov	r5, r4
 8013de6:	4628      	mov	r0, r5
 8013de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dec:	f002 f992 	bl	8016114 <_malloc_usable_size_r>
 8013df0:	4284      	cmp	r4, r0
 8013df2:	4607      	mov	r7, r0
 8013df4:	d802      	bhi.n	8013dfc <_realloc_r+0x34>
 8013df6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013dfa:	d812      	bhi.n	8013e22 <_realloc_r+0x5a>
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	4640      	mov	r0, r8
 8013e00:	f7ff ff10 	bl	8013c24 <_malloc_r>
 8013e04:	4605      	mov	r5, r0
 8013e06:	2800      	cmp	r0, #0
 8013e08:	d0ed      	beq.n	8013de6 <_realloc_r+0x1e>
 8013e0a:	42bc      	cmp	r4, r7
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	4631      	mov	r1, r6
 8013e10:	bf28      	it	cs
 8013e12:	463a      	movcs	r2, r7
 8013e14:	f001 f8e9 	bl	8014fea <memcpy>
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4640      	mov	r0, r8
 8013e1c:	f001 f91a 	bl	8015054 <_free_r>
 8013e20:	e7e1      	b.n	8013de6 <_realloc_r+0x1e>
 8013e22:	4635      	mov	r5, r6
 8013e24:	e7df      	b.n	8013de6 <_realloc_r+0x1e>

08013e26 <sulp>:
 8013e26:	b570      	push	{r4, r5, r6, lr}
 8013e28:	4604      	mov	r4, r0
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	4616      	mov	r6, r2
 8013e2e:	ec45 4b10 	vmov	d0, r4, r5
 8013e32:	f002 f831 	bl	8015e98 <__ulp>
 8013e36:	b17e      	cbz	r6, 8013e58 <sulp+0x32>
 8013e38:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013e3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dd09      	ble.n	8013e58 <sulp+0x32>
 8013e44:	051b      	lsls	r3, r3, #20
 8013e46:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013e50:	ec41 0b17 	vmov	d7, r0, r1
 8013e54:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013e58:	bd70      	pop	{r4, r5, r6, pc}
 8013e5a:	0000      	movs	r0, r0
 8013e5c:	0000      	movs	r0, r0
	...

08013e60 <_strtod_l>:
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	ed2d 8b0e 	vpush	{d8-d14}
 8013e68:	b097      	sub	sp, #92	; 0x5c
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	920d      	str	r2, [sp, #52]	; 0x34
 8013e6e:	2200      	movs	r2, #0
 8013e70:	9212      	str	r2, [sp, #72]	; 0x48
 8013e72:	468a      	mov	sl, r1
 8013e74:	f04f 0800 	mov.w	r8, #0
 8013e78:	f04f 0900 	mov.w	r9, #0
 8013e7c:	460a      	mov	r2, r1
 8013e7e:	9211      	str	r2, [sp, #68]	; 0x44
 8013e80:	7811      	ldrb	r1, [r2, #0]
 8013e82:	292b      	cmp	r1, #43	; 0x2b
 8013e84:	d04c      	beq.n	8013f20 <_strtod_l+0xc0>
 8013e86:	d839      	bhi.n	8013efc <_strtod_l+0x9c>
 8013e88:	290d      	cmp	r1, #13
 8013e8a:	d833      	bhi.n	8013ef4 <_strtod_l+0x94>
 8013e8c:	2908      	cmp	r1, #8
 8013e8e:	d833      	bhi.n	8013ef8 <_strtod_l+0x98>
 8013e90:	2900      	cmp	r1, #0
 8013e92:	d03c      	beq.n	8013f0e <_strtod_l+0xae>
 8013e94:	2200      	movs	r2, #0
 8013e96:	9208      	str	r2, [sp, #32]
 8013e98:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013e9a:	7832      	ldrb	r2, [r6, #0]
 8013e9c:	2a30      	cmp	r2, #48	; 0x30
 8013e9e:	f040 80b8 	bne.w	8014012 <_strtod_l+0x1b2>
 8013ea2:	7872      	ldrb	r2, [r6, #1]
 8013ea4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013ea8:	2a58      	cmp	r2, #88	; 0x58
 8013eaa:	d170      	bne.n	8013f8e <_strtod_l+0x12e>
 8013eac:	9302      	str	r3, [sp, #8]
 8013eae:	9b08      	ldr	r3, [sp, #32]
 8013eb0:	9301      	str	r3, [sp, #4]
 8013eb2:	ab12      	add	r3, sp, #72	; 0x48
 8013eb4:	9300      	str	r3, [sp, #0]
 8013eb6:	4a91      	ldr	r2, [pc, #580]	; (80140fc <_strtod_l+0x29c>)
 8013eb8:	ab13      	add	r3, sp, #76	; 0x4c
 8013eba:	a911      	add	r1, sp, #68	; 0x44
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f001 f97d 	bl	80151bc <__gethex>
 8013ec2:	f010 070f 	ands.w	r7, r0, #15
 8013ec6:	4605      	mov	r5, r0
 8013ec8:	d005      	beq.n	8013ed6 <_strtod_l+0x76>
 8013eca:	2f06      	cmp	r7, #6
 8013ecc:	d12a      	bne.n	8013f24 <_strtod_l+0xc4>
 8013ece:	3601      	adds	r6, #1
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	9611      	str	r6, [sp, #68]	; 0x44
 8013ed4:	9308      	str	r3, [sp, #32]
 8013ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	f040 8555 	bne.w	8014988 <_strtod_l+0xb28>
 8013ede:	9b08      	ldr	r3, [sp, #32]
 8013ee0:	ec49 8b10 	vmov	d0, r8, r9
 8013ee4:	b1cb      	cbz	r3, 8013f1a <_strtod_l+0xba>
 8013ee6:	eeb1 0b40 	vneg.f64	d0, d0
 8013eea:	b017      	add	sp, #92	; 0x5c
 8013eec:	ecbd 8b0e 	vpop	{d8-d14}
 8013ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef4:	2920      	cmp	r1, #32
 8013ef6:	d1cd      	bne.n	8013e94 <_strtod_l+0x34>
 8013ef8:	3201      	adds	r2, #1
 8013efa:	e7c0      	b.n	8013e7e <_strtod_l+0x1e>
 8013efc:	292d      	cmp	r1, #45	; 0x2d
 8013efe:	d1c9      	bne.n	8013e94 <_strtod_l+0x34>
 8013f00:	2101      	movs	r1, #1
 8013f02:	9108      	str	r1, [sp, #32]
 8013f04:	1c51      	adds	r1, r2, #1
 8013f06:	9111      	str	r1, [sp, #68]	; 0x44
 8013f08:	7852      	ldrb	r2, [r2, #1]
 8013f0a:	2a00      	cmp	r2, #0
 8013f0c:	d1c4      	bne.n	8013e98 <_strtod_l+0x38>
 8013f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f10:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f040 8535 	bne.w	8014984 <_strtod_l+0xb24>
 8013f1a:	ec49 8b10 	vmov	d0, r8, r9
 8013f1e:	e7e4      	b.n	8013eea <_strtod_l+0x8a>
 8013f20:	2100      	movs	r1, #0
 8013f22:	e7ee      	b.n	8013f02 <_strtod_l+0xa2>
 8013f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f26:	b13a      	cbz	r2, 8013f38 <_strtod_l+0xd8>
 8013f28:	2135      	movs	r1, #53	; 0x35
 8013f2a:	a814      	add	r0, sp, #80	; 0x50
 8013f2c:	f002 f8ae 	bl	801608c <__copybits>
 8013f30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013f32:	4620      	mov	r0, r4
 8013f34:	f001 fc84 	bl	8015840 <_Bfree>
 8013f38:	1e7b      	subs	r3, r7, #1
 8013f3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	d806      	bhi.n	8013f4e <_strtod_l+0xee>
 8013f40:	e8df f003 	tbb	[pc, r3]
 8013f44:	201d0314 	.word	0x201d0314
 8013f48:	14          	.byte	0x14
 8013f49:	00          	.byte	0x00
 8013f4a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8013f4e:	05eb      	lsls	r3, r5, #23
 8013f50:	bf48      	it	mi
 8013f52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013f56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f5a:	0d1b      	lsrs	r3, r3, #20
 8013f5c:	051b      	lsls	r3, r3, #20
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d1b9      	bne.n	8013ed6 <_strtod_l+0x76>
 8013f62:	f001 f815 	bl	8014f90 <__errno>
 8013f66:	2322      	movs	r3, #34	; 0x22
 8013f68:	6003      	str	r3, [r0, #0]
 8013f6a:	e7b4      	b.n	8013ed6 <_strtod_l+0x76>
 8013f6c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8013f70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013f74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013f78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013f7c:	e7e7      	b.n	8013f4e <_strtod_l+0xee>
 8013f7e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8014104 <_strtod_l+0x2a4>
 8013f82:	e7e4      	b.n	8013f4e <_strtod_l+0xee>
 8013f84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013f88:	f04f 38ff 	mov.w	r8, #4294967295
 8013f8c:	e7df      	b.n	8013f4e <_strtod_l+0xee>
 8013f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f90:	1c5a      	adds	r2, r3, #1
 8013f92:	9211      	str	r2, [sp, #68]	; 0x44
 8013f94:	785b      	ldrb	r3, [r3, #1]
 8013f96:	2b30      	cmp	r3, #48	; 0x30
 8013f98:	d0f9      	beq.n	8013f8e <_strtod_l+0x12e>
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d09b      	beq.n	8013ed6 <_strtod_l+0x76>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	9306      	str	r3, [sp, #24]
 8013fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	9305      	str	r3, [sp, #20]
 8013faa:	9307      	str	r3, [sp, #28]
 8013fac:	461e      	mov	r6, r3
 8013fae:	220a      	movs	r2, #10
 8013fb0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013fb2:	7805      	ldrb	r5, [r0, #0]
 8013fb4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8013fb8:	b2d9      	uxtb	r1, r3
 8013fba:	2909      	cmp	r1, #9
 8013fbc:	d92b      	bls.n	8014016 <_strtod_l+0x1b6>
 8013fbe:	4950      	ldr	r1, [pc, #320]	; (8014100 <_strtod_l+0x2a0>)
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	f000 ff26 	bl	8014e12 <strncmp>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d035      	beq.n	8014036 <_strtod_l+0x1d6>
 8013fca:	2000      	movs	r0, #0
 8013fcc:	462a      	mov	r2, r5
 8013fce:	4633      	mov	r3, r6
 8013fd0:	4683      	mov	fp, r0
 8013fd2:	4601      	mov	r1, r0
 8013fd4:	2a65      	cmp	r2, #101	; 0x65
 8013fd6:	d001      	beq.n	8013fdc <_strtod_l+0x17c>
 8013fd8:	2a45      	cmp	r2, #69	; 0x45
 8013fda:	d118      	bne.n	801400e <_strtod_l+0x1ae>
 8013fdc:	b91b      	cbnz	r3, 8013fe6 <_strtod_l+0x186>
 8013fde:	9b06      	ldr	r3, [sp, #24]
 8013fe0:	4303      	orrs	r3, r0
 8013fe2:	d094      	beq.n	8013f0e <_strtod_l+0xae>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8013fea:	f10a 0201 	add.w	r2, sl, #1
 8013fee:	9211      	str	r2, [sp, #68]	; 0x44
 8013ff0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013ff4:	2a2b      	cmp	r2, #43	; 0x2b
 8013ff6:	d075      	beq.n	80140e4 <_strtod_l+0x284>
 8013ff8:	2a2d      	cmp	r2, #45	; 0x2d
 8013ffa:	d07b      	beq.n	80140f4 <_strtod_l+0x294>
 8013ffc:	f04f 0e00 	mov.w	lr, #0
 8014000:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014004:	2d09      	cmp	r5, #9
 8014006:	f240 8083 	bls.w	8014110 <_strtod_l+0x2b0>
 801400a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801400e:	2500      	movs	r5, #0
 8014010:	e09e      	b.n	8014150 <_strtod_l+0x2f0>
 8014012:	2300      	movs	r3, #0
 8014014:	e7c4      	b.n	8013fa0 <_strtod_l+0x140>
 8014016:	2e08      	cmp	r6, #8
 8014018:	bfd5      	itete	le
 801401a:	9907      	ldrle	r1, [sp, #28]
 801401c:	9905      	ldrgt	r1, [sp, #20]
 801401e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014022:	fb02 3301 	mlagt	r3, r2, r1, r3
 8014026:	f100 0001 	add.w	r0, r0, #1
 801402a:	bfd4      	ite	le
 801402c:	9307      	strle	r3, [sp, #28]
 801402e:	9305      	strgt	r3, [sp, #20]
 8014030:	3601      	adds	r6, #1
 8014032:	9011      	str	r0, [sp, #68]	; 0x44
 8014034:	e7bc      	b.n	8013fb0 <_strtod_l+0x150>
 8014036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014038:	1c5a      	adds	r2, r3, #1
 801403a:	9211      	str	r2, [sp, #68]	; 0x44
 801403c:	785a      	ldrb	r2, [r3, #1]
 801403e:	b3ae      	cbz	r6, 80140ac <_strtod_l+0x24c>
 8014040:	4683      	mov	fp, r0
 8014042:	4633      	mov	r3, r6
 8014044:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014048:	2909      	cmp	r1, #9
 801404a:	d912      	bls.n	8014072 <_strtod_l+0x212>
 801404c:	2101      	movs	r1, #1
 801404e:	e7c1      	b.n	8013fd4 <_strtod_l+0x174>
 8014050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014052:	1c5a      	adds	r2, r3, #1
 8014054:	9211      	str	r2, [sp, #68]	; 0x44
 8014056:	785a      	ldrb	r2, [r3, #1]
 8014058:	3001      	adds	r0, #1
 801405a:	2a30      	cmp	r2, #48	; 0x30
 801405c:	d0f8      	beq.n	8014050 <_strtod_l+0x1f0>
 801405e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014062:	2b08      	cmp	r3, #8
 8014064:	f200 8495 	bhi.w	8014992 <_strtod_l+0xb32>
 8014068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801406a:	9309      	str	r3, [sp, #36]	; 0x24
 801406c:	4683      	mov	fp, r0
 801406e:	2000      	movs	r0, #0
 8014070:	4603      	mov	r3, r0
 8014072:	3a30      	subs	r2, #48	; 0x30
 8014074:	f100 0101 	add.w	r1, r0, #1
 8014078:	d012      	beq.n	80140a0 <_strtod_l+0x240>
 801407a:	448b      	add	fp, r1
 801407c:	eb00 0c03 	add.w	ip, r0, r3
 8014080:	4619      	mov	r1, r3
 8014082:	250a      	movs	r5, #10
 8014084:	4561      	cmp	r1, ip
 8014086:	d113      	bne.n	80140b0 <_strtod_l+0x250>
 8014088:	1819      	adds	r1, r3, r0
 801408a:	2908      	cmp	r1, #8
 801408c:	f103 0301 	add.w	r3, r3, #1
 8014090:	4403      	add	r3, r0
 8014092:	dc1b      	bgt.n	80140cc <_strtod_l+0x26c>
 8014094:	9807      	ldr	r0, [sp, #28]
 8014096:	210a      	movs	r1, #10
 8014098:	fb01 2200 	mla	r2, r1, r0, r2
 801409c:	9207      	str	r2, [sp, #28]
 801409e:	2100      	movs	r1, #0
 80140a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80140a2:	1c50      	adds	r0, r2, #1
 80140a4:	9011      	str	r0, [sp, #68]	; 0x44
 80140a6:	7852      	ldrb	r2, [r2, #1]
 80140a8:	4608      	mov	r0, r1
 80140aa:	e7cb      	b.n	8014044 <_strtod_l+0x1e4>
 80140ac:	4630      	mov	r0, r6
 80140ae:	e7d4      	b.n	801405a <_strtod_l+0x1fa>
 80140b0:	2908      	cmp	r1, #8
 80140b2:	f101 0101 	add.w	r1, r1, #1
 80140b6:	dc03      	bgt.n	80140c0 <_strtod_l+0x260>
 80140b8:	9f07      	ldr	r7, [sp, #28]
 80140ba:	436f      	muls	r7, r5
 80140bc:	9707      	str	r7, [sp, #28]
 80140be:	e7e1      	b.n	8014084 <_strtod_l+0x224>
 80140c0:	2910      	cmp	r1, #16
 80140c2:	bfde      	ittt	le
 80140c4:	9f05      	ldrle	r7, [sp, #20]
 80140c6:	436f      	mulle	r7, r5
 80140c8:	9705      	strle	r7, [sp, #20]
 80140ca:	e7db      	b.n	8014084 <_strtod_l+0x224>
 80140cc:	2b10      	cmp	r3, #16
 80140ce:	bfdf      	itttt	le
 80140d0:	9805      	ldrle	r0, [sp, #20]
 80140d2:	210a      	movle	r1, #10
 80140d4:	fb01 2200 	mlale	r2, r1, r0, r2
 80140d8:	9205      	strle	r2, [sp, #20]
 80140da:	e7e0      	b.n	801409e <_strtod_l+0x23e>
 80140dc:	f04f 0b00 	mov.w	fp, #0
 80140e0:	2101      	movs	r1, #1
 80140e2:	e77c      	b.n	8013fde <_strtod_l+0x17e>
 80140e4:	f04f 0e00 	mov.w	lr, #0
 80140e8:	f10a 0202 	add.w	r2, sl, #2
 80140ec:	9211      	str	r2, [sp, #68]	; 0x44
 80140ee:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80140f2:	e785      	b.n	8014000 <_strtod_l+0x1a0>
 80140f4:	f04f 0e01 	mov.w	lr, #1
 80140f8:	e7f6      	b.n	80140e8 <_strtod_l+0x288>
 80140fa:	bf00      	nop
 80140fc:	0801a880 	.word	0x0801a880
 8014100:	0801a871 	.word	0x0801a871
 8014104:	7ff00000 	.word	0x7ff00000
 8014108:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801410a:	1c55      	adds	r5, r2, #1
 801410c:	9511      	str	r5, [sp, #68]	; 0x44
 801410e:	7852      	ldrb	r2, [r2, #1]
 8014110:	2a30      	cmp	r2, #48	; 0x30
 8014112:	d0f9      	beq.n	8014108 <_strtod_l+0x2a8>
 8014114:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8014118:	2d08      	cmp	r5, #8
 801411a:	f63f af78 	bhi.w	801400e <_strtod_l+0x1ae>
 801411e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014122:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014124:	920a      	str	r2, [sp, #40]	; 0x28
 8014126:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014128:	1c55      	adds	r5, r2, #1
 801412a:	9511      	str	r5, [sp, #68]	; 0x44
 801412c:	7852      	ldrb	r2, [r2, #1]
 801412e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8014132:	2f09      	cmp	r7, #9
 8014134:	d937      	bls.n	80141a6 <_strtod_l+0x346>
 8014136:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014138:	1bed      	subs	r5, r5, r7
 801413a:	2d08      	cmp	r5, #8
 801413c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8014140:	dc02      	bgt.n	8014148 <_strtod_l+0x2e8>
 8014142:	4565      	cmp	r5, ip
 8014144:	bfa8      	it	ge
 8014146:	4665      	movge	r5, ip
 8014148:	f1be 0f00 	cmp.w	lr, #0
 801414c:	d000      	beq.n	8014150 <_strtod_l+0x2f0>
 801414e:	426d      	negs	r5, r5
 8014150:	2b00      	cmp	r3, #0
 8014152:	d14d      	bne.n	80141f0 <_strtod_l+0x390>
 8014154:	9b06      	ldr	r3, [sp, #24]
 8014156:	4303      	orrs	r3, r0
 8014158:	f47f aebd 	bne.w	8013ed6 <_strtod_l+0x76>
 801415c:	2900      	cmp	r1, #0
 801415e:	f47f aed6 	bne.w	8013f0e <_strtod_l+0xae>
 8014162:	2a69      	cmp	r2, #105	; 0x69
 8014164:	d027      	beq.n	80141b6 <_strtod_l+0x356>
 8014166:	dc24      	bgt.n	80141b2 <_strtod_l+0x352>
 8014168:	2a49      	cmp	r2, #73	; 0x49
 801416a:	d024      	beq.n	80141b6 <_strtod_l+0x356>
 801416c:	2a4e      	cmp	r2, #78	; 0x4e
 801416e:	f47f aece 	bne.w	8013f0e <_strtod_l+0xae>
 8014172:	4995      	ldr	r1, [pc, #596]	; (80143c8 <_strtod_l+0x568>)
 8014174:	a811      	add	r0, sp, #68	; 0x44
 8014176:	f001 fa61 	bl	801563c <__match>
 801417a:	2800      	cmp	r0, #0
 801417c:	f43f aec7 	beq.w	8013f0e <_strtod_l+0xae>
 8014180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	2b28      	cmp	r3, #40	; 0x28
 8014186:	d12d      	bne.n	80141e4 <_strtod_l+0x384>
 8014188:	4990      	ldr	r1, [pc, #576]	; (80143cc <_strtod_l+0x56c>)
 801418a:	aa14      	add	r2, sp, #80	; 0x50
 801418c:	a811      	add	r0, sp, #68	; 0x44
 801418e:	f001 fa69 	bl	8015664 <__hexnan>
 8014192:	2805      	cmp	r0, #5
 8014194:	d126      	bne.n	80141e4 <_strtod_l+0x384>
 8014196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014198:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801419c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80141a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80141a4:	e697      	b.n	8013ed6 <_strtod_l+0x76>
 80141a6:	250a      	movs	r5, #10
 80141a8:	fb05 2c0c 	mla	ip, r5, ip, r2
 80141ac:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80141b0:	e7b9      	b.n	8014126 <_strtod_l+0x2c6>
 80141b2:	2a6e      	cmp	r2, #110	; 0x6e
 80141b4:	e7db      	b.n	801416e <_strtod_l+0x30e>
 80141b6:	4986      	ldr	r1, [pc, #536]	; (80143d0 <_strtod_l+0x570>)
 80141b8:	a811      	add	r0, sp, #68	; 0x44
 80141ba:	f001 fa3f 	bl	801563c <__match>
 80141be:	2800      	cmp	r0, #0
 80141c0:	f43f aea5 	beq.w	8013f0e <_strtod_l+0xae>
 80141c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141c6:	4983      	ldr	r1, [pc, #524]	; (80143d4 <_strtod_l+0x574>)
 80141c8:	3b01      	subs	r3, #1
 80141ca:	a811      	add	r0, sp, #68	; 0x44
 80141cc:	9311      	str	r3, [sp, #68]	; 0x44
 80141ce:	f001 fa35 	bl	801563c <__match>
 80141d2:	b910      	cbnz	r0, 80141da <_strtod_l+0x37a>
 80141d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141d6:	3301      	adds	r3, #1
 80141d8:	9311      	str	r3, [sp, #68]	; 0x44
 80141da:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80143e8 <_strtod_l+0x588>
 80141de:	f04f 0800 	mov.w	r8, #0
 80141e2:	e678      	b.n	8013ed6 <_strtod_l+0x76>
 80141e4:	487c      	ldr	r0, [pc, #496]	; (80143d8 <_strtod_l+0x578>)
 80141e6:	f000 ff0f 	bl	8015008 <nan>
 80141ea:	ec59 8b10 	vmov	r8, r9, d0
 80141ee:	e672      	b.n	8013ed6 <_strtod_l+0x76>
 80141f0:	eddd 7a07 	vldr	s15, [sp, #28]
 80141f4:	eba5 020b 	sub.w	r2, r5, fp
 80141f8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80141fc:	2e00      	cmp	r6, #0
 80141fe:	bf08      	it	eq
 8014200:	461e      	moveq	r6, r3
 8014202:	2b10      	cmp	r3, #16
 8014204:	9206      	str	r2, [sp, #24]
 8014206:	461a      	mov	r2, r3
 8014208:	bfa8      	it	ge
 801420a:	2210      	movge	r2, #16
 801420c:	2b09      	cmp	r3, #9
 801420e:	ec59 8b17 	vmov	r8, r9, d7
 8014212:	dd0c      	ble.n	801422e <_strtod_l+0x3ce>
 8014214:	4971      	ldr	r1, [pc, #452]	; (80143dc <_strtod_l+0x57c>)
 8014216:	eddd 6a05 	vldr	s13, [sp, #20]
 801421a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801421e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8014222:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014226:	eea7 6b05 	vfma.f64	d6, d7, d5
 801422a:	ec59 8b16 	vmov	r8, r9, d6
 801422e:	2b0f      	cmp	r3, #15
 8014230:	dc37      	bgt.n	80142a2 <_strtod_l+0x442>
 8014232:	9906      	ldr	r1, [sp, #24]
 8014234:	2900      	cmp	r1, #0
 8014236:	f43f ae4e 	beq.w	8013ed6 <_strtod_l+0x76>
 801423a:	dd23      	ble.n	8014284 <_strtod_l+0x424>
 801423c:	2916      	cmp	r1, #22
 801423e:	dc0b      	bgt.n	8014258 <_strtod_l+0x3f8>
 8014240:	4b66      	ldr	r3, [pc, #408]	; (80143dc <_strtod_l+0x57c>)
 8014242:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8014246:	ed93 7b00 	vldr	d7, [r3]
 801424a:	ec49 8b16 	vmov	d6, r8, r9
 801424e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014252:	ec59 8b17 	vmov	r8, r9, d7
 8014256:	e63e      	b.n	8013ed6 <_strtod_l+0x76>
 8014258:	9806      	ldr	r0, [sp, #24]
 801425a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801425e:	4281      	cmp	r1, r0
 8014260:	db1f      	blt.n	80142a2 <_strtod_l+0x442>
 8014262:	4a5e      	ldr	r2, [pc, #376]	; (80143dc <_strtod_l+0x57c>)
 8014264:	f1c3 030f 	rsb	r3, r3, #15
 8014268:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801426c:	ed91 7b00 	vldr	d7, [r1]
 8014270:	ec49 8b16 	vmov	d6, r8, r9
 8014274:	1ac3      	subs	r3, r0, r3
 8014276:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801427a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801427e:	ed92 6b00 	vldr	d6, [r2]
 8014282:	e7e4      	b.n	801424e <_strtod_l+0x3ee>
 8014284:	9906      	ldr	r1, [sp, #24]
 8014286:	3116      	adds	r1, #22
 8014288:	db0b      	blt.n	80142a2 <_strtod_l+0x442>
 801428a:	4b54      	ldr	r3, [pc, #336]	; (80143dc <_strtod_l+0x57c>)
 801428c:	ebab 0505 	sub.w	r5, fp, r5
 8014290:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014294:	ed95 7b00 	vldr	d7, [r5]
 8014298:	ec49 8b16 	vmov	d6, r8, r9
 801429c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80142a0:	e7d7      	b.n	8014252 <_strtod_l+0x3f2>
 80142a2:	9906      	ldr	r1, [sp, #24]
 80142a4:	1a9a      	subs	r2, r3, r2
 80142a6:	440a      	add	r2, r1
 80142a8:	2a00      	cmp	r2, #0
 80142aa:	dd6e      	ble.n	801438a <_strtod_l+0x52a>
 80142ac:	f012 000f 	ands.w	r0, r2, #15
 80142b0:	d00a      	beq.n	80142c8 <_strtod_l+0x468>
 80142b2:	494a      	ldr	r1, [pc, #296]	; (80143dc <_strtod_l+0x57c>)
 80142b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80142b8:	ed91 7b00 	vldr	d7, [r1]
 80142bc:	ec49 8b16 	vmov	d6, r8, r9
 80142c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80142c4:	ec59 8b17 	vmov	r8, r9, d7
 80142c8:	f032 020f 	bics.w	r2, r2, #15
 80142cc:	d04e      	beq.n	801436c <_strtod_l+0x50c>
 80142ce:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80142d2:	dd22      	ble.n	801431a <_strtod_l+0x4ba>
 80142d4:	2500      	movs	r5, #0
 80142d6:	462e      	mov	r6, r5
 80142d8:	9507      	str	r5, [sp, #28]
 80142da:	462f      	mov	r7, r5
 80142dc:	2322      	movs	r3, #34	; 0x22
 80142de:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80143e8 <_strtod_l+0x588>
 80142e2:	6023      	str	r3, [r4, #0]
 80142e4:	f04f 0800 	mov.w	r8, #0
 80142e8:	9b07      	ldr	r3, [sp, #28]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f43f adf3 	beq.w	8013ed6 <_strtod_l+0x76>
 80142f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80142f2:	4620      	mov	r0, r4
 80142f4:	f001 faa4 	bl	8015840 <_Bfree>
 80142f8:	4639      	mov	r1, r7
 80142fa:	4620      	mov	r0, r4
 80142fc:	f001 faa0 	bl	8015840 <_Bfree>
 8014300:	4631      	mov	r1, r6
 8014302:	4620      	mov	r0, r4
 8014304:	f001 fa9c 	bl	8015840 <_Bfree>
 8014308:	9907      	ldr	r1, [sp, #28]
 801430a:	4620      	mov	r0, r4
 801430c:	f001 fa98 	bl	8015840 <_Bfree>
 8014310:	4629      	mov	r1, r5
 8014312:	4620      	mov	r0, r4
 8014314:	f001 fa94 	bl	8015840 <_Bfree>
 8014318:	e5dd      	b.n	8013ed6 <_strtod_l+0x76>
 801431a:	2000      	movs	r0, #0
 801431c:	ec49 8b17 	vmov	d7, r8, r9
 8014320:	4f2f      	ldr	r7, [pc, #188]	; (80143e0 <_strtod_l+0x580>)
 8014322:	1112      	asrs	r2, r2, #4
 8014324:	4601      	mov	r1, r0
 8014326:	2a01      	cmp	r2, #1
 8014328:	dc23      	bgt.n	8014372 <_strtod_l+0x512>
 801432a:	b108      	cbz	r0, 8014330 <_strtod_l+0x4d0>
 801432c:	ec59 8b17 	vmov	r8, r9, d7
 8014330:	4a2b      	ldr	r2, [pc, #172]	; (80143e0 <_strtod_l+0x580>)
 8014332:	482c      	ldr	r0, [pc, #176]	; (80143e4 <_strtod_l+0x584>)
 8014334:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014338:	ed92 7b00 	vldr	d7, [r2]
 801433c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014340:	ec49 8b16 	vmov	d6, r8, r9
 8014344:	4a28      	ldr	r2, [pc, #160]	; (80143e8 <_strtod_l+0x588>)
 8014346:	ee27 7b06 	vmul.f64	d7, d7, d6
 801434a:	ee17 1a90 	vmov	r1, s15
 801434e:	400a      	ands	r2, r1
 8014350:	4282      	cmp	r2, r0
 8014352:	ec59 8b17 	vmov	r8, r9, d7
 8014356:	d8bd      	bhi.n	80142d4 <_strtod_l+0x474>
 8014358:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801435c:	4282      	cmp	r2, r0
 801435e:	bf86      	itte	hi
 8014360:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80143ec <_strtod_l+0x58c>
 8014364:	f04f 38ff 	movhi.w	r8, #4294967295
 8014368:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801436c:	2200      	movs	r2, #0
 801436e:	9205      	str	r2, [sp, #20]
 8014370:	e076      	b.n	8014460 <_strtod_l+0x600>
 8014372:	f012 0f01 	tst.w	r2, #1
 8014376:	d004      	beq.n	8014382 <_strtod_l+0x522>
 8014378:	ed97 6b00 	vldr	d6, [r7]
 801437c:	2001      	movs	r0, #1
 801437e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014382:	3101      	adds	r1, #1
 8014384:	1052      	asrs	r2, r2, #1
 8014386:	3708      	adds	r7, #8
 8014388:	e7cd      	b.n	8014326 <_strtod_l+0x4c6>
 801438a:	d0ef      	beq.n	801436c <_strtod_l+0x50c>
 801438c:	4252      	negs	r2, r2
 801438e:	f012 000f 	ands.w	r0, r2, #15
 8014392:	d00a      	beq.n	80143aa <_strtod_l+0x54a>
 8014394:	4911      	ldr	r1, [pc, #68]	; (80143dc <_strtod_l+0x57c>)
 8014396:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801439a:	ed91 7b00 	vldr	d7, [r1]
 801439e:	ec49 8b16 	vmov	d6, r8, r9
 80143a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80143a6:	ec59 8b17 	vmov	r8, r9, d7
 80143aa:	1112      	asrs	r2, r2, #4
 80143ac:	d0de      	beq.n	801436c <_strtod_l+0x50c>
 80143ae:	2a1f      	cmp	r2, #31
 80143b0:	dd1e      	ble.n	80143f0 <_strtod_l+0x590>
 80143b2:	2500      	movs	r5, #0
 80143b4:	462e      	mov	r6, r5
 80143b6:	9507      	str	r5, [sp, #28]
 80143b8:	462f      	mov	r7, r5
 80143ba:	2322      	movs	r3, #34	; 0x22
 80143bc:	f04f 0800 	mov.w	r8, #0
 80143c0:	f04f 0900 	mov.w	r9, #0
 80143c4:	6023      	str	r3, [r4, #0]
 80143c6:	e78f      	b.n	80142e8 <_strtod_l+0x488>
 80143c8:	0801a87c 	.word	0x0801a87c
 80143cc:	0801a894 	.word	0x0801a894
 80143d0:	0801a873 	.word	0x0801a873
 80143d4:	0801a876 	.word	0x0801a876
 80143d8:	0801aa14 	.word	0x0801aa14
 80143dc:	0801ab08 	.word	0x0801ab08
 80143e0:	0801aae0 	.word	0x0801aae0
 80143e4:	7ca00000 	.word	0x7ca00000
 80143e8:	7ff00000 	.word	0x7ff00000
 80143ec:	7fefffff 	.word	0x7fefffff
 80143f0:	f012 0110 	ands.w	r1, r2, #16
 80143f4:	bf18      	it	ne
 80143f6:	216a      	movne	r1, #106	; 0x6a
 80143f8:	9105      	str	r1, [sp, #20]
 80143fa:	ec49 8b17 	vmov	d7, r8, r9
 80143fe:	49be      	ldr	r1, [pc, #760]	; (80146f8 <_strtod_l+0x898>)
 8014400:	2000      	movs	r0, #0
 8014402:	07d7      	lsls	r7, r2, #31
 8014404:	d504      	bpl.n	8014410 <_strtod_l+0x5b0>
 8014406:	ed91 6b00 	vldr	d6, [r1]
 801440a:	2001      	movs	r0, #1
 801440c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014410:	1052      	asrs	r2, r2, #1
 8014412:	f101 0108 	add.w	r1, r1, #8
 8014416:	d1f4      	bne.n	8014402 <_strtod_l+0x5a2>
 8014418:	b108      	cbz	r0, 801441e <_strtod_l+0x5be>
 801441a:	ec59 8b17 	vmov	r8, r9, d7
 801441e:	9a05      	ldr	r2, [sp, #20]
 8014420:	b1ba      	cbz	r2, 8014452 <_strtod_l+0x5f2>
 8014422:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8014426:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801442a:	2a00      	cmp	r2, #0
 801442c:	4648      	mov	r0, r9
 801442e:	dd10      	ble.n	8014452 <_strtod_l+0x5f2>
 8014430:	2a1f      	cmp	r2, #31
 8014432:	f340 812c 	ble.w	801468e <_strtod_l+0x82e>
 8014436:	2a34      	cmp	r2, #52	; 0x34
 8014438:	bfde      	ittt	le
 801443a:	f04f 32ff 	movle.w	r2, #4294967295
 801443e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8014442:	408a      	lslle	r2, r1
 8014444:	f04f 0800 	mov.w	r8, #0
 8014448:	bfcc      	ite	gt
 801444a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801444e:	ea02 0900 	andle.w	r9, r2, r0
 8014452:	ec49 8b17 	vmov	d7, r8, r9
 8014456:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445e:	d0a8      	beq.n	80143b2 <_strtod_l+0x552>
 8014460:	9a07      	ldr	r2, [sp, #28]
 8014462:	9200      	str	r2, [sp, #0]
 8014464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014466:	4632      	mov	r2, r6
 8014468:	4620      	mov	r0, r4
 801446a:	f001 fa51 	bl	8015910 <__s2b>
 801446e:	9007      	str	r0, [sp, #28]
 8014470:	2800      	cmp	r0, #0
 8014472:	f43f af2f 	beq.w	80142d4 <_strtod_l+0x474>
 8014476:	9a06      	ldr	r2, [sp, #24]
 8014478:	2a00      	cmp	r2, #0
 801447a:	ebab 0305 	sub.w	r3, fp, r5
 801447e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80146d8 <_strtod_l+0x878>
 8014482:	bfa8      	it	ge
 8014484:	2300      	movge	r3, #0
 8014486:	ed9f ab96 	vldr	d10, [pc, #600]	; 80146e0 <_strtod_l+0x880>
 801448a:	ed9f bb97 	vldr	d11, [pc, #604]	; 80146e8 <_strtod_l+0x888>
 801448e:	9309      	str	r3, [sp, #36]	; 0x24
 8014490:	2500      	movs	r5, #0
 8014492:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014496:	930c      	str	r3, [sp, #48]	; 0x30
 8014498:	462e      	mov	r6, r5
 801449a:	9b07      	ldr	r3, [sp, #28]
 801449c:	4620      	mov	r0, r4
 801449e:	6859      	ldr	r1, [r3, #4]
 80144a0:	f001 f98e 	bl	80157c0 <_Balloc>
 80144a4:	4607      	mov	r7, r0
 80144a6:	2800      	cmp	r0, #0
 80144a8:	f43f af18 	beq.w	80142dc <_strtod_l+0x47c>
 80144ac:	9b07      	ldr	r3, [sp, #28]
 80144ae:	691a      	ldr	r2, [r3, #16]
 80144b0:	3202      	adds	r2, #2
 80144b2:	f103 010c 	add.w	r1, r3, #12
 80144b6:	0092      	lsls	r2, r2, #2
 80144b8:	300c      	adds	r0, #12
 80144ba:	f000 fd96 	bl	8014fea <memcpy>
 80144be:	ec49 8b10 	vmov	d0, r8, r9
 80144c2:	aa14      	add	r2, sp, #80	; 0x50
 80144c4:	a913      	add	r1, sp, #76	; 0x4c
 80144c6:	4620      	mov	r0, r4
 80144c8:	f001 fd56 	bl	8015f78 <__d2b>
 80144cc:	ec49 8b18 	vmov	d8, r8, r9
 80144d0:	9012      	str	r0, [sp, #72]	; 0x48
 80144d2:	2800      	cmp	r0, #0
 80144d4:	f43f af02 	beq.w	80142dc <_strtod_l+0x47c>
 80144d8:	2101      	movs	r1, #1
 80144da:	4620      	mov	r0, r4
 80144dc:	f001 fab0 	bl	8015a40 <__i2b>
 80144e0:	4606      	mov	r6, r0
 80144e2:	2800      	cmp	r0, #0
 80144e4:	f43f aefa 	beq.w	80142dc <_strtod_l+0x47c>
 80144e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	bfab      	itete	ge
 80144f0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80144f2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80144f4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80144f8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80144fc:	bfac      	ite	ge
 80144fe:	eb03 0b02 	addge.w	fp, r3, r2
 8014502:	eba2 0a03 	sublt.w	sl, r2, r3
 8014506:	9a05      	ldr	r2, [sp, #20]
 8014508:	1a9b      	subs	r3, r3, r2
 801450a:	440b      	add	r3, r1
 801450c:	4a7b      	ldr	r2, [pc, #492]	; (80146fc <_strtod_l+0x89c>)
 801450e:	3b01      	subs	r3, #1
 8014510:	4293      	cmp	r3, r2
 8014512:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8014516:	f280 80cd 	bge.w	80146b4 <_strtod_l+0x854>
 801451a:	1ad2      	subs	r2, r2, r3
 801451c:	2a1f      	cmp	r2, #31
 801451e:	eba1 0102 	sub.w	r1, r1, r2
 8014522:	f04f 0001 	mov.w	r0, #1
 8014526:	f300 80b9 	bgt.w	801469c <_strtod_l+0x83c>
 801452a:	fa00 f302 	lsl.w	r3, r0, r2
 801452e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014530:	2300      	movs	r3, #0
 8014532:	930a      	str	r3, [sp, #40]	; 0x28
 8014534:	eb0b 0301 	add.w	r3, fp, r1
 8014538:	9a05      	ldr	r2, [sp, #20]
 801453a:	459b      	cmp	fp, r3
 801453c:	448a      	add	sl, r1
 801453e:	4492      	add	sl, r2
 8014540:	465a      	mov	r2, fp
 8014542:	bfa8      	it	ge
 8014544:	461a      	movge	r2, r3
 8014546:	4552      	cmp	r2, sl
 8014548:	bfa8      	it	ge
 801454a:	4652      	movge	r2, sl
 801454c:	2a00      	cmp	r2, #0
 801454e:	bfc2      	ittt	gt
 8014550:	1a9b      	subgt	r3, r3, r2
 8014552:	ebaa 0a02 	subgt.w	sl, sl, r2
 8014556:	ebab 0b02 	subgt.w	fp, fp, r2
 801455a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801455c:	2a00      	cmp	r2, #0
 801455e:	dd18      	ble.n	8014592 <_strtod_l+0x732>
 8014560:	4631      	mov	r1, r6
 8014562:	4620      	mov	r0, r4
 8014564:	930f      	str	r3, [sp, #60]	; 0x3c
 8014566:	f001 fb2b 	bl	8015bc0 <__pow5mult>
 801456a:	4606      	mov	r6, r0
 801456c:	2800      	cmp	r0, #0
 801456e:	f43f aeb5 	beq.w	80142dc <_strtod_l+0x47c>
 8014572:	4601      	mov	r1, r0
 8014574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014576:	4620      	mov	r0, r4
 8014578:	f001 fa78 	bl	8015a6c <__multiply>
 801457c:	900e      	str	r0, [sp, #56]	; 0x38
 801457e:	2800      	cmp	r0, #0
 8014580:	f43f aeac 	beq.w	80142dc <_strtod_l+0x47c>
 8014584:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014586:	4620      	mov	r0, r4
 8014588:	f001 f95a 	bl	8015840 <_Bfree>
 801458c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801458e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014590:	9212      	str	r2, [sp, #72]	; 0x48
 8014592:	2b00      	cmp	r3, #0
 8014594:	f300 8093 	bgt.w	80146be <_strtod_l+0x85e>
 8014598:	9b06      	ldr	r3, [sp, #24]
 801459a:	2b00      	cmp	r3, #0
 801459c:	dd08      	ble.n	80145b0 <_strtod_l+0x750>
 801459e:	4639      	mov	r1, r7
 80145a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145a2:	4620      	mov	r0, r4
 80145a4:	f001 fb0c 	bl	8015bc0 <__pow5mult>
 80145a8:	4607      	mov	r7, r0
 80145aa:	2800      	cmp	r0, #0
 80145ac:	f43f ae96 	beq.w	80142dc <_strtod_l+0x47c>
 80145b0:	f1ba 0f00 	cmp.w	sl, #0
 80145b4:	dd08      	ble.n	80145c8 <_strtod_l+0x768>
 80145b6:	4639      	mov	r1, r7
 80145b8:	4652      	mov	r2, sl
 80145ba:	4620      	mov	r0, r4
 80145bc:	f001 fb5a 	bl	8015c74 <__lshift>
 80145c0:	4607      	mov	r7, r0
 80145c2:	2800      	cmp	r0, #0
 80145c4:	f43f ae8a 	beq.w	80142dc <_strtod_l+0x47c>
 80145c8:	f1bb 0f00 	cmp.w	fp, #0
 80145cc:	dd08      	ble.n	80145e0 <_strtod_l+0x780>
 80145ce:	4631      	mov	r1, r6
 80145d0:	465a      	mov	r2, fp
 80145d2:	4620      	mov	r0, r4
 80145d4:	f001 fb4e 	bl	8015c74 <__lshift>
 80145d8:	4606      	mov	r6, r0
 80145da:	2800      	cmp	r0, #0
 80145dc:	f43f ae7e 	beq.w	80142dc <_strtod_l+0x47c>
 80145e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80145e2:	463a      	mov	r2, r7
 80145e4:	4620      	mov	r0, r4
 80145e6:	f001 fbcd 	bl	8015d84 <__mdiff>
 80145ea:	4605      	mov	r5, r0
 80145ec:	2800      	cmp	r0, #0
 80145ee:	f43f ae75 	beq.w	80142dc <_strtod_l+0x47c>
 80145f2:	2300      	movs	r3, #0
 80145f4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80145f8:	60c3      	str	r3, [r0, #12]
 80145fa:	4631      	mov	r1, r6
 80145fc:	f001 fba6 	bl	8015d4c <__mcmp>
 8014600:	2800      	cmp	r0, #0
 8014602:	da7f      	bge.n	8014704 <_strtod_l+0x8a4>
 8014604:	ea5a 0a08 	orrs.w	sl, sl, r8
 8014608:	f040 80a5 	bne.w	8014756 <_strtod_l+0x8f6>
 801460c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014610:	2b00      	cmp	r3, #0
 8014612:	f040 80a0 	bne.w	8014756 <_strtod_l+0x8f6>
 8014616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801461a:	0d1b      	lsrs	r3, r3, #20
 801461c:	051b      	lsls	r3, r3, #20
 801461e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014622:	f240 8098 	bls.w	8014756 <_strtod_l+0x8f6>
 8014626:	696b      	ldr	r3, [r5, #20]
 8014628:	b91b      	cbnz	r3, 8014632 <_strtod_l+0x7d2>
 801462a:	692b      	ldr	r3, [r5, #16]
 801462c:	2b01      	cmp	r3, #1
 801462e:	f340 8092 	ble.w	8014756 <_strtod_l+0x8f6>
 8014632:	4629      	mov	r1, r5
 8014634:	2201      	movs	r2, #1
 8014636:	4620      	mov	r0, r4
 8014638:	f001 fb1c 	bl	8015c74 <__lshift>
 801463c:	4631      	mov	r1, r6
 801463e:	4605      	mov	r5, r0
 8014640:	f001 fb84 	bl	8015d4c <__mcmp>
 8014644:	2800      	cmp	r0, #0
 8014646:	f340 8086 	ble.w	8014756 <_strtod_l+0x8f6>
 801464a:	9905      	ldr	r1, [sp, #20]
 801464c:	4a2c      	ldr	r2, [pc, #176]	; (8014700 <_strtod_l+0x8a0>)
 801464e:	464b      	mov	r3, r9
 8014650:	2900      	cmp	r1, #0
 8014652:	f000 809f 	beq.w	8014794 <_strtod_l+0x934>
 8014656:	ea02 0109 	and.w	r1, r2, r9
 801465a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801465e:	f300 8099 	bgt.w	8014794 <_strtod_l+0x934>
 8014662:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014666:	f77f aea8 	ble.w	80143ba <_strtod_l+0x55a>
 801466a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80146f0 <_strtod_l+0x890>
 801466e:	ec49 8b16 	vmov	d6, r8, r9
 8014672:	4b23      	ldr	r3, [pc, #140]	; (8014700 <_strtod_l+0x8a0>)
 8014674:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014678:	ee17 2a90 	vmov	r2, s15
 801467c:	4013      	ands	r3, r2
 801467e:	ec59 8b17 	vmov	r8, r9, d7
 8014682:	2b00      	cmp	r3, #0
 8014684:	f47f ae34 	bne.w	80142f0 <_strtod_l+0x490>
 8014688:	2322      	movs	r3, #34	; 0x22
 801468a:	6023      	str	r3, [r4, #0]
 801468c:	e630      	b.n	80142f0 <_strtod_l+0x490>
 801468e:	f04f 31ff 	mov.w	r1, #4294967295
 8014692:	fa01 f202 	lsl.w	r2, r1, r2
 8014696:	ea02 0808 	and.w	r8, r2, r8
 801469a:	e6da      	b.n	8014452 <_strtod_l+0x5f2>
 801469c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80146a0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80146a4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80146a8:	33e2      	adds	r3, #226	; 0xe2
 80146aa:	fa00 f303 	lsl.w	r3, r0, r3
 80146ae:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80146b2:	e73f      	b.n	8014534 <_strtod_l+0x6d4>
 80146b4:	2200      	movs	r2, #0
 80146b6:	2301      	movs	r3, #1
 80146b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80146bc:	e73a      	b.n	8014534 <_strtod_l+0x6d4>
 80146be:	9912      	ldr	r1, [sp, #72]	; 0x48
 80146c0:	461a      	mov	r2, r3
 80146c2:	4620      	mov	r0, r4
 80146c4:	f001 fad6 	bl	8015c74 <__lshift>
 80146c8:	9012      	str	r0, [sp, #72]	; 0x48
 80146ca:	2800      	cmp	r0, #0
 80146cc:	f47f af64 	bne.w	8014598 <_strtod_l+0x738>
 80146d0:	e604      	b.n	80142dc <_strtod_l+0x47c>
 80146d2:	bf00      	nop
 80146d4:	f3af 8000 	nop.w
 80146d8:	94a03595 	.word	0x94a03595
 80146dc:	3fcfffff 	.word	0x3fcfffff
 80146e0:	94a03595 	.word	0x94a03595
 80146e4:	3fdfffff 	.word	0x3fdfffff
 80146e8:	35afe535 	.word	0x35afe535
 80146ec:	3fe00000 	.word	0x3fe00000
 80146f0:	00000000 	.word	0x00000000
 80146f4:	39500000 	.word	0x39500000
 80146f8:	0801a8a8 	.word	0x0801a8a8
 80146fc:	fffffc02 	.word	0xfffffc02
 8014700:	7ff00000 	.word	0x7ff00000
 8014704:	46cb      	mov	fp, r9
 8014706:	d15f      	bne.n	80147c8 <_strtod_l+0x968>
 8014708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801470c:	f1ba 0f00 	cmp.w	sl, #0
 8014710:	d02a      	beq.n	8014768 <_strtod_l+0x908>
 8014712:	4aa7      	ldr	r2, [pc, #668]	; (80149b0 <_strtod_l+0xb50>)
 8014714:	4293      	cmp	r3, r2
 8014716:	d12b      	bne.n	8014770 <_strtod_l+0x910>
 8014718:	9b05      	ldr	r3, [sp, #20]
 801471a:	4642      	mov	r2, r8
 801471c:	b1fb      	cbz	r3, 801475e <_strtod_l+0x8fe>
 801471e:	4ba5      	ldr	r3, [pc, #660]	; (80149b4 <_strtod_l+0xb54>)
 8014720:	ea09 0303 	and.w	r3, r9, r3
 8014724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014728:	f04f 31ff 	mov.w	r1, #4294967295
 801472c:	d81a      	bhi.n	8014764 <_strtod_l+0x904>
 801472e:	0d1b      	lsrs	r3, r3, #20
 8014730:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014734:	fa01 f303 	lsl.w	r3, r1, r3
 8014738:	429a      	cmp	r2, r3
 801473a:	d119      	bne.n	8014770 <_strtod_l+0x910>
 801473c:	4b9e      	ldr	r3, [pc, #632]	; (80149b8 <_strtod_l+0xb58>)
 801473e:	459b      	cmp	fp, r3
 8014740:	d102      	bne.n	8014748 <_strtod_l+0x8e8>
 8014742:	3201      	adds	r2, #1
 8014744:	f43f adca 	beq.w	80142dc <_strtod_l+0x47c>
 8014748:	4b9a      	ldr	r3, [pc, #616]	; (80149b4 <_strtod_l+0xb54>)
 801474a:	ea0b 0303 	and.w	r3, fp, r3
 801474e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014752:	f04f 0800 	mov.w	r8, #0
 8014756:	9b05      	ldr	r3, [sp, #20]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d186      	bne.n	801466a <_strtod_l+0x80a>
 801475c:	e5c8      	b.n	80142f0 <_strtod_l+0x490>
 801475e:	f04f 33ff 	mov.w	r3, #4294967295
 8014762:	e7e9      	b.n	8014738 <_strtod_l+0x8d8>
 8014764:	460b      	mov	r3, r1
 8014766:	e7e7      	b.n	8014738 <_strtod_l+0x8d8>
 8014768:	ea53 0308 	orrs.w	r3, r3, r8
 801476c:	f43f af6d 	beq.w	801464a <_strtod_l+0x7ea>
 8014770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014772:	b1cb      	cbz	r3, 80147a8 <_strtod_l+0x948>
 8014774:	ea13 0f0b 	tst.w	r3, fp
 8014778:	d0ed      	beq.n	8014756 <_strtod_l+0x8f6>
 801477a:	9a05      	ldr	r2, [sp, #20]
 801477c:	4640      	mov	r0, r8
 801477e:	4649      	mov	r1, r9
 8014780:	f1ba 0f00 	cmp.w	sl, #0
 8014784:	d014      	beq.n	80147b0 <_strtod_l+0x950>
 8014786:	f7ff fb4e 	bl	8013e26 <sulp>
 801478a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801478e:	ec59 8b17 	vmov	r8, r9, d7
 8014792:	e7e0      	b.n	8014756 <_strtod_l+0x8f6>
 8014794:	4013      	ands	r3, r2
 8014796:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801479a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801479e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80147a2:	f04f 38ff 	mov.w	r8, #4294967295
 80147a6:	e7d6      	b.n	8014756 <_strtod_l+0x8f6>
 80147a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147aa:	ea13 0f08 	tst.w	r3, r8
 80147ae:	e7e3      	b.n	8014778 <_strtod_l+0x918>
 80147b0:	f7ff fb39 	bl	8013e26 <sulp>
 80147b4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80147b8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80147bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c0:	ec59 8b10 	vmov	r8, r9, d0
 80147c4:	d1c7      	bne.n	8014756 <_strtod_l+0x8f6>
 80147c6:	e5f8      	b.n	80143ba <_strtod_l+0x55a>
 80147c8:	4631      	mov	r1, r6
 80147ca:	4628      	mov	r0, r5
 80147cc:	f001 fc2e 	bl	801602c <__ratio>
 80147d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80147d4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80147d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147dc:	d85f      	bhi.n	801489e <_strtod_l+0xa3e>
 80147de:	f1ba 0f00 	cmp.w	sl, #0
 80147e2:	d166      	bne.n	80148b2 <_strtod_l+0xa52>
 80147e4:	f1b8 0f00 	cmp.w	r8, #0
 80147e8:	d14d      	bne.n	8014886 <_strtod_l+0xa26>
 80147ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80147ee:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d162      	bne.n	80148bc <_strtod_l+0xa5c>
 80147f6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80147fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80147fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014802:	d401      	bmi.n	8014808 <_strtod_l+0x9a8>
 8014804:	ee20 db0d 	vmul.f64	d13, d0, d13
 8014808:	eeb1 cb4d 	vneg.f64	d12, d13
 801480c:	4869      	ldr	r0, [pc, #420]	; (80149b4 <_strtod_l+0xb54>)
 801480e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80149c0 <_strtod_l+0xb60>
 8014812:	ea0b 0100 	and.w	r1, fp, r0
 8014816:	4561      	cmp	r1, ip
 8014818:	ec53 2b1c 	vmov	r2, r3, d12
 801481c:	d17a      	bne.n	8014914 <_strtod_l+0xab4>
 801481e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8014822:	ec49 8b10 	vmov	d0, r8, r9
 8014826:	910a      	str	r1, [sp, #40]	; 0x28
 8014828:	f001 fb36 	bl	8015e98 <__ulp>
 801482c:	ec49 8b1e 	vmov	d14, r8, r9
 8014830:	4860      	ldr	r0, [pc, #384]	; (80149b4 <_strtod_l+0xb54>)
 8014832:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8014836:	ee1e 3a90 	vmov	r3, s29
 801483a:	4a60      	ldr	r2, [pc, #384]	; (80149bc <_strtod_l+0xb5c>)
 801483c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801483e:	4018      	ands	r0, r3
 8014840:	4290      	cmp	r0, r2
 8014842:	ec59 8b1e 	vmov	r8, r9, d14
 8014846:	d93c      	bls.n	80148c2 <_strtod_l+0xa62>
 8014848:	ee18 2a90 	vmov	r2, s17
 801484c:	4b5a      	ldr	r3, [pc, #360]	; (80149b8 <_strtod_l+0xb58>)
 801484e:	429a      	cmp	r2, r3
 8014850:	d104      	bne.n	801485c <_strtod_l+0x9fc>
 8014852:	ee18 3a10 	vmov	r3, s16
 8014856:	3301      	adds	r3, #1
 8014858:	f43f ad40 	beq.w	80142dc <_strtod_l+0x47c>
 801485c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80149b8 <_strtod_l+0xb58>
 8014860:	f04f 38ff 	mov.w	r8, #4294967295
 8014864:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014866:	4620      	mov	r0, r4
 8014868:	f000 ffea 	bl	8015840 <_Bfree>
 801486c:	4639      	mov	r1, r7
 801486e:	4620      	mov	r0, r4
 8014870:	f000 ffe6 	bl	8015840 <_Bfree>
 8014874:	4631      	mov	r1, r6
 8014876:	4620      	mov	r0, r4
 8014878:	f000 ffe2 	bl	8015840 <_Bfree>
 801487c:	4629      	mov	r1, r5
 801487e:	4620      	mov	r0, r4
 8014880:	f000 ffde 	bl	8015840 <_Bfree>
 8014884:	e609      	b.n	801449a <_strtod_l+0x63a>
 8014886:	f1b8 0f01 	cmp.w	r8, #1
 801488a:	d103      	bne.n	8014894 <_strtod_l+0xa34>
 801488c:	f1b9 0f00 	cmp.w	r9, #0
 8014890:	f43f ad93 	beq.w	80143ba <_strtod_l+0x55a>
 8014894:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8014898:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801489c:	e7b6      	b.n	801480c <_strtod_l+0x9ac>
 801489e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80148a2:	ee20 db0d 	vmul.f64	d13, d0, d13
 80148a6:	f1ba 0f00 	cmp.w	sl, #0
 80148aa:	d0ad      	beq.n	8014808 <_strtod_l+0x9a8>
 80148ac:	eeb0 cb4d 	vmov.f64	d12, d13
 80148b0:	e7ac      	b.n	801480c <_strtod_l+0x9ac>
 80148b2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80148b6:	eeb0 db4c 	vmov.f64	d13, d12
 80148ba:	e7a7      	b.n	801480c <_strtod_l+0x9ac>
 80148bc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80148c0:	e7a4      	b.n	801480c <_strtod_l+0x9ac>
 80148c2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80148c6:	9b05      	ldr	r3, [sp, #20]
 80148c8:	46cb      	mov	fp, r9
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d1ca      	bne.n	8014864 <_strtod_l+0xa04>
 80148ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80148d2:	0d1b      	lsrs	r3, r3, #20
 80148d4:	051b      	lsls	r3, r3, #20
 80148d6:	4299      	cmp	r1, r3
 80148d8:	d1c4      	bne.n	8014864 <_strtod_l+0xa04>
 80148da:	ec51 0b1d 	vmov	r0, r1, d13
 80148de:	f7eb ff23 	bl	8000728 <__aeabi_d2lz>
 80148e2:	f7eb fef3 	bl	80006cc <__aeabi_l2d>
 80148e6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80148ea:	ec41 0b17 	vmov	d7, r0, r1
 80148ee:	ea4b 0b08 	orr.w	fp, fp, r8
 80148f2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80148f6:	ee3d db47 	vsub.f64	d13, d13, d7
 80148fa:	d03c      	beq.n	8014976 <_strtod_l+0xb16>
 80148fc:	eeb4 dbca 	vcmpe.f64	d13, d10
 8014900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014904:	f53f acf4 	bmi.w	80142f0 <_strtod_l+0x490>
 8014908:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014910:	dda8      	ble.n	8014864 <_strtod_l+0xa04>
 8014912:	e4ed      	b.n	80142f0 <_strtod_l+0x490>
 8014914:	9805      	ldr	r0, [sp, #20]
 8014916:	b1f0      	cbz	r0, 8014956 <_strtod_l+0xaf6>
 8014918:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801491c:	d81b      	bhi.n	8014956 <_strtod_l+0xaf6>
 801491e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80149a8 <_strtod_l+0xb48>
 8014922:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8014926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492a:	d811      	bhi.n	8014950 <_strtod_l+0xaf0>
 801492c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8014930:	ee1d 3a10 	vmov	r3, s26
 8014934:	2b01      	cmp	r3, #1
 8014936:	bf38      	it	cc
 8014938:	2301      	movcc	r3, #1
 801493a:	ee0d 3a10 	vmov	s26, r3
 801493e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8014942:	f1ba 0f00 	cmp.w	sl, #0
 8014946:	d113      	bne.n	8014970 <_strtod_l+0xb10>
 8014948:	eeb1 7b4d 	vneg.f64	d7, d13
 801494c:	ec53 2b17 	vmov	r2, r3, d7
 8014950:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8014954:	1a43      	subs	r3, r0, r1
 8014956:	eeb0 0b48 	vmov.f64	d0, d8
 801495a:	ec43 2b1c 	vmov	d12, r2, r3
 801495e:	910a      	str	r1, [sp, #40]	; 0x28
 8014960:	f001 fa9a 	bl	8015e98 <__ulp>
 8014964:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014966:	eeac 8b00 	vfma.f64	d8, d12, d0
 801496a:	ec59 8b18 	vmov	r8, r9, d8
 801496e:	e7aa      	b.n	80148c6 <_strtod_l+0xa66>
 8014970:	eeb0 7b4d 	vmov.f64	d7, d13
 8014974:	e7ea      	b.n	801494c <_strtod_l+0xaec>
 8014976:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497e:	f57f af71 	bpl.w	8014864 <_strtod_l+0xa04>
 8014982:	e4b5      	b.n	80142f0 <_strtod_l+0x490>
 8014984:	2300      	movs	r3, #0
 8014986:	9308      	str	r3, [sp, #32]
 8014988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801498a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801498c:	6013      	str	r3, [r2, #0]
 801498e:	f7ff baa6 	b.w	8013ede <_strtod_l+0x7e>
 8014992:	2a65      	cmp	r2, #101	; 0x65
 8014994:	f43f aba2 	beq.w	80140dc <_strtod_l+0x27c>
 8014998:	2a45      	cmp	r2, #69	; 0x45
 801499a:	f43f ab9f 	beq.w	80140dc <_strtod_l+0x27c>
 801499e:	2101      	movs	r1, #1
 80149a0:	f7ff bbd8 	b.w	8014154 <_strtod_l+0x2f4>
 80149a4:	f3af 8000 	nop.w
 80149a8:	ffc00000 	.word	0xffc00000
 80149ac:	41dfffff 	.word	0x41dfffff
 80149b0:	000fffff 	.word	0x000fffff
 80149b4:	7ff00000 	.word	0x7ff00000
 80149b8:	7fefffff 	.word	0x7fefffff
 80149bc:	7c9fffff 	.word	0x7c9fffff
 80149c0:	7fe00000 	.word	0x7fe00000

080149c4 <strtod>:
 80149c4:	460a      	mov	r2, r1
 80149c6:	4601      	mov	r1, r0
 80149c8:	4802      	ldr	r0, [pc, #8]	; (80149d4 <strtod+0x10>)
 80149ca:	4b03      	ldr	r3, [pc, #12]	; (80149d8 <strtod+0x14>)
 80149cc:	6800      	ldr	r0, [r0, #0]
 80149ce:	f7ff ba47 	b.w	8013e60 <_strtod_l>
 80149d2:	bf00      	nop
 80149d4:	2400024c 	.word	0x2400024c
 80149d8:	24000094 	.word	0x24000094

080149dc <_strtol_l.constprop.0>:
 80149dc:	2b01      	cmp	r3, #1
 80149de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149e2:	d001      	beq.n	80149e8 <_strtol_l.constprop.0+0xc>
 80149e4:	2b24      	cmp	r3, #36	; 0x24
 80149e6:	d906      	bls.n	80149f6 <_strtol_l.constprop.0+0x1a>
 80149e8:	f000 fad2 	bl	8014f90 <__errno>
 80149ec:	2316      	movs	r3, #22
 80149ee:	6003      	str	r3, [r0, #0]
 80149f0:	2000      	movs	r0, #0
 80149f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014adc <_strtol_l.constprop.0+0x100>
 80149fa:	460d      	mov	r5, r1
 80149fc:	462e      	mov	r6, r5
 80149fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a02:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014a06:	f017 0708 	ands.w	r7, r7, #8
 8014a0a:	d1f7      	bne.n	80149fc <_strtol_l.constprop.0+0x20>
 8014a0c:	2c2d      	cmp	r4, #45	; 0x2d
 8014a0e:	d132      	bne.n	8014a76 <_strtol_l.constprop.0+0x9a>
 8014a10:	782c      	ldrb	r4, [r5, #0]
 8014a12:	2701      	movs	r7, #1
 8014a14:	1cb5      	adds	r5, r6, #2
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d05b      	beq.n	8014ad2 <_strtol_l.constprop.0+0xf6>
 8014a1a:	2b10      	cmp	r3, #16
 8014a1c:	d109      	bne.n	8014a32 <_strtol_l.constprop.0+0x56>
 8014a1e:	2c30      	cmp	r4, #48	; 0x30
 8014a20:	d107      	bne.n	8014a32 <_strtol_l.constprop.0+0x56>
 8014a22:	782c      	ldrb	r4, [r5, #0]
 8014a24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014a28:	2c58      	cmp	r4, #88	; 0x58
 8014a2a:	d14d      	bne.n	8014ac8 <_strtol_l.constprop.0+0xec>
 8014a2c:	786c      	ldrb	r4, [r5, #1]
 8014a2e:	2310      	movs	r3, #16
 8014a30:	3502      	adds	r5, #2
 8014a32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014a36:	f108 38ff 	add.w	r8, r8, #4294967295
 8014a3a:	f04f 0e00 	mov.w	lr, #0
 8014a3e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014a42:	4676      	mov	r6, lr
 8014a44:	fb03 8a19 	mls	sl, r3, r9, r8
 8014a48:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014a4c:	f1bc 0f09 	cmp.w	ip, #9
 8014a50:	d816      	bhi.n	8014a80 <_strtol_l.constprop.0+0xa4>
 8014a52:	4664      	mov	r4, ip
 8014a54:	42a3      	cmp	r3, r4
 8014a56:	dd24      	ble.n	8014aa2 <_strtol_l.constprop.0+0xc6>
 8014a58:	f1be 3fff 	cmp.w	lr, #4294967295
 8014a5c:	d008      	beq.n	8014a70 <_strtol_l.constprop.0+0x94>
 8014a5e:	45b1      	cmp	r9, r6
 8014a60:	d31c      	bcc.n	8014a9c <_strtol_l.constprop.0+0xc0>
 8014a62:	d101      	bne.n	8014a68 <_strtol_l.constprop.0+0x8c>
 8014a64:	45a2      	cmp	sl, r4
 8014a66:	db19      	blt.n	8014a9c <_strtol_l.constprop.0+0xc0>
 8014a68:	fb06 4603 	mla	r6, r6, r3, r4
 8014a6c:	f04f 0e01 	mov.w	lr, #1
 8014a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a74:	e7e8      	b.n	8014a48 <_strtol_l.constprop.0+0x6c>
 8014a76:	2c2b      	cmp	r4, #43	; 0x2b
 8014a78:	bf04      	itt	eq
 8014a7a:	782c      	ldrbeq	r4, [r5, #0]
 8014a7c:	1cb5      	addeq	r5, r6, #2
 8014a7e:	e7ca      	b.n	8014a16 <_strtol_l.constprop.0+0x3a>
 8014a80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014a84:	f1bc 0f19 	cmp.w	ip, #25
 8014a88:	d801      	bhi.n	8014a8e <_strtol_l.constprop.0+0xb2>
 8014a8a:	3c37      	subs	r4, #55	; 0x37
 8014a8c:	e7e2      	b.n	8014a54 <_strtol_l.constprop.0+0x78>
 8014a8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014a92:	f1bc 0f19 	cmp.w	ip, #25
 8014a96:	d804      	bhi.n	8014aa2 <_strtol_l.constprop.0+0xc6>
 8014a98:	3c57      	subs	r4, #87	; 0x57
 8014a9a:	e7db      	b.n	8014a54 <_strtol_l.constprop.0+0x78>
 8014a9c:	f04f 3eff 	mov.w	lr, #4294967295
 8014aa0:	e7e6      	b.n	8014a70 <_strtol_l.constprop.0+0x94>
 8014aa2:	f1be 3fff 	cmp.w	lr, #4294967295
 8014aa6:	d105      	bne.n	8014ab4 <_strtol_l.constprop.0+0xd8>
 8014aa8:	2322      	movs	r3, #34	; 0x22
 8014aaa:	6003      	str	r3, [r0, #0]
 8014aac:	4646      	mov	r6, r8
 8014aae:	b942      	cbnz	r2, 8014ac2 <_strtol_l.constprop.0+0xe6>
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	e79e      	b.n	80149f2 <_strtol_l.constprop.0+0x16>
 8014ab4:	b107      	cbz	r7, 8014ab8 <_strtol_l.constprop.0+0xdc>
 8014ab6:	4276      	negs	r6, r6
 8014ab8:	2a00      	cmp	r2, #0
 8014aba:	d0f9      	beq.n	8014ab0 <_strtol_l.constprop.0+0xd4>
 8014abc:	f1be 0f00 	cmp.w	lr, #0
 8014ac0:	d000      	beq.n	8014ac4 <_strtol_l.constprop.0+0xe8>
 8014ac2:	1e69      	subs	r1, r5, #1
 8014ac4:	6011      	str	r1, [r2, #0]
 8014ac6:	e7f3      	b.n	8014ab0 <_strtol_l.constprop.0+0xd4>
 8014ac8:	2430      	movs	r4, #48	; 0x30
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1b1      	bne.n	8014a32 <_strtol_l.constprop.0+0x56>
 8014ace:	2308      	movs	r3, #8
 8014ad0:	e7af      	b.n	8014a32 <_strtol_l.constprop.0+0x56>
 8014ad2:	2c30      	cmp	r4, #48	; 0x30
 8014ad4:	d0a5      	beq.n	8014a22 <_strtol_l.constprop.0+0x46>
 8014ad6:	230a      	movs	r3, #10
 8014ad8:	e7ab      	b.n	8014a32 <_strtol_l.constprop.0+0x56>
 8014ada:	bf00      	nop
 8014adc:	0801a8d1 	.word	0x0801a8d1

08014ae0 <_strtol_r>:
 8014ae0:	f7ff bf7c 	b.w	80149dc <_strtol_l.constprop.0>

08014ae4 <std>:
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	b510      	push	{r4, lr}
 8014ae8:	4604      	mov	r4, r0
 8014aea:	e9c0 3300 	strd	r3, r3, [r0]
 8014aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014af2:	6083      	str	r3, [r0, #8]
 8014af4:	8181      	strh	r1, [r0, #12]
 8014af6:	6643      	str	r3, [r0, #100]	; 0x64
 8014af8:	81c2      	strh	r2, [r0, #14]
 8014afa:	6183      	str	r3, [r0, #24]
 8014afc:	4619      	mov	r1, r3
 8014afe:	2208      	movs	r2, #8
 8014b00:	305c      	adds	r0, #92	; 0x5c
 8014b02:	f000 f97e 	bl	8014e02 <memset>
 8014b06:	4b0d      	ldr	r3, [pc, #52]	; (8014b3c <std+0x58>)
 8014b08:	6263      	str	r3, [r4, #36]	; 0x24
 8014b0a:	4b0d      	ldr	r3, [pc, #52]	; (8014b40 <std+0x5c>)
 8014b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b0e:	4b0d      	ldr	r3, [pc, #52]	; (8014b44 <std+0x60>)
 8014b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b12:	4b0d      	ldr	r3, [pc, #52]	; (8014b48 <std+0x64>)
 8014b14:	6323      	str	r3, [r4, #48]	; 0x30
 8014b16:	4b0d      	ldr	r3, [pc, #52]	; (8014b4c <std+0x68>)
 8014b18:	6224      	str	r4, [r4, #32]
 8014b1a:	429c      	cmp	r4, r3
 8014b1c:	d006      	beq.n	8014b2c <std+0x48>
 8014b1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014b22:	4294      	cmp	r4, r2
 8014b24:	d002      	beq.n	8014b2c <std+0x48>
 8014b26:	33d0      	adds	r3, #208	; 0xd0
 8014b28:	429c      	cmp	r4, r3
 8014b2a:	d105      	bne.n	8014b38 <std+0x54>
 8014b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b34:	f000 ba56 	b.w	8014fe4 <__retarget_lock_init_recursive>
 8014b38:	bd10      	pop	{r4, pc}
 8014b3a:	bf00      	nop
 8014b3c:	08014d25 	.word	0x08014d25
 8014b40:	08014d4b 	.word	0x08014d4b
 8014b44:	08014d83 	.word	0x08014d83
 8014b48:	08014da7 	.word	0x08014da7
 8014b4c:	24037c04 	.word	0x24037c04

08014b50 <stdio_exit_handler>:
 8014b50:	4a02      	ldr	r2, [pc, #8]	; (8014b5c <stdio_exit_handler+0xc>)
 8014b52:	4903      	ldr	r1, [pc, #12]	; (8014b60 <stdio_exit_handler+0x10>)
 8014b54:	4803      	ldr	r0, [pc, #12]	; (8014b64 <stdio_exit_handler+0x14>)
 8014b56:	f000 b869 	b.w	8014c2c <_fwalk_sglue>
 8014b5a:	bf00      	nop
 8014b5c:	24000088 	.word	0x24000088
 8014b60:	080170e5 	.word	0x080170e5
 8014b64:	24000200 	.word	0x24000200

08014b68 <cleanup_stdio>:
 8014b68:	6841      	ldr	r1, [r0, #4]
 8014b6a:	4b0c      	ldr	r3, [pc, #48]	; (8014b9c <cleanup_stdio+0x34>)
 8014b6c:	4299      	cmp	r1, r3
 8014b6e:	b510      	push	{r4, lr}
 8014b70:	4604      	mov	r4, r0
 8014b72:	d001      	beq.n	8014b78 <cleanup_stdio+0x10>
 8014b74:	f002 fab6 	bl	80170e4 <_fflush_r>
 8014b78:	68a1      	ldr	r1, [r4, #8]
 8014b7a:	4b09      	ldr	r3, [pc, #36]	; (8014ba0 <cleanup_stdio+0x38>)
 8014b7c:	4299      	cmp	r1, r3
 8014b7e:	d002      	beq.n	8014b86 <cleanup_stdio+0x1e>
 8014b80:	4620      	mov	r0, r4
 8014b82:	f002 faaf 	bl	80170e4 <_fflush_r>
 8014b86:	68e1      	ldr	r1, [r4, #12]
 8014b88:	4b06      	ldr	r3, [pc, #24]	; (8014ba4 <cleanup_stdio+0x3c>)
 8014b8a:	4299      	cmp	r1, r3
 8014b8c:	d004      	beq.n	8014b98 <cleanup_stdio+0x30>
 8014b8e:	4620      	mov	r0, r4
 8014b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b94:	f002 baa6 	b.w	80170e4 <_fflush_r>
 8014b98:	bd10      	pop	{r4, pc}
 8014b9a:	bf00      	nop
 8014b9c:	24037c04 	.word	0x24037c04
 8014ba0:	24037c6c 	.word	0x24037c6c
 8014ba4:	24037cd4 	.word	0x24037cd4

08014ba8 <global_stdio_init.part.0>:
 8014ba8:	b510      	push	{r4, lr}
 8014baa:	4b0b      	ldr	r3, [pc, #44]	; (8014bd8 <global_stdio_init.part.0+0x30>)
 8014bac:	4c0b      	ldr	r4, [pc, #44]	; (8014bdc <global_stdio_init.part.0+0x34>)
 8014bae:	4a0c      	ldr	r2, [pc, #48]	; (8014be0 <global_stdio_init.part.0+0x38>)
 8014bb0:	601a      	str	r2, [r3, #0]
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	2104      	movs	r1, #4
 8014bb8:	f7ff ff94 	bl	8014ae4 <std>
 8014bbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	2109      	movs	r1, #9
 8014bc4:	f7ff ff8e 	bl	8014ae4 <std>
 8014bc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014bcc:	2202      	movs	r2, #2
 8014bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd2:	2112      	movs	r1, #18
 8014bd4:	f7ff bf86 	b.w	8014ae4 <std>
 8014bd8:	24037d3c 	.word	0x24037d3c
 8014bdc:	24037c04 	.word	0x24037c04
 8014be0:	08014b51 	.word	0x08014b51

08014be4 <__sfp_lock_acquire>:
 8014be4:	4801      	ldr	r0, [pc, #4]	; (8014bec <__sfp_lock_acquire+0x8>)
 8014be6:	f000 b9fe 	b.w	8014fe6 <__retarget_lock_acquire_recursive>
 8014bea:	bf00      	nop
 8014bec:	24037d45 	.word	0x24037d45

08014bf0 <__sfp_lock_release>:
 8014bf0:	4801      	ldr	r0, [pc, #4]	; (8014bf8 <__sfp_lock_release+0x8>)
 8014bf2:	f000 b9f9 	b.w	8014fe8 <__retarget_lock_release_recursive>
 8014bf6:	bf00      	nop
 8014bf8:	24037d45 	.word	0x24037d45

08014bfc <__sinit>:
 8014bfc:	b510      	push	{r4, lr}
 8014bfe:	4604      	mov	r4, r0
 8014c00:	f7ff fff0 	bl	8014be4 <__sfp_lock_acquire>
 8014c04:	6a23      	ldr	r3, [r4, #32]
 8014c06:	b11b      	cbz	r3, 8014c10 <__sinit+0x14>
 8014c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c0c:	f7ff bff0 	b.w	8014bf0 <__sfp_lock_release>
 8014c10:	4b04      	ldr	r3, [pc, #16]	; (8014c24 <__sinit+0x28>)
 8014c12:	6223      	str	r3, [r4, #32]
 8014c14:	4b04      	ldr	r3, [pc, #16]	; (8014c28 <__sinit+0x2c>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d1f5      	bne.n	8014c08 <__sinit+0xc>
 8014c1c:	f7ff ffc4 	bl	8014ba8 <global_stdio_init.part.0>
 8014c20:	e7f2      	b.n	8014c08 <__sinit+0xc>
 8014c22:	bf00      	nop
 8014c24:	08014b69 	.word	0x08014b69
 8014c28:	24037d3c 	.word	0x24037d3c

08014c2c <_fwalk_sglue>:
 8014c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c30:	4607      	mov	r7, r0
 8014c32:	4688      	mov	r8, r1
 8014c34:	4614      	mov	r4, r2
 8014c36:	2600      	movs	r6, #0
 8014c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8014c40:	d505      	bpl.n	8014c4e <_fwalk_sglue+0x22>
 8014c42:	6824      	ldr	r4, [r4, #0]
 8014c44:	2c00      	cmp	r4, #0
 8014c46:	d1f7      	bne.n	8014c38 <_fwalk_sglue+0xc>
 8014c48:	4630      	mov	r0, r6
 8014c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c4e:	89ab      	ldrh	r3, [r5, #12]
 8014c50:	2b01      	cmp	r3, #1
 8014c52:	d907      	bls.n	8014c64 <_fwalk_sglue+0x38>
 8014c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	d003      	beq.n	8014c64 <_fwalk_sglue+0x38>
 8014c5c:	4629      	mov	r1, r5
 8014c5e:	4638      	mov	r0, r7
 8014c60:	47c0      	blx	r8
 8014c62:	4306      	orrs	r6, r0
 8014c64:	3568      	adds	r5, #104	; 0x68
 8014c66:	e7e9      	b.n	8014c3c <_fwalk_sglue+0x10>

08014c68 <iprintf>:
 8014c68:	b40f      	push	{r0, r1, r2, r3}
 8014c6a:	b507      	push	{r0, r1, r2, lr}
 8014c6c:	4906      	ldr	r1, [pc, #24]	; (8014c88 <iprintf+0x20>)
 8014c6e:	ab04      	add	r3, sp, #16
 8014c70:	6808      	ldr	r0, [r1, #0]
 8014c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c76:	6881      	ldr	r1, [r0, #8]
 8014c78:	9301      	str	r3, [sp, #4]
 8014c7a:	f001 fdb5 	bl	80167e8 <_vfiprintf_r>
 8014c7e:	b003      	add	sp, #12
 8014c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c84:	b004      	add	sp, #16
 8014c86:	4770      	bx	lr
 8014c88:	2400024c 	.word	0x2400024c

08014c8c <siprintf>:
 8014c8c:	b40e      	push	{r1, r2, r3}
 8014c8e:	b500      	push	{lr}
 8014c90:	b09c      	sub	sp, #112	; 0x70
 8014c92:	ab1d      	add	r3, sp, #116	; 0x74
 8014c94:	9002      	str	r0, [sp, #8]
 8014c96:	9006      	str	r0, [sp, #24]
 8014c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014c9c:	4809      	ldr	r0, [pc, #36]	; (8014cc4 <siprintf+0x38>)
 8014c9e:	9107      	str	r1, [sp, #28]
 8014ca0:	9104      	str	r1, [sp, #16]
 8014ca2:	4909      	ldr	r1, [pc, #36]	; (8014cc8 <siprintf+0x3c>)
 8014ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ca8:	9105      	str	r1, [sp, #20]
 8014caa:	6800      	ldr	r0, [r0, #0]
 8014cac:	9301      	str	r3, [sp, #4]
 8014cae:	a902      	add	r1, sp, #8
 8014cb0:	f001 faa0 	bl	80161f4 <_svfiprintf_r>
 8014cb4:	9b02      	ldr	r3, [sp, #8]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	701a      	strb	r2, [r3, #0]
 8014cba:	b01c      	add	sp, #112	; 0x70
 8014cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cc0:	b003      	add	sp, #12
 8014cc2:	4770      	bx	lr
 8014cc4:	2400024c 	.word	0x2400024c
 8014cc8:	ffff0208 	.word	0xffff0208

08014ccc <siscanf>:
 8014ccc:	b40e      	push	{r1, r2, r3}
 8014cce:	b510      	push	{r4, lr}
 8014cd0:	b09f      	sub	sp, #124	; 0x7c
 8014cd2:	ac21      	add	r4, sp, #132	; 0x84
 8014cd4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014cd8:	f854 2b04 	ldr.w	r2, [r4], #4
 8014cdc:	9201      	str	r2, [sp, #4]
 8014cde:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014ce2:	9004      	str	r0, [sp, #16]
 8014ce4:	9008      	str	r0, [sp, #32]
 8014ce6:	f7eb fb05 	bl	80002f4 <strlen>
 8014cea:	4b0c      	ldr	r3, [pc, #48]	; (8014d1c <siscanf+0x50>)
 8014cec:	9005      	str	r0, [sp, #20]
 8014cee:	9009      	str	r0, [sp, #36]	; 0x24
 8014cf0:	930d      	str	r3, [sp, #52]	; 0x34
 8014cf2:	480b      	ldr	r0, [pc, #44]	; (8014d20 <siscanf+0x54>)
 8014cf4:	9a01      	ldr	r2, [sp, #4]
 8014cf6:	6800      	ldr	r0, [r0, #0]
 8014cf8:	9403      	str	r4, [sp, #12]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8014cfe:	9316      	str	r3, [sp, #88]	; 0x58
 8014d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014d08:	a904      	add	r1, sp, #16
 8014d0a:	4623      	mov	r3, r4
 8014d0c:	f001 fbca 	bl	80164a4 <__ssvfiscanf_r>
 8014d10:	b01f      	add	sp, #124	; 0x7c
 8014d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d16:	b003      	add	sp, #12
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	08014d47 	.word	0x08014d47
 8014d20:	2400024c 	.word	0x2400024c

08014d24 <__sread>:
 8014d24:	b510      	push	{r4, lr}
 8014d26:	460c      	mov	r4, r1
 8014d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d2c:	f000 f8fc 	bl	8014f28 <_read_r>
 8014d30:	2800      	cmp	r0, #0
 8014d32:	bfab      	itete	ge
 8014d34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d36:	89a3      	ldrhlt	r3, [r4, #12]
 8014d38:	181b      	addge	r3, r3, r0
 8014d3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d3e:	bfac      	ite	ge
 8014d40:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d42:	81a3      	strhlt	r3, [r4, #12]
 8014d44:	bd10      	pop	{r4, pc}

08014d46 <__seofread>:
 8014d46:	2000      	movs	r0, #0
 8014d48:	4770      	bx	lr

08014d4a <__swrite>:
 8014d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d4e:	461f      	mov	r7, r3
 8014d50:	898b      	ldrh	r3, [r1, #12]
 8014d52:	05db      	lsls	r3, r3, #23
 8014d54:	4605      	mov	r5, r0
 8014d56:	460c      	mov	r4, r1
 8014d58:	4616      	mov	r6, r2
 8014d5a:	d505      	bpl.n	8014d68 <__swrite+0x1e>
 8014d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d60:	2302      	movs	r3, #2
 8014d62:	2200      	movs	r2, #0
 8014d64:	f000 f8ce 	bl	8014f04 <_lseek_r>
 8014d68:	89a3      	ldrh	r3, [r4, #12]
 8014d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d72:	81a3      	strh	r3, [r4, #12]
 8014d74:	4632      	mov	r2, r6
 8014d76:	463b      	mov	r3, r7
 8014d78:	4628      	mov	r0, r5
 8014d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d7e:	f000 b8f5 	b.w	8014f6c <_write_r>

08014d82 <__sseek>:
 8014d82:	b510      	push	{r4, lr}
 8014d84:	460c      	mov	r4, r1
 8014d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d8a:	f000 f8bb 	bl	8014f04 <_lseek_r>
 8014d8e:	1c43      	adds	r3, r0, #1
 8014d90:	89a3      	ldrh	r3, [r4, #12]
 8014d92:	bf15      	itete	ne
 8014d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8014d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014d9e:	81a3      	strheq	r3, [r4, #12]
 8014da0:	bf18      	it	ne
 8014da2:	81a3      	strhne	r3, [r4, #12]
 8014da4:	bd10      	pop	{r4, pc}

08014da6 <__sclose>:
 8014da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014daa:	f000 b845 	b.w	8014e38 <_close_r>

08014dae <memcmp>:
 8014dae:	b510      	push	{r4, lr}
 8014db0:	3901      	subs	r1, #1
 8014db2:	4402      	add	r2, r0
 8014db4:	4290      	cmp	r0, r2
 8014db6:	d101      	bne.n	8014dbc <memcmp+0xe>
 8014db8:	2000      	movs	r0, #0
 8014dba:	e005      	b.n	8014dc8 <memcmp+0x1a>
 8014dbc:	7803      	ldrb	r3, [r0, #0]
 8014dbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014dc2:	42a3      	cmp	r3, r4
 8014dc4:	d001      	beq.n	8014dca <memcmp+0x1c>
 8014dc6:	1b18      	subs	r0, r3, r4
 8014dc8:	bd10      	pop	{r4, pc}
 8014dca:	3001      	adds	r0, #1
 8014dcc:	e7f2      	b.n	8014db4 <memcmp+0x6>

08014dce <memmove>:
 8014dce:	4288      	cmp	r0, r1
 8014dd0:	b510      	push	{r4, lr}
 8014dd2:	eb01 0402 	add.w	r4, r1, r2
 8014dd6:	d902      	bls.n	8014dde <memmove+0x10>
 8014dd8:	4284      	cmp	r4, r0
 8014dda:	4623      	mov	r3, r4
 8014ddc:	d807      	bhi.n	8014dee <memmove+0x20>
 8014dde:	1e43      	subs	r3, r0, #1
 8014de0:	42a1      	cmp	r1, r4
 8014de2:	d008      	beq.n	8014df6 <memmove+0x28>
 8014de4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014de8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014dec:	e7f8      	b.n	8014de0 <memmove+0x12>
 8014dee:	4402      	add	r2, r0
 8014df0:	4601      	mov	r1, r0
 8014df2:	428a      	cmp	r2, r1
 8014df4:	d100      	bne.n	8014df8 <memmove+0x2a>
 8014df6:	bd10      	pop	{r4, pc}
 8014df8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014dfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e00:	e7f7      	b.n	8014df2 <memmove+0x24>

08014e02 <memset>:
 8014e02:	4402      	add	r2, r0
 8014e04:	4603      	mov	r3, r0
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d100      	bne.n	8014e0c <memset+0xa>
 8014e0a:	4770      	bx	lr
 8014e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8014e10:	e7f9      	b.n	8014e06 <memset+0x4>

08014e12 <strncmp>:
 8014e12:	b510      	push	{r4, lr}
 8014e14:	b16a      	cbz	r2, 8014e32 <strncmp+0x20>
 8014e16:	3901      	subs	r1, #1
 8014e18:	1884      	adds	r4, r0, r2
 8014e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d103      	bne.n	8014e2e <strncmp+0x1c>
 8014e26:	42a0      	cmp	r0, r4
 8014e28:	d001      	beq.n	8014e2e <strncmp+0x1c>
 8014e2a:	2a00      	cmp	r2, #0
 8014e2c:	d1f5      	bne.n	8014e1a <strncmp+0x8>
 8014e2e:	1ad0      	subs	r0, r2, r3
 8014e30:	bd10      	pop	{r4, pc}
 8014e32:	4610      	mov	r0, r2
 8014e34:	e7fc      	b.n	8014e30 <strncmp+0x1e>
	...

08014e38 <_close_r>:
 8014e38:	b538      	push	{r3, r4, r5, lr}
 8014e3a:	4d06      	ldr	r5, [pc, #24]	; (8014e54 <_close_r+0x1c>)
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	4604      	mov	r4, r0
 8014e40:	4608      	mov	r0, r1
 8014e42:	602b      	str	r3, [r5, #0]
 8014e44:	f7ee fada 	bl	80033fc <_close>
 8014e48:	1c43      	adds	r3, r0, #1
 8014e4a:	d102      	bne.n	8014e52 <_close_r+0x1a>
 8014e4c:	682b      	ldr	r3, [r5, #0]
 8014e4e:	b103      	cbz	r3, 8014e52 <_close_r+0x1a>
 8014e50:	6023      	str	r3, [r4, #0]
 8014e52:	bd38      	pop	{r3, r4, r5, pc}
 8014e54:	24037d40 	.word	0x24037d40

08014e58 <_reclaim_reent>:
 8014e58:	4b29      	ldr	r3, [pc, #164]	; (8014f00 <_reclaim_reent+0xa8>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4283      	cmp	r3, r0
 8014e5e:	b570      	push	{r4, r5, r6, lr}
 8014e60:	4604      	mov	r4, r0
 8014e62:	d04b      	beq.n	8014efc <_reclaim_reent+0xa4>
 8014e64:	69c3      	ldr	r3, [r0, #28]
 8014e66:	b143      	cbz	r3, 8014e7a <_reclaim_reent+0x22>
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d144      	bne.n	8014ef8 <_reclaim_reent+0xa0>
 8014e6e:	69e3      	ldr	r3, [r4, #28]
 8014e70:	6819      	ldr	r1, [r3, #0]
 8014e72:	b111      	cbz	r1, 8014e7a <_reclaim_reent+0x22>
 8014e74:	4620      	mov	r0, r4
 8014e76:	f000 f8ed 	bl	8015054 <_free_r>
 8014e7a:	6961      	ldr	r1, [r4, #20]
 8014e7c:	b111      	cbz	r1, 8014e84 <_reclaim_reent+0x2c>
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f000 f8e8 	bl	8015054 <_free_r>
 8014e84:	69e1      	ldr	r1, [r4, #28]
 8014e86:	b111      	cbz	r1, 8014e8e <_reclaim_reent+0x36>
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f000 f8e3 	bl	8015054 <_free_r>
 8014e8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014e90:	b111      	cbz	r1, 8014e98 <_reclaim_reent+0x40>
 8014e92:	4620      	mov	r0, r4
 8014e94:	f000 f8de 	bl	8015054 <_free_r>
 8014e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e9a:	b111      	cbz	r1, 8014ea2 <_reclaim_reent+0x4a>
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	f000 f8d9 	bl	8015054 <_free_r>
 8014ea2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ea4:	b111      	cbz	r1, 8014eac <_reclaim_reent+0x54>
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	f000 f8d4 	bl	8015054 <_free_r>
 8014eac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014eae:	b111      	cbz	r1, 8014eb6 <_reclaim_reent+0x5e>
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f000 f8cf 	bl	8015054 <_free_r>
 8014eb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014eb8:	b111      	cbz	r1, 8014ec0 <_reclaim_reent+0x68>
 8014eba:	4620      	mov	r0, r4
 8014ebc:	f000 f8ca 	bl	8015054 <_free_r>
 8014ec0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014ec2:	b111      	cbz	r1, 8014eca <_reclaim_reent+0x72>
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	f000 f8c5 	bl	8015054 <_free_r>
 8014eca:	6a23      	ldr	r3, [r4, #32]
 8014ecc:	b1b3      	cbz	r3, 8014efc <_reclaim_reent+0xa4>
 8014ece:	4620      	mov	r0, r4
 8014ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ed4:	4718      	bx	r3
 8014ed6:	5949      	ldr	r1, [r1, r5]
 8014ed8:	b941      	cbnz	r1, 8014eec <_reclaim_reent+0x94>
 8014eda:	3504      	adds	r5, #4
 8014edc:	69e3      	ldr	r3, [r4, #28]
 8014ede:	2d80      	cmp	r5, #128	; 0x80
 8014ee0:	68d9      	ldr	r1, [r3, #12]
 8014ee2:	d1f8      	bne.n	8014ed6 <_reclaim_reent+0x7e>
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	f000 f8b5 	bl	8015054 <_free_r>
 8014eea:	e7c0      	b.n	8014e6e <_reclaim_reent+0x16>
 8014eec:	680e      	ldr	r6, [r1, #0]
 8014eee:	4620      	mov	r0, r4
 8014ef0:	f000 f8b0 	bl	8015054 <_free_r>
 8014ef4:	4631      	mov	r1, r6
 8014ef6:	e7ef      	b.n	8014ed8 <_reclaim_reent+0x80>
 8014ef8:	2500      	movs	r5, #0
 8014efa:	e7ef      	b.n	8014edc <_reclaim_reent+0x84>
 8014efc:	bd70      	pop	{r4, r5, r6, pc}
 8014efe:	bf00      	nop
 8014f00:	2400024c 	.word	0x2400024c

08014f04 <_lseek_r>:
 8014f04:	b538      	push	{r3, r4, r5, lr}
 8014f06:	4d07      	ldr	r5, [pc, #28]	; (8014f24 <_lseek_r+0x20>)
 8014f08:	4604      	mov	r4, r0
 8014f0a:	4608      	mov	r0, r1
 8014f0c:	4611      	mov	r1, r2
 8014f0e:	2200      	movs	r2, #0
 8014f10:	602a      	str	r2, [r5, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	f7ee fa7e 	bl	8003414 <_lseek>
 8014f18:	1c43      	adds	r3, r0, #1
 8014f1a:	d102      	bne.n	8014f22 <_lseek_r+0x1e>
 8014f1c:	682b      	ldr	r3, [r5, #0]
 8014f1e:	b103      	cbz	r3, 8014f22 <_lseek_r+0x1e>
 8014f20:	6023      	str	r3, [r4, #0]
 8014f22:	bd38      	pop	{r3, r4, r5, pc}
 8014f24:	24037d40 	.word	0x24037d40

08014f28 <_read_r>:
 8014f28:	b538      	push	{r3, r4, r5, lr}
 8014f2a:	4d07      	ldr	r5, [pc, #28]	; (8014f48 <_read_r+0x20>)
 8014f2c:	4604      	mov	r4, r0
 8014f2e:	4608      	mov	r0, r1
 8014f30:	4611      	mov	r1, r2
 8014f32:	2200      	movs	r2, #0
 8014f34:	602a      	str	r2, [r5, #0]
 8014f36:	461a      	mov	r2, r3
 8014f38:	f7ee fa44 	bl	80033c4 <_read>
 8014f3c:	1c43      	adds	r3, r0, #1
 8014f3e:	d102      	bne.n	8014f46 <_read_r+0x1e>
 8014f40:	682b      	ldr	r3, [r5, #0]
 8014f42:	b103      	cbz	r3, 8014f46 <_read_r+0x1e>
 8014f44:	6023      	str	r3, [r4, #0]
 8014f46:	bd38      	pop	{r3, r4, r5, pc}
 8014f48:	24037d40 	.word	0x24037d40

08014f4c <_sbrk_r>:
 8014f4c:	b538      	push	{r3, r4, r5, lr}
 8014f4e:	4d06      	ldr	r5, [pc, #24]	; (8014f68 <_sbrk_r+0x1c>)
 8014f50:	2300      	movs	r3, #0
 8014f52:	4604      	mov	r4, r0
 8014f54:	4608      	mov	r0, r1
 8014f56:	602b      	str	r3, [r5, #0]
 8014f58:	f7ee fa5e 	bl	8003418 <_sbrk>
 8014f5c:	1c43      	adds	r3, r0, #1
 8014f5e:	d102      	bne.n	8014f66 <_sbrk_r+0x1a>
 8014f60:	682b      	ldr	r3, [r5, #0]
 8014f62:	b103      	cbz	r3, 8014f66 <_sbrk_r+0x1a>
 8014f64:	6023      	str	r3, [r4, #0]
 8014f66:	bd38      	pop	{r3, r4, r5, pc}
 8014f68:	24037d40 	.word	0x24037d40

08014f6c <_write_r>:
 8014f6c:	b538      	push	{r3, r4, r5, lr}
 8014f6e:	4d07      	ldr	r5, [pc, #28]	; (8014f8c <_write_r+0x20>)
 8014f70:	4604      	mov	r4, r0
 8014f72:	4608      	mov	r0, r1
 8014f74:	4611      	mov	r1, r2
 8014f76:	2200      	movs	r2, #0
 8014f78:	602a      	str	r2, [r5, #0]
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	f7ee fa30 	bl	80033e0 <_write>
 8014f80:	1c43      	adds	r3, r0, #1
 8014f82:	d102      	bne.n	8014f8a <_write_r+0x1e>
 8014f84:	682b      	ldr	r3, [r5, #0]
 8014f86:	b103      	cbz	r3, 8014f8a <_write_r+0x1e>
 8014f88:	6023      	str	r3, [r4, #0]
 8014f8a:	bd38      	pop	{r3, r4, r5, pc}
 8014f8c:	24037d40 	.word	0x24037d40

08014f90 <__errno>:
 8014f90:	4b01      	ldr	r3, [pc, #4]	; (8014f98 <__errno+0x8>)
 8014f92:	6818      	ldr	r0, [r3, #0]
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	2400024c 	.word	0x2400024c

08014f9c <__libc_init_array>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	4d0d      	ldr	r5, [pc, #52]	; (8014fd4 <__libc_init_array+0x38>)
 8014fa0:	4c0d      	ldr	r4, [pc, #52]	; (8014fd8 <__libc_init_array+0x3c>)
 8014fa2:	1b64      	subs	r4, r4, r5
 8014fa4:	10a4      	asrs	r4, r4, #2
 8014fa6:	2600      	movs	r6, #0
 8014fa8:	42a6      	cmp	r6, r4
 8014faa:	d109      	bne.n	8014fc0 <__libc_init_array+0x24>
 8014fac:	4d0b      	ldr	r5, [pc, #44]	; (8014fdc <__libc_init_array+0x40>)
 8014fae:	4c0c      	ldr	r4, [pc, #48]	; (8014fe0 <__libc_init_array+0x44>)
 8014fb0:	f002 fb34 	bl	801761c <_init>
 8014fb4:	1b64      	subs	r4, r4, r5
 8014fb6:	10a4      	asrs	r4, r4, #2
 8014fb8:	2600      	movs	r6, #0
 8014fba:	42a6      	cmp	r6, r4
 8014fbc:	d105      	bne.n	8014fca <__libc_init_array+0x2e>
 8014fbe:	bd70      	pop	{r4, r5, r6, pc}
 8014fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fc4:	4798      	blx	r3
 8014fc6:	3601      	adds	r6, #1
 8014fc8:	e7ee      	b.n	8014fa8 <__libc_init_array+0xc>
 8014fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fce:	4798      	blx	r3
 8014fd0:	3601      	adds	r6, #1
 8014fd2:	e7f2      	b.n	8014fba <__libc_init_array+0x1e>
 8014fd4:	0801ac2c 	.word	0x0801ac2c
 8014fd8:	0801ac2c 	.word	0x0801ac2c
 8014fdc:	0801ac2c 	.word	0x0801ac2c
 8014fe0:	0801ac38 	.word	0x0801ac38

08014fe4 <__retarget_lock_init_recursive>:
 8014fe4:	4770      	bx	lr

08014fe6 <__retarget_lock_acquire_recursive>:
 8014fe6:	4770      	bx	lr

08014fe8 <__retarget_lock_release_recursive>:
 8014fe8:	4770      	bx	lr

08014fea <memcpy>:
 8014fea:	440a      	add	r2, r1
 8014fec:	4291      	cmp	r1, r2
 8014fee:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ff2:	d100      	bne.n	8014ff6 <memcpy+0xc>
 8014ff4:	4770      	bx	lr
 8014ff6:	b510      	push	{r4, lr}
 8014ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015000:	4291      	cmp	r1, r2
 8015002:	d1f9      	bne.n	8014ff8 <memcpy+0xe>
 8015004:	bd10      	pop	{r4, pc}
	...

08015008 <nan>:
 8015008:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015010 <nan+0x8>
 801500c:	4770      	bx	lr
 801500e:	bf00      	nop
 8015010:	00000000 	.word	0x00000000
 8015014:	7ff80000 	.word	0x7ff80000

08015018 <__assert_func>:
 8015018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801501a:	4614      	mov	r4, r2
 801501c:	461a      	mov	r2, r3
 801501e:	4b09      	ldr	r3, [pc, #36]	; (8015044 <__assert_func+0x2c>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	4605      	mov	r5, r0
 8015024:	68d8      	ldr	r0, [r3, #12]
 8015026:	b14c      	cbz	r4, 801503c <__assert_func+0x24>
 8015028:	4b07      	ldr	r3, [pc, #28]	; (8015048 <__assert_func+0x30>)
 801502a:	9100      	str	r1, [sp, #0]
 801502c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015030:	4906      	ldr	r1, [pc, #24]	; (801504c <__assert_func+0x34>)
 8015032:	462b      	mov	r3, r5
 8015034:	f002 f87e 	bl	8017134 <fiprintf>
 8015038:	f002 f996 	bl	8017368 <abort>
 801503c:	4b04      	ldr	r3, [pc, #16]	; (8015050 <__assert_func+0x38>)
 801503e:	461c      	mov	r4, r3
 8015040:	e7f3      	b.n	801502a <__assert_func+0x12>
 8015042:	bf00      	nop
 8015044:	2400024c 	.word	0x2400024c
 8015048:	0801a9d9 	.word	0x0801a9d9
 801504c:	0801a9e6 	.word	0x0801a9e6
 8015050:	0801aa14 	.word	0x0801aa14

08015054 <_free_r>:
 8015054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015056:	2900      	cmp	r1, #0
 8015058:	d044      	beq.n	80150e4 <_free_r+0x90>
 801505a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801505e:	9001      	str	r0, [sp, #4]
 8015060:	2b00      	cmp	r3, #0
 8015062:	f1a1 0404 	sub.w	r4, r1, #4
 8015066:	bfb8      	it	lt
 8015068:	18e4      	addlt	r4, r4, r3
 801506a:	f7fe fe5b 	bl	8013d24 <__malloc_lock>
 801506e:	4a1e      	ldr	r2, [pc, #120]	; (80150e8 <_free_r+0x94>)
 8015070:	9801      	ldr	r0, [sp, #4]
 8015072:	6813      	ldr	r3, [r2, #0]
 8015074:	b933      	cbnz	r3, 8015084 <_free_r+0x30>
 8015076:	6063      	str	r3, [r4, #4]
 8015078:	6014      	str	r4, [r2, #0]
 801507a:	b003      	add	sp, #12
 801507c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015080:	f7fe be56 	b.w	8013d30 <__malloc_unlock>
 8015084:	42a3      	cmp	r3, r4
 8015086:	d908      	bls.n	801509a <_free_r+0x46>
 8015088:	6825      	ldr	r5, [r4, #0]
 801508a:	1961      	adds	r1, r4, r5
 801508c:	428b      	cmp	r3, r1
 801508e:	bf01      	itttt	eq
 8015090:	6819      	ldreq	r1, [r3, #0]
 8015092:	685b      	ldreq	r3, [r3, #4]
 8015094:	1949      	addeq	r1, r1, r5
 8015096:	6021      	streq	r1, [r4, #0]
 8015098:	e7ed      	b.n	8015076 <_free_r+0x22>
 801509a:	461a      	mov	r2, r3
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	b10b      	cbz	r3, 80150a4 <_free_r+0x50>
 80150a0:	42a3      	cmp	r3, r4
 80150a2:	d9fa      	bls.n	801509a <_free_r+0x46>
 80150a4:	6811      	ldr	r1, [r2, #0]
 80150a6:	1855      	adds	r5, r2, r1
 80150a8:	42a5      	cmp	r5, r4
 80150aa:	d10b      	bne.n	80150c4 <_free_r+0x70>
 80150ac:	6824      	ldr	r4, [r4, #0]
 80150ae:	4421      	add	r1, r4
 80150b0:	1854      	adds	r4, r2, r1
 80150b2:	42a3      	cmp	r3, r4
 80150b4:	6011      	str	r1, [r2, #0]
 80150b6:	d1e0      	bne.n	801507a <_free_r+0x26>
 80150b8:	681c      	ldr	r4, [r3, #0]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	6053      	str	r3, [r2, #4]
 80150be:	440c      	add	r4, r1
 80150c0:	6014      	str	r4, [r2, #0]
 80150c2:	e7da      	b.n	801507a <_free_r+0x26>
 80150c4:	d902      	bls.n	80150cc <_free_r+0x78>
 80150c6:	230c      	movs	r3, #12
 80150c8:	6003      	str	r3, [r0, #0]
 80150ca:	e7d6      	b.n	801507a <_free_r+0x26>
 80150cc:	6825      	ldr	r5, [r4, #0]
 80150ce:	1961      	adds	r1, r4, r5
 80150d0:	428b      	cmp	r3, r1
 80150d2:	bf04      	itt	eq
 80150d4:	6819      	ldreq	r1, [r3, #0]
 80150d6:	685b      	ldreq	r3, [r3, #4]
 80150d8:	6063      	str	r3, [r4, #4]
 80150da:	bf04      	itt	eq
 80150dc:	1949      	addeq	r1, r1, r5
 80150de:	6021      	streq	r1, [r4, #0]
 80150e0:	6054      	str	r4, [r2, #4]
 80150e2:	e7ca      	b.n	801507a <_free_r+0x26>
 80150e4:	b003      	add	sp, #12
 80150e6:	bd30      	pop	{r4, r5, pc}
 80150e8:	24037bfc 	.word	0x24037bfc

080150ec <rshift>:
 80150ec:	6903      	ldr	r3, [r0, #16]
 80150ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80150f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80150fa:	f100 0414 	add.w	r4, r0, #20
 80150fe:	dd45      	ble.n	801518c <rshift+0xa0>
 8015100:	f011 011f 	ands.w	r1, r1, #31
 8015104:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015108:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801510c:	d10c      	bne.n	8015128 <rshift+0x3c>
 801510e:	f100 0710 	add.w	r7, r0, #16
 8015112:	4629      	mov	r1, r5
 8015114:	42b1      	cmp	r1, r6
 8015116:	d334      	bcc.n	8015182 <rshift+0x96>
 8015118:	1a9b      	subs	r3, r3, r2
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	1eea      	subs	r2, r5, #3
 801511e:	4296      	cmp	r6, r2
 8015120:	bf38      	it	cc
 8015122:	2300      	movcc	r3, #0
 8015124:	4423      	add	r3, r4
 8015126:	e015      	b.n	8015154 <rshift+0x68>
 8015128:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801512c:	f1c1 0820 	rsb	r8, r1, #32
 8015130:	40cf      	lsrs	r7, r1
 8015132:	f105 0e04 	add.w	lr, r5, #4
 8015136:	46a1      	mov	r9, r4
 8015138:	4576      	cmp	r6, lr
 801513a:	46f4      	mov	ip, lr
 801513c:	d815      	bhi.n	801516a <rshift+0x7e>
 801513e:	1a9a      	subs	r2, r3, r2
 8015140:	0092      	lsls	r2, r2, #2
 8015142:	3a04      	subs	r2, #4
 8015144:	3501      	adds	r5, #1
 8015146:	42ae      	cmp	r6, r5
 8015148:	bf38      	it	cc
 801514a:	2200      	movcc	r2, #0
 801514c:	18a3      	adds	r3, r4, r2
 801514e:	50a7      	str	r7, [r4, r2]
 8015150:	b107      	cbz	r7, 8015154 <rshift+0x68>
 8015152:	3304      	adds	r3, #4
 8015154:	1b1a      	subs	r2, r3, r4
 8015156:	42a3      	cmp	r3, r4
 8015158:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801515c:	bf08      	it	eq
 801515e:	2300      	moveq	r3, #0
 8015160:	6102      	str	r2, [r0, #16]
 8015162:	bf08      	it	eq
 8015164:	6143      	streq	r3, [r0, #20]
 8015166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801516a:	f8dc c000 	ldr.w	ip, [ip]
 801516e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015172:	ea4c 0707 	orr.w	r7, ip, r7
 8015176:	f849 7b04 	str.w	r7, [r9], #4
 801517a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801517e:	40cf      	lsrs	r7, r1
 8015180:	e7da      	b.n	8015138 <rshift+0x4c>
 8015182:	f851 cb04 	ldr.w	ip, [r1], #4
 8015186:	f847 cf04 	str.w	ip, [r7, #4]!
 801518a:	e7c3      	b.n	8015114 <rshift+0x28>
 801518c:	4623      	mov	r3, r4
 801518e:	e7e1      	b.n	8015154 <rshift+0x68>

08015190 <__hexdig_fun>:
 8015190:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015194:	2b09      	cmp	r3, #9
 8015196:	d802      	bhi.n	801519e <__hexdig_fun+0xe>
 8015198:	3820      	subs	r0, #32
 801519a:	b2c0      	uxtb	r0, r0
 801519c:	4770      	bx	lr
 801519e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80151a2:	2b05      	cmp	r3, #5
 80151a4:	d801      	bhi.n	80151aa <__hexdig_fun+0x1a>
 80151a6:	3847      	subs	r0, #71	; 0x47
 80151a8:	e7f7      	b.n	801519a <__hexdig_fun+0xa>
 80151aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80151ae:	2b05      	cmp	r3, #5
 80151b0:	d801      	bhi.n	80151b6 <__hexdig_fun+0x26>
 80151b2:	3827      	subs	r0, #39	; 0x27
 80151b4:	e7f1      	b.n	801519a <__hexdig_fun+0xa>
 80151b6:	2000      	movs	r0, #0
 80151b8:	4770      	bx	lr
	...

080151bc <__gethex>:
 80151bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151c0:	4617      	mov	r7, r2
 80151c2:	680a      	ldr	r2, [r1, #0]
 80151c4:	b085      	sub	sp, #20
 80151c6:	f102 0b02 	add.w	fp, r2, #2
 80151ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80151ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80151d2:	4681      	mov	r9, r0
 80151d4:	468a      	mov	sl, r1
 80151d6:	9302      	str	r3, [sp, #8]
 80151d8:	32fe      	adds	r2, #254	; 0xfe
 80151da:	eb02 030b 	add.w	r3, r2, fp
 80151de:	46d8      	mov	r8, fp
 80151e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80151e4:	9301      	str	r3, [sp, #4]
 80151e6:	2830      	cmp	r0, #48	; 0x30
 80151e8:	d0f7      	beq.n	80151da <__gethex+0x1e>
 80151ea:	f7ff ffd1 	bl	8015190 <__hexdig_fun>
 80151ee:	4604      	mov	r4, r0
 80151f0:	2800      	cmp	r0, #0
 80151f2:	d138      	bne.n	8015266 <__gethex+0xaa>
 80151f4:	49a7      	ldr	r1, [pc, #668]	; (8015494 <__gethex+0x2d8>)
 80151f6:	2201      	movs	r2, #1
 80151f8:	4640      	mov	r0, r8
 80151fa:	f7ff fe0a 	bl	8014e12 <strncmp>
 80151fe:	4606      	mov	r6, r0
 8015200:	2800      	cmp	r0, #0
 8015202:	d169      	bne.n	80152d8 <__gethex+0x11c>
 8015204:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015208:	465d      	mov	r5, fp
 801520a:	f7ff ffc1 	bl	8015190 <__hexdig_fun>
 801520e:	2800      	cmp	r0, #0
 8015210:	d064      	beq.n	80152dc <__gethex+0x120>
 8015212:	465a      	mov	r2, fp
 8015214:	7810      	ldrb	r0, [r2, #0]
 8015216:	2830      	cmp	r0, #48	; 0x30
 8015218:	4690      	mov	r8, r2
 801521a:	f102 0201 	add.w	r2, r2, #1
 801521e:	d0f9      	beq.n	8015214 <__gethex+0x58>
 8015220:	f7ff ffb6 	bl	8015190 <__hexdig_fun>
 8015224:	2301      	movs	r3, #1
 8015226:	fab0 f480 	clz	r4, r0
 801522a:	0964      	lsrs	r4, r4, #5
 801522c:	465e      	mov	r6, fp
 801522e:	9301      	str	r3, [sp, #4]
 8015230:	4642      	mov	r2, r8
 8015232:	4615      	mov	r5, r2
 8015234:	3201      	adds	r2, #1
 8015236:	7828      	ldrb	r0, [r5, #0]
 8015238:	f7ff ffaa 	bl	8015190 <__hexdig_fun>
 801523c:	2800      	cmp	r0, #0
 801523e:	d1f8      	bne.n	8015232 <__gethex+0x76>
 8015240:	4994      	ldr	r1, [pc, #592]	; (8015494 <__gethex+0x2d8>)
 8015242:	2201      	movs	r2, #1
 8015244:	4628      	mov	r0, r5
 8015246:	f7ff fde4 	bl	8014e12 <strncmp>
 801524a:	b978      	cbnz	r0, 801526c <__gethex+0xb0>
 801524c:	b946      	cbnz	r6, 8015260 <__gethex+0xa4>
 801524e:	1c6e      	adds	r6, r5, #1
 8015250:	4632      	mov	r2, r6
 8015252:	4615      	mov	r5, r2
 8015254:	3201      	adds	r2, #1
 8015256:	7828      	ldrb	r0, [r5, #0]
 8015258:	f7ff ff9a 	bl	8015190 <__hexdig_fun>
 801525c:	2800      	cmp	r0, #0
 801525e:	d1f8      	bne.n	8015252 <__gethex+0x96>
 8015260:	1b73      	subs	r3, r6, r5
 8015262:	009e      	lsls	r6, r3, #2
 8015264:	e004      	b.n	8015270 <__gethex+0xb4>
 8015266:	2400      	movs	r4, #0
 8015268:	4626      	mov	r6, r4
 801526a:	e7e1      	b.n	8015230 <__gethex+0x74>
 801526c:	2e00      	cmp	r6, #0
 801526e:	d1f7      	bne.n	8015260 <__gethex+0xa4>
 8015270:	782b      	ldrb	r3, [r5, #0]
 8015272:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015276:	2b50      	cmp	r3, #80	; 0x50
 8015278:	d13d      	bne.n	80152f6 <__gethex+0x13a>
 801527a:	786b      	ldrb	r3, [r5, #1]
 801527c:	2b2b      	cmp	r3, #43	; 0x2b
 801527e:	d02f      	beq.n	80152e0 <__gethex+0x124>
 8015280:	2b2d      	cmp	r3, #45	; 0x2d
 8015282:	d031      	beq.n	80152e8 <__gethex+0x12c>
 8015284:	1c69      	adds	r1, r5, #1
 8015286:	f04f 0b00 	mov.w	fp, #0
 801528a:	7808      	ldrb	r0, [r1, #0]
 801528c:	f7ff ff80 	bl	8015190 <__hexdig_fun>
 8015290:	1e42      	subs	r2, r0, #1
 8015292:	b2d2      	uxtb	r2, r2
 8015294:	2a18      	cmp	r2, #24
 8015296:	d82e      	bhi.n	80152f6 <__gethex+0x13a>
 8015298:	f1a0 0210 	sub.w	r2, r0, #16
 801529c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152a0:	f7ff ff76 	bl	8015190 <__hexdig_fun>
 80152a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80152a8:	fa5f fc8c 	uxtb.w	ip, ip
 80152ac:	f1bc 0f18 	cmp.w	ip, #24
 80152b0:	d91d      	bls.n	80152ee <__gethex+0x132>
 80152b2:	f1bb 0f00 	cmp.w	fp, #0
 80152b6:	d000      	beq.n	80152ba <__gethex+0xfe>
 80152b8:	4252      	negs	r2, r2
 80152ba:	4416      	add	r6, r2
 80152bc:	f8ca 1000 	str.w	r1, [sl]
 80152c0:	b1dc      	cbz	r4, 80152fa <__gethex+0x13e>
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	bf14      	ite	ne
 80152c8:	f04f 0800 	movne.w	r8, #0
 80152cc:	f04f 0806 	moveq.w	r8, #6
 80152d0:	4640      	mov	r0, r8
 80152d2:	b005      	add	sp, #20
 80152d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d8:	4645      	mov	r5, r8
 80152da:	4626      	mov	r6, r4
 80152dc:	2401      	movs	r4, #1
 80152de:	e7c7      	b.n	8015270 <__gethex+0xb4>
 80152e0:	f04f 0b00 	mov.w	fp, #0
 80152e4:	1ca9      	adds	r1, r5, #2
 80152e6:	e7d0      	b.n	801528a <__gethex+0xce>
 80152e8:	f04f 0b01 	mov.w	fp, #1
 80152ec:	e7fa      	b.n	80152e4 <__gethex+0x128>
 80152ee:	230a      	movs	r3, #10
 80152f0:	fb03 0002 	mla	r0, r3, r2, r0
 80152f4:	e7d0      	b.n	8015298 <__gethex+0xdc>
 80152f6:	4629      	mov	r1, r5
 80152f8:	e7e0      	b.n	80152bc <__gethex+0x100>
 80152fa:	eba5 0308 	sub.w	r3, r5, r8
 80152fe:	3b01      	subs	r3, #1
 8015300:	4621      	mov	r1, r4
 8015302:	2b07      	cmp	r3, #7
 8015304:	dc0a      	bgt.n	801531c <__gethex+0x160>
 8015306:	4648      	mov	r0, r9
 8015308:	f000 fa5a 	bl	80157c0 <_Balloc>
 801530c:	4604      	mov	r4, r0
 801530e:	b940      	cbnz	r0, 8015322 <__gethex+0x166>
 8015310:	4b61      	ldr	r3, [pc, #388]	; (8015498 <__gethex+0x2dc>)
 8015312:	4602      	mov	r2, r0
 8015314:	21e4      	movs	r1, #228	; 0xe4
 8015316:	4861      	ldr	r0, [pc, #388]	; (801549c <__gethex+0x2e0>)
 8015318:	f7ff fe7e 	bl	8015018 <__assert_func>
 801531c:	3101      	adds	r1, #1
 801531e:	105b      	asrs	r3, r3, #1
 8015320:	e7ef      	b.n	8015302 <__gethex+0x146>
 8015322:	f100 0a14 	add.w	sl, r0, #20
 8015326:	2300      	movs	r3, #0
 8015328:	495a      	ldr	r1, [pc, #360]	; (8015494 <__gethex+0x2d8>)
 801532a:	f8cd a004 	str.w	sl, [sp, #4]
 801532e:	469b      	mov	fp, r3
 8015330:	45a8      	cmp	r8, r5
 8015332:	d342      	bcc.n	80153ba <__gethex+0x1fe>
 8015334:	9801      	ldr	r0, [sp, #4]
 8015336:	f840 bb04 	str.w	fp, [r0], #4
 801533a:	eba0 000a 	sub.w	r0, r0, sl
 801533e:	1080      	asrs	r0, r0, #2
 8015340:	6120      	str	r0, [r4, #16]
 8015342:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015346:	4658      	mov	r0, fp
 8015348:	f000 fb2c 	bl	80159a4 <__hi0bits>
 801534c:	683d      	ldr	r5, [r7, #0]
 801534e:	eba8 0000 	sub.w	r0, r8, r0
 8015352:	42a8      	cmp	r0, r5
 8015354:	dd59      	ble.n	801540a <__gethex+0x24e>
 8015356:	eba0 0805 	sub.w	r8, r0, r5
 801535a:	4641      	mov	r1, r8
 801535c:	4620      	mov	r0, r4
 801535e:	f000 feb8 	bl	80160d2 <__any_on>
 8015362:	4683      	mov	fp, r0
 8015364:	b1b8      	cbz	r0, 8015396 <__gethex+0x1da>
 8015366:	f108 33ff 	add.w	r3, r8, #4294967295
 801536a:	1159      	asrs	r1, r3, #5
 801536c:	f003 021f 	and.w	r2, r3, #31
 8015370:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015374:	f04f 0b01 	mov.w	fp, #1
 8015378:	fa0b f202 	lsl.w	r2, fp, r2
 801537c:	420a      	tst	r2, r1
 801537e:	d00a      	beq.n	8015396 <__gethex+0x1da>
 8015380:	455b      	cmp	r3, fp
 8015382:	dd06      	ble.n	8015392 <__gethex+0x1d6>
 8015384:	f1a8 0102 	sub.w	r1, r8, #2
 8015388:	4620      	mov	r0, r4
 801538a:	f000 fea2 	bl	80160d2 <__any_on>
 801538e:	2800      	cmp	r0, #0
 8015390:	d138      	bne.n	8015404 <__gethex+0x248>
 8015392:	f04f 0b02 	mov.w	fp, #2
 8015396:	4641      	mov	r1, r8
 8015398:	4620      	mov	r0, r4
 801539a:	f7ff fea7 	bl	80150ec <rshift>
 801539e:	4446      	add	r6, r8
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	42b3      	cmp	r3, r6
 80153a4:	da41      	bge.n	801542a <__gethex+0x26e>
 80153a6:	4621      	mov	r1, r4
 80153a8:	4648      	mov	r0, r9
 80153aa:	f000 fa49 	bl	8015840 <_Bfree>
 80153ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153b0:	2300      	movs	r3, #0
 80153b2:	6013      	str	r3, [r2, #0]
 80153b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80153b8:	e78a      	b.n	80152d0 <__gethex+0x114>
 80153ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80153be:	2a2e      	cmp	r2, #46	; 0x2e
 80153c0:	d014      	beq.n	80153ec <__gethex+0x230>
 80153c2:	2b20      	cmp	r3, #32
 80153c4:	d106      	bne.n	80153d4 <__gethex+0x218>
 80153c6:	9b01      	ldr	r3, [sp, #4]
 80153c8:	f843 bb04 	str.w	fp, [r3], #4
 80153cc:	f04f 0b00 	mov.w	fp, #0
 80153d0:	9301      	str	r3, [sp, #4]
 80153d2:	465b      	mov	r3, fp
 80153d4:	7828      	ldrb	r0, [r5, #0]
 80153d6:	9303      	str	r3, [sp, #12]
 80153d8:	f7ff feda 	bl	8015190 <__hexdig_fun>
 80153dc:	9b03      	ldr	r3, [sp, #12]
 80153de:	f000 000f 	and.w	r0, r0, #15
 80153e2:	4098      	lsls	r0, r3
 80153e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80153e8:	3304      	adds	r3, #4
 80153ea:	e7a1      	b.n	8015330 <__gethex+0x174>
 80153ec:	45a8      	cmp	r8, r5
 80153ee:	d8e8      	bhi.n	80153c2 <__gethex+0x206>
 80153f0:	2201      	movs	r2, #1
 80153f2:	4628      	mov	r0, r5
 80153f4:	9303      	str	r3, [sp, #12]
 80153f6:	f7ff fd0c 	bl	8014e12 <strncmp>
 80153fa:	4926      	ldr	r1, [pc, #152]	; (8015494 <__gethex+0x2d8>)
 80153fc:	9b03      	ldr	r3, [sp, #12]
 80153fe:	2800      	cmp	r0, #0
 8015400:	d1df      	bne.n	80153c2 <__gethex+0x206>
 8015402:	e795      	b.n	8015330 <__gethex+0x174>
 8015404:	f04f 0b03 	mov.w	fp, #3
 8015408:	e7c5      	b.n	8015396 <__gethex+0x1da>
 801540a:	da0b      	bge.n	8015424 <__gethex+0x268>
 801540c:	eba5 0800 	sub.w	r8, r5, r0
 8015410:	4621      	mov	r1, r4
 8015412:	4642      	mov	r2, r8
 8015414:	4648      	mov	r0, r9
 8015416:	f000 fc2d 	bl	8015c74 <__lshift>
 801541a:	eba6 0608 	sub.w	r6, r6, r8
 801541e:	4604      	mov	r4, r0
 8015420:	f100 0a14 	add.w	sl, r0, #20
 8015424:	f04f 0b00 	mov.w	fp, #0
 8015428:	e7ba      	b.n	80153a0 <__gethex+0x1e4>
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	42b3      	cmp	r3, r6
 801542e:	dd73      	ble.n	8015518 <__gethex+0x35c>
 8015430:	1b9e      	subs	r6, r3, r6
 8015432:	42b5      	cmp	r5, r6
 8015434:	dc34      	bgt.n	80154a0 <__gethex+0x2e4>
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2b02      	cmp	r3, #2
 801543a:	d023      	beq.n	8015484 <__gethex+0x2c8>
 801543c:	2b03      	cmp	r3, #3
 801543e:	d025      	beq.n	801548c <__gethex+0x2d0>
 8015440:	2b01      	cmp	r3, #1
 8015442:	d115      	bne.n	8015470 <__gethex+0x2b4>
 8015444:	42b5      	cmp	r5, r6
 8015446:	d113      	bne.n	8015470 <__gethex+0x2b4>
 8015448:	2d01      	cmp	r5, #1
 801544a:	d10b      	bne.n	8015464 <__gethex+0x2a8>
 801544c:	9a02      	ldr	r2, [sp, #8]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	6013      	str	r3, [r2, #0]
 8015452:	2301      	movs	r3, #1
 8015454:	6123      	str	r3, [r4, #16]
 8015456:	f8ca 3000 	str.w	r3, [sl]
 801545a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801545c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015460:	601c      	str	r4, [r3, #0]
 8015462:	e735      	b.n	80152d0 <__gethex+0x114>
 8015464:	1e69      	subs	r1, r5, #1
 8015466:	4620      	mov	r0, r4
 8015468:	f000 fe33 	bl	80160d2 <__any_on>
 801546c:	2800      	cmp	r0, #0
 801546e:	d1ed      	bne.n	801544c <__gethex+0x290>
 8015470:	4621      	mov	r1, r4
 8015472:	4648      	mov	r0, r9
 8015474:	f000 f9e4 	bl	8015840 <_Bfree>
 8015478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801547a:	2300      	movs	r3, #0
 801547c:	6013      	str	r3, [r2, #0]
 801547e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015482:	e725      	b.n	80152d0 <__gethex+0x114>
 8015484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015486:	2b00      	cmp	r3, #0
 8015488:	d1f2      	bne.n	8015470 <__gethex+0x2b4>
 801548a:	e7df      	b.n	801544c <__gethex+0x290>
 801548c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801548e:	2b00      	cmp	r3, #0
 8015490:	d1dc      	bne.n	801544c <__gethex+0x290>
 8015492:	e7ed      	b.n	8015470 <__gethex+0x2b4>
 8015494:	0801a871 	.word	0x0801a871
 8015498:	0801aa15 	.word	0x0801aa15
 801549c:	0801aa26 	.word	0x0801aa26
 80154a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80154a4:	f1bb 0f00 	cmp.w	fp, #0
 80154a8:	d133      	bne.n	8015512 <__gethex+0x356>
 80154aa:	f1b8 0f00 	cmp.w	r8, #0
 80154ae:	d004      	beq.n	80154ba <__gethex+0x2fe>
 80154b0:	4641      	mov	r1, r8
 80154b2:	4620      	mov	r0, r4
 80154b4:	f000 fe0d 	bl	80160d2 <__any_on>
 80154b8:	4683      	mov	fp, r0
 80154ba:	ea4f 1268 	mov.w	r2, r8, asr #5
 80154be:	2301      	movs	r3, #1
 80154c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80154c4:	f008 081f 	and.w	r8, r8, #31
 80154c8:	fa03 f308 	lsl.w	r3, r3, r8
 80154cc:	4213      	tst	r3, r2
 80154ce:	4631      	mov	r1, r6
 80154d0:	4620      	mov	r0, r4
 80154d2:	bf18      	it	ne
 80154d4:	f04b 0b02 	orrne.w	fp, fp, #2
 80154d8:	1bad      	subs	r5, r5, r6
 80154da:	f7ff fe07 	bl	80150ec <rshift>
 80154de:	687e      	ldr	r6, [r7, #4]
 80154e0:	f04f 0802 	mov.w	r8, #2
 80154e4:	f1bb 0f00 	cmp.w	fp, #0
 80154e8:	d04a      	beq.n	8015580 <__gethex+0x3c4>
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	2b02      	cmp	r3, #2
 80154ee:	d016      	beq.n	801551e <__gethex+0x362>
 80154f0:	2b03      	cmp	r3, #3
 80154f2:	d018      	beq.n	8015526 <__gethex+0x36a>
 80154f4:	2b01      	cmp	r3, #1
 80154f6:	d109      	bne.n	801550c <__gethex+0x350>
 80154f8:	f01b 0f02 	tst.w	fp, #2
 80154fc:	d006      	beq.n	801550c <__gethex+0x350>
 80154fe:	f8da 3000 	ldr.w	r3, [sl]
 8015502:	ea4b 0b03 	orr.w	fp, fp, r3
 8015506:	f01b 0f01 	tst.w	fp, #1
 801550a:	d10f      	bne.n	801552c <__gethex+0x370>
 801550c:	f048 0810 	orr.w	r8, r8, #16
 8015510:	e036      	b.n	8015580 <__gethex+0x3c4>
 8015512:	f04f 0b01 	mov.w	fp, #1
 8015516:	e7d0      	b.n	80154ba <__gethex+0x2fe>
 8015518:	f04f 0801 	mov.w	r8, #1
 801551c:	e7e2      	b.n	80154e4 <__gethex+0x328>
 801551e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015520:	f1c3 0301 	rsb	r3, r3, #1
 8015524:	930f      	str	r3, [sp, #60]	; 0x3c
 8015526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015528:	2b00      	cmp	r3, #0
 801552a:	d0ef      	beq.n	801550c <__gethex+0x350>
 801552c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015530:	f104 0214 	add.w	r2, r4, #20
 8015534:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015538:	9301      	str	r3, [sp, #4]
 801553a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801553e:	2300      	movs	r3, #0
 8015540:	4694      	mov	ip, r2
 8015542:	f852 1b04 	ldr.w	r1, [r2], #4
 8015546:	f1b1 3fff 	cmp.w	r1, #4294967295
 801554a:	d01e      	beq.n	801558a <__gethex+0x3ce>
 801554c:	3101      	adds	r1, #1
 801554e:	f8cc 1000 	str.w	r1, [ip]
 8015552:	f1b8 0f02 	cmp.w	r8, #2
 8015556:	f104 0214 	add.w	r2, r4, #20
 801555a:	d13d      	bne.n	80155d8 <__gethex+0x41c>
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	3b01      	subs	r3, #1
 8015560:	42ab      	cmp	r3, r5
 8015562:	d10b      	bne.n	801557c <__gethex+0x3c0>
 8015564:	1169      	asrs	r1, r5, #5
 8015566:	2301      	movs	r3, #1
 8015568:	f005 051f 	and.w	r5, r5, #31
 801556c:	fa03 f505 	lsl.w	r5, r3, r5
 8015570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015574:	421d      	tst	r5, r3
 8015576:	bf18      	it	ne
 8015578:	f04f 0801 	movne.w	r8, #1
 801557c:	f048 0820 	orr.w	r8, r8, #32
 8015580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015582:	601c      	str	r4, [r3, #0]
 8015584:	9b02      	ldr	r3, [sp, #8]
 8015586:	601e      	str	r6, [r3, #0]
 8015588:	e6a2      	b.n	80152d0 <__gethex+0x114>
 801558a:	4290      	cmp	r0, r2
 801558c:	f842 3c04 	str.w	r3, [r2, #-4]
 8015590:	d8d6      	bhi.n	8015540 <__gethex+0x384>
 8015592:	68a2      	ldr	r2, [r4, #8]
 8015594:	4593      	cmp	fp, r2
 8015596:	db17      	blt.n	80155c8 <__gethex+0x40c>
 8015598:	6861      	ldr	r1, [r4, #4]
 801559a:	4648      	mov	r0, r9
 801559c:	3101      	adds	r1, #1
 801559e:	f000 f90f 	bl	80157c0 <_Balloc>
 80155a2:	4682      	mov	sl, r0
 80155a4:	b918      	cbnz	r0, 80155ae <__gethex+0x3f2>
 80155a6:	4b1b      	ldr	r3, [pc, #108]	; (8015614 <__gethex+0x458>)
 80155a8:	4602      	mov	r2, r0
 80155aa:	2184      	movs	r1, #132	; 0x84
 80155ac:	e6b3      	b.n	8015316 <__gethex+0x15a>
 80155ae:	6922      	ldr	r2, [r4, #16]
 80155b0:	3202      	adds	r2, #2
 80155b2:	f104 010c 	add.w	r1, r4, #12
 80155b6:	0092      	lsls	r2, r2, #2
 80155b8:	300c      	adds	r0, #12
 80155ba:	f7ff fd16 	bl	8014fea <memcpy>
 80155be:	4621      	mov	r1, r4
 80155c0:	4648      	mov	r0, r9
 80155c2:	f000 f93d 	bl	8015840 <_Bfree>
 80155c6:	4654      	mov	r4, sl
 80155c8:	6922      	ldr	r2, [r4, #16]
 80155ca:	1c51      	adds	r1, r2, #1
 80155cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80155d0:	6121      	str	r1, [r4, #16]
 80155d2:	2101      	movs	r1, #1
 80155d4:	6151      	str	r1, [r2, #20]
 80155d6:	e7bc      	b.n	8015552 <__gethex+0x396>
 80155d8:	6921      	ldr	r1, [r4, #16]
 80155da:	4559      	cmp	r1, fp
 80155dc:	dd0b      	ble.n	80155f6 <__gethex+0x43a>
 80155de:	2101      	movs	r1, #1
 80155e0:	4620      	mov	r0, r4
 80155e2:	f7ff fd83 	bl	80150ec <rshift>
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	3601      	adds	r6, #1
 80155ea:	42b3      	cmp	r3, r6
 80155ec:	f6ff aedb 	blt.w	80153a6 <__gethex+0x1ea>
 80155f0:	f04f 0801 	mov.w	r8, #1
 80155f4:	e7c2      	b.n	801557c <__gethex+0x3c0>
 80155f6:	f015 051f 	ands.w	r5, r5, #31
 80155fa:	d0f9      	beq.n	80155f0 <__gethex+0x434>
 80155fc:	9b01      	ldr	r3, [sp, #4]
 80155fe:	441a      	add	r2, r3
 8015600:	f1c5 0520 	rsb	r5, r5, #32
 8015604:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015608:	f000 f9cc 	bl	80159a4 <__hi0bits>
 801560c:	42a8      	cmp	r0, r5
 801560e:	dbe6      	blt.n	80155de <__gethex+0x422>
 8015610:	e7ee      	b.n	80155f0 <__gethex+0x434>
 8015612:	bf00      	nop
 8015614:	0801aa15 	.word	0x0801aa15

08015618 <L_shift>:
 8015618:	f1c2 0208 	rsb	r2, r2, #8
 801561c:	0092      	lsls	r2, r2, #2
 801561e:	b570      	push	{r4, r5, r6, lr}
 8015620:	f1c2 0620 	rsb	r6, r2, #32
 8015624:	6843      	ldr	r3, [r0, #4]
 8015626:	6804      	ldr	r4, [r0, #0]
 8015628:	fa03 f506 	lsl.w	r5, r3, r6
 801562c:	432c      	orrs	r4, r5
 801562e:	40d3      	lsrs	r3, r2
 8015630:	6004      	str	r4, [r0, #0]
 8015632:	f840 3f04 	str.w	r3, [r0, #4]!
 8015636:	4288      	cmp	r0, r1
 8015638:	d3f4      	bcc.n	8015624 <L_shift+0xc>
 801563a:	bd70      	pop	{r4, r5, r6, pc}

0801563c <__match>:
 801563c:	b530      	push	{r4, r5, lr}
 801563e:	6803      	ldr	r3, [r0, #0]
 8015640:	3301      	adds	r3, #1
 8015642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015646:	b914      	cbnz	r4, 801564e <__match+0x12>
 8015648:	6003      	str	r3, [r0, #0]
 801564a:	2001      	movs	r0, #1
 801564c:	bd30      	pop	{r4, r5, pc}
 801564e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015652:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015656:	2d19      	cmp	r5, #25
 8015658:	bf98      	it	ls
 801565a:	3220      	addls	r2, #32
 801565c:	42a2      	cmp	r2, r4
 801565e:	d0f0      	beq.n	8015642 <__match+0x6>
 8015660:	2000      	movs	r0, #0
 8015662:	e7f3      	b.n	801564c <__match+0x10>

08015664 <__hexnan>:
 8015664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015668:	680b      	ldr	r3, [r1, #0]
 801566a:	6801      	ldr	r1, [r0, #0]
 801566c:	115e      	asrs	r6, r3, #5
 801566e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015672:	f013 031f 	ands.w	r3, r3, #31
 8015676:	b087      	sub	sp, #28
 8015678:	bf18      	it	ne
 801567a:	3604      	addne	r6, #4
 801567c:	2500      	movs	r5, #0
 801567e:	1f37      	subs	r7, r6, #4
 8015680:	4682      	mov	sl, r0
 8015682:	4690      	mov	r8, r2
 8015684:	9301      	str	r3, [sp, #4]
 8015686:	f846 5c04 	str.w	r5, [r6, #-4]
 801568a:	46b9      	mov	r9, r7
 801568c:	463c      	mov	r4, r7
 801568e:	9502      	str	r5, [sp, #8]
 8015690:	46ab      	mov	fp, r5
 8015692:	784a      	ldrb	r2, [r1, #1]
 8015694:	1c4b      	adds	r3, r1, #1
 8015696:	9303      	str	r3, [sp, #12]
 8015698:	b342      	cbz	r2, 80156ec <__hexnan+0x88>
 801569a:	4610      	mov	r0, r2
 801569c:	9105      	str	r1, [sp, #20]
 801569e:	9204      	str	r2, [sp, #16]
 80156a0:	f7ff fd76 	bl	8015190 <__hexdig_fun>
 80156a4:	2800      	cmp	r0, #0
 80156a6:	d14f      	bne.n	8015748 <__hexnan+0xe4>
 80156a8:	9a04      	ldr	r2, [sp, #16]
 80156aa:	9905      	ldr	r1, [sp, #20]
 80156ac:	2a20      	cmp	r2, #32
 80156ae:	d818      	bhi.n	80156e2 <__hexnan+0x7e>
 80156b0:	9b02      	ldr	r3, [sp, #8]
 80156b2:	459b      	cmp	fp, r3
 80156b4:	dd13      	ble.n	80156de <__hexnan+0x7a>
 80156b6:	454c      	cmp	r4, r9
 80156b8:	d206      	bcs.n	80156c8 <__hexnan+0x64>
 80156ba:	2d07      	cmp	r5, #7
 80156bc:	dc04      	bgt.n	80156c8 <__hexnan+0x64>
 80156be:	462a      	mov	r2, r5
 80156c0:	4649      	mov	r1, r9
 80156c2:	4620      	mov	r0, r4
 80156c4:	f7ff ffa8 	bl	8015618 <L_shift>
 80156c8:	4544      	cmp	r4, r8
 80156ca:	d950      	bls.n	801576e <__hexnan+0x10a>
 80156cc:	2300      	movs	r3, #0
 80156ce:	f1a4 0904 	sub.w	r9, r4, #4
 80156d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80156d6:	f8cd b008 	str.w	fp, [sp, #8]
 80156da:	464c      	mov	r4, r9
 80156dc:	461d      	mov	r5, r3
 80156de:	9903      	ldr	r1, [sp, #12]
 80156e0:	e7d7      	b.n	8015692 <__hexnan+0x2e>
 80156e2:	2a29      	cmp	r2, #41	; 0x29
 80156e4:	d155      	bne.n	8015792 <__hexnan+0x12e>
 80156e6:	3102      	adds	r1, #2
 80156e8:	f8ca 1000 	str.w	r1, [sl]
 80156ec:	f1bb 0f00 	cmp.w	fp, #0
 80156f0:	d04f      	beq.n	8015792 <__hexnan+0x12e>
 80156f2:	454c      	cmp	r4, r9
 80156f4:	d206      	bcs.n	8015704 <__hexnan+0xa0>
 80156f6:	2d07      	cmp	r5, #7
 80156f8:	dc04      	bgt.n	8015704 <__hexnan+0xa0>
 80156fa:	462a      	mov	r2, r5
 80156fc:	4649      	mov	r1, r9
 80156fe:	4620      	mov	r0, r4
 8015700:	f7ff ff8a 	bl	8015618 <L_shift>
 8015704:	4544      	cmp	r4, r8
 8015706:	d934      	bls.n	8015772 <__hexnan+0x10e>
 8015708:	f1a8 0204 	sub.w	r2, r8, #4
 801570c:	4623      	mov	r3, r4
 801570e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015712:	f842 1f04 	str.w	r1, [r2, #4]!
 8015716:	429f      	cmp	r7, r3
 8015718:	d2f9      	bcs.n	801570e <__hexnan+0xaa>
 801571a:	1b3b      	subs	r3, r7, r4
 801571c:	f023 0303 	bic.w	r3, r3, #3
 8015720:	3304      	adds	r3, #4
 8015722:	3e03      	subs	r6, #3
 8015724:	3401      	adds	r4, #1
 8015726:	42a6      	cmp	r6, r4
 8015728:	bf38      	it	cc
 801572a:	2304      	movcc	r3, #4
 801572c:	4443      	add	r3, r8
 801572e:	2200      	movs	r2, #0
 8015730:	f843 2b04 	str.w	r2, [r3], #4
 8015734:	429f      	cmp	r7, r3
 8015736:	d2fb      	bcs.n	8015730 <__hexnan+0xcc>
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	b91b      	cbnz	r3, 8015744 <__hexnan+0xe0>
 801573c:	4547      	cmp	r7, r8
 801573e:	d126      	bne.n	801578e <__hexnan+0x12a>
 8015740:	2301      	movs	r3, #1
 8015742:	603b      	str	r3, [r7, #0]
 8015744:	2005      	movs	r0, #5
 8015746:	e025      	b.n	8015794 <__hexnan+0x130>
 8015748:	3501      	adds	r5, #1
 801574a:	2d08      	cmp	r5, #8
 801574c:	f10b 0b01 	add.w	fp, fp, #1
 8015750:	dd06      	ble.n	8015760 <__hexnan+0xfc>
 8015752:	4544      	cmp	r4, r8
 8015754:	d9c3      	bls.n	80156de <__hexnan+0x7a>
 8015756:	2300      	movs	r3, #0
 8015758:	f844 3c04 	str.w	r3, [r4, #-4]
 801575c:	2501      	movs	r5, #1
 801575e:	3c04      	subs	r4, #4
 8015760:	6822      	ldr	r2, [r4, #0]
 8015762:	f000 000f 	and.w	r0, r0, #15
 8015766:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801576a:	6020      	str	r0, [r4, #0]
 801576c:	e7b7      	b.n	80156de <__hexnan+0x7a>
 801576e:	2508      	movs	r5, #8
 8015770:	e7b5      	b.n	80156de <__hexnan+0x7a>
 8015772:	9b01      	ldr	r3, [sp, #4]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d0df      	beq.n	8015738 <__hexnan+0xd4>
 8015778:	f1c3 0320 	rsb	r3, r3, #32
 801577c:	f04f 32ff 	mov.w	r2, #4294967295
 8015780:	40da      	lsrs	r2, r3
 8015782:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015786:	4013      	ands	r3, r2
 8015788:	f846 3c04 	str.w	r3, [r6, #-4]
 801578c:	e7d4      	b.n	8015738 <__hexnan+0xd4>
 801578e:	3f04      	subs	r7, #4
 8015790:	e7d2      	b.n	8015738 <__hexnan+0xd4>
 8015792:	2004      	movs	r0, #4
 8015794:	b007      	add	sp, #28
 8015796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801579a <__ascii_mbtowc>:
 801579a:	b082      	sub	sp, #8
 801579c:	b901      	cbnz	r1, 80157a0 <__ascii_mbtowc+0x6>
 801579e:	a901      	add	r1, sp, #4
 80157a0:	b142      	cbz	r2, 80157b4 <__ascii_mbtowc+0x1a>
 80157a2:	b14b      	cbz	r3, 80157b8 <__ascii_mbtowc+0x1e>
 80157a4:	7813      	ldrb	r3, [r2, #0]
 80157a6:	600b      	str	r3, [r1, #0]
 80157a8:	7812      	ldrb	r2, [r2, #0]
 80157aa:	1e10      	subs	r0, r2, #0
 80157ac:	bf18      	it	ne
 80157ae:	2001      	movne	r0, #1
 80157b0:	b002      	add	sp, #8
 80157b2:	4770      	bx	lr
 80157b4:	4610      	mov	r0, r2
 80157b6:	e7fb      	b.n	80157b0 <__ascii_mbtowc+0x16>
 80157b8:	f06f 0001 	mvn.w	r0, #1
 80157bc:	e7f8      	b.n	80157b0 <__ascii_mbtowc+0x16>
	...

080157c0 <_Balloc>:
 80157c0:	b570      	push	{r4, r5, r6, lr}
 80157c2:	69c6      	ldr	r6, [r0, #28]
 80157c4:	4604      	mov	r4, r0
 80157c6:	460d      	mov	r5, r1
 80157c8:	b976      	cbnz	r6, 80157e8 <_Balloc+0x28>
 80157ca:	2010      	movs	r0, #16
 80157cc:	f7fe f9fa 	bl	8013bc4 <malloc>
 80157d0:	4602      	mov	r2, r0
 80157d2:	61e0      	str	r0, [r4, #28]
 80157d4:	b920      	cbnz	r0, 80157e0 <_Balloc+0x20>
 80157d6:	4b18      	ldr	r3, [pc, #96]	; (8015838 <_Balloc+0x78>)
 80157d8:	4818      	ldr	r0, [pc, #96]	; (801583c <_Balloc+0x7c>)
 80157da:	216b      	movs	r1, #107	; 0x6b
 80157dc:	f7ff fc1c 	bl	8015018 <__assert_func>
 80157e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157e4:	6006      	str	r6, [r0, #0]
 80157e6:	60c6      	str	r6, [r0, #12]
 80157e8:	69e6      	ldr	r6, [r4, #28]
 80157ea:	68f3      	ldr	r3, [r6, #12]
 80157ec:	b183      	cbz	r3, 8015810 <_Balloc+0x50>
 80157ee:	69e3      	ldr	r3, [r4, #28]
 80157f0:	68db      	ldr	r3, [r3, #12]
 80157f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80157f6:	b9b8      	cbnz	r0, 8015828 <_Balloc+0x68>
 80157f8:	2101      	movs	r1, #1
 80157fa:	fa01 f605 	lsl.w	r6, r1, r5
 80157fe:	1d72      	adds	r2, r6, #5
 8015800:	0092      	lsls	r2, r2, #2
 8015802:	4620      	mov	r0, r4
 8015804:	f001 fdb7 	bl	8017376 <_calloc_r>
 8015808:	b160      	cbz	r0, 8015824 <_Balloc+0x64>
 801580a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801580e:	e00e      	b.n	801582e <_Balloc+0x6e>
 8015810:	2221      	movs	r2, #33	; 0x21
 8015812:	2104      	movs	r1, #4
 8015814:	4620      	mov	r0, r4
 8015816:	f001 fdae 	bl	8017376 <_calloc_r>
 801581a:	69e3      	ldr	r3, [r4, #28]
 801581c:	60f0      	str	r0, [r6, #12]
 801581e:	68db      	ldr	r3, [r3, #12]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d1e4      	bne.n	80157ee <_Balloc+0x2e>
 8015824:	2000      	movs	r0, #0
 8015826:	bd70      	pop	{r4, r5, r6, pc}
 8015828:	6802      	ldr	r2, [r0, #0]
 801582a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801582e:	2300      	movs	r3, #0
 8015830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015834:	e7f7      	b.n	8015826 <_Balloc+0x66>
 8015836:	bf00      	nop
 8015838:	0801a802 	.word	0x0801a802
 801583c:	0801aa86 	.word	0x0801aa86

08015840 <_Bfree>:
 8015840:	b570      	push	{r4, r5, r6, lr}
 8015842:	69c6      	ldr	r6, [r0, #28]
 8015844:	4605      	mov	r5, r0
 8015846:	460c      	mov	r4, r1
 8015848:	b976      	cbnz	r6, 8015868 <_Bfree+0x28>
 801584a:	2010      	movs	r0, #16
 801584c:	f7fe f9ba 	bl	8013bc4 <malloc>
 8015850:	4602      	mov	r2, r0
 8015852:	61e8      	str	r0, [r5, #28]
 8015854:	b920      	cbnz	r0, 8015860 <_Bfree+0x20>
 8015856:	4b09      	ldr	r3, [pc, #36]	; (801587c <_Bfree+0x3c>)
 8015858:	4809      	ldr	r0, [pc, #36]	; (8015880 <_Bfree+0x40>)
 801585a:	218f      	movs	r1, #143	; 0x8f
 801585c:	f7ff fbdc 	bl	8015018 <__assert_func>
 8015860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015864:	6006      	str	r6, [r0, #0]
 8015866:	60c6      	str	r6, [r0, #12]
 8015868:	b13c      	cbz	r4, 801587a <_Bfree+0x3a>
 801586a:	69eb      	ldr	r3, [r5, #28]
 801586c:	6862      	ldr	r2, [r4, #4]
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015874:	6021      	str	r1, [r4, #0]
 8015876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801587a:	bd70      	pop	{r4, r5, r6, pc}
 801587c:	0801a802 	.word	0x0801a802
 8015880:	0801aa86 	.word	0x0801aa86

08015884 <__multadd>:
 8015884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015888:	690d      	ldr	r5, [r1, #16]
 801588a:	4607      	mov	r7, r0
 801588c:	460c      	mov	r4, r1
 801588e:	461e      	mov	r6, r3
 8015890:	f101 0c14 	add.w	ip, r1, #20
 8015894:	2000      	movs	r0, #0
 8015896:	f8dc 3000 	ldr.w	r3, [ip]
 801589a:	b299      	uxth	r1, r3
 801589c:	fb02 6101 	mla	r1, r2, r1, r6
 80158a0:	0c1e      	lsrs	r6, r3, #16
 80158a2:	0c0b      	lsrs	r3, r1, #16
 80158a4:	fb02 3306 	mla	r3, r2, r6, r3
 80158a8:	b289      	uxth	r1, r1
 80158aa:	3001      	adds	r0, #1
 80158ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80158b0:	4285      	cmp	r5, r0
 80158b2:	f84c 1b04 	str.w	r1, [ip], #4
 80158b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80158ba:	dcec      	bgt.n	8015896 <__multadd+0x12>
 80158bc:	b30e      	cbz	r6, 8015902 <__multadd+0x7e>
 80158be:	68a3      	ldr	r3, [r4, #8]
 80158c0:	42ab      	cmp	r3, r5
 80158c2:	dc19      	bgt.n	80158f8 <__multadd+0x74>
 80158c4:	6861      	ldr	r1, [r4, #4]
 80158c6:	4638      	mov	r0, r7
 80158c8:	3101      	adds	r1, #1
 80158ca:	f7ff ff79 	bl	80157c0 <_Balloc>
 80158ce:	4680      	mov	r8, r0
 80158d0:	b928      	cbnz	r0, 80158de <__multadd+0x5a>
 80158d2:	4602      	mov	r2, r0
 80158d4:	4b0c      	ldr	r3, [pc, #48]	; (8015908 <__multadd+0x84>)
 80158d6:	480d      	ldr	r0, [pc, #52]	; (801590c <__multadd+0x88>)
 80158d8:	21ba      	movs	r1, #186	; 0xba
 80158da:	f7ff fb9d 	bl	8015018 <__assert_func>
 80158de:	6922      	ldr	r2, [r4, #16]
 80158e0:	3202      	adds	r2, #2
 80158e2:	f104 010c 	add.w	r1, r4, #12
 80158e6:	0092      	lsls	r2, r2, #2
 80158e8:	300c      	adds	r0, #12
 80158ea:	f7ff fb7e 	bl	8014fea <memcpy>
 80158ee:	4621      	mov	r1, r4
 80158f0:	4638      	mov	r0, r7
 80158f2:	f7ff ffa5 	bl	8015840 <_Bfree>
 80158f6:	4644      	mov	r4, r8
 80158f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80158fc:	3501      	adds	r5, #1
 80158fe:	615e      	str	r6, [r3, #20]
 8015900:	6125      	str	r5, [r4, #16]
 8015902:	4620      	mov	r0, r4
 8015904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015908:	0801aa15 	.word	0x0801aa15
 801590c:	0801aa86 	.word	0x0801aa86

08015910 <__s2b>:
 8015910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015914:	460c      	mov	r4, r1
 8015916:	4615      	mov	r5, r2
 8015918:	461f      	mov	r7, r3
 801591a:	2209      	movs	r2, #9
 801591c:	3308      	adds	r3, #8
 801591e:	4606      	mov	r6, r0
 8015920:	fb93 f3f2 	sdiv	r3, r3, r2
 8015924:	2100      	movs	r1, #0
 8015926:	2201      	movs	r2, #1
 8015928:	429a      	cmp	r2, r3
 801592a:	db09      	blt.n	8015940 <__s2b+0x30>
 801592c:	4630      	mov	r0, r6
 801592e:	f7ff ff47 	bl	80157c0 <_Balloc>
 8015932:	b940      	cbnz	r0, 8015946 <__s2b+0x36>
 8015934:	4602      	mov	r2, r0
 8015936:	4b19      	ldr	r3, [pc, #100]	; (801599c <__s2b+0x8c>)
 8015938:	4819      	ldr	r0, [pc, #100]	; (80159a0 <__s2b+0x90>)
 801593a:	21d3      	movs	r1, #211	; 0xd3
 801593c:	f7ff fb6c 	bl	8015018 <__assert_func>
 8015940:	0052      	lsls	r2, r2, #1
 8015942:	3101      	adds	r1, #1
 8015944:	e7f0      	b.n	8015928 <__s2b+0x18>
 8015946:	9b08      	ldr	r3, [sp, #32]
 8015948:	6143      	str	r3, [r0, #20]
 801594a:	2d09      	cmp	r5, #9
 801594c:	f04f 0301 	mov.w	r3, #1
 8015950:	6103      	str	r3, [r0, #16]
 8015952:	dd16      	ble.n	8015982 <__s2b+0x72>
 8015954:	f104 0909 	add.w	r9, r4, #9
 8015958:	46c8      	mov	r8, r9
 801595a:	442c      	add	r4, r5
 801595c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015960:	4601      	mov	r1, r0
 8015962:	3b30      	subs	r3, #48	; 0x30
 8015964:	220a      	movs	r2, #10
 8015966:	4630      	mov	r0, r6
 8015968:	f7ff ff8c 	bl	8015884 <__multadd>
 801596c:	45a0      	cmp	r8, r4
 801596e:	d1f5      	bne.n	801595c <__s2b+0x4c>
 8015970:	f1a5 0408 	sub.w	r4, r5, #8
 8015974:	444c      	add	r4, r9
 8015976:	1b2d      	subs	r5, r5, r4
 8015978:	1963      	adds	r3, r4, r5
 801597a:	42bb      	cmp	r3, r7
 801597c:	db04      	blt.n	8015988 <__s2b+0x78>
 801597e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015982:	340a      	adds	r4, #10
 8015984:	2509      	movs	r5, #9
 8015986:	e7f6      	b.n	8015976 <__s2b+0x66>
 8015988:	f814 3b01 	ldrb.w	r3, [r4], #1
 801598c:	4601      	mov	r1, r0
 801598e:	3b30      	subs	r3, #48	; 0x30
 8015990:	220a      	movs	r2, #10
 8015992:	4630      	mov	r0, r6
 8015994:	f7ff ff76 	bl	8015884 <__multadd>
 8015998:	e7ee      	b.n	8015978 <__s2b+0x68>
 801599a:	bf00      	nop
 801599c:	0801aa15 	.word	0x0801aa15
 80159a0:	0801aa86 	.word	0x0801aa86

080159a4 <__hi0bits>:
 80159a4:	0c03      	lsrs	r3, r0, #16
 80159a6:	041b      	lsls	r3, r3, #16
 80159a8:	b9d3      	cbnz	r3, 80159e0 <__hi0bits+0x3c>
 80159aa:	0400      	lsls	r0, r0, #16
 80159ac:	2310      	movs	r3, #16
 80159ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80159b2:	bf04      	itt	eq
 80159b4:	0200      	lsleq	r0, r0, #8
 80159b6:	3308      	addeq	r3, #8
 80159b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80159bc:	bf04      	itt	eq
 80159be:	0100      	lsleq	r0, r0, #4
 80159c0:	3304      	addeq	r3, #4
 80159c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80159c6:	bf04      	itt	eq
 80159c8:	0080      	lsleq	r0, r0, #2
 80159ca:	3302      	addeq	r3, #2
 80159cc:	2800      	cmp	r0, #0
 80159ce:	db05      	blt.n	80159dc <__hi0bits+0x38>
 80159d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80159d4:	f103 0301 	add.w	r3, r3, #1
 80159d8:	bf08      	it	eq
 80159da:	2320      	moveq	r3, #32
 80159dc:	4618      	mov	r0, r3
 80159de:	4770      	bx	lr
 80159e0:	2300      	movs	r3, #0
 80159e2:	e7e4      	b.n	80159ae <__hi0bits+0xa>

080159e4 <__lo0bits>:
 80159e4:	6803      	ldr	r3, [r0, #0]
 80159e6:	f013 0207 	ands.w	r2, r3, #7
 80159ea:	d00c      	beq.n	8015a06 <__lo0bits+0x22>
 80159ec:	07d9      	lsls	r1, r3, #31
 80159ee:	d422      	bmi.n	8015a36 <__lo0bits+0x52>
 80159f0:	079a      	lsls	r2, r3, #30
 80159f2:	bf49      	itett	mi
 80159f4:	085b      	lsrmi	r3, r3, #1
 80159f6:	089b      	lsrpl	r3, r3, #2
 80159f8:	6003      	strmi	r3, [r0, #0]
 80159fa:	2201      	movmi	r2, #1
 80159fc:	bf5c      	itt	pl
 80159fe:	6003      	strpl	r3, [r0, #0]
 8015a00:	2202      	movpl	r2, #2
 8015a02:	4610      	mov	r0, r2
 8015a04:	4770      	bx	lr
 8015a06:	b299      	uxth	r1, r3
 8015a08:	b909      	cbnz	r1, 8015a0e <__lo0bits+0x2a>
 8015a0a:	0c1b      	lsrs	r3, r3, #16
 8015a0c:	2210      	movs	r2, #16
 8015a0e:	b2d9      	uxtb	r1, r3
 8015a10:	b909      	cbnz	r1, 8015a16 <__lo0bits+0x32>
 8015a12:	3208      	adds	r2, #8
 8015a14:	0a1b      	lsrs	r3, r3, #8
 8015a16:	0719      	lsls	r1, r3, #28
 8015a18:	bf04      	itt	eq
 8015a1a:	091b      	lsreq	r3, r3, #4
 8015a1c:	3204      	addeq	r2, #4
 8015a1e:	0799      	lsls	r1, r3, #30
 8015a20:	bf04      	itt	eq
 8015a22:	089b      	lsreq	r3, r3, #2
 8015a24:	3202      	addeq	r2, #2
 8015a26:	07d9      	lsls	r1, r3, #31
 8015a28:	d403      	bmi.n	8015a32 <__lo0bits+0x4e>
 8015a2a:	085b      	lsrs	r3, r3, #1
 8015a2c:	f102 0201 	add.w	r2, r2, #1
 8015a30:	d003      	beq.n	8015a3a <__lo0bits+0x56>
 8015a32:	6003      	str	r3, [r0, #0]
 8015a34:	e7e5      	b.n	8015a02 <__lo0bits+0x1e>
 8015a36:	2200      	movs	r2, #0
 8015a38:	e7e3      	b.n	8015a02 <__lo0bits+0x1e>
 8015a3a:	2220      	movs	r2, #32
 8015a3c:	e7e1      	b.n	8015a02 <__lo0bits+0x1e>
	...

08015a40 <__i2b>:
 8015a40:	b510      	push	{r4, lr}
 8015a42:	460c      	mov	r4, r1
 8015a44:	2101      	movs	r1, #1
 8015a46:	f7ff febb 	bl	80157c0 <_Balloc>
 8015a4a:	4602      	mov	r2, r0
 8015a4c:	b928      	cbnz	r0, 8015a5a <__i2b+0x1a>
 8015a4e:	4b05      	ldr	r3, [pc, #20]	; (8015a64 <__i2b+0x24>)
 8015a50:	4805      	ldr	r0, [pc, #20]	; (8015a68 <__i2b+0x28>)
 8015a52:	f240 1145 	movw	r1, #325	; 0x145
 8015a56:	f7ff fadf 	bl	8015018 <__assert_func>
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	6144      	str	r4, [r0, #20]
 8015a5e:	6103      	str	r3, [r0, #16]
 8015a60:	bd10      	pop	{r4, pc}
 8015a62:	bf00      	nop
 8015a64:	0801aa15 	.word	0x0801aa15
 8015a68:	0801aa86 	.word	0x0801aa86

08015a6c <__multiply>:
 8015a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a70:	4691      	mov	r9, r2
 8015a72:	690a      	ldr	r2, [r1, #16]
 8015a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	bfb8      	it	lt
 8015a7c:	460b      	movlt	r3, r1
 8015a7e:	460c      	mov	r4, r1
 8015a80:	bfbc      	itt	lt
 8015a82:	464c      	movlt	r4, r9
 8015a84:	4699      	movlt	r9, r3
 8015a86:	6927      	ldr	r7, [r4, #16]
 8015a88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015a8c:	68a3      	ldr	r3, [r4, #8]
 8015a8e:	6861      	ldr	r1, [r4, #4]
 8015a90:	eb07 060a 	add.w	r6, r7, sl
 8015a94:	42b3      	cmp	r3, r6
 8015a96:	b085      	sub	sp, #20
 8015a98:	bfb8      	it	lt
 8015a9a:	3101      	addlt	r1, #1
 8015a9c:	f7ff fe90 	bl	80157c0 <_Balloc>
 8015aa0:	b930      	cbnz	r0, 8015ab0 <__multiply+0x44>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	4b44      	ldr	r3, [pc, #272]	; (8015bb8 <__multiply+0x14c>)
 8015aa6:	4845      	ldr	r0, [pc, #276]	; (8015bbc <__multiply+0x150>)
 8015aa8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015aac:	f7ff fab4 	bl	8015018 <__assert_func>
 8015ab0:	f100 0514 	add.w	r5, r0, #20
 8015ab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015ab8:	462b      	mov	r3, r5
 8015aba:	2200      	movs	r2, #0
 8015abc:	4543      	cmp	r3, r8
 8015abe:	d321      	bcc.n	8015b04 <__multiply+0x98>
 8015ac0:	f104 0314 	add.w	r3, r4, #20
 8015ac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015ac8:	f109 0314 	add.w	r3, r9, #20
 8015acc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015ad0:	9202      	str	r2, [sp, #8]
 8015ad2:	1b3a      	subs	r2, r7, r4
 8015ad4:	3a15      	subs	r2, #21
 8015ad6:	f022 0203 	bic.w	r2, r2, #3
 8015ada:	3204      	adds	r2, #4
 8015adc:	f104 0115 	add.w	r1, r4, #21
 8015ae0:	428f      	cmp	r7, r1
 8015ae2:	bf38      	it	cc
 8015ae4:	2204      	movcc	r2, #4
 8015ae6:	9201      	str	r2, [sp, #4]
 8015ae8:	9a02      	ldr	r2, [sp, #8]
 8015aea:	9303      	str	r3, [sp, #12]
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d80c      	bhi.n	8015b0a <__multiply+0x9e>
 8015af0:	2e00      	cmp	r6, #0
 8015af2:	dd03      	ble.n	8015afc <__multiply+0x90>
 8015af4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d05b      	beq.n	8015bb4 <__multiply+0x148>
 8015afc:	6106      	str	r6, [r0, #16]
 8015afe:	b005      	add	sp, #20
 8015b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b04:	f843 2b04 	str.w	r2, [r3], #4
 8015b08:	e7d8      	b.n	8015abc <__multiply+0x50>
 8015b0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8015b0e:	f1ba 0f00 	cmp.w	sl, #0
 8015b12:	d024      	beq.n	8015b5e <__multiply+0xf2>
 8015b14:	f104 0e14 	add.w	lr, r4, #20
 8015b18:	46a9      	mov	r9, r5
 8015b1a:	f04f 0c00 	mov.w	ip, #0
 8015b1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015b22:	f8d9 1000 	ldr.w	r1, [r9]
 8015b26:	fa1f fb82 	uxth.w	fp, r2
 8015b2a:	b289      	uxth	r1, r1
 8015b2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015b30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015b34:	f8d9 2000 	ldr.w	r2, [r9]
 8015b38:	4461      	add	r1, ip
 8015b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015b3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015b46:	b289      	uxth	r1, r1
 8015b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015b4c:	4577      	cmp	r7, lr
 8015b4e:	f849 1b04 	str.w	r1, [r9], #4
 8015b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015b56:	d8e2      	bhi.n	8015b1e <__multiply+0xb2>
 8015b58:	9a01      	ldr	r2, [sp, #4]
 8015b5a:	f845 c002 	str.w	ip, [r5, r2]
 8015b5e:	9a03      	ldr	r2, [sp, #12]
 8015b60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015b64:	3304      	adds	r3, #4
 8015b66:	f1b9 0f00 	cmp.w	r9, #0
 8015b6a:	d021      	beq.n	8015bb0 <__multiply+0x144>
 8015b6c:	6829      	ldr	r1, [r5, #0]
 8015b6e:	f104 0c14 	add.w	ip, r4, #20
 8015b72:	46ae      	mov	lr, r5
 8015b74:	f04f 0a00 	mov.w	sl, #0
 8015b78:	f8bc b000 	ldrh.w	fp, [ip]
 8015b7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015b80:	fb09 220b 	mla	r2, r9, fp, r2
 8015b84:	4452      	add	r2, sl
 8015b86:	b289      	uxth	r1, r1
 8015b88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015b8c:	f84e 1b04 	str.w	r1, [lr], #4
 8015b90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015b94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015b98:	f8be 1000 	ldrh.w	r1, [lr]
 8015b9c:	fb09 110a 	mla	r1, r9, sl, r1
 8015ba0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015ba4:	4567      	cmp	r7, ip
 8015ba6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015baa:	d8e5      	bhi.n	8015b78 <__multiply+0x10c>
 8015bac:	9a01      	ldr	r2, [sp, #4]
 8015bae:	50a9      	str	r1, [r5, r2]
 8015bb0:	3504      	adds	r5, #4
 8015bb2:	e799      	b.n	8015ae8 <__multiply+0x7c>
 8015bb4:	3e01      	subs	r6, #1
 8015bb6:	e79b      	b.n	8015af0 <__multiply+0x84>
 8015bb8:	0801aa15 	.word	0x0801aa15
 8015bbc:	0801aa86 	.word	0x0801aa86

08015bc0 <__pow5mult>:
 8015bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bc4:	4615      	mov	r5, r2
 8015bc6:	f012 0203 	ands.w	r2, r2, #3
 8015bca:	4606      	mov	r6, r0
 8015bcc:	460f      	mov	r7, r1
 8015bce:	d007      	beq.n	8015be0 <__pow5mult+0x20>
 8015bd0:	4c25      	ldr	r4, [pc, #148]	; (8015c68 <__pow5mult+0xa8>)
 8015bd2:	3a01      	subs	r2, #1
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015bda:	f7ff fe53 	bl	8015884 <__multadd>
 8015bde:	4607      	mov	r7, r0
 8015be0:	10ad      	asrs	r5, r5, #2
 8015be2:	d03d      	beq.n	8015c60 <__pow5mult+0xa0>
 8015be4:	69f4      	ldr	r4, [r6, #28]
 8015be6:	b97c      	cbnz	r4, 8015c08 <__pow5mult+0x48>
 8015be8:	2010      	movs	r0, #16
 8015bea:	f7fd ffeb 	bl	8013bc4 <malloc>
 8015bee:	4602      	mov	r2, r0
 8015bf0:	61f0      	str	r0, [r6, #28]
 8015bf2:	b928      	cbnz	r0, 8015c00 <__pow5mult+0x40>
 8015bf4:	4b1d      	ldr	r3, [pc, #116]	; (8015c6c <__pow5mult+0xac>)
 8015bf6:	481e      	ldr	r0, [pc, #120]	; (8015c70 <__pow5mult+0xb0>)
 8015bf8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015bfc:	f7ff fa0c 	bl	8015018 <__assert_func>
 8015c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c04:	6004      	str	r4, [r0, #0]
 8015c06:	60c4      	str	r4, [r0, #12]
 8015c08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c10:	b94c      	cbnz	r4, 8015c26 <__pow5mult+0x66>
 8015c12:	f240 2171 	movw	r1, #625	; 0x271
 8015c16:	4630      	mov	r0, r6
 8015c18:	f7ff ff12 	bl	8015a40 <__i2b>
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c22:	4604      	mov	r4, r0
 8015c24:	6003      	str	r3, [r0, #0]
 8015c26:	f04f 0900 	mov.w	r9, #0
 8015c2a:	07eb      	lsls	r3, r5, #31
 8015c2c:	d50a      	bpl.n	8015c44 <__pow5mult+0x84>
 8015c2e:	4639      	mov	r1, r7
 8015c30:	4622      	mov	r2, r4
 8015c32:	4630      	mov	r0, r6
 8015c34:	f7ff ff1a 	bl	8015a6c <__multiply>
 8015c38:	4639      	mov	r1, r7
 8015c3a:	4680      	mov	r8, r0
 8015c3c:	4630      	mov	r0, r6
 8015c3e:	f7ff fdff 	bl	8015840 <_Bfree>
 8015c42:	4647      	mov	r7, r8
 8015c44:	106d      	asrs	r5, r5, #1
 8015c46:	d00b      	beq.n	8015c60 <__pow5mult+0xa0>
 8015c48:	6820      	ldr	r0, [r4, #0]
 8015c4a:	b938      	cbnz	r0, 8015c5c <__pow5mult+0x9c>
 8015c4c:	4622      	mov	r2, r4
 8015c4e:	4621      	mov	r1, r4
 8015c50:	4630      	mov	r0, r6
 8015c52:	f7ff ff0b 	bl	8015a6c <__multiply>
 8015c56:	6020      	str	r0, [r4, #0]
 8015c58:	f8c0 9000 	str.w	r9, [r0]
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	e7e4      	b.n	8015c2a <__pow5mult+0x6a>
 8015c60:	4638      	mov	r0, r7
 8015c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c66:	bf00      	nop
 8015c68:	0801abd0 	.word	0x0801abd0
 8015c6c:	0801a802 	.word	0x0801a802
 8015c70:	0801aa86 	.word	0x0801aa86

08015c74 <__lshift>:
 8015c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c78:	460c      	mov	r4, r1
 8015c7a:	6849      	ldr	r1, [r1, #4]
 8015c7c:	6923      	ldr	r3, [r4, #16]
 8015c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015c82:	68a3      	ldr	r3, [r4, #8]
 8015c84:	4607      	mov	r7, r0
 8015c86:	4691      	mov	r9, r2
 8015c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015c8c:	f108 0601 	add.w	r6, r8, #1
 8015c90:	42b3      	cmp	r3, r6
 8015c92:	db0b      	blt.n	8015cac <__lshift+0x38>
 8015c94:	4638      	mov	r0, r7
 8015c96:	f7ff fd93 	bl	80157c0 <_Balloc>
 8015c9a:	4605      	mov	r5, r0
 8015c9c:	b948      	cbnz	r0, 8015cb2 <__lshift+0x3e>
 8015c9e:	4602      	mov	r2, r0
 8015ca0:	4b28      	ldr	r3, [pc, #160]	; (8015d44 <__lshift+0xd0>)
 8015ca2:	4829      	ldr	r0, [pc, #164]	; (8015d48 <__lshift+0xd4>)
 8015ca4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015ca8:	f7ff f9b6 	bl	8015018 <__assert_func>
 8015cac:	3101      	adds	r1, #1
 8015cae:	005b      	lsls	r3, r3, #1
 8015cb0:	e7ee      	b.n	8015c90 <__lshift+0x1c>
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	f100 0114 	add.w	r1, r0, #20
 8015cb8:	f100 0210 	add.w	r2, r0, #16
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	4553      	cmp	r3, sl
 8015cc0:	db33      	blt.n	8015d2a <__lshift+0xb6>
 8015cc2:	6920      	ldr	r0, [r4, #16]
 8015cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015cc8:	f104 0314 	add.w	r3, r4, #20
 8015ccc:	f019 091f 	ands.w	r9, r9, #31
 8015cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015cd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015cd8:	d02b      	beq.n	8015d32 <__lshift+0xbe>
 8015cda:	f1c9 0e20 	rsb	lr, r9, #32
 8015cde:	468a      	mov	sl, r1
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	6818      	ldr	r0, [r3, #0]
 8015ce4:	fa00 f009 	lsl.w	r0, r0, r9
 8015ce8:	4310      	orrs	r0, r2
 8015cea:	f84a 0b04 	str.w	r0, [sl], #4
 8015cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cf2:	459c      	cmp	ip, r3
 8015cf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015cf8:	d8f3      	bhi.n	8015ce2 <__lshift+0x6e>
 8015cfa:	ebac 0304 	sub.w	r3, ip, r4
 8015cfe:	3b15      	subs	r3, #21
 8015d00:	f023 0303 	bic.w	r3, r3, #3
 8015d04:	3304      	adds	r3, #4
 8015d06:	f104 0015 	add.w	r0, r4, #21
 8015d0a:	4584      	cmp	ip, r0
 8015d0c:	bf38      	it	cc
 8015d0e:	2304      	movcc	r3, #4
 8015d10:	50ca      	str	r2, [r1, r3]
 8015d12:	b10a      	cbz	r2, 8015d18 <__lshift+0xa4>
 8015d14:	f108 0602 	add.w	r6, r8, #2
 8015d18:	3e01      	subs	r6, #1
 8015d1a:	4638      	mov	r0, r7
 8015d1c:	612e      	str	r6, [r5, #16]
 8015d1e:	4621      	mov	r1, r4
 8015d20:	f7ff fd8e 	bl	8015840 <_Bfree>
 8015d24:	4628      	mov	r0, r5
 8015d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015d2e:	3301      	adds	r3, #1
 8015d30:	e7c5      	b.n	8015cbe <__lshift+0x4a>
 8015d32:	3904      	subs	r1, #4
 8015d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8015d3c:	459c      	cmp	ip, r3
 8015d3e:	d8f9      	bhi.n	8015d34 <__lshift+0xc0>
 8015d40:	e7ea      	b.n	8015d18 <__lshift+0xa4>
 8015d42:	bf00      	nop
 8015d44:	0801aa15 	.word	0x0801aa15
 8015d48:	0801aa86 	.word	0x0801aa86

08015d4c <__mcmp>:
 8015d4c:	b530      	push	{r4, r5, lr}
 8015d4e:	6902      	ldr	r2, [r0, #16]
 8015d50:	690c      	ldr	r4, [r1, #16]
 8015d52:	1b12      	subs	r2, r2, r4
 8015d54:	d10e      	bne.n	8015d74 <__mcmp+0x28>
 8015d56:	f100 0314 	add.w	r3, r0, #20
 8015d5a:	3114      	adds	r1, #20
 8015d5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015d60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015d64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015d68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015d6c:	42a5      	cmp	r5, r4
 8015d6e:	d003      	beq.n	8015d78 <__mcmp+0x2c>
 8015d70:	d305      	bcc.n	8015d7e <__mcmp+0x32>
 8015d72:	2201      	movs	r2, #1
 8015d74:	4610      	mov	r0, r2
 8015d76:	bd30      	pop	{r4, r5, pc}
 8015d78:	4283      	cmp	r3, r0
 8015d7a:	d3f3      	bcc.n	8015d64 <__mcmp+0x18>
 8015d7c:	e7fa      	b.n	8015d74 <__mcmp+0x28>
 8015d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d82:	e7f7      	b.n	8015d74 <__mcmp+0x28>

08015d84 <__mdiff>:
 8015d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d88:	460c      	mov	r4, r1
 8015d8a:	4606      	mov	r6, r0
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	4620      	mov	r0, r4
 8015d90:	4690      	mov	r8, r2
 8015d92:	f7ff ffdb 	bl	8015d4c <__mcmp>
 8015d96:	1e05      	subs	r5, r0, #0
 8015d98:	d110      	bne.n	8015dbc <__mdiff+0x38>
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	4630      	mov	r0, r6
 8015d9e:	f7ff fd0f 	bl	80157c0 <_Balloc>
 8015da2:	b930      	cbnz	r0, 8015db2 <__mdiff+0x2e>
 8015da4:	4b3a      	ldr	r3, [pc, #232]	; (8015e90 <__mdiff+0x10c>)
 8015da6:	4602      	mov	r2, r0
 8015da8:	f240 2137 	movw	r1, #567	; 0x237
 8015dac:	4839      	ldr	r0, [pc, #228]	; (8015e94 <__mdiff+0x110>)
 8015dae:	f7ff f933 	bl	8015018 <__assert_func>
 8015db2:	2301      	movs	r3, #1
 8015db4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dbc:	bfa4      	itt	ge
 8015dbe:	4643      	movge	r3, r8
 8015dc0:	46a0      	movge	r8, r4
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015dc8:	bfa6      	itte	ge
 8015dca:	461c      	movge	r4, r3
 8015dcc:	2500      	movge	r5, #0
 8015dce:	2501      	movlt	r5, #1
 8015dd0:	f7ff fcf6 	bl	80157c0 <_Balloc>
 8015dd4:	b920      	cbnz	r0, 8015de0 <__mdiff+0x5c>
 8015dd6:	4b2e      	ldr	r3, [pc, #184]	; (8015e90 <__mdiff+0x10c>)
 8015dd8:	4602      	mov	r2, r0
 8015dda:	f240 2145 	movw	r1, #581	; 0x245
 8015dde:	e7e5      	b.n	8015dac <__mdiff+0x28>
 8015de0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015de4:	6926      	ldr	r6, [r4, #16]
 8015de6:	60c5      	str	r5, [r0, #12]
 8015de8:	f104 0914 	add.w	r9, r4, #20
 8015dec:	f108 0514 	add.w	r5, r8, #20
 8015df0:	f100 0e14 	add.w	lr, r0, #20
 8015df4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015df8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015dfc:	f108 0210 	add.w	r2, r8, #16
 8015e00:	46f2      	mov	sl, lr
 8015e02:	2100      	movs	r1, #0
 8015e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8015e08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015e0c:	fa11 f88b 	uxtah	r8, r1, fp
 8015e10:	b299      	uxth	r1, r3
 8015e12:	0c1b      	lsrs	r3, r3, #16
 8015e14:	eba8 0801 	sub.w	r8, r8, r1
 8015e18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015e1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015e20:	fa1f f888 	uxth.w	r8, r8
 8015e24:	1419      	asrs	r1, r3, #16
 8015e26:	454e      	cmp	r6, r9
 8015e28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015e2c:	f84a 3b04 	str.w	r3, [sl], #4
 8015e30:	d8e8      	bhi.n	8015e04 <__mdiff+0x80>
 8015e32:	1b33      	subs	r3, r6, r4
 8015e34:	3b15      	subs	r3, #21
 8015e36:	f023 0303 	bic.w	r3, r3, #3
 8015e3a:	3304      	adds	r3, #4
 8015e3c:	3415      	adds	r4, #21
 8015e3e:	42a6      	cmp	r6, r4
 8015e40:	bf38      	it	cc
 8015e42:	2304      	movcc	r3, #4
 8015e44:	441d      	add	r5, r3
 8015e46:	4473      	add	r3, lr
 8015e48:	469e      	mov	lr, r3
 8015e4a:	462e      	mov	r6, r5
 8015e4c:	4566      	cmp	r6, ip
 8015e4e:	d30e      	bcc.n	8015e6e <__mdiff+0xea>
 8015e50:	f10c 0203 	add.w	r2, ip, #3
 8015e54:	1b52      	subs	r2, r2, r5
 8015e56:	f022 0203 	bic.w	r2, r2, #3
 8015e5a:	3d03      	subs	r5, #3
 8015e5c:	45ac      	cmp	ip, r5
 8015e5e:	bf38      	it	cc
 8015e60:	2200      	movcc	r2, #0
 8015e62:	4413      	add	r3, r2
 8015e64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015e68:	b17a      	cbz	r2, 8015e8a <__mdiff+0x106>
 8015e6a:	6107      	str	r7, [r0, #16]
 8015e6c:	e7a4      	b.n	8015db8 <__mdiff+0x34>
 8015e6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8015e72:	fa11 f288 	uxtah	r2, r1, r8
 8015e76:	1414      	asrs	r4, r2, #16
 8015e78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015e7c:	b292      	uxth	r2, r2
 8015e7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015e82:	f84e 2b04 	str.w	r2, [lr], #4
 8015e86:	1421      	asrs	r1, r4, #16
 8015e88:	e7e0      	b.n	8015e4c <__mdiff+0xc8>
 8015e8a:	3f01      	subs	r7, #1
 8015e8c:	e7ea      	b.n	8015e64 <__mdiff+0xe0>
 8015e8e:	bf00      	nop
 8015e90:	0801aa15 	.word	0x0801aa15
 8015e94:	0801aa86 	.word	0x0801aa86

08015e98 <__ulp>:
 8015e98:	b082      	sub	sp, #8
 8015e9a:	ed8d 0b00 	vstr	d0, [sp]
 8015e9e:	9a01      	ldr	r2, [sp, #4]
 8015ea0:	4b0f      	ldr	r3, [pc, #60]	; (8015ee0 <__ulp+0x48>)
 8015ea2:	4013      	ands	r3, r2
 8015ea4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	dc08      	bgt.n	8015ebe <__ulp+0x26>
 8015eac:	425b      	negs	r3, r3
 8015eae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015eb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015eb6:	da04      	bge.n	8015ec2 <__ulp+0x2a>
 8015eb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015ebc:	4113      	asrs	r3, r2
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	e008      	b.n	8015ed4 <__ulp+0x3c>
 8015ec2:	f1a2 0314 	sub.w	r3, r2, #20
 8015ec6:	2b1e      	cmp	r3, #30
 8015ec8:	bfda      	itte	le
 8015eca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015ece:	40da      	lsrle	r2, r3
 8015ed0:	2201      	movgt	r2, #1
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	4619      	mov	r1, r3
 8015ed6:	4610      	mov	r0, r2
 8015ed8:	ec41 0b10 	vmov	d0, r0, r1
 8015edc:	b002      	add	sp, #8
 8015ede:	4770      	bx	lr
 8015ee0:	7ff00000 	.word	0x7ff00000

08015ee4 <__b2d>:
 8015ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ee8:	6906      	ldr	r6, [r0, #16]
 8015eea:	f100 0814 	add.w	r8, r0, #20
 8015eee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015ef2:	1f37      	subs	r7, r6, #4
 8015ef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015ef8:	4610      	mov	r0, r2
 8015efa:	f7ff fd53 	bl	80159a4 <__hi0bits>
 8015efe:	f1c0 0320 	rsb	r3, r0, #32
 8015f02:	280a      	cmp	r0, #10
 8015f04:	600b      	str	r3, [r1, #0]
 8015f06:	491b      	ldr	r1, [pc, #108]	; (8015f74 <__b2d+0x90>)
 8015f08:	dc15      	bgt.n	8015f36 <__b2d+0x52>
 8015f0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8015f0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8015f12:	45b8      	cmp	r8, r7
 8015f14:	ea43 0501 	orr.w	r5, r3, r1
 8015f18:	bf34      	ite	cc
 8015f1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015f1e:	2300      	movcs	r3, #0
 8015f20:	3015      	adds	r0, #21
 8015f22:	fa02 f000 	lsl.w	r0, r2, r0
 8015f26:	fa23 f30c 	lsr.w	r3, r3, ip
 8015f2a:	4303      	orrs	r3, r0
 8015f2c:	461c      	mov	r4, r3
 8015f2e:	ec45 4b10 	vmov	d0, r4, r5
 8015f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f36:	45b8      	cmp	r8, r7
 8015f38:	bf3a      	itte	cc
 8015f3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015f3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8015f42:	2300      	movcs	r3, #0
 8015f44:	380b      	subs	r0, #11
 8015f46:	d012      	beq.n	8015f6e <__b2d+0x8a>
 8015f48:	f1c0 0120 	rsb	r1, r0, #32
 8015f4c:	fa23 f401 	lsr.w	r4, r3, r1
 8015f50:	4082      	lsls	r2, r0
 8015f52:	4322      	orrs	r2, r4
 8015f54:	4547      	cmp	r7, r8
 8015f56:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8015f5a:	bf8c      	ite	hi
 8015f5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015f60:	2200      	movls	r2, #0
 8015f62:	4083      	lsls	r3, r0
 8015f64:	40ca      	lsrs	r2, r1
 8015f66:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015f6a:	4313      	orrs	r3, r2
 8015f6c:	e7de      	b.n	8015f2c <__b2d+0x48>
 8015f6e:	ea42 0501 	orr.w	r5, r2, r1
 8015f72:	e7db      	b.n	8015f2c <__b2d+0x48>
 8015f74:	3ff00000 	.word	0x3ff00000

08015f78 <__d2b>:
 8015f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	2101      	movs	r1, #1
 8015f80:	ec59 8b10 	vmov	r8, r9, d0
 8015f84:	4616      	mov	r6, r2
 8015f86:	f7ff fc1b 	bl	80157c0 <_Balloc>
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	b930      	cbnz	r0, 8015f9c <__d2b+0x24>
 8015f8e:	4602      	mov	r2, r0
 8015f90:	4b24      	ldr	r3, [pc, #144]	; (8016024 <__d2b+0xac>)
 8015f92:	4825      	ldr	r0, [pc, #148]	; (8016028 <__d2b+0xb0>)
 8015f94:	f240 310f 	movw	r1, #783	; 0x30f
 8015f98:	f7ff f83e 	bl	8015018 <__assert_func>
 8015f9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015fa4:	bb2d      	cbnz	r5, 8015ff2 <__d2b+0x7a>
 8015fa6:	9301      	str	r3, [sp, #4]
 8015fa8:	f1b8 0300 	subs.w	r3, r8, #0
 8015fac:	d026      	beq.n	8015ffc <__d2b+0x84>
 8015fae:	4668      	mov	r0, sp
 8015fb0:	9300      	str	r3, [sp, #0]
 8015fb2:	f7ff fd17 	bl	80159e4 <__lo0bits>
 8015fb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015fba:	b1e8      	cbz	r0, 8015ff8 <__d2b+0x80>
 8015fbc:	f1c0 0320 	rsb	r3, r0, #32
 8015fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8015fc4:	430b      	orrs	r3, r1
 8015fc6:	40c2      	lsrs	r2, r0
 8015fc8:	6163      	str	r3, [r4, #20]
 8015fca:	9201      	str	r2, [sp, #4]
 8015fcc:	9b01      	ldr	r3, [sp, #4]
 8015fce:	61a3      	str	r3, [r4, #24]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	bf14      	ite	ne
 8015fd4:	2202      	movne	r2, #2
 8015fd6:	2201      	moveq	r2, #1
 8015fd8:	6122      	str	r2, [r4, #16]
 8015fda:	b1bd      	cbz	r5, 801600c <__d2b+0x94>
 8015fdc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015fe0:	4405      	add	r5, r0
 8015fe2:	603d      	str	r5, [r7, #0]
 8015fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015fe8:	6030      	str	r0, [r6, #0]
 8015fea:	4620      	mov	r0, r4
 8015fec:	b003      	add	sp, #12
 8015fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ff6:	e7d6      	b.n	8015fa6 <__d2b+0x2e>
 8015ff8:	6161      	str	r1, [r4, #20]
 8015ffa:	e7e7      	b.n	8015fcc <__d2b+0x54>
 8015ffc:	a801      	add	r0, sp, #4
 8015ffe:	f7ff fcf1 	bl	80159e4 <__lo0bits>
 8016002:	9b01      	ldr	r3, [sp, #4]
 8016004:	6163      	str	r3, [r4, #20]
 8016006:	3020      	adds	r0, #32
 8016008:	2201      	movs	r2, #1
 801600a:	e7e5      	b.n	8015fd8 <__d2b+0x60>
 801600c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016014:	6038      	str	r0, [r7, #0]
 8016016:	6918      	ldr	r0, [r3, #16]
 8016018:	f7ff fcc4 	bl	80159a4 <__hi0bits>
 801601c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016020:	e7e2      	b.n	8015fe8 <__d2b+0x70>
 8016022:	bf00      	nop
 8016024:	0801aa15 	.word	0x0801aa15
 8016028:	0801aa86 	.word	0x0801aa86

0801602c <__ratio>:
 801602c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016030:	4688      	mov	r8, r1
 8016032:	4669      	mov	r1, sp
 8016034:	4681      	mov	r9, r0
 8016036:	f7ff ff55 	bl	8015ee4 <__b2d>
 801603a:	a901      	add	r1, sp, #4
 801603c:	4640      	mov	r0, r8
 801603e:	ec55 4b10 	vmov	r4, r5, d0
 8016042:	ee10 aa10 	vmov	sl, s0
 8016046:	f7ff ff4d 	bl	8015ee4 <__b2d>
 801604a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801604e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016052:	1ad2      	subs	r2, r2, r3
 8016054:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016058:	1a5b      	subs	r3, r3, r1
 801605a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801605e:	ec57 6b10 	vmov	r6, r7, d0
 8016062:	2b00      	cmp	r3, #0
 8016064:	bfd6      	itet	le
 8016066:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801606a:	462a      	movgt	r2, r5
 801606c:	463a      	movle	r2, r7
 801606e:	46ab      	mov	fp, r5
 8016070:	bfd6      	itet	le
 8016072:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016076:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801607a:	ee00 3a90 	vmovle	s1, r3
 801607e:	ec4b ab17 	vmov	d7, sl, fp
 8016082:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016086:	b003      	add	sp, #12
 8016088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801608c <__copybits>:
 801608c:	3901      	subs	r1, #1
 801608e:	b570      	push	{r4, r5, r6, lr}
 8016090:	1149      	asrs	r1, r1, #5
 8016092:	6914      	ldr	r4, [r2, #16]
 8016094:	3101      	adds	r1, #1
 8016096:	f102 0314 	add.w	r3, r2, #20
 801609a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801609e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80160a2:	1f05      	subs	r5, r0, #4
 80160a4:	42a3      	cmp	r3, r4
 80160a6:	d30c      	bcc.n	80160c2 <__copybits+0x36>
 80160a8:	1aa3      	subs	r3, r4, r2
 80160aa:	3b11      	subs	r3, #17
 80160ac:	f023 0303 	bic.w	r3, r3, #3
 80160b0:	3211      	adds	r2, #17
 80160b2:	42a2      	cmp	r2, r4
 80160b4:	bf88      	it	hi
 80160b6:	2300      	movhi	r3, #0
 80160b8:	4418      	add	r0, r3
 80160ba:	2300      	movs	r3, #0
 80160bc:	4288      	cmp	r0, r1
 80160be:	d305      	bcc.n	80160cc <__copybits+0x40>
 80160c0:	bd70      	pop	{r4, r5, r6, pc}
 80160c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80160c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80160ca:	e7eb      	b.n	80160a4 <__copybits+0x18>
 80160cc:	f840 3b04 	str.w	r3, [r0], #4
 80160d0:	e7f4      	b.n	80160bc <__copybits+0x30>

080160d2 <__any_on>:
 80160d2:	f100 0214 	add.w	r2, r0, #20
 80160d6:	6900      	ldr	r0, [r0, #16]
 80160d8:	114b      	asrs	r3, r1, #5
 80160da:	4298      	cmp	r0, r3
 80160dc:	b510      	push	{r4, lr}
 80160de:	db11      	blt.n	8016104 <__any_on+0x32>
 80160e0:	dd0a      	ble.n	80160f8 <__any_on+0x26>
 80160e2:	f011 011f 	ands.w	r1, r1, #31
 80160e6:	d007      	beq.n	80160f8 <__any_on+0x26>
 80160e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80160ec:	fa24 f001 	lsr.w	r0, r4, r1
 80160f0:	fa00 f101 	lsl.w	r1, r0, r1
 80160f4:	428c      	cmp	r4, r1
 80160f6:	d10b      	bne.n	8016110 <__any_on+0x3e>
 80160f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80160fc:	4293      	cmp	r3, r2
 80160fe:	d803      	bhi.n	8016108 <__any_on+0x36>
 8016100:	2000      	movs	r0, #0
 8016102:	bd10      	pop	{r4, pc}
 8016104:	4603      	mov	r3, r0
 8016106:	e7f7      	b.n	80160f8 <__any_on+0x26>
 8016108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801610c:	2900      	cmp	r1, #0
 801610e:	d0f5      	beq.n	80160fc <__any_on+0x2a>
 8016110:	2001      	movs	r0, #1
 8016112:	e7f6      	b.n	8016102 <__any_on+0x30>

08016114 <_malloc_usable_size_r>:
 8016114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016118:	1f18      	subs	r0, r3, #4
 801611a:	2b00      	cmp	r3, #0
 801611c:	bfbc      	itt	lt
 801611e:	580b      	ldrlt	r3, [r1, r0]
 8016120:	18c0      	addlt	r0, r0, r3
 8016122:	4770      	bx	lr

08016124 <__ascii_wctomb>:
 8016124:	b149      	cbz	r1, 801613a <__ascii_wctomb+0x16>
 8016126:	2aff      	cmp	r2, #255	; 0xff
 8016128:	bf85      	ittet	hi
 801612a:	238a      	movhi	r3, #138	; 0x8a
 801612c:	6003      	strhi	r3, [r0, #0]
 801612e:	700a      	strbls	r2, [r1, #0]
 8016130:	f04f 30ff 	movhi.w	r0, #4294967295
 8016134:	bf98      	it	ls
 8016136:	2001      	movls	r0, #1
 8016138:	4770      	bx	lr
 801613a:	4608      	mov	r0, r1
 801613c:	4770      	bx	lr

0801613e <__ssputs_r>:
 801613e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016142:	688e      	ldr	r6, [r1, #8]
 8016144:	461f      	mov	r7, r3
 8016146:	42be      	cmp	r6, r7
 8016148:	680b      	ldr	r3, [r1, #0]
 801614a:	4682      	mov	sl, r0
 801614c:	460c      	mov	r4, r1
 801614e:	4690      	mov	r8, r2
 8016150:	d82c      	bhi.n	80161ac <__ssputs_r+0x6e>
 8016152:	898a      	ldrh	r2, [r1, #12]
 8016154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016158:	d026      	beq.n	80161a8 <__ssputs_r+0x6a>
 801615a:	6965      	ldr	r5, [r4, #20]
 801615c:	6909      	ldr	r1, [r1, #16]
 801615e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016162:	eba3 0901 	sub.w	r9, r3, r1
 8016166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801616a:	1c7b      	adds	r3, r7, #1
 801616c:	444b      	add	r3, r9
 801616e:	106d      	asrs	r5, r5, #1
 8016170:	429d      	cmp	r5, r3
 8016172:	bf38      	it	cc
 8016174:	461d      	movcc	r5, r3
 8016176:	0553      	lsls	r3, r2, #21
 8016178:	d527      	bpl.n	80161ca <__ssputs_r+0x8c>
 801617a:	4629      	mov	r1, r5
 801617c:	f7fd fd52 	bl	8013c24 <_malloc_r>
 8016180:	4606      	mov	r6, r0
 8016182:	b360      	cbz	r0, 80161de <__ssputs_r+0xa0>
 8016184:	6921      	ldr	r1, [r4, #16]
 8016186:	464a      	mov	r2, r9
 8016188:	f7fe ff2f 	bl	8014fea <memcpy>
 801618c:	89a3      	ldrh	r3, [r4, #12]
 801618e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016196:	81a3      	strh	r3, [r4, #12]
 8016198:	6126      	str	r6, [r4, #16]
 801619a:	6165      	str	r5, [r4, #20]
 801619c:	444e      	add	r6, r9
 801619e:	eba5 0509 	sub.w	r5, r5, r9
 80161a2:	6026      	str	r6, [r4, #0]
 80161a4:	60a5      	str	r5, [r4, #8]
 80161a6:	463e      	mov	r6, r7
 80161a8:	42be      	cmp	r6, r7
 80161aa:	d900      	bls.n	80161ae <__ssputs_r+0x70>
 80161ac:	463e      	mov	r6, r7
 80161ae:	6820      	ldr	r0, [r4, #0]
 80161b0:	4632      	mov	r2, r6
 80161b2:	4641      	mov	r1, r8
 80161b4:	f7fe fe0b 	bl	8014dce <memmove>
 80161b8:	68a3      	ldr	r3, [r4, #8]
 80161ba:	1b9b      	subs	r3, r3, r6
 80161bc:	60a3      	str	r3, [r4, #8]
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	4433      	add	r3, r6
 80161c2:	6023      	str	r3, [r4, #0]
 80161c4:	2000      	movs	r0, #0
 80161c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161ca:	462a      	mov	r2, r5
 80161cc:	f7fd fdfc 	bl	8013dc8 <_realloc_r>
 80161d0:	4606      	mov	r6, r0
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d1e0      	bne.n	8016198 <__ssputs_r+0x5a>
 80161d6:	6921      	ldr	r1, [r4, #16]
 80161d8:	4650      	mov	r0, sl
 80161da:	f7fe ff3b 	bl	8015054 <_free_r>
 80161de:	230c      	movs	r3, #12
 80161e0:	f8ca 3000 	str.w	r3, [sl]
 80161e4:	89a3      	ldrh	r3, [r4, #12]
 80161e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161ea:	81a3      	strh	r3, [r4, #12]
 80161ec:	f04f 30ff 	mov.w	r0, #4294967295
 80161f0:	e7e9      	b.n	80161c6 <__ssputs_r+0x88>
	...

080161f4 <_svfiprintf_r>:
 80161f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f8:	4698      	mov	r8, r3
 80161fa:	898b      	ldrh	r3, [r1, #12]
 80161fc:	061b      	lsls	r3, r3, #24
 80161fe:	b09d      	sub	sp, #116	; 0x74
 8016200:	4607      	mov	r7, r0
 8016202:	460d      	mov	r5, r1
 8016204:	4614      	mov	r4, r2
 8016206:	d50e      	bpl.n	8016226 <_svfiprintf_r+0x32>
 8016208:	690b      	ldr	r3, [r1, #16]
 801620a:	b963      	cbnz	r3, 8016226 <_svfiprintf_r+0x32>
 801620c:	2140      	movs	r1, #64	; 0x40
 801620e:	f7fd fd09 	bl	8013c24 <_malloc_r>
 8016212:	6028      	str	r0, [r5, #0]
 8016214:	6128      	str	r0, [r5, #16]
 8016216:	b920      	cbnz	r0, 8016222 <_svfiprintf_r+0x2e>
 8016218:	230c      	movs	r3, #12
 801621a:	603b      	str	r3, [r7, #0]
 801621c:	f04f 30ff 	mov.w	r0, #4294967295
 8016220:	e0d0      	b.n	80163c4 <_svfiprintf_r+0x1d0>
 8016222:	2340      	movs	r3, #64	; 0x40
 8016224:	616b      	str	r3, [r5, #20]
 8016226:	2300      	movs	r3, #0
 8016228:	9309      	str	r3, [sp, #36]	; 0x24
 801622a:	2320      	movs	r3, #32
 801622c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016230:	f8cd 800c 	str.w	r8, [sp, #12]
 8016234:	2330      	movs	r3, #48	; 0x30
 8016236:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80163dc <_svfiprintf_r+0x1e8>
 801623a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801623e:	f04f 0901 	mov.w	r9, #1
 8016242:	4623      	mov	r3, r4
 8016244:	469a      	mov	sl, r3
 8016246:	f813 2b01 	ldrb.w	r2, [r3], #1
 801624a:	b10a      	cbz	r2, 8016250 <_svfiprintf_r+0x5c>
 801624c:	2a25      	cmp	r2, #37	; 0x25
 801624e:	d1f9      	bne.n	8016244 <_svfiprintf_r+0x50>
 8016250:	ebba 0b04 	subs.w	fp, sl, r4
 8016254:	d00b      	beq.n	801626e <_svfiprintf_r+0x7a>
 8016256:	465b      	mov	r3, fp
 8016258:	4622      	mov	r2, r4
 801625a:	4629      	mov	r1, r5
 801625c:	4638      	mov	r0, r7
 801625e:	f7ff ff6e 	bl	801613e <__ssputs_r>
 8016262:	3001      	adds	r0, #1
 8016264:	f000 80a9 	beq.w	80163ba <_svfiprintf_r+0x1c6>
 8016268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801626a:	445a      	add	r2, fp
 801626c:	9209      	str	r2, [sp, #36]	; 0x24
 801626e:	f89a 3000 	ldrb.w	r3, [sl]
 8016272:	2b00      	cmp	r3, #0
 8016274:	f000 80a1 	beq.w	80163ba <_svfiprintf_r+0x1c6>
 8016278:	2300      	movs	r3, #0
 801627a:	f04f 32ff 	mov.w	r2, #4294967295
 801627e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016282:	f10a 0a01 	add.w	sl, sl, #1
 8016286:	9304      	str	r3, [sp, #16]
 8016288:	9307      	str	r3, [sp, #28]
 801628a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801628e:	931a      	str	r3, [sp, #104]	; 0x68
 8016290:	4654      	mov	r4, sl
 8016292:	2205      	movs	r2, #5
 8016294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016298:	4850      	ldr	r0, [pc, #320]	; (80163dc <_svfiprintf_r+0x1e8>)
 801629a:	f7ea f839 	bl	8000310 <memchr>
 801629e:	9a04      	ldr	r2, [sp, #16]
 80162a0:	b9d8      	cbnz	r0, 80162da <_svfiprintf_r+0xe6>
 80162a2:	06d0      	lsls	r0, r2, #27
 80162a4:	bf44      	itt	mi
 80162a6:	2320      	movmi	r3, #32
 80162a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162ac:	0711      	lsls	r1, r2, #28
 80162ae:	bf44      	itt	mi
 80162b0:	232b      	movmi	r3, #43	; 0x2b
 80162b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162b6:	f89a 3000 	ldrb.w	r3, [sl]
 80162ba:	2b2a      	cmp	r3, #42	; 0x2a
 80162bc:	d015      	beq.n	80162ea <_svfiprintf_r+0xf6>
 80162be:	9a07      	ldr	r2, [sp, #28]
 80162c0:	4654      	mov	r4, sl
 80162c2:	2000      	movs	r0, #0
 80162c4:	f04f 0c0a 	mov.w	ip, #10
 80162c8:	4621      	mov	r1, r4
 80162ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162ce:	3b30      	subs	r3, #48	; 0x30
 80162d0:	2b09      	cmp	r3, #9
 80162d2:	d94d      	bls.n	8016370 <_svfiprintf_r+0x17c>
 80162d4:	b1b0      	cbz	r0, 8016304 <_svfiprintf_r+0x110>
 80162d6:	9207      	str	r2, [sp, #28]
 80162d8:	e014      	b.n	8016304 <_svfiprintf_r+0x110>
 80162da:	eba0 0308 	sub.w	r3, r0, r8
 80162de:	fa09 f303 	lsl.w	r3, r9, r3
 80162e2:	4313      	orrs	r3, r2
 80162e4:	9304      	str	r3, [sp, #16]
 80162e6:	46a2      	mov	sl, r4
 80162e8:	e7d2      	b.n	8016290 <_svfiprintf_r+0x9c>
 80162ea:	9b03      	ldr	r3, [sp, #12]
 80162ec:	1d19      	adds	r1, r3, #4
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	9103      	str	r1, [sp, #12]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	bfbb      	ittet	lt
 80162f6:	425b      	neglt	r3, r3
 80162f8:	f042 0202 	orrlt.w	r2, r2, #2
 80162fc:	9307      	strge	r3, [sp, #28]
 80162fe:	9307      	strlt	r3, [sp, #28]
 8016300:	bfb8      	it	lt
 8016302:	9204      	strlt	r2, [sp, #16]
 8016304:	7823      	ldrb	r3, [r4, #0]
 8016306:	2b2e      	cmp	r3, #46	; 0x2e
 8016308:	d10c      	bne.n	8016324 <_svfiprintf_r+0x130>
 801630a:	7863      	ldrb	r3, [r4, #1]
 801630c:	2b2a      	cmp	r3, #42	; 0x2a
 801630e:	d134      	bne.n	801637a <_svfiprintf_r+0x186>
 8016310:	9b03      	ldr	r3, [sp, #12]
 8016312:	1d1a      	adds	r2, r3, #4
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	9203      	str	r2, [sp, #12]
 8016318:	2b00      	cmp	r3, #0
 801631a:	bfb8      	it	lt
 801631c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016320:	3402      	adds	r4, #2
 8016322:	9305      	str	r3, [sp, #20]
 8016324:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80163ec <_svfiprintf_r+0x1f8>
 8016328:	7821      	ldrb	r1, [r4, #0]
 801632a:	2203      	movs	r2, #3
 801632c:	4650      	mov	r0, sl
 801632e:	f7e9 ffef 	bl	8000310 <memchr>
 8016332:	b138      	cbz	r0, 8016344 <_svfiprintf_r+0x150>
 8016334:	9b04      	ldr	r3, [sp, #16]
 8016336:	eba0 000a 	sub.w	r0, r0, sl
 801633a:	2240      	movs	r2, #64	; 0x40
 801633c:	4082      	lsls	r2, r0
 801633e:	4313      	orrs	r3, r2
 8016340:	3401      	adds	r4, #1
 8016342:	9304      	str	r3, [sp, #16]
 8016344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016348:	4825      	ldr	r0, [pc, #148]	; (80163e0 <_svfiprintf_r+0x1ec>)
 801634a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801634e:	2206      	movs	r2, #6
 8016350:	f7e9 ffde 	bl	8000310 <memchr>
 8016354:	2800      	cmp	r0, #0
 8016356:	d038      	beq.n	80163ca <_svfiprintf_r+0x1d6>
 8016358:	4b22      	ldr	r3, [pc, #136]	; (80163e4 <_svfiprintf_r+0x1f0>)
 801635a:	bb1b      	cbnz	r3, 80163a4 <_svfiprintf_r+0x1b0>
 801635c:	9b03      	ldr	r3, [sp, #12]
 801635e:	3307      	adds	r3, #7
 8016360:	f023 0307 	bic.w	r3, r3, #7
 8016364:	3308      	adds	r3, #8
 8016366:	9303      	str	r3, [sp, #12]
 8016368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801636a:	4433      	add	r3, r6
 801636c:	9309      	str	r3, [sp, #36]	; 0x24
 801636e:	e768      	b.n	8016242 <_svfiprintf_r+0x4e>
 8016370:	fb0c 3202 	mla	r2, ip, r2, r3
 8016374:	460c      	mov	r4, r1
 8016376:	2001      	movs	r0, #1
 8016378:	e7a6      	b.n	80162c8 <_svfiprintf_r+0xd4>
 801637a:	2300      	movs	r3, #0
 801637c:	3401      	adds	r4, #1
 801637e:	9305      	str	r3, [sp, #20]
 8016380:	4619      	mov	r1, r3
 8016382:	f04f 0c0a 	mov.w	ip, #10
 8016386:	4620      	mov	r0, r4
 8016388:	f810 2b01 	ldrb.w	r2, [r0], #1
 801638c:	3a30      	subs	r2, #48	; 0x30
 801638e:	2a09      	cmp	r2, #9
 8016390:	d903      	bls.n	801639a <_svfiprintf_r+0x1a6>
 8016392:	2b00      	cmp	r3, #0
 8016394:	d0c6      	beq.n	8016324 <_svfiprintf_r+0x130>
 8016396:	9105      	str	r1, [sp, #20]
 8016398:	e7c4      	b.n	8016324 <_svfiprintf_r+0x130>
 801639a:	fb0c 2101 	mla	r1, ip, r1, r2
 801639e:	4604      	mov	r4, r0
 80163a0:	2301      	movs	r3, #1
 80163a2:	e7f0      	b.n	8016386 <_svfiprintf_r+0x192>
 80163a4:	ab03      	add	r3, sp, #12
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	462a      	mov	r2, r5
 80163aa:	4b0f      	ldr	r3, [pc, #60]	; (80163e8 <_svfiprintf_r+0x1f4>)
 80163ac:	a904      	add	r1, sp, #16
 80163ae:	4638      	mov	r0, r7
 80163b0:	f3af 8000 	nop.w
 80163b4:	1c42      	adds	r2, r0, #1
 80163b6:	4606      	mov	r6, r0
 80163b8:	d1d6      	bne.n	8016368 <_svfiprintf_r+0x174>
 80163ba:	89ab      	ldrh	r3, [r5, #12]
 80163bc:	065b      	lsls	r3, r3, #25
 80163be:	f53f af2d 	bmi.w	801621c <_svfiprintf_r+0x28>
 80163c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163c4:	b01d      	add	sp, #116	; 0x74
 80163c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ca:	ab03      	add	r3, sp, #12
 80163cc:	9300      	str	r3, [sp, #0]
 80163ce:	462a      	mov	r2, r5
 80163d0:	4b05      	ldr	r3, [pc, #20]	; (80163e8 <_svfiprintf_r+0x1f4>)
 80163d2:	a904      	add	r1, sp, #16
 80163d4:	4638      	mov	r0, r7
 80163d6:	f000 fb8f 	bl	8016af8 <_printf_i>
 80163da:	e7eb      	b.n	80163b4 <_svfiprintf_r+0x1c0>
 80163dc:	0801abdc 	.word	0x0801abdc
 80163e0:	0801abe6 	.word	0x0801abe6
 80163e4:	00000000 	.word	0x00000000
 80163e8:	0801613f 	.word	0x0801613f
 80163ec:	0801abe2 	.word	0x0801abe2

080163f0 <_sungetc_r>:
 80163f0:	b538      	push	{r3, r4, r5, lr}
 80163f2:	1c4b      	adds	r3, r1, #1
 80163f4:	4614      	mov	r4, r2
 80163f6:	d103      	bne.n	8016400 <_sungetc_r+0x10>
 80163f8:	f04f 35ff 	mov.w	r5, #4294967295
 80163fc:	4628      	mov	r0, r5
 80163fe:	bd38      	pop	{r3, r4, r5, pc}
 8016400:	8993      	ldrh	r3, [r2, #12]
 8016402:	f023 0320 	bic.w	r3, r3, #32
 8016406:	8193      	strh	r3, [r2, #12]
 8016408:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801640a:	6852      	ldr	r2, [r2, #4]
 801640c:	b2cd      	uxtb	r5, r1
 801640e:	b18b      	cbz	r3, 8016434 <_sungetc_r+0x44>
 8016410:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016412:	4293      	cmp	r3, r2
 8016414:	dd08      	ble.n	8016428 <_sungetc_r+0x38>
 8016416:	6823      	ldr	r3, [r4, #0]
 8016418:	1e5a      	subs	r2, r3, #1
 801641a:	6022      	str	r2, [r4, #0]
 801641c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016420:	6863      	ldr	r3, [r4, #4]
 8016422:	3301      	adds	r3, #1
 8016424:	6063      	str	r3, [r4, #4]
 8016426:	e7e9      	b.n	80163fc <_sungetc_r+0xc>
 8016428:	4621      	mov	r1, r4
 801642a:	f000 fece 	bl	80171ca <__submore>
 801642e:	2800      	cmp	r0, #0
 8016430:	d0f1      	beq.n	8016416 <_sungetc_r+0x26>
 8016432:	e7e1      	b.n	80163f8 <_sungetc_r+0x8>
 8016434:	6921      	ldr	r1, [r4, #16]
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	b151      	cbz	r1, 8016450 <_sungetc_r+0x60>
 801643a:	4299      	cmp	r1, r3
 801643c:	d208      	bcs.n	8016450 <_sungetc_r+0x60>
 801643e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016442:	42a9      	cmp	r1, r5
 8016444:	d104      	bne.n	8016450 <_sungetc_r+0x60>
 8016446:	3b01      	subs	r3, #1
 8016448:	3201      	adds	r2, #1
 801644a:	6023      	str	r3, [r4, #0]
 801644c:	6062      	str	r2, [r4, #4]
 801644e:	e7d5      	b.n	80163fc <_sungetc_r+0xc>
 8016450:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016458:	6363      	str	r3, [r4, #52]	; 0x34
 801645a:	2303      	movs	r3, #3
 801645c:	63a3      	str	r3, [r4, #56]	; 0x38
 801645e:	4623      	mov	r3, r4
 8016460:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016464:	6023      	str	r3, [r4, #0]
 8016466:	2301      	movs	r3, #1
 8016468:	e7dc      	b.n	8016424 <_sungetc_r+0x34>

0801646a <__ssrefill_r>:
 801646a:	b510      	push	{r4, lr}
 801646c:	460c      	mov	r4, r1
 801646e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016470:	b169      	cbz	r1, 801648e <__ssrefill_r+0x24>
 8016472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016476:	4299      	cmp	r1, r3
 8016478:	d001      	beq.n	801647e <__ssrefill_r+0x14>
 801647a:	f7fe fdeb 	bl	8015054 <_free_r>
 801647e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016480:	6063      	str	r3, [r4, #4]
 8016482:	2000      	movs	r0, #0
 8016484:	6360      	str	r0, [r4, #52]	; 0x34
 8016486:	b113      	cbz	r3, 801648e <__ssrefill_r+0x24>
 8016488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801648a:	6023      	str	r3, [r4, #0]
 801648c:	bd10      	pop	{r4, pc}
 801648e:	6923      	ldr	r3, [r4, #16]
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	2300      	movs	r3, #0
 8016494:	6063      	str	r3, [r4, #4]
 8016496:	89a3      	ldrh	r3, [r4, #12]
 8016498:	f043 0320 	orr.w	r3, r3, #32
 801649c:	81a3      	strh	r3, [r4, #12]
 801649e:	f04f 30ff 	mov.w	r0, #4294967295
 80164a2:	e7f3      	b.n	801648c <__ssrefill_r+0x22>

080164a4 <__ssvfiscanf_r>:
 80164a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a8:	460c      	mov	r4, r1
 80164aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80164ae:	2100      	movs	r1, #0
 80164b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80164b4:	49a6      	ldr	r1, [pc, #664]	; (8016750 <__ssvfiscanf_r+0x2ac>)
 80164b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80164b8:	f10d 0804 	add.w	r8, sp, #4
 80164bc:	49a5      	ldr	r1, [pc, #660]	; (8016754 <__ssvfiscanf_r+0x2b0>)
 80164be:	4fa6      	ldr	r7, [pc, #664]	; (8016758 <__ssvfiscanf_r+0x2b4>)
 80164c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801675c <__ssvfiscanf_r+0x2b8>
 80164c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80164c8:	4606      	mov	r6, r0
 80164ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80164cc:	9300      	str	r3, [sp, #0]
 80164ce:	7813      	ldrb	r3, [r2, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	f000 815a 	beq.w	801678a <__ssvfiscanf_r+0x2e6>
 80164d6:	5cf9      	ldrb	r1, [r7, r3]
 80164d8:	f011 0108 	ands.w	r1, r1, #8
 80164dc:	f102 0501 	add.w	r5, r2, #1
 80164e0:	d019      	beq.n	8016516 <__ssvfiscanf_r+0x72>
 80164e2:	6863      	ldr	r3, [r4, #4]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	dd0f      	ble.n	8016508 <__ssvfiscanf_r+0x64>
 80164e8:	6823      	ldr	r3, [r4, #0]
 80164ea:	781a      	ldrb	r2, [r3, #0]
 80164ec:	5cba      	ldrb	r2, [r7, r2]
 80164ee:	0712      	lsls	r2, r2, #28
 80164f0:	d401      	bmi.n	80164f6 <__ssvfiscanf_r+0x52>
 80164f2:	462a      	mov	r2, r5
 80164f4:	e7eb      	b.n	80164ce <__ssvfiscanf_r+0x2a>
 80164f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80164f8:	3201      	adds	r2, #1
 80164fa:	9245      	str	r2, [sp, #276]	; 0x114
 80164fc:	6862      	ldr	r2, [r4, #4]
 80164fe:	3301      	adds	r3, #1
 8016500:	3a01      	subs	r2, #1
 8016502:	6062      	str	r2, [r4, #4]
 8016504:	6023      	str	r3, [r4, #0]
 8016506:	e7ec      	b.n	80164e2 <__ssvfiscanf_r+0x3e>
 8016508:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801650a:	4621      	mov	r1, r4
 801650c:	4630      	mov	r0, r6
 801650e:	4798      	blx	r3
 8016510:	2800      	cmp	r0, #0
 8016512:	d0e9      	beq.n	80164e8 <__ssvfiscanf_r+0x44>
 8016514:	e7ed      	b.n	80164f2 <__ssvfiscanf_r+0x4e>
 8016516:	2b25      	cmp	r3, #37	; 0x25
 8016518:	d012      	beq.n	8016540 <__ssvfiscanf_r+0x9c>
 801651a:	469a      	mov	sl, r3
 801651c:	6863      	ldr	r3, [r4, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	f340 8091 	ble.w	8016646 <__ssvfiscanf_r+0x1a2>
 8016524:	6822      	ldr	r2, [r4, #0]
 8016526:	7813      	ldrb	r3, [r2, #0]
 8016528:	4553      	cmp	r3, sl
 801652a:	f040 812e 	bne.w	801678a <__ssvfiscanf_r+0x2e6>
 801652e:	6863      	ldr	r3, [r4, #4]
 8016530:	3b01      	subs	r3, #1
 8016532:	6063      	str	r3, [r4, #4]
 8016534:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016536:	3201      	adds	r2, #1
 8016538:	3301      	adds	r3, #1
 801653a:	6022      	str	r2, [r4, #0]
 801653c:	9345      	str	r3, [sp, #276]	; 0x114
 801653e:	e7d8      	b.n	80164f2 <__ssvfiscanf_r+0x4e>
 8016540:	9141      	str	r1, [sp, #260]	; 0x104
 8016542:	9143      	str	r1, [sp, #268]	; 0x10c
 8016544:	7853      	ldrb	r3, [r2, #1]
 8016546:	2b2a      	cmp	r3, #42	; 0x2a
 8016548:	bf02      	ittt	eq
 801654a:	2310      	moveq	r3, #16
 801654c:	1c95      	addeq	r5, r2, #2
 801654e:	9341      	streq	r3, [sp, #260]	; 0x104
 8016550:	220a      	movs	r2, #10
 8016552:	46aa      	mov	sl, r5
 8016554:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016558:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801655c:	2b09      	cmp	r3, #9
 801655e:	d91c      	bls.n	801659a <__ssvfiscanf_r+0xf6>
 8016560:	487e      	ldr	r0, [pc, #504]	; (801675c <__ssvfiscanf_r+0x2b8>)
 8016562:	2203      	movs	r2, #3
 8016564:	f7e9 fed4 	bl	8000310 <memchr>
 8016568:	b138      	cbz	r0, 801657a <__ssvfiscanf_r+0xd6>
 801656a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801656c:	eba0 0009 	sub.w	r0, r0, r9
 8016570:	2301      	movs	r3, #1
 8016572:	4083      	lsls	r3, r0
 8016574:	4313      	orrs	r3, r2
 8016576:	9341      	str	r3, [sp, #260]	; 0x104
 8016578:	4655      	mov	r5, sl
 801657a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801657e:	2b78      	cmp	r3, #120	; 0x78
 8016580:	d806      	bhi.n	8016590 <__ssvfiscanf_r+0xec>
 8016582:	2b57      	cmp	r3, #87	; 0x57
 8016584:	d810      	bhi.n	80165a8 <__ssvfiscanf_r+0x104>
 8016586:	2b25      	cmp	r3, #37	; 0x25
 8016588:	d0c7      	beq.n	801651a <__ssvfiscanf_r+0x76>
 801658a:	d857      	bhi.n	801663c <__ssvfiscanf_r+0x198>
 801658c:	2b00      	cmp	r3, #0
 801658e:	d065      	beq.n	801665c <__ssvfiscanf_r+0x1b8>
 8016590:	2303      	movs	r3, #3
 8016592:	9347      	str	r3, [sp, #284]	; 0x11c
 8016594:	230a      	movs	r3, #10
 8016596:	9342      	str	r3, [sp, #264]	; 0x108
 8016598:	e076      	b.n	8016688 <__ssvfiscanf_r+0x1e4>
 801659a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801659c:	fb02 1103 	mla	r1, r2, r3, r1
 80165a0:	3930      	subs	r1, #48	; 0x30
 80165a2:	9143      	str	r1, [sp, #268]	; 0x10c
 80165a4:	4655      	mov	r5, sl
 80165a6:	e7d4      	b.n	8016552 <__ssvfiscanf_r+0xae>
 80165a8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80165ac:	2a20      	cmp	r2, #32
 80165ae:	d8ef      	bhi.n	8016590 <__ssvfiscanf_r+0xec>
 80165b0:	a101      	add	r1, pc, #4	; (adr r1, 80165b8 <__ssvfiscanf_r+0x114>)
 80165b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80165b6:	bf00      	nop
 80165b8:	0801666b 	.word	0x0801666b
 80165bc:	08016591 	.word	0x08016591
 80165c0:	08016591 	.word	0x08016591
 80165c4:	080166c9 	.word	0x080166c9
 80165c8:	08016591 	.word	0x08016591
 80165cc:	08016591 	.word	0x08016591
 80165d0:	08016591 	.word	0x08016591
 80165d4:	08016591 	.word	0x08016591
 80165d8:	08016591 	.word	0x08016591
 80165dc:	08016591 	.word	0x08016591
 80165e0:	08016591 	.word	0x08016591
 80165e4:	080166df 	.word	0x080166df
 80165e8:	080166c5 	.word	0x080166c5
 80165ec:	08016643 	.word	0x08016643
 80165f0:	08016643 	.word	0x08016643
 80165f4:	08016643 	.word	0x08016643
 80165f8:	08016591 	.word	0x08016591
 80165fc:	08016681 	.word	0x08016681
 8016600:	08016591 	.word	0x08016591
 8016604:	08016591 	.word	0x08016591
 8016608:	08016591 	.word	0x08016591
 801660c:	08016591 	.word	0x08016591
 8016610:	080166ef 	.word	0x080166ef
 8016614:	080166bd 	.word	0x080166bd
 8016618:	08016663 	.word	0x08016663
 801661c:	08016591 	.word	0x08016591
 8016620:	08016591 	.word	0x08016591
 8016624:	080166eb 	.word	0x080166eb
 8016628:	08016591 	.word	0x08016591
 801662c:	080166c5 	.word	0x080166c5
 8016630:	08016591 	.word	0x08016591
 8016634:	08016591 	.word	0x08016591
 8016638:	0801666b 	.word	0x0801666b
 801663c:	3b45      	subs	r3, #69	; 0x45
 801663e:	2b02      	cmp	r3, #2
 8016640:	d8a6      	bhi.n	8016590 <__ssvfiscanf_r+0xec>
 8016642:	2305      	movs	r3, #5
 8016644:	e01f      	b.n	8016686 <__ssvfiscanf_r+0x1e2>
 8016646:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016648:	4621      	mov	r1, r4
 801664a:	4630      	mov	r0, r6
 801664c:	4798      	blx	r3
 801664e:	2800      	cmp	r0, #0
 8016650:	f43f af68 	beq.w	8016524 <__ssvfiscanf_r+0x80>
 8016654:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016656:	2800      	cmp	r0, #0
 8016658:	f040 808d 	bne.w	8016776 <__ssvfiscanf_r+0x2d2>
 801665c:	f04f 30ff 	mov.w	r0, #4294967295
 8016660:	e08f      	b.n	8016782 <__ssvfiscanf_r+0x2de>
 8016662:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016664:	f042 0220 	orr.w	r2, r2, #32
 8016668:	9241      	str	r2, [sp, #260]	; 0x104
 801666a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801666c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016670:	9241      	str	r2, [sp, #260]	; 0x104
 8016672:	2210      	movs	r2, #16
 8016674:	2b6f      	cmp	r3, #111	; 0x6f
 8016676:	9242      	str	r2, [sp, #264]	; 0x108
 8016678:	bf34      	ite	cc
 801667a:	2303      	movcc	r3, #3
 801667c:	2304      	movcs	r3, #4
 801667e:	e002      	b.n	8016686 <__ssvfiscanf_r+0x1e2>
 8016680:	2300      	movs	r3, #0
 8016682:	9342      	str	r3, [sp, #264]	; 0x108
 8016684:	2303      	movs	r3, #3
 8016686:	9347      	str	r3, [sp, #284]	; 0x11c
 8016688:	6863      	ldr	r3, [r4, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	dd3d      	ble.n	801670a <__ssvfiscanf_r+0x266>
 801668e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016690:	0659      	lsls	r1, r3, #25
 8016692:	d404      	bmi.n	801669e <__ssvfiscanf_r+0x1fa>
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	781a      	ldrb	r2, [r3, #0]
 8016698:	5cba      	ldrb	r2, [r7, r2]
 801669a:	0712      	lsls	r2, r2, #28
 801669c:	d43c      	bmi.n	8016718 <__ssvfiscanf_r+0x274>
 801669e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80166a0:	2b02      	cmp	r3, #2
 80166a2:	dc4b      	bgt.n	801673c <__ssvfiscanf_r+0x298>
 80166a4:	466b      	mov	r3, sp
 80166a6:	4622      	mov	r2, r4
 80166a8:	a941      	add	r1, sp, #260	; 0x104
 80166aa:	4630      	mov	r0, r6
 80166ac:	f000 fb46 	bl	8016d3c <_scanf_chars>
 80166b0:	2801      	cmp	r0, #1
 80166b2:	d06a      	beq.n	801678a <__ssvfiscanf_r+0x2e6>
 80166b4:	2802      	cmp	r0, #2
 80166b6:	f47f af1c 	bne.w	80164f2 <__ssvfiscanf_r+0x4e>
 80166ba:	e7cb      	b.n	8016654 <__ssvfiscanf_r+0x1b0>
 80166bc:	2308      	movs	r3, #8
 80166be:	9342      	str	r3, [sp, #264]	; 0x108
 80166c0:	2304      	movs	r3, #4
 80166c2:	e7e0      	b.n	8016686 <__ssvfiscanf_r+0x1e2>
 80166c4:	220a      	movs	r2, #10
 80166c6:	e7d5      	b.n	8016674 <__ssvfiscanf_r+0x1d0>
 80166c8:	4629      	mov	r1, r5
 80166ca:	4640      	mov	r0, r8
 80166cc:	f000 fd44 	bl	8017158 <__sccl>
 80166d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166d6:	9341      	str	r3, [sp, #260]	; 0x104
 80166d8:	4605      	mov	r5, r0
 80166da:	2301      	movs	r3, #1
 80166dc:	e7d3      	b.n	8016686 <__ssvfiscanf_r+0x1e2>
 80166de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166e4:	9341      	str	r3, [sp, #260]	; 0x104
 80166e6:	2300      	movs	r3, #0
 80166e8:	e7cd      	b.n	8016686 <__ssvfiscanf_r+0x1e2>
 80166ea:	2302      	movs	r3, #2
 80166ec:	e7cb      	b.n	8016686 <__ssvfiscanf_r+0x1e2>
 80166ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80166f0:	06c3      	lsls	r3, r0, #27
 80166f2:	f53f aefe 	bmi.w	80164f2 <__ssvfiscanf_r+0x4e>
 80166f6:	9b00      	ldr	r3, [sp, #0]
 80166f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80166fa:	1d19      	adds	r1, r3, #4
 80166fc:	9100      	str	r1, [sp, #0]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	07c0      	lsls	r0, r0, #31
 8016702:	bf4c      	ite	mi
 8016704:	801a      	strhmi	r2, [r3, #0]
 8016706:	601a      	strpl	r2, [r3, #0]
 8016708:	e6f3      	b.n	80164f2 <__ssvfiscanf_r+0x4e>
 801670a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801670c:	4621      	mov	r1, r4
 801670e:	4630      	mov	r0, r6
 8016710:	4798      	blx	r3
 8016712:	2800      	cmp	r0, #0
 8016714:	d0bb      	beq.n	801668e <__ssvfiscanf_r+0x1ea>
 8016716:	e79d      	b.n	8016654 <__ssvfiscanf_r+0x1b0>
 8016718:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801671a:	3201      	adds	r2, #1
 801671c:	9245      	str	r2, [sp, #276]	; 0x114
 801671e:	6862      	ldr	r2, [r4, #4]
 8016720:	3a01      	subs	r2, #1
 8016722:	2a00      	cmp	r2, #0
 8016724:	6062      	str	r2, [r4, #4]
 8016726:	dd02      	ble.n	801672e <__ssvfiscanf_r+0x28a>
 8016728:	3301      	adds	r3, #1
 801672a:	6023      	str	r3, [r4, #0]
 801672c:	e7b2      	b.n	8016694 <__ssvfiscanf_r+0x1f0>
 801672e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016730:	4621      	mov	r1, r4
 8016732:	4630      	mov	r0, r6
 8016734:	4798      	blx	r3
 8016736:	2800      	cmp	r0, #0
 8016738:	d0ac      	beq.n	8016694 <__ssvfiscanf_r+0x1f0>
 801673a:	e78b      	b.n	8016654 <__ssvfiscanf_r+0x1b0>
 801673c:	2b04      	cmp	r3, #4
 801673e:	dc0f      	bgt.n	8016760 <__ssvfiscanf_r+0x2bc>
 8016740:	466b      	mov	r3, sp
 8016742:	4622      	mov	r2, r4
 8016744:	a941      	add	r1, sp, #260	; 0x104
 8016746:	4630      	mov	r0, r6
 8016748:	f000 fb52 	bl	8016df0 <_scanf_i>
 801674c:	e7b0      	b.n	80166b0 <__ssvfiscanf_r+0x20c>
 801674e:	bf00      	nop
 8016750:	080163f1 	.word	0x080163f1
 8016754:	0801646b 	.word	0x0801646b
 8016758:	0801a8d1 	.word	0x0801a8d1
 801675c:	0801abe2 	.word	0x0801abe2
 8016760:	4b0b      	ldr	r3, [pc, #44]	; (8016790 <__ssvfiscanf_r+0x2ec>)
 8016762:	2b00      	cmp	r3, #0
 8016764:	f43f aec5 	beq.w	80164f2 <__ssvfiscanf_r+0x4e>
 8016768:	466b      	mov	r3, sp
 801676a:	4622      	mov	r2, r4
 801676c:	a941      	add	r1, sp, #260	; 0x104
 801676e:	4630      	mov	r0, r6
 8016770:	f3af 8000 	nop.w
 8016774:	e79c      	b.n	80166b0 <__ssvfiscanf_r+0x20c>
 8016776:	89a3      	ldrh	r3, [r4, #12]
 8016778:	f013 0f40 	tst.w	r3, #64	; 0x40
 801677c:	bf18      	it	ne
 801677e:	f04f 30ff 	movne.w	r0, #4294967295
 8016782:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801678a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801678c:	e7f9      	b.n	8016782 <__ssvfiscanf_r+0x2de>
 801678e:	bf00      	nop
 8016790:	00000000 	.word	0x00000000

08016794 <__sfputc_r>:
 8016794:	6893      	ldr	r3, [r2, #8]
 8016796:	3b01      	subs	r3, #1
 8016798:	2b00      	cmp	r3, #0
 801679a:	b410      	push	{r4}
 801679c:	6093      	str	r3, [r2, #8]
 801679e:	da08      	bge.n	80167b2 <__sfputc_r+0x1e>
 80167a0:	6994      	ldr	r4, [r2, #24]
 80167a2:	42a3      	cmp	r3, r4
 80167a4:	db01      	blt.n	80167aa <__sfputc_r+0x16>
 80167a6:	290a      	cmp	r1, #10
 80167a8:	d103      	bne.n	80167b2 <__sfputc_r+0x1e>
 80167aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167ae:	f000 bd46 	b.w	801723e <__swbuf_r>
 80167b2:	6813      	ldr	r3, [r2, #0]
 80167b4:	1c58      	adds	r0, r3, #1
 80167b6:	6010      	str	r0, [r2, #0]
 80167b8:	7019      	strb	r1, [r3, #0]
 80167ba:	4608      	mov	r0, r1
 80167bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80167c0:	4770      	bx	lr

080167c2 <__sfputs_r>:
 80167c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c4:	4606      	mov	r6, r0
 80167c6:	460f      	mov	r7, r1
 80167c8:	4614      	mov	r4, r2
 80167ca:	18d5      	adds	r5, r2, r3
 80167cc:	42ac      	cmp	r4, r5
 80167ce:	d101      	bne.n	80167d4 <__sfputs_r+0x12>
 80167d0:	2000      	movs	r0, #0
 80167d2:	e007      	b.n	80167e4 <__sfputs_r+0x22>
 80167d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167d8:	463a      	mov	r2, r7
 80167da:	4630      	mov	r0, r6
 80167dc:	f7ff ffda 	bl	8016794 <__sfputc_r>
 80167e0:	1c43      	adds	r3, r0, #1
 80167e2:	d1f3      	bne.n	80167cc <__sfputs_r+0xa>
 80167e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167e8 <_vfiprintf_r>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	460d      	mov	r5, r1
 80167ee:	b09d      	sub	sp, #116	; 0x74
 80167f0:	4614      	mov	r4, r2
 80167f2:	4698      	mov	r8, r3
 80167f4:	4606      	mov	r6, r0
 80167f6:	b118      	cbz	r0, 8016800 <_vfiprintf_r+0x18>
 80167f8:	6a03      	ldr	r3, [r0, #32]
 80167fa:	b90b      	cbnz	r3, 8016800 <_vfiprintf_r+0x18>
 80167fc:	f7fe f9fe 	bl	8014bfc <__sinit>
 8016800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016802:	07d9      	lsls	r1, r3, #31
 8016804:	d405      	bmi.n	8016812 <_vfiprintf_r+0x2a>
 8016806:	89ab      	ldrh	r3, [r5, #12]
 8016808:	059a      	lsls	r2, r3, #22
 801680a:	d402      	bmi.n	8016812 <_vfiprintf_r+0x2a>
 801680c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801680e:	f7fe fbea 	bl	8014fe6 <__retarget_lock_acquire_recursive>
 8016812:	89ab      	ldrh	r3, [r5, #12]
 8016814:	071b      	lsls	r3, r3, #28
 8016816:	d501      	bpl.n	801681c <_vfiprintf_r+0x34>
 8016818:	692b      	ldr	r3, [r5, #16]
 801681a:	b99b      	cbnz	r3, 8016844 <_vfiprintf_r+0x5c>
 801681c:	4629      	mov	r1, r5
 801681e:	4630      	mov	r0, r6
 8016820:	f000 fd4a 	bl	80172b8 <__swsetup_r>
 8016824:	b170      	cbz	r0, 8016844 <_vfiprintf_r+0x5c>
 8016826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016828:	07dc      	lsls	r4, r3, #31
 801682a:	d504      	bpl.n	8016836 <_vfiprintf_r+0x4e>
 801682c:	f04f 30ff 	mov.w	r0, #4294967295
 8016830:	b01d      	add	sp, #116	; 0x74
 8016832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016836:	89ab      	ldrh	r3, [r5, #12]
 8016838:	0598      	lsls	r0, r3, #22
 801683a:	d4f7      	bmi.n	801682c <_vfiprintf_r+0x44>
 801683c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801683e:	f7fe fbd3 	bl	8014fe8 <__retarget_lock_release_recursive>
 8016842:	e7f3      	b.n	801682c <_vfiprintf_r+0x44>
 8016844:	2300      	movs	r3, #0
 8016846:	9309      	str	r3, [sp, #36]	; 0x24
 8016848:	2320      	movs	r3, #32
 801684a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801684e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016852:	2330      	movs	r3, #48	; 0x30
 8016854:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016a08 <_vfiprintf_r+0x220>
 8016858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801685c:	f04f 0901 	mov.w	r9, #1
 8016860:	4623      	mov	r3, r4
 8016862:	469a      	mov	sl, r3
 8016864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016868:	b10a      	cbz	r2, 801686e <_vfiprintf_r+0x86>
 801686a:	2a25      	cmp	r2, #37	; 0x25
 801686c:	d1f9      	bne.n	8016862 <_vfiprintf_r+0x7a>
 801686e:	ebba 0b04 	subs.w	fp, sl, r4
 8016872:	d00b      	beq.n	801688c <_vfiprintf_r+0xa4>
 8016874:	465b      	mov	r3, fp
 8016876:	4622      	mov	r2, r4
 8016878:	4629      	mov	r1, r5
 801687a:	4630      	mov	r0, r6
 801687c:	f7ff ffa1 	bl	80167c2 <__sfputs_r>
 8016880:	3001      	adds	r0, #1
 8016882:	f000 80a9 	beq.w	80169d8 <_vfiprintf_r+0x1f0>
 8016886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016888:	445a      	add	r2, fp
 801688a:	9209      	str	r2, [sp, #36]	; 0x24
 801688c:	f89a 3000 	ldrb.w	r3, [sl]
 8016890:	2b00      	cmp	r3, #0
 8016892:	f000 80a1 	beq.w	80169d8 <_vfiprintf_r+0x1f0>
 8016896:	2300      	movs	r3, #0
 8016898:	f04f 32ff 	mov.w	r2, #4294967295
 801689c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168a0:	f10a 0a01 	add.w	sl, sl, #1
 80168a4:	9304      	str	r3, [sp, #16]
 80168a6:	9307      	str	r3, [sp, #28]
 80168a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168ac:	931a      	str	r3, [sp, #104]	; 0x68
 80168ae:	4654      	mov	r4, sl
 80168b0:	2205      	movs	r2, #5
 80168b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168b6:	4854      	ldr	r0, [pc, #336]	; (8016a08 <_vfiprintf_r+0x220>)
 80168b8:	f7e9 fd2a 	bl	8000310 <memchr>
 80168bc:	9a04      	ldr	r2, [sp, #16]
 80168be:	b9d8      	cbnz	r0, 80168f8 <_vfiprintf_r+0x110>
 80168c0:	06d1      	lsls	r1, r2, #27
 80168c2:	bf44      	itt	mi
 80168c4:	2320      	movmi	r3, #32
 80168c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168ca:	0713      	lsls	r3, r2, #28
 80168cc:	bf44      	itt	mi
 80168ce:	232b      	movmi	r3, #43	; 0x2b
 80168d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168d4:	f89a 3000 	ldrb.w	r3, [sl]
 80168d8:	2b2a      	cmp	r3, #42	; 0x2a
 80168da:	d015      	beq.n	8016908 <_vfiprintf_r+0x120>
 80168dc:	9a07      	ldr	r2, [sp, #28]
 80168de:	4654      	mov	r4, sl
 80168e0:	2000      	movs	r0, #0
 80168e2:	f04f 0c0a 	mov.w	ip, #10
 80168e6:	4621      	mov	r1, r4
 80168e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168ec:	3b30      	subs	r3, #48	; 0x30
 80168ee:	2b09      	cmp	r3, #9
 80168f0:	d94d      	bls.n	801698e <_vfiprintf_r+0x1a6>
 80168f2:	b1b0      	cbz	r0, 8016922 <_vfiprintf_r+0x13a>
 80168f4:	9207      	str	r2, [sp, #28]
 80168f6:	e014      	b.n	8016922 <_vfiprintf_r+0x13a>
 80168f8:	eba0 0308 	sub.w	r3, r0, r8
 80168fc:	fa09 f303 	lsl.w	r3, r9, r3
 8016900:	4313      	orrs	r3, r2
 8016902:	9304      	str	r3, [sp, #16]
 8016904:	46a2      	mov	sl, r4
 8016906:	e7d2      	b.n	80168ae <_vfiprintf_r+0xc6>
 8016908:	9b03      	ldr	r3, [sp, #12]
 801690a:	1d19      	adds	r1, r3, #4
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	9103      	str	r1, [sp, #12]
 8016910:	2b00      	cmp	r3, #0
 8016912:	bfbb      	ittet	lt
 8016914:	425b      	neglt	r3, r3
 8016916:	f042 0202 	orrlt.w	r2, r2, #2
 801691a:	9307      	strge	r3, [sp, #28]
 801691c:	9307      	strlt	r3, [sp, #28]
 801691e:	bfb8      	it	lt
 8016920:	9204      	strlt	r2, [sp, #16]
 8016922:	7823      	ldrb	r3, [r4, #0]
 8016924:	2b2e      	cmp	r3, #46	; 0x2e
 8016926:	d10c      	bne.n	8016942 <_vfiprintf_r+0x15a>
 8016928:	7863      	ldrb	r3, [r4, #1]
 801692a:	2b2a      	cmp	r3, #42	; 0x2a
 801692c:	d134      	bne.n	8016998 <_vfiprintf_r+0x1b0>
 801692e:	9b03      	ldr	r3, [sp, #12]
 8016930:	1d1a      	adds	r2, r3, #4
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	9203      	str	r2, [sp, #12]
 8016936:	2b00      	cmp	r3, #0
 8016938:	bfb8      	it	lt
 801693a:	f04f 33ff 	movlt.w	r3, #4294967295
 801693e:	3402      	adds	r4, #2
 8016940:	9305      	str	r3, [sp, #20]
 8016942:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016a18 <_vfiprintf_r+0x230>
 8016946:	7821      	ldrb	r1, [r4, #0]
 8016948:	2203      	movs	r2, #3
 801694a:	4650      	mov	r0, sl
 801694c:	f7e9 fce0 	bl	8000310 <memchr>
 8016950:	b138      	cbz	r0, 8016962 <_vfiprintf_r+0x17a>
 8016952:	9b04      	ldr	r3, [sp, #16]
 8016954:	eba0 000a 	sub.w	r0, r0, sl
 8016958:	2240      	movs	r2, #64	; 0x40
 801695a:	4082      	lsls	r2, r0
 801695c:	4313      	orrs	r3, r2
 801695e:	3401      	adds	r4, #1
 8016960:	9304      	str	r3, [sp, #16]
 8016962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016966:	4829      	ldr	r0, [pc, #164]	; (8016a0c <_vfiprintf_r+0x224>)
 8016968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801696c:	2206      	movs	r2, #6
 801696e:	f7e9 fccf 	bl	8000310 <memchr>
 8016972:	2800      	cmp	r0, #0
 8016974:	d03f      	beq.n	80169f6 <_vfiprintf_r+0x20e>
 8016976:	4b26      	ldr	r3, [pc, #152]	; (8016a10 <_vfiprintf_r+0x228>)
 8016978:	bb1b      	cbnz	r3, 80169c2 <_vfiprintf_r+0x1da>
 801697a:	9b03      	ldr	r3, [sp, #12]
 801697c:	3307      	adds	r3, #7
 801697e:	f023 0307 	bic.w	r3, r3, #7
 8016982:	3308      	adds	r3, #8
 8016984:	9303      	str	r3, [sp, #12]
 8016986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016988:	443b      	add	r3, r7
 801698a:	9309      	str	r3, [sp, #36]	; 0x24
 801698c:	e768      	b.n	8016860 <_vfiprintf_r+0x78>
 801698e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016992:	460c      	mov	r4, r1
 8016994:	2001      	movs	r0, #1
 8016996:	e7a6      	b.n	80168e6 <_vfiprintf_r+0xfe>
 8016998:	2300      	movs	r3, #0
 801699a:	3401      	adds	r4, #1
 801699c:	9305      	str	r3, [sp, #20]
 801699e:	4619      	mov	r1, r3
 80169a0:	f04f 0c0a 	mov.w	ip, #10
 80169a4:	4620      	mov	r0, r4
 80169a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169aa:	3a30      	subs	r2, #48	; 0x30
 80169ac:	2a09      	cmp	r2, #9
 80169ae:	d903      	bls.n	80169b8 <_vfiprintf_r+0x1d0>
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d0c6      	beq.n	8016942 <_vfiprintf_r+0x15a>
 80169b4:	9105      	str	r1, [sp, #20]
 80169b6:	e7c4      	b.n	8016942 <_vfiprintf_r+0x15a>
 80169b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80169bc:	4604      	mov	r4, r0
 80169be:	2301      	movs	r3, #1
 80169c0:	e7f0      	b.n	80169a4 <_vfiprintf_r+0x1bc>
 80169c2:	ab03      	add	r3, sp, #12
 80169c4:	9300      	str	r3, [sp, #0]
 80169c6:	462a      	mov	r2, r5
 80169c8:	4b12      	ldr	r3, [pc, #72]	; (8016a14 <_vfiprintf_r+0x22c>)
 80169ca:	a904      	add	r1, sp, #16
 80169cc:	4630      	mov	r0, r6
 80169ce:	f3af 8000 	nop.w
 80169d2:	4607      	mov	r7, r0
 80169d4:	1c78      	adds	r0, r7, #1
 80169d6:	d1d6      	bne.n	8016986 <_vfiprintf_r+0x19e>
 80169d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169da:	07d9      	lsls	r1, r3, #31
 80169dc:	d405      	bmi.n	80169ea <_vfiprintf_r+0x202>
 80169de:	89ab      	ldrh	r3, [r5, #12]
 80169e0:	059a      	lsls	r2, r3, #22
 80169e2:	d402      	bmi.n	80169ea <_vfiprintf_r+0x202>
 80169e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169e6:	f7fe faff 	bl	8014fe8 <__retarget_lock_release_recursive>
 80169ea:	89ab      	ldrh	r3, [r5, #12]
 80169ec:	065b      	lsls	r3, r3, #25
 80169ee:	f53f af1d 	bmi.w	801682c <_vfiprintf_r+0x44>
 80169f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169f4:	e71c      	b.n	8016830 <_vfiprintf_r+0x48>
 80169f6:	ab03      	add	r3, sp, #12
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	462a      	mov	r2, r5
 80169fc:	4b05      	ldr	r3, [pc, #20]	; (8016a14 <_vfiprintf_r+0x22c>)
 80169fe:	a904      	add	r1, sp, #16
 8016a00:	4630      	mov	r0, r6
 8016a02:	f000 f879 	bl	8016af8 <_printf_i>
 8016a06:	e7e4      	b.n	80169d2 <_vfiprintf_r+0x1ea>
 8016a08:	0801abdc 	.word	0x0801abdc
 8016a0c:	0801abe6 	.word	0x0801abe6
 8016a10:	00000000 	.word	0x00000000
 8016a14:	080167c3 	.word	0x080167c3
 8016a18:	0801abe2 	.word	0x0801abe2

08016a1c <_printf_common>:
 8016a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a20:	4616      	mov	r6, r2
 8016a22:	4699      	mov	r9, r3
 8016a24:	688a      	ldr	r2, [r1, #8]
 8016a26:	690b      	ldr	r3, [r1, #16]
 8016a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	bfb8      	it	lt
 8016a30:	4613      	movlt	r3, r2
 8016a32:	6033      	str	r3, [r6, #0]
 8016a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016a38:	4607      	mov	r7, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	b10a      	cbz	r2, 8016a42 <_printf_common+0x26>
 8016a3e:	3301      	adds	r3, #1
 8016a40:	6033      	str	r3, [r6, #0]
 8016a42:	6823      	ldr	r3, [r4, #0]
 8016a44:	0699      	lsls	r1, r3, #26
 8016a46:	bf42      	ittt	mi
 8016a48:	6833      	ldrmi	r3, [r6, #0]
 8016a4a:	3302      	addmi	r3, #2
 8016a4c:	6033      	strmi	r3, [r6, #0]
 8016a4e:	6825      	ldr	r5, [r4, #0]
 8016a50:	f015 0506 	ands.w	r5, r5, #6
 8016a54:	d106      	bne.n	8016a64 <_printf_common+0x48>
 8016a56:	f104 0a19 	add.w	sl, r4, #25
 8016a5a:	68e3      	ldr	r3, [r4, #12]
 8016a5c:	6832      	ldr	r2, [r6, #0]
 8016a5e:	1a9b      	subs	r3, r3, r2
 8016a60:	42ab      	cmp	r3, r5
 8016a62:	dc26      	bgt.n	8016ab2 <_printf_common+0x96>
 8016a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a68:	1e13      	subs	r3, r2, #0
 8016a6a:	6822      	ldr	r2, [r4, #0]
 8016a6c:	bf18      	it	ne
 8016a6e:	2301      	movne	r3, #1
 8016a70:	0692      	lsls	r2, r2, #26
 8016a72:	d42b      	bmi.n	8016acc <_printf_common+0xb0>
 8016a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a78:	4649      	mov	r1, r9
 8016a7a:	4638      	mov	r0, r7
 8016a7c:	47c0      	blx	r8
 8016a7e:	3001      	adds	r0, #1
 8016a80:	d01e      	beq.n	8016ac0 <_printf_common+0xa4>
 8016a82:	6823      	ldr	r3, [r4, #0]
 8016a84:	6922      	ldr	r2, [r4, #16]
 8016a86:	f003 0306 	and.w	r3, r3, #6
 8016a8a:	2b04      	cmp	r3, #4
 8016a8c:	bf02      	ittt	eq
 8016a8e:	68e5      	ldreq	r5, [r4, #12]
 8016a90:	6833      	ldreq	r3, [r6, #0]
 8016a92:	1aed      	subeq	r5, r5, r3
 8016a94:	68a3      	ldr	r3, [r4, #8]
 8016a96:	bf0c      	ite	eq
 8016a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016a9c:	2500      	movne	r5, #0
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	bfc4      	itt	gt
 8016aa2:	1a9b      	subgt	r3, r3, r2
 8016aa4:	18ed      	addgt	r5, r5, r3
 8016aa6:	2600      	movs	r6, #0
 8016aa8:	341a      	adds	r4, #26
 8016aaa:	42b5      	cmp	r5, r6
 8016aac:	d11a      	bne.n	8016ae4 <_printf_common+0xc8>
 8016aae:	2000      	movs	r0, #0
 8016ab0:	e008      	b.n	8016ac4 <_printf_common+0xa8>
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	4652      	mov	r2, sl
 8016ab6:	4649      	mov	r1, r9
 8016ab8:	4638      	mov	r0, r7
 8016aba:	47c0      	blx	r8
 8016abc:	3001      	adds	r0, #1
 8016abe:	d103      	bne.n	8016ac8 <_printf_common+0xac>
 8016ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ac8:	3501      	adds	r5, #1
 8016aca:	e7c6      	b.n	8016a5a <_printf_common+0x3e>
 8016acc:	18e1      	adds	r1, r4, r3
 8016ace:	1c5a      	adds	r2, r3, #1
 8016ad0:	2030      	movs	r0, #48	; 0x30
 8016ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016ad6:	4422      	add	r2, r4
 8016ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ae0:	3302      	adds	r3, #2
 8016ae2:	e7c7      	b.n	8016a74 <_printf_common+0x58>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	4622      	mov	r2, r4
 8016ae8:	4649      	mov	r1, r9
 8016aea:	4638      	mov	r0, r7
 8016aec:	47c0      	blx	r8
 8016aee:	3001      	adds	r0, #1
 8016af0:	d0e6      	beq.n	8016ac0 <_printf_common+0xa4>
 8016af2:	3601      	adds	r6, #1
 8016af4:	e7d9      	b.n	8016aaa <_printf_common+0x8e>
	...

08016af8 <_printf_i>:
 8016af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016afc:	7e0f      	ldrb	r7, [r1, #24]
 8016afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016b00:	2f78      	cmp	r7, #120	; 0x78
 8016b02:	4691      	mov	r9, r2
 8016b04:	4680      	mov	r8, r0
 8016b06:	460c      	mov	r4, r1
 8016b08:	469a      	mov	sl, r3
 8016b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016b0e:	d807      	bhi.n	8016b20 <_printf_i+0x28>
 8016b10:	2f62      	cmp	r7, #98	; 0x62
 8016b12:	d80a      	bhi.n	8016b2a <_printf_i+0x32>
 8016b14:	2f00      	cmp	r7, #0
 8016b16:	f000 80d4 	beq.w	8016cc2 <_printf_i+0x1ca>
 8016b1a:	2f58      	cmp	r7, #88	; 0x58
 8016b1c:	f000 80c0 	beq.w	8016ca0 <_printf_i+0x1a8>
 8016b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016b28:	e03a      	b.n	8016ba0 <_printf_i+0xa8>
 8016b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016b2e:	2b15      	cmp	r3, #21
 8016b30:	d8f6      	bhi.n	8016b20 <_printf_i+0x28>
 8016b32:	a101      	add	r1, pc, #4	; (adr r1, 8016b38 <_printf_i+0x40>)
 8016b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016b38:	08016b91 	.word	0x08016b91
 8016b3c:	08016ba5 	.word	0x08016ba5
 8016b40:	08016b21 	.word	0x08016b21
 8016b44:	08016b21 	.word	0x08016b21
 8016b48:	08016b21 	.word	0x08016b21
 8016b4c:	08016b21 	.word	0x08016b21
 8016b50:	08016ba5 	.word	0x08016ba5
 8016b54:	08016b21 	.word	0x08016b21
 8016b58:	08016b21 	.word	0x08016b21
 8016b5c:	08016b21 	.word	0x08016b21
 8016b60:	08016b21 	.word	0x08016b21
 8016b64:	08016ca9 	.word	0x08016ca9
 8016b68:	08016bd1 	.word	0x08016bd1
 8016b6c:	08016c63 	.word	0x08016c63
 8016b70:	08016b21 	.word	0x08016b21
 8016b74:	08016b21 	.word	0x08016b21
 8016b78:	08016ccb 	.word	0x08016ccb
 8016b7c:	08016b21 	.word	0x08016b21
 8016b80:	08016bd1 	.word	0x08016bd1
 8016b84:	08016b21 	.word	0x08016b21
 8016b88:	08016b21 	.word	0x08016b21
 8016b8c:	08016c6b 	.word	0x08016c6b
 8016b90:	682b      	ldr	r3, [r5, #0]
 8016b92:	1d1a      	adds	r2, r3, #4
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	602a      	str	r2, [r5, #0]
 8016b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	e09f      	b.n	8016ce4 <_printf_i+0x1ec>
 8016ba4:	6820      	ldr	r0, [r4, #0]
 8016ba6:	682b      	ldr	r3, [r5, #0]
 8016ba8:	0607      	lsls	r7, r0, #24
 8016baa:	f103 0104 	add.w	r1, r3, #4
 8016bae:	6029      	str	r1, [r5, #0]
 8016bb0:	d501      	bpl.n	8016bb6 <_printf_i+0xbe>
 8016bb2:	681e      	ldr	r6, [r3, #0]
 8016bb4:	e003      	b.n	8016bbe <_printf_i+0xc6>
 8016bb6:	0646      	lsls	r6, r0, #25
 8016bb8:	d5fb      	bpl.n	8016bb2 <_printf_i+0xba>
 8016bba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016bbe:	2e00      	cmp	r6, #0
 8016bc0:	da03      	bge.n	8016bca <_printf_i+0xd2>
 8016bc2:	232d      	movs	r3, #45	; 0x2d
 8016bc4:	4276      	negs	r6, r6
 8016bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bca:	485a      	ldr	r0, [pc, #360]	; (8016d34 <_printf_i+0x23c>)
 8016bcc:	230a      	movs	r3, #10
 8016bce:	e012      	b.n	8016bf6 <_printf_i+0xfe>
 8016bd0:	682b      	ldr	r3, [r5, #0]
 8016bd2:	6820      	ldr	r0, [r4, #0]
 8016bd4:	1d19      	adds	r1, r3, #4
 8016bd6:	6029      	str	r1, [r5, #0]
 8016bd8:	0605      	lsls	r5, r0, #24
 8016bda:	d501      	bpl.n	8016be0 <_printf_i+0xe8>
 8016bdc:	681e      	ldr	r6, [r3, #0]
 8016bde:	e002      	b.n	8016be6 <_printf_i+0xee>
 8016be0:	0641      	lsls	r1, r0, #25
 8016be2:	d5fb      	bpl.n	8016bdc <_printf_i+0xe4>
 8016be4:	881e      	ldrh	r6, [r3, #0]
 8016be6:	4853      	ldr	r0, [pc, #332]	; (8016d34 <_printf_i+0x23c>)
 8016be8:	2f6f      	cmp	r7, #111	; 0x6f
 8016bea:	bf0c      	ite	eq
 8016bec:	2308      	moveq	r3, #8
 8016bee:	230a      	movne	r3, #10
 8016bf0:	2100      	movs	r1, #0
 8016bf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016bf6:	6865      	ldr	r5, [r4, #4]
 8016bf8:	60a5      	str	r5, [r4, #8]
 8016bfa:	2d00      	cmp	r5, #0
 8016bfc:	bfa2      	ittt	ge
 8016bfe:	6821      	ldrge	r1, [r4, #0]
 8016c00:	f021 0104 	bicge.w	r1, r1, #4
 8016c04:	6021      	strge	r1, [r4, #0]
 8016c06:	b90e      	cbnz	r6, 8016c0c <_printf_i+0x114>
 8016c08:	2d00      	cmp	r5, #0
 8016c0a:	d04b      	beq.n	8016ca4 <_printf_i+0x1ac>
 8016c0c:	4615      	mov	r5, r2
 8016c0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016c12:	fb03 6711 	mls	r7, r3, r1, r6
 8016c16:	5dc7      	ldrb	r7, [r0, r7]
 8016c18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016c1c:	4637      	mov	r7, r6
 8016c1e:	42bb      	cmp	r3, r7
 8016c20:	460e      	mov	r6, r1
 8016c22:	d9f4      	bls.n	8016c0e <_printf_i+0x116>
 8016c24:	2b08      	cmp	r3, #8
 8016c26:	d10b      	bne.n	8016c40 <_printf_i+0x148>
 8016c28:	6823      	ldr	r3, [r4, #0]
 8016c2a:	07de      	lsls	r6, r3, #31
 8016c2c:	d508      	bpl.n	8016c40 <_printf_i+0x148>
 8016c2e:	6923      	ldr	r3, [r4, #16]
 8016c30:	6861      	ldr	r1, [r4, #4]
 8016c32:	4299      	cmp	r1, r3
 8016c34:	bfde      	ittt	le
 8016c36:	2330      	movle	r3, #48	; 0x30
 8016c38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016c3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016c40:	1b52      	subs	r2, r2, r5
 8016c42:	6122      	str	r2, [r4, #16]
 8016c44:	f8cd a000 	str.w	sl, [sp]
 8016c48:	464b      	mov	r3, r9
 8016c4a:	aa03      	add	r2, sp, #12
 8016c4c:	4621      	mov	r1, r4
 8016c4e:	4640      	mov	r0, r8
 8016c50:	f7ff fee4 	bl	8016a1c <_printf_common>
 8016c54:	3001      	adds	r0, #1
 8016c56:	d14a      	bne.n	8016cee <_printf_i+0x1f6>
 8016c58:	f04f 30ff 	mov.w	r0, #4294967295
 8016c5c:	b004      	add	sp, #16
 8016c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c62:	6823      	ldr	r3, [r4, #0]
 8016c64:	f043 0320 	orr.w	r3, r3, #32
 8016c68:	6023      	str	r3, [r4, #0]
 8016c6a:	4833      	ldr	r0, [pc, #204]	; (8016d38 <_printf_i+0x240>)
 8016c6c:	2778      	movs	r7, #120	; 0x78
 8016c6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016c72:	6823      	ldr	r3, [r4, #0]
 8016c74:	6829      	ldr	r1, [r5, #0]
 8016c76:	061f      	lsls	r7, r3, #24
 8016c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8016c7c:	d402      	bmi.n	8016c84 <_printf_i+0x18c>
 8016c7e:	065f      	lsls	r7, r3, #25
 8016c80:	bf48      	it	mi
 8016c82:	b2b6      	uxthmi	r6, r6
 8016c84:	07df      	lsls	r7, r3, #31
 8016c86:	bf48      	it	mi
 8016c88:	f043 0320 	orrmi.w	r3, r3, #32
 8016c8c:	6029      	str	r1, [r5, #0]
 8016c8e:	bf48      	it	mi
 8016c90:	6023      	strmi	r3, [r4, #0]
 8016c92:	b91e      	cbnz	r6, 8016c9c <_printf_i+0x1a4>
 8016c94:	6823      	ldr	r3, [r4, #0]
 8016c96:	f023 0320 	bic.w	r3, r3, #32
 8016c9a:	6023      	str	r3, [r4, #0]
 8016c9c:	2310      	movs	r3, #16
 8016c9e:	e7a7      	b.n	8016bf0 <_printf_i+0xf8>
 8016ca0:	4824      	ldr	r0, [pc, #144]	; (8016d34 <_printf_i+0x23c>)
 8016ca2:	e7e4      	b.n	8016c6e <_printf_i+0x176>
 8016ca4:	4615      	mov	r5, r2
 8016ca6:	e7bd      	b.n	8016c24 <_printf_i+0x12c>
 8016ca8:	682b      	ldr	r3, [r5, #0]
 8016caa:	6826      	ldr	r6, [r4, #0]
 8016cac:	6961      	ldr	r1, [r4, #20]
 8016cae:	1d18      	adds	r0, r3, #4
 8016cb0:	6028      	str	r0, [r5, #0]
 8016cb2:	0635      	lsls	r5, r6, #24
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	d501      	bpl.n	8016cbc <_printf_i+0x1c4>
 8016cb8:	6019      	str	r1, [r3, #0]
 8016cba:	e002      	b.n	8016cc2 <_printf_i+0x1ca>
 8016cbc:	0670      	lsls	r0, r6, #25
 8016cbe:	d5fb      	bpl.n	8016cb8 <_printf_i+0x1c0>
 8016cc0:	8019      	strh	r1, [r3, #0]
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	6123      	str	r3, [r4, #16]
 8016cc6:	4615      	mov	r5, r2
 8016cc8:	e7bc      	b.n	8016c44 <_printf_i+0x14c>
 8016cca:	682b      	ldr	r3, [r5, #0]
 8016ccc:	1d1a      	adds	r2, r3, #4
 8016cce:	602a      	str	r2, [r5, #0]
 8016cd0:	681d      	ldr	r5, [r3, #0]
 8016cd2:	6862      	ldr	r2, [r4, #4]
 8016cd4:	2100      	movs	r1, #0
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	f7e9 fb1a 	bl	8000310 <memchr>
 8016cdc:	b108      	cbz	r0, 8016ce2 <_printf_i+0x1ea>
 8016cde:	1b40      	subs	r0, r0, r5
 8016ce0:	6060      	str	r0, [r4, #4]
 8016ce2:	6863      	ldr	r3, [r4, #4]
 8016ce4:	6123      	str	r3, [r4, #16]
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cec:	e7aa      	b.n	8016c44 <_printf_i+0x14c>
 8016cee:	6923      	ldr	r3, [r4, #16]
 8016cf0:	462a      	mov	r2, r5
 8016cf2:	4649      	mov	r1, r9
 8016cf4:	4640      	mov	r0, r8
 8016cf6:	47d0      	blx	sl
 8016cf8:	3001      	adds	r0, #1
 8016cfa:	d0ad      	beq.n	8016c58 <_printf_i+0x160>
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	079b      	lsls	r3, r3, #30
 8016d00:	d413      	bmi.n	8016d2a <_printf_i+0x232>
 8016d02:	68e0      	ldr	r0, [r4, #12]
 8016d04:	9b03      	ldr	r3, [sp, #12]
 8016d06:	4298      	cmp	r0, r3
 8016d08:	bfb8      	it	lt
 8016d0a:	4618      	movlt	r0, r3
 8016d0c:	e7a6      	b.n	8016c5c <_printf_i+0x164>
 8016d0e:	2301      	movs	r3, #1
 8016d10:	4632      	mov	r2, r6
 8016d12:	4649      	mov	r1, r9
 8016d14:	4640      	mov	r0, r8
 8016d16:	47d0      	blx	sl
 8016d18:	3001      	adds	r0, #1
 8016d1a:	d09d      	beq.n	8016c58 <_printf_i+0x160>
 8016d1c:	3501      	adds	r5, #1
 8016d1e:	68e3      	ldr	r3, [r4, #12]
 8016d20:	9903      	ldr	r1, [sp, #12]
 8016d22:	1a5b      	subs	r3, r3, r1
 8016d24:	42ab      	cmp	r3, r5
 8016d26:	dcf2      	bgt.n	8016d0e <_printf_i+0x216>
 8016d28:	e7eb      	b.n	8016d02 <_printf_i+0x20a>
 8016d2a:	2500      	movs	r5, #0
 8016d2c:	f104 0619 	add.w	r6, r4, #25
 8016d30:	e7f5      	b.n	8016d1e <_printf_i+0x226>
 8016d32:	bf00      	nop
 8016d34:	0801abed 	.word	0x0801abed
 8016d38:	0801abfe 	.word	0x0801abfe

08016d3c <_scanf_chars>:
 8016d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d40:	4615      	mov	r5, r2
 8016d42:	688a      	ldr	r2, [r1, #8]
 8016d44:	4680      	mov	r8, r0
 8016d46:	460c      	mov	r4, r1
 8016d48:	b932      	cbnz	r2, 8016d58 <_scanf_chars+0x1c>
 8016d4a:	698a      	ldr	r2, [r1, #24]
 8016d4c:	2a00      	cmp	r2, #0
 8016d4e:	bf0c      	ite	eq
 8016d50:	2201      	moveq	r2, #1
 8016d52:	f04f 32ff 	movne.w	r2, #4294967295
 8016d56:	608a      	str	r2, [r1, #8]
 8016d58:	6822      	ldr	r2, [r4, #0]
 8016d5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016dec <_scanf_chars+0xb0>
 8016d5e:	06d1      	lsls	r1, r2, #27
 8016d60:	bf5f      	itttt	pl
 8016d62:	681a      	ldrpl	r2, [r3, #0]
 8016d64:	1d11      	addpl	r1, r2, #4
 8016d66:	6019      	strpl	r1, [r3, #0]
 8016d68:	6816      	ldrpl	r6, [r2, #0]
 8016d6a:	2700      	movs	r7, #0
 8016d6c:	69a0      	ldr	r0, [r4, #24]
 8016d6e:	b188      	cbz	r0, 8016d94 <_scanf_chars+0x58>
 8016d70:	2801      	cmp	r0, #1
 8016d72:	d107      	bne.n	8016d84 <_scanf_chars+0x48>
 8016d74:	682a      	ldr	r2, [r5, #0]
 8016d76:	7811      	ldrb	r1, [r2, #0]
 8016d78:	6962      	ldr	r2, [r4, #20]
 8016d7a:	5c52      	ldrb	r2, [r2, r1]
 8016d7c:	b952      	cbnz	r2, 8016d94 <_scanf_chars+0x58>
 8016d7e:	2f00      	cmp	r7, #0
 8016d80:	d031      	beq.n	8016de6 <_scanf_chars+0xaa>
 8016d82:	e022      	b.n	8016dca <_scanf_chars+0x8e>
 8016d84:	2802      	cmp	r0, #2
 8016d86:	d120      	bne.n	8016dca <_scanf_chars+0x8e>
 8016d88:	682b      	ldr	r3, [r5, #0]
 8016d8a:	781b      	ldrb	r3, [r3, #0]
 8016d8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016d90:	071b      	lsls	r3, r3, #28
 8016d92:	d41a      	bmi.n	8016dca <_scanf_chars+0x8e>
 8016d94:	6823      	ldr	r3, [r4, #0]
 8016d96:	06da      	lsls	r2, r3, #27
 8016d98:	bf5e      	ittt	pl
 8016d9a:	682b      	ldrpl	r3, [r5, #0]
 8016d9c:	781b      	ldrbpl	r3, [r3, #0]
 8016d9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016da2:	682a      	ldr	r2, [r5, #0]
 8016da4:	686b      	ldr	r3, [r5, #4]
 8016da6:	3201      	adds	r2, #1
 8016da8:	602a      	str	r2, [r5, #0]
 8016daa:	68a2      	ldr	r2, [r4, #8]
 8016dac:	3b01      	subs	r3, #1
 8016dae:	3a01      	subs	r2, #1
 8016db0:	606b      	str	r3, [r5, #4]
 8016db2:	3701      	adds	r7, #1
 8016db4:	60a2      	str	r2, [r4, #8]
 8016db6:	b142      	cbz	r2, 8016dca <_scanf_chars+0x8e>
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	dcd7      	bgt.n	8016d6c <_scanf_chars+0x30>
 8016dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016dc0:	4629      	mov	r1, r5
 8016dc2:	4640      	mov	r0, r8
 8016dc4:	4798      	blx	r3
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	d0d0      	beq.n	8016d6c <_scanf_chars+0x30>
 8016dca:	6823      	ldr	r3, [r4, #0]
 8016dcc:	f013 0310 	ands.w	r3, r3, #16
 8016dd0:	d105      	bne.n	8016dde <_scanf_chars+0xa2>
 8016dd2:	68e2      	ldr	r2, [r4, #12]
 8016dd4:	3201      	adds	r2, #1
 8016dd6:	60e2      	str	r2, [r4, #12]
 8016dd8:	69a2      	ldr	r2, [r4, #24]
 8016dda:	b102      	cbz	r2, 8016dde <_scanf_chars+0xa2>
 8016ddc:	7033      	strb	r3, [r6, #0]
 8016dde:	6923      	ldr	r3, [r4, #16]
 8016de0:	443b      	add	r3, r7
 8016de2:	6123      	str	r3, [r4, #16]
 8016de4:	2000      	movs	r0, #0
 8016de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dea:	bf00      	nop
 8016dec:	0801a8d1 	.word	0x0801a8d1

08016df0 <_scanf_i>:
 8016df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016df4:	4698      	mov	r8, r3
 8016df6:	4b74      	ldr	r3, [pc, #464]	; (8016fc8 <_scanf_i+0x1d8>)
 8016df8:	460c      	mov	r4, r1
 8016dfa:	4682      	mov	sl, r0
 8016dfc:	4616      	mov	r6, r2
 8016dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016e02:	b087      	sub	sp, #28
 8016e04:	ab03      	add	r3, sp, #12
 8016e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016e0a:	4b70      	ldr	r3, [pc, #448]	; (8016fcc <_scanf_i+0x1dc>)
 8016e0c:	69a1      	ldr	r1, [r4, #24]
 8016e0e:	4a70      	ldr	r2, [pc, #448]	; (8016fd0 <_scanf_i+0x1e0>)
 8016e10:	2903      	cmp	r1, #3
 8016e12:	bf18      	it	ne
 8016e14:	461a      	movne	r2, r3
 8016e16:	68a3      	ldr	r3, [r4, #8]
 8016e18:	9201      	str	r2, [sp, #4]
 8016e1a:	1e5a      	subs	r2, r3, #1
 8016e1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016e20:	bf88      	it	hi
 8016e22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016e26:	4627      	mov	r7, r4
 8016e28:	bf82      	ittt	hi
 8016e2a:	eb03 0905 	addhi.w	r9, r3, r5
 8016e2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016e32:	60a3      	strhi	r3, [r4, #8]
 8016e34:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016e38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016e3c:	bf98      	it	ls
 8016e3e:	f04f 0900 	movls.w	r9, #0
 8016e42:	6023      	str	r3, [r4, #0]
 8016e44:	463d      	mov	r5, r7
 8016e46:	f04f 0b00 	mov.w	fp, #0
 8016e4a:	6831      	ldr	r1, [r6, #0]
 8016e4c:	ab03      	add	r3, sp, #12
 8016e4e:	7809      	ldrb	r1, [r1, #0]
 8016e50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016e54:	2202      	movs	r2, #2
 8016e56:	f7e9 fa5b 	bl	8000310 <memchr>
 8016e5a:	b328      	cbz	r0, 8016ea8 <_scanf_i+0xb8>
 8016e5c:	f1bb 0f01 	cmp.w	fp, #1
 8016e60:	d159      	bne.n	8016f16 <_scanf_i+0x126>
 8016e62:	6862      	ldr	r2, [r4, #4]
 8016e64:	b92a      	cbnz	r2, 8016e72 <_scanf_i+0x82>
 8016e66:	6822      	ldr	r2, [r4, #0]
 8016e68:	2308      	movs	r3, #8
 8016e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e6e:	6063      	str	r3, [r4, #4]
 8016e70:	6022      	str	r2, [r4, #0]
 8016e72:	6822      	ldr	r2, [r4, #0]
 8016e74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016e78:	6022      	str	r2, [r4, #0]
 8016e7a:	68a2      	ldr	r2, [r4, #8]
 8016e7c:	1e51      	subs	r1, r2, #1
 8016e7e:	60a1      	str	r1, [r4, #8]
 8016e80:	b192      	cbz	r2, 8016ea8 <_scanf_i+0xb8>
 8016e82:	6832      	ldr	r2, [r6, #0]
 8016e84:	1c51      	adds	r1, r2, #1
 8016e86:	6031      	str	r1, [r6, #0]
 8016e88:	7812      	ldrb	r2, [r2, #0]
 8016e8a:	f805 2b01 	strb.w	r2, [r5], #1
 8016e8e:	6872      	ldr	r2, [r6, #4]
 8016e90:	3a01      	subs	r2, #1
 8016e92:	2a00      	cmp	r2, #0
 8016e94:	6072      	str	r2, [r6, #4]
 8016e96:	dc07      	bgt.n	8016ea8 <_scanf_i+0xb8>
 8016e98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016e9c:	4631      	mov	r1, r6
 8016e9e:	4650      	mov	r0, sl
 8016ea0:	4790      	blx	r2
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	f040 8085 	bne.w	8016fb2 <_scanf_i+0x1c2>
 8016ea8:	f10b 0b01 	add.w	fp, fp, #1
 8016eac:	f1bb 0f03 	cmp.w	fp, #3
 8016eb0:	d1cb      	bne.n	8016e4a <_scanf_i+0x5a>
 8016eb2:	6863      	ldr	r3, [r4, #4]
 8016eb4:	b90b      	cbnz	r3, 8016eba <_scanf_i+0xca>
 8016eb6:	230a      	movs	r3, #10
 8016eb8:	6063      	str	r3, [r4, #4]
 8016eba:	6863      	ldr	r3, [r4, #4]
 8016ebc:	4945      	ldr	r1, [pc, #276]	; (8016fd4 <_scanf_i+0x1e4>)
 8016ebe:	6960      	ldr	r0, [r4, #20]
 8016ec0:	1ac9      	subs	r1, r1, r3
 8016ec2:	f000 f949 	bl	8017158 <__sccl>
 8016ec6:	f04f 0b00 	mov.w	fp, #0
 8016eca:	68a3      	ldr	r3, [r4, #8]
 8016ecc:	6822      	ldr	r2, [r4, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d03d      	beq.n	8016f4e <_scanf_i+0x15e>
 8016ed2:	6831      	ldr	r1, [r6, #0]
 8016ed4:	6960      	ldr	r0, [r4, #20]
 8016ed6:	f891 c000 	ldrb.w	ip, [r1]
 8016eda:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	d035      	beq.n	8016f4e <_scanf_i+0x15e>
 8016ee2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016ee6:	d124      	bne.n	8016f32 <_scanf_i+0x142>
 8016ee8:	0510      	lsls	r0, r2, #20
 8016eea:	d522      	bpl.n	8016f32 <_scanf_i+0x142>
 8016eec:	f10b 0b01 	add.w	fp, fp, #1
 8016ef0:	f1b9 0f00 	cmp.w	r9, #0
 8016ef4:	d003      	beq.n	8016efe <_scanf_i+0x10e>
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016efc:	60a3      	str	r3, [r4, #8]
 8016efe:	6873      	ldr	r3, [r6, #4]
 8016f00:	3b01      	subs	r3, #1
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	6073      	str	r3, [r6, #4]
 8016f06:	dd1b      	ble.n	8016f40 <_scanf_i+0x150>
 8016f08:	6833      	ldr	r3, [r6, #0]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	6033      	str	r3, [r6, #0]
 8016f0e:	68a3      	ldr	r3, [r4, #8]
 8016f10:	3b01      	subs	r3, #1
 8016f12:	60a3      	str	r3, [r4, #8]
 8016f14:	e7d9      	b.n	8016eca <_scanf_i+0xda>
 8016f16:	f1bb 0f02 	cmp.w	fp, #2
 8016f1a:	d1ae      	bne.n	8016e7a <_scanf_i+0x8a>
 8016f1c:	6822      	ldr	r2, [r4, #0]
 8016f1e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016f22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016f26:	d1bf      	bne.n	8016ea8 <_scanf_i+0xb8>
 8016f28:	2310      	movs	r3, #16
 8016f2a:	6063      	str	r3, [r4, #4]
 8016f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016f30:	e7a2      	b.n	8016e78 <_scanf_i+0x88>
 8016f32:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016f36:	6022      	str	r2, [r4, #0]
 8016f38:	780b      	ldrb	r3, [r1, #0]
 8016f3a:	f805 3b01 	strb.w	r3, [r5], #1
 8016f3e:	e7de      	b.n	8016efe <_scanf_i+0x10e>
 8016f40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016f44:	4631      	mov	r1, r6
 8016f46:	4650      	mov	r0, sl
 8016f48:	4798      	blx	r3
 8016f4a:	2800      	cmp	r0, #0
 8016f4c:	d0df      	beq.n	8016f0e <_scanf_i+0x11e>
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	05d9      	lsls	r1, r3, #23
 8016f52:	d50d      	bpl.n	8016f70 <_scanf_i+0x180>
 8016f54:	42bd      	cmp	r5, r7
 8016f56:	d909      	bls.n	8016f6c <_scanf_i+0x17c>
 8016f58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016f5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016f60:	4632      	mov	r2, r6
 8016f62:	4650      	mov	r0, sl
 8016f64:	4798      	blx	r3
 8016f66:	f105 39ff 	add.w	r9, r5, #4294967295
 8016f6a:	464d      	mov	r5, r9
 8016f6c:	42bd      	cmp	r5, r7
 8016f6e:	d028      	beq.n	8016fc2 <_scanf_i+0x1d2>
 8016f70:	6822      	ldr	r2, [r4, #0]
 8016f72:	f012 0210 	ands.w	r2, r2, #16
 8016f76:	d113      	bne.n	8016fa0 <_scanf_i+0x1b0>
 8016f78:	702a      	strb	r2, [r5, #0]
 8016f7a:	6863      	ldr	r3, [r4, #4]
 8016f7c:	9e01      	ldr	r6, [sp, #4]
 8016f7e:	4639      	mov	r1, r7
 8016f80:	4650      	mov	r0, sl
 8016f82:	47b0      	blx	r6
 8016f84:	f8d8 3000 	ldr.w	r3, [r8]
 8016f88:	6821      	ldr	r1, [r4, #0]
 8016f8a:	1d1a      	adds	r2, r3, #4
 8016f8c:	f8c8 2000 	str.w	r2, [r8]
 8016f90:	f011 0f20 	tst.w	r1, #32
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	d00f      	beq.n	8016fb8 <_scanf_i+0x1c8>
 8016f98:	6018      	str	r0, [r3, #0]
 8016f9a:	68e3      	ldr	r3, [r4, #12]
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	60e3      	str	r3, [r4, #12]
 8016fa0:	6923      	ldr	r3, [r4, #16]
 8016fa2:	1bed      	subs	r5, r5, r7
 8016fa4:	445d      	add	r5, fp
 8016fa6:	442b      	add	r3, r5
 8016fa8:	6123      	str	r3, [r4, #16]
 8016faa:	2000      	movs	r0, #0
 8016fac:	b007      	add	sp, #28
 8016fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fb2:	f04f 0b00 	mov.w	fp, #0
 8016fb6:	e7ca      	b.n	8016f4e <_scanf_i+0x15e>
 8016fb8:	07ca      	lsls	r2, r1, #31
 8016fba:	bf4c      	ite	mi
 8016fbc:	8018      	strhmi	r0, [r3, #0]
 8016fbe:	6018      	strpl	r0, [r3, #0]
 8016fc0:	e7eb      	b.n	8016f9a <_scanf_i+0x1aa>
 8016fc2:	2001      	movs	r0, #1
 8016fc4:	e7f2      	b.n	8016fac <_scanf_i+0x1bc>
 8016fc6:	bf00      	nop
 8016fc8:	08017638 	.word	0x08017638
 8016fcc:	08017489 	.word	0x08017489
 8016fd0:	08014ae1 	.word	0x08014ae1
 8016fd4:	0801ac1f 	.word	0x0801ac1f

08016fd8 <__sflush_r>:
 8016fd8:	898a      	ldrh	r2, [r1, #12]
 8016fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fde:	4605      	mov	r5, r0
 8016fe0:	0710      	lsls	r0, r2, #28
 8016fe2:	460c      	mov	r4, r1
 8016fe4:	d458      	bmi.n	8017098 <__sflush_r+0xc0>
 8016fe6:	684b      	ldr	r3, [r1, #4]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	dc05      	bgt.n	8016ff8 <__sflush_r+0x20>
 8016fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	dc02      	bgt.n	8016ff8 <__sflush_r+0x20>
 8016ff2:	2000      	movs	r0, #0
 8016ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ffa:	2e00      	cmp	r6, #0
 8016ffc:	d0f9      	beq.n	8016ff2 <__sflush_r+0x1a>
 8016ffe:	2300      	movs	r3, #0
 8017000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017004:	682f      	ldr	r7, [r5, #0]
 8017006:	6a21      	ldr	r1, [r4, #32]
 8017008:	602b      	str	r3, [r5, #0]
 801700a:	d032      	beq.n	8017072 <__sflush_r+0x9a>
 801700c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801700e:	89a3      	ldrh	r3, [r4, #12]
 8017010:	075a      	lsls	r2, r3, #29
 8017012:	d505      	bpl.n	8017020 <__sflush_r+0x48>
 8017014:	6863      	ldr	r3, [r4, #4]
 8017016:	1ac0      	subs	r0, r0, r3
 8017018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801701a:	b10b      	cbz	r3, 8017020 <__sflush_r+0x48>
 801701c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801701e:	1ac0      	subs	r0, r0, r3
 8017020:	2300      	movs	r3, #0
 8017022:	4602      	mov	r2, r0
 8017024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017026:	6a21      	ldr	r1, [r4, #32]
 8017028:	4628      	mov	r0, r5
 801702a:	47b0      	blx	r6
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	89a3      	ldrh	r3, [r4, #12]
 8017030:	d106      	bne.n	8017040 <__sflush_r+0x68>
 8017032:	6829      	ldr	r1, [r5, #0]
 8017034:	291d      	cmp	r1, #29
 8017036:	d82b      	bhi.n	8017090 <__sflush_r+0xb8>
 8017038:	4a29      	ldr	r2, [pc, #164]	; (80170e0 <__sflush_r+0x108>)
 801703a:	410a      	asrs	r2, r1
 801703c:	07d6      	lsls	r6, r2, #31
 801703e:	d427      	bmi.n	8017090 <__sflush_r+0xb8>
 8017040:	2200      	movs	r2, #0
 8017042:	6062      	str	r2, [r4, #4]
 8017044:	04d9      	lsls	r1, r3, #19
 8017046:	6922      	ldr	r2, [r4, #16]
 8017048:	6022      	str	r2, [r4, #0]
 801704a:	d504      	bpl.n	8017056 <__sflush_r+0x7e>
 801704c:	1c42      	adds	r2, r0, #1
 801704e:	d101      	bne.n	8017054 <__sflush_r+0x7c>
 8017050:	682b      	ldr	r3, [r5, #0]
 8017052:	b903      	cbnz	r3, 8017056 <__sflush_r+0x7e>
 8017054:	6560      	str	r0, [r4, #84]	; 0x54
 8017056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017058:	602f      	str	r7, [r5, #0]
 801705a:	2900      	cmp	r1, #0
 801705c:	d0c9      	beq.n	8016ff2 <__sflush_r+0x1a>
 801705e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017062:	4299      	cmp	r1, r3
 8017064:	d002      	beq.n	801706c <__sflush_r+0x94>
 8017066:	4628      	mov	r0, r5
 8017068:	f7fd fff4 	bl	8015054 <_free_r>
 801706c:	2000      	movs	r0, #0
 801706e:	6360      	str	r0, [r4, #52]	; 0x34
 8017070:	e7c0      	b.n	8016ff4 <__sflush_r+0x1c>
 8017072:	2301      	movs	r3, #1
 8017074:	4628      	mov	r0, r5
 8017076:	47b0      	blx	r6
 8017078:	1c41      	adds	r1, r0, #1
 801707a:	d1c8      	bne.n	801700e <__sflush_r+0x36>
 801707c:	682b      	ldr	r3, [r5, #0]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d0c5      	beq.n	801700e <__sflush_r+0x36>
 8017082:	2b1d      	cmp	r3, #29
 8017084:	d001      	beq.n	801708a <__sflush_r+0xb2>
 8017086:	2b16      	cmp	r3, #22
 8017088:	d101      	bne.n	801708e <__sflush_r+0xb6>
 801708a:	602f      	str	r7, [r5, #0]
 801708c:	e7b1      	b.n	8016ff2 <__sflush_r+0x1a>
 801708e:	89a3      	ldrh	r3, [r4, #12]
 8017090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017094:	81a3      	strh	r3, [r4, #12]
 8017096:	e7ad      	b.n	8016ff4 <__sflush_r+0x1c>
 8017098:	690f      	ldr	r7, [r1, #16]
 801709a:	2f00      	cmp	r7, #0
 801709c:	d0a9      	beq.n	8016ff2 <__sflush_r+0x1a>
 801709e:	0793      	lsls	r3, r2, #30
 80170a0:	680e      	ldr	r6, [r1, #0]
 80170a2:	bf08      	it	eq
 80170a4:	694b      	ldreq	r3, [r1, #20]
 80170a6:	600f      	str	r7, [r1, #0]
 80170a8:	bf18      	it	ne
 80170aa:	2300      	movne	r3, #0
 80170ac:	eba6 0807 	sub.w	r8, r6, r7
 80170b0:	608b      	str	r3, [r1, #8]
 80170b2:	f1b8 0f00 	cmp.w	r8, #0
 80170b6:	dd9c      	ble.n	8016ff2 <__sflush_r+0x1a>
 80170b8:	6a21      	ldr	r1, [r4, #32]
 80170ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170bc:	4643      	mov	r3, r8
 80170be:	463a      	mov	r2, r7
 80170c0:	4628      	mov	r0, r5
 80170c2:	47b0      	blx	r6
 80170c4:	2800      	cmp	r0, #0
 80170c6:	dc06      	bgt.n	80170d6 <__sflush_r+0xfe>
 80170c8:	89a3      	ldrh	r3, [r4, #12]
 80170ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170ce:	81a3      	strh	r3, [r4, #12]
 80170d0:	f04f 30ff 	mov.w	r0, #4294967295
 80170d4:	e78e      	b.n	8016ff4 <__sflush_r+0x1c>
 80170d6:	4407      	add	r7, r0
 80170d8:	eba8 0800 	sub.w	r8, r8, r0
 80170dc:	e7e9      	b.n	80170b2 <__sflush_r+0xda>
 80170de:	bf00      	nop
 80170e0:	dfbffffe 	.word	0xdfbffffe

080170e4 <_fflush_r>:
 80170e4:	b538      	push	{r3, r4, r5, lr}
 80170e6:	690b      	ldr	r3, [r1, #16]
 80170e8:	4605      	mov	r5, r0
 80170ea:	460c      	mov	r4, r1
 80170ec:	b913      	cbnz	r3, 80170f4 <_fflush_r+0x10>
 80170ee:	2500      	movs	r5, #0
 80170f0:	4628      	mov	r0, r5
 80170f2:	bd38      	pop	{r3, r4, r5, pc}
 80170f4:	b118      	cbz	r0, 80170fe <_fflush_r+0x1a>
 80170f6:	6a03      	ldr	r3, [r0, #32]
 80170f8:	b90b      	cbnz	r3, 80170fe <_fflush_r+0x1a>
 80170fa:	f7fd fd7f 	bl	8014bfc <__sinit>
 80170fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d0f3      	beq.n	80170ee <_fflush_r+0xa>
 8017106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017108:	07d0      	lsls	r0, r2, #31
 801710a:	d404      	bmi.n	8017116 <_fflush_r+0x32>
 801710c:	0599      	lsls	r1, r3, #22
 801710e:	d402      	bmi.n	8017116 <_fflush_r+0x32>
 8017110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017112:	f7fd ff68 	bl	8014fe6 <__retarget_lock_acquire_recursive>
 8017116:	4628      	mov	r0, r5
 8017118:	4621      	mov	r1, r4
 801711a:	f7ff ff5d 	bl	8016fd8 <__sflush_r>
 801711e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017120:	07da      	lsls	r2, r3, #31
 8017122:	4605      	mov	r5, r0
 8017124:	d4e4      	bmi.n	80170f0 <_fflush_r+0xc>
 8017126:	89a3      	ldrh	r3, [r4, #12]
 8017128:	059b      	lsls	r3, r3, #22
 801712a:	d4e1      	bmi.n	80170f0 <_fflush_r+0xc>
 801712c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801712e:	f7fd ff5b 	bl	8014fe8 <__retarget_lock_release_recursive>
 8017132:	e7dd      	b.n	80170f0 <_fflush_r+0xc>

08017134 <fiprintf>:
 8017134:	b40e      	push	{r1, r2, r3}
 8017136:	b503      	push	{r0, r1, lr}
 8017138:	4601      	mov	r1, r0
 801713a:	ab03      	add	r3, sp, #12
 801713c:	4805      	ldr	r0, [pc, #20]	; (8017154 <fiprintf+0x20>)
 801713e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017142:	6800      	ldr	r0, [r0, #0]
 8017144:	9301      	str	r3, [sp, #4]
 8017146:	f7ff fb4f 	bl	80167e8 <_vfiprintf_r>
 801714a:	b002      	add	sp, #8
 801714c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017150:	b003      	add	sp, #12
 8017152:	4770      	bx	lr
 8017154:	2400024c 	.word	0x2400024c

08017158 <__sccl>:
 8017158:	b570      	push	{r4, r5, r6, lr}
 801715a:	780b      	ldrb	r3, [r1, #0]
 801715c:	4604      	mov	r4, r0
 801715e:	2b5e      	cmp	r3, #94	; 0x5e
 8017160:	bf0b      	itete	eq
 8017162:	784b      	ldrbeq	r3, [r1, #1]
 8017164:	1c4a      	addne	r2, r1, #1
 8017166:	1c8a      	addeq	r2, r1, #2
 8017168:	2100      	movne	r1, #0
 801716a:	bf08      	it	eq
 801716c:	2101      	moveq	r1, #1
 801716e:	3801      	subs	r0, #1
 8017170:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017174:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017178:	42a8      	cmp	r0, r5
 801717a:	d1fb      	bne.n	8017174 <__sccl+0x1c>
 801717c:	b90b      	cbnz	r3, 8017182 <__sccl+0x2a>
 801717e:	1e50      	subs	r0, r2, #1
 8017180:	bd70      	pop	{r4, r5, r6, pc}
 8017182:	f081 0101 	eor.w	r1, r1, #1
 8017186:	54e1      	strb	r1, [r4, r3]
 8017188:	4610      	mov	r0, r2
 801718a:	4602      	mov	r2, r0
 801718c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017190:	2d2d      	cmp	r5, #45	; 0x2d
 8017192:	d005      	beq.n	80171a0 <__sccl+0x48>
 8017194:	2d5d      	cmp	r5, #93	; 0x5d
 8017196:	d016      	beq.n	80171c6 <__sccl+0x6e>
 8017198:	2d00      	cmp	r5, #0
 801719a:	d0f1      	beq.n	8017180 <__sccl+0x28>
 801719c:	462b      	mov	r3, r5
 801719e:	e7f2      	b.n	8017186 <__sccl+0x2e>
 80171a0:	7846      	ldrb	r6, [r0, #1]
 80171a2:	2e5d      	cmp	r6, #93	; 0x5d
 80171a4:	d0fa      	beq.n	801719c <__sccl+0x44>
 80171a6:	42b3      	cmp	r3, r6
 80171a8:	dcf8      	bgt.n	801719c <__sccl+0x44>
 80171aa:	3002      	adds	r0, #2
 80171ac:	461a      	mov	r2, r3
 80171ae:	3201      	adds	r2, #1
 80171b0:	4296      	cmp	r6, r2
 80171b2:	54a1      	strb	r1, [r4, r2]
 80171b4:	dcfb      	bgt.n	80171ae <__sccl+0x56>
 80171b6:	1af2      	subs	r2, r6, r3
 80171b8:	3a01      	subs	r2, #1
 80171ba:	1c5d      	adds	r5, r3, #1
 80171bc:	42b3      	cmp	r3, r6
 80171be:	bfa8      	it	ge
 80171c0:	2200      	movge	r2, #0
 80171c2:	18ab      	adds	r3, r5, r2
 80171c4:	e7e1      	b.n	801718a <__sccl+0x32>
 80171c6:	4610      	mov	r0, r2
 80171c8:	e7da      	b.n	8017180 <__sccl+0x28>

080171ca <__submore>:
 80171ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ce:	460c      	mov	r4, r1
 80171d0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80171d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171d6:	4299      	cmp	r1, r3
 80171d8:	d11d      	bne.n	8017216 <__submore+0x4c>
 80171da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80171de:	f7fc fd21 	bl	8013c24 <_malloc_r>
 80171e2:	b918      	cbnz	r0, 80171ec <__submore+0x22>
 80171e4:	f04f 30ff 	mov.w	r0, #4294967295
 80171e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80171f2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80171f6:	6360      	str	r0, [r4, #52]	; 0x34
 80171f8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80171fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017200:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017204:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017208:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801720c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017210:	6020      	str	r0, [r4, #0]
 8017212:	2000      	movs	r0, #0
 8017214:	e7e8      	b.n	80171e8 <__submore+0x1e>
 8017216:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017218:	0077      	lsls	r7, r6, #1
 801721a:	463a      	mov	r2, r7
 801721c:	f7fc fdd4 	bl	8013dc8 <_realloc_r>
 8017220:	4605      	mov	r5, r0
 8017222:	2800      	cmp	r0, #0
 8017224:	d0de      	beq.n	80171e4 <__submore+0x1a>
 8017226:	eb00 0806 	add.w	r8, r0, r6
 801722a:	4601      	mov	r1, r0
 801722c:	4632      	mov	r2, r6
 801722e:	4640      	mov	r0, r8
 8017230:	f7fd fedb 	bl	8014fea <memcpy>
 8017234:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017238:	f8c4 8000 	str.w	r8, [r4]
 801723c:	e7e9      	b.n	8017212 <__submore+0x48>

0801723e <__swbuf_r>:
 801723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017240:	460e      	mov	r6, r1
 8017242:	4614      	mov	r4, r2
 8017244:	4605      	mov	r5, r0
 8017246:	b118      	cbz	r0, 8017250 <__swbuf_r+0x12>
 8017248:	6a03      	ldr	r3, [r0, #32]
 801724a:	b90b      	cbnz	r3, 8017250 <__swbuf_r+0x12>
 801724c:	f7fd fcd6 	bl	8014bfc <__sinit>
 8017250:	69a3      	ldr	r3, [r4, #24]
 8017252:	60a3      	str	r3, [r4, #8]
 8017254:	89a3      	ldrh	r3, [r4, #12]
 8017256:	071a      	lsls	r2, r3, #28
 8017258:	d525      	bpl.n	80172a6 <__swbuf_r+0x68>
 801725a:	6923      	ldr	r3, [r4, #16]
 801725c:	b31b      	cbz	r3, 80172a6 <__swbuf_r+0x68>
 801725e:	6823      	ldr	r3, [r4, #0]
 8017260:	6922      	ldr	r2, [r4, #16]
 8017262:	1a98      	subs	r0, r3, r2
 8017264:	6963      	ldr	r3, [r4, #20]
 8017266:	b2f6      	uxtb	r6, r6
 8017268:	4283      	cmp	r3, r0
 801726a:	4637      	mov	r7, r6
 801726c:	dc04      	bgt.n	8017278 <__swbuf_r+0x3a>
 801726e:	4621      	mov	r1, r4
 8017270:	4628      	mov	r0, r5
 8017272:	f7ff ff37 	bl	80170e4 <_fflush_r>
 8017276:	b9e0      	cbnz	r0, 80172b2 <__swbuf_r+0x74>
 8017278:	68a3      	ldr	r3, [r4, #8]
 801727a:	3b01      	subs	r3, #1
 801727c:	60a3      	str	r3, [r4, #8]
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	1c5a      	adds	r2, r3, #1
 8017282:	6022      	str	r2, [r4, #0]
 8017284:	701e      	strb	r6, [r3, #0]
 8017286:	6962      	ldr	r2, [r4, #20]
 8017288:	1c43      	adds	r3, r0, #1
 801728a:	429a      	cmp	r2, r3
 801728c:	d004      	beq.n	8017298 <__swbuf_r+0x5a>
 801728e:	89a3      	ldrh	r3, [r4, #12]
 8017290:	07db      	lsls	r3, r3, #31
 8017292:	d506      	bpl.n	80172a2 <__swbuf_r+0x64>
 8017294:	2e0a      	cmp	r6, #10
 8017296:	d104      	bne.n	80172a2 <__swbuf_r+0x64>
 8017298:	4621      	mov	r1, r4
 801729a:	4628      	mov	r0, r5
 801729c:	f7ff ff22 	bl	80170e4 <_fflush_r>
 80172a0:	b938      	cbnz	r0, 80172b2 <__swbuf_r+0x74>
 80172a2:	4638      	mov	r0, r7
 80172a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a6:	4621      	mov	r1, r4
 80172a8:	4628      	mov	r0, r5
 80172aa:	f000 f805 	bl	80172b8 <__swsetup_r>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d0d5      	beq.n	801725e <__swbuf_r+0x20>
 80172b2:	f04f 37ff 	mov.w	r7, #4294967295
 80172b6:	e7f4      	b.n	80172a2 <__swbuf_r+0x64>

080172b8 <__swsetup_r>:
 80172b8:	b538      	push	{r3, r4, r5, lr}
 80172ba:	4b2a      	ldr	r3, [pc, #168]	; (8017364 <__swsetup_r+0xac>)
 80172bc:	4605      	mov	r5, r0
 80172be:	6818      	ldr	r0, [r3, #0]
 80172c0:	460c      	mov	r4, r1
 80172c2:	b118      	cbz	r0, 80172cc <__swsetup_r+0x14>
 80172c4:	6a03      	ldr	r3, [r0, #32]
 80172c6:	b90b      	cbnz	r3, 80172cc <__swsetup_r+0x14>
 80172c8:	f7fd fc98 	bl	8014bfc <__sinit>
 80172cc:	89a3      	ldrh	r3, [r4, #12]
 80172ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80172d2:	0718      	lsls	r0, r3, #28
 80172d4:	d422      	bmi.n	801731c <__swsetup_r+0x64>
 80172d6:	06d9      	lsls	r1, r3, #27
 80172d8:	d407      	bmi.n	80172ea <__swsetup_r+0x32>
 80172da:	2309      	movs	r3, #9
 80172dc:	602b      	str	r3, [r5, #0]
 80172de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80172e2:	81a3      	strh	r3, [r4, #12]
 80172e4:	f04f 30ff 	mov.w	r0, #4294967295
 80172e8:	e034      	b.n	8017354 <__swsetup_r+0x9c>
 80172ea:	0758      	lsls	r0, r3, #29
 80172ec:	d512      	bpl.n	8017314 <__swsetup_r+0x5c>
 80172ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172f0:	b141      	cbz	r1, 8017304 <__swsetup_r+0x4c>
 80172f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172f6:	4299      	cmp	r1, r3
 80172f8:	d002      	beq.n	8017300 <__swsetup_r+0x48>
 80172fa:	4628      	mov	r0, r5
 80172fc:	f7fd feaa 	bl	8015054 <_free_r>
 8017300:	2300      	movs	r3, #0
 8017302:	6363      	str	r3, [r4, #52]	; 0x34
 8017304:	89a3      	ldrh	r3, [r4, #12]
 8017306:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801730a:	81a3      	strh	r3, [r4, #12]
 801730c:	2300      	movs	r3, #0
 801730e:	6063      	str	r3, [r4, #4]
 8017310:	6923      	ldr	r3, [r4, #16]
 8017312:	6023      	str	r3, [r4, #0]
 8017314:	89a3      	ldrh	r3, [r4, #12]
 8017316:	f043 0308 	orr.w	r3, r3, #8
 801731a:	81a3      	strh	r3, [r4, #12]
 801731c:	6923      	ldr	r3, [r4, #16]
 801731e:	b94b      	cbnz	r3, 8017334 <__swsetup_r+0x7c>
 8017320:	89a3      	ldrh	r3, [r4, #12]
 8017322:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801732a:	d003      	beq.n	8017334 <__swsetup_r+0x7c>
 801732c:	4621      	mov	r1, r4
 801732e:	4628      	mov	r0, r5
 8017330:	f000 f8d2 	bl	80174d8 <__smakebuf_r>
 8017334:	89a0      	ldrh	r0, [r4, #12]
 8017336:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801733a:	f010 0301 	ands.w	r3, r0, #1
 801733e:	d00a      	beq.n	8017356 <__swsetup_r+0x9e>
 8017340:	2300      	movs	r3, #0
 8017342:	60a3      	str	r3, [r4, #8]
 8017344:	6963      	ldr	r3, [r4, #20]
 8017346:	425b      	negs	r3, r3
 8017348:	61a3      	str	r3, [r4, #24]
 801734a:	6923      	ldr	r3, [r4, #16]
 801734c:	b943      	cbnz	r3, 8017360 <__swsetup_r+0xa8>
 801734e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017352:	d1c4      	bne.n	80172de <__swsetup_r+0x26>
 8017354:	bd38      	pop	{r3, r4, r5, pc}
 8017356:	0781      	lsls	r1, r0, #30
 8017358:	bf58      	it	pl
 801735a:	6963      	ldrpl	r3, [r4, #20]
 801735c:	60a3      	str	r3, [r4, #8]
 801735e:	e7f4      	b.n	801734a <__swsetup_r+0x92>
 8017360:	2000      	movs	r0, #0
 8017362:	e7f7      	b.n	8017354 <__swsetup_r+0x9c>
 8017364:	2400024c 	.word	0x2400024c

08017368 <abort>:
 8017368:	b508      	push	{r3, lr}
 801736a:	2006      	movs	r0, #6
 801736c:	f000 f918 	bl	80175a0 <raise>
 8017370:	2001      	movs	r0, #1
 8017372:	f7ec f821 	bl	80033b8 <_exit>

08017376 <_calloc_r>:
 8017376:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017378:	fba1 2402 	umull	r2, r4, r1, r2
 801737c:	b94c      	cbnz	r4, 8017392 <_calloc_r+0x1c>
 801737e:	4611      	mov	r1, r2
 8017380:	9201      	str	r2, [sp, #4]
 8017382:	f7fc fc4f 	bl	8013c24 <_malloc_r>
 8017386:	9a01      	ldr	r2, [sp, #4]
 8017388:	4605      	mov	r5, r0
 801738a:	b930      	cbnz	r0, 801739a <_calloc_r+0x24>
 801738c:	4628      	mov	r0, r5
 801738e:	b003      	add	sp, #12
 8017390:	bd30      	pop	{r4, r5, pc}
 8017392:	220c      	movs	r2, #12
 8017394:	6002      	str	r2, [r0, #0]
 8017396:	2500      	movs	r5, #0
 8017398:	e7f8      	b.n	801738c <_calloc_r+0x16>
 801739a:	4621      	mov	r1, r4
 801739c:	f7fd fd31 	bl	8014e02 <memset>
 80173a0:	e7f4      	b.n	801738c <_calloc_r+0x16>
	...

080173a4 <_strtoul_l.constprop.0>:
 80173a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173a8:	4f36      	ldr	r7, [pc, #216]	; (8017484 <_strtoul_l.constprop.0+0xe0>)
 80173aa:	4686      	mov	lr, r0
 80173ac:	460d      	mov	r5, r1
 80173ae:	4628      	mov	r0, r5
 80173b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173b4:	5d3e      	ldrb	r6, [r7, r4]
 80173b6:	f016 0608 	ands.w	r6, r6, #8
 80173ba:	d1f8      	bne.n	80173ae <_strtoul_l.constprop.0+0xa>
 80173bc:	2c2d      	cmp	r4, #45	; 0x2d
 80173be:	d130      	bne.n	8017422 <_strtoul_l.constprop.0+0x7e>
 80173c0:	782c      	ldrb	r4, [r5, #0]
 80173c2:	2601      	movs	r6, #1
 80173c4:	1c85      	adds	r5, r0, #2
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d057      	beq.n	801747a <_strtoul_l.constprop.0+0xd6>
 80173ca:	2b10      	cmp	r3, #16
 80173cc:	d109      	bne.n	80173e2 <_strtoul_l.constprop.0+0x3e>
 80173ce:	2c30      	cmp	r4, #48	; 0x30
 80173d0:	d107      	bne.n	80173e2 <_strtoul_l.constprop.0+0x3e>
 80173d2:	7828      	ldrb	r0, [r5, #0]
 80173d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80173d8:	2858      	cmp	r0, #88	; 0x58
 80173da:	d149      	bne.n	8017470 <_strtoul_l.constprop.0+0xcc>
 80173dc:	786c      	ldrb	r4, [r5, #1]
 80173de:	2310      	movs	r3, #16
 80173e0:	3502      	adds	r5, #2
 80173e2:	f04f 38ff 	mov.w	r8, #4294967295
 80173e6:	2700      	movs	r7, #0
 80173e8:	fbb8 f8f3 	udiv	r8, r8, r3
 80173ec:	fb03 f908 	mul.w	r9, r3, r8
 80173f0:	ea6f 0909 	mvn.w	r9, r9
 80173f4:	4638      	mov	r0, r7
 80173f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80173fa:	f1bc 0f09 	cmp.w	ip, #9
 80173fe:	d815      	bhi.n	801742c <_strtoul_l.constprop.0+0x88>
 8017400:	4664      	mov	r4, ip
 8017402:	42a3      	cmp	r3, r4
 8017404:	dd23      	ble.n	801744e <_strtoul_l.constprop.0+0xaa>
 8017406:	f1b7 3fff 	cmp.w	r7, #4294967295
 801740a:	d007      	beq.n	801741c <_strtoul_l.constprop.0+0x78>
 801740c:	4580      	cmp	r8, r0
 801740e:	d31b      	bcc.n	8017448 <_strtoul_l.constprop.0+0xa4>
 8017410:	d101      	bne.n	8017416 <_strtoul_l.constprop.0+0x72>
 8017412:	45a1      	cmp	r9, r4
 8017414:	db18      	blt.n	8017448 <_strtoul_l.constprop.0+0xa4>
 8017416:	fb00 4003 	mla	r0, r0, r3, r4
 801741a:	2701      	movs	r7, #1
 801741c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017420:	e7e9      	b.n	80173f6 <_strtoul_l.constprop.0+0x52>
 8017422:	2c2b      	cmp	r4, #43	; 0x2b
 8017424:	bf04      	itt	eq
 8017426:	782c      	ldrbeq	r4, [r5, #0]
 8017428:	1c85      	addeq	r5, r0, #2
 801742a:	e7cc      	b.n	80173c6 <_strtoul_l.constprop.0+0x22>
 801742c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017430:	f1bc 0f19 	cmp.w	ip, #25
 8017434:	d801      	bhi.n	801743a <_strtoul_l.constprop.0+0x96>
 8017436:	3c37      	subs	r4, #55	; 0x37
 8017438:	e7e3      	b.n	8017402 <_strtoul_l.constprop.0+0x5e>
 801743a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801743e:	f1bc 0f19 	cmp.w	ip, #25
 8017442:	d804      	bhi.n	801744e <_strtoul_l.constprop.0+0xaa>
 8017444:	3c57      	subs	r4, #87	; 0x57
 8017446:	e7dc      	b.n	8017402 <_strtoul_l.constprop.0+0x5e>
 8017448:	f04f 37ff 	mov.w	r7, #4294967295
 801744c:	e7e6      	b.n	801741c <_strtoul_l.constprop.0+0x78>
 801744e:	1c7b      	adds	r3, r7, #1
 8017450:	d106      	bne.n	8017460 <_strtoul_l.constprop.0+0xbc>
 8017452:	2322      	movs	r3, #34	; 0x22
 8017454:	f8ce 3000 	str.w	r3, [lr]
 8017458:	4638      	mov	r0, r7
 801745a:	b932      	cbnz	r2, 801746a <_strtoul_l.constprop.0+0xc6>
 801745c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017460:	b106      	cbz	r6, 8017464 <_strtoul_l.constprop.0+0xc0>
 8017462:	4240      	negs	r0, r0
 8017464:	2a00      	cmp	r2, #0
 8017466:	d0f9      	beq.n	801745c <_strtoul_l.constprop.0+0xb8>
 8017468:	b107      	cbz	r7, 801746c <_strtoul_l.constprop.0+0xc8>
 801746a:	1e69      	subs	r1, r5, #1
 801746c:	6011      	str	r1, [r2, #0]
 801746e:	e7f5      	b.n	801745c <_strtoul_l.constprop.0+0xb8>
 8017470:	2430      	movs	r4, #48	; 0x30
 8017472:	2b00      	cmp	r3, #0
 8017474:	d1b5      	bne.n	80173e2 <_strtoul_l.constprop.0+0x3e>
 8017476:	2308      	movs	r3, #8
 8017478:	e7b3      	b.n	80173e2 <_strtoul_l.constprop.0+0x3e>
 801747a:	2c30      	cmp	r4, #48	; 0x30
 801747c:	d0a9      	beq.n	80173d2 <_strtoul_l.constprop.0+0x2e>
 801747e:	230a      	movs	r3, #10
 8017480:	e7af      	b.n	80173e2 <_strtoul_l.constprop.0+0x3e>
 8017482:	bf00      	nop
 8017484:	0801a8d1 	.word	0x0801a8d1

08017488 <_strtoul_r>:
 8017488:	f7ff bf8c 	b.w	80173a4 <_strtoul_l.constprop.0>

0801748c <__swhatbuf_r>:
 801748c:	b570      	push	{r4, r5, r6, lr}
 801748e:	460c      	mov	r4, r1
 8017490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017494:	2900      	cmp	r1, #0
 8017496:	b096      	sub	sp, #88	; 0x58
 8017498:	4615      	mov	r5, r2
 801749a:	461e      	mov	r6, r3
 801749c:	da0d      	bge.n	80174ba <__swhatbuf_r+0x2e>
 801749e:	89a3      	ldrh	r3, [r4, #12]
 80174a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80174a4:	f04f 0100 	mov.w	r1, #0
 80174a8:	bf0c      	ite	eq
 80174aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80174ae:	2340      	movne	r3, #64	; 0x40
 80174b0:	2000      	movs	r0, #0
 80174b2:	6031      	str	r1, [r6, #0]
 80174b4:	602b      	str	r3, [r5, #0]
 80174b6:	b016      	add	sp, #88	; 0x58
 80174b8:	bd70      	pop	{r4, r5, r6, pc}
 80174ba:	466a      	mov	r2, sp
 80174bc:	f000 f878 	bl	80175b0 <_fstat_r>
 80174c0:	2800      	cmp	r0, #0
 80174c2:	dbec      	blt.n	801749e <__swhatbuf_r+0x12>
 80174c4:	9901      	ldr	r1, [sp, #4]
 80174c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80174ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80174ce:	4259      	negs	r1, r3
 80174d0:	4159      	adcs	r1, r3
 80174d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80174d6:	e7eb      	b.n	80174b0 <__swhatbuf_r+0x24>

080174d8 <__smakebuf_r>:
 80174d8:	898b      	ldrh	r3, [r1, #12]
 80174da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80174dc:	079d      	lsls	r5, r3, #30
 80174de:	4606      	mov	r6, r0
 80174e0:	460c      	mov	r4, r1
 80174e2:	d507      	bpl.n	80174f4 <__smakebuf_r+0x1c>
 80174e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80174e8:	6023      	str	r3, [r4, #0]
 80174ea:	6123      	str	r3, [r4, #16]
 80174ec:	2301      	movs	r3, #1
 80174ee:	6163      	str	r3, [r4, #20]
 80174f0:	b002      	add	sp, #8
 80174f2:	bd70      	pop	{r4, r5, r6, pc}
 80174f4:	ab01      	add	r3, sp, #4
 80174f6:	466a      	mov	r2, sp
 80174f8:	f7ff ffc8 	bl	801748c <__swhatbuf_r>
 80174fc:	9900      	ldr	r1, [sp, #0]
 80174fe:	4605      	mov	r5, r0
 8017500:	4630      	mov	r0, r6
 8017502:	f7fc fb8f 	bl	8013c24 <_malloc_r>
 8017506:	b948      	cbnz	r0, 801751c <__smakebuf_r+0x44>
 8017508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801750c:	059a      	lsls	r2, r3, #22
 801750e:	d4ef      	bmi.n	80174f0 <__smakebuf_r+0x18>
 8017510:	f023 0303 	bic.w	r3, r3, #3
 8017514:	f043 0302 	orr.w	r3, r3, #2
 8017518:	81a3      	strh	r3, [r4, #12]
 801751a:	e7e3      	b.n	80174e4 <__smakebuf_r+0xc>
 801751c:	89a3      	ldrh	r3, [r4, #12]
 801751e:	6020      	str	r0, [r4, #0]
 8017520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017524:	81a3      	strh	r3, [r4, #12]
 8017526:	9b00      	ldr	r3, [sp, #0]
 8017528:	6163      	str	r3, [r4, #20]
 801752a:	9b01      	ldr	r3, [sp, #4]
 801752c:	6120      	str	r0, [r4, #16]
 801752e:	b15b      	cbz	r3, 8017548 <__smakebuf_r+0x70>
 8017530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017534:	4630      	mov	r0, r6
 8017536:	f000 f84d 	bl	80175d4 <_isatty_r>
 801753a:	b128      	cbz	r0, 8017548 <__smakebuf_r+0x70>
 801753c:	89a3      	ldrh	r3, [r4, #12]
 801753e:	f023 0303 	bic.w	r3, r3, #3
 8017542:	f043 0301 	orr.w	r3, r3, #1
 8017546:	81a3      	strh	r3, [r4, #12]
 8017548:	89a3      	ldrh	r3, [r4, #12]
 801754a:	431d      	orrs	r5, r3
 801754c:	81a5      	strh	r5, [r4, #12]
 801754e:	e7cf      	b.n	80174f0 <__smakebuf_r+0x18>

08017550 <_raise_r>:
 8017550:	291f      	cmp	r1, #31
 8017552:	b538      	push	{r3, r4, r5, lr}
 8017554:	4604      	mov	r4, r0
 8017556:	460d      	mov	r5, r1
 8017558:	d904      	bls.n	8017564 <_raise_r+0x14>
 801755a:	2316      	movs	r3, #22
 801755c:	6003      	str	r3, [r0, #0]
 801755e:	f04f 30ff 	mov.w	r0, #4294967295
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017566:	b112      	cbz	r2, 801756e <_raise_r+0x1e>
 8017568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801756c:	b94b      	cbnz	r3, 8017582 <_raise_r+0x32>
 801756e:	4620      	mov	r0, r4
 8017570:	f000 f852 	bl	8017618 <_getpid_r>
 8017574:	462a      	mov	r2, r5
 8017576:	4601      	mov	r1, r0
 8017578:	4620      	mov	r0, r4
 801757a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801757e:	f000 b839 	b.w	80175f4 <_kill_r>
 8017582:	2b01      	cmp	r3, #1
 8017584:	d00a      	beq.n	801759c <_raise_r+0x4c>
 8017586:	1c59      	adds	r1, r3, #1
 8017588:	d103      	bne.n	8017592 <_raise_r+0x42>
 801758a:	2316      	movs	r3, #22
 801758c:	6003      	str	r3, [r0, #0]
 801758e:	2001      	movs	r0, #1
 8017590:	e7e7      	b.n	8017562 <_raise_r+0x12>
 8017592:	2400      	movs	r4, #0
 8017594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017598:	4628      	mov	r0, r5
 801759a:	4798      	blx	r3
 801759c:	2000      	movs	r0, #0
 801759e:	e7e0      	b.n	8017562 <_raise_r+0x12>

080175a0 <raise>:
 80175a0:	4b02      	ldr	r3, [pc, #8]	; (80175ac <raise+0xc>)
 80175a2:	4601      	mov	r1, r0
 80175a4:	6818      	ldr	r0, [r3, #0]
 80175a6:	f7ff bfd3 	b.w	8017550 <_raise_r>
 80175aa:	bf00      	nop
 80175ac:	2400024c 	.word	0x2400024c

080175b0 <_fstat_r>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	4d07      	ldr	r5, [pc, #28]	; (80175d0 <_fstat_r+0x20>)
 80175b4:	2300      	movs	r3, #0
 80175b6:	4604      	mov	r4, r0
 80175b8:	4608      	mov	r0, r1
 80175ba:	4611      	mov	r1, r2
 80175bc:	602b      	str	r3, [r5, #0]
 80175be:	f7eb ff21 	bl	8003404 <_fstat>
 80175c2:	1c43      	adds	r3, r0, #1
 80175c4:	d102      	bne.n	80175cc <_fstat_r+0x1c>
 80175c6:	682b      	ldr	r3, [r5, #0]
 80175c8:	b103      	cbz	r3, 80175cc <_fstat_r+0x1c>
 80175ca:	6023      	str	r3, [r4, #0]
 80175cc:	bd38      	pop	{r3, r4, r5, pc}
 80175ce:	bf00      	nop
 80175d0:	24037d40 	.word	0x24037d40

080175d4 <_isatty_r>:
 80175d4:	b538      	push	{r3, r4, r5, lr}
 80175d6:	4d06      	ldr	r5, [pc, #24]	; (80175f0 <_isatty_r+0x1c>)
 80175d8:	2300      	movs	r3, #0
 80175da:	4604      	mov	r4, r0
 80175dc:	4608      	mov	r0, r1
 80175de:	602b      	str	r3, [r5, #0]
 80175e0:	f7eb ff16 	bl	8003410 <_isatty>
 80175e4:	1c43      	adds	r3, r0, #1
 80175e6:	d102      	bne.n	80175ee <_isatty_r+0x1a>
 80175e8:	682b      	ldr	r3, [r5, #0]
 80175ea:	b103      	cbz	r3, 80175ee <_isatty_r+0x1a>
 80175ec:	6023      	str	r3, [r4, #0]
 80175ee:	bd38      	pop	{r3, r4, r5, pc}
 80175f0:	24037d40 	.word	0x24037d40

080175f4 <_kill_r>:
 80175f4:	b538      	push	{r3, r4, r5, lr}
 80175f6:	4d07      	ldr	r5, [pc, #28]	; (8017614 <_kill_r+0x20>)
 80175f8:	2300      	movs	r3, #0
 80175fa:	4604      	mov	r4, r0
 80175fc:	4608      	mov	r0, r1
 80175fe:	4611      	mov	r1, r2
 8017600:	602b      	str	r3, [r5, #0]
 8017602:	f7eb fed1 	bl	80033a8 <_kill>
 8017606:	1c43      	adds	r3, r0, #1
 8017608:	d102      	bne.n	8017610 <_kill_r+0x1c>
 801760a:	682b      	ldr	r3, [r5, #0]
 801760c:	b103      	cbz	r3, 8017610 <_kill_r+0x1c>
 801760e:	6023      	str	r3, [r4, #0]
 8017610:	bd38      	pop	{r3, r4, r5, pc}
 8017612:	bf00      	nop
 8017614:	24037d40 	.word	0x24037d40

08017618 <_getpid_r>:
 8017618:	f7eb bec4 	b.w	80033a4 <_getpid>

0801761c <_init>:
 801761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801761e:	bf00      	nop
 8017620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017622:	bc08      	pop	{r3}
 8017624:	469e      	mov	lr, r3
 8017626:	4770      	bx	lr

08017628 <_fini>:
 8017628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801762a:	bf00      	nop
 801762c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801762e:	bc08      	pop	{r3}
 8017630:	469e      	mov	lr, r3
 8017632:	4770      	bx	lr
